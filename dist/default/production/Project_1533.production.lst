

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 06 18:11:53 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   100                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   101  0000                     
   102                           ; Version 1.45
   103                           ; Generated 16/11/2017 GMT
   104                           ; 
   105                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   106                           ; All rights reserved.
   107                           ; 
   108                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   109                           ; 
   110                           ; Redistribution and use in source and binary forms, with or without modification, are
   111                           ; permitted provided that the following conditions are met:
   112                           ; 
   113                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   114                           ;        conditions and the following disclaimer.
   115                           ; 
   116                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   117                           ;        of conditions and the following disclaimer in the documentation and/or other
   118                           ;        materials provided with the distribution.
   119                           ; 
   120                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   121                           ;        software without specific prior written permission.
   122                           ; 
   123                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   124                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   125                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   126                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   127                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   128                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   129                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   130                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   131                           ; 
   132                           ; 
   133                           ; Code-generator required, PIC18F45K22 Definitions
   134                           ; 
   135                           ; SFR Addresses
   136  0000                     
   137 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   138  0000                     
   139                           	psect	idataCOMRAM
   140  0026D4                     __pidataCOMRAM:
   141                           	opt stack 0
   142                           
   143                           ;initializer for _readAddress
   144  0026D4  4000               	dw	16384
   145  0026D6  0000               	dw	0
   146                           
   147                           ;initializer for _writeAddress
   148  0026D8  4000               	dw	16384
   149  0026DA  0000               	dw	0
   150                           
   151                           	psect	idataBANK0
   152  0026B4                     __pidataBANK0:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _groupsArray
   156  0026B4  A8                 	db	low _GroupRx
   157  0026B5  25                 	db	high _GroupRx
   158  0026B6  CA                 	db	low _GroupTx
   159  0026B7  24                 	db	high _GroupTx
   160  0026B8  88                 	db	low _GroupCommon
   161  0026B9  25                 	db	high _GroupCommon
   162  0026BA  00                 	db	0
   163  0026BB  00                 	db	0
   164  0026BC  00                 	db	0
   165  0026BD  00                 	db	0
   166  0026BE  00                 	db	0
   167  0026BF  00                 	db	0
   168                           
   169                           	psect	mediumconst
   170  007A76                     __pmediumconst:
   171                           	opt stack 0
   172  007A76  00                 	db	0
   173  007A77                     _TEST_PLL_REGISTERS:
   174                           	opt stack 0
   175  007A77  041C               	dw	1052
   176  007A79  0001               	dw	1
   177  007A7B  300B               	dw	12299
   178  007A7D  0061               	dw	97
   179  007A7F  26BA               	dw	9914
   180  007A81  00C0               	dw	192
   181  007A83  FCC9               	dw	64713
   182  007A85  1A19               	dw	6681
   183  007A87  0428               	dw	1064
   184  007A89  102D               	dw	4141
   185  007A8B  00E7               	dw	231
   186  007A8D  1200               	dw	4608
   187  007A8F  6076               	dw	24694
   188  007A91  3505               	dw	13573
   189  007A93  0025               	dw	37
   190  007A95  0080               	dw	128
   191  007A97  8B84               	dw	35716
   192  007A99  3200               	dw	12800
   193  007A9B  0003               	dw	3
   194  007A9D  0000               	dw	0
   195  007A9F  0032               	dw	50
   196  007AA1  0008               	dw	8
   197  007AA3  AAA1               	dw	43681
   198  007AA5  01AA               	dw	426
   199  007AA7  0EDA               	dw	3802
   200  007AA9  0003               	dw	3
   201  007AAB                     __end_of_TEST_PLL_REGISTERS:
   202                           	opt stack 0
   203  007AAB                     _PLL_INIT_REGISTERS:
   204                           	opt stack 0
   205  007AAB  041C               	dw	1052
   206  007AAD  0001               	dw	1
   207  007AAF  300B               	dw	12299
   208  007AB1  0061               	dw	97
   209  007AB3  323A               	dw	12858
   210  007AB5  00C0               	dw	192
   211  007AB7  BCC9               	dw	48329
   212  007AB9  2221               	dw	8737
   213  007ABB  0428               	dw	1064
   214  007ABD  102D               	dw	4141
   215  007ABF  00E7               	dw	231
   216  007AC1  1200               	dw	4608
   217  007AC3  2076               	dw	8310
   218  007AC5  3501               	dw	13569
   219  007AC7  0025               	dw	37
   220  007AC9  0080               	dw	128
   221  007ACB  9B84               	dw	39812
   222  007ACD  3400               	dw	13312
   223  007ACF  0003               	dw	3
   224  007AD1  0000               	dw	0
   225  007AD3  0012               	dw	18
   226  007AD5  0000               	dw	0
   227  007AD7  0001               	dw	1
   228  007AD9  0600               	dw	1536
   229  007ADB  0340               	dw	832
   230  007ADD  0020               	dw	32
   231  007ADF                     __end_of_PLL_INIT_REGISTERS:
   232                           	opt stack 0
   233  007ADF                     _channelArr:
   234                           	opt stack 0
   235  007ADF  07                 	db	7
   236  007AE0  06                 	db	6
   237  007AE1  05                 	db	5
   238  007AE2  04                 	db	4
   239  007AE3  19                 	db	25
   240  007AE4  0A                 	db	10
   241  007AE5  0D                 	db	13
   242  007AE6                     __end_of_channelArr:
   243                           	opt stack 0
   244  007AE6                     exp@coeff:
   245                           	opt stack 0
   246  007AE6  00                 	db	0
   247  007AE7  80                 	db	128
   248  007AE8  3F                 	db	63
   249  007AE9  72                 	db	114
   250  007AEA  31                 	db	49
   251  007AEB  3F                 	db	63
   252  007AEC  FE                 	db	254
   253  007AED  75                 	db	117
   254  007AEE  3E                 	db	62
   255  007AEF  58                 	db	88
   256  007AF0  63                 	db	99
   257  007AF1  3D                 	db	61
   258  007AF2  95                 	db	149
   259  007AF3  1D                 	db	29
   260  007AF4  3C                 	db	60
   261  007AF5  C5                 	db	197
   262  007AF6  AE                 	db	174
   263  007AF7  3A                 	db	58
   264  007AF8  79                 	db	121
   265  007AF9  21                 	db	33
   266  007AFA  39                 	db	57
   267  007AFB  94                 	db	148
   268  007AFC  80                 	db	128
   269  007AFD  37                 	db	55
   270  007AFE  93                 	db	147
   271  007AFF  A7                 	db	167
   272  007B00  35                 	db	53
   273  007B01  56                 	db	86
   274  007B02  15                 	db	21
   275  007B03  34                 	db	52
   276  007B04                     __end_ofexp@coeff:
   277                           	opt stack 0
   278  007B04                     log@coeff:
   279                           	opt stack 0
   280  007B04  00                 	db	0
   281  007B05  00                 	db	0
   282  007B06  00                 	db	0
   283  007B07  00                 	db	0
   284  007B08  80                 	db	128
   285  007B09  3F                 	db	63
   286  007B0A  F0                 	db	240
   287  007B0B  FF                 	db	255
   288  007B0C  BE                 	db	190
   289  007B0D  E2                 	db	226
   290  007B0E  A9                 	db	169
   291  007B0F  3E                 	db	62
   292  007B10  83                 	db	131
   293  007B11  76                 	db	118
   294  007B12  BE                 	db	190
   295  007B13  AE                 	db	174
   296  007B14  2B                 	db	43
   297  007B15  3E                 	db	62
   298  007B16  3C                 	db	60
   299  007B17  C3                 	db	195
   300  007B18  BD                 	db	189
   301  007B19  D2                 	db	210
   302  007B1A  13                 	db	19
   303  007B1B  3D                 	db	61
   304  007B1C  78                 	db	120
   305  007B1D  D3                 	db	211
   306  007B1E  BB                 	db	187
   307  007B1F                     __end_oflog@coeff:
   308                           	opt stack 0
   309  007B1F                     STR_26:
   310                           
   311                           ; BSR set to: 0
   312  007B1F  24                 	db	36
   313  007B20  52                 	db	82	;'R'
   314  007B21  43                 	db	67	;'C'
   315  007B22  50                 	db	80	;'P'
   316  007B23  20                 	db	32
   317  007B24  3C                 	db	60	;'<'
   318  007B25  58                 	db	88	;'X'
   319  007B26  3E                 	db	62	;'>'
   320  007B27  3C                 	db	60	;'<'
   321  007B28  63                 	db	99	;'c'
   322  007B29  72                 	db	114	;'r'
   323  007B2A  3E                 	db	62	;'>'
   324  007B2B  20                 	db	32
   325  007B2C  20                 	db	32
   326  007B2D  20                 	db	32
   327  007B2E  20                 	db	32
   328  007B2F  20                 	db	32
   329  007B30  53                 	db	83	;'S'
   330  007B31  65                 	db	101	;'e'
   331  007B32  74                 	db	116	;'t'
   332  007B33  20                 	db	32
   333  007B34  43                 	db	67	;'C'
   334  007B35  6F                 	db	111	;'o'
   335  007B36  6D                 	db	109	;'m'
   336  007B37  70                 	db	112	;'p'
   337  007B38  72                 	db	114	;'r'
   338  007B39  65                 	db	101	;'e'
   339  007B3A  73                 	db	115	;'s'
   340  007B3B  73                 	db	115	;'s'
   341  007B3C  69                 	db	105	;'i'
   342  007B3D  6F                 	db	111	;'o'
   343  007B3E  6E                 	db	110	;'n'
   344  007B3F  20                 	db	32
   345  007B40  6F                 	db	111	;'o'
   346  007B41  70                 	db	112	;'p'
   347  007B42  65                 	db	101	;'e'
   348  007B43  72                 	db	114	;'r'
   349  007B44  61                 	db	97	;'a'
   350  007B45  74                 	db	116	;'t'
   351  007B46  69                 	db	105	;'i'
   352  007B47  6F                 	db	111	;'o'
   353  007B48  6E                 	db	110	;'n'
   354  007B49  20                 	db	32
   355  007B4A  6D                 	db	109	;'m'
   356  007B4B  6F                 	db	111	;'o'
   357  007B4C  64                 	db	100	;'d'
   358  007B4D  65                 	db	101	;'e'
   359  007B4E  20                 	db	32
   360  007B4F  61                 	db	97	;'a'
   361  007B50  74                 	db	116	;'t'
   362  007B51  20                 	db	32
   363  007B52  52                 	db	82	;'R'
   364  007B53  58                 	db	88	;'X'
   365  007B54  20                 	db	32
   366  007B55  73                 	db	115	;'s'
   367  007B56  79                 	db	121	;'y'
   368  007B57  73                 	db	115	;'s'
   369  007B58  74                 	db	116	;'t'
   370  007B59  65                 	db	101	;'e'
   371  007B5A  6D                 	db	109	;'m'
   372  007B5B  3A                 	db	58	;':'
   373  007B5C  20                 	db	32
   374  007B5D  41                 	db	65	;'A'
   375  007B5E  75                 	db	117	;'u'
   376  007B5F  74                 	db	116	;'t'
   377  007B60  6F                 	db	111	;'o'
   378  007B61  6D                 	db	109	;'m'
   379  007B62  61                 	db	97	;'a'
   380  007B63  74                 	db	116	;'t'
   381  007B64  69                 	db	105	;'i'
   382  007B65  63                 	db	99	;'c'
   383  007B66  5B                 	db	91	;'['
   384  007B67  31                 	db	49	;'1'
   385  007B68  5D                 	db	93	;']'
   386  007B69  20                 	db	32
   387  007B6A  4D                 	db	77	;'M'
   388  007B6B  61                 	db	97	;'a'
   389  007B6C  6E                 	db	110	;'n'
   390  007B6D  75                 	db	117	;'u'
   391  007B6E  61                 	db	97	;'a'
   392  007B6F  6C                 	db	108	;'l'
   393  007B70  5B                 	db	91	;'['
   394  007B71  30                 	db	48	;'0'
   395  007B72  5D                 	db	93	;']'
   396  007B73  20                 	db	32
   397  007B74  5B                 	db	91	;'['
   398  007B75  44                 	db	68	;'D'
   399  007B76  65                 	db	101	;'e'
   400  007B77  66                 	db	102	;'f'
   401  007B78  61                 	db	97	;'a'
   402  007B79  75                 	db	117	;'u'
   403  007B7A  6C                 	db	108	;'l'
   404  007B7B  74                 	db	116	;'t'
   405  007B7C  20                 	db	32
   406  007B7D  3D                 	db	61	;'='
   407  007B7E  20                 	db	32
   408  007B7F  30                 	db	48	;'0'
   409  007B80  5D                 	db	93	;']'
   410  007B81  0D                 	db	13
   411  007B82  0A                 	db	10
   412  007B83  00                 	db	0
   413  007B84                     STR_25:
   414                           
   415                           ; BSR set to: 0
   416  007B84  24                 	db	36
   417  007B85  52                 	db	82	;'R'
   418  007B86  43                 	db	67	;'C'
   419  007B87  52                 	db	82	;'R'
   420  007B88  20                 	db	32
   421  007B89  3C                 	db	60	;'<'
   422  007B8A  58                 	db	88	;'X'
   423  007B8B  3E                 	db	62	;'>'
   424  007B8C  3C                 	db	60	;'<'
   425  007B8D  63                 	db	99	;'c'
   426  007B8E  72                 	db	114	;'r'
   427  007B8F  3E                 	db	62	;'>'
   428  007B90  20                 	db	32
   429  007B91  20                 	db	32
   430  007B92  20                 	db	32
   431  007B93  20                 	db	32
   432  007B94  20                 	db	32
   433  007B95  53                 	db	83	;'S'
   434  007B96  65                 	db	101	;'e'
   435  007B97  74                 	db	116	;'t'
   436  007B98  20                 	db	32
   437  007B99  43                 	db	67	;'C'
   438  007B9A  6F                 	db	111	;'o'
   439  007B9B  6D                 	db	109	;'m'
   440  007B9C  70                 	db	112	;'p'
   441  007B9D  72                 	db	114	;'r'
   442  007B9E  65                 	db	101	;'e'
   443  007B9F  73                 	db	115	;'s'
   444  007BA0  73                 	db	115	;'s'
   445  007BA1  69                 	db	105	;'i'
   446  007BA2  6F                 	db	111	;'o'
   447  007BA3  6E                 	db	110	;'n'
   448  007BA4  20                 	db	32
   449  007BA5  72                 	db	114	;'r'
   450  007BA6  61                 	db	97	;'a'
   451  007BA7  6E                 	db	110	;'n'
   452  007BA8  67                 	db	103	;'g'
   453  007BA9  65                 	db	101	;'e'
   454  007BAA  20                 	db	32
   455  007BAB  61                 	db	97	;'a'
   456  007BAC  74                 	db	116	;'t'
   457  007BAD  20                 	db	32
   458  007BAE  52                 	db	82	;'R'
   459  007BAF  58                 	db	88	;'X'
   460  007BB0  20                 	db	32
   461  007BB1  73                 	db	115	;'s'
   462  007BB2  79                 	db	121	;'y'
   463  007BB3  73                 	db	115	;'s'
   464  007BB4  74                 	db	116	;'t'
   465  007BB5  65                 	db	101	;'e'
   466  007BB6  6D                 	db	109	;'m'
   467  007BB7  2E                 	db	46
   468  007BB8  20                 	db	32
   469  007BB9  48                 	db	72	;'H'
   470  007BBA  69                 	db	105	;'i'
   471  007BBB  67                 	db	103	;'g'
   472  007BBC  68                 	db	104	;'h'
   473  007BBD  20                 	db	32
   474  007BBE  5B                 	db	91	;'['
   475  007BBF  31                 	db	49	;'1'
   476  007BC0  5D                 	db	93	;']'
   477  007BC1  20                 	db	32
   478  007BC2  4C                 	db	76	;'L'
   479  007BC3  6F                 	db	111	;'o'
   480  007BC4  77                 	db	119	;'w'
   481  007BC5  20                 	db	32
   482  007BC6  5B                 	db	91	;'['
   483  007BC7  30                 	db	48	;'0'
   484  007BC8  5D                 	db	93	;']'
   485  007BC9  20                 	db	32
   486  007BCA  5B                 	db	91	;'['
   487  007BCB  44                 	db	68	;'D'
   488  007BCC  65                 	db	101	;'e'
   489  007BCD  66                 	db	102	;'f'
   490  007BCE  61                 	db	97	;'a'
   491  007BCF  75                 	db	117	;'u'
   492  007BD0  6C                 	db	108	;'l'
   493  007BD1  74                 	db	116	;'t'
   494  007BD2  20                 	db	32
   495  007BD3  3D                 	db	61	;'='
   496  007BD4  20                 	db	32
   497  007BD5  30                 	db	48	;'0'
   498  007BD6  5D                 	db	93	;']'
   499  007BD7  0D                 	db	13
   500  007BD8  0A                 	db	10
   501  007BD9  00                 	db	0
   502  007BDA                     STR_30:
   503                           
   504                           ; BSR set to: 0
   505  007BDA  24                 	db	36
   506  007BDB  53                 	db	83	;'S'
   507  007BDC  42                 	db	66	;'B'
   508  007BDD  55                 	db	85	;'U'
   509  007BDE  20                 	db	32
   510  007BDF  3C                 	db	60	;'<'
   511  007BE0  58                 	db	88	;'X'
   512  007BE1  3E                 	db	62	;'>'
   513  007BE2  3C                 	db	60	;'<'
   514  007BE3  63                 	db	99	;'c'
   515  007BE4  72                 	db	114	;'r'
   516  007BE5  3E                 	db	62	;'>'
   517  007BE6  20                 	db	32
   518  007BE7  20                 	db	32
   519  007BE8  20                 	db	32
   520  007BE9  20                 	db	32
   521  007BEA  20                 	db	32
   522  007BEB  53                 	db	83	;'S'
   523  007BEC  65                 	db	101	;'e'
   524  007BED  74                 	db	116	;'t'
   525  007BEE  20                 	db	32
   526  007BEF  55                 	db	85	;'U'
   527  007BF0  41                 	db	65	;'A'
   528  007BF1  52                 	db	82	;'R'
   529  007BF2  54                 	db	84	;'T'
   530  007BF3  20                 	db	32
   531  007BF4  61                 	db	97	;'a'
   532  007BF5  75                 	db	117	;'u'
   533  007BF6  74                 	db	116	;'t'
   534  007BF7  6F                 	db	111	;'o'
   535  007BF8  6D                 	db	109	;'m'
   536  007BF9  61                 	db	97	;'a'
   537  007BFA  74                 	db	116	;'t'
   538  007BFB  69                 	db	105	;'i'
   539  007BFC  63                 	db	99	;'c'
   540  007BFD  20                 	db	32
   541  007BFE  6F                 	db	111	;'o'
   542  007BFF  70                 	db	112	;'p'
   543  007C00  65                 	db	101	;'e'
   544  007C01  72                 	db	114	;'r'
   545  007C02  61                 	db	97	;'a'
   546  007C03  74                 	db	116	;'t'
   547  007C04  69                 	db	105	;'i'
   548  007C05  6F                 	db	111	;'o'
   549  007C06  6E                 	db	110	;'n'
   550  007C07  3A                 	db	58	;':'
   551  007C08  20                 	db	32
   552  007C09  41                 	db	65	;'A'
   553  007C0A  75                 	db	117	;'u'
   554  007C0B  74                 	db	116	;'t'
   555  007C0C  6F                 	db	111	;'o'
   556  007C0D  6D                 	db	109	;'m'
   557  007C0E  61                 	db	97	;'a'
   558  007C0F  74                 	db	116	;'t'
   559  007C10  69                 	db	105	;'i'
   560  007C11  63                 	db	99	;'c'
   561  007C12  5B                 	db	91	;'['
   562  007C13  31                 	db	49	;'1'
   563  007C14  5D                 	db	93	;']'
   564  007C15  20                 	db	32
   565  007C16  4D                 	db	77	;'M'
   566  007C17  61                 	db	97	;'a'
   567  007C18  6E                 	db	110	;'n'
   568  007C19  75                 	db	117	;'u'
   569  007C1A  61                 	db	97	;'a'
   570  007C1B  6C                 	db	108	;'l'
   571  007C1C  5B                 	db	91	;'['
   572  007C1D  30                 	db	48	;'0'
   573  007C1E  5D                 	db	93	;']'
   574  007C1F  20                 	db	32
   575  007C20  5B                 	db	91	;'['
   576  007C21  44                 	db	68	;'D'
   577  007C22  65                 	db	101	;'e'
   578  007C23  66                 	db	102	;'f'
   579  007C24  61                 	db	97	;'a'
   580  007C25  75                 	db	117	;'u'
   581  007C26  6C                 	db	108	;'l'
   582  007C27  74                 	db	116	;'t'
   583  007C28  20                 	db	32
   584  007C29  3D                 	db	61	;'='
   585  007C2A  20                 	db	32
   586  007C2B  30                 	db	48	;'0'
   587  007C2C  5D                 	db	93	;']'
   588  007C2D  0D                 	db	13
   589  007C2E  0A                 	db	10
   590  007C2F  00                 	db	0
   591  007C30                     STR_19:
   592                           
   593                           ; BSR set to: 0
   594  007C30  24                 	db	36
   595  007C31  54                 	db	84	;'T'
   596  007C32  58                 	db	88	;'X'
   597  007C33  20                 	db	32
   598  007C34  3C                 	db	60	;'<'
   599  007C35  58                 	db	88	;'X'
   600  007C36  3E                 	db	62	;'>'
   601  007C37  3C                 	db	60	;'<'
   602  007C38  63                 	db	99	;'c'
   603  007C39  72                 	db	114	;'r'
   604  007C3A  3E                 	db	62	;'>'
   605  007C3B  20                 	db	32
   606  007C3C  20                 	db	32
   607  007C3D  20                 	db	32
   608  007C3E  20                 	db	32
   609  007C3F  20                 	db	32
   610  007C40  20                 	db	32
   611  007C41  54                 	db	84	;'T'
   612  007C42  75                 	db	117	;'u'
   613  007C43  72                 	db	114	;'r'
   614  007C44  6E                 	db	110	;'n'
   615  007C45  20                 	db	32
   616  007C46  6F                 	db	111	;'o'
   617  007C47  6E                 	db	110	;'n'
   618  007C48  5B                 	db	91	;'['
   619  007C49  31                 	db	49	;'1'
   620  007C4A  5D                 	db	93	;']'
   621  007C4B  20                 	db	32
   622  007C4C  2F                 	db	47
   623  007C4D  20                 	db	32
   624  007C4E  6F                 	db	111	;'o'
   625  007C4F  66                 	db	102	;'f'
   626  007C50  66                 	db	102	;'f'
   627  007C51  5B                 	db	91	;'['
   628  007C52  30                 	db	48	;'0'
   629  007C53  5D                 	db	93	;']'
   630  007C54  20                 	db	32
   631  007C55  74                 	db	116	;'t'
   632  007C56  72                 	db	114	;'r'
   633  007C57  61                 	db	97	;'a'
   634  007C58  6E                 	db	110	;'n'
   635  007C59  73                 	db	115	;'s'
   636  007C5A  6D                 	db	109	;'m'
   637  007C5B  69                 	db	105	;'i'
   638  007C5C  73                 	db	115	;'s'
   639  007C5D  73                 	db	115	;'s'
   640  007C5E  69                 	db	105	;'i'
   641  007C5F  6F                 	db	111	;'o'
   642  007C60  6E                 	db	110	;'n'
   643  007C61  20                 	db	32
   644  007C62  61                 	db	97	;'a'
   645  007C63  74                 	db	116	;'t'
   646  007C64  20                 	db	32
   647  007C65  54                 	db	84	;'T'
   648  007C66  58                 	db	88	;'X'
   649  007C67  20                 	db	32
   650  007C68  73                 	db	115	;'s'
   651  007C69  79                 	db	121	;'y'
   652  007C6A  73                 	db	115	;'s'
   653  007C6B  74                 	db	116	;'t'
   654  007C6C  65                 	db	101	;'e'
   655  007C6D  6D                 	db	109	;'m'
   656  007C6E  20                 	db	32
   657  007C6F  5B                 	db	91	;'['
   658  007C70  44                 	db	68	;'D'
   659  007C71  65                 	db	101	;'e'
   660  007C72  66                 	db	102	;'f'
   661  007C73  61                 	db	97	;'a'
   662  007C74  75                 	db	117	;'u'
   663  007C75  6C                 	db	108	;'l'
   664  007C76  74                 	db	116	;'t'
   665  007C77  20                 	db	32
   666  007C78  3D                 	db	61	;'='
   667  007C79  20                 	db	32
   668  007C7A  30                 	db	48	;'0'
   669  007C7B  5D                 	db	93	;']'
   670  007C7C  0D                 	db	13
   671  007C7D  0A                 	db	10
   672  007C7E  00                 	db	0
   673  007C7F                     STR_18:
   674                           
   675                           ; BSR set to: 0
   676  007C7F  24                 	db	36
   677  007C80  54                 	db	84	;'T'
   678  007C81  42                 	db	66	;'B'
   679  007C82  20                 	db	32
   680  007C83  3C                 	db	60	;'<'
   681  007C84  58                 	db	88	;'X'
   682  007C85  3E                 	db	62	;'>'
   683  007C86  3C                 	db	60	;'<'
   684  007C87  63                 	db	99	;'c'
   685  007C88  72                 	db	114	;'r'
   686  007C89  3E                 	db	62	;'>'
   687  007C8A  20                 	db	32
   688  007C8B  20                 	db	32
   689  007C8C  20                 	db	32
   690  007C8D  20                 	db	32
   691  007C8E  20                 	db	32
   692  007C8F  20                 	db	32
   693  007C90  54                 	db	84	;'T'
   694  007C91  75                 	db	117	;'u'
   695  007C92  72                 	db	114	;'r'
   696  007C93  6E                 	db	110	;'n'
   697  007C94  20                 	db	32
   698  007C95  6F                 	db	111	;'o'
   699  007C96  6E                 	db	110	;'n'
   700  007C97  5B                 	db	91	;'['
   701  007C98  31                 	db	49	;'1'
   702  007C99  5D                 	db	93	;']'
   703  007C9A  20                 	db	32
   704  007C9B  2F                 	db	47
   705  007C9C  20                 	db	32
   706  007C9D  6F                 	db	111	;'o'
   707  007C9E  66                 	db	102	;'f'
   708  007C9F  66                 	db	102	;'f'
   709  007CA0  5B                 	db	91	;'['
   710  007CA1  30                 	db	48	;'0'
   711  007CA2  5D                 	db	93	;']'
   712  007CA3  20                 	db	32
   713  007CA4  42                 	db	66	;'B'
   714  007CA5  49                 	db	73	;'I'
   715  007CA6  54                 	db	84	;'T'
   716  007CA7  20                 	db	32
   717  007CA8  6D                 	db	109	;'m'
   718  007CA9  6F                 	db	111	;'o'
   719  007CAA  64                 	db	100	;'d'
   720  007CAB  65                 	db	101	;'e'
   721  007CAC  20                 	db	32
   722  007CAD  61                 	db	97	;'a'
   723  007CAE  74                 	db	116	;'t'
   724  007CAF  20                 	db	32
   725  007CB0  54                 	db	84	;'T'
   726  007CB1  58                 	db	88	;'X'
   727  007CB2  20                 	db	32
   728  007CB3  73                 	db	115	;'s'
   729  007CB4  79                 	db	121	;'y'
   730  007CB5  73                 	db	115	;'s'
   731  007CB6  74                 	db	116	;'t'
   732  007CB7  65                 	db	101	;'e'
   733  007CB8  6D                 	db	109	;'m'
   734  007CB9  20                 	db	32
   735  007CBA  5B                 	db	91	;'['
   736  007CBB  44                 	db	68	;'D'
   737  007CBC  65                 	db	101	;'e'
   738  007CBD  66                 	db	102	;'f'
   739  007CBE  61                 	db	97	;'a'
   740  007CBF  75                 	db	117	;'u'
   741  007CC0  6C                 	db	108	;'l'
   742  007CC1  74                 	db	116	;'t'
   743  007CC2  20                 	db	32
   744  007CC3  3D                 	db	61	;'='
   745  007CC4  20                 	db	32
   746  007CC5  30                 	db	48	;'0'
   747  007CC6  5D                 	db	93	;']'
   748  007CC7  0D                 	db	13
   749  007CC8  0A                 	db	10
   750  007CC9  00                 	db	0
   751  007CCA                     STR_21:
   752                           
   753                           ; BSR set to: 0
   754  007CCA  24                 	db	36
   755  007CCB  52                 	db	82	;'R'
   756  007CCC  49                 	db	73	;'I'
   757  007CCD  20                 	db	32
   758  007CCE  3C                 	db	60	;'<'
   759  007CCF  58                 	db	88	;'X'
   760  007CD0  58                 	db	88	;'X'
   761  007CD1  58                 	db	88	;'X'
   762  007CD2  58                 	db	88	;'X'
   763  007CD3  3E                 	db	62	;'>'
   764  007CD4  3C                 	db	60	;'<'
   765  007CD5  63                 	db	99	;'c'
   766  007CD6  72                 	db	114	;'r'
   767  007CD7  3E                 	db	62	;'>'
   768  007CD8  20                 	db	32
   769  007CD9  20                 	db	32
   770  007CDA  20                 	db	32
   771  007CDB  49                 	db	73	;'I'
   772  007CDC  6E                 	db	110	;'n'
   773  007CDD  69                 	db	105	;'i'
   774  007CDE  74                 	db	116	;'t'
   775  007CDF  20                 	db	32
   776  007CE0  52                 	db	82	;'R'
   777  007CE1  58                 	db	88	;'X'
   778  007CE2  20                 	db	32
   779  007CE3  73                 	db	115	;'s'
   780  007CE4  79                 	db	121	;'y'
   781  007CE5  73                 	db	115	;'s'
   782  007CE6  74                 	db	116	;'t'
   783  007CE7  65                 	db	101	;'e'
   784  007CE8  6D                 	db	109	;'m'
   785  007CE9  20                 	db	32
   786  007CEA  61                 	db	97	;'a'
   787  007CEB  6E                 	db	110	;'n'
   788  007CEC  64                 	db	100	;'d'
   789  007CED  20                 	db	32
   790  007CEE  73                 	db	115	;'s'
   791  007CEF  65                 	db	101	;'e'
   792  007CF0  74                 	db	116	;'t'
   793  007CF1  20                 	db	32
   794  007CF2  66                 	db	102	;'f'
   795  007CF3  72                 	db	114	;'r'
   796  007CF4  65                 	db	101	;'e'
   797  007CF5  71                 	db	113	;'q'
   798  007CF6  75                 	db	117	;'u'
   799  007CF7  65                 	db	101	;'e'
   800  007CF8  6E                 	db	110	;'n'
   801  007CF9  63                 	db	99	;'c'
   802  007CFA  79                 	db	121	;'y'
   803  007CFB  20                 	db	32
   804  007CFC  61                 	db	97	;'a'
   805  007CFD  74                 	db	116	;'t'
   806  007CFE  20                 	db	32
   807  007CFF  58                 	db	88	;'X'
   808  007D00  58                 	db	88	;'X'
   809  007D01  58                 	db	88	;'X'
   810  007D02  58                 	db	88	;'X'
   811  007D03  20                 	db	32
   812  007D04  28                 	db	40
   813  007D05  30                 	db	48	;'0'
   814  007D06  2D                 	db	45
   815  007D07  39                 	db	57	;'9'
   816  007D08  39                 	db	57	;'9'
   817  007D09  39                 	db	57	;'9'
   818  007D0A  39                 	db	57	;'9'
   819  007D0B  29                 	db	41
   820  007D0C  5B                 	db	91	;'['
   821  007D0D  4D                 	db	77	;'M'
   822  007D0E  48                 	db	72	;'H'
   823  007D0F  7A                 	db	122	;'z'
   824  007D10  5D                 	db	93	;']'
   825  007D11  0D                 	db	13
   826  007D12  0A                 	db	10
   827  007D13  00                 	db	0
   828  007D14                     STR_15:
   829                           
   830                           ; BSR set to: 0
   831  007D14  24                 	db	36
   832  007D15  54                 	db	84	;'T'
   833  007D16  49                 	db	73	;'I'
   834  007D17  20                 	db	32
   835  007D18  3C                 	db	60	;'<'
   836  007D19  58                 	db	88	;'X'
   837  007D1A  58                 	db	88	;'X'
   838  007D1B  58                 	db	88	;'X'
   839  007D1C  58                 	db	88	;'X'
   840  007D1D  3E                 	db	62	;'>'
   841  007D1E  3C                 	db	60	;'<'
   842  007D1F  63                 	db	99	;'c'
   843  007D20  72                 	db	114	;'r'
   844  007D21  3E                 	db	62	;'>'
   845  007D22  20                 	db	32
   846  007D23  20                 	db	32
   847  007D24  20                 	db	32
   848  007D25  49                 	db	73	;'I'
   849  007D26  6E                 	db	110	;'n'
   850  007D27  69                 	db	105	;'i'
   851  007D28  74                 	db	116	;'t'
   852  007D29  20                 	db	32
   853  007D2A  54                 	db	84	;'T'
   854  007D2B  58                 	db	88	;'X'
   855  007D2C  20                 	db	32
   856  007D2D  73                 	db	115	;'s'
   857  007D2E  79                 	db	121	;'y'
   858  007D2F  73                 	db	115	;'s'
   859  007D30  74                 	db	116	;'t'
   860  007D31  65                 	db	101	;'e'
   861  007D32  6D                 	db	109	;'m'
   862  007D33  20                 	db	32
   863  007D34  61                 	db	97	;'a'
   864  007D35  6E                 	db	110	;'n'
   865  007D36  64                 	db	100	;'d'
   866  007D37  20                 	db	32
   867  007D38  73                 	db	115	;'s'
   868  007D39  65                 	db	101	;'e'
   869  007D3A  74                 	db	116	;'t'
   870  007D3B  20                 	db	32
   871  007D3C  66                 	db	102	;'f'
   872  007D3D  72                 	db	114	;'r'
   873  007D3E  65                 	db	101	;'e'
   874  007D3F  71                 	db	113	;'q'
   875  007D40  75                 	db	117	;'u'
   876  007D41  65                 	db	101	;'e'
   877  007D42  6E                 	db	110	;'n'
   878  007D43  63                 	db	99	;'c'
   879  007D44  79                 	db	121	;'y'
   880  007D45  20                 	db	32
   881  007D46  28                 	db	40
   882  007D47  30                 	db	48	;'0'
   883  007D48  2D                 	db	45
   884  007D49  39                 	db	57	;'9'
   885  007D4A  39                 	db	57	;'9'
   886  007D4B  39                 	db	57	;'9'
   887  007D4C  39                 	db	57	;'9'
   888  007D4D  29                 	db	41
   889  007D4E  5B                 	db	91	;'['
   890  007D4F  4D                 	db	77	;'M'
   891  007D50  48                 	db	72	;'H'
   892  007D51  7A                 	db	122	;'z'
   893  007D52  5D                 	db	93	;']'
   894  007D53  0D                 	db	13
   895  007D54  0A                 	db	10
   896  007D55  00                 	db	0
   897  007D56                     STR_23:
   898                           
   899                           ; BSR set to: 0
   900  007D56  24                 	db	36
   901  007D57  52                 	db	82	;'R'
   902  007D58  42                 	db	66	;'B'
   903  007D59  20                 	db	32
   904  007D5A  3C                 	db	60	;'<'
   905  007D5B  58                 	db	88	;'X'
   906  007D5C  3E                 	db	62	;'>'
   907  007D5D  3C                 	db	60	;'<'
   908  007D5E  63                 	db	99	;'c'
   909  007D5F  72                 	db	114	;'r'
   910  007D60  3E                 	db	62	;'>'
   911  007D61  20                 	db	32
   912  007D62  20                 	db	32
   913  007D63  20                 	db	32
   914  007D64  20                 	db	32
   915  007D65  20                 	db	32
   916  007D66  20                 	db	32
   917  007D67  54                 	db	84	;'T'
   918  007D68  75                 	db	117	;'u'
   919  007D69  72                 	db	114	;'r'
   920  007D6A  6E                 	db	110	;'n'
   921  007D6B  20                 	db	32
   922  007D6C  6F                 	db	111	;'o'
   923  007D6D  6E                 	db	110	;'n'
   924  007D6E  5B                 	db	91	;'['
   925  007D6F  31                 	db	49	;'1'
   926  007D70  5D                 	db	93	;']'
   927  007D71  20                 	db	32
   928  007D72  2F                 	db	47
   929  007D73  20                 	db	32
   930  007D74  6F                 	db	111	;'o'
   931  007D75  66                 	db	102	;'f'
   932  007D76  66                 	db	102	;'f'
   933  007D77  5B                 	db	91	;'['
   934  007D78  30                 	db	48	;'0'
   935  007D79  5D                 	db	93	;']'
   936  007D7A  20                 	db	32
   937  007D7B  42                 	db	66	;'B'
   938  007D7C  49                 	db	73	;'I'
   939  007D7D  54                 	db	84	;'T'
   940  007D7E  20                 	db	32
   941  007D7F  6D                 	db	109	;'m'
   942  007D80  6F                 	db	111	;'o'
   943  007D81  64                 	db	100	;'d'
   944  007D82  65                 	db	101	;'e'
   945  007D83  20                 	db	32
   946  007D84  61                 	db	97	;'a'
   947  007D85  74                 	db	116	;'t'
   948  007D86  20                 	db	32
   949  007D87  52                 	db	82	;'R'
   950  007D88  58                 	db	88	;'X'
   951  007D89  20                 	db	32
   952  007D8A  73                 	db	115	;'s'
   953  007D8B  79                 	db	121	;'y'
   954  007D8C  73                 	db	115	;'s'
   955  007D8D  74                 	db	116	;'t'
   956  007D8E  65                 	db	101	;'e'
   957  007D8F  6D                 	db	109	;'m'
   958  007D90  2E                 	db	46
   959  007D91  0D                 	db	13
   960  007D92  0A                 	db	10
   961  007D93  00                 	db	0
   962  007D94                     STR_16:
   963                           
   964                           ; BSR set to: 0
   965  007D94  24                 	db	36
   966  007D95  54                 	db	84	;'T'
   967  007D96  46                 	db	70	;'F'
   968  007D97  20                 	db	32
   969  007D98  3C                 	db	60	;'<'
   970  007D99  58                 	db	88	;'X'
   971  007D9A  58                 	db	88	;'X'
   972  007D9B  58                 	db	88	;'X'
   973  007D9C  58                 	db	88	;'X'
   974  007D9D  3E                 	db	62	;'>'
   975  007D9E  3C                 	db	60	;'<'
   976  007D9F  63                 	db	99	;'c'
   977  007DA0  72                 	db	114	;'r'
   978  007DA1  3E                 	db	62	;'>'
   979  007DA2  20                 	db	32
   980  007DA3  20                 	db	32
   981  007DA4  20                 	db	32
   982  007DA5  53                 	db	83	;'S'
   983  007DA6  65                 	db	101	;'e'
   984  007DA7  74                 	db	116	;'t'
   985  007DA8  20                 	db	32
   986  007DA9  54                 	db	84	;'T'
   987  007DAA  58                 	db	88	;'X'
   988  007DAB  20                 	db	32
   989  007DAC  73                 	db	115	;'s'
   990  007DAD  79                 	db	121	;'y'
   991  007DAE  73                 	db	115	;'s'
   992  007DAF  74                 	db	116	;'t'
   993  007DB0  65                 	db	101	;'e'
   994  007DB1  6D                 	db	109	;'m'
   995  007DB2  20                 	db	32
   996  007DB3  66                 	db	102	;'f'
   997  007DB4  72                 	db	114	;'r'
   998  007DB5  65                 	db	101	;'e'
   999  007DB6  71                 	db	113	;'q'
  1000  007DB7  75                 	db	117	;'u'
  1001  007DB8  65                 	db	101	;'e'
  1002  007DB9  6E                 	db	110	;'n'
  1003  007DBA  63                 	db	99	;'c'
  1004  007DBB  79                 	db	121	;'y'
  1005  007DBC  20                 	db	32
  1006  007DBD  61                 	db	97	;'a'
  1007  007DBE  74                 	db	116	;'t'
  1008  007DBF  20                 	db	32
  1009  007DC0  28                 	db	40
  1010  007DC1  30                 	db	48	;'0'
  1011  007DC2  2D                 	db	45
  1012  007DC3  39                 	db	57	;'9'
  1013  007DC4  39                 	db	57	;'9'
  1014  007DC5  39                 	db	57	;'9'
  1015  007DC6  39                 	db	57	;'9'
  1016  007DC7  29                 	db	41
  1017  007DC8  5B                 	db	91	;'['
  1018  007DC9  4D                 	db	77	;'M'
  1019  007DCA  48                 	db	72	;'H'
  1020  007DCB  7A                 	db	122	;'z'
  1021  007DCC  5D                 	db	93	;']'
  1022  007DCD  2E                 	db	46
  1023  007DCE  0D                 	db	13
  1024  007DCF  0A                 	db	10
  1025  007DD0  00                 	db	0
  1026  007DD1                     STR_24:
  1027                           
  1028                           ; BSR set to: 0
  1029  007DD1  24                 	db	36
  1030  007DD2  52                 	db	82	;'R'
  1031  007DD3  58                 	db	88	;'X'
  1032  007DD4  20                 	db	32
  1033  007DD5  3C                 	db	60	;'<'
  1034  007DD6  58                 	db	88	;'X'
  1035  007DD7  3E                 	db	62	;'>'
  1036  007DD8  3C                 	db	60	;'<'
  1037  007DD9  63                 	db	99	;'c'
  1038  007DDA  72                 	db	114	;'r'
  1039  007DDB  3E                 	db	62	;'>'
  1040  007DDC  20                 	db	32
  1041  007DDD  20                 	db	32
  1042  007DDE  20                 	db	32
  1043  007DDF  20                 	db	32
  1044  007DE0  20                 	db	32
  1045  007DE1  20                 	db	32
  1046  007DE2  54                 	db	84	;'T'
  1047  007DE3  75                 	db	117	;'u'
  1048  007DE4  72                 	db	114	;'r'
  1049  007DE5  6E                 	db	110	;'n'
  1050  007DE6  20                 	db	32
  1051  007DE7  6F                 	db	111	;'o'
  1052  007DE8  6E                 	db	110	;'n'
  1053  007DE9  5B                 	db	91	;'['
  1054  007DEA  31                 	db	49	;'1'
  1055  007DEB  5D                 	db	93	;']'
  1056  007DEC  20                 	db	32
  1057  007DED  2F                 	db	47
  1058  007DEE  20                 	db	32
  1059  007DEF  6F                 	db	111	;'o'
  1060  007DF0  66                 	db	102	;'f'
  1061  007DF1  66                 	db	102	;'f'
  1062  007DF2  5B                 	db	91	;'['
  1063  007DF3  30                 	db	48	;'0'
  1064  007DF4  5D                 	db	93	;']'
  1065  007DF5  20                 	db	32
  1066  007DF6  72                 	db	114	;'r'
  1067  007DF7  65                 	db	101	;'e'
  1068  007DF8  63                 	db	99	;'c'
  1069  007DF9  65                 	db	101	;'e'
  1070  007DFA  69                 	db	105	;'i'
  1071  007DFB  76                 	db	118	;'v'
  1072  007DFC  65                 	db	101	;'e'
  1073  007DFD  20                 	db	32
  1074  007DFE  61                 	db	97	;'a'
  1075  007DFF  74                 	db	116	;'t'
  1076  007E00  20                 	db	32
  1077  007E01  52                 	db	82	;'R'
  1078  007E02  58                 	db	88	;'X'
  1079  007E03  20                 	db	32
  1080  007E04  73                 	db	115	;'s'
  1081  007E05  79                 	db	121	;'y'
  1082  007E06  73                 	db	115	;'s'
  1083  007E07  74                 	db	116	;'t'
  1084  007E08  65                 	db	101	;'e'
  1085  007E09  6D                 	db	109	;'m'
  1086  007E0A  2E                 	db	46
  1087  007E0B  0D                 	db	13
  1088  007E0C  0A                 	db	10
  1089  007E0D  00                 	db	0
  1090  007E0E                     STR_29:
  1091                           
  1092                           ; BSR set to: 0
  1093  007E0E  24                 	db	36
  1094  007E0F  53                 	db	83	;'S'
  1095  007E10  42                 	db	66	;'B'
  1096  007E11  54                 	db	84	;'T'
  1097  007E12  20                 	db	32
  1098  007E13  3C                 	db	60	;'<'
  1099  007E14  58                 	db	88	;'X'
  1100  007E15  58                 	db	88	;'X'
  1101  007E16  3E                 	db	62	;'>'
  1102  007E17  3C                 	db	60	;'<'
  1103  007E18  63                 	db	99	;'c'
  1104  007E19  72                 	db	114	;'r'
  1105  007E1A  3E                 	db	62	;'>'
  1106  007E1B  20                 	db	32
  1107  007E1C  20                 	db	32
  1108  007E1D  20                 	db	32
  1109  007E1E  20                 	db	32
  1110  007E1F  53                 	db	83	;'S'
  1111  007E20  65                 	db	101	;'e'
  1112  007E21  74                 	db	116	;'t'
  1113  007E22  20                 	db	32
  1114  007E23  55                 	db	85	;'U'
  1115  007E24  41                 	db	65	;'A'
  1116  007E25  52                 	db	82	;'R'
  1117  007E26  54                 	db	84	;'T'
  1118  007E27  20                 	db	32
  1119  007E28  72                 	db	114	;'r'
  1120  007E29  65                 	db	101	;'e'
  1121  007E2A  66                 	db	102	;'f'
  1122  007E2B  72                 	db	114	;'r'
  1123  007E2C  65                 	db	101	;'e'
  1124  007E2D  73                 	db	115	;'s'
  1125  007E2E  68                 	db	104	;'h'
  1126  007E2F  20                 	db	32
  1127  007E30  72                 	db	114	;'r'
  1128  007E31  61                 	db	97	;'a'
  1129  007E32  74                 	db	116	;'t'
  1130  007E33  65                 	db	101	;'e'
  1131  007E34  20                 	db	32
  1132  007E35  28                 	db	40
  1133  007E36  31                 	db	49	;'1'
  1134  007E37  2D                 	db	45
  1135  007E38  32                 	db	50	;'2'
  1136  007E39  30                 	db	48	;'0'
  1137  007E3A  29                 	db	41
  1138  007E3B  5B                 	db	91	;'['
  1139  007E3C  48                 	db	72	;'H'
  1140  007E3D  7A                 	db	122	;'z'
  1141  007E3E  5D                 	db	93	;']'
  1142  007E3F  2E                 	db	46
  1143  007E40  0D                 	db	13
  1144  007E41  0A                 	db	10
  1145  007E42  00                 	db	0
  1146  007E43                     STR_28:
  1147                           
  1148                           ; BSR set to: 0
  1149  007E43  24                 	db	36
  1150  007E44  53                 	db	83	;'S'
  1151  007E45  48                 	db	72	;'H'
  1152  007E46  20                 	db	32
  1153  007E47  3C                 	db	60	;'<'
  1154  007E48  63                 	db	99	;'c'
  1155  007E49  72                 	db	114	;'r'
  1156  007E4A  3E                 	db	62	;'>'
  1157  007E4B  20                 	db	32
  1158  007E4C  20                 	db	32
  1159  007E4D  20                 	db	32
  1160  007E4E  20                 	db	32
  1161  007E4F  20                 	db	32
  1162  007E50  20                 	db	32
  1163  007E51  20                 	db	32
  1164  007E52  20                 	db	32
  1165  007E53  20                 	db	32
  1166  007E54  50                 	db	80	;'P'
  1167  007E55  72                 	db	114	;'r'
  1168  007E56  69                 	db	105	;'i'
  1169  007E57  6E                 	db	110	;'n'
  1170  007E58  74                 	db	116	;'t'
  1171  007E59  20                 	db	32
  1172  007E5A  73                 	db	115	;'s'
  1173  007E5B  79                 	db	121	;'y'
  1174  007E5C  73                 	db	115	;'s'
  1175  007E5D  74                 	db	116	;'t'
  1176  007E5E  65                 	db	101	;'e'
  1177  007E5F  6D                 	db	109	;'m'
  1178  007E60  20                 	db	32
  1179  007E61  68                 	db	104	;'h'
  1180  007E62  65                 	db	101	;'e'
  1181  007E63  6C                 	db	108	;'l'
  1182  007E64  70                 	db	112	;'p'
  1183  007E65  20                 	db	32
  1184  007E66  6D                 	db	109	;'m'
  1185  007E67  65                 	db	101	;'e'
  1186  007E68  73                 	db	115	;'s'
  1187  007E69  73                 	db	115	;'s'
  1188  007E6A  61                 	db	97	;'a'
  1189  007E6B  67                 	db	103	;'g'
  1190  007E6C  65                 	db	101	;'e'
  1191  007E6D  2E                 	db	46
  1192  007E6E  0D                 	db	13
  1193  007E6F  0A                 	db	10
  1194  007E70  00                 	db	0
  1195  007E71                     STR_17:
  1196                           
  1197                           ; BSR set to: 0
  1198  007E71  24                 	db	36
  1199  007E72  54                 	db	84	;'T'
  1200  007E73  51                 	db	81	;'Q'
  1201  007E74  20                 	db	32
  1202  007E75  3C                 	db	60	;'<'
  1203  007E76  63                 	db	99	;'c'
  1204  007E77  72                 	db	114	;'r'
  1205  007E78  3E                 	db	62	;'>'
  1206  007E79  20                 	db	32
  1207  007E7A  20                 	db	32
  1208  007E7B  20                 	db	32
  1209  007E7C  20                 	db	32
  1210  007E7D  20                 	db	32
  1211  007E7E  20                 	db	32
  1212  007E7F  20                 	db	32
  1213  007E80  20                 	db	32
  1214  007E81  20                 	db	32
  1215  007E82  47                 	db	71	;'G'
  1216  007E83  65                 	db	101	;'e'
  1217  007E84  74                 	db	116	;'t'
  1218  007E85  20                 	db	32
  1219  007E86  73                 	db	115	;'s'
  1220  007E87  74                 	db	116	;'t'
  1221  007E88  61                 	db	97	;'a'
  1222  007E89  74                 	db	116	;'t'
  1223  007E8A  75                 	db	117	;'u'
  1224  007E8B  73                 	db	115	;'s'
  1225  007E8C  20                 	db	32
  1226  007E8D  66                 	db	102	;'f'
  1227  007E8E  72                 	db	114	;'r'
  1228  007E8F  6F                 	db	111	;'o'
  1229  007E90  6D                 	db	109	;'m'
  1230  007E91  20                 	db	32
  1231  007E92  54                 	db	84	;'T'
  1232  007E93  58                 	db	88	;'X'
  1233  007E94  20                 	db	32
  1234  007E95  73                 	db	115	;'s'
  1235  007E96  79                 	db	121	;'y'
  1236  007E97  73                 	db	115	;'s'
  1237  007E98  74                 	db	116	;'t'
  1238  007E99  65                 	db	101	;'e'
  1239  007E9A  6D                 	db	109	;'m'
  1240  007E9B  2E                 	db	46
  1241  007E9C  0D                 	db	13
  1242  007E9D  0A                 	db	10
  1243  007E9E  00                 	db	0
  1244  007E9F                     STR_22:
  1245                           
  1246                           ; BSR set to: 0
  1247  007E9F  24                 	db	36
  1248  007EA0  52                 	db	82	;'R'
  1249  007EA1  51                 	db	81	;'Q'
  1250  007EA2  20                 	db	32
  1251  007EA3  3C                 	db	60	;'<'
  1252  007EA4  63                 	db	99	;'c'
  1253  007EA5  72                 	db	114	;'r'
  1254  007EA6  3E                 	db	62	;'>'
  1255  007EA7  20                 	db	32
  1256  007EA8  20                 	db	32
  1257  007EA9  20                 	db	32
  1258  007EAA  20                 	db	32
  1259  007EAB  20                 	db	32
  1260  007EAC  20                 	db	32
  1261  007EAD  20                 	db	32
  1262  007EAE  20                 	db	32
  1263  007EAF  20                 	db	32
  1264  007EB0  47                 	db	71	;'G'
  1265  007EB1  65                 	db	101	;'e'
  1266  007EB2  74                 	db	116	;'t'
  1267  007EB3  20                 	db	32
  1268  007EB4  73                 	db	115	;'s'
  1269  007EB5  74                 	db	116	;'t'
  1270  007EB6  61                 	db	97	;'a'
  1271  007EB7  74                 	db	116	;'t'
  1272  007EB8  75                 	db	117	;'u'
  1273  007EB9  73                 	db	115	;'s'
  1274  007EBA  20                 	db	32
  1275  007EBB  66                 	db	102	;'f'
  1276  007EBC  72                 	db	114	;'r'
  1277  007EBD  6F                 	db	111	;'o'
  1278  007EBE  6D                 	db	109	;'m'
  1279  007EBF  20                 	db	32
  1280  007EC0  52                 	db	82	;'R'
  1281  007EC1  58                 	db	88	;'X'
  1282  007EC2  20                 	db	32
  1283  007EC3  73                 	db	115	;'s'
  1284  007EC4  79                 	db	121	;'y'
  1285  007EC5  73                 	db	115	;'s'
  1286  007EC6  74                 	db	116	;'t'
  1287  007EC7  65                 	db	101	;'e'
  1288  007EC8  6D                 	db	109	;'m'
  1289  007EC9  0D                 	db	13
  1290  007ECA  0A                 	db	10
  1291  007ECB  00                 	db	0
  1292  007ECC                     STR_31:
  1293                           
  1294                           ; BSR set to: 0
  1295  007ECC  24                 	db	36
  1296  007ECD  53                 	db	83	;'S'
  1297  007ECE  51                 	db	81	;'Q'
  1298  007ECF  20                 	db	32
  1299  007ED0  3C                 	db	60	;'<'
  1300  007ED1  58                 	db	88	;'X'
  1301  007ED2  3E                 	db	62	;'>'
  1302  007ED3  3C                 	db	60	;'<'
  1303  007ED4  63                 	db	99	;'c'
  1304  007ED5  72                 	db	114	;'r'
  1305  007ED6  3E                 	db	62	;'>'
  1306  007ED7  20                 	db	32
  1307  007ED8  20                 	db	32
  1308  007ED9  20                 	db	32
  1309  007EDA  20                 	db	32
  1310  007EDB  20                 	db	32
  1311  007EDC  20                 	db	32
  1312  007EDD  47                 	db	71	;'G'
  1313  007EDE  65                 	db	101	;'e'
  1314  007EDF  74                 	db	116	;'t'
  1315  007EE0  20                 	db	32
  1316  007EE1  73                 	db	115	;'s'
  1317  007EE2  79                 	db	121	;'y'
  1318  007EE3  73                 	db	115	;'s'
  1319  007EE4  74                 	db	116	;'t'
  1320  007EE5  65                 	db	101	;'e'
  1321  007EE6  6D                 	db	109	;'m'
  1322  007EE7  20                 	db	32
  1323  007EE8  73                 	db	115	;'s'
  1324  007EE9  74                 	db	116	;'t'
  1325  007EEA  61                 	db	97	;'a'
  1326  007EEB  74                 	db	116	;'t'
  1327  007EEC  75                 	db	117	;'u'
  1328  007EED  73                 	db	115	;'s'
  1329  007EEE  2E                 	db	46
  1330  007EEF  0D                 	db	13
  1331  007EF0  0A                 	db	10
  1332  007EF1  00                 	db	0
  1333  007EF2                     STR_32:
  1334                           
  1335                           ; BSR set to: 0
  1336  007EF2  24                 	db	36
  1337  007EF3  53                 	db	83	;'S'
  1338  007EF4  4C                 	db	76	;'L'
  1339  007EF5  20                 	db	32
  1340  007EF6  3C                 	db	60	;'<'
  1341  007EF7  63                 	db	99	;'c'
  1342  007EF8  72                 	db	114	;'r'
  1343  007EF9  3E                 	db	62	;'>'
  1344  007EFA  20                 	db	32
  1345  007EFB  20                 	db	32
  1346  007EFC  20                 	db	32
  1347  007EFD  20                 	db	32
  1348  007EFE  20                 	db	32
  1349  007EFF  20                 	db	32
  1350  007F00  20                 	db	32
  1351  007F01  20                 	db	32
  1352  007F02  20                 	db	32
  1353  007F03  54                 	db	84	;'T'
  1354  007F04  65                 	db	101	;'e'
  1355  007F05  73                 	db	115	;'s'
  1356  007F06  74                 	db	116	;'t'
  1357  007F07  20                 	db	32
  1358  007F08  73                 	db	115	;'s'
  1359  007F09  79                 	db	121	;'y'
  1360  007F0A  73                 	db	115	;'s'
  1361  007F0B  74                 	db	116	;'t'
  1362  007F0C  65                 	db	101	;'e'
  1363  007F0D  6D                 	db	109	;'m'
  1364  007F0E  20                 	db	32
  1365  007F0F  4C                 	db	76	;'L'
  1366  007F10  45                 	db	69	;'E'
  1367  007F11  44                 	db	68	;'D'
  1368  007F12  73                 	db	115	;'s'
  1369  007F13  2E                 	db	46
  1370  007F14  0D                 	db	13
  1371  007F15  0A                 	db	10
  1372  007F16  00                 	db	0
  1373  007F17                     STR_5:
  1374                           
  1375                           ; BSR set to: 0
  1376  007F17  2A                 	db	42
  1377  007F18  2A                 	db	42
  1378  007F19  2A                 	db	42
  1379  007F1A  2A                 	db	42
  1380  007F1B  2A                 	db	42
  1381  007F1C  2A                 	db	42
  1382  007F1D  2A                 	db	42
  1383  007F1E  2A                 	db	42
  1384  007F1F  2A                 	db	42
  1385  007F20  2A                 	db	42
  1386  007F21  2A                 	db	42
  1387  007F22  2A                 	db	42
  1388  007F23  2A                 	db	42
  1389  007F24  2A                 	db	42
  1390  007F25  2A                 	db	42
  1391  007F26  2A                 	db	42
  1392  007F27  2A                 	db	42
  1393  007F28  2A                 	db	42
  1394  007F29  2A                 	db	42
  1395  007F2A  2A                 	db	42
  1396  007F2B  2A                 	db	42
  1397  007F2C  2A                 	db	42
  1398  007F2D  2A                 	db	42
  1399  007F2E  2A                 	db	42
  1400  007F2F  2A                 	db	42
  1401  007F30  2A                 	db	42
  1402  007F31  2A                 	db	42
  1403  007F32  20                 	db	32
  1404  007F33  0A                 	db	10
  1405  007F34  0D                 	db	13
  1406  007F35  00                 	db	0
  1407  007F36                     STR_27:
  1408                           
  1409                           ; BSR set to: 0
  1410  007F36  0A                 	db	10
  1411  007F37  0D                 	db	13
  1412  007F38  3C                 	db	60	;'<'
  1413  007F39  43                 	db	67	;'C'
  1414  007F3A  6F                 	db	111	;'o'
  1415  007F3B  6D                 	db	109	;'m'
  1416  007F3C  6D                 	db	109	;'m'
  1417  007F3D  6F                 	db	111	;'o'
  1418  007F3E  6E                 	db	110	;'n'
  1419  007F3F  20                 	db	32
  1420  007F40  73                 	db	115	;'s'
  1421  007F41  79                 	db	121	;'y'
  1422  007F42  73                 	db	115	;'s'
  1423  007F43  74                 	db	116	;'t'
  1424  007F44  65                 	db	101	;'e'
  1425  007F45  6D                 	db	109	;'m'
  1426  007F46  20                 	db	32
  1427  007F47  63                 	db	99	;'c'
  1428  007F48  6F                 	db	111	;'o'
  1429  007F49  6D                 	db	109	;'m'
  1430  007F4A  6D                 	db	109	;'m'
  1431  007F4B  61                 	db	97	;'a'
  1432  007F4C  6E                 	db	110	;'n'
  1433  007F4D  64                 	db	100	;'d'
  1434  007F4E  73                 	db	115	;'s'
  1435  007F4F  3E                 	db	62	;'>'
  1436  007F50  0A                 	db	10
  1437  007F51  0D                 	db	13
  1438  007F52  00                 	db	0
  1439  007F53                     STR_20:
  1440                           
  1441                           ; BSR set to: 0
  1442  007F53  0A                 	db	10
  1443  007F54  0D                 	db	13
  1444  007F55  3C                 	db	60	;'<'
  1445  007F56  52                 	db	82	;'R'
  1446  007F57  58                 	db	88	;'X'
  1447  007F58  20                 	db	32
  1448  007F59  73                 	db	115	;'s'
  1449  007F5A  79                 	db	121	;'y'
  1450  007F5B  73                 	db	115	;'s'
  1451  007F5C  74                 	db	116	;'t'
  1452  007F5D  65                 	db	101	;'e'
  1453  007F5E  6D                 	db	109	;'m'
  1454  007F5F  20                 	db	32
  1455  007F60  63                 	db	99	;'c'
  1456  007F61  6F                 	db	111	;'o'
  1457  007F62  6D                 	db	109	;'m'
  1458  007F63  6D                 	db	109	;'m'
  1459  007F64  61                 	db	97	;'a'
  1460  007F65  6E                 	db	110	;'n'
  1461  007F66  64                 	db	100	;'d'
  1462  007F67  73                 	db	115	;'s'
  1463  007F68  3E                 	db	62	;'>'
  1464  007F69  0A                 	db	10
  1465  007F6A  0D                 	db	13
  1466  007F6B  00                 	db	0
  1467  007F6C                     STR_14:
  1468                           
  1469                           ; BSR set to: 0
  1470  007F6C  3C                 	db	60	;'<'
  1471  007F6D  54                 	db	84	;'T'
  1472  007F6E  58                 	db	88	;'X'
  1473  007F6F  20                 	db	32
  1474  007F70  73                 	db	115	;'s'
  1475  007F71  79                 	db	121	;'y'
  1476  007F72  73                 	db	115	;'s'
  1477  007F73  74                 	db	116	;'t'
  1478  007F74  65                 	db	101	;'e'
  1479  007F75  6D                 	db	109	;'m'
  1480  007F76  20                 	db	32
  1481  007F77  63                 	db	99	;'c'
  1482  007F78  6F                 	db	111	;'o'
  1483  007F79  6D                 	db	109	;'m'
  1484  007F7A  6D                 	db	109	;'m'
  1485  007F7B  61                 	db	97	;'a'
  1486  007F7C  6E                 	db	110	;'n'
  1487  007F7D  64                 	db	100	;'d'
  1488  007F7E  73                 	db	115	;'s'
  1489  007F7F  3E                 	db	62	;'>'
  1490  007F80  0A                 	db	10
  1491  007F81  0D                 	db	13
  1492  007F82  00                 	db	0
  1493  007F83                     STR_6:
  1494                           
  1495                           ; BSR set to: 0
  1496  007F83  46                 	db	70	;'F'
  1497  007F84  41                 	db	65	;'A'
  1498  007F85  53                 	db	83	;'S'
  1499  007F86  54                 	db	84	;'T'
  1500  007F87  20                 	db	32
  1501  007F88  4C                 	db	76	;'L'
  1502  007F89  49                 	db	73	;'I'
  1503  007F8A  4E                 	db	78	;'N'
  1504  007F8B  4B                 	db	75	;'K'
  1505  007F8C  20                 	db	32
  1506  007F8D  53                 	db	83	;'S'
  1507  007F8E  59                 	db	89	;'Y'
  1508  007F8F  53                 	db	83	;'S'
  1509  007F90  54                 	db	84	;'T'
  1510  007F91  45                 	db	69	;'E'
  1511  007F92  4D                 	db	77	;'M'
  1512  007F93  20                 	db	32
  1513  007F94  0A                 	db	10
  1514  007F95  0D                 	db	13
  1515  007F96  00                 	db	0
  1516  007F97                     STR_11:
  1517                           
  1518                           ; BSR set to: 0
  1519  007F97  43                 	db	67	;'C'
  1520  007F98  6F                 	db	111	;'o'
  1521  007F99  6D                 	db	109	;'m'
  1522  007F9A  70                 	db	112	;'p'
  1523  007F9B  69                 	db	105	;'i'
  1524  007F9C  6C                 	db	108	;'l'
  1525  007F9D  65                 	db	101	;'e'
  1526  007F9E  20                 	db	32
  1527  007F9F  74                 	db	116	;'t'
  1528  007FA0  69                 	db	105	;'i'
  1529  007FA1  6D                 	db	109	;'m'
  1530  007FA2  65                 	db	101	;'e'
  1531  007FA3  3A                 	db	58	;':'
  1532  007FA4  20                 	db	32
  1533  007FA5  25                 	db	37
  1534  007FA6  73                 	db	115	;'s'
  1535  007FA7  20                 	db	32
  1536  007FA8  0A                 	db	10
  1537  007FA9  0D                 	db	13
  1538  007FAA  00                 	db	0
  1539  007FAB                     STR_9:
  1540                           
  1541                           ; BSR set to: 0
  1542  007FAB  43                 	db	67	;'C'
  1543  007FAC  6F                 	db	111	;'o'
  1544  007FAD  6D                 	db	109	;'m'
  1545  007FAE  70                 	db	112	;'p'
  1546  007FAF  69                 	db	105	;'i'
  1547  007FB0  6C                 	db	108	;'l'
  1548  007FB1  65                 	db	101	;'e'
  1549  007FB2  20                 	db	32
  1550  007FB3  64                 	db	100	;'d'
  1551  007FB4  61                 	db	97	;'a'
  1552  007FB5  74                 	db	116	;'t'
  1553  007FB6  65                 	db	101	;'e'
  1554  007FB7  3A                 	db	58	;':'
  1555  007FB8  20                 	db	32
  1556  007FB9  25                 	db	37
  1557  007FBA  73                 	db	115	;'s'
  1558  007FBB  20                 	db	32
  1559  007FBC  0A                 	db	10
  1560  007FBD  0D                 	db	13
  1561  007FBE  00                 	db	0
  1562  007FBF                     STR_7:
  1563                           
  1564                           ; BSR set to: 0
  1565  007FBF  53                 	db	83	;'S'
  1566  007FC0  57                 	db	87	;'W'
  1567  007FC1  20                 	db	32
  1568  007FC2  56                 	db	86	;'V'
  1569  007FC3  45                 	db	69	;'E'
  1570  007FC4  53                 	db	83	;'S'
  1571  007FC5  52                 	db	82	;'R'
  1572  007FC6  49                 	db	73	;'I'
  1573  007FC7  4F                 	db	79	;'O'
  1574  007FC8  4E                 	db	78	;'N'
  1575  007FC9  3A                 	db	58	;':'
  1576  007FCA  20                 	db	32
  1577  007FCB  25                 	db	37
  1578  007FCC  73                 	db	115	;'s'
  1579  007FCD  20                 	db	32
  1580  007FCE  0A                 	db	10
  1581  007FCF  0D                 	db	13
  1582  007FD0  00                 	db	0
  1583  007FD1                     STR_10:
  1584                           
  1585                           ; BSR set to: 0
  1586  007FD1  4D                 	db	77	;'M'
  1587  007FD2  61                 	db	97	;'a'
  1588  007FD3  72                 	db	114	;'r'
  1589  007FD4  20                 	db	32
  1590  007FD5  30                 	db	48	;'0'
  1591  007FD6  36                 	db	54	;'6'
  1592  007FD7  20                 	db	32
  1593  007FD8  32                 	db	50	;'2'
  1594  007FD9  30                 	db	48	;'0'
  1595  007FDA  31                 	db	49	;'1'
  1596  007FDB  38                 	db	56	;'8'
  1597  007FDC  00                 	db	0
  1598  007FDD                     STR_1:
  1599                           
  1600                           ; BSR set to: 0
  1601  007FDD  4E                 	db	78	;'N'
  1602  007FDE  4F                 	db	79	;'O'
  1603  007FDF  54                 	db	84	;'T'
  1604  007FE0  20                 	db	32
  1605  007FE1  4F                 	db	79	;'O'
  1606  007FE2  2E                 	db	46
  1607  007FE3  4B                 	db	75	;'K'
  1608  007FE4  20                 	db	32
  1609  007FE5  0A                 	db	10
  1610  007FE6  0D                 	db	13
  1611  007FE7  00                 	db	0
  1612  007FE8                     STR_12:
  1613                           
  1614                           ; BSR set to: 0
  1615  007FE8  31                 	db	49	;'1'
  1616  007FE9  38                 	db	56	;'8'
  1617  007FEA  3A                 	db	58	;':'
  1618  007FEB  31                 	db	49	;'1'
  1619  007FEC  31                 	db	49	;'1'
  1620  007FED  3A                 	db	58	;':'
  1621  007FEE  34                 	db	52	;'4'
  1622  007FEF  39                 	db	57	;'9'
  1623  007FF0  00                 	db	0
  1624  007FF1                     STR_33:
  1625                           
  1626                           ; BSR set to: 0
  1627  007FF1  28                 	db	40
  1628  007FF2  6E                 	db	110	;'n'
  1629  007FF3  75                 	db	117	;'u'
  1630  007FF4  6C                 	db	108	;'l'
  1631  007FF5  6C                 	db	108	;'l'
  1632  007FF6  29                 	db	41
  1633  007FF7  00                 	db	0
  1634  007FF8                     STR_8:
  1635                           
  1636                           ; BSR set to: 0
  1637  007FF8  31                 	db	49	;'1'
  1638  007FF9  5F                 	db	95	;'_'
  1639  007FFA  30                 	db	48	;'0'
  1640  007FFB  30                 	db	48	;'0'
  1641  007FFC  32                 	db	50	;'2'
  1642  007FFD  00                 	db	0
  1643  0000                     
  1644                           ; #config settings
  1645  007FFE  00                 	db	0	; dummy byte at the end
  1646  0000                     
  1647                           	psect	nvCOMRAM
  1648  000046                     __pnvCOMRAM:
  1649                           	opt stack 0
  1650  000046                     _timer0ReloadVal:
  1651                           	opt stack 0
  1652  000046                     	ds	2
  1653                           
  1654                           	psect	nvBANK0
  1655  0000FB                     __pnvBANK0:
  1656                           	opt stack 0
  1657  0000FB                     _TMR0_InterruptHandler:
  1658                           	opt stack 0
  1659  0000FB                     	ds	2
  1660  0000FD                     _eusart1TxBufferRemaining:
  1661                           	opt stack 0
  1662  0000FD                     	ds	1
  1663  0000                     _ANSELA	set	3896
  1664  0000                     _ANSELE	set	3900
  1665  0000                     _ANSELD	set	3899
  1666  0000                     _ANSELB	set	3897
  1667  0000                     _ANSELC	set	3898
  1668  0000                     _ADCON0bits	set	4034
  1669  0000                     _ADRESH	set	4036
  1670  0000                     _ADRESL	set	4035
  1671  0000                     _ADCON2	set	4032
  1672  0000                     _ADCON1	set	4033
  1673  0000                     _ADCON0	set	4034
  1674  0000                     _T0CONbits	set	4053
  1675  0000                     _T0CON	set	4053
  1676  0000                     _TMR0L	set	4054
  1677  0000                     _TMR0H	set	4055
  1678  0000                     _EEDATA	set	4008
  1679  0000                     _EEADR	set	4009
  1680  0000                     _EECON2	set	4007
  1681  0000                     _EECON1bits	set	4006
  1682  0000                     _TABLAT	set	4085
  1683  0000                     _TBLPTRL	set	4086
  1684  0000                     _TBLPTRH	set	4087
  1685  0000                     _TBLPTRU	set	4088
  1686  0000                     _INTCON2bits	set	4081
  1687  0000                     _WPUB	set	3937
  1688  0000                     _TRISD	set	3989
  1689  0000                     _TRISC	set	3988
  1690  0000                     _TRISB	set	3987
  1691  0000                     _TRISA	set	3986
  1692  0000                     _TRISE	set	3990
  1693  0000                     _LATC	set	3979
  1694  0000                     _LATB	set	3978
  1695  0000                     _LATA	set	3977
  1696  0000                     _LATD	set	3980
  1697  0000                     _LATE	set	3981
  1698  0000                     _RCREG1	set	4014
  1699  0000                     _RCSTA1bits	set	4011
  1700  0000                     _TXREG1	set	4013
  1701  0000                     _SPBRGH1	set	4016
  1702  0000                     _SPBRG1	set	4015
  1703  0000                     _TXSTA1	set	4012
  1704  0000                     _RCSTA1	set	4011
  1705  0000                     _BAUDCON1	set	4024
  1706  0000                     _PIR1bits	set	3998
  1707  0000                     _PIE1bits	set	3997
  1708  0000                     _PIR2bits	set	4001
  1709  0000                     _PIE2bits	set	4000
  1710  0000                     _RCONbits	set	4048
  1711  0000                     _OSCTUNE	set	3995
  1712  0000                     _OSCCON2	set	4050
  1713  0000                     _OSCCON	set	4051
  1714  0000                     _LATAbits	set	3977
  1715  0000                     _LATDbits	set	3980
  1716  0000                     _INTCONbits	set	4082
  1717  0000                     _IOCB	set	3938
  1718  0000                     _LATCbits	set	3979
  1719  0000                     _LATBbits	set	3978
  1720                           
  1721                           	psect	cinit
  1722  001C28                     __pcinit:
  1723                           	opt stack 0
  1724  001C28                     start_initialization:
  1725                           	opt stack 0
  1726  001C28                     __initialization:
  1727                           	opt stack 0
  1728                           
  1729                           ; Initialize objects allocated to BANK0 (12 bytes)
  1730                           ; load TBLPTR registers with __pidataBANK0
  1731  001C28  0EB4               	movlw	low __pidataBANK0
  1732  001C2A  6EF6               	movwf	tblptrl,c
  1733  001C2C  0E26               	movlw	high __pidataBANK0
  1734  001C2E  6EF7               	movwf	tblptrh,c
  1735  001C30  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1736  001C32  6EF8               	movwf	tblptru,c
  1737  001C34  EE00  F0EF         	lfsr	0,__pdataBANK0
  1738  001C38  EE10 F00C          	lfsr	1,12
  1739  001C3C                     copy_data0:
  1740  001C3C  0009               	tblrd		*+
  1741  001C3E  CFF5 FFEE          	movff	tablat,postinc0
  1742  001C42  50E5               	movf	postdec1,w,c
  1743  001C44  50E1               	movf	fsr1l,w,c
  1744  001C46  E1FA               	bnz	copy_data0
  1745                           
  1746                           ; Initialize objects allocated to COMRAM (8 bytes)
  1747                           ; load TBLPTR registers with __pidataCOMRAM
  1748  001C48  0ED4               	movlw	low __pidataCOMRAM
  1749  001C4A  6EF6               	movwf	tblptrl,c
  1750  001C4C  0E26               	movlw	high __pidataCOMRAM
  1751  001C4E  6EF7               	movwf	tblptrh,c
  1752  001C50  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1753  001C52  6EF8               	movwf	tblptru,c
  1754  001C54  EE00  F03E         	lfsr	0,__pdataCOMRAM
  1755  001C58  EE10 F008          	lfsr	1,8
  1756  001C5C                     copy_data1:
  1757  001C5C  0009               	tblrd		*+
  1758  001C5E  CFF5 FFEE          	movff	tablat,postinc0
  1759  001C62  50E5               	movf	postdec1,w,c
  1760  001C64  50E1               	movf	fsr1l,w,c
  1761  001C66  E1FA               	bnz	copy_data1
  1762                           
  1763                           ; Clear objects allocated to BANK1 (194 bytes)
  1764  001C68  EE01  F000         	lfsr	0,__pbssBANK1
  1765  001C6C  0EC2               	movlw	194
  1766  001C6E                     clear_0:
  1767  001C6E  6AEE               	clrf	postinc0,c
  1768  001C70  06E8               	decf	wreg,f,c
  1769  001C72  E1FD               	bnz	clear_0
  1770                           
  1771                           ; Clear objects allocated to BANK0 (42 bytes)
  1772  001C74  EE00  F0C5         	lfsr	0,__pbssBANK0
  1773  001C78  0E2A               	movlw	42
  1774  001C7A                     clear_1:
  1775  001C7A  6AEE               	clrf	postinc0,c
  1776  001C7C  06E8               	decf	wreg,f,c
  1777  001C7E  E1FD               	bnz	clear_1
  1778                           
  1779                           ; Clear objects allocated to COMRAM (14 bytes)
  1780  001C80  EE00  F030         	lfsr	0,__pbssCOMRAM
  1781  001C84  0E0E               	movlw	14
  1782  001C86                     clear_2:
  1783  001C86  6AEE               	clrf	postinc0,c
  1784  001C88  06E8               	decf	wreg,f,c
  1785  001C8A  E1FD               	bnz	clear_2
  1786  001C8C                     end_of_initialization:
  1787                           	opt stack 0
  1788  001C8C                     __end_of__initialization:
  1789                           	opt stack 0
  1790  001C8C  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1791  001C8E  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1792  001C90  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1793  001C92  6EF8               	movwf	tblptru,c
  1794  001C94  0100               	movlb	0
  1795  001C96  EF43  F00F         	goto	_main	;jump to C main() function
  1796                           tblptru	equ	0xFF8
  1797                           tblptrh	equ	0xFF7
  1798                           tblptrl	equ	0xFF6
  1799                           tablat	equ	0xFF5
  1800                           postinc0	equ	0xFEE
  1801                           wreg	equ	0xFE8
  1802                           postdec1	equ	0xFE5
  1803                           fsr1l	equ	0xFE1
  1804                           
  1805                           	psect	bssCOMRAM
  1806  000030                     __pbssCOMRAM:
  1807                           	opt stack 0
  1808  000030                     _numOfValidateSamples:
  1809                           	opt stack 0
  1810  000030                     	ds	4
  1811  000034                     TMR0_ISR@CountCallBack:
  1812                           	opt stack 0
  1813  000034                     	ds	2
  1814  000036                     _eusart1RxTail:
  1815                           	opt stack 0
  1816  000036                     	ds	1
  1817  000037                     _eusart1RxHead:
  1818                           	opt stack 0
  1819  000037                     	ds	1
  1820  000038                     _eusart1TxTail:
  1821                           	opt stack 0
  1822  000038                     	ds	1
  1823  000039                     _eusart1TxHead:
  1824                           	opt stack 0
  1825  000039                     	ds	1
  1826  00003A                     _numOfReadSamples:
  1827                           	opt stack 0
  1828  00003A                     	ds	4
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           postinc0	equ	0xFEE
  1834                           wreg	equ	0xFE8
  1835                           postdec1	equ	0xFE5
  1836                           fsr1l	equ	0xFE1
  1837                           
  1838                           	psect	dataCOMRAM
  1839  00003E                     __pdataCOMRAM:
  1840                           	opt stack 0
  1841  00003E                     _readAddress:
  1842                           	opt stack 0
  1843  00003E                     	ds	4
  1844  000042                     _writeAddress:
  1845                           	opt stack 0
  1846  000042                     	ds	4
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           postdec1	equ	0xFE5
  1854                           fsr1l	equ	0xFE1
  1855                           
  1856                           	psect	bssBANK0
  1857  0000C5                     __pbssBANK0:
  1858                           	opt stack 0
  1859  0000C5                     _mcuRunTimeIn5SecTicks:
  1860                           	opt stack 0
  1861  0000C5                     	ds	4
  1862  0000C9                     _errno:
  1863                           	opt stack 0
  1864  0000C9                     	ds	2
  1865  0000CB                     _sampleCount:
  1866                           	opt stack 0
  1867  0000CB                     	ds	2
  1868  0000CD                     _count:
  1869                           	opt stack 0
  1870  0000CD                     	ds	2
  1871  0000CF                     _isReWriteDone:
  1872                           	opt stack 0
  1873  0000CF                     	ds	1
  1874  0000D0                     _msgCount:
  1875                           	opt stack 0
  1876  0000D0                     	ds	1
  1877  0000D1                     _request:
  1878                           	opt stack 0
  1879  0000D1                     	ds	1
  1880  0000D2                     _group:
  1881                           	opt stack 0
  1882  0000D2                     	ds	1
  1883  0000D3                     _cState:
  1884                           	opt stack 0
  1885  0000D3                     	ds	1
  1886  0000D4                     _eusart1RxCount:
  1887                           	opt stack 0
  1888  0000D4                     	ds	1
  1889  0000D5                     _channel:
  1890                           	opt stack 0
  1891  0000D5                     	ds	1
  1892  0000D6                     _adcSampleMode:
  1893                           	opt stack 0
  1894  0000D6                     	ds	1
  1895  0000D7                     _conversionFormat:
  1896                           	opt stack 0
  1897  0000D7                     	ds	1
  1898  0000D8                     _TimerKeepAliveFlag:
  1899                           	opt stack 0
  1900  0000D8                     	ds	1
  1901  0000D9                     _TimerSamplingFlag:
  1902                           	opt stack 0
  1903  0000D9                     	ds	1
  1904  0000DA                     _TimerOneSecFlag:
  1905                           	opt stack 0
  1906  0000DA                     	ds	1
  1907  0000DB                     _rxMsgQueue:
  1908                           	opt stack 0
  1909  0000DB                     	ds	20
  1910                           tblptru	equ	0xFF8
  1911                           tblptrh	equ	0xFF7
  1912                           tblptrl	equ	0xFF6
  1913                           tablat	equ	0xFF5
  1914                           postinc0	equ	0xFEE
  1915                           wreg	equ	0xFE8
  1916                           postdec1	equ	0xFE5
  1917                           fsr1l	equ	0xFE1
  1918                           
  1919                           	psect	dataBANK0
  1920  0000EF                     __pdataBANK0:
  1921                           	opt stack 0
  1922  0000EF                     _groupsArray:
  1923                           	opt stack 0
  1924  0000EF                     	ds	12
  1925                           tblptru	equ	0xFF8
  1926                           tblptrh	equ	0xFF7
  1927                           tblptrl	equ	0xFF6
  1928                           tablat	equ	0xFF5
  1929                           postinc0	equ	0xFEE
  1930                           wreg	equ	0xFE8
  1931                           postdec1	equ	0xFE5
  1932                           fsr1l	equ	0xFE1
  1933                           
  1934                           	psect	bssBANK1
  1935  000100                     __pbssBANK1:
  1936                           	opt stack 0
  1937  000100                     _eusart1TxBuffer:
  1938                           	opt stack 0
  1939  000100                     	ds	70
  1940  000146                     _eusart1RxBuffer:
  1941                           	opt stack 0
  1942  000146                     	ds	40
  1943  00016E                     _sampleArray:
  1944                           	opt stack 0
  1945  00016E                     	ds	64
  1946  0001AE                     _rxMsgData:
  1947                           	opt stack 0
  1948  0001AE                     	ds	20
  1949                           tblptru	equ	0xFF8
  1950                           tblptrh	equ	0xFF7
  1951                           tblptrl	equ	0xFF6
  1952                           tablat	equ	0xFF5
  1953                           postinc0	equ	0xFEE
  1954                           wreg	equ	0xFE8
  1955                           postdec1	equ	0xFE5
  1956                           fsr1l	equ	0xFE1
  1957                           
  1958                           	psect	cstackBANK0
  1959  000060                     __pcstackBANK0:
  1960                           	opt stack 0
  1961  000060                     ??_FlashSampleWrite:
  1962  000060                     ??___ftdiv:
  1963  000060                     SendUartSystemInitMessage@dest:
  1964                           	opt stack 0
  1965  000060                     PrintHelpScreen@dest:
  1966                           	opt stack 0
  1967                           
  1968                           ; 50 bytes @ 0x0
  1969  000060                     	ds	2
  1970  000062                     FlashSampleWrite@rotateLeft:
  1971                           	opt stack 0
  1972                           
  1973                           ; 2 bytes @ 0x2
  1974  000062                     	ds	1
  1975  000063                     ___ftdiv@cntr:
  1976                           	opt stack 0
  1977                           
  1978                           ; 1 bytes @ 0x3
  1979  000063                     	ds	1
  1980  000064                     ___ftdiv@f3:
  1981                           	opt stack 0
  1982                           
  1983                           ; 3 bytes @ 0x4
  1984  000064                     	ds	3
  1985  000067                     ___ftdiv@exp:
  1986                           	opt stack 0
  1987                           
  1988                           ; 1 bytes @ 0x7
  1989  000067                     	ds	1
  1990  000068                     ___ftdiv@sign:
  1991                           	opt stack 0
  1992                           
  1993                           ; 1 bytes @ 0x8
  1994  000068                     	ds	1
  1995  000069                     ?___ftmul:
  1996                           	opt stack 0
  1997  000069                     ___ftmul@f1:
  1998                           	opt stack 0
  1999                           
  2000                           ; 3 bytes @ 0x9
  2001  000069                     	ds	3
  2002  00006C                     ___ftmul@f2:
  2003                           	opt stack 0
  2004                           
  2005                           ; 3 bytes @ 0xC
  2006  00006C                     	ds	3
  2007  00006F                     ??___ftmul:
  2008                           
  2009                           ; 1 bytes @ 0xF
  2010  00006F                     	ds	3
  2011  000072                     ___ftmul@exp:
  2012                           	opt stack 0
  2013                           
  2014                           ; 1 bytes @ 0x12
  2015  000072                     	ds	1
  2016  000073                     ___ftmul@f3_as_product:
  2017                           	opt stack 0
  2018                           
  2019                           ; 3 bytes @ 0x13
  2020  000073                     	ds	3
  2021  000076                     ___ftmul@cntr:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x16
  2025  000076                     	ds	1
  2026  000077                     ___ftmul@sign:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0x17
  2030  000077                     	ds	1
  2031  000078                     ??_CheckFlashPrecentage:
  2032  000078                     ?___ftadd:
  2033                           	opt stack 0
  2034  000078                     ?___fttol:
  2035                           	opt stack 0
  2036  000078                     ___ftadd@f1:
  2037                           	opt stack 0
  2038  000078                     ___fttol@f1:
  2039                           	opt stack 0
  2040                           
  2041                           ; 3 bytes @ 0x18
  2042  000078                     	ds	3
  2043  00007B                     ___ftadd@f2:
  2044                           	opt stack 0
  2045                           
  2046                           ; 3 bytes @ 0x1B
  2047  00007B                     	ds	1
  2048  00007C                     ??___fttol:
  2049  00007C                     CheckFlashPrecentage@precentage:
  2050                           	opt stack 0
  2051                           
  2052                           ; 3 bytes @ 0x1C
  2053  00007C                     	ds	2
  2054  00007E                     ??___ftadd:
  2055                           
  2056                           ; 1 bytes @ 0x1E
  2057  00007E                     	ds	3
  2058  000081                     ___ftadd@sign:
  2059                           	opt stack 0
  2060  000081                     ___fttol@sign1:
  2061                           	opt stack 0
  2062                           
  2063                           ; 1 bytes @ 0x21
  2064  000081                     	ds	1
  2065  000082                     ___ftadd@exp2:
  2066                           	opt stack 0
  2067  000082                     ___fttol@lval:
  2068                           	opt stack 0
  2069                           
  2070                           ; 4 bytes @ 0x22
  2071  000082                     	ds	1
  2072  000083                     ___ftadd@exp1:
  2073                           	opt stack 0
  2074                           
  2075                           ; 1 bytes @ 0x23
  2076  000083                     	ds	1
  2077  000084                     ?___ftsub:
  2078                           	opt stack 0
  2079  000084                     ?_eval_poly:
  2080                           	opt stack 0
  2081  000084                     ___ftsub@f1:
  2082                           	opt stack 0
  2083  000084                     eval_poly@x:
  2084                           	opt stack 0
  2085                           
  2086                           ; 3 bytes @ 0x24
  2087  000084                     	ds	2
  2088  000086                     ___fttol@exp1:
  2089                           	opt stack 0
  2090                           
  2091                           ; 1 bytes @ 0x26
  2092  000086                     	ds	1
  2093  000087                     ?___altoft:
  2094                           	opt stack 0
  2095  000087                     eval_poly@d:
  2096                           	opt stack 0
  2097  000087                     ___ftsub@f2:
  2098                           	opt stack 0
  2099  000087                     ___altoft@c:
  2100                           	opt stack 0
  2101                           
  2102                           ; 4 bytes @ 0x27
  2103  000087                     	ds	2
  2104  000089                     eval_poly@n:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x29
  2108  000089                     	ds	2
  2109  00008B                     ??_eval_poly:
  2110  00008B                     ??___altoft:
  2111                           
  2112                           ; 1 bytes @ 0x2B
  2113  00008B                     	ds	2
  2114  00008D                     eval_poly@res:
  2115                           	opt stack 0
  2116                           
  2117                           ; 3 bytes @ 0x2D
  2118  00008D                     	ds	2
  2119  00008F                     ___altoft@exp:
  2120                           	opt stack 0
  2121                           
  2122                           ; 1 bytes @ 0x2F
  2123  00008F                     	ds	1
  2124  000090                     ?_log:
  2125                           	opt stack 0
  2126  000090                     ?_ldexp:
  2127                           	opt stack 0
  2128  000090                     ___altoft@sign:
  2129                           	opt stack 0
  2130  000090                     ldexp@value:
  2131                           	opt stack 0
  2132  000090                     log@x:
  2133                           	opt stack 0
  2134                           
  2135                           ; 3 bytes @ 0x30
  2136  000090                     	ds	1
  2137  000091                     ?_floor:
  2138                           	opt stack 0
  2139  000091                     floor@x:
  2140                           	opt stack 0
  2141                           
  2142                           ; 3 bytes @ 0x31
  2143  000091                     	ds	1
  2144  000092                     readUartByte@dest:
  2145                           	opt stack 0
  2146                           
  2147                           ; 50 bytes @ 0x32
  2148  000092                     	ds	1
  2149  000093                     ldexp@newexp:
  2150                           	opt stack 0
  2151  000093                     log@exponent:
  2152                           	opt stack 0
  2153                           
  2154                           ; 2 bytes @ 0x33
  2155  000093                     	ds	1
  2156  000094                     floor@i:
  2157                           	opt stack 0
  2158                           
  2159                           ; 3 bytes @ 0x34
  2160  000094                     	ds	1
  2161  000095                     ??_ldexp:
  2162                           
  2163                           ; 1 bytes @ 0x35
  2164  000095                     	ds	2
  2165  000097                     floor@expon:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x37
  2169  000097                     	ds	2
  2170  000099                     ?_exp:
  2171                           	opt stack 0
  2172  000099                     exp@x:
  2173                           	opt stack 0
  2174                           
  2175                           ; 3 bytes @ 0x39
  2176  000099                     	ds	3
  2177  00009C                     _exp$2946:
  2178                           	opt stack 0
  2179                           
  2180                           ; 3 bytes @ 0x3C
  2181  00009C                     	ds	3
  2182  00009F                     exp@exponent:
  2183                           	opt stack 0
  2184                           
  2185                           ; 2 bytes @ 0x3F
  2186  00009F                     	ds	2
  2187  0000A1                     exp@sign:
  2188                           	opt stack 0
  2189                           
  2190                           ; 1 bytes @ 0x41
  2191  0000A1                     	ds	1
  2192  0000A2                     ?_pow:
  2193                           	opt stack 0
  2194  0000A2                     pow@x:
  2195                           	opt stack 0
  2196                           
  2197                           ; 3 bytes @ 0x42
  2198  0000A2                     	ds	3
  2199  0000A5                     pow@y:
  2200                           	opt stack 0
  2201                           
  2202                           ; 3 bytes @ 0x45
  2203  0000A5                     	ds	3
  2204  0000A8                     _pow$2944:
  2205                           	opt stack 0
  2206                           
  2207                           ; 3 bytes @ 0x48
  2208  0000A8                     	ds	3
  2209  0000AB                     _pow$2945:
  2210                           	opt stack 0
  2211                           
  2212                           ; 3 bytes @ 0x4B
  2213  0000AB                     	ds	3
  2214  0000AE                     pow@sign:
  2215                           	opt stack 0
  2216                           
  2217                           ; 1 bytes @ 0x4E
  2218  0000AE                     	ds	1
  2219  0000AF                     pow@yi:
  2220                           	opt stack 0
  2221                           
  2222                           ; 4 bytes @ 0x4F
  2223  0000AF                     	ds	4
  2224  0000B3                     ??_AdcConvert:
  2225                           
  2226                           ; 1 bytes @ 0x53
  2227  0000B3                     	ds	2
  2228  0000B5                     AdcConvert@_adcResult:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x55
  2232  0000B5                     	ds	2
  2233  0000B7                     AdcConvert@_adcResult_258:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x57
  2237  0000B7                     	ds	2
  2238  0000B9                     _AdcConvert$2943:
  2239                           	opt stack 0
  2240                           
  2241                           ; 3 bytes @ 0x59
  2242  0000B9                     	ds	3
  2243  0000BC                     AdcConvert@adcRes:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0x5C
  2247  0000BC                     	ds	2
  2248  0000BE                     AdcConvert@idx:
  2249                           	opt stack 0
  2250                           
  2251                           ; 1 bytes @ 0x5E
  2252  0000BE                     	ds	6
  2253  0000C4                     readUartByte@chRec:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x64
  2257  0000C4                     	ds	1
  2258                           tblptru	equ	0xFF8
  2259                           tblptrh	equ	0xFF7
  2260                           tblptrl	equ	0xFF6
  2261                           tablat	equ	0xFF5
  2262                           postinc0	equ	0xFEE
  2263                           wreg	equ	0xFE8
  2264                           postdec1	equ	0xFE5
  2265                           fsr1l	equ	0xFE1
  2266                           
  2267                           	psect	cstackCOMRAM
  2268  000001                     __pcstackCOMRAM:
  2269                           	opt stack 0
  2270  000001                     ?___lwmod:
  2271                           	opt stack 0
  2272  000001                     ___lwmod@dividend:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x0
  2276  000001                     	ds	2
  2277  000003                     ___lwmod@divisor:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x2
  2281  000003                     	ds	2
  2282  000005                     ___lwmod@counter:
  2283                           	opt stack 0
  2284                           
  2285                           ; 1 bytes @ 0x4
  2286  000005                     	ds	1
  2287  000006                     ??_INTERRUPT_InterruptManager:
  2288                           
  2289                           ; 1 bytes @ 0x5
  2290  000006                     	ds	18
  2291  000018                     ??_EUSART1_Read:
  2292  000018                     ??_BlinkErrorLeds:
  2293  000018                     ??_BlinkOkLeds:
  2294  000018                     ??_keepAliveSignalLed:
  2295  000018                     ??_testLeds:
  2296  000018                     ?_ADC_GetConversion:
  2297                           	opt stack 0
  2298  000018                     ?_sprintf:
  2299                           	opt stack 0
  2300  000018                     ?___wmul:
  2301                           	opt stack 0
  2302  000018                     ?___ftpack:
  2303                           	opt stack 0
  2304  000018                     ?_frexp:
  2305                           	opt stack 0
  2306  000018                     ?___ftneg:
  2307                           	opt stack 0
  2308  000018                     ?___llmod:
  2309                           	opt stack 0
  2310  000018                     InitAdcApplicationMgr@channel:
  2311                           	opt stack 0
  2312  000018                     SwSpi_Data_Pin@cPinMode:
  2313                           	opt stack 0
  2314  000018                     SwSpi_Clk_Pin@cPinMode:
  2315                           	opt stack 0
  2316  000018                     SwSpi_Set_CE_Pin@cPinMode:
  2317                           	opt stack 0
  2318  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  2319                           	opt stack 0
  2320  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  2321                           	opt stack 0
  2322  000018                     EUSART1_Write@txData:
  2323                           	opt stack 0
  2324  000018                     toupper@c:
  2325                           	opt stack 0
  2326  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  2327                           	opt stack 0
  2328  000018                     sprintf@sp:
  2329                           	opt stack 0
  2330  000018                     ___wmul@multiplier:
  2331                           	opt stack 0
  2332  000018                     memset@p1:
  2333                           	opt stack 0
  2334  000018                     ___ftpack@arg:
  2335                           	opt stack 0
  2336  000018                     ___ftge@ff1:
  2337                           	opt stack 0
  2338  000018                     ___ftneg@f1:
  2339                           	opt stack 0
  2340  000018                     frexp@value:
  2341                           	opt stack 0
  2342  000018                     FLASH_EraseBlock@baseAddr:
  2343                           	opt stack 0
  2344  000018                     make8@data:
  2345                           	opt stack 0
  2346  000018                     ___llmod@dividend:
  2347                           	opt stack 0
  2348                           
  2349                           ; 4 bytes @ 0x17
  2350  000018                     	ds	1
  2351  000019                     SwSpi_Data_Pin@phrType:
  2352                           	opt stack 0
  2353  000019                     SwSpi_Clk_Pin@phrType:
  2354                           	opt stack 0
  2355  000019                     SwSpi_Set_CE_Pin@phrType:
  2356                           	opt stack 0
  2357  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  2358                           	opt stack 0
  2359  000019                     testLeds@idx:
  2360                           	opt stack 0
  2361  000019                     UART_Write_Text@text:
  2362                           	opt stack 0
  2363  000019                     EUSART1_Read@readValue:
  2364                           	opt stack 0
  2365                           
  2366                           ; 2 bytes @ 0x18
  2367  000019                     	ds	1
  2368  00001A                     ??_ADC_GetConversion:
  2369  00001A                     ??_TMR0_Initialize:
  2370  00001A                     SWSPI_DAC_send_bits@data:
  2371                           	opt stack 0
  2372  00001A                     SWSPI_Synth_send_bits@data:
  2373                           	opt stack 0
  2374  00001A                     sprintf@f:
  2375                           	opt stack 0
  2376  00001A                     ___wmul@multiplicand:
  2377                           	opt stack 0
  2378  00001A                     memset@c:
  2379                           	opt stack 0
  2380                           
  2381                           ; 2 bytes @ 0x19
  2382  00001A                     	ds	1
  2383  00001B                     BlinkErrorLeds@state:
  2384                           	opt stack 0
  2385  00001B                     BlinkOkLeds@state:
  2386                           	opt stack 0
  2387  00001B                     SWSPI_DAC_send_bits@count:
  2388                           	opt stack 0
  2389  00001B                     SWSPI_Synth_send_bits@count:
  2390                           	opt stack 0
  2391  00001B                     ___ftpack@exp:
  2392                           	opt stack 0
  2393  00001B                     UART_Write_Text@i:
  2394                           	opt stack 0
  2395  00001B                     frexp@eptr:
  2396                           	opt stack 0
  2397  00001B                     ___ftge@ff2:
  2398                           	opt stack 0
  2399                           
  2400                           ; 3 bytes @ 0x1A
  2401  00001B                     	ds	1
  2402  00001C                     SWSPI_DAC_send_bits@phrType:
  2403                           	opt stack 0
  2404  00001C                     SWSPI_Synth_send_bits@phrType:
  2405                           	opt stack 0
  2406  00001C                     FLASH_EraseBlock@GIEBitValue:
  2407                           	opt stack 0
  2408  00001C                     ADC_GetConversion@channel:
  2409                           	opt stack 0
  2410  00001C                     make8@dataLocation:
  2411                           	opt stack 0
  2412  00001C                     ___ftpack@sign:
  2413                           	opt stack 0
  2414  00001C                     BlinkErrorLeds@idx:
  2415                           	opt stack 0
  2416  00001C                     BlinkOkLeds@idx:
  2417                           	opt stack 0
  2418  00001C                     ___wmul@product:
  2419                           	opt stack 0
  2420  00001C                     memset@n:
  2421                           	opt stack 0
  2422  00001C                     ___llmod@divisor:
  2423                           	opt stack 0
  2424                           
  2425                           ; 4 bytes @ 0x1B
  2426  00001C                     	ds	1
  2427  00001D                     ??_make8:
  2428  00001D                     ??___ftpack:
  2429  00001D                     ??_frexp:
  2430  00001D                     FLASH_WriteBlock@writeAddr:
  2431                           	opt stack 0
  2432                           
  2433                           ; 4 bytes @ 0x1C
  2434  00001D                     	ds	1
  2435  00001E                     ??___ftge:
  2436  00001E                     sprintf@flag:
  2437                           	opt stack 0
  2438  00001E                     memset@p:
  2439                           	opt stack 0
  2440                           
  2441                           ; 2 bytes @ 0x1D
  2442  00001E                     	ds	1
  2443  00001F                     sprintf@ap:
  2444                           	opt stack 0
  2445                           
  2446                           ; 2 bytes @ 0x1E
  2447  00001F                     	ds	1
  2448  000020                     ?___awtoft:
  2449                           	opt stack 0
  2450  000020                     ?___lltoft:
  2451                           	opt stack 0
  2452  000020                     ?___lwtoft:
  2453                           	opt stack 0
  2454  000020                     ___llmod@counter:
  2455                           	opt stack 0
  2456  000020                     ZeroArray@array:
  2457                           	opt stack 0
  2458  000020                     ___awtoft@c:
  2459                           	opt stack 0
  2460  000020                     ___lwtoft@c:
  2461                           	opt stack 0
  2462  000020                     ___lltoft@c:
  2463                           	opt stack 0
  2464                           
  2465                           ; 4 bytes @ 0x1F
  2466  000020                     	ds	1
  2467  000021                     sprintf@c:
  2468                           	opt stack 0
  2469  000021                     FLASH_WriteBlock@flashWrBufPtr:
  2470                           	opt stack 0
  2471  000021                     SWSPI_send_word@data:
  2472                           	opt stack 0
  2473                           
  2474                           ; 4 bytes @ 0x20
  2475  000021                     	ds	1
  2476  000022                     ZeroArray@size:
  2477                           	opt stack 0
  2478  000022                     sprintf@cp:
  2479                           	opt stack 0
  2480                           
  2481                           ; 2 bytes @ 0x21
  2482  000022                     	ds	1
  2483  000023                     ??_FLASH_WriteBlock:
  2484  000023                     ___awtoft@sign:
  2485                           	opt stack 0
  2486                           
  2487                           ; 1 bytes @ 0x22
  2488  000023                     	ds	1
  2489  000024                     ??___lltoft:
  2490  000024                     GroupCommon@data:
  2491                           	opt stack 0
  2492  000024                     
  2493                           ; 3 bytes @ 0x23
  2494  000024                     	ds	1
  2495  000025                     SWSPI_send_word@dataSize:
  2496                           	opt stack 0
  2497                           
  2498                           ; 1 bytes @ 0x24
  2499  000025                     	ds	1
  2500  000026                     SWSPI_send_word@datac:
  2501                           	opt stack 0
  2502  000026                     GroupCommon@request:
  2503                           	opt stack 0
  2504                           
  2505                           ; 1 bytes @ 0x25
  2506  000026                     	ds	1
  2507  000027                     GroupRx@request:
  2508                           	opt stack 0
  2509  000027                     GroupTx@request:
  2510                           	opt stack 0
  2511  000027                     SWSPI_send_word@idx:
  2512                           	opt stack 0
  2513  000027                     FLASH_WriteBlock@blockStartAddr:
  2514                           	opt stack 0
  2515                           
  2516                           ; 4 bytes @ 0x26
  2517  000027                     	ds	1
  2518  000028                     ___lltoft@exp:
  2519                           	opt stack 0
  2520                           
  2521                           ; 1 bytes @ 0x27
  2522  000028                     	ds	1
  2523  000029                     ?___ftdiv:
  2524                           	opt stack 0
  2525  000029                     SWSPI_send_word@phrType:
  2526                           	opt stack 0
  2527  000029                     ___ftdiv@f1:
  2528                           	opt stack 0
  2529                           
  2530                           ; 3 bytes @ 0x28
  2531  000029                     	ds	1
  2532  00002A                     ??_PLLInitialize:
  2533                           
  2534                           ; 1 bytes @ 0x29
  2535  00002A                     	ds	1
  2536  00002B                     FLASH_WriteBlock@GIEBitValue:
  2537                           	opt stack 0
  2538                           
  2539                           ; 1 bytes @ 0x2A
  2540  00002B                     	ds	1
  2541  00002C                     FLASH_WriteBlock@i:
  2542                           	opt stack 0
  2543  00002C                     PLLInitialize@idx:
  2544                           	opt stack 0
  2545  00002C                     ___ftdiv@f2:
  2546                           	opt stack 0
  2547                           
  2548                           ; 3 bytes @ 0x2B
  2549  00002C                     	ds	1
  2550  00002D                     FlashSampleWrite@sampleData:
  2551                           	opt stack 0
  2552                           
  2553                           ; 2 bytes @ 0x2C
  2554  00002D                     	ds	1
  2555  00002E                     PLLInitialize@idx_590:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0x2D
  2559  00002E                     	ds	1
  2560  00002F                     FlashSampleWrite@channelNum:
  2561                           	opt stack 0
  2562                           
  2563                           ; 1 bytes @ 0x2E
  2564  00002F                     	ds	1
  2565  000030                     tblptru	equ	0xFF8
  2566                           tblptrh	equ	0xFF7
  2567                           tblptrl	equ	0xFF6
  2568                           tablat	equ	0xFF5
  2569                           postinc0	equ	0xFEE
  2570                           wreg	equ	0xFE8
  2571                           postdec1	equ	0xFE5
  2572                           fsr1l	equ	0xFE1
  2573                           
  2574                           ; 1 bytes @ 0x2F
  2575 ;;
  2576 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2577 ;;
  2578 ;; *************** function _main *****************
  2579 ;; Defined at:
  2580 ;;		line 13 in file "main.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;		None
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;		None
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  1    wreg      void 
  2587 ;; Registers used:
  2588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2594 ;;      Params:         0       0       0       0       0       0       0
  2595 ;;      Locals:         0       0       0       0       0       0       0
  2596 ;;      Temps:          0       0       0       0       0       0       0
  2597 ;;      Totals:         0       0       0       0       0       0       0
  2598 ;;Total ram usage:        0 bytes
  2599 ;; Hardware stack levels required when called:    9
  2600 ;; This function calls:
  2601 ;;		_AdcConvert
  2602 ;;		_BlinkErrorLeds
  2603 ;;		_BlinkOkLeds
  2604 ;;		_CheckFlashPrecentage
  2605 ;;		_InitSystemApplicationManagers
  2606 ;;		_SendUartSystemInitMessage
  2607 ;;		_SetMcuRunTime
  2608 ;;		_SetMcuSystem
  2609 ;;		_keepAliveSignalLed
  2610 ;;		_readUartByte
  2611 ;; This function is called by:
  2612 ;;		Startup code after reset
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           	psect	text0
  2617  001E86                     __ptext0:
  2618                           	opt stack 0
  2619  001E86                     _main:
  2620                           	opt stack 22
  2621                           
  2622                           ;main.c: 16: SetMcuSystem();
  2623                           
  2624                           ;incstack = 0
  2625  001E86  EC60  F013         	call	_SetMcuSystem	;wreg free
  2626                           
  2627                           ;main.c: 19: InitSystemApplicationManagers();
  2628  001E8A  EC25  F013         	call	_InitSystemApplicationManagers	;wreg free
  2629                           
  2630                           ;main.c: 22: SendUartSystemInitMessage();
  2631  001E8E  ECF3  F009         	call	_SendUartSystemInitMessage	;wreg free
  2632                           
  2633                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  2634  001E92  0E03               	movlw	3
  2635  001E94  ECE5  F00E         	call	_BlinkOkLeds
  2636  001E98                     
  2637                           ;main.c: 29: {
  2638                           ;main.c: 30: readUartByte();
  2639  001E98  EC70  F000         	call	_readUartByte	;wreg free
  2640                           
  2641                           ;main.c: 32: if (TimerOneSecFlag == 1)
  2642  001E9C  0100               	movlb	0	; () banked
  2643  001E9E  05DA               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  2644  001EA0  A4D8               	btfss	status,2,c
  2645  001EA2  D006               	goto	l1236
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;main.c: 33: {
  2649                           ;main.c: 35: SetMcuRunTime();
  2650  001EA4  ECC1  F010         	call	_SetMcuRunTime	;wreg free
  2651                           
  2652                           ;main.c: 36: TimerOneSecFlag = 0;
  2653  001EA8  0E00               	movlw	0
  2654  001EAA  0100               	movlb	0	; () banked
  2655  001EAC  6FDA               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  2656                           
  2657                           ;main.c: 37: }
  2658  001EAE  D7F4               	goto	l1235
  2659  001EB0                     l1236:
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 38: else if (TimerSamplingFlag == 1)
  2663                           
  2664                           ; BSR set to: 0
  2665  001EB0  05D9               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  2666  001EB2  A4D8               	btfss	status,2,c
  2667  001EB4  D010               	goto	l1238
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;main.c: 39: {
  2671                           ;main.c: 40: keepAliveSignalLed();
  2672  001EB6  EC0E  F013         	call	_keepAliveSignalLed	;wreg free
  2673                           
  2674                           ;main.c: 42: if(1 == CheckFlashPrecentage())
  2675  001EBA  EC50  F00C         	call	_CheckFlashPrecentage	;wreg free
  2676  001EBE  06E8               	decf	wreg,f,c
  2677  001EC0  A4D8               	btfss	status,2,c
  2678  001EC2  D003               	goto	l1239
  2679                           
  2680                           ;main.c: 43: {
  2681                           ;main.c: 44: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  2682  001EC4  0E04               	movlw	4
  2683  001EC6  EC14  F00F         	call	_BlinkErrorLeds
  2684  001ECA                     l1239:
  2685                           
  2686                           ;main.c: 45: }
  2687                           ;main.c: 48: AdcConvert();
  2688  001ECA  ECD8  F003         	call	_AdcConvert	;wreg free
  2689                           
  2690                           ;main.c: 50: TimerSamplingFlag = 0;
  2691  001ECE  0E00               	movlw	0
  2692  001ED0  0100               	movlb	0	; () banked
  2693  001ED2  6FD9               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  2694                           
  2695                           ;main.c: 51: }
  2696  001ED4  D7E1               	goto	l1235
  2697  001ED6                     l1238:
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 52: else if (TimerKeepAliveFlag == 1)
  2701                           
  2702                           ; BSR set to: 0
  2703  001ED6  05D8               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  2704  001ED8  A4D8               	btfss	status,2,c
  2705  001EDA  D7DE               	goto	l1235
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;main.c: 53: {
  2709                           ;main.c: 55: TimerKeepAliveFlag = 0;
  2710  001EDC  0E00               	movlw	0
  2711  001EDE  6FD8               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  2712                           
  2713                           ; BSR set to: 0
  2714                           
  2715                           ; BSR set to: 0
  2716                           
  2717                           ; BSR set to: 0
  2718                           
  2719                           ; BSR set to: 0
  2720  001EE0  D7DB               	goto	l1235
  2721  001EE2                     __end_of_main:
  2722                           	opt stack 0
  2723                           tblptru	equ	0xFF8
  2724                           tblptrh	equ	0xFF7
  2725                           tblptrl	equ	0xFF6
  2726                           tablat	equ	0xFF5
  2727                           postinc0	equ	0xFEE
  2728                           wreg	equ	0xFE8
  2729                           postdec1	equ	0xFE5
  2730                           fsr1l	equ	0xFE1
  2731                           status	equ	0xFD8
  2732                           
  2733 ;; *************** function _readUartByte *****************
  2734 ;; Defined at:
  2735 ;;		line 26 in file "EusartApp.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;		None
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  dest           50   50[BANK0 ] unsigned char [50]
  2740 ;;  chRec           1  100[BANK0 ] unsigned char 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      void 
  2743 ;; Registers used:
  2744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2750 ;;      Params:         0       0       0       0       0       0       0
  2751 ;;      Locals:         0      51       0       0       0       0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0
  2753 ;;      Totals:         0      51       0       0       0       0       0
  2754 ;;Total ram usage:       51 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    7
  2757 ;; This function calls:
  2758 ;;		_EUSART1_Read
  2759 ;;		_GroupCommon
  2760 ;;		_GroupRx
  2761 ;;		_GroupTx
  2762 ;;		_InitRxMessageParams
  2763 ;;		_UART_Write_Text
  2764 ;;		_sprintf
  2765 ;;		_toupper
  2766 ;; This function is called by:
  2767 ;;		_main
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text1
  2772  0000E0                     __ptext1:
  2773                           	opt stack 0
  2774  0000E0                     _readUartByte:
  2775                           	opt stack 23
  2776                           
  2777                           ;EusartApp.c: 29: uint8_t chRec = (0);
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;incstack = 0
  2781  0000E0  0E00               	movlw	0
  2782  0000E2  0100               	movlb	0	; () banked
  2783  0000E4  6FC4               	movwf	readUartByte@chRec& (0+255),b
  2784                           
  2785                           ;EusartApp.c: 30: char dest[50];
  2786                           ;EusartApp.c: 32: switch(cState)
  2787  0000E6  D123               	goto	l154
  2788  0000E8                     
  2789                           ; BSR set to: 0
  2790                           ;EusartApp.c: 36: InitRxMessageParams();
  2791                           
  2792                           ; BSR set to: 0
  2793  0000E8  EC8E  F012         	call	_InitRxMessageParams	;wreg free
  2794                           
  2795                           ;EusartApp.c: 37: cState = FIND_MAGIC;
  2796  0000EC  0E01               	movlw	1
  2797  0000EE  0100               	movlb	0	; () banked
  2798  0000F0  6FD3               	movwf	_cState& (0+255),b
  2799                           
  2800                           ;EusartApp.c: 38: break;
  2801  0000F2  0012               	return	
  2802  0000F4                     
  2803                           ; BSR set to: 0
  2804                           ;EusartApp.c: 42: chRec = EUSART1_Read();
  2805                           
  2806                           ; BSR set to: 0
  2807  0000F4  EC9F  F010         	call	_EUSART1_Read	;wreg free
  2808  0000F8  0100               	movlb	0	; () banked
  2809  0000FA  6FC4               	movwf	readUartByte@chRec& (0+255),b
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;EusartApp.c: 44: if(chRec == (0x24))
  2813  0000FC  0E24               	movlw	36
  2814  0000FE  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  2815  000100  A4D8               	btfss	status,2,c
  2816  000102  0012               	return	
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;EusartApp.c: 45: {
  2820                           ;EusartApp.c: 46: cState = READ_STREAM;
  2821  000104  0E02               	movlw	2
  2822  000106  6FD3               	movwf	_cState& (0+255),b
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;EusartApp.c: 47: }
  2826                           ;EusartApp.c: 48: break;
  2827  000108  0012               	return	
  2828  00010A                     
  2829                           ; BSR set to: 0
  2830                           ;EusartApp.c: 52: if(eusart1RxCount > 0)
  2831                           
  2832                           ; BSR set to: 0
  2833  00010A  51D4               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2834  00010C  B4D8               	btfsc	status,2,c
  2835  00010E  0012               	return	
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;EusartApp.c: 53: {
  2839                           ;EusartApp.c: 54: chRec = EUSART1_Read();
  2840  000110  EC9F  F010         	call	_EUSART1_Read	;wreg free
  2841  000114  0100               	movlb	0	; () banked
  2842  000116  6FC4               	movwf	readUartByte@chRec& (0+255),b
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;EusartApp.c: 55: if(chRec == (0))
  2846  000118  51C4               	movf	readUartByte@chRec& (0+255),w,b
  2847  00011A  B4D8               	btfsc	status,2,c
  2848  00011C  0012               	return	
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;EusartApp.c: 59: else if(chRec == (0xd))
  2852                           
  2853                           ; BSR set to: 0
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;EusartApp.c: 58: }
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;EusartApp.c: 56: {
  2860                           ;EusartApp.c: 57: return;
  2861  00011E  0E0D               	movlw	13
  2862  000120  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  2863  000122  A4D8               	btfss	status,2,c
  2864  000124  D003               	goto	l164
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;EusartApp.c: 60: {
  2868                           ;EusartApp.c: 61: cState = READ_GROUP;
  2869  000126  0E03               	movlw	3
  2870  000128  6FD3               	movwf	_cState& (0+255),b
  2871                           
  2872                           ;EusartApp.c: 62: }
  2873  00012A  0012               	return	
  2874  00012C                     l164:
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;EusartApp.c: 63: else
  2878                           ;EusartApp.c: 64: {
  2879                           ;EusartApp.c: 65: if(chRec != ' ')
  2880                           
  2881                           ; BSR set to: 0
  2882  00012C  0E20               	movlw	32
  2883  00012E  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  2884  000130  B4D8               	btfsc	status,2,c
  2885  000132  0012               	return	
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;EusartApp.c: 66: {
  2889                           ;EusartApp.c: 67: rxMsgQueue[msgCount++] = chRec;
  2890  000134  51D0               	movf	_msgCount& (0+255),w,b
  2891  000136  0D01               	mullw	1
  2892  000138  0EDB               	movlw	low _rxMsgQueue
  2893  00013A  24F3               	addwf	prodl,w,c
  2894  00013C  6ED9               	movwf	fsr2l,c
  2895  00013E  0E00               	movlw	high _rxMsgQueue
  2896  000140  20F4               	addwfc	prodh,w,c
  2897  000142  6EDA               	movwf	fsr2h,c
  2898  000144  C0C4  FFDF         	movff	readUartByte@chRec,indf2
  2899                           
  2900                           ; BSR set to: 0
  2901  000148  2BD0               	incf	_msgCount& (0+255),f,b
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;EusartApp.c: 74: }
  2905                           ;EusartApp.c: 75: break;
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;EusartApp.c: 71: else
  2909                           ;EusartApp.c: 72: {
  2910                           ;EusartApp.c: 73: return;
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;EusartApp.c: 68: }
  2914                           ;EusartApp.c: 69: }
  2915                           ;EusartApp.c: 70: }
  2916                           
  2917                           ; BSR set to: 0
  2918                           
  2919                           ; BSR set to: 0
  2920  00014A  0012               	return	
  2921  00014C                     
  2922                           ; BSR set to: 0
  2923                           ;EusartApp.c: 79: chRec = toupper(rxMsgQueue[0]);
  2924                           
  2925                           ; BSR set to: 0
  2926  00014C  51DB               	movf	_rxMsgQueue& (0+255),w,b
  2927  00014E  EC30  F013         	call	_toupper
  2928  000152  0100               	movlb	0	; () banked
  2929  000154  6FC4               	movwf	readUartByte@chRec& (0+255),b
  2930                           
  2931                           ;EusartApp.c: 81: switch(chRec)
  2932  000156  D023               	goto	l169
  2933  000158                     
  2934                           ; BSR set to: 0
  2935                           ;EusartApp.c: 85: group = RX_GROUP;
  2936                           
  2937                           ; BSR set to: 0
  2938  000158  0E00               	movlw	0
  2939  00015A  6FD2               	movwf	_group& (0+255),b
  2940                           
  2941                           ;EusartApp.c: 86: cState = READ_REQUEST;
  2942  00015C  0E04               	movlw	4
  2943  00015E  6FD3               	movwf	_cState& (0+255),b
  2944                           
  2945                           ;EusartApp.c: 87: break;
  2946  000160  0012               	return	
  2947  000162                     
  2948                           ; BSR set to: 0
  2949                           ;EusartApp.c: 91: group = TX_GROUP;
  2950                           
  2951                           ; BSR set to: 0
  2952  000162  0E01               	movlw	1
  2953  000164  6FD2               	movwf	_group& (0+255),b
  2954                           
  2955                           ;EusartApp.c: 92: cState = READ_REQUEST;
  2956  000166  0E04               	movlw	4
  2957  000168  6FD3               	movwf	_cState& (0+255),b
  2958                           
  2959                           ;EusartApp.c: 93: break;
  2960  00016A  0012               	return	
  2961  00016C                     
  2962                           ; BSR set to: 0
  2963                           ;EusartApp.c: 97: group = COMMON_GROUP;
  2964                           
  2965                           ; BSR set to: 0
  2966  00016C  0E02               	movlw	2
  2967  00016E  6FD2               	movwf	_group& (0+255),b
  2968                           
  2969                           ;EusartApp.c: 98: cState = READ_REQUEST;
  2970  000170  0E04               	movlw	4
  2971  000172  6FD3               	movwf	_cState& (0+255),b
  2972                           
  2973                           ;EusartApp.c: 99: break;
  2974  000174  0012               	return	
  2975  000176                     
  2976                           ; BSR set to: 0
  2977                           ;EusartApp.c: 102: sprintf(dest, "NOT O.K \n\r");
  2978                           
  2979                           ; BSR set to: 0
  2980  000176  0E92               	movlw	low readUartByte@dest
  2981  000178  6E18               	movwf	sprintf@sp,c
  2982  00017A  0E00               	movlw	high readUartByte@dest
  2983  00017C  6E19               	movwf	sprintf@sp+1,c
  2984  00017E  0EDD               	movlw	low STR_1
  2985  000180  6E1A               	movwf	sprintf@f,c
  2986  000182  0E7F               	movlw	high STR_1
  2987  000184  6E1B               	movwf	sprintf@f+1,c
  2988  000186  ECCD  F00A         	call	_sprintf	;wreg free
  2989                           
  2990                           ;EusartApp.c: 103: UART_Write_Text(dest);
  2991  00018A  0E92               	movlw	low readUartByte@dest
  2992  00018C  6E19               	movwf	UART_Write_Text@text,c
  2993  00018E  0E00               	movlw	high readUartByte@dest
  2994  000190  6E1A               	movwf	UART_Write_Text@text+1,c
  2995  000192  ECEC  F011         	call	_UART_Write_Text	;wreg free
  2996                           
  2997                           ;EusartApp.c: 104: cState = START_RX_MESSAGE_READ;
  2998  000196  0E00               	movlw	0
  2999  000198  0100               	movlb	0	; () banked
  3000  00019A  6FD3               	movwf	_cState& (0+255),b
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;EusartApp.c: 106: }
  3004                           
  3005                           ;EusartApp.c: 105: break;
  3006  00019C  0012               	return	
  3007  00019E                     l169:
  3008                           
  3009                           ; BSR set to: 0
  3010                           
  3011                           ; BSR set to: 0
  3012  00019E  51C4               	movf	readUartByte@chRec& (0+255),w,b
  3013                           
  3014                           ; Switch size 1, requested type "space"
  3015                           ; Number of cases is 3, Range of values is 82 to 84
  3016                           ; switch strategies available:
  3017                           ; Name         Instructions Cycles
  3018                           ; simple_byte           10     6 (average)
  3019                           ;	Chosen strategy is simple_byte
  3020  0001A0  0A52               	xorlw	82	; case 82
  3021  0001A2  B4D8               	btfsc	status,2,c
  3022  0001A4  D7D9               	goto	l170
  3023  0001A6  0A01               	xorlw	1	; case 83
  3024  0001A8  B4D8               	btfsc	status,2,c
  3025  0001AA  D7E0               	goto	l173
  3026  0001AC  0A07               	xorlw	7	; case 84
  3027  0001AE  B4D8               	btfsc	status,2,c
  3028  0001B0  D7D8               	goto	l172
  3029  0001B2  D7E1               	goto	l174
  3030  0001B4                     
  3031                           ; BSR set to: 0
  3032                           ;EusartApp.c: 111: chRec = toupper(rxMsgQueue[1]);
  3033                           
  3034                           ; BSR set to: 0
  3035  0001B4  51DC               	movf	(_rxMsgQueue+1)& (0+255),w,b
  3036  0001B6  EC30  F013         	call	_toupper
  3037  0001BA  0100               	movlb	0	; () banked
  3038  0001BC  6FC4               	movwf	readUartByte@chRec& (0+255),b
  3039                           
  3040                           ;EusartApp.c: 113: switch(group)
  3041  0001BE  D079               	goto	l176
  3042  0001C0                     
  3043                           ; BSR set to: 0
  3044                           ;EusartApp.c: 117: if(chRec == 'I' || chRec == 'F' || chRec == 'Q' || chRec == 'X' || ch
      +                          Rec == 'C')
  3045                           
  3046                           ; BSR set to: 0
  3047  0001C0  0E49               	movlw	73
  3048  0001C2  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3049  0001C4  B4D8               	btfsc	status,2,c
  3050  0001C6  D010               	goto	u4440
  3051                           
  3052                           ; BSR set to: 0
  3053  0001C8  0E46               	movlw	70
  3054  0001CA  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3055  0001CC  B4D8               	btfsc	status,2,c
  3056  0001CE  D00C               	goto	u4440
  3057                           
  3058                           ; BSR set to: 0
  3059  0001D0  0E51               	movlw	81
  3060  0001D2  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3061  0001D4  B4D8               	btfsc	status,2,c
  3062  0001D6  D008               	goto	u4440
  3063                           
  3064                           ; BSR set to: 0
  3065  0001D8  0E58               	movlw	88
  3066  0001DA  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3067  0001DC  B4D8               	btfsc	status,2,c
  3068  0001DE  D004               	goto	u4440
  3069                           
  3070                           ; BSR set to: 0
  3071  0001E0  0E43               	movlw	67
  3072  0001E2  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3073  0001E4  A4D8               	btfss	status,2,c
  3074  0001E6  D06F               	goto	l187
  3075  0001E8                     u4440:
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;EusartApp.c: 118: {
  3079                           ;EusartApp.c: 119: if(chRec == 'C')
  3080                           
  3081                           ; BSR set to: 0
  3082  0001E8  0E43               	movlw	67
  3083  0001EA  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3084  0001EC  A4D8               	btfss	status,2,c
  3085  0001EE  D028               	goto	l181
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;EusartApp.c: 120: {
  3089                           ;EusartApp.c: 121: if(toupper(rxMsgQueue[2]) == 'P' || toupper(rxMsgQueue[2]) == 'R')
  3090  0001F0  51DD               	movf	(_rxMsgQueue+2)& (0+255),w,b
  3091  0001F2  EC30  F013         	call	_toupper
  3092  0001F6  0A50               	xorlw	80
  3093  0001F8  B4D8               	btfsc	status,2,c
  3094  0001FA  D007               	goto	u4470
  3095  0001FC  0100               	movlb	0	; () banked
  3096  0001FE  51DD               	movf	(_rxMsgQueue+2)& (0+255),w,b
  3097  000200  EC30  F013         	call	_toupper
  3098  000204  0A52               	xorlw	82
  3099  000206  A4D8               	btfss	status,2,c
  3100  000208  D007               	goto	l182
  3101  00020A                     u4470:
  3102                           
  3103                           ;EusartApp.c: 122: {
  3104                           ;EusartApp.c: 123: request = chRec + toupper(rxMsgQueue[2]) - '0';
  3105  00020A  0100               	movlb	0	; () banked
  3106  00020C  51DD               	movf	(_rxMsgQueue+2)& (0+255),w,b
  3107  00020E  EC30  F013         	call	_toupper
  3108  000212  0100               	movlb	0	; () banked
  3109  000214  25C4               	addwf	readUartByte@chRec& (0+255),w,b
  3110  000216  D015               	goto	L1
  3111  000218                     l182:
  3112                           
  3113                           ;EusartApp.c: 125: else
  3114                           ;EusartApp.c: 126: {
  3115                           ;EusartApp.c: 127: sprintf(dest, "NOT O.K \n\r");
  3116                           
  3117                           ; BSR set to: 0
  3118  000218  0E92               	movlw	low readUartByte@dest
  3119  00021A  6E18               	movwf	sprintf@sp,c
  3120  00021C  0E00               	movlw	high readUartByte@dest
  3121  00021E  6E19               	movwf	sprintf@sp+1,c
  3122  000220  0EDD               	movlw	low STR_1
  3123  000222  6E1A               	movwf	sprintf@f,c
  3124  000224  0E7F               	movlw	high STR_1
  3125  000226  6E1B               	movwf	sprintf@f+1,c
  3126  000228  ECCD  F00A         	call	_sprintf	;wreg free
  3127                           
  3128                           ;EusartApp.c: 128: UART_Write_Text(dest);
  3129  00022C  0E92               	movlw	low readUartByte@dest
  3130  00022E  6E19               	movwf	UART_Write_Text@text,c
  3131  000230  0E00               	movlw	high readUartByte@dest
  3132  000232  6E1A               	movwf	UART_Write_Text@text+1,c
  3133  000234  ECEC  F011         	call	_UART_Write_Text	;wreg free
  3134                           
  3135                           ;EusartApp.c: 129: cState = START_RX_MESSAGE_READ;
  3136  000238  0E00               	movlw	0
  3137  00023A  0100               	movlb	0	; () banked
  3138  00023C  6FD3               	movwf	_cState& (0+255),b
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;EusartApp.c: 130: return;
  3142  00023E  0012               	return	
  3143  000240                     l181:
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;EusartApp.c: 133: else
  3147                           ;EusartApp.c: 134: {
  3148                           ;EusartApp.c: 135: request = chRec - '0';
  3149                           
  3150                           ; BSR set to: 0
  3151  000240  51C4               	movf	readUartByte@chRec& (0+255),w,b
  3152  000242                     L1:
  3153  000242  0FD0               	addlw	208
  3154  000244  6FD1               	movwf	_request& (0+255),b
  3155                           
  3156                           ; BSR set to: 0
  3157  000246  D020               	goto	l5256
  3158  000248                     L2:
  3159  000248  6FD3               	movwf	_cState& (0+255),b
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;EusartApp.c: 139: return;
  3163  00024A  0012               	return	
  3164  00024C                     
  3165                           ; BSR set to: 0
  3166                           ;EusartApp.c: 145: if(chRec == 'I' || chRec == 'F' || chRec == 'Q' || chRec == 'X' || ch
      +                          Rec == 'B')
  3167                           
  3168                           ; BSR set to: 0
  3169  00024C  0E49               	movlw	73
  3170  00024E  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3171  000250  B4D8               	btfsc	status,2,c
  3172  000252  D7F6               	goto	l181
  3173                           
  3174                           ; BSR set to: 0
  3175  000254  0E46               	movlw	70
  3176  000256  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3177  000258  B4D8               	btfsc	status,2,c
  3178  00025A  D7F2               	goto	l181
  3179                           
  3180                           ; BSR set to: 0
  3181  00025C  0E51               	movlw	81
  3182  00025E  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3183  000260  B4D8               	btfsc	status,2,c
  3184  000262  D7EE               	goto	l181
  3185                           
  3186                           ; BSR set to: 0
  3187  000264  0E58               	movlw	88
  3188  000266  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3189  000268  B4D8               	btfsc	status,2,c
  3190  00026A  D7EA               	goto	l181
  3191                           
  3192                           ; BSR set to: 0
  3193  00026C  0E42               	movlw	66
  3194  00026E  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3195  000270  A4D8               	btfss	status,2,c
  3196  000272  D029               	goto	l187
  3197                           
  3198                           ; BSR set to: 0
  3199  000274  D7E5               	goto	l181
  3200  000276                     
  3201                           ; BSR set to: 0
  3202                           ;EusartApp.c: 155: if(chRec == 'H')
  3203                           
  3204                           ; BSR set to: 0
  3205  000276  0E48               	movlw	72
  3206  000278  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3207  00027A  B4D8               	btfsc	status,2,c
  3208  00027C  D7E1               	goto	l181
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;EusartApp.c: 161: else if(chRec == 'L')
  3212                           
  3213                           ; BSR set to: 0
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;EusartApp.c: 160: }
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;EusartApp.c: 159: return;
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;EusartApp.c: 158: cState = READ_DATA;
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;EusartApp.c: 156: {
  3226                           ;EusartApp.c: 157: request = (chRec - '0');
  3227  00027E  0E4C               	movlw	76
  3228  000280  19C4               	xorwf	readUartByte@chRec& (0+255),w,b
  3229  000282  A4D8               	btfss	status,2,c
  3230  000284  D003               	goto	l195
  3231  000286  D7DC               	goto	l181
  3232  000288                     l5256:
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;EusartApp.c: 164: cState = READ_DATA;
  3236  000288  0E05               	movlw	5
  3237  00028A  D7DE               	goto	L2
  3238  00028C                     l195:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;EusartApp.c: 167: else
  3242                           ;EusartApp.c: 168: {
  3243                           ;EusartApp.c: 169: sprintf(dest, "NOT O.K \n\r");
  3244                           
  3245                           ; BSR set to: 0
  3246  00028C  0E92               	movlw	low readUartByte@dest
  3247  00028E  6E18               	movwf	sprintf@sp,c
  3248  000290  0E00               	movlw	high readUartByte@dest
  3249  000292  6E19               	movwf	sprintf@sp+1,c
  3250  000294  0EDD               	movlw	low STR_1
  3251  000296  6E1A               	movwf	sprintf@f,c
  3252  000298  0E7F               	movlw	high STR_1
  3253  00029A  6E1B               	movwf	sprintf@f+1,c
  3254  00029C  ECCD  F00A         	call	_sprintf	;wreg free
  3255                           
  3256                           ;EusartApp.c: 170: UART_Write_Text(dest);
  3257  0002A0  0E92               	movlw	low readUartByte@dest
  3258  0002A2  6E19               	movwf	UART_Write_Text@text,c
  3259  0002A4  0E00               	movlw	high readUartByte@dest
  3260  0002A6  6E1A               	movwf	UART_Write_Text@text+1,c
  3261  0002A8  ECEC  F011         	call	_UART_Write_Text	;wreg free
  3262                           
  3263                           ;EusartApp.c: 171: cState = START_RX_MESSAGE_READ;
  3264  0002AC  0E00               	movlw	0
  3265  0002AE  0100               	movlb	0	; () banked
  3266  0002B0  D7CB               	goto	L2
  3267  0002B2                     l176:
  3268                           
  3269                           ; BSR set to: 0
  3270                           
  3271                           ; BSR set to: 0
  3272  0002B2  51D2               	movf	_group& (0+255),w,b
  3273                           
  3274                           ; Switch size 1, requested type "space"
  3275                           ; Number of cases is 3, Range of values is 0 to 2
  3276                           ; switch strategies available:
  3277                           ; Name         Instructions Cycles
  3278                           ; simple_byte           10     6 (average)
  3279                           ;	Chosen strategy is simple_byte
  3280  0002B4  0A00               	xorlw	0	; case 0
  3281  0002B6  B4D8               	btfsc	status,2,c
  3282  0002B8  D783               	goto	l177
  3283  0002BA  0A01               	xorlw	1	; case 1
  3284  0002BC  B4D8               	btfsc	status,2,c
  3285  0002BE  D7C6               	goto	l188
  3286  0002C0  0A03               	xorlw	3	; case 2
  3287  0002C2  B4D8               	btfsc	status,2,c
  3288  0002C4  D7D8               	goto	l192
  3289  0002C6                     l187:
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;EusartApp.c: 177: sprintf(dest, "NOT O.K \n\r");
  3293                           
  3294                           ; BSR set to: 0
  3295  0002C6  0E92               	movlw	low readUartByte@dest
  3296  0002C8  6E18               	movwf	sprintf@sp,c
  3297  0002CA  0E00               	movlw	high readUartByte@dest
  3298  0002CC  6E19               	movwf	sprintf@sp+1,c
  3299  0002CE  0EDD               	movlw	low STR_1
  3300  0002D0  6E1A               	movwf	sprintf@f,c
  3301  0002D2  0E7F               	movlw	high STR_1
  3302  0002D4  6E1B               	movwf	sprintf@f+1,c
  3303  0002D6  ECCD  F00A         	call	_sprintf	;wreg free
  3304                           
  3305                           ;EusartApp.c: 178: UART_Write_Text(dest);
  3306  0002DA  0E92               	movlw	low readUartByte@dest
  3307  0002DC  6E19               	movwf	UART_Write_Text@text,c
  3308  0002DE  0E00               	movlw	high readUartByte@dest
  3309  0002E0  6E1A               	movwf	UART_Write_Text@text+1,c
  3310  0002E2  ECEC  F011         	call	_UART_Write_Text	;wreg free
  3311                           
  3312                           ;EusartApp.c: 179: cState = START_RX_MESSAGE_READ;
  3313  0002E6  0E00               	movlw	0
  3314  0002E8  0100               	movlb	0	; () banked
  3315  0002EA  6FD3               	movwf	_cState& (0+255),b
  3316                           
  3317                           ;EusartApp.c: 181: break;
  3318  0002EC  0012               	return	
  3319  0002EE                     
  3320                           ; BSR set to: 0
  3321                           ;EusartApp.c: 185: cState = JUMP_FUNCTION;
  3322                           
  3323                           ; BSR set to: 0
  3324  0002EE  0E07               	movlw	7
  3325  0002F0  6FD3               	movwf	_cState& (0+255),b
  3326                           
  3327                           ;EusartApp.c: 186: break;
  3328  0002F2  0012               	return	
  3329  0002F4                     
  3330                           ; BSR set to: 0
  3331                           ;EusartApp.c: 190: groupsArray[group](request, rxMsgData);
  3332                           
  3333                           ; BSR set to: 0
  3334  0002F4  51D2               	movf	_group& (0+255),w,b
  3335  0002F6  0D02               	mullw	2
  3336  0002F8  0EEF               	movlw	low _groupsArray
  3337  0002FA  24F3               	addwf	prodl,w,c
  3338  0002FC  6ED9               	movwf	fsr2l,c
  3339  0002FE  0E00               	movlw	high _groupsArray
  3340  000300  20F4               	addwfc	prodh,w,c
  3341  000302  6EDA               	movwf	fsr2h,c
  3342  000304  D801               	call	u4558
  3343  000306  D00F               	goto	u4559
  3344  000308                     u4558:
  3345  000308  0005               	push	
  3346  00030A  6EFA               	movwf	pclath,c
  3347  00030C  50DE               	movf	postinc2,w,c
  3348  00030E  6EFD               	movwf	tosl,c
  3349  000310  50DE               	movf	postinc2,w,c
  3350  000312  6EFE               	movwf	tosh,c
  3351  000314  50F8               	movf	tblptru,w,c
  3352  000316  6EFF               	movwf	tosu,c
  3353  000318  50FA               	movf	pclath,w,c
  3354  00031A  0EAE               	movlw	low _rxMsgData
  3355  00031C  6E24               	movwf	GroupCommon@data,c
  3356  00031E  0E01               	movlw	high _rxMsgData
  3357  000320  6E25               	movwf	GroupCommon@data+1,c
  3358  000322  51D1               	movf	_request& (0+255),w,b
  3359  000324  0012               	return		;indir
  3360  000326                     u4559:
  3361                           
  3362                           ;EusartApp.c: 191: cState = START_RX_MESSAGE_READ;
  3363  000326  0E00               	movlw	0
  3364  000328  0100               	movlb	0	; () banked
  3365  00032A  6FD3               	movwf	_cState& (0+255),b
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;EusartApp.c: 193: }
  3369                           
  3370                           ;EusartApp.c: 192: break;
  3371  00032C  0012               	return	
  3372  00032E                     l154:
  3373                           
  3374                           ; BSR set to: 0
  3375                           
  3376                           ; BSR set to: 0
  3377  00032E  51D3               	movf	_cState& (0+255),w,b
  3378                           
  3379                           ; Switch size 1, requested type "space"
  3380                           ; Number of cases is 7, Range of values is 0 to 7
  3381                           ; switch strategies available:
  3382                           ; Name         Instructions Cycles
  3383                           ; simple_byte           22    12 (average)
  3384                           ;	Chosen strategy is simple_byte
  3385  000330  0A00               	xorlw	0	; case 0
  3386  000332  B4D8               	btfsc	status,2,c
  3387  000334  D6D9               	goto	l155
  3388  000336  0A01               	xorlw	1	; case 1
  3389  000338  B4D8               	btfsc	status,2,c
  3390  00033A  D6DC               	goto	l157
  3391  00033C  0A03               	xorlw	3	; case 2
  3392  00033E  B4D8               	btfsc	status,2,c
  3393  000340  D6E4               	goto	l159
  3394  000342  0A01               	xorlw	1	; case 3
  3395  000344  B4D8               	btfsc	status,2,c
  3396  000346  D702               	goto	l168
  3397  000348  0A07               	xorlw	7	; case 4
  3398  00034A  B4D8               	btfsc	status,2,c
  3399  00034C  D733               	goto	l175
  3400  00034E  0A01               	xorlw	1	; case 5
  3401  000350  B4D8               	btfsc	status,2,c
  3402  000352  D7CD               	goto	l197
  3403  000354  0A02               	xorlw	2	; case 7
  3404  000356  A4D8               	btfss	status,2,c
  3405  000358  0012               	return	
  3406  00035A  D7CC               	goto	l198
  3407  00035C                     __end_of_readUartByte:
  3408                           	opt stack 0
  3409                           tosu	equ	0xFFF
  3410                           tosh	equ	0xFFE
  3411                           tosl	equ	0xFFD
  3412                           pclath	equ	0xFFA
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           postinc0	equ	0xFEE
  3420                           wreg	equ	0xFE8
  3421                           postdec1	equ	0xFE5
  3422                           fsr1l	equ	0xFE1
  3423                           indf2	equ	0xFDF
  3424                           postinc2	equ	0xFDE
  3425                           fsr2h	equ	0xFDA
  3426                           fsr2l	equ	0xFD9
  3427                           status	equ	0xFD8
  3428                           
  3429 ;; *************** function _toupper *****************
  3430 ;; Defined at:
  3431 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  c               1    wreg     unsigned char 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  c               1   23[COMRAM] unsigned char 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      unsigned char 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2, status,0
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3445 ;;      Params:         0       0       0       0       0       0       0
  3446 ;;      Locals:         1       0       0       0       0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0
  3448 ;;      Totals:         1       0       0       0       0       0       0
  3449 ;;Total ram usage:        1 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    3
  3452 ;; This function calls:
  3453 ;;		Nothing
  3454 ;; This function is called by:
  3455 ;;		_readUartByte
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459                           	psect	text2
  3460  002660                     __ptext2:
  3461                           	opt stack 0
  3462  002660                     _toupper:
  3463                           	opt stack 26
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;incstack = 0
  3467                           ;toupper@c stored from wreg
  3468  002660  6E18               	movwf	toupper@c,c
  3469  002662  0E7B               	movlw	123
  3470  002664  6018               	cpfslt	toupper@c,c
  3471  002666  D004               	goto	l1872
  3472  002668  0E60               	movlw	96
  3473  00266A  6418               	cpfsgt	toupper@c,c
  3474  00266C  D001               	goto	l1872
  3475  00266E  9A18               	bcf	toupper@c,5,c
  3476  002670                     l1872:
  3477  002670  5018               	movf	toupper@c,w,c
  3478  002672  0012               	return	
  3479  002674                     __end_of_toupper:
  3480                           	opt stack 0
  3481                           tosu	equ	0xFFF
  3482                           tosh	equ	0xFFE
  3483                           tosl	equ	0xFFD
  3484                           pclath	equ	0xFFA
  3485                           tblptru	equ	0xFF8
  3486                           tblptrh	equ	0xFF7
  3487                           tblptrl	equ	0xFF6
  3488                           tablat	equ	0xFF5
  3489                           prodh	equ	0xFF4
  3490                           prodl	equ	0xFF3
  3491                           postinc0	equ	0xFEE
  3492                           wreg	equ	0xFE8
  3493                           postdec1	equ	0xFE5
  3494                           fsr1l	equ	0xFE1
  3495                           indf2	equ	0xFDF
  3496                           postinc2	equ	0xFDE
  3497                           fsr2h	equ	0xFDA
  3498                           fsr2l	equ	0xFD9
  3499                           status	equ	0xFD8
  3500                           
  3501 ;; *************** function _InitRxMessageParams *****************
  3502 ;; Defined at:
  3503 ;;		line 196 in file "EusartApp.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;		None
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;		None
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      void 
  3510 ;; Registers used:
  3511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3517 ;;      Params:         0       0       0       0       0       0       0
  3518 ;;      Locals:         0       0       0       0       0       0       0
  3519 ;;      Temps:          0       0       0       0       0       0       0
  3520 ;;      Totals:         0       0       0       0       0       0       0
  3521 ;;Total ram usage:        0 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    5
  3524 ;; This function calls:
  3525 ;;		_ZeroArray
  3526 ;; This function is called by:
  3527 ;;		_readUartByte
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text3
  3532  00251C                     __ptext3:
  3533                           	opt stack 0
  3534  00251C                     _InitRxMessageParams:
  3535                           	opt stack 24
  3536                           
  3537                           ;EusartApp.c: 198: group = 0;
  3538                           
  3539                           ;incstack = 0
  3540  00251C  0E00               	movlw	0
  3541  00251E  0100               	movlb	0	; () banked
  3542  002520  6FD2               	movwf	_group& (0+255),b
  3543                           
  3544                           ;EusartApp.c: 199: request = 0;
  3545  002522  0E00               	movlw	0
  3546  002524  6FD1               	movwf	_request& (0+255),b
  3547                           
  3548                           ;EusartApp.c: 200: msgCount = 0;
  3549  002526  0E00               	movlw	0
  3550  002528  6FD0               	movwf	_msgCount& (0+255),b
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;EusartApp.c: 201: ZeroArray(rxMsgQueue, (0x14));
  3554  00252A  0EDB               	movlw	low _rxMsgQueue
  3555  00252C  6E20               	movwf	ZeroArray@array,c
  3556  00252E  0E00               	movlw	high _rxMsgQueue
  3557  002530  6E21               	movwf	ZeroArray@array+1,c
  3558  002532  0E00               	movlw	0
  3559  002534  6E23               	movwf	ZeroArray@size+1,c
  3560  002536  0E14               	movlw	20
  3561  002538  6E22               	movwf	ZeroArray@size,c
  3562  00253A  ECE4  F012         	call	_ZeroArray
  3563  00253E  0012               	return		;funcret
  3564  002540                     __end_of_InitRxMessageParams:
  3565                           	opt stack 0
  3566                           tosu	equ	0xFFF
  3567                           tosh	equ	0xFFE
  3568                           tosl	equ	0xFFD
  3569                           pclath	equ	0xFFA
  3570                           tblptru	equ	0xFF8
  3571                           tblptrh	equ	0xFF7
  3572                           tblptrl	equ	0xFF6
  3573                           tablat	equ	0xFF5
  3574                           prodh	equ	0xFF4
  3575                           prodl	equ	0xFF3
  3576                           postinc0	equ	0xFEE
  3577                           wreg	equ	0xFE8
  3578                           postdec1	equ	0xFE5
  3579                           fsr1l	equ	0xFE1
  3580                           indf2	equ	0xFDF
  3581                           postinc2	equ	0xFDE
  3582                           fsr2h	equ	0xFDA
  3583                           fsr2l	equ	0xFD9
  3584                           status	equ	0xFD8
  3585                           
  3586 ;; *************** function _ZeroArray *****************
  3587 ;; Defined at:
  3588 ;;		line 24 in file "SystemCommon.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;  array           2   31[COMRAM] PTR unsigned char 
  3591 ;;		 -> GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
  3592 ;;		 -> SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  3593 ;;  size            2   33[COMRAM] int 
  3594 ;; Auto vars:     Size  Location     Type
  3595 ;;		None
  3596 ;; Return value:  Size  Location     Type
  3597 ;;                  1    wreg      void 
  3598 ;; Registers used:
  3599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3600 ;; Tracked objects:
  3601 ;;		On entry : 0/0
  3602 ;;		On exit  : 0/0
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3605 ;;      Params:         4       0       0       0       0       0       0
  3606 ;;      Locals:         0       0       0       0       0       0       0
  3607 ;;      Temps:          0       0       0       0       0       0       0
  3608 ;;      Totals:         4       0       0       0       0       0       0
  3609 ;;Total ram usage:        4 bytes
  3610 ;; Hardware stack levels used:    1
  3611 ;; Hardware stack levels required when called:    4
  3612 ;; This function calls:
  3613 ;;		_memset
  3614 ;; This function is called by:
  3615 ;;		_InitRxMessageParams
  3616 ;;		_SendAckMessage
  3617 ;;		_FlashReadUart
  3618 ;;		_FlashEreaseMem
  3619 ;;		_FlashReadCondition
  3620 ;;		_GetIntFromUartData
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text4
  3625  0025C8                     __ptext4:
  3626                           	opt stack 0
  3627  0025C8                     _ZeroArray:
  3628                           	opt stack 24
  3629                           
  3630                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  3631                           
  3632                           ;incstack = 0
  3633  0025C8  C020  F018         	movff	ZeroArray@array,memset@p1
  3634  0025CC  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  3635  0025D0  0E00               	movlw	0
  3636  0025D2  6E1B               	movwf	memset@c+1,c
  3637  0025D4  0E00               	movlw	0
  3638  0025D6  6E1A               	movwf	memset@c,c
  3639  0025D8  C022  F01C         	movff	ZeroArray@size,memset@n
  3640  0025DC  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  3641  0025E0  EC4F  F012         	call	_memset	;wreg free
  3642  0025E4  0012               	return		;funcret
  3643  0025E6                     __end_of_ZeroArray:
  3644                           	opt stack 0
  3645                           tosu	equ	0xFFF
  3646                           tosh	equ	0xFFE
  3647                           tosl	equ	0xFFD
  3648                           pclath	equ	0xFFA
  3649                           tblptru	equ	0xFF8
  3650                           tblptrh	equ	0xFF7
  3651                           tblptrl	equ	0xFF6
  3652                           tablat	equ	0xFF5
  3653                           prodh	equ	0xFF4
  3654                           prodl	equ	0xFF3
  3655                           postinc0	equ	0xFEE
  3656                           wreg	equ	0xFE8
  3657                           postdec1	equ	0xFE5
  3658                           fsr1l	equ	0xFE1
  3659                           indf2	equ	0xFDF
  3660                           postinc2	equ	0xFDE
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function _memset *****************
  3666 ;; Defined at:
  3667 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  p1              2   23[COMRAM] PTR void 
  3670 ;;		 -> GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
  3671 ;;		 -> SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  3672 ;;  c               2   25[COMRAM] int 
  3673 ;;  n               2   27[COMRAM] unsigned int 
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  p               2   29[COMRAM] PTR unsigned char 
  3676 ;;		 -> GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
  3677 ;;		 -> SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  2   23[COMRAM] PTR void 
  3680 ;; Registers used:
  3681 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3687 ;;      Params:         6       0       0       0       0       0       0
  3688 ;;      Locals:         2       0       0       0       0       0       0
  3689 ;;      Temps:          0       0       0       0       0       0       0
  3690 ;;      Totals:         8       0       0       0       0       0       0
  3691 ;;Total ram usage:        8 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    3
  3694 ;; This function calls:
  3695 ;;		Nothing
  3696 ;; This function is called by:
  3697 ;;		_ZeroArray
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           	psect	text5
  3702  00249E                     __ptext5:
  3703                           	opt stack 0
  3704  00249E                     _memset:
  3705                           	opt stack 24
  3706                           
  3707                           ;incstack = 0
  3708  00249E  C018  F01E         	movff	memset@p1,memset@p
  3709  0024A2  C019  F01F         	movff	memset@p1+1,memset@p+1
  3710  0024A6  D008               	goto	l1697
  3711  0024A8                     l4436:
  3712  0024A8  C01E  FFD9         	movff	memset@p,fsr2l
  3713  0024AC  C01F  FFDA         	movff	memset@p+1,fsr2h
  3714  0024B0  C01A  FFDF         	movff	memset@c,indf2
  3715  0024B4  4A1E               	infsnz	memset@p,f,c
  3716  0024B6  2A1F               	incf	memset@p+1,f,c
  3717  0024B8                     l1697:
  3718  0024B8  061C               	decf	memset@n,f,c
  3719  0024BA  A0D8               	btfss	status,0,c
  3720  0024BC  061D               	decf	memset@n+1,f,c
  3721  0024BE  281C               	incf	memset@n,w,c
  3722  0024C0  E1F3               	bnz	l4436
  3723  0024C2  281D               	incf	memset@n+1,w,c
  3724  0024C4  B4D8               	btfsc	status,2,c
  3725  0024C6  0012               	return	
  3726  0024C8  D7EF               	goto	l1698
  3727  0024CA                     __end_of_memset:
  3728                           	opt stack 0
  3729                           tosu	equ	0xFFF
  3730                           tosh	equ	0xFFE
  3731                           tosl	equ	0xFFD
  3732                           pclath	equ	0xFFA
  3733                           tblptru	equ	0xFF8
  3734                           tblptrh	equ	0xFF7
  3735                           tblptrl	equ	0xFF6
  3736                           tablat	equ	0xFF5
  3737                           prodh	equ	0xFF4
  3738                           prodl	equ	0xFF3
  3739                           postinc0	equ	0xFEE
  3740                           wreg	equ	0xFE8
  3741                           postdec1	equ	0xFE5
  3742                           fsr1l	equ	0xFE1
  3743                           indf2	equ	0xFDF
  3744                           postinc2	equ	0xFDE
  3745                           fsr2h	equ	0xFDA
  3746                           fsr2l	equ	0xFD9
  3747                           status	equ	0xFD8
  3748                           
  3749 ;; *************** function _GroupCommon *****************
  3750 ;; Defined at:
  3751 ;;		line 71 in file "MessageFunctions.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  request         1    wreg     enum E6
  3754 ;;  data            2   35[COMRAM] PTR unsigned char 
  3755 ;;		 -> rxMsgData(20), 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;  request         1   37[COMRAM] enum E6
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  1    wreg      void 
  3760 ;; Registers used:
  3761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3767 ;;      Params:         2       0       0       0       0       0       0
  3768 ;;      Locals:         1       0       0       0       0       0       0
  3769 ;;      Temps:          0       0       0       0       0       0       0
  3770 ;;      Totals:         3       0       0       0       0       0       0
  3771 ;;Total ram usage:        3 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; Hardware stack levels required when called:    6
  3774 ;; This function calls:
  3775 ;;		_PrintHelpScreen
  3776 ;;		_testLeds
  3777 ;; This function is called by:
  3778 ;;		_readUartByte
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           	psect	text6
  3783  002588                     __ptext6:
  3784                           	opt stack 0
  3785  002588                     _GroupCommon:
  3786                           	opt stack 23
  3787                           
  3788                           ;incstack = 0
  3789                           ;GroupCommon@request stored from wreg
  3790  002588  6E26               	movwf	GroupCommon@request,c
  3791                           
  3792                           ;MessageFunctions.c: 73: switch (request)
  3793  00258A  D006               	goto	l1061
  3794  00258C                     
  3795                           ;MessageFunctions.c: 76: PrintHelpScreen();
  3796  00258C  ECAE  F001         	call	_PrintHelpScreen	;wreg free
  3797                           
  3798                           ;MessageFunctions.c: 77: break;
  3799  002590  0012               	return	
  3800  002592                     
  3801                           ;MessageFunctions.c: 80: testLeds();
  3802  002592  ECB5  F00E         	call	_testLeds	;wreg free
  3803                           
  3804                           ;MessageFunctions.c: 85: }
  3805                           
  3806                           ;MessageFunctions.c: 84: break;
  3807                           
  3808                           ;MessageFunctions.c: 83: default:
  3809                           
  3810                           ;MessageFunctions.c: 81: break;
  3811  002596  0012               	return	
  3812  002598                     l1061:
  3813  002598  5026               	movf	GroupCommon@request,w,c
  3814                           
  3815                           ; Switch size 1, requested type "space"
  3816                           ; Number of cases is 2, Range of values is 24 to 28
  3817                           ; switch strategies available:
  3818                           ; Name         Instructions Cycles
  3819                           ; simple_byte            7     4 (average)
  3820                           ;	Chosen strategy is simple_byte
  3821  00259A  0A18               	xorlw	24	; case 24
  3822  00259C  B4D8               	btfsc	status,2,c
  3823  00259E  D7F6               	goto	l1062
  3824  0025A0  0A04               	xorlw	4	; case 28
  3825  0025A2  A4D8               	btfss	status,2,c
  3826  0025A4  0012               	return	
  3827  0025A6  D7F5               	goto	l1064
  3828  0025A8                     __end_of_GroupCommon:
  3829                           	opt stack 0
  3830                           tosu	equ	0xFFF
  3831                           tosh	equ	0xFFE
  3832                           tosl	equ	0xFFD
  3833                           pclath	equ	0xFFA
  3834                           tblptru	equ	0xFF8
  3835                           tblptrh	equ	0xFF7
  3836                           tblptrl	equ	0xFF6
  3837                           tablat	equ	0xFF5
  3838                           prodh	equ	0xFF4
  3839                           prodl	equ	0xFF3
  3840                           postinc0	equ	0xFEE
  3841                           wreg	equ	0xFE8
  3842                           postdec1	equ	0xFE5
  3843                           fsr1l	equ	0xFE1
  3844                           indf2	equ	0xFDF
  3845                           postinc2	equ	0xFDE
  3846                           fsr2h	equ	0xFDA
  3847                           fsr2l	equ	0xFD9
  3848                           status	equ	0xFD8
  3849                           
  3850 ;; *************** function _GroupRx *****************
  3851 ;; Defined at:
  3852 ;;		line 11 in file "MessageFunctions.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;  request         1    wreg     enum E6
  3855 ;;  data            3   35[COMRAM] PTR unsigned char 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  request         1   38[COMRAM] enum E6
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  1    wreg      void 
  3860 ;; Registers used:
  3861 ;;		wreg, status,2, status,0
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3867 ;;      Params:         2       0       0       0       0       0       0
  3868 ;;      Locals:         1       0       0       0       0       0       0
  3869 ;;      Temps:          0       0       0       0       0       0       0
  3870 ;;      Totals:         3       0       0       0       0       0       0
  3871 ;;Total ram usage:        3 bytes
  3872 ;; Hardware stack levels used:    1
  3873 ;; Hardware stack levels required when called:    3
  3874 ;; This function calls:
  3875 ;;		Nothing
  3876 ;; This function is called by:
  3877 ;;		_readUartByte
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           	psect	text7
  3882  0025A8                     __ptext7:
  3883                           	opt stack 0
  3884  0025A8                     _GroupRx:
  3885                           	opt stack 26
  3886                           
  3887                           ;incstack = 0
  3888                           ;GroupRx@request stored from wreg
  3889  0025A8  6E27               	movwf	GroupRx@request,c
  3890                           
  3891                           ;MessageFunctions.c: 35: }
  3892                           
  3893                           ;MessageFunctions.c: 34: break;
  3894                           
  3895                           ;MessageFunctions.c: 33: default:
  3896                           
  3897                           ;MessageFunctions.c: 31: break;
  3898                           
  3899                           ;MessageFunctions.c: 30: case TX_RX_SET_OPERATION_MODE:
  3900                           
  3901                           ;MessageFunctions.c: 28: break;
  3902                           
  3903                           ;MessageFunctions.c: 27: case TX_RX_SET_BIT_MODE:
  3904                           
  3905                           ;MessageFunctions.c: 25: break;
  3906                           
  3907                           ;MessageFunctions.c: 23: case TX_RX_READ_UNIT_STATUS:
  3908                           
  3909                           ;MessageFunctions.c: 21: break;
  3910                           
  3911                           ;MessageFunctions.c: 19: case TX_RX_SET_UNIT_FREQUENCY:
  3912                           
  3913                           ;MessageFunctions.c: 17: break;
  3914                           
  3915                           ;MessageFunctions.c: 14: {
  3916                           ;MessageFunctions.c: 15: case TX_RX_UNIT_UNIT:
  3917                           
  3918                           ;MessageFunctions.c: 13: switch (request)
  3919  0025AA  5027               	movf	GroupRx@request,w,c
  3920                           
  3921                           ; Switch size 1, requested type "space"
  3922                           ; Number of cases is 5, Range of values is 18 to 40
  3923                           ; switch strategies available:
  3924                           ; Name         Instructions Cycles
  3925                           ; simple_byte           16     9 (average)
  3926                           ;	Chosen strategy is simple_byte
  3927  0025AC  0A12               	xorlw	18	; case 18
  3928  0025AE  B4D8               	btfsc	status,2,c
  3929  0025B0  0012               	return	
  3930  0025B2  0A04               	xorlw	4	; case 22
  3931  0025B4  B4D8               	btfsc	status,2,c
  3932  0025B6  0012               	return	
  3933  0025B8  0A0F               	xorlw	15	; case 25
  3934  0025BA  B4D8               	btfsc	status,2,c
  3935  0025BC  0012               	return	
  3936  0025BE  0A38               	xorlw	56	; case 33
  3937  0025C0  B4D8               	btfsc	status,2,c
  3938  0025C2  0012               	return	
  3939  0025C4  0A09               	xorlw	9	; case 40
  3940  0025C6  0012               	return	
  3941  0025C8                     __end_of_GroupRx:
  3942                           	opt stack 0
  3943                           tosu	equ	0xFFF
  3944                           tosh	equ	0xFFE
  3945                           tosl	equ	0xFFD
  3946                           pclath	equ	0xFFA
  3947                           tblptru	equ	0xFF8
  3948                           tblptrh	equ	0xFF7
  3949                           tblptrl	equ	0xFF6
  3950                           tablat	equ	0xFF5
  3951                           prodh	equ	0xFF4
  3952                           prodl	equ	0xFF3
  3953                           postinc0	equ	0xFEE
  3954                           wreg	equ	0xFE8
  3955                           postdec1	equ	0xFE5
  3956                           fsr1l	equ	0xFE1
  3957                           indf2	equ	0xFDF
  3958                           postinc2	equ	0xFDE
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function _GroupTx *****************
  3964 ;; Defined at:
  3965 ;;		line 38 in file "MessageFunctions.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  request         1    wreg     enum E6
  3968 ;;  data            3   35[COMRAM] PTR unsigned char 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  request         1   38[COMRAM] enum E6
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		wreg, status,2, status,0
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3980 ;;      Params:         2       0       0       0       0       0       0
  3981 ;;      Locals:         1       0       0       0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0
  3983 ;;      Totals:         3       0       0       0       0       0       0
  3984 ;;Total ram usage:        3 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    3
  3987 ;; This function calls:
  3988 ;;		Nothing
  3989 ;; This function is called by:
  3990 ;;		_readUartByte
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text8
  3995  0024CA                     __ptext8:
  3996                           	opt stack 0
  3997  0024CA                     _GroupTx:
  3998                           	opt stack 26
  3999                           
  4000                           ;incstack = 0
  4001                           ;GroupTx@request stored from wreg
  4002  0024CA  6E27               	movwf	GroupTx@request,c
  4003                           
  4004                           ;MessageFunctions.c: 68: }
  4005                           
  4006                           ;MessageFunctions.c: 67: break;
  4007                           
  4008                           ;MessageFunctions.c: 66: default:
  4009                           
  4010                           ;MessageFunctions.c: 64: break;
  4011                           
  4012                           ;MessageFunctions.c: 63: case RX_SET_COMRESSION_RANGE:
  4013                           
  4014                           ;MessageFunctions.c: 61: break;
  4015                           
  4016                           ;MessageFunctions.c: 60: case RX_SET_COMRESSION_MODE:
  4017                           
  4018                           ;MessageFunctions.c: 58: break;
  4019                           
  4020                           ;MessageFunctions.c: 57: case TX_RX_SET_OPERATION_MODE:
  4021                           
  4022                           ;MessageFunctions.c: 55: break;
  4023                           
  4024                           ;MessageFunctions.c: 54: case TX_RX_SET_BIT_MODE:
  4025                           
  4026                           ;MessageFunctions.c: 52: break;
  4027                           
  4028                           ;MessageFunctions.c: 50: case TX_RX_READ_UNIT_STATUS:
  4029                           
  4030                           ;MessageFunctions.c: 48: break;
  4031                           
  4032                           ;MessageFunctions.c: 46: case TX_RX_SET_UNIT_FREQUENCY:
  4033                           
  4034                           ;MessageFunctions.c: 44: break;
  4035                           
  4036                           ;MessageFunctions.c: 41: {
  4037                           ;MessageFunctions.c: 42: case TX_RX_UNIT_UNIT:
  4038                           
  4039                           ;MessageFunctions.c: 40: switch (request)
  4040  0024CC  5027               	movf	GroupTx@request,w,c
  4041                           
  4042                           ; Switch size 1, requested type "space"
  4043                           ; Number of cases is 7, Range of values is 18 to 101
  4044                           ; switch strategies available:
  4045                           ; Name         Instructions Cycles
  4046                           ; simple_byte           22    12 (average)
  4047                           ;	Chosen strategy is simple_byte
  4048  0024CE  0A12               	xorlw	18	; case 18
  4049  0024D0  B4D8               	btfsc	status,2,c
  4050  0024D2  0012               	return	
  4051  0024D4  0A04               	xorlw	4	; case 22
  4052  0024D6  B4D8               	btfsc	status,2,c
  4053  0024D8  0012               	return	
  4054  0024DA  0A0F               	xorlw	15	; case 25
  4055  0024DC  B4D8               	btfsc	status,2,c
  4056  0024DE  0012               	return	
  4057  0024E0  0A38               	xorlw	56	; case 33
  4058  0024E2  B4D8               	btfsc	status,2,c
  4059  0024E4  0012               	return	
  4060  0024E6  0A09               	xorlw	9	; case 40
  4061  0024E8  B4D8               	btfsc	status,2,c
  4062  0024EA  0012               	return	
  4063  0024EC  0A4B               	xorlw	75	; case 99
  4064  0024EE  B4D8               	btfsc	status,2,c
  4065  0024F0  0012               	return	
  4066  0024F2  0A06               	xorlw	6	; case 101
  4067  0024F4  0012               	return	
  4068  0024F6                     __end_of_GroupTx:
  4069                           	opt stack 0
  4070                           tosu	equ	0xFFF
  4071                           tosh	equ	0xFFE
  4072                           tosl	equ	0xFFD
  4073                           pclath	equ	0xFFA
  4074                           tblptru	equ	0xFF8
  4075                           tblptrh	equ	0xFF7
  4076                           tblptrl	equ	0xFF6
  4077                           tablat	equ	0xFF5
  4078                           prodh	equ	0xFF4
  4079                           prodl	equ	0xFF3
  4080                           postinc0	equ	0xFEE
  4081                           wreg	equ	0xFE8
  4082                           postdec1	equ	0xFE5
  4083                           fsr1l	equ	0xFE1
  4084                           indf2	equ	0xFDF
  4085                           postinc2	equ	0xFDE
  4086                           fsr2h	equ	0xFDA
  4087                           fsr2l	equ	0xFD9
  4088                           status	equ	0xFD8
  4089                           
  4090 ;; *************** function _testLeds *****************
  4091 ;; Defined at:
  4092 ;;		line 43 in file "LedsApp.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;		None
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;  idx             2   24[COMRAM] int 
  4097 ;; Return value:  Size  Location     Type
  4098 ;;                  1    wreg      void 
  4099 ;; Registers used:
  4100 ;;		wreg, status,2, status,0
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4106 ;;      Params:         0       0       0       0       0       0       0
  4107 ;;      Locals:         2       0       0       0       0       0       0
  4108 ;;      Temps:          1       0       0       0       0       0       0
  4109 ;;      Totals:         3       0       0       0       0       0       0
  4110 ;;Total ram usage:        3 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    3
  4113 ;; This function calls:
  4114 ;;		Nothing
  4115 ;; This function is called by:
  4116 ;;		_GroupCommon
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           	psect	text9
  4121  001D6A                     __ptext9:
  4122                           	opt stack 0
  4123  001D6A                     _testLeds:
  4124                           	opt stack 25
  4125                           
  4126                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  4127                           
  4128                           ;incstack = 0
  4129  001D6A  0E00               	movlw	0
  4130  001D6C  6E1A               	movwf	testLeds@idx+1,c
  4131  001D6E  0E00               	movlw	0
  4132  001D70  6E19               	movwf	testLeds@idx,c
  4133  001D72                     l4580:
  4134  001D72  BE1A               	btfsc	testLeds@idx+1,7,c
  4135  001D74  D006               	goto	l42
  4136  001D76  501A               	movf	testLeds@idx+1,w,c
  4137  001D78  E127               	bnz	l44
  4138  001D7A  0E0A               	movlw	10
  4139  001D7C  5C19               	subwf	testLeds@idx,w,c
  4140  001D7E  B0D8               	btfsc	status,0,c
  4141  001D80  0012               	return	
  4142  001D82                     l42:
  4143                           
  4144                           ;LedsApp.c: 47: {
  4145                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  4146  001D82  808B               	bsf	3979,0,c	;volatile
  4147                           
  4148                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  4149  001D84  0E82               	movlw	130
  4150  001D86  6E18               	movwf	??_testLeds& (0+255),c
  4151  001D88  0EDE               	movlw	222
  4152  001D8A                     u6397:
  4153  001D8A  2EE8               	decfsz	wreg,f,c
  4154  001D8C  D7FE               	bra	u6397
  4155  001D8E  2E18               	decfsz	??_testLeds& (0+255),f,c
  4156  001D90  D7FC               	bra	u6397
  4157                           
  4158                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  4159  001D92  888A               	bsf	3978,4,c	;volatile
  4160                           
  4161                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  4162  001D94  0E82               	movlw	130
  4163  001D96  6E18               	movwf	??_testLeds& (0+255),c
  4164  001D98  0EDE               	movlw	222
  4165  001D9A                     u6407:
  4166  001D9A  2EE8               	decfsz	wreg,f,c
  4167  001D9C  D7FE               	bra	u6407
  4168  001D9E  2E18               	decfsz	??_testLeds& (0+255),f,c
  4169  001DA0  D7FC               	bra	u6407
  4170                           
  4171                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  4172  001DA2  908B               	bcf	3979,0,c	;volatile
  4173                           
  4174                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  4175  001DA4  0E82               	movlw	130
  4176  001DA6  6E18               	movwf	??_testLeds& (0+255),c
  4177  001DA8  0EDE               	movlw	222
  4178  001DAA                     u6417:
  4179  001DAA  2EE8               	decfsz	wreg,f,c
  4180  001DAC  D7FE               	bra	u6417
  4181  001DAE  2E18               	decfsz	??_testLeds& (0+255),f,c
  4182  001DB0  D7FC               	bra	u6417
  4183                           
  4184                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  4185  001DB2  988A               	bcf	3978,4,c	;volatile
  4186                           
  4187                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  4188  001DB4  0E82               	movlw	130
  4189  001DB6  6E18               	movwf	??_testLeds& (0+255),c
  4190  001DB8  0EDE               	movlw	222
  4191  001DBA                     u6427:
  4192  001DBA  2EE8               	decfsz	wreg,f,c
  4193  001DBC  D7FE               	bra	u6427
  4194  001DBE  2E18               	decfsz	??_testLeds& (0+255),f,c
  4195  001DC0  D7FC               	bra	u6427
  4196  001DC2  4A19               	infsnz	testLeds@idx,f,c
  4197  001DC4  2A1A               	incf	testLeds@idx+1,f,c
  4198  001DC6  D7D5               	goto	l4580
  4199  001DC8                     l44:
  4200  001DC8  0012               	return		;funcret
  4201  001DCA                     __end_of_testLeds:
  4202                           	opt stack 0
  4203                           tosu	equ	0xFFF
  4204                           tosh	equ	0xFFE
  4205                           tosl	equ	0xFFD
  4206                           pclath	equ	0xFFA
  4207                           tblptru	equ	0xFF8
  4208                           tblptrh	equ	0xFF7
  4209                           tblptrl	equ	0xFF6
  4210                           tablat	equ	0xFF5
  4211                           prodh	equ	0xFF4
  4212                           prodl	equ	0xFF3
  4213                           postinc0	equ	0xFEE
  4214                           wreg	equ	0xFE8
  4215                           postdec1	equ	0xFE5
  4216                           fsr1l	equ	0xFE1
  4217                           indf2	equ	0xFDF
  4218                           postinc2	equ	0xFDE
  4219                           fsr2h	equ	0xFDA
  4220                           fsr2l	equ	0xFD9
  4221                           status	equ	0xFD8
  4222                           
  4223 ;; *************** function _PrintHelpScreen *****************
  4224 ;; Defined at:
  4225 ;;		line 88 in file "SystemStatus.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;  dest           50    0[BANK0 ] unsigned char [50]
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4239 ;;      Params:         0       0       0       0       0       0       0
  4240 ;;      Locals:         0      50       0       0       0       0       0
  4241 ;;      Temps:          0       0       0       0       0       0       0
  4242 ;;      Totals:         0      50       0       0       0       0       0
  4243 ;;Total ram usage:       50 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:    5
  4246 ;; This function calls:
  4247 ;;		_UART_Write_Text
  4248 ;;		_sprintf
  4249 ;; This function is called by:
  4250 ;;		_GroupCommon
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           	psect	text10
  4255  00035C                     __ptext10:
  4256                           	opt stack 0
  4257  00035C                     _PrintHelpScreen:
  4258                           	opt stack 23
  4259                           
  4260                           ;SystemStatus.c: 90: char dest[50];
  4261                           ;SystemStatus.c: 93: sprintf(dest, "<TX system commands>\n\r");
  4262                           
  4263                           ;incstack = 0
  4264  00035C  0E60               	movlw	low PrintHelpScreen@dest
  4265  00035E  6E18               	movwf	sprintf@sp,c
  4266  000360  0E00               	movlw	high PrintHelpScreen@dest
  4267  000362  6E19               	movwf	sprintf@sp+1,c
  4268  000364  0E6C               	movlw	low STR_14
  4269  000366  6E1A               	movwf	sprintf@f,c
  4270  000368  0E7F               	movlw	high STR_14
  4271  00036A  6E1B               	movwf	sprintf@f+1,c
  4272  00036C  ECCD  F00A         	call	_sprintf	;wreg free
  4273                           
  4274                           ;SystemStatus.c: 94: UART_Write_Text(dest);
  4275  000370  0E60               	movlw	low PrintHelpScreen@dest
  4276  000372  6E19               	movwf	UART_Write_Text@text,c
  4277  000374  0E00               	movlw	high PrintHelpScreen@dest
  4278  000376  6E1A               	movwf	UART_Write_Text@text+1,c
  4279  000378  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4280                           
  4281                           ;SystemStatus.c: 96: sprintf(dest, "$TI <XXXX><cr>   Init TX system and set frequency (0
      +                          -9999)[MHz]\r\n");
  4282  00037C  0E60               	movlw	low PrintHelpScreen@dest
  4283  00037E  6E18               	movwf	sprintf@sp,c
  4284  000380  0E00               	movlw	high PrintHelpScreen@dest
  4285  000382  6E19               	movwf	sprintf@sp+1,c
  4286  000384  0E14               	movlw	low STR_15
  4287  000386  6E1A               	movwf	sprintf@f,c
  4288  000388  0E7D               	movlw	high STR_15
  4289  00038A  6E1B               	movwf	sprintf@f+1,c
  4290  00038C  ECCD  F00A         	call	_sprintf	;wreg free
  4291                           
  4292                           ;SystemStatus.c: 97: UART_Write_Text(dest);
  4293  000390  0E60               	movlw	low PrintHelpScreen@dest
  4294  000392  6E19               	movwf	UART_Write_Text@text,c
  4295  000394  0E00               	movlw	high PrintHelpScreen@dest
  4296  000396  6E1A               	movwf	UART_Write_Text@text+1,c
  4297  000398  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4298                           
  4299                           ;SystemStatus.c: 98: sprintf(dest, "$TF <XXXX><cr>   Set TX system frequency at (0-9999)
      +                          [MHz].\r\n");
  4300  00039C  0E60               	movlw	low PrintHelpScreen@dest
  4301  00039E  6E18               	movwf	sprintf@sp,c
  4302  0003A0  0E00               	movlw	high PrintHelpScreen@dest
  4303  0003A2  6E19               	movwf	sprintf@sp+1,c
  4304  0003A4  0E94               	movlw	low STR_16
  4305  0003A6  6E1A               	movwf	sprintf@f,c
  4306  0003A8  0E7D               	movlw	high STR_16
  4307  0003AA  6E1B               	movwf	sprintf@f+1,c
  4308  0003AC  ECCD  F00A         	call	_sprintf	;wreg free
  4309                           
  4310                           ;SystemStatus.c: 99: UART_Write_Text(dest);
  4311  0003B0  0E60               	movlw	low PrintHelpScreen@dest
  4312  0003B2  6E19               	movwf	UART_Write_Text@text,c
  4313  0003B4  0E00               	movlw	high PrintHelpScreen@dest
  4314  0003B6  6E1A               	movwf	UART_Write_Text@text+1,c
  4315  0003B8  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4316                           
  4317                           ;SystemStatus.c: 100: sprintf(dest, "$TQ <cr>         Get status from TX system.\r\n");
  4318  0003BC  0E60               	movlw	low PrintHelpScreen@dest
  4319  0003BE  6E18               	movwf	sprintf@sp,c
  4320  0003C0  0E00               	movlw	high PrintHelpScreen@dest
  4321  0003C2  6E19               	movwf	sprintf@sp+1,c
  4322  0003C4  0E71               	movlw	low STR_17
  4323  0003C6  6E1A               	movwf	sprintf@f,c
  4324  0003C8  0E7E               	movlw	high STR_17
  4325  0003CA  6E1B               	movwf	sprintf@f+1,c
  4326  0003CC  ECCD  F00A         	call	_sprintf	;wreg free
  4327                           
  4328                           ;SystemStatus.c: 101: UART_Write_Text(dest);
  4329  0003D0  0E60               	movlw	low PrintHelpScreen@dest
  4330  0003D2  6E19               	movwf	UART_Write_Text@text,c
  4331  0003D4  0E00               	movlw	high PrintHelpScreen@dest
  4332  0003D6  6E1A               	movwf	UART_Write_Text@text+1,c
  4333  0003D8  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4334                           
  4335                           ;SystemStatus.c: 102: sprintf(dest, "$TB <X><cr>      Turn on[1] / off[0] BIT mode at TX
      +                           system [Default = 0]\r\n");
  4336  0003DC  0E60               	movlw	low PrintHelpScreen@dest
  4337  0003DE  6E18               	movwf	sprintf@sp,c
  4338  0003E0  0E00               	movlw	high PrintHelpScreen@dest
  4339  0003E2  6E19               	movwf	sprintf@sp+1,c
  4340  0003E4  0E7F               	movlw	low STR_18
  4341  0003E6  6E1A               	movwf	sprintf@f,c
  4342  0003E8  0E7C               	movlw	high STR_18
  4343  0003EA  6E1B               	movwf	sprintf@f+1,c
  4344  0003EC  ECCD  F00A         	call	_sprintf	;wreg free
  4345                           
  4346                           ;SystemStatus.c: 103: UART_Write_Text(dest);
  4347  0003F0  0E60               	movlw	low PrintHelpScreen@dest
  4348  0003F2  6E19               	movwf	UART_Write_Text@text,c
  4349  0003F4  0E00               	movlw	high PrintHelpScreen@dest
  4350  0003F6  6E1A               	movwf	UART_Write_Text@text+1,c
  4351  0003F8  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4352                           
  4353                           ;SystemStatus.c: 104: sprintf(dest, "$TX <X><cr>      Turn on[1] / off[0] transmission a
      +                          t TX system [Default = 0]\r\n");
  4354  0003FC  0E60               	movlw	low PrintHelpScreen@dest
  4355  0003FE  6E18               	movwf	sprintf@sp,c
  4356  000400  0E00               	movlw	high PrintHelpScreen@dest
  4357  000402  6E19               	movwf	sprintf@sp+1,c
  4358  000404  0E30               	movlw	low STR_19
  4359  000406  6E1A               	movwf	sprintf@f,c
  4360  000408  0E7C               	movlw	high STR_19
  4361  00040A  6E1B               	movwf	sprintf@f+1,c
  4362  00040C  ECCD  F00A         	call	_sprintf	;wreg free
  4363                           
  4364                           ;SystemStatus.c: 105: UART_Write_Text(dest);
  4365  000410  0E60               	movlw	low PrintHelpScreen@dest
  4366  000412  6E19               	movwf	UART_Write_Text@text,c
  4367  000414  0E00               	movlw	high PrintHelpScreen@dest
  4368  000416  6E1A               	movwf	UART_Write_Text@text+1,c
  4369  000418  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4370                           
  4371                           ;SystemStatus.c: 108: sprintf(dest, "\n\r<RX system commands>\n\r");
  4372  00041C  0E60               	movlw	low PrintHelpScreen@dest
  4373  00041E  6E18               	movwf	sprintf@sp,c
  4374  000420  0E00               	movlw	high PrintHelpScreen@dest
  4375  000422  6E19               	movwf	sprintf@sp+1,c
  4376  000424  0E53               	movlw	low STR_20
  4377  000426  6E1A               	movwf	sprintf@f,c
  4378  000428  0E7F               	movlw	high STR_20
  4379  00042A  6E1B               	movwf	sprintf@f+1,c
  4380  00042C  ECCD  F00A         	call	_sprintf	;wreg free
  4381                           
  4382                           ;SystemStatus.c: 109: UART_Write_Text(dest);
  4383  000430  0E60               	movlw	low PrintHelpScreen@dest
  4384  000432  6E19               	movwf	UART_Write_Text@text,c
  4385  000434  0E00               	movlw	high PrintHelpScreen@dest
  4386  000436  6E1A               	movwf	UART_Write_Text@text+1,c
  4387  000438  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4388                           
  4389                           ;SystemStatus.c: 110: sprintf(dest, "$RI <XXXX><cr>   Init RX system and set frequency a
      +                          t XXXX (0-9999)[MHz]\r\n");
  4390  00043C  0E60               	movlw	low PrintHelpScreen@dest
  4391  00043E  6E18               	movwf	sprintf@sp,c
  4392  000440  0E00               	movlw	high PrintHelpScreen@dest
  4393  000442  6E19               	movwf	sprintf@sp+1,c
  4394  000444  0ECA               	movlw	low STR_21
  4395  000446  6E1A               	movwf	sprintf@f,c
  4396  000448  0E7C               	movlw	high STR_21
  4397  00044A  6E1B               	movwf	sprintf@f+1,c
  4398  00044C  ECCD  F00A         	call	_sprintf	;wreg free
  4399                           
  4400                           ;SystemStatus.c: 111: UART_Write_Text(dest);
  4401  000450  0E60               	movlw	low PrintHelpScreen@dest
  4402  000452  6E19               	movwf	UART_Write_Text@text,c
  4403  000454  0E00               	movlw	high PrintHelpScreen@dest
  4404  000456  6E1A               	movwf	UART_Write_Text@text+1,c
  4405  000458  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4406                           
  4407                           ;SystemStatus.c: 112: sprintf(dest, "$RQ <cr>         Get status from RX system\r\n");
  4408  00045C  0E60               	movlw	low PrintHelpScreen@dest
  4409  00045E  6E18               	movwf	sprintf@sp,c
  4410  000460  0E00               	movlw	high PrintHelpScreen@dest
  4411  000462  6E19               	movwf	sprintf@sp+1,c
  4412  000464  0E9F               	movlw	low STR_22
  4413  000466  6E1A               	movwf	sprintf@f,c
  4414  000468  0E7E               	movlw	high STR_22
  4415  00046A  6E1B               	movwf	sprintf@f+1,c
  4416  00046C  ECCD  F00A         	call	_sprintf	;wreg free
  4417                           
  4418                           ;SystemStatus.c: 113: UART_Write_Text(dest);
  4419  000470  0E60               	movlw	low PrintHelpScreen@dest
  4420  000472  6E19               	movwf	UART_Write_Text@text,c
  4421  000474  0E00               	movlw	high PrintHelpScreen@dest
  4422  000476  6E1A               	movwf	UART_Write_Text@text+1,c
  4423  000478  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4424                           
  4425                           ;SystemStatus.c: 114: sprintf(dest, "$RB <X><cr>      Turn on[1] / off[0] BIT mode at RX
      +                           system.\r\n");
  4426  00047C  0E60               	movlw	low PrintHelpScreen@dest
  4427  00047E  6E18               	movwf	sprintf@sp,c
  4428  000480  0E00               	movlw	high PrintHelpScreen@dest
  4429  000482  6E19               	movwf	sprintf@sp+1,c
  4430  000484  0E56               	movlw	low STR_23
  4431  000486  6E1A               	movwf	sprintf@f,c
  4432  000488  0E7D               	movlw	high STR_23
  4433  00048A  6E1B               	movwf	sprintf@f+1,c
  4434  00048C  ECCD  F00A         	call	_sprintf	;wreg free
  4435                           
  4436                           ;SystemStatus.c: 115: UART_Write_Text(dest);
  4437  000490  0E60               	movlw	low PrintHelpScreen@dest
  4438  000492  6E19               	movwf	UART_Write_Text@text,c
  4439  000494  0E00               	movlw	high PrintHelpScreen@dest
  4440  000496  6E1A               	movwf	UART_Write_Text@text+1,c
  4441  000498  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4442                           
  4443                           ;SystemStatus.c: 116: sprintf(dest, "$RX <X><cr>      Turn on[1] / off[0] receive at RX 
      +                          system.\r\n");
  4444  00049C  0E60               	movlw	low PrintHelpScreen@dest
  4445  00049E  6E18               	movwf	sprintf@sp,c
  4446  0004A0  0E00               	movlw	high PrintHelpScreen@dest
  4447  0004A2  6E19               	movwf	sprintf@sp+1,c
  4448  0004A4  0ED1               	movlw	low STR_24
  4449  0004A6  6E1A               	movwf	sprintf@f,c
  4450  0004A8  0E7D               	movlw	high STR_24
  4451  0004AA  6E1B               	movwf	sprintf@f+1,c
  4452  0004AC  ECCD  F00A         	call	_sprintf	;wreg free
  4453                           
  4454                           ;SystemStatus.c: 117: UART_Write_Text(dest);
  4455  0004B0  0E60               	movlw	low PrintHelpScreen@dest
  4456  0004B2  6E19               	movwf	UART_Write_Text@text,c
  4457  0004B4  0E00               	movlw	high PrintHelpScreen@dest
  4458  0004B6  6E1A               	movwf	UART_Write_Text@text+1,c
  4459  0004B8  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4460                           
  4461                           ;SystemStatus.c: 118: sprintf(dest, "$RCR <X><cr>     Set Compression range at RX system
      +                          . High [1] Low [0] [Default = 0]\r\n");
  4462  0004BC  0E60               	movlw	low PrintHelpScreen@dest
  4463  0004BE  6E18               	movwf	sprintf@sp,c
  4464  0004C0  0E00               	movlw	high PrintHelpScreen@dest
  4465  0004C2  6E19               	movwf	sprintf@sp+1,c
  4466  0004C4  0E84               	movlw	low STR_25
  4467  0004C6  6E1A               	movwf	sprintf@f,c
  4468  0004C8  0E7B               	movlw	high STR_25
  4469  0004CA  6E1B               	movwf	sprintf@f+1,c
  4470  0004CC  ECCD  F00A         	call	_sprintf	;wreg free
  4471                           
  4472                           ;SystemStatus.c: 119: UART_Write_Text(dest);
  4473  0004D0  0E60               	movlw	low PrintHelpScreen@dest
  4474  0004D2  6E19               	movwf	UART_Write_Text@text,c
  4475  0004D4  0E00               	movlw	high PrintHelpScreen@dest
  4476  0004D6  6E1A               	movwf	UART_Write_Text@text+1,c
  4477  0004D8  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4478                           
  4479                           ;SystemStatus.c: 120: sprintf(dest, "$RCP <X><cr>     Set Compression operation mode at 
      +                          RX system: Automatic[1] Manual[0] [Default = 0]\r\n");
  4480  0004DC  0E60               	movlw	low PrintHelpScreen@dest
  4481  0004DE  6E18               	movwf	sprintf@sp,c
  4482  0004E0  0E00               	movlw	high PrintHelpScreen@dest
  4483  0004E2  6E19               	movwf	sprintf@sp+1,c
  4484  0004E4  0E1F               	movlw	low STR_26
  4485  0004E6  6E1A               	movwf	sprintf@f,c
  4486  0004E8  0E7B               	movlw	high STR_26
  4487  0004EA  6E1B               	movwf	sprintf@f+1,c
  4488  0004EC  ECCD  F00A         	call	_sprintf	;wreg free
  4489                           
  4490                           ;SystemStatus.c: 121: UART_Write_Text(dest);
  4491  0004F0  0E60               	movlw	low PrintHelpScreen@dest
  4492  0004F2  6E19               	movwf	UART_Write_Text@text,c
  4493  0004F4  0E00               	movlw	high PrintHelpScreen@dest
  4494  0004F6  6E1A               	movwf	UART_Write_Text@text+1,c
  4495  0004F8  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4496                           
  4497                           ;SystemStatus.c: 124: sprintf(dest, "\n\r<Common system commands>\n\r");
  4498  0004FC  0E60               	movlw	low PrintHelpScreen@dest
  4499  0004FE  6E18               	movwf	sprintf@sp,c
  4500  000500  0E00               	movlw	high PrintHelpScreen@dest
  4501  000502  6E19               	movwf	sprintf@sp+1,c
  4502  000504  0E36               	movlw	low STR_27
  4503  000506  6E1A               	movwf	sprintf@f,c
  4504  000508  0E7F               	movlw	high STR_27
  4505  00050A  6E1B               	movwf	sprintf@f+1,c
  4506  00050C  ECCD  F00A         	call	_sprintf	;wreg free
  4507                           
  4508                           ;SystemStatus.c: 125: UART_Write_Text(dest);
  4509  000510  0E60               	movlw	low PrintHelpScreen@dest
  4510  000512  6E19               	movwf	UART_Write_Text@text,c
  4511  000514  0E00               	movlw	high PrintHelpScreen@dest
  4512  000516  6E1A               	movwf	UART_Write_Text@text+1,c
  4513  000518  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4514                           
  4515                           ;SystemStatus.c: 126: sprintf(dest, "$SH <cr>         Print system help message.\r\n");
  4516  00051C  0E60               	movlw	low PrintHelpScreen@dest
  4517  00051E  6E18               	movwf	sprintf@sp,c
  4518  000520  0E00               	movlw	high PrintHelpScreen@dest
  4519  000522  6E19               	movwf	sprintf@sp+1,c
  4520  000524  0E43               	movlw	low STR_28
  4521  000526  6E1A               	movwf	sprintf@f,c
  4522  000528  0E7E               	movlw	high STR_28
  4523  00052A  6E1B               	movwf	sprintf@f+1,c
  4524  00052C  ECCD  F00A         	call	_sprintf	;wreg free
  4525                           
  4526                           ;SystemStatus.c: 127: UART_Write_Text(dest);
  4527  000530  0E60               	movlw	low PrintHelpScreen@dest
  4528  000532  6E19               	movwf	UART_Write_Text@text,c
  4529  000534  0E00               	movlw	high PrintHelpScreen@dest
  4530  000536  6E1A               	movwf	UART_Write_Text@text+1,c
  4531  000538  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4532                           
  4533                           ;SystemStatus.c: 128: sprintf(dest, "$SBT <XX><cr>    Set UART refresh rate (1-20)[Hz].\
      +                          r\n");
  4534  00053C  0E60               	movlw	low PrintHelpScreen@dest
  4535  00053E  6E18               	movwf	sprintf@sp,c
  4536  000540  0E00               	movlw	high PrintHelpScreen@dest
  4537  000542  6E19               	movwf	sprintf@sp+1,c
  4538  000544  0E0E               	movlw	low STR_29
  4539  000546  6E1A               	movwf	sprintf@f,c
  4540  000548  0E7E               	movlw	high STR_29
  4541  00054A  6E1B               	movwf	sprintf@f+1,c
  4542  00054C  ECCD  F00A         	call	_sprintf	;wreg free
  4543                           
  4544                           ;SystemStatus.c: 129: UART_Write_Text(dest);
  4545  000550  0E60               	movlw	low PrintHelpScreen@dest
  4546  000552  6E19               	movwf	UART_Write_Text@text,c
  4547  000554  0E00               	movlw	high PrintHelpScreen@dest
  4548  000556  6E1A               	movwf	UART_Write_Text@text+1,c
  4549  000558  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4550                           
  4551                           ;SystemStatus.c: 130: sprintf(dest, "$SBU <X><cr>     Set UART automatic operation: Auto
      +                          matic[1] Manual[0] [Default = 0]\r\n");
  4552  00055C  0E60               	movlw	low PrintHelpScreen@dest
  4553  00055E  6E18               	movwf	sprintf@sp,c
  4554  000560  0E00               	movlw	high PrintHelpScreen@dest
  4555  000562  6E19               	movwf	sprintf@sp+1,c
  4556  000564  0EDA               	movlw	low STR_30
  4557  000566  6E1A               	movwf	sprintf@f,c
  4558  000568  0E7B               	movlw	high STR_30
  4559  00056A  6E1B               	movwf	sprintf@f+1,c
  4560  00056C  ECCD  F00A         	call	_sprintf	;wreg free
  4561                           
  4562                           ;SystemStatus.c: 131: UART_Write_Text(dest);
  4563  000570  0E60               	movlw	low PrintHelpScreen@dest
  4564  000572  6E19               	movwf	UART_Write_Text@text,c
  4565  000574  0E00               	movlw	high PrintHelpScreen@dest
  4566  000576  6E1A               	movwf	UART_Write_Text@text+1,c
  4567  000578  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4568                           
  4569                           ;SystemStatus.c: 132: sprintf(dest, "$SQ <X><cr>      Get system status.\r\n");
  4570  00057C  0E60               	movlw	low PrintHelpScreen@dest
  4571  00057E  6E18               	movwf	sprintf@sp,c
  4572  000580  0E00               	movlw	high PrintHelpScreen@dest
  4573  000582  6E19               	movwf	sprintf@sp+1,c
  4574  000584  0ECC               	movlw	low STR_31
  4575  000586  6E1A               	movwf	sprintf@f,c
  4576  000588  0E7E               	movlw	high STR_31
  4577  00058A  6E1B               	movwf	sprintf@f+1,c
  4578  00058C  ECCD  F00A         	call	_sprintf	;wreg free
  4579                           
  4580                           ;SystemStatus.c: 133: UART_Write_Text(dest);
  4581  000590  0E60               	movlw	low PrintHelpScreen@dest
  4582  000592  6E19               	movwf	UART_Write_Text@text,c
  4583  000594  0E00               	movlw	high PrintHelpScreen@dest
  4584  000596  6E1A               	movwf	UART_Write_Text@text+1,c
  4585  000598  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4586                           
  4587                           ;SystemStatus.c: 134: sprintf(dest, "$SL <cr>         Test system LEDs.\r\n");
  4588  00059C  0E60               	movlw	low PrintHelpScreen@dest
  4589  00059E  6E18               	movwf	sprintf@sp,c
  4590  0005A0  0E00               	movlw	high PrintHelpScreen@dest
  4591  0005A2  6E19               	movwf	sprintf@sp+1,c
  4592  0005A4  0EF2               	movlw	low STR_32
  4593  0005A6  6E1A               	movwf	sprintf@f,c
  4594  0005A8  0E7E               	movlw	high STR_32
  4595  0005AA  6E1B               	movwf	sprintf@f+1,c
  4596  0005AC  ECCD  F00A         	call	_sprintf	;wreg free
  4597                           
  4598                           ;SystemStatus.c: 135: UART_Write_Text(dest);
  4599  0005B0  0E60               	movlw	low PrintHelpScreen@dest
  4600  0005B2  6E19               	movwf	UART_Write_Text@text,c
  4601  0005B4  0E00               	movlw	high PrintHelpScreen@dest
  4602  0005B6  6E1A               	movwf	UART_Write_Text@text+1,c
  4603  0005B8  ECEC  F011         	call	_UART_Write_Text	;wreg free
  4604  0005BC  0012               	return		;funcret
  4605  0005BE                     __end_of_PrintHelpScreen:
  4606                           	opt stack 0
  4607                           tosu	equ	0xFFF
  4608                           tosh	equ	0xFFE
  4609                           tosl	equ	0xFFD
  4610                           pclath	equ	0xFFA
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           postinc0	equ	0xFEE
  4618                           wreg	equ	0xFE8
  4619                           postdec1	equ	0xFE5
  4620                           fsr1l	equ	0xFE1
  4621                           indf2	equ	0xFDF
  4622                           postinc2	equ	0xFDE
  4623                           fsr2h	equ	0xFDA
  4624                           fsr2l	equ	0xFD9
  4625                           status	equ	0xFD8
  4626                           
  4627 ;; *************** function _EUSART1_Read *****************
  4628 ;; Defined at:
  4629 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;		None
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  readValue       2   24[COMRAM] unsigned int 
  4634 ;; Return value:  Size  Location     Type
  4635 ;;                  1    wreg      unsigned char 
  4636 ;; Registers used:
  4637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4643 ;;      Params:         0       0       0       0       0       0       0
  4644 ;;      Locals:         2       0       0       0       0       0       0
  4645 ;;      Temps:          1       0       0       0       0       0       0
  4646 ;;      Totals:         3       0       0       0       0       0       0
  4647 ;;Total ram usage:        3 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    3
  4650 ;; This function calls:
  4651 ;;		Nothing
  4652 ;; This function is called by:
  4653 ;;		_readUartByte
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           	psect	text11
  4658  00213E                     __ptext11:
  4659                           	opt stack 0
  4660  00213E                     _EUSART1_Read:
  4661                           	opt stack 26
  4662                           
  4663                           ;eusart1.c: 112: uint16_t readValue = 0;
  4664                           
  4665                           ;incstack = 0
  4666  00213E  0E00               	movlw	0
  4667  002140  6E1A               	movwf	EUSART1_Read@readValue+1,c
  4668  002142  0E00               	movlw	0
  4669  002144  6E19               	movwf	EUSART1_Read@readValue,c
  4670                           
  4671                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  4672  002146  0100               	movlb	0	; () banked
  4673  002148  51D4               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  4674  00214A  A4D8               	btfss	status,2,c
  4675  00214C  D002               	goto	l745
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;eusart1.c: 120: {
  4679                           ;eusart1.c: 121: return readValue;
  4680  00214E  5019               	movf	EUSART1_Read@readValue,w,c
  4681                           
  4682                           ; BSR set to: 0
  4683  002150  0012               	return	
  4684  002152                     l745:
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;eusart1.c: 122: }
  4688                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  4689                           
  4690                           ; BSR set to: 0
  4691  002152  5036               	movf	_eusart1RxTail,w,c	;volatile
  4692  002154  0D01               	mullw	1
  4693  002156  0E46               	movlw	low _eusart1RxBuffer
  4694  002158  24F3               	addwf	prodl,w,c
  4695  00215A  6ED9               	movwf	fsr2l,c
  4696  00215C  0E01               	movlw	high _eusart1RxBuffer
  4697  00215E  20F4               	addwfc	prodh,w,c
  4698  002160  6EDA               	movwf	fsr2h,c
  4699  002162  50DF               	movf	indf2,w,c
  4700  002164  6E18               	movwf	??_EUSART1_Read& (0+255),c
  4701  002166  5018               	movf	??_EUSART1_Read,w,c
  4702  002168  6E19               	movwf	EUSART1_Read@readValue,c
  4703  00216A  6A1A               	clrf	EUSART1_Read@readValue+1,c
  4704                           
  4705                           ; BSR set to: 0
  4706  00216C  2A36               	incf	_eusart1RxTail,f,c	;volatile
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  4710  00216E  0E27               	movlw	39
  4711  002170  6436               	cpfsgt	_eusart1RxTail,c	;volatile
  4712  002172  D002               	goto	l747
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;eusart1.c: 126: {
  4716                           ;eusart1.c: 127: eusart1RxTail = 0;
  4717  002174  0E00               	movlw	0
  4718  002176  6E36               	movwf	_eusart1RxTail,c	;volatile
  4719  002178                     l747:
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;eusart1.c: 128: }
  4723                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  4724                           
  4725                           ; BSR set to: 0
  4726  002178  9A9D               	bcf	3997,5,c	;volatile
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;eusart1.c: 130: eusart1RxCount--;
  4730  00217A  07D4               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  4734  00217C  8A9D               	bsf	3997,5,c	;volatile
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;eusart1.c: 133: return readValue;
  4738  00217E  5019               	movf	EUSART1_Read@readValue,w,c
  4739  002180  0012               	return	
  4740  002182                     __end_of_EUSART1_Read:
  4741                           	opt stack 0
  4742                           tosu	equ	0xFFF
  4743                           tosh	equ	0xFFE
  4744                           tosl	equ	0xFFD
  4745                           pclath	equ	0xFFA
  4746                           tblptru	equ	0xFF8
  4747                           tblptrh	equ	0xFF7
  4748                           tblptrl	equ	0xFF6
  4749                           tablat	equ	0xFF5
  4750                           prodh	equ	0xFF4
  4751                           prodl	equ	0xFF3
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           postdec1	equ	0xFE5
  4755                           fsr1l	equ	0xFE1
  4756                           indf2	equ	0xFDF
  4757                           postinc2	equ	0xFDE
  4758                           fsr2h	equ	0xFDA
  4759                           fsr2l	equ	0xFD9
  4760                           status	equ	0xFD8
  4761                           
  4762 ;; *************** function _keepAliveSignalLed *****************
  4763 ;; Defined at:
  4764 ;;		line 35 in file "LedsApp.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;		None
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;		None
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, status,0
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4778 ;;      Params:         0       0       0       0       0       0       0
  4779 ;;      Locals:         0       0       0       0       0       0       0
  4780 ;;      Temps:          1       0       0       0       0       0       0
  4781 ;;      Totals:         1       0       0       0       0       0       0
  4782 ;;Total ram usage:        1 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    3
  4785 ;; This function calls:
  4786 ;;		Nothing
  4787 ;; This function is called by:
  4788 ;;		_main
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           	psect	text12
  4793  00261C                     __ptext12:
  4794                           	opt stack 0
  4795  00261C                     _keepAliveSignalLed:
  4796                           	opt stack 27
  4797                           
  4798                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;incstack = 0
  4802  00261C  B08B               	btfsc	3979,0,c	;volatile
  4803  00261E  D003               	goto	u4290
  4804  002620  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  4805  002622  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  4806  002624  D001               	goto	u4308
  4807  002626                     u4290:
  4808  002626  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  4809  002628                     u4308:
  4810  002628  508B               	movf	3979,w,c	;volatile
  4811  00262A  1818               	xorwf	??_keepAliveSignalLed,w,c
  4812  00262C  0BFE               	andlw	-2
  4813  00262E  1818               	xorwf	??_keepAliveSignalLed,w,c
  4814  002630  6E8B               	movwf	3979,c	;volatile
  4815  002632  0012               	return		;funcret
  4816  002634                     __end_of_keepAliveSignalLed:
  4817                           	opt stack 0
  4818                           tosu	equ	0xFFF
  4819                           tosh	equ	0xFFE
  4820                           tosl	equ	0xFFD
  4821                           pclath	equ	0xFFA
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           prodh	equ	0xFF4
  4827                           prodl	equ	0xFF3
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           postdec1	equ	0xFE5
  4831                           fsr1l	equ	0xFE1
  4832                           indf2	equ	0xFDF
  4833                           postinc2	equ	0xFDE
  4834                           fsr2h	equ	0xFDA
  4835                           fsr2l	equ	0xFD9
  4836                           status	equ	0xFD8
  4837                           
  4838 ;; *************** function _SetMcuSystem *****************
  4839 ;; Defined at:
  4840 ;;		line 11 in file "SystemSettings.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;		None
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;		None
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  1    wreg      void 
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, status,0, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4854 ;;      Params:         0       0       0       0       0       0       0
  4855 ;;      Locals:         0       0       0       0       0       0       0
  4856 ;;      Temps:          0       0       0       0       0       0       0
  4857 ;;      Totals:         0       0       0       0       0       0       0
  4858 ;;Total ram usage:        0 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    6
  4861 ;; This function calls:
  4862 ;;		_SYSTEM_Initialize
  4863 ;; This function is called by:
  4864 ;;		_main
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           	psect	text13
  4869  0026C0                     __ptext13:
  4870                           	opt stack 0
  4871  0026C0                     _SetMcuSystem:
  4872                           	opt stack 24
  4873                           
  4874                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  4875                           
  4876                           ;incstack = 0
  4877  0026C0  EC01  F013         	call	_SYSTEM_Initialize	;wreg free
  4878                           
  4879                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  4880  0026C4  8EF2               	bsf	intcon,7,c	;volatile
  4881                           
  4882                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  4883  0026C6  8CF2               	bsf	intcon,6,c	;volatile
  4884  0026C8  0012               	return		;funcret
  4885  0026CA                     __end_of_SetMcuSystem:
  4886                           	opt stack 0
  4887                           tosu	equ	0xFFF
  4888                           tosh	equ	0xFFE
  4889                           tosl	equ	0xFFD
  4890                           pclath	equ	0xFFA
  4891                           tblptru	equ	0xFF8
  4892                           tblptrh	equ	0xFF7
  4893                           tblptrl	equ	0xFF6
  4894                           tablat	equ	0xFF5
  4895                           prodh	equ	0xFF4
  4896                           prodl	equ	0xFF3
  4897                           intcon	equ	0xFF2
  4898                           postinc0	equ	0xFEE
  4899                           wreg	equ	0xFE8
  4900                           postdec1	equ	0xFE5
  4901                           fsr1l	equ	0xFE1
  4902                           indf2	equ	0xFDF
  4903                           postinc2	equ	0xFDE
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _SYSTEM_Initialize *****************
  4909 ;; Defined at:
  4910 ;;		line 112 in file "mcc_generated_files/mcc.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;		None
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      void 
  4917 ;; Registers used:
  4918 ;;		wreg, status,2, status,0, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4924 ;;      Params:         0       0       0       0       0       0       0
  4925 ;;      Locals:         0       0       0       0       0       0       0
  4926 ;;      Temps:          0       0       0       0       0       0       0
  4927 ;;      Totals:         0       0       0       0       0       0       0
  4928 ;;Total ram usage:        0 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:    5
  4931 ;; This function calls:
  4932 ;;		_ADC_Initialize
  4933 ;;		_EUSART1_Initialize
  4934 ;;		_INTERRUPT_Initialize
  4935 ;;		_OSCILLATOR_Initialize
  4936 ;;		_PIN_MANAGER_Initialize
  4937 ;;		_TMR0_Initialize
  4938 ;; This function is called by:
  4939 ;;		_SetMcuSystem
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text14
  4944  002602                     __ptext14:
  4945                           	opt stack 0
  4946  002602                     _SYSTEM_Initialize:
  4947                           	opt stack 24
  4948                           
  4949                           ;mcc.c: 114: INTERRUPT_Initialize();
  4950                           
  4951                           ;incstack = 0
  4952  002602  EC6E  F013         	call	_INTERRUPT_Initialize	;wreg free
  4953                           
  4954                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  4955  002606  EC7B  F010         	call	_PIN_MANAGER_Initialize	;wreg free
  4956                           
  4957                           ;mcc.c: 116: OSCILLATOR_Initialize();
  4958  00260A  EC4C  F013         	call	_OSCILLATOR_Initialize	;wreg free
  4959                           
  4960                           ;mcc.c: 117: ADC_Initialize();
  4961  00260E  EC1A  F013         	call	_ADC_Initialize	;wreg free
  4962                           
  4963                           ;mcc.c: 118: TMR0_Initialize();
  4964  002612  ECD2  F011         	call	_TMR0_Initialize	;wreg free
  4965                           
  4966                           ;mcc.c: 119: EUSART1_Initialize();
  4967  002616  ECB7  F011         	call	_EUSART1_Initialize	;wreg free
  4968  00261A  0012               	return		;funcret
  4969  00261C                     __end_of_SYSTEM_Initialize:
  4970                           	opt stack 0
  4971                           tosu	equ	0xFFF
  4972                           tosh	equ	0xFFE
  4973                           tosl	equ	0xFFD
  4974                           pclath	equ	0xFFA
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           prodh	equ	0xFF4
  4980                           prodl	equ	0xFF3
  4981                           intcon	equ	0xFF2
  4982                           postinc0	equ	0xFEE
  4983                           wreg	equ	0xFE8
  4984                           postdec1	equ	0xFE5
  4985                           fsr1l	equ	0xFE1
  4986                           indf2	equ	0xFDF
  4987                           postinc2	equ	0xFDE
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992 ;; *************** function _TMR0_Initialize *****************
  4993 ;; Defined at:
  4994 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;		None
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;		None
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  1    wreg      void 
  5001 ;; Registers used:
  5002 ;;		wreg, status,2, status,0, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5008 ;;      Params:         0       0       0       0       0       0       0
  5009 ;;      Locals:         0       0       0       0       0       0       0
  5010 ;;      Temps:          2       0       0       0       0       0       0
  5011 ;;      Totals:         2       0       0       0       0       0       0
  5012 ;;Total ram usage:        2 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    4
  5015 ;; This function calls:
  5016 ;;		_TMR0_SetInterruptHandler
  5017 ;; This function is called by:
  5018 ;;		_SYSTEM_Initialize
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text15
  5023  0023A4                     __ptext15:
  5024                           	opt stack 0
  5025  0023A4                     _TMR0_Initialize:
  5026                           	opt stack 24
  5027                           
  5028                           ;tmr0.c: 71: TMR0H = 0x3C;
  5029                           
  5030                           ;incstack = 0
  5031  0023A4  0E3C               	movlw	60
  5032  0023A6  6ED7               	movwf	4055,c	;volatile
  5033                           
  5034                           ;tmr0.c: 74: TMR0L = 0xAF;
  5035  0023A8  0EAF               	movlw	175
  5036  0023AA  6ED6               	movwf	4054,c	;volatile
  5037                           
  5038                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  5039  0023AC  50D6               	movf	4054,w,c	;volatile
  5040  0023AE  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  5041  0023B2  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  5042  0023B4  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  5043  0023B8  6A1A               	clrf	??_TMR0_Initialize,c
  5044  0023BA  101A               	iorwf	??_TMR0_Initialize,w,c
  5045  0023BC  6E46               	movwf	_timer0ReloadVal,c	;volatile
  5046  0023BE  501B               	movf	??_TMR0_Initialize+1,w,c
  5047  0023C0  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  5048                           
  5049                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  5050  0023C2  94F2               	bcf	intcon,2,c	;volatile
  5051                           
  5052                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  5053  0023C4  8AF2               	bsf	intcon,5,c	;volatile
  5054                           
  5055                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  5056  0023C6  0E00               	movlw	0
  5057  0023C8  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  5058  0023CA  0E00               	movlw	0
  5059  0023CC  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  5060  0023CE  EC65  F013         	call	_TMR0_SetInterruptHandler	;wreg free
  5061                           
  5062                           ;tmr0.c: 90: T0CON = 0x90;
  5063  0023D2  0E90               	movlw	144
  5064  0023D4  6ED5               	movwf	4053,c	;volatile
  5065  0023D6  0012               	return		;funcret
  5066  0023D8                     __end_of_TMR0_Initialize:
  5067                           	opt stack 0
  5068                           tosu	equ	0xFFF
  5069                           tosh	equ	0xFFE
  5070                           tosl	equ	0xFFD
  5071                           pclath	equ	0xFFA
  5072                           tblptru	equ	0xFF8
  5073                           tblptrh	equ	0xFF7
  5074                           tblptrl	equ	0xFF6
  5075                           tablat	equ	0xFF5
  5076                           prodh	equ	0xFF4
  5077                           prodl	equ	0xFF3
  5078                           intcon	equ	0xFF2
  5079                           postinc0	equ	0xFEE
  5080                           wreg	equ	0xFE8
  5081                           postdec1	equ	0xFE5
  5082                           fsr1l	equ	0xFE1
  5083                           indf2	equ	0xFDF
  5084                           postinc2	equ	0xFDE
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8
  5088                           
  5089 ;; *************** function _TMR0_SetInterruptHandler *****************
  5090 ;; Defined at:
  5091 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  5094 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;		None
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  1    wreg      void 
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5106 ;;      Params:         2       0       0       0       0       0       0
  5107 ;;      Locals:         0       0       0       0       0       0       0
  5108 ;;      Temps:          0       0       0       0       0       0       0
  5109 ;;      Totals:         2       0       0       0       0       0       0
  5110 ;;Total ram usage:        2 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:    3
  5113 ;; This function calls:
  5114 ;;		Nothing
  5115 ;; This function is called by:
  5116 ;;		_TMR0_Initialize
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text16
  5121  0026CA                     __ptext16:
  5122                           	opt stack 0
  5123  0026CA                     _TMR0_SetInterruptHandler:
  5124                           	opt stack 24
  5125                           
  5126                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  5127                           
  5128                           ;incstack = 0
  5129  0026CA  C018  F0FB         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  5130  0026CE  C019  F0FC         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  5131  0026D2  0012               	return		;funcret
  5132  0026D4                     __end_of_TMR0_SetInterruptHandler:
  5133                           	opt stack 0
  5134                           tosu	equ	0xFFF
  5135                           tosh	equ	0xFFE
  5136                           tosl	equ	0xFFD
  5137                           pclath	equ	0xFFA
  5138                           tblptru	equ	0xFF8
  5139                           tblptrh	equ	0xFF7
  5140                           tblptrl	equ	0xFF6
  5141                           tablat	equ	0xFF5
  5142                           prodh	equ	0xFF4
  5143                           prodl	equ	0xFF3
  5144                           intcon	equ	0xFF2
  5145                           postinc0	equ	0xFEE
  5146                           wreg	equ	0xFE8
  5147                           postdec1	equ	0xFE5
  5148                           fsr1l	equ	0xFE1
  5149                           indf2	equ	0xFDF
  5150                           postinc2	equ	0xFDE
  5151                           fsr2h	equ	0xFDA
  5152                           fsr2l	equ	0xFD9
  5153                           status	equ	0xFD8
  5154                           
  5155 ;; *************** function _PIN_MANAGER_Initialize *****************
  5156 ;; Defined at:
  5157 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;		None
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;		None
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  1    wreg      void 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5171 ;;      Params:         0       0       0       0       0       0       0
  5172 ;;      Locals:         0       0       0       0       0       0       0
  5173 ;;      Temps:          0       0       0       0       0       0       0
  5174 ;;      Totals:         0       0       0       0       0       0       0
  5175 ;;Total ram usage:        0 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    3
  5178 ;; This function calls:
  5179 ;;		Nothing
  5180 ;; This function is called by:
  5181 ;;		_SYSTEM_Initialize
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           	psect	text17
  5186  0020F6                     __ptext17:
  5187                           	opt stack 0
  5188  0020F6                     _PIN_MANAGER_Initialize:
  5189                           	opt stack 25
  5190                           
  5191                           ;pin_manager.c: 57: LATE = 0x00;
  5192                           
  5193                           ;incstack = 0
  5194  0020F6  0E00               	movlw	0
  5195  0020F8  6E8D               	movwf	3981,c	;volatile
  5196                           
  5197                           ;pin_manager.c: 58: LATD = 0x00;
  5198  0020FA  0E00               	movlw	0
  5199  0020FC  6E8C               	movwf	3980,c	;volatile
  5200                           
  5201                           ;pin_manager.c: 59: LATA = 0x06;
  5202  0020FE  0E06               	movlw	6
  5203  002100  6E89               	movwf	3977,c	;volatile
  5204                           
  5205                           ;pin_manager.c: 60: LATB = 0x00;
  5206  002102  0E00               	movlw	0
  5207  002104  6E8A               	movwf	3978,c	;volatile
  5208                           
  5209                           ;pin_manager.c: 61: LATC = 0x00;
  5210  002106  0E00               	movlw	0
  5211  002108  6E8B               	movwf	3979,c	;volatile
  5212                           
  5213                           ;pin_manager.c: 66: TRISE = 0x07;
  5214  00210A  0E07               	movlw	7
  5215  00210C  6E96               	movwf	3990,c	;volatile
  5216                           
  5217                           ;pin_manager.c: 67: TRISA = 0xE1;
  5218  00210E  0EE1               	movlw	225
  5219  002110  6E92               	movwf	3986,c	;volatile
  5220                           
  5221                           ;pin_manager.c: 68: TRISB = 0xEF;
  5222  002112  0EEF               	movlw	239
  5223  002114  6E93               	movwf	3987,c	;volatile
  5224                           
  5225                           ;pin_manager.c: 69: TRISC = 0x80;
  5226  002116  0E80               	movlw	128
  5227  002118  6E94               	movwf	3988,c	;volatile
  5228                           
  5229                           ;pin_manager.c: 70: TRISD = 0xF2;
  5230  00211A  0EF2               	movlw	242
  5231  00211C  6E95               	movwf	3989,c	;volatile
  5232                           
  5233                           ;pin_manager.c: 75: ANSELC = 0x30;
  5234  00211E  0E30               	movlw	48
  5235  002120  010F               	movlb	15	; () banked
  5236  002122  6F3A               	movwf	58,b	;volatile
  5237                           
  5238                           ;pin_manager.c: 76: ANSELB = 0x33;
  5239  002124  0E33               	movlw	51
  5240  002126  6F39               	movwf	57,b	;volatile
  5241                           
  5242                           ;pin_manager.c: 77: ANSELD = 0xE4;
  5243  002128  0EE4               	movlw	228
  5244  00212A  6F3B               	movwf	59,b	;volatile
  5245                           
  5246                           ;pin_manager.c: 78: ANSELE = 0x07;
  5247  00212C  0E07               	movlw	7
  5248  00212E  6F3C               	movwf	60,b	;volatile
  5249                           
  5250                           ;pin_manager.c: 79: ANSELA = 0x2F;
  5251  002130  0E2F               	movlw	47
  5252  002132  6F38               	movwf	56,b	;volatile
  5253                           
  5254                           ;pin_manager.c: 84: WPUB = 0xC2;
  5255  002134  0EC2               	movlw	194
  5256  002136  6E61               	movwf	3937,c	;volatile
  5257                           
  5258                           ; BSR set to: 15
  5259                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  5260  002138  9EF1               	bcf	intcon2,7,c	;volatile
  5261                           
  5262                           ; BSR set to: 15
  5263                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  5264  00213A  86F2               	bsf	intcon,3,c	;volatile
  5265                           
  5266                           ; BSR set to: 15
  5267  00213C  0012               	return		;funcret
  5268  00213E                     __end_of_PIN_MANAGER_Initialize:
  5269                           	opt stack 0
  5270                           tosu	equ	0xFFF
  5271                           tosh	equ	0xFFE
  5272                           tosl	equ	0xFFD
  5273                           pclath	equ	0xFFA
  5274                           tblptru	equ	0xFF8
  5275                           tblptrh	equ	0xFF7
  5276                           tblptrl	equ	0xFF6
  5277                           tablat	equ	0xFF5
  5278                           prodh	equ	0xFF4
  5279                           prodl	equ	0xFF3
  5280                           intcon	equ	0xFF2
  5281                           intcon2	equ	0xFF1
  5282                           postinc0	equ	0xFEE
  5283                           wreg	equ	0xFE8
  5284                           postdec1	equ	0xFE5
  5285                           fsr1l	equ	0xFE1
  5286                           indf2	equ	0xFDF
  5287                           postinc2	equ	0xFDE
  5288                           fsr2h	equ	0xFDA
  5289                           fsr2l	equ	0xFD9
  5290                           status	equ	0xFD8
  5291                           
  5292 ;; *************** function _OSCILLATOR_Initialize *****************
  5293 ;; Defined at:
  5294 ;;		line 122 in file "mcc_generated_files/mcc.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;		None
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;		None
  5299 ;; Return value:  Size  Location     Type
  5300 ;;                  1    wreg      void 
  5301 ;; Registers used:
  5302 ;;		wreg, status,2
  5303 ;; Tracked objects:
  5304 ;;		On entry : 0/0
  5305 ;;		On exit  : 0/0
  5306 ;;		Unchanged: 0/0
  5307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5308 ;;      Params:         0       0       0       0       0       0       0
  5309 ;;      Locals:         0       0       0       0       0       0       0
  5310 ;;      Temps:          0       0       0       0       0       0       0
  5311 ;;      Totals:         0       0       0       0       0       0       0
  5312 ;;Total ram usage:        0 bytes
  5313 ;; Hardware stack levels used:    1
  5314 ;; Hardware stack levels required when called:    3
  5315 ;; This function calls:
  5316 ;;		Nothing
  5317 ;; This function is called by:
  5318 ;;		_SYSTEM_Initialize
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text18
  5323  002698                     __ptext18:
  5324                           	opt stack 0
  5325  002698                     _OSCILLATOR_Initialize:
  5326                           	opt stack 25
  5327                           
  5328                           ;mcc.c: 125: OSCCON = 0x60;
  5329                           
  5330                           ; BSR set to: 15
  5331                           ;incstack = 0
  5332  002698  0E60               	movlw	96
  5333  00269A  6ED3               	movwf	4051,c	;volatile
  5334                           
  5335                           ;mcc.c: 127: OSCCON2 = 0x04;
  5336  00269C  0E04               	movlw	4
  5337  00269E  6ED2               	movwf	4050,c	;volatile
  5338                           
  5339                           ;mcc.c: 129: OSCTUNE = 0x00;
  5340  0026A0  0E00               	movlw	0
  5341  0026A2  6E9B               	movwf	3995,c	;volatile
  5342  0026A4  0012               	return		;funcret
  5343  0026A6                     __end_of_OSCILLATOR_Initialize:
  5344                           	opt stack 0
  5345                           tosu	equ	0xFFF
  5346                           tosh	equ	0xFFE
  5347                           tosl	equ	0xFFD
  5348                           pclath	equ	0xFFA
  5349                           tblptru	equ	0xFF8
  5350                           tblptrh	equ	0xFF7
  5351                           tblptrl	equ	0xFF6
  5352                           tablat	equ	0xFF5
  5353                           prodh	equ	0xFF4
  5354                           prodl	equ	0xFF3
  5355                           intcon	equ	0xFF2
  5356                           intcon2	equ	0xFF1
  5357                           postinc0	equ	0xFEE
  5358                           wreg	equ	0xFE8
  5359                           postdec1	equ	0xFE5
  5360                           fsr1l	equ	0xFE1
  5361                           indf2	equ	0xFDF
  5362                           postinc2	equ	0xFDE
  5363                           fsr2h	equ	0xFDA
  5364                           fsr2l	equ	0xFD9
  5365                           status	equ	0xFD8
  5366                           
  5367 ;; *************** function _INTERRUPT_Initialize *****************
  5368 ;; Defined at:
  5369 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  5370 ;; Parameters:    Size  Location     Type
  5371 ;;		None
  5372 ;; Auto vars:     Size  Location     Type
  5373 ;;		None
  5374 ;; Return value:  Size  Location     Type
  5375 ;;                  1    wreg      void 
  5376 ;; Registers used:
  5377 ;;		None
  5378 ;; Tracked objects:
  5379 ;;		On entry : 0/0
  5380 ;;		On exit  : 0/0
  5381 ;;		Unchanged: 0/0
  5382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5383 ;;      Params:         0       0       0       0       0       0       0
  5384 ;;      Locals:         0       0       0       0       0       0       0
  5385 ;;      Temps:          0       0       0       0       0       0       0
  5386 ;;      Totals:         0       0       0       0       0       0       0
  5387 ;;Total ram usage:        0 bytes
  5388 ;; Hardware stack levels used:    1
  5389 ;; Hardware stack levels required when called:    3
  5390 ;; This function calls:
  5391 ;;		Nothing
  5392 ;; This function is called by:
  5393 ;;		_SYSTEM_Initialize
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           	psect	text19
  5398  0026DC                     __ptext19:
  5399                           	opt stack 0
  5400  0026DC                     _INTERRUPT_Initialize:
  5401                           	opt stack 25
  5402                           
  5403                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  5404                           
  5405                           ;incstack = 0
  5406  0026DC  9ED0               	bcf	4048,7,c	;volatile
  5407  0026DE  0012               	return		;funcret
  5408  0026E0                     __end_of_INTERRUPT_Initialize:
  5409                           	opt stack 0
  5410                           tosu	equ	0xFFF
  5411                           tosh	equ	0xFFE
  5412                           tosl	equ	0xFFD
  5413                           pclath	equ	0xFFA
  5414                           tblptru	equ	0xFF8
  5415                           tblptrh	equ	0xFF7
  5416                           tblptrl	equ	0xFF6
  5417                           tablat	equ	0xFF5
  5418                           prodh	equ	0xFF4
  5419                           prodl	equ	0xFF3
  5420                           intcon	equ	0xFF2
  5421                           intcon2	equ	0xFF1
  5422                           postinc0	equ	0xFEE
  5423                           wreg	equ	0xFE8
  5424                           postdec1	equ	0xFE5
  5425                           fsr1l	equ	0xFE1
  5426                           indf2	equ	0xFDF
  5427                           postinc2	equ	0xFDE
  5428                           fsr2h	equ	0xFDA
  5429                           fsr2l	equ	0xFD9
  5430                           status	equ	0xFD8
  5431                           
  5432 ;; *************** function _EUSART1_Initialize *****************
  5433 ;; Defined at:
  5434 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;		None
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;		None
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      void 
  5441 ;; Registers used:
  5442 ;;		wreg, status,2
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5448 ;;      Params:         0       0       0       0       0       0       0
  5449 ;;      Locals:         0       0       0       0       0       0       0
  5450 ;;      Temps:          0       0       0       0       0       0       0
  5451 ;;      Totals:         0       0       0       0       0       0       0
  5452 ;;Total ram usage:        0 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    3
  5455 ;; This function calls:
  5456 ;;		Nothing
  5457 ;; This function is called by:
  5458 ;;		_SYSTEM_Initialize
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           	psect	text20
  5463  00236E                     __ptext20:
  5464                           	opt stack 0
  5465  00236E                     _EUSART1_Initialize:
  5466                           	opt stack 25
  5467                           
  5468                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  5469                           
  5470                           ;incstack = 0
  5471  00236E  9A9D               	bcf	3997,5,c	;volatile
  5472                           
  5473                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  5474  002370  989D               	bcf	3997,4,c	;volatile
  5475                           
  5476                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  5477  002372  0E08               	movlw	8
  5478  002374  6EB8               	movwf	4024,c	;volatile
  5479                           
  5480                           ;eusart1.c: 85: RCSTA1 = 0x90;
  5481  002376  0E90               	movlw	144
  5482  002378  6EAB               	movwf	4011,c	;volatile
  5483                           
  5484                           ;eusart1.c: 88: TXSTA1 = 0x24;
  5485  00237A  0E24               	movlw	36
  5486  00237C  6EAC               	movwf	4012,c	;volatile
  5487                           
  5488                           ;eusart1.c: 91: SPBRG1 = 0x10;
  5489  00237E  0E10               	movlw	16
  5490  002380  6EAF               	movwf	4015,c	;volatile
  5491                           
  5492                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  5493  002382  0E00               	movlw	0
  5494  002384  6EB0               	movwf	4016,c	;volatile
  5495                           
  5496                           ;eusart1.c: 98: eusart1TxHead = 0;
  5497  002386  0E00               	movlw	0
  5498  002388  6E39               	movwf	_eusart1TxHead,c	;volatile
  5499                           
  5500                           ;eusart1.c: 99: eusart1TxTail = 0;
  5501  00238A  0E00               	movlw	0
  5502  00238C  6E38               	movwf	_eusart1TxTail,c	;volatile
  5503                           
  5504                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  5505  00238E  0E46               	movlw	70
  5506  002390  0100               	movlb	0	; () banked
  5507  002392  6FFD               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  5508                           
  5509                           ;eusart1.c: 102: eusart1RxHead = 0;
  5510  002394  0E00               	movlw	0
  5511  002396  6E37               	movwf	_eusart1RxHead,c	;volatile
  5512                           
  5513                           ;eusart1.c: 103: eusart1RxTail = 0;
  5514  002398  0E00               	movlw	0
  5515  00239A  6E36               	movwf	_eusart1RxTail,c	;volatile
  5516                           
  5517                           ;eusart1.c: 104: eusart1RxCount = 0;
  5518  00239C  0E00               	movlw	0
  5519  00239E  6FD4               	movwf	_eusart1RxCount& (0+255),b	;volatile
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  5523  0023A0  8A9D               	bsf	3997,5,c	;volatile
  5524                           
  5525                           ; BSR set to: 0
  5526  0023A2  0012               	return		;funcret
  5527  0023A4                     __end_of_EUSART1_Initialize:
  5528                           	opt stack 0
  5529                           tosu	equ	0xFFF
  5530                           tosh	equ	0xFFE
  5531                           tosl	equ	0xFFD
  5532                           pclath	equ	0xFFA
  5533                           tblptru	equ	0xFF8
  5534                           tblptrh	equ	0xFF7
  5535                           tblptrl	equ	0xFF6
  5536                           tablat	equ	0xFF5
  5537                           prodh	equ	0xFF4
  5538                           prodl	equ	0xFF3
  5539                           intcon	equ	0xFF2
  5540                           intcon2	equ	0xFF1
  5541                           postinc0	equ	0xFEE
  5542                           wreg	equ	0xFE8
  5543                           postdec1	equ	0xFE5
  5544                           fsr1l	equ	0xFE1
  5545                           indf2	equ	0xFDF
  5546                           postinc2	equ	0xFDE
  5547                           fsr2h	equ	0xFDA
  5548                           fsr2l	equ	0xFD9
  5549                           status	equ	0xFD8
  5550                           
  5551 ;; *************** function _ADC_Initialize *****************
  5552 ;; Defined at:
  5553 ;;		line 58 in file "mcc_generated_files/adc.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;		None
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;		None
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  1    wreg      void 
  5560 ;; Registers used:
  5561 ;;		wreg, status,2
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5567 ;;      Params:         0       0       0       0       0       0       0
  5568 ;;      Locals:         0       0       0       0       0       0       0
  5569 ;;      Temps:          0       0       0       0       0       0       0
  5570 ;;      Totals:         0       0       0       0       0       0       0
  5571 ;;Total ram usage:        0 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    3
  5574 ;; This function calls:
  5575 ;;		Nothing
  5576 ;; This function is called by:
  5577 ;;		_SYSTEM_Initialize
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           	psect	text21
  5582  002634                     __ptext21:
  5583                           	opt stack 0
  5584  002634                     _ADC_Initialize:
  5585                           	opt stack 25
  5586                           
  5587                           ;adc.c: 63: ADCON0 = 0x05;
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;incstack = 0
  5591  002634  0E05               	movlw	5
  5592  002636  6EC2               	movwf	4034,c	;volatile
  5593                           
  5594                           ;adc.c: 66: ADCON1 = 0x00;
  5595  002638  0E00               	movlw	0
  5596  00263A  6EC1               	movwf	4033,c	;volatile
  5597                           
  5598                           ;adc.c: 69: ADCON2 = 0x87;
  5599  00263C  0E87               	movlw	135
  5600  00263E  6EC0               	movwf	4032,c	;volatile
  5601                           
  5602                           ;adc.c: 72: ADRESL = 0x00;
  5603  002640  0E00               	movlw	0
  5604  002642  6EC3               	movwf	4035,c	;volatile
  5605                           
  5606                           ;adc.c: 75: ADRESH = 0x00;
  5607  002644  0E00               	movlw	0
  5608  002646  6EC4               	movwf	4036,c	;volatile
  5609  002648  0012               	return		;funcret
  5610  00264A                     __end_of_ADC_Initialize:
  5611                           	opt stack 0
  5612                           tosu	equ	0xFFF
  5613                           tosh	equ	0xFFE
  5614                           tosl	equ	0xFFD
  5615                           pclath	equ	0xFFA
  5616                           tblptru	equ	0xFF8
  5617                           tblptrh	equ	0xFF7
  5618                           tblptrl	equ	0xFF6
  5619                           tablat	equ	0xFF5
  5620                           prodh	equ	0xFF4
  5621                           prodl	equ	0xFF3
  5622                           intcon	equ	0xFF2
  5623                           intcon2	equ	0xFF1
  5624                           postinc0	equ	0xFEE
  5625                           wreg	equ	0xFE8
  5626                           postdec1	equ	0xFE5
  5627                           fsr1l	equ	0xFE1
  5628                           indf2	equ	0xFDF
  5629                           postinc2	equ	0xFDE
  5630                           fsr2h	equ	0xFDA
  5631                           fsr2l	equ	0xFD9
  5632                           status	equ	0xFD8
  5633                           
  5634 ;; *************** function _SetMcuRunTime *****************
  5635 ;; Defined at:
  5636 ;;		line 44 in file "SystemStatus.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;		None
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;		None
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  1    wreg      void 
  5643 ;; Registers used:
  5644 ;;		wreg, status,2, status,0, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5650 ;;      Params:         0       0       0       0       0       0       0
  5651 ;;      Locals:         0       0       0       0       0       0       0
  5652 ;;      Temps:          0       0       0       0       0       0       0
  5653 ;;      Totals:         0       0       0       0       0       0       0
  5654 ;;Total ram usage:        0 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    4
  5657 ;; This function calls:
  5658 ;;		___llmod
  5659 ;; This function is called by:
  5660 ;;		_main
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text22
  5665  002182                     __ptext22:
  5666                           	opt stack 0
  5667  002182                     _SetMcuRunTime:
  5668                           	opt stack 26
  5669                           
  5670                           ;SystemStatus.c: 46: mcuRunTimeIn5SecTicks++;
  5671                           
  5672                           ;incstack = 0
  5673  002182  0E01               	movlw	1
  5674  002184  0100               	movlb	0	; () banked
  5675  002186  27C5               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  5676  002188  0E00               	movlw	0
  5677  00218A  23C6               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  5678  00218C  23C7               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  5679  00218E  23C8               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;SystemStatus.c: 47: mcuRunTimeIn5SecTicks %= (17280);
  5683  002190  C0C5  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  5684  002194  C0C6  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  5685  002198  C0C7  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  5686  00219C  C0C8  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  5687  0021A0  0E80               	movlw	128
  5688  0021A2  6E1C               	movwf	___llmod@divisor,c
  5689  0021A4  0E43               	movlw	67
  5690  0021A6  6E1D               	movwf	___llmod@divisor+1,c
  5691  0021A8  0E00               	movlw	0
  5692  0021AA  6E1E               	movwf	___llmod@divisor+2,c
  5693  0021AC  0E00               	movlw	0
  5694  0021AE  6E1F               	movwf	___llmod@divisor+3,c
  5695  0021B0  EC82  F00E         	call	___llmod	;wreg free
  5696  0021B4  C018  F0C5         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  5697  0021B8  C019  F0C6         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  5698  0021BC  C01A  F0C7         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  5699  0021C0  C01B  F0C8         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  5700  0021C4  0012               	return		;funcret
  5701  0021C6                     __end_of_SetMcuRunTime:
  5702                           	opt stack 0
  5703                           tosu	equ	0xFFF
  5704                           tosh	equ	0xFFE
  5705                           tosl	equ	0xFFD
  5706                           pclath	equ	0xFFA
  5707                           tblptru	equ	0xFF8
  5708                           tblptrh	equ	0xFF7
  5709                           tblptrl	equ	0xFF6
  5710                           tablat	equ	0xFF5
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           intcon	equ	0xFF2
  5714                           intcon2	equ	0xFF1
  5715                           postinc0	equ	0xFEE
  5716                           wreg	equ	0xFE8
  5717                           postdec1	equ	0xFE5
  5718                           fsr1l	equ	0xFE1
  5719                           indf2	equ	0xFDF
  5720                           postinc2	equ	0xFDE
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function ___llmod *****************
  5726 ;; Defined at:
  5727 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  dividend        4   23[COMRAM] unsigned long 
  5730 ;;  divisor         4   27[COMRAM] unsigned long 
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;  counter         1   31[COMRAM] unsigned char 
  5733 ;; Return value:  Size  Location     Type
  5734 ;;                  4   23[COMRAM] unsigned long 
  5735 ;; Registers used:
  5736 ;;		wreg, status,2, status,0
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5742 ;;      Params:         8       0       0       0       0       0       0
  5743 ;;      Locals:         1       0       0       0       0       0       0
  5744 ;;      Temps:          0       0       0       0       0       0       0
  5745 ;;      Totals:         9       0       0       0       0       0       0
  5746 ;;Total ram usage:        9 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    3
  5749 ;; This function calls:
  5750 ;;		Nothing
  5751 ;; This function is called by:
  5752 ;;		_SetMcuRunTime
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text23
  5757  001D04                     __ptext23:
  5758                           	opt stack 0
  5759  001D04                     ___llmod:
  5760                           	opt stack 26
  5761                           
  5762                           ;incstack = 0
  5763  001D04  501C               	movf	___llmod@divisor,w,c
  5764  001D06  101D               	iorwf	___llmod@divisor+1,w,c
  5765  001D08  101E               	iorwf	___llmod@divisor+2,w,c
  5766  001D0A  101F               	iorwf	___llmod@divisor+3,w,c
  5767  001D0C  B4D8               	btfsc	status,2,c
  5768  001D0E  D024               	goto	l1635
  5769  001D10  0E01               	movlw	1
  5770  001D12  6E20               	movwf	___llmod@counter,c
  5771  001D14  D006               	goto	l1630
  5772  001D16  90D8               	bcf	status,0,c
  5773  001D18  361C               	rlcf	___llmod@divisor,f,c
  5774  001D1A  361D               	rlcf	___llmod@divisor+1,f,c
  5775  001D1C  361E               	rlcf	___llmod@divisor+2,f,c
  5776  001D1E  361F               	rlcf	___llmod@divisor+3,f,c
  5777  001D20  2A20               	incf	___llmod@counter,f,c
  5778  001D22                     l1630:
  5779  001D22  AE1F               	btfss	___llmod@divisor+3,7,c
  5780  001D24  D7F8               	goto	l1631
  5781  001D26                     u4200:
  5782  001D26  501C               	movf	___llmod@divisor,w,c
  5783  001D28  5C18               	subwf	___llmod@dividend,w,c
  5784  001D2A  501D               	movf	___llmod@divisor+1,w,c
  5785  001D2C  5819               	subwfb	___llmod@dividend+1,w,c
  5786  001D2E  501E               	movf	___llmod@divisor+2,w,c
  5787  001D30  581A               	subwfb	___llmod@dividend+2,w,c
  5788  001D32  501F               	movf	___llmod@divisor+3,w,c
  5789  001D34  581B               	subwfb	___llmod@dividend+3,w,c
  5790  001D36  A0D8               	btfss	status,0,c
  5791  001D38  D008               	goto	l1634
  5792  001D3A  501C               	movf	___llmod@divisor,w,c
  5793  001D3C  5E18               	subwf	___llmod@dividend,f,c
  5794  001D3E  501D               	movf	___llmod@divisor+1,w,c
  5795  001D40  5A19               	subwfb	___llmod@dividend+1,f,c
  5796  001D42  501E               	movf	___llmod@divisor+2,w,c
  5797  001D44  5A1A               	subwfb	___llmod@dividend+2,f,c
  5798  001D46  501F               	movf	___llmod@divisor+3,w,c
  5799  001D48  5A1B               	subwfb	___llmod@dividend+3,f,c
  5800  001D4A                     l1634:
  5801  001D4A  90D8               	bcf	status,0,c
  5802  001D4C  321F               	rrcf	___llmod@divisor+3,f,c
  5803  001D4E  321E               	rrcf	___llmod@divisor+2,f,c
  5804  001D50  321D               	rrcf	___llmod@divisor+1,f,c
  5805  001D52  321C               	rrcf	___llmod@divisor,f,c
  5806  001D54  2E20               	decfsz	___llmod@counter,f,c
  5807  001D56  D7E7               	goto	u4200
  5808  001D58                     l1635:
  5809  001D58  C018  F018         	movff	___llmod@dividend,?___llmod
  5810  001D5C  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  5811  001D60  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  5812  001D64  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  5813  001D68  0012               	return		;funcret
  5814  001D6A                     __end_of___llmod:
  5815                           	opt stack 0
  5816                           tosu	equ	0xFFF
  5817                           tosh	equ	0xFFE
  5818                           tosl	equ	0xFFD
  5819                           pclath	equ	0xFFA
  5820                           tblptru	equ	0xFF8
  5821                           tblptrh	equ	0xFF7
  5822                           tblptrl	equ	0xFF6
  5823                           tablat	equ	0xFF5
  5824                           prodh	equ	0xFF4
  5825                           prodl	equ	0xFF3
  5826                           intcon	equ	0xFF2
  5827                           intcon2	equ	0xFF1
  5828                           postinc0	equ	0xFEE
  5829                           wreg	equ	0xFE8
  5830                           postdec1	equ	0xFE5
  5831                           fsr1l	equ	0xFE1
  5832                           indf2	equ	0xFDF
  5833                           postinc2	equ	0xFDE
  5834                           fsr2h	equ	0xFDA
  5835                           fsr2l	equ	0xFD9
  5836                           status	equ	0xFD8
  5837                           
  5838 ;; *************** function _SendUartSystemInitMessage *****************
  5839 ;; Defined at:
  5840 ;;		line 65 in file "SystemStatus.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;		None
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  dest           50    0[BANK0 ] unsigned char [50]
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  1    wreg      void 
  5847 ;; Registers used:
  5848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5849 ;; Tracked objects:
  5850 ;;		On entry : 0/0
  5851 ;;		On exit  : 0/0
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5854 ;;      Params:         0       0       0       0       0       0       0
  5855 ;;      Locals:         0      50       0       0       0       0       0
  5856 ;;      Temps:          0       0       0       0       0       0       0
  5857 ;;      Totals:         0      50       0       0       0       0       0
  5858 ;;Total ram usage:       50 bytes
  5859 ;; Hardware stack levels used:    1
  5860 ;; Hardware stack levels required when called:    5
  5861 ;; This function calls:
  5862 ;;		_UART_Write_Text
  5863 ;;		_sprintf
  5864 ;; This function is called by:
  5865 ;;		_main
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text24
  5870  0013E6                     __ptext24:
  5871                           	opt stack 0
  5872  0013E6                     _SendUartSystemInitMessage:
  5873                           	opt stack 25
  5874                           
  5875                           ;SystemStatus.c: 67: char dest[50];
  5876                           ;SystemStatus.c: 69: sprintf(dest, "*************************** \n\r");
  5877                           
  5878                           ;incstack = 0
  5879  0013E6  0E60               	movlw	low SendUartSystemInitMessage@dest
  5880  0013E8  6E18               	movwf	sprintf@sp,c
  5881  0013EA  0E00               	movlw	high SendUartSystemInitMessage@dest
  5882  0013EC  6E19               	movwf	sprintf@sp+1,c
  5883  0013EE  0E17               	movlw	low STR_5
  5884  0013F0  6E1A               	movwf	sprintf@f,c
  5885  0013F2  0E7F               	movlw	high STR_5
  5886  0013F4  6E1B               	movwf	sprintf@f+1,c
  5887  0013F6  ECCD  F00A         	call	_sprintf	;wreg free
  5888                           
  5889                           ;SystemStatus.c: 70: UART_Write_Text(dest);
  5890  0013FA  0E60               	movlw	low SendUartSystemInitMessage@dest
  5891  0013FC  6E19               	movwf	UART_Write_Text@text,c
  5892  0013FE  0E00               	movlw	high SendUartSystemInitMessage@dest
  5893  001400  6E1A               	movwf	UART_Write_Text@text+1,c
  5894  001402  ECEC  F011         	call	_UART_Write_Text	;wreg free
  5895                           
  5896                           ;SystemStatus.c: 72: sprintf(dest, "FAST LINK SYSTEM \n\r");
  5897  001406  0E60               	movlw	low SendUartSystemInitMessage@dest
  5898  001408  6E18               	movwf	sprintf@sp,c
  5899  00140A  0E00               	movlw	high SendUartSystemInitMessage@dest
  5900  00140C  6E19               	movwf	sprintf@sp+1,c
  5901  00140E  0E83               	movlw	low STR_6
  5902  001410  6E1A               	movwf	sprintf@f,c
  5903  001412  0E7F               	movlw	high STR_6
  5904  001414  6E1B               	movwf	sprintf@f+1,c
  5905  001416  ECCD  F00A         	call	_sprintf	;wreg free
  5906                           
  5907                           ;SystemStatus.c: 73: UART_Write_Text(dest);
  5908  00141A  0E60               	movlw	low SendUartSystemInitMessage@dest
  5909  00141C  6E19               	movwf	UART_Write_Text@text,c
  5910  00141E  0E00               	movlw	high SendUartSystemInitMessage@dest
  5911  001420  6E1A               	movwf	UART_Write_Text@text+1,c
  5912  001422  ECEC  F011         	call	_UART_Write_Text	;wreg free
  5913                           
  5914                           ;SystemStatus.c: 75: sprintf(dest, "SW VESRION: %s \n\r", "1_002");
  5915  001426  0E60               	movlw	low SendUartSystemInitMessage@dest
  5916  001428  6E18               	movwf	sprintf@sp,c
  5917  00142A  0E00               	movlw	high SendUartSystemInitMessage@dest
  5918  00142C  6E19               	movwf	sprintf@sp+1,c
  5919  00142E  0EBF               	movlw	low STR_7
  5920  001430  6E1A               	movwf	sprintf@f,c
  5921  001432  0E7F               	movlw	high STR_7
  5922  001434  6E1B               	movwf	sprintf@f+1,c
  5923  001436  0EF8               	movlw	low STR_8
  5924  001438  6E1C               	movwf	?_sprintf+4,c
  5925  00143A  0E7F               	movlw	high STR_8
  5926  00143C  6E1D               	movwf	?_sprintf+5,c
  5927  00143E  ECCD  F00A         	call	_sprintf	;wreg free
  5928                           
  5929                           ;SystemStatus.c: 76: UART_Write_Text(dest);
  5930  001442  0E60               	movlw	low SendUartSystemInitMessage@dest
  5931  001444  6E19               	movwf	UART_Write_Text@text,c
  5932  001446  0E00               	movlw	high SendUartSystemInitMessage@dest
  5933  001448  6E1A               	movwf	UART_Write_Text@text+1,c
  5934  00144A  ECEC  F011         	call	_UART_Write_Text	;wreg free
  5935                           
  5936                           ;SystemStatus.c: 78: sprintf(dest, "Compile date: %s \n\r", "Mar 06 2018");
  5937  00144E  0E60               	movlw	low SendUartSystemInitMessage@dest
  5938  001450  6E18               	movwf	sprintf@sp,c
  5939  001452  0E00               	movlw	high SendUartSystemInitMessage@dest
  5940  001454  6E19               	movwf	sprintf@sp+1,c
  5941  001456  0EAB               	movlw	low STR_9
  5942  001458  6E1A               	movwf	sprintf@f,c
  5943  00145A  0E7F               	movlw	high STR_9
  5944  00145C  6E1B               	movwf	sprintf@f+1,c
  5945  00145E  0ED1               	movlw	low STR_10
  5946  001460  6E1C               	movwf	?_sprintf+4,c
  5947  001462  0E7F               	movlw	high STR_10
  5948  001464  6E1D               	movwf	?_sprintf+5,c
  5949  001466  ECCD  F00A         	call	_sprintf	;wreg free
  5950                           
  5951                           ;SystemStatus.c: 79: UART_Write_Text(dest);
  5952  00146A  0E60               	movlw	low SendUartSystemInitMessage@dest
  5953  00146C  6E19               	movwf	UART_Write_Text@text,c
  5954  00146E  0E00               	movlw	high SendUartSystemInitMessage@dest
  5955  001470  6E1A               	movwf	UART_Write_Text@text+1,c
  5956  001472  ECEC  F011         	call	_UART_Write_Text	;wreg free
  5957                           
  5958                           ;SystemStatus.c: 81: sprintf(dest, "Compile time: %s \n\r", "18:11:49");
  5959  001476  0E60               	movlw	low SendUartSystemInitMessage@dest
  5960  001478  6E18               	movwf	sprintf@sp,c
  5961  00147A  0E00               	movlw	high SendUartSystemInitMessage@dest
  5962  00147C  6E19               	movwf	sprintf@sp+1,c
  5963  00147E  0E97               	movlw	low STR_11
  5964  001480  6E1A               	movwf	sprintf@f,c
  5965  001482  0E7F               	movlw	high STR_11
  5966  001484  6E1B               	movwf	sprintf@f+1,c
  5967  001486  0EE8               	movlw	low STR_12
  5968  001488  6E1C               	movwf	?_sprintf+4,c
  5969  00148A  0E7F               	movlw	high STR_12
  5970  00148C  6E1D               	movwf	?_sprintf+5,c
  5971  00148E  ECCD  F00A         	call	_sprintf	;wreg free
  5972                           
  5973                           ;SystemStatus.c: 82: UART_Write_Text(dest);
  5974  001492  0E60               	movlw	low SendUartSystemInitMessage@dest
  5975  001494  6E19               	movwf	UART_Write_Text@text,c
  5976  001496  0E00               	movlw	high SendUartSystemInitMessage@dest
  5977  001498  6E1A               	movwf	UART_Write_Text@text+1,c
  5978  00149A  ECEC  F011         	call	_UART_Write_Text	;wreg free
  5979                           
  5980                           ;SystemStatus.c: 84: sprintf(dest, "*************************** \n\r");
  5981  00149E  0E60               	movlw	low SendUartSystemInitMessage@dest
  5982  0014A0  6E18               	movwf	sprintf@sp,c
  5983  0014A2  0E00               	movlw	high SendUartSystemInitMessage@dest
  5984  0014A4  6E19               	movwf	sprintf@sp+1,c
  5985  0014A6  0E17               	movlw	low STR_5
  5986  0014A8  6E1A               	movwf	sprintf@f,c
  5987  0014AA  0E7F               	movlw	high STR_5
  5988  0014AC  6E1B               	movwf	sprintf@f+1,c
  5989  0014AE  ECCD  F00A         	call	_sprintf	;wreg free
  5990                           
  5991                           ;SystemStatus.c: 85: UART_Write_Text(dest);
  5992  0014B2  0E60               	movlw	low SendUartSystemInitMessage@dest
  5993  0014B4  6E19               	movwf	UART_Write_Text@text,c
  5994  0014B6  0E00               	movlw	high SendUartSystemInitMessage@dest
  5995  0014B8  6E1A               	movwf	UART_Write_Text@text+1,c
  5996  0014BA  ECEC  F011         	call	_UART_Write_Text	;wreg free
  5997  0014BE  0012               	return		;funcret
  5998  0014C0                     __end_of_SendUartSystemInitMessage:
  5999                           	opt stack 0
  6000                           tosu	equ	0xFFF
  6001                           tosh	equ	0xFFE
  6002                           tosl	equ	0xFFD
  6003                           pclath	equ	0xFFA
  6004                           tblptru	equ	0xFF8
  6005                           tblptrh	equ	0xFF7
  6006                           tblptrl	equ	0xFF6
  6007                           tablat	equ	0xFF5
  6008                           prodh	equ	0xFF4
  6009                           prodl	equ	0xFF3
  6010                           intcon	equ	0xFF2
  6011                           intcon2	equ	0xFF1
  6012                           postinc0	equ	0xFEE
  6013                           wreg	equ	0xFE8
  6014                           postdec1	equ	0xFE5
  6015                           fsr1l	equ	0xFE1
  6016                           indf2	equ	0xFDF
  6017                           postinc2	equ	0xFDE
  6018                           fsr2h	equ	0xFDA
  6019                           fsr2l	equ	0xFD9
  6020                           status	equ	0xFD8
  6021                           
  6022 ;; *************** function _sprintf *****************
  6023 ;; Defined at:
  6024 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;  sp              2   23[COMRAM] PTR unsigned char 
  6027 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), readUartByte@dest(50), 
  6028 ;;  f               2   25[COMRAM] PTR const unsigned char 
  6029 ;;		 -> STR_32(37), STR_31(38), STR_30(86), STR_29(53), 
  6030 ;;		 -> STR_28(46), STR_27(29), STR_26(101), STR_25(86), 
  6031 ;;		 -> STR_24(61), STR_23(62), STR_22(45), STR_21(74), 
  6032 ;;		 -> STR_20(25), STR_19(79), STR_18(75), STR_17(46), 
  6033 ;;		 -> STR_16(61), STR_15(66), STR_14(23), STR_13(31), 
  6034 ;;		 -> STR_11(20), STR_9(20), STR_7(18), STR_6(20), 
  6035 ;;		 -> STR_5(31), STR_4(11), STR_3(11), STR_2(11), 
  6036 ;;		 -> STR_1(11), 
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;  tmpval          4    0        struct .
  6039 ;;  cp              2   33[COMRAM] PTR const unsigned char 
  6040 ;;		 -> STR_33(7), STR_12(9), STR_10(12), STR_8(6), 
  6041 ;;  ap              2   30[COMRAM] PTR void [1]
  6042 ;;		 -> ?_sprintf(2), 
  6043 ;;  len             2    0        unsigned int 
  6044 ;;  val             2    0        unsigned int 
  6045 ;;  c               1   32[COMRAM] char 
  6046 ;;  flag            1   29[COMRAM] unsigned char 
  6047 ;;  prec            1    0        char 
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  2   23[COMRAM] int 
  6050 ;; Registers used:
  6051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6057 ;;      Params:         6       0       0       0       0       0       0
  6058 ;;      Locals:         6       0       0       0       0       0       0
  6059 ;;      Temps:          0       0       0       0       0       0       0
  6060 ;;      Totals:        12       0       0       0       0       0       0
  6061 ;;Total ram usage:       12 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    3
  6064 ;; This function calls:
  6065 ;;		Nothing
  6066 ;; This function is called by:
  6067 ;;		_readUartByte
  6068 ;;		_SendUartSystemInitMessage
  6069 ;;		_PrintHelpScreen
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text25
  6074  00159A                     __ptext25:
  6075                           	opt stack 0
  6076  00159A                     _sprintf:
  6077                           	opt stack 26
  6078                           
  6079                           ;doprnt.c: 494: va_list ap;
  6080                           ;doprnt.c: 499: signed char c;
  6081                           ;doprnt.c: 506: signed char prec;
  6082                           ;doprnt.c: 508: unsigned char flag;
  6083                           ;doprnt.c: 523: union {
  6084                           ;doprnt.c: 524: unsigned long vd;
  6085                           ;doprnt.c: 525: double integ;
  6086                           ;doprnt.c: 526: } tmpval;
  6087                           ;doprnt.c: 528: unsigned int val;
  6088                           ;doprnt.c: 529: unsigned len;
  6089                           ;doprnt.c: 530: const char * cp;
  6090                           ;doprnt.c: 533: *ap = __va_start();
  6091                           
  6092                           ;incstack = 0
  6093  00159A  0E1C               	movlw	low (?_sprintf+4)
  6094  00159C  6E1F               	movwf	sprintf@ap,c
  6095  00159E  0E00               	movlw	high (?_sprintf+4)
  6096  0015A0  6E20               	movwf	sprintf@ap+1,c
  6097                           
  6098                           ;doprnt.c: 536: while(c = *f++) {
  6099  0015A2  D04E               	goto	l1263
  6100  0015A4                     
  6101                           ;doprnt.c: 538: if(c != '%')
  6102  0015A4  0E25               	movlw	37
  6103  0015A6  1821               	xorwf	sprintf@c,w,c
  6104  0015A8  B4D8               	btfsc	status,2,c
  6105  0015AA  D009               	goto	l1253
  6106                           
  6107                           ;doprnt.c: 540: {
  6108                           ;doprnt.c: 541: ((*sp++ = (c)));
  6109  0015AC  C018  FFD9         	movff	sprintf@sp,fsr2l
  6110  0015B0  C019  FFDA         	movff	sprintf@sp+1,fsr2h
  6111  0015B4  C021  FFDF         	movff	sprintf@c,indf2
  6112  0015B8  4A18               	infsnz	sprintf@sp,f,c
  6113  0015BA  2A19               	incf	sprintf@sp+1,f,c
  6114                           
  6115                           ;doprnt.c: 542: continue;
  6116  0015BC  D041               	goto	l1263
  6117  0015BE                     l1253:
  6118                           
  6119                           ;doprnt.c: 543: }
  6120                           ;doprnt.c: 548: flag = 0;
  6121  0015BE  0E00               	movlw	0
  6122  0015C0  6E1E               	movwf	sprintf@flag,c
  6123                           
  6124                           ;doprnt.c: 635: switch(c = *f++) {
  6125  0015C2  D02E               	goto	l1254
  6126  0015C4                     
  6127                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6128  0015C4  C01F  FFD9         	movff	sprintf@ap,fsr2l
  6129  0015C8  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  6130  0015CC  CFDE F022          	movff	postinc2,sprintf@cp
  6131  0015D0  CFDD F023          	movff	postdec2,sprintf@cp+1
  6132  0015D4  0E02               	movlw	2
  6133  0015D6  261F               	addwf	sprintf@ap,f,c
  6134  0015D8  0E00               	movlw	0
  6135  0015DA  2220               	addwfc	sprintf@ap+1,f,c
  6136                           
  6137                           ;doprnt.c: 740: if(!cp)
  6138  0015DC  5022               	movf	sprintf@cp,w,c
  6139  0015DE  1023               	iorwf	sprintf@cp+1,w,c
  6140  0015E0  A4D8               	btfss	status,2,c
  6141  0015E2  D014               	goto	l1259
  6142                           
  6143                           ;doprnt.c: 741: cp = "(null)";
  6144  0015E4  0EF1               	movlw	low STR_33
  6145  0015E6  6E22               	movwf	sprintf@cp,c
  6146  0015E8  0E7F               	movlw	high STR_33
  6147  0015EA  6E23               	movwf	sprintf@cp+1,c
  6148                           
  6149                           ;doprnt.c: 777: while(*cp)
  6150  0015EC  D00F               	goto	l1259
  6151  0015EE                     
  6152                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  6153  0015EE  C022  FFF6         	movff	sprintf@cp,tblptrl
  6154  0015F2  C023  FFF7         	movff	sprintf@cp+1,tblptrh
  6155  0015F6                     	if	0	;tblptru may be non-zero
  6156  0015F6                     	endif
  6157  0015F6                     	if	0	;tblptru may be non-zero
  6158  0015F6                     	endif
  6159  0015F6  C018  FFD9         	movff	sprintf@sp,fsr2l
  6160  0015FA  C019  FFDA         	movff	sprintf@sp+1,fsr2h
  6161  0015FE  0008               	tblrd		*
  6162  001600  CFF5 FFDF          	movff	tablat,indf2
  6163  001604  4A22               	infsnz	sprintf@cp,f,c
  6164  001606  2A23               	incf	sprintf@cp+1,f,c
  6165  001608  4A18               	infsnz	sprintf@sp,f,c
  6166  00160A  2A19               	incf	sprintf@sp+1,f,c
  6167  00160C                     l1259:
  6168  00160C  C022  FFF6         	movff	sprintf@cp,tblptrl
  6169  001610  C023  FFF7         	movff	sprintf@cp+1,tblptrh
  6170  001614                     	if	0	;tblptru may be non-zero
  6171  001614                     	endif
  6172  001614                     	if	0	;tblptru may be non-zero
  6173  001614                     	endif
  6174  001614  0008               	tblrd		*
  6175  001616  50F5               	movf	tablat,w,c
  6176  001618  0900               	iorlw	0
  6177  00161A  B4D8               	btfsc	status,2,c
  6178  00161C  D011               	goto	l1263
  6179  00161E  D7E7               	goto	l1260
  6180  001620                     l1254:
  6181  001620  C01A  FFF6         	movff	sprintf@f,tblptrl
  6182  001624  C01B  FFF7         	movff	sprintf@f+1,tblptrh
  6183  001628  4A1A               	infsnz	sprintf@f,f,c
  6184  00162A  2A1B               	incf	sprintf@f+1,f,c
  6185  00162C                     	if	0	;tblptru may be non-zero
  6186  00162C                     	endif
  6187  00162C                     	if	0	;tblptru may be non-zero
  6188  00162C                     	endif
  6189  00162C  0008               	tblrd		*
  6190  00162E  CFF5 F021          	movff	tablat,sprintf@c
  6191  001632  5021               	movf	sprintf@c,w,c
  6192                           
  6193                           ; Switch size 1, requested type "space"
  6194                           ; Number of cases is 2, Range of values is 0 to 115
  6195                           ; switch strategies available:
  6196                           ; Name         Instructions Cycles
  6197                           ; simple_byte            7     4 (average)
  6198                           ;	Chosen strategy is simple_byte
  6199  001634  0A00               	xorlw	0	; case 0
  6200  001636  B4D8               	btfsc	status,2,c
  6201  001638  D00F               	goto	u3320
  6202  00163A  0A73               	xorlw	115	; case 115
  6203  00163C  B4D8               	btfsc	status,2,c
  6204  00163E  D7C2               	goto	l1257
  6205  001640                     l1263:
  6206                           
  6207                           ;doprnt.c: 1422: {
  6208  001640  C01A  FFF6         	movff	sprintf@f,tblptrl
  6209  001644  C01B  FFF7         	movff	sprintf@f+1,tblptrh
  6210  001648  4A1A               	infsnz	sprintf@f,f,c
  6211  00164A  2A1B               	incf	sprintf@f+1,f,c
  6212  00164C                     	if	0	;tblptru may be non-zero
  6213  00164C                     	endif
  6214  00164C                     	if	0	;tblptru may be non-zero
  6215  00164C                     	endif
  6216  00164C  0008               	tblrd		*
  6217  00164E  CFF5 F021          	movff	tablat,sprintf@c
  6218  001652  5021               	movf	sprintf@c,w,c
  6219  001654  A4D8               	btfss	status,2,c
  6220  001656  D7A6               	goto	l1252
  6221  001658                     u3320:
  6222                           
  6223                           ;doprnt.c: 1538: *sp = 0;
  6224                           
  6225                           ;doprnt.c: 1469: }
  6226                           ;doprnt.c: 1533: }
  6227                           ;doprnt.c: 1535: alldone:
  6228  001658  C018  FFD9         	movff	sprintf@sp,fsr2l
  6229  00165C  C019  FFDA         	movff	sprintf@sp+1,fsr2h
  6230  001660  0E00               	movlw	0
  6231  001662  6EDF               	movwf	indf2,c
  6232  001664  0012               	return	
  6233  001666                     __end_of_sprintf:
  6234                           	opt stack 0
  6235                           tosu	equ	0xFFF
  6236                           tosh	equ	0xFFE
  6237                           tosl	equ	0xFFD
  6238                           pclath	equ	0xFFA
  6239                           tblptru	equ	0xFF8
  6240                           tblptrh	equ	0xFF7
  6241                           tblptrl	equ	0xFF6
  6242                           tablat	equ	0xFF5
  6243                           prodh	equ	0xFF4
  6244                           prodl	equ	0xFF3
  6245                           intcon	equ	0xFF2
  6246                           intcon2	equ	0xFF1
  6247                           postinc0	equ	0xFEE
  6248                           wreg	equ	0xFE8
  6249                           postdec1	equ	0xFE5
  6250                           fsr1l	equ	0xFE1
  6251                           indf2	equ	0xFDF
  6252                           postinc2	equ	0xFDE
  6253                           postdec2	equ	0xFDD
  6254                           fsr2h	equ	0xFDA
  6255                           fsr2l	equ	0xFD9
  6256                           status	equ	0xFD8
  6257                           
  6258 ;; *************** function _UART_Write_Text *****************
  6259 ;; Defined at:
  6260 ;;		line 217 in file "EusartApp.c"
  6261 ;; Parameters:    Size  Location     Type
  6262 ;;  text            2   24[COMRAM] PTR unsigned char 
  6263 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), readUartByte@dest(50), 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  i               2   26[COMRAM] int 
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      void 
  6268 ;; Registers used:
  6269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6275 ;;      Params:         2       0       0       0       0       0       0
  6276 ;;      Locals:         2       0       0       0       0       0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0
  6278 ;;      Totals:         4       0       0       0       0       0       0
  6279 ;;Total ram usage:        4 bytes
  6280 ;; Hardware stack levels used:    1
  6281 ;; Hardware stack levels required when called:    4
  6282 ;; This function calls:
  6283 ;;		_EUSART1_Write
  6284 ;; This function is called by:
  6285 ;;		_readUartByte
  6286 ;;		_SendUartSystemInitMessage
  6287 ;;		_PrintHelpScreen
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           	psect	text26
  6292  0023D8                     __ptext26:
  6293                           	opt stack 0
  6294  0023D8                     _UART_Write_Text:
  6295                           	opt stack 25
  6296                           
  6297                           ;EusartApp.c: 219: for(int i =0;text[i]!='\0';i++)
  6298                           
  6299                           ;incstack = 0
  6300  0023D8  0E00               	movlw	0
  6301  0023DA  6E1C               	movwf	UART_Write_Text@i+1,c
  6302  0023DC  0E00               	movlw	0
  6303  0023DE  6E1B               	movwf	UART_Write_Text@i,c
  6304  0023E0  D00B               	goto	l210
  6305  0023E2                     
  6306                           ;EusartApp.c: 220: {
  6307                           ;EusartApp.c: 221: EUSART1_Write(text[i]);
  6308  0023E2  501B               	movf	UART_Write_Text@i,w,c
  6309  0023E4  2419               	addwf	UART_Write_Text@text,w,c
  6310  0023E6  6ED9               	movwf	fsr2l,c
  6311  0023E8  501C               	movf	UART_Write_Text@i+1,w,c
  6312  0023EA  201A               	addwfc	UART_Write_Text@text+1,w,c
  6313  0023EC  6EDA               	movwf	fsr2h,c
  6314  0023EE  50DF               	movf	indf2,w,c
  6315  0023F0  EC25  F011         	call	_EUSART1_Write
  6316  0023F4  4A1B               	infsnz	UART_Write_Text@i,f,c
  6317  0023F6  2A1C               	incf	UART_Write_Text@i+1,f,c
  6318  0023F8                     l210:
  6319  0023F8  501B               	movf	UART_Write_Text@i,w,c
  6320  0023FA  2419               	addwf	UART_Write_Text@text,w,c
  6321  0023FC  6ED9               	movwf	fsr2l,c
  6322  0023FE  501C               	movf	UART_Write_Text@i+1,w,c
  6323  002400  201A               	addwfc	UART_Write_Text@text+1,w,c
  6324  002402  6EDA               	movwf	fsr2h,c
  6325  002404  50DF               	movf	indf2,w,c
  6326  002406  B4D8               	btfsc	status,2,c
  6327  002408  0012               	return	
  6328  00240A  D7EB               	goto	l211
  6329  00240C                     __end_of_UART_Write_Text:
  6330                           	opt stack 0
  6331                           tosu	equ	0xFFF
  6332                           tosh	equ	0xFFE
  6333                           tosl	equ	0xFFD
  6334                           pclath	equ	0xFFA
  6335                           tblptru	equ	0xFF8
  6336                           tblptrh	equ	0xFF7
  6337                           tblptrl	equ	0xFF6
  6338                           tablat	equ	0xFF5
  6339                           prodh	equ	0xFF4
  6340                           prodl	equ	0xFF3
  6341                           intcon	equ	0xFF2
  6342                           intcon2	equ	0xFF1
  6343                           postinc0	equ	0xFEE
  6344                           wreg	equ	0xFE8
  6345                           postdec1	equ	0xFE5
  6346                           fsr1l	equ	0xFE1
  6347                           indf2	equ	0xFDF
  6348                           postinc2	equ	0xFDE
  6349                           postdec2	equ	0xFDD
  6350                           fsr2h	equ	0xFDA
  6351                           fsr2l	equ	0xFD9
  6352                           status	equ	0xFD8
  6353                           
  6354 ;; *************** function _EUSART1_Write *****************
  6355 ;; Defined at:
  6356 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  6357 ;; Parameters:    Size  Location     Type
  6358 ;;  txData          1    wreg     unsigned char 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  txData          1   23[COMRAM] unsigned char 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  1    wreg      void 
  6363 ;; Registers used:
  6364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6370 ;;      Params:         0       0       0       0       0       0       0
  6371 ;;      Locals:         1       0       0       0       0       0       0
  6372 ;;      Temps:          0       0       0       0       0       0       0
  6373 ;;      Totals:         1       0       0       0       0       0       0
  6374 ;;Total ram usage:        1 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    3
  6377 ;; This function calls:
  6378 ;;		Nothing
  6379 ;; This function is called by:
  6380 ;;		_UART_Write_Text
  6381 ;;		_WriteUartMessage
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text27
  6386  00224A                     __ptext27:
  6387                           	opt stack 0
  6388  00224A                     _EUSART1_Write:
  6389                           	opt stack 25
  6390                           
  6391                           ;incstack = 0
  6392                           ;EUSART1_Write@txData stored from wreg
  6393  00224A  6E18               	movwf	EUSART1_Write@txData,c
  6394  00224C                     
  6395                           ;eusart1.c: 160: {
  6396                           
  6397                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  6398  00224C  0100               	movlb	0	; () banked
  6399  00224E  51FD               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  6400  002250  B4D8               	btfsc	status,2,c
  6401  002252  D7FC               	goto	l4002
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;eusart1.c: 161: }
  6405                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  6406  002254  B89D               	btfsc	3997,4,c	;volatile
  6407  002256  D003               	goto	l758
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;eusart1.c: 164: {
  6411                           ;eusart1.c: 165: TXREG1 = txData;
  6412  002258  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  6413                           
  6414                           ;eusart1.c: 166: }
  6415  00225C  D012               	goto	l759
  6416  00225E                     l758:
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;eusart1.c: 167: else
  6420                           ;eusart1.c: 168: {
  6421                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  6422  00225E  989D               	bcf	3997,4,c	;volatile
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  6426  002260  5039               	movf	_eusart1TxHead,w,c	;volatile
  6427  002262  0D01               	mullw	1
  6428  002264  0E00               	movlw	low _eusart1TxBuffer
  6429  002266  24F3               	addwf	prodl,w,c
  6430  002268  6ED9               	movwf	fsr2l,c
  6431  00226A  0E01               	movlw	high _eusart1TxBuffer
  6432  00226C  20F4               	addwfc	prodh,w,c
  6433  00226E  6EDA               	movwf	fsr2h,c
  6434  002270  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  6435                           
  6436                           ; BSR set to: 0
  6437  002274  2A39               	incf	_eusart1TxHead,f,c	;volatile
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  6441  002276  0E45               	movlw	69
  6442  002278  6439               	cpfsgt	_eusart1TxHead,c	;volatile
  6443  00227A  D002               	goto	l760
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;eusart1.c: 172: {
  6447                           ;eusart1.c: 173: eusart1TxHead = 0;
  6448  00227C  0E00               	movlw	0
  6449  00227E  6E39               	movwf	_eusart1TxHead,c	;volatile
  6450  002280                     l760:
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;eusart1.c: 174: }
  6454                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  6455                           
  6456                           ; BSR set to: 0
  6457  002280  07FD               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  6458  002282                     l759:
  6459                           
  6460                           ; BSR set to: 0
  6461                           ;eusart1.c: 176: }
  6462                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  6463                           
  6464                           ; BSR set to: 0
  6465  002282  889D               	bsf	3997,4,c	;volatile
  6466                           
  6467                           ; BSR set to: 0
  6468  002284  0012               	return		;funcret
  6469  002286                     __end_of_EUSART1_Write:
  6470                           	opt stack 0
  6471                           tosu	equ	0xFFF
  6472                           tosh	equ	0xFFE
  6473                           tosl	equ	0xFFD
  6474                           pclath	equ	0xFFA
  6475                           tblptru	equ	0xFF8
  6476                           tblptrh	equ	0xFF7
  6477                           tblptrl	equ	0xFF6
  6478                           tablat	equ	0xFF5
  6479                           prodh	equ	0xFF4
  6480                           prodl	equ	0xFF3
  6481                           intcon	equ	0xFF2
  6482                           intcon2	equ	0xFF1
  6483                           postinc0	equ	0xFEE
  6484                           wreg	equ	0xFE8
  6485                           postdec1	equ	0xFE5
  6486                           fsr1l	equ	0xFE1
  6487                           indf2	equ	0xFDF
  6488                           postinc2	equ	0xFDE
  6489                           postdec2	equ	0xFDD
  6490                           fsr2h	equ	0xFDA
  6491                           fsr2l	equ	0xFD9
  6492                           status	equ	0xFD8
  6493                           
  6494 ;; *************** function _InitSystemApplicationManagers *****************
  6495 ;; Defined at:
  6496 ;;		line 33 in file "SystemSettings.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;		None
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;		None
  6501 ;; Return value:  Size  Location     Type
  6502 ;;                  1    wreg      void 
  6503 ;; Registers used:
  6504 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6510 ;;      Params:         0       0       0       0       0       0       0
  6511 ;;      Locals:         0       0       0       0       0       0       0
  6512 ;;      Temps:          0       0       0       0       0       0       0
  6513 ;;      Totals:         0       0       0       0       0       0       0
  6514 ;;Total ram usage:        0 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    7
  6517 ;; This function calls:
  6518 ;;		_ClearMcuRunTime
  6519 ;;		_DacInit
  6520 ;;		_InitAdcApplicationMgr
  6521 ;;		_PLLInitialize
  6522 ;;		_TMR0_StartTimer
  6523 ;; This function is called by:
  6524 ;;		_main
  6525 ;; This function uses a non-reentrant model
  6526 ;;
  6527                           
  6528                           	psect	text28
  6529  00264A                     __ptext28:
  6530                           	opt stack 0
  6531  00264A                     _InitSystemApplicationManagers:
  6532                           	opt stack 23
  6533                           
  6534                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;incstack = 0
  6538  00264A  EC44  F013         	call	_InitAdcApplicationMgr	;wreg free
  6539                           
  6540                           ;SystemSettings.c: 39: TMR0_StartTimer();
  6541  00264E  EC70  F013         	call	_TMR0_StartTimer	;wreg free
  6542                           
  6543                           ;SystemSettings.c: 42: PLLInitialize();
  6544  002652  EC8A  F005         	call	_PLLInitialize	;wreg free
  6545                           
  6546                           ;SystemSettings.c: 45: ClearMcuRunTime();
  6547  002656  EC3A  F013         	call	_ClearMcuRunTime	;wreg free
  6548                           
  6549                           ;SystemSettings.c: 48: DacInit();
  6550  00265A  EC4D  F00E         	call	_DacInit	;wreg free
  6551  00265E  0012               	return		;funcret
  6552  002660                     __end_of_InitSystemApplicationManagers:
  6553                           	opt stack 0
  6554                           tosu	equ	0xFFF
  6555                           tosh	equ	0xFFE
  6556                           tosl	equ	0xFFD
  6557                           pclath	equ	0xFFA
  6558                           tblptru	equ	0xFF8
  6559                           tblptrh	equ	0xFF7
  6560                           tblptrl	equ	0xFF6
  6561                           tablat	equ	0xFF5
  6562                           prodh	equ	0xFF4
  6563                           prodl	equ	0xFF3
  6564                           intcon	equ	0xFF2
  6565                           intcon2	equ	0xFF1
  6566                           postinc0	equ	0xFEE
  6567                           wreg	equ	0xFE8
  6568                           postdec1	equ	0xFE5
  6569                           fsr1l	equ	0xFE1
  6570                           indf2	equ	0xFDF
  6571                           postinc2	equ	0xFDE
  6572                           postdec2	equ	0xFDD
  6573                           fsr2h	equ	0xFDA
  6574                           fsr2l	equ	0xFD9
  6575                           status	equ	0xFD8
  6576                           
  6577 ;; *************** function _TMR0_StartTimer *****************
  6578 ;; Defined at:
  6579 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;		None
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;		None
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  1    wreg      void 
  6586 ;; Registers used:
  6587 ;;		None
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6593 ;;      Params:         0       0       0       0       0       0       0
  6594 ;;      Locals:         0       0       0       0       0       0       0
  6595 ;;      Temps:          0       0       0       0       0       0       0
  6596 ;;      Totals:         0       0       0       0       0       0       0
  6597 ;;Total ram usage:        0 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    3
  6600 ;; This function calls:
  6601 ;;		Nothing
  6602 ;; This function is called by:
  6603 ;;		_InitSystemApplicationManagers
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           	psect	text29
  6608  0026E0                     __ptext29:
  6609                           	opt stack 0
  6610  0026E0                     _TMR0_StartTimer:
  6611                           	opt stack 26
  6612                           
  6613                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  6614                           
  6615                           ;incstack = 0
  6616  0026E0  8ED5               	bsf	4053,7,c	;volatile
  6617  0026E2  0012               	return		;funcret
  6618  0026E4                     __end_of_TMR0_StartTimer:
  6619                           	opt stack 0
  6620                           tosu	equ	0xFFF
  6621                           tosh	equ	0xFFE
  6622                           tosl	equ	0xFFD
  6623                           pclath	equ	0xFFA
  6624                           tblptru	equ	0xFF8
  6625                           tblptrh	equ	0xFF7
  6626                           tblptrl	equ	0xFF6
  6627                           tablat	equ	0xFF5
  6628                           prodh	equ	0xFF4
  6629                           prodl	equ	0xFF3
  6630                           intcon	equ	0xFF2
  6631                           intcon2	equ	0xFF1
  6632                           postinc0	equ	0xFEE
  6633                           wreg	equ	0xFE8
  6634                           postdec1	equ	0xFE5
  6635                           fsr1l	equ	0xFE1
  6636                           indf2	equ	0xFDF
  6637                           postinc2	equ	0xFDE
  6638                           postdec2	equ	0xFDD
  6639                           fsr2h	equ	0xFDA
  6640                           fsr2l	equ	0xFD9
  6641                           status	equ	0xFD8
  6642                           
  6643 ;; *************** function _PLLInitialize *****************
  6644 ;; Defined at:
  6645 ;;		line 14 in file "SyntApp.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;		None
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;  idx             2   45[COMRAM] int 
  6650 ;;  idx             2   43[COMRAM] int 
  6651 ;; Return value:  Size  Location     Type
  6652 ;;                  1    wreg      void 
  6653 ;; Registers used:
  6654 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6655 ;; Tracked objects:
  6656 ;;		On entry : 0/0
  6657 ;;		On exit  : 0/0
  6658 ;;		Unchanged: 0/0
  6659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6660 ;;      Params:         0       0       0       0       0       0       0
  6661 ;;      Locals:         4       0       0       0       0       0       0
  6662 ;;      Temps:          2       0       0       0       0       0       0
  6663 ;;      Totals:         6       0       0       0       0       0       0
  6664 ;;Total ram usage:        6 bytes
  6665 ;; Hardware stack levels used:    1
  6666 ;; Hardware stack levels required when called:    6
  6667 ;; This function calls:
  6668 ;;		_SWSPI_send_word
  6669 ;;		_SwSpi_Set_CE_Pin
  6670 ;; This function is called by:
  6671 ;;		_InitSystemApplicationManagers
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           	psect	text30
  6676  000B14                     __ptext30:
  6677                           	opt stack 0
  6678  000B14                     _PLLInitialize:
  6679                           	opt stack 23
  6680                           
  6681                           ;SyntApp.c: 17: IOCB = 0b10000000;
  6682                           
  6683                           ;incstack = 0
  6684  000B14  0E80               	movlw	128
  6685  000B16  6E62               	movwf	3938,c	;volatile
  6686                           
  6687                           ;SyntApp.c: 20: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  6688  000B18  0E01               	movlw	1
  6689  000B1A  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  6690  000B1C  0E00               	movlw	0
  6691  000B1E  EC43  F011         	call	_SwSpi_Set_CE_Pin
  6692                           
  6693                           ;SyntApp.c: 24: for(int idx = 0; idx < 13; idx++)
  6694  000B22  0E00               	movlw	0
  6695  000B24  6E2D               	movwf	PLLInitialize@idx+1,c
  6696  000B26  0E00               	movlw	0
  6697  000B28  6E2C               	movwf	PLLInitialize@idx,c
  6698  000B2A                     l4984:
  6699  000B2A  BE2D               	btfsc	PLLInitialize@idx+1,7,c
  6700  000B2C  D006               	goto	l413
  6701  000B2E  502D               	movf	PLLInitialize@idx+1,w,c
  6702  000B30  E128               	bnz	l4994
  6703  000B32  0E0D               	movlw	13
  6704  000B34  5C2C               	subwf	PLLInitialize@idx,w,c
  6705  000B36  B0D8               	btfsc	status,0,c
  6706  000B38  D024               	goto	u4160
  6707  000B3A                     l413:
  6708                           
  6709                           ;SyntApp.c: 25: {
  6710                           ;SyntApp.c: 26: SWSPI_send_word(SYNTH_TX, TEST_PLL_REGISTERS[idx], 3);
  6711  000B3A  C02C  F02A         	movff	PLLInitialize@idx,??_PLLInitialize
  6712  000B3E  C02D  F02B         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
  6713  000B42  90D8               	bcf	status,0,c
  6714  000B44  362A               	rlcf	??_PLLInitialize,f,c
  6715  000B46  362B               	rlcf	??_PLLInitialize+1,f,c
  6716  000B48  90D8               	bcf	status,0,c
  6717  000B4A  362A               	rlcf	??_PLLInitialize,f,c
  6718  000B4C  362B               	rlcf	??_PLLInitialize+1,f,c
  6719  000B4E  0E77               	movlw	low _TEST_PLL_REGISTERS
  6720  000B50  242A               	addwf	??_PLLInitialize,w,c
  6721  000B52  6EF6               	movwf	tblptrl,c
  6722  000B54  0E7A               	movlw	high _TEST_PLL_REGISTERS
  6723  000B56  202B               	addwfc	??_PLLInitialize+1,w,c
  6724  000B58  6EF7               	movwf	tblptrh,c
  6725  000B5A                     	if	0	;There are less than 3 active tblptr bytes
  6726  000B5A                     	endif
  6727  000B5A  0009               	tblrd		*+
  6728  000B5C  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  6729  000B60  0009               	tblrd		*+
  6730  000B62  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  6731  000B66  0009               	tblrd		*+
  6732  000B68  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  6733  000B6C  000A               	tblrd		*-
  6734  000B6E  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  6735  000B72  0E03               	movlw	3
  6736  000B74  6E25               	movwf	SWSPI_send_word@dataSize,c
  6737  000B76  0E00               	movlw	0
  6738  000B78  ECF4  F00B         	call	_SWSPI_send_word
  6739  000B7C  4A2C               	infsnz	PLLInitialize@idx,f,c
  6740  000B7E  2A2D               	incf	PLLInitialize@idx+1,f,c
  6741  000B80  D7D4               	goto	l4984
  6742  000B82                     u4160:
  6743  000B82                     l4994:
  6744                           
  6745                           ;SyntApp.c: 27: }
  6746                           ;SyntApp.c: 36: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
  6747  000B82  0E01               	movlw	1
  6748  000B84  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  6749  000B86  0E01               	movlw	1
  6750  000B88  EC43  F011         	call	_SwSpi_Set_CE_Pin
  6751                           
  6752                           ;SyntApp.c: 39: for(int idx = 0; idx < 13; idx++)
  6753  000B8C  0E00               	movlw	0
  6754  000B8E  6E2F               	movwf	PLLInitialize@idx_590+1,c
  6755  000B90  0E00               	movlw	0
  6756  000B92  6E2E               	movwf	PLLInitialize@idx_590,c
  6757  000B94                     l4998:
  6758  000B94  BE2F               	btfsc	PLLInitialize@idx_590+1,7,c
  6759  000B96  D006               	goto	l415
  6760  000B98  502F               	movf	PLLInitialize@idx_590+1,w,c
  6761  000B9A  E128               	bnz	l5008
  6762  000B9C  0E0D               	movlw	13
  6763  000B9E  5C2E               	subwf	PLLInitialize@idx_590,w,c
  6764  000BA0  B0D8               	btfsc	status,0,c
  6765  000BA2  D024               	goto	u4180
  6766  000BA4                     l415:
  6767                           
  6768                           ;SyntApp.c: 40: {
  6769                           ;SyntApp.c: 41: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
  6770  000BA4  C02E  F02A         	movff	PLLInitialize@idx_590,??_PLLInitialize
  6771  000BA8  C02F  F02B         	movff	PLLInitialize@idx_590+1,??_PLLInitialize+1
  6772  000BAC  90D8               	bcf	status,0,c
  6773  000BAE  362A               	rlcf	??_PLLInitialize,f,c
  6774  000BB0  362B               	rlcf	??_PLLInitialize+1,f,c
  6775  000BB2  90D8               	bcf	status,0,c
  6776  000BB4  362A               	rlcf	??_PLLInitialize,f,c
  6777  000BB6  362B               	rlcf	??_PLLInitialize+1,f,c
  6778  000BB8  0EAB               	movlw	low _PLL_INIT_REGISTERS
  6779  000BBA  242A               	addwf	??_PLLInitialize,w,c
  6780  000BBC  6EF6               	movwf	tblptrl,c
  6781  000BBE  0E7A               	movlw	high _PLL_INIT_REGISTERS
  6782  000BC0  202B               	addwfc	??_PLLInitialize+1,w,c
  6783  000BC2  6EF7               	movwf	tblptrh,c
  6784  000BC4                     	if	0	;There are less than 3 active tblptr bytes
  6785  000BC4                     	endif
  6786  000BC4  0009               	tblrd		*+
  6787  000BC6  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  6788  000BCA  0009               	tblrd		*+
  6789  000BCC  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  6790  000BD0  0009               	tblrd		*+
  6791  000BD2  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  6792  000BD6  000A               	tblrd		*-
  6793  000BD8  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  6794  000BDC  0E03               	movlw	3
  6795  000BDE  6E25               	movwf	SWSPI_send_word@dataSize,c
  6796  000BE0  0E01               	movlw	1
  6797  000BE2  ECF4  F00B         	call	_SWSPI_send_word
  6798  000BE6  4A2E               	infsnz	PLLInitialize@idx_590,f,c
  6799  000BE8  2A2F               	incf	PLLInitialize@idx_590+1,f,c
  6800  000BEA  D7D4               	goto	l4998
  6801  000BEC                     u4180:
  6802  000BEC                     l5008:
  6803                           
  6804                           ;SyntApp.c: 42: }
  6805                           ;SyntApp.c: 45: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
  6806  000BEC  0EBB               	movlw	low (_PLL_INIT_REGISTERS+16)
  6807  000BEE  6EF6               	movwf	tblptrl,c
  6808  000BF0  0E7A               	movlw	high (_PLL_INIT_REGISTERS+16)
  6809  000BF2  6EF7               	movwf	tblptrh,c
  6810  000BF4                     	if	0	;tblptru may be non-zero
  6811  000BF4                     	endif
  6812  000BF4                     	if	0	;tblptru may be non-zero
  6813  000BF4                     	endif
  6814  000BF4  0009               	tblrd		*+
  6815  000BF6  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  6816  000BFA  0009               	tblrd		*+
  6817  000BFC  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  6818  000C00  0009               	tblrd		*+
  6819  000C02  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  6820  000C06  000A               	tblrd		*-
  6821  000C08  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  6822  000C0C  0E03               	movlw	3
  6823  000C0E  6E25               	movwf	SWSPI_send_word@dataSize,c
  6824  000C10  0E01               	movlw	1
  6825  000C12  ECF4  F00B         	call	_SWSPI_send_word
  6826                           
  6827                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
  6828  000C16  0EB3               	movlw	low (_PLL_INIT_REGISTERS+8)
  6829  000C18  6EF6               	movwf	tblptrl,c
  6830  000C1A  0E7A               	movlw	high (_PLL_INIT_REGISTERS+8)
  6831  000C1C  6EF7               	movwf	tblptrh,c
  6832  000C1E                     	if	0	;tblptru may be non-zero
  6833  000C1E                     	endif
  6834  000C1E                     	if	0	;tblptru may be non-zero
  6835  000C1E                     	endif
  6836  000C1E  0009               	tblrd		*+
  6837  000C20  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  6838  000C24  0009               	tblrd		*+
  6839  000C26  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  6840  000C2A  0009               	tblrd		*+
  6841  000C2C  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  6842  000C30  000A               	tblrd		*-
  6843  000C32  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  6844  000C36  0E03               	movlw	3
  6845  000C38  6E25               	movwf	SWSPI_send_word@dataSize,c
  6846  000C3A  0E01               	movlw	1
  6847  000C3C  ECF4  F00B         	call	_SWSPI_send_word
  6848                           
  6849                           ;SyntApp.c: 47: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
  6850  000C40  0EAF               	movlw	low (_PLL_INIT_REGISTERS+4)
  6851  000C42  6EF6               	movwf	tblptrl,c
  6852  000C44  0E7A               	movlw	high (_PLL_INIT_REGISTERS+4)
  6853  000C46  6EF7               	movwf	tblptrh,c
  6854  000C48                     	if	0	;tblptru may be non-zero
  6855  000C48                     	endif
  6856  000C48                     	if	0	;tblptru may be non-zero
  6857  000C48                     	endif
  6858  000C48  0009               	tblrd		*+
  6859  000C4A  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  6860  000C4E  0009               	tblrd		*+
  6861  000C50  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  6862  000C54  0009               	tblrd		*+
  6863  000C56  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  6864  000C5A  000A               	tblrd		*-
  6865  000C5C  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  6866  000C60  0E03               	movlw	3
  6867  000C62  6E25               	movwf	SWSPI_send_word@dataSize,c
  6868  000C64  0E01               	movlw	1
  6869  000C66  ECF4  F00B         	call	_SWSPI_send_word
  6870                           
  6871                           ;SyntApp.c: 48: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
  6872  000C6A  0EAB               	movlw	low _PLL_INIT_REGISTERS
  6873  000C6C  6EF6               	movwf	tblptrl,c
  6874  000C6E                     	if	1	;There is more than 1 active tblptr byte
  6875  000C6E  0E7A               	movlw	high _PLL_INIT_REGISTERS
  6876  000C70  6EF7               	movwf	tblptrh,c
  6877  000C72                     	endif
  6878  000C72                     	if	0	;There are less than 3 active tblptr bytes
  6879  000C72                     	endif
  6880  000C72  0009               	tblrd		*+
  6881  000C74  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  6882  000C78  0009               	tblrd		*+
  6883  000C7A  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  6884  000C7E  0009               	tblrd		*+
  6885  000C80  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  6886  000C84  000A               	tblrd		*-
  6887  000C86  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  6888  000C8A  0E03               	movlw	3
  6889  000C8C  6E25               	movwf	SWSPI_send_word@dataSize,c
  6890  000C8E  0E01               	movlw	1
  6891  000C90  ECF4  F00B         	call	_SWSPI_send_word
  6892  000C94  0012               	return		;funcret
  6893  000C96                     __end_of_PLLInitialize:
  6894                           	opt stack 0
  6895                           tosu	equ	0xFFF
  6896                           tosh	equ	0xFFE
  6897                           tosl	equ	0xFFD
  6898                           pclath	equ	0xFFA
  6899                           tblptru	equ	0xFF8
  6900                           tblptrh	equ	0xFF7
  6901                           tblptrl	equ	0xFF6
  6902                           tablat	equ	0xFF5
  6903                           prodh	equ	0xFF4
  6904                           prodl	equ	0xFF3
  6905                           intcon	equ	0xFF2
  6906                           intcon2	equ	0xFF1
  6907                           postinc0	equ	0xFEE
  6908                           wreg	equ	0xFE8
  6909                           postdec1	equ	0xFE5
  6910                           fsr1l	equ	0xFE1
  6911                           indf2	equ	0xFDF
  6912                           postinc2	equ	0xFDE
  6913                           postdec2	equ	0xFDD
  6914                           fsr2h	equ	0xFDA
  6915                           fsr2l	equ	0xFD9
  6916                           status	equ	0xFD8
  6917                           
  6918 ;; *************** function _SwSpi_Set_CE_Pin *****************
  6919 ;; Defined at:
  6920 ;;		line 221 in file "SwSpiApp.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;  phrType         1    wreg     enum E7600
  6923 ;;  cPinMode        1   23[COMRAM] unsigned char 
  6924 ;; Auto vars:     Size  Location     Type
  6925 ;;  phrType         1   24[COMRAM] enum E7600
  6926 ;; Return value:  Size  Location     Type
  6927 ;;                  1    wreg      void 
  6928 ;; Registers used:
  6929 ;;		wreg, status,2, status,0
  6930 ;; Tracked objects:
  6931 ;;		On entry : 0/0
  6932 ;;		On exit  : 0/0
  6933 ;;		Unchanged: 0/0
  6934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6935 ;;      Params:         1       0       0       0       0       0       0
  6936 ;;      Locals:         1       0       0       0       0       0       0
  6937 ;;      Temps:          0       0       0       0       0       0       0
  6938 ;;      Totals:         2       0       0       0       0       0       0
  6939 ;;Total ram usage:        2 bytes
  6940 ;; Hardware stack levels used:    1
  6941 ;; Hardware stack levels required when called:    3
  6942 ;; This function calls:
  6943 ;;		Nothing
  6944 ;; This function is called by:
  6945 ;;		_PLLInitialize
  6946 ;; This function uses a non-reentrant model
  6947 ;;
  6948                           
  6949                           	psect	text31
  6950  002286                     __ptext31:
  6951                           	opt stack 0
  6952  002286                     _SwSpi_Set_CE_Pin:
  6953                           	opt stack 25
  6954                           
  6955                           ;incstack = 0
  6956                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  6957  002286  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  6958                           
  6959                           ;SwSpiApp.c: 223: switch(phrType)
  6960  002288  D014               	goto	l577
  6961  00228A                     
  6962                           ;SwSpiApp.c: 226: if(cPinMode == 1)
  6963  00228A  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  6964  00228C  A4D8               	btfss	status,2,c
  6965  00228E  D002               	goto	l579
  6966                           
  6967                           ;SwSpiApp.c: 227: {
  6968                           ;SwSpiApp.c: 228: do { LATCbits.LATC1 = 1; } while(0);
  6969  002290  828B               	bsf	3979,1,c	;volatile
  6970                           
  6971                           ;SwSpiApp.c: 229: }
  6972  002292  0012               	return	
  6973  002294                     l579:
  6974                           
  6975                           ;SwSpiApp.c: 230: else if(cPinMode == 0)
  6976  002294  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  6977  002296  A4D8               	btfss	status,2,c
  6978  002298  0012               	return	
  6979                           
  6980                           ;SwSpiApp.c: 231: {
  6981                           ;SwSpiApp.c: 232: do { LATCbits.LATC1 = 0; } while(0);
  6982  00229A  928B               	bcf	3979,1,c	;volatile
  6983                           
  6984                           ;SwSpiApp.c: 233: }
  6985                           ;SwSpiApp.c: 234: break;
  6986  00229C  0012               	return	
  6987  00229E                     
  6988                           ;SwSpiApp.c: 237: if(cPinMode == 1)
  6989  00229E  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  6990  0022A0  A4D8               	btfss	status,2,c
  6991  0022A2  D002               	goto	l588
  6992                           
  6993                           ;SwSpiApp.c: 238: {
  6994                           ;SwSpiApp.c: 239: do { LATDbits.LATD2 = 1; } while(0);
  6995  0022A4  848C               	bsf	3980,2,c	;volatile
  6996                           
  6997                           ;SwSpiApp.c: 240: }
  6998  0022A6  0012               	return	
  6999  0022A8                     l588:
  7000                           
  7001                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
  7002  0022A8  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  7003  0022AA  A4D8               	btfss	status,2,c
  7004  0022AC  0012               	return	
  7005                           
  7006                           ;SwSpiApp.c: 242: {
  7007                           ;SwSpiApp.c: 243: do { LATCbits.LATC1 = 0; } while(0);
  7008  0022AE  928B               	bcf	3979,1,c	;volatile
  7009                           
  7010                           ;SwSpiApp.c: 246: }
  7011                           
  7012                           ;SwSpiApp.c: 244: }
  7013                           ;SwSpiApp.c: 245: break;
  7014  0022B0  0012               	return	
  7015  0022B2                     l577:
  7016  0022B2  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
  7017                           
  7018                           ; Switch size 1, requested type "space"
  7019                           ; Number of cases is 2, Range of values is 0 to 1
  7020                           ; switch strategies available:
  7021                           ; Name         Instructions Cycles
  7022                           ; simple_byte            7     4 (average)
  7023                           ;	Chosen strategy is simple_byte
  7024  0022B4  0A00               	xorlw	0	; case 0
  7025  0022B6  B4D8               	btfsc	status,2,c
  7026  0022B8  D7E8               	goto	l578
  7027  0022BA  0A01               	xorlw	1	; case 1
  7028  0022BC  A4D8               	btfss	status,2,c
  7029  0022BE  0012               	return	
  7030  0022C0  D7EE               	goto	l587
  7031  0022C2                     __end_of_SwSpi_Set_CE_Pin:
  7032                           	opt stack 0
  7033                           tosu	equ	0xFFF
  7034                           tosh	equ	0xFFE
  7035                           tosl	equ	0xFFD
  7036                           pclath	equ	0xFFA
  7037                           tblptru	equ	0xFF8
  7038                           tblptrh	equ	0xFF7
  7039                           tblptrl	equ	0xFF6
  7040                           tablat	equ	0xFF5
  7041                           prodh	equ	0xFF4
  7042                           prodl	equ	0xFF3
  7043                           intcon	equ	0xFF2
  7044                           intcon2	equ	0xFF1
  7045                           postinc0	equ	0xFEE
  7046                           wreg	equ	0xFE8
  7047                           postdec1	equ	0xFE5
  7048                           fsr1l	equ	0xFE1
  7049                           indf2	equ	0xFDF
  7050                           postinc2	equ	0xFDE
  7051                           postdec2	equ	0xFDD
  7052                           fsr2h	equ	0xFDA
  7053                           fsr2l	equ	0xFD9
  7054                           status	equ	0xFD8
  7055                           
  7056 ;; *************** function _InitAdcApplicationMgr *****************
  7057 ;; Defined at:
  7058 ;;		line 22 in file "AdcApp.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;		None
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;  channel         1   23[COMRAM] unsigned char 
  7063 ;; Return value:  Size  Location     Type
  7064 ;;                  1    wreg      void 
  7065 ;; Registers used:
  7066 ;;		wreg, status,2
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7072 ;;      Params:         0       0       0       0       0       0       0
  7073 ;;      Locals:         1       0       0       0       0       0       0
  7074 ;;      Temps:          0       0       0       0       0       0       0
  7075 ;;      Totals:         1       0       0       0       0       0       0
  7076 ;;Total ram usage:        1 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:    3
  7079 ;; This function calls:
  7080 ;;		Nothing
  7081 ;; This function is called by:
  7082 ;;		_InitSystemApplicationManagers
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           	psect	text32
  7087  002688                     __ptext32:
  7088                           	opt stack 0
  7089  002688                     _InitAdcApplicationMgr:
  7090                           	opt stack 26
  7091                           
  7092                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
  7093                           
  7094                           ;incstack = 0
  7095  002688  0E00               	movlw	0
  7096  00268A  0100               	movlb	0	; () banked
  7097  00268C  6FD7               	movwf	_conversionFormat& (0+255),b
  7098                           
  7099                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
  7100  00268E  0E00               	movlw	0
  7101  002690  6FD6               	movwf	_adcSampleMode& (0+255),b
  7102                           
  7103                           ;AdcApp.c: 26: char channel = 0;
  7104  002692  0E00               	movlw	0
  7105  002694  6E18               	movwf	InitAdcApplicationMgr@channel,c
  7106                           
  7107                           ; BSR set to: 0
  7108  002696  0012               	return		;funcret
  7109  002698                     __end_of_InitAdcApplicationMgr:
  7110                           	opt stack 0
  7111                           tosu	equ	0xFFF
  7112                           tosh	equ	0xFFE
  7113                           tosl	equ	0xFFD
  7114                           pclath	equ	0xFFA
  7115                           tblptru	equ	0xFF8
  7116                           tblptrh	equ	0xFF7
  7117                           tblptrl	equ	0xFF6
  7118                           tablat	equ	0xFF5
  7119                           prodh	equ	0xFF4
  7120                           prodl	equ	0xFF3
  7121                           intcon	equ	0xFF2
  7122                           intcon2	equ	0xFF1
  7123                           postinc0	equ	0xFEE
  7124                           wreg	equ	0xFE8
  7125                           postdec1	equ	0xFE5
  7126                           fsr1l	equ	0xFE1
  7127                           indf2	equ	0xFDF
  7128                           postinc2	equ	0xFDE
  7129                           postdec2	equ	0xFDD
  7130                           fsr2h	equ	0xFDA
  7131                           fsr2l	equ	0xFD9
  7132                           status	equ	0xFD8
  7133                           
  7134 ;; *************** function _DacInit *****************
  7135 ;; Defined at:
  7136 ;;		line 24 in file "DacApp.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;		None
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;		None
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  1    wreg      void 
  7143 ;; Registers used:
  7144 ;;		wreg, status,2, status,0, cstack
  7145 ;; Tracked objects:
  7146 ;;		On entry : 0/0
  7147 ;;		On exit  : 0/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7150 ;;      Params:         0       0       0       0       0       0       0
  7151 ;;      Locals:         0       0       0       0       0       0       0
  7152 ;;      Temps:          0       0       0       0       0       0       0
  7153 ;;      Totals:         0       0       0       0       0       0       0
  7154 ;;Total ram usage:        0 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; Hardware stack levels required when called:    6
  7157 ;; This function calls:
  7158 ;;		_SWSPI_send_word
  7159 ;; This function is called by:
  7160 ;;		_InitSystemApplicationManagers
  7161 ;; This function uses a non-reentrant model
  7162 ;;
  7163                           
  7164                           	psect	text33
  7165  001C9A                     __ptext33:
  7166                           	opt stack 0
  7167  001C9A                     _DacInit:
  7168                           	opt stack 23
  7169                           
  7170                           ;DacApp.c: 26: SWSPI_send_word(EXT_DAC, (0x2344), 1);
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;incstack = 0
  7174  001C9A  0E44               	movlw	68
  7175  001C9C  6E21               	movwf	SWSPI_send_word@data,c
  7176  001C9E  0E23               	movlw	35
  7177  001CA0  6E22               	movwf	SWSPI_send_word@data+1,c
  7178  001CA2  0E00               	movlw	0
  7179  001CA4  6E23               	movwf	SWSPI_send_word@data+2,c
  7180  001CA6  0E00               	movlw	0
  7181  001CA8  6E24               	movwf	SWSPI_send_word@data+3,c
  7182  001CAA  0E01               	movlw	1
  7183  001CAC  6E25               	movwf	SWSPI_send_word@dataSize,c
  7184  001CAE  0E02               	movlw	2
  7185  001CB0  ECF4  F00B         	call	_SWSPI_send_word
  7186                           
  7187                           ;DacApp.c: 27: SWSPI_send_word(EXT_DAC, (0x6344), 1);
  7188  001CB4  0E44               	movlw	68
  7189  001CB6  6E21               	movwf	SWSPI_send_word@data,c
  7190  001CB8  0E63               	movlw	99
  7191  001CBA  6E22               	movwf	SWSPI_send_word@data+1,c
  7192  001CBC  0E00               	movlw	0
  7193  001CBE  6E23               	movwf	SWSPI_send_word@data+2,c
  7194  001CC0  0E00               	movlw	0
  7195  001CC2  6E24               	movwf	SWSPI_send_word@data+3,c
  7196  001CC4  0E01               	movlw	1
  7197  001CC6  6E25               	movwf	SWSPI_send_word@dataSize,c
  7198  001CC8  0E02               	movlw	2
  7199  001CCA  ECF4  F00B         	call	_SWSPI_send_word
  7200                           
  7201                           ;DacApp.c: 28: SWSPI_send_word(EXT_DAC, (0xA344), 1);
  7202  001CCE  0E44               	movlw	68
  7203  001CD0  6E21               	movwf	SWSPI_send_word@data,c
  7204  001CD2  0EA3               	movlw	163
  7205  001CD4  6E22               	movwf	SWSPI_send_word@data+1,c
  7206  001CD6  0E00               	movlw	0
  7207  001CD8  6E23               	movwf	SWSPI_send_word@data+2,c
  7208  001CDA  0E00               	movlw	0
  7209  001CDC  6E24               	movwf	SWSPI_send_word@data+3,c
  7210  001CDE  0E01               	movlw	1
  7211  001CE0  6E25               	movwf	SWSPI_send_word@dataSize,c
  7212  001CE2  0E02               	movlw	2
  7213  001CE4  ECF4  F00B         	call	_SWSPI_send_word
  7214                           
  7215                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0xE344), 1);
  7216  001CE8  0E44               	movlw	68
  7217  001CEA  6E21               	movwf	SWSPI_send_word@data,c
  7218  001CEC  0EE3               	movlw	227
  7219  001CEE  6E22               	movwf	SWSPI_send_word@data+1,c
  7220  001CF0  0E00               	movlw	0
  7221  001CF2  6E23               	movwf	SWSPI_send_word@data+2,c
  7222  001CF4  0E00               	movlw	0
  7223  001CF6  6E24               	movwf	SWSPI_send_word@data+3,c
  7224  001CF8  0E01               	movlw	1
  7225  001CFA  6E25               	movwf	SWSPI_send_word@dataSize,c
  7226  001CFC  0E02               	movlw	2
  7227  001CFE  ECF4  F00B         	call	_SWSPI_send_word
  7228  001D02  0012               	return		;funcret
  7229  001D04                     __end_of_DacInit:
  7230                           	opt stack 0
  7231                           tosu	equ	0xFFF
  7232                           tosh	equ	0xFFE
  7233                           tosl	equ	0xFFD
  7234                           pclath	equ	0xFFA
  7235                           tblptru	equ	0xFF8
  7236                           tblptrh	equ	0xFF7
  7237                           tblptrl	equ	0xFF6
  7238                           tablat	equ	0xFF5
  7239                           prodh	equ	0xFF4
  7240                           prodl	equ	0xFF3
  7241                           intcon	equ	0xFF2
  7242                           intcon2	equ	0xFF1
  7243                           postinc0	equ	0xFEE
  7244                           wreg	equ	0xFE8
  7245                           postdec1	equ	0xFE5
  7246                           fsr1l	equ	0xFE1
  7247                           indf2	equ	0xFDF
  7248                           postinc2	equ	0xFDE
  7249                           postdec2	equ	0xFDD
  7250                           fsr2h	equ	0xFDA
  7251                           fsr2l	equ	0xFD9
  7252                           status	equ	0xFD8
  7253                           
  7254 ;; *************** function _SWSPI_send_word *****************
  7255 ;; Defined at:
  7256 ;;		line 17 in file "SwSpiApp.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;  phrType         1    wreg     enum E7600
  7259 ;;  data            4   32[COMRAM] unsigned long 
  7260 ;;  dataSize        1   36[COMRAM] unsigned char 
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;  phrType         1   40[COMRAM] enum E7600
  7263 ;;  datac           1   37[COMRAM] unsigned char 
  7264 ;;  idx             2   38[COMRAM] int 
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  1    wreg      void 
  7267 ;; Registers used:
  7268 ;;		wreg, status,2, status,0, cstack
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7274 ;;      Params:         5       0       0       0       0       0       0
  7275 ;;      Locals:         4       0       0       0       0       0       0
  7276 ;;      Temps:          0       0       0       0       0       0       0
  7277 ;;      Totals:         9       0       0       0       0       0       0
  7278 ;;Total ram usage:        9 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; Hardware stack levels required when called:    5
  7281 ;; This function calls:
  7282 ;;		_SWSPI_DAC_send_bits
  7283 ;;		_SWSPI_Synth_send_bits
  7284 ;;		_SwSpi_Set_Dac_Sync_Pin
  7285 ;;		_SwSpi_Set_Synth_Le_Pin
  7286 ;;		_make8
  7287 ;; This function is called by:
  7288 ;;		_DacInit
  7289 ;;		_PLLInitialize
  7290 ;;		_DacSetValue
  7291 ;;		_UpdateTxFreq
  7292 ;;		_UpdateRxFreq
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           	psect	text34
  7297  0017E8                     __ptext34:
  7298                           	opt stack 0
  7299  0017E8                     _SWSPI_send_word:
  7300                           	opt stack 23
  7301                           
  7302                           ;incstack = 0
  7303                           ;SWSPI_send_word@phrType stored from wreg
  7304  0017E8  6E29               	movwf	SWSPI_send_word@phrType,c
  7305                           
  7306                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
  7307  0017EA  9EF2               	bcf	intcon,7,c	;volatile
  7308                           
  7309                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  7310  0017EC  5029               	movf	SWSPI_send_word@phrType,w,c
  7311  0017EE  B4D8               	btfsc	status,2,c
  7312  0017F0  D003               	goto	u3730
  7313  0017F2  0429               	decf	SWSPI_send_word@phrType,w,c
  7314  0017F4  A4D8               	btfss	status,2,c
  7315  0017F6  D005               	goto	l476
  7316  0017F8                     u3730:
  7317                           
  7318                           ;SwSpiApp.c: 24: {
  7319                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
  7320  0017F8  0E00               	movlw	0
  7321  0017FA  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  7322  0017FC  5029               	movf	SWSPI_send_word@phrType,w,c
  7323  0017FE  EC61  F011         	call	_SwSpi_Set_Synth_Le_Pin
  7324  001802                     l476:
  7325                           
  7326                           ;SwSpiApp.c: 26: }
  7327                           ;SwSpiApp.c: 27: if(phrType == EXT_DAC)
  7328  001802  0E02               	movlw	2
  7329  001804  1829               	xorwf	SWSPI_send_word@phrType,w,c
  7330  001806  A4D8               	btfss	status,2,c
  7331  001808  D003               	goto	l479
  7332                           
  7333                           ;SwSpiApp.c: 28: {
  7334                           ;SwSpiApp.c: 29: SwSpi_Set_Dac_Sync_Pin(0);
  7335  00180A  0E00               	movlw	0
  7336  00180C  ECF3  F012         	call	_SwSpi_Set_Dac_Sync_Pin
  7337  001810                     l479:
  7338                           
  7339                           ;SwSpiApp.c: 30: }
  7340                           ;SwSpiApp.c: 35: for(int idx = dataSize + 1; idx > 0; idx--)
  7341  001810  0E01               	movlw	1
  7342  001812  2425               	addwf	SWSPI_send_word@dataSize,w,c
  7343  001814  6E27               	movwf	SWSPI_send_word@idx,c
  7344  001816  6A28               	clrf	SWSPI_send_word@idx+1,c
  7345  001818  0E00               	movlw	0
  7346  00181A  2228               	addwfc	SWSPI_send_word@idx+1,f,c
  7347  00181C                     l4656:
  7348  00181C  BE28               	btfsc	SWSPI_send_word@idx+1,7,c
  7349  00181E  D02B               	goto	u3790
  7350  001820  5028               	movf	SWSPI_send_word@idx+1,w,c
  7351  001822  E103               	bnz	l4660
  7352  001824  0427               	decf	SWSPI_send_word@idx,w,c
  7353  001826  A0D8               	btfss	status,0,c
  7354  001828  D026               	goto	u3790
  7355  00182A                     l4660:
  7356                           
  7357                           ;SwSpiApp.c: 36: {
  7358                           ;SwSpiApp.c: 37: uint8_t datac = make8(data, idx - 1);
  7359  00182A  C021  F018         	movff	SWSPI_send_word@data,make8@data
  7360  00182E  C022  F019         	movff	SWSPI_send_word@data+1,make8@data+1
  7361  001832  C023  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
  7362  001836  C024  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
  7363  00183A  0427               	decf	SWSPI_send_word@idx,w,c
  7364  00183C  6E1C               	movwf	make8@dataLocation,c
  7365  00183E  EC71  F00F         	call	_make8	;wreg free
  7366  001842  6E26               	movwf	SWSPI_send_word@datac,c
  7367                           
  7368                           ;SwSpiApp.c: 39: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  7369  001844  5029               	movf	SWSPI_send_word@phrType,w,c
  7370  001846  B4D8               	btfsc	status,2,c
  7371  001848  D003               	goto	u3770
  7372  00184A  0429               	decf	SWSPI_send_word@phrType,w,c
  7373  00184C  A4D8               	btfss	status,2,c
  7374  00184E  D006               	goto	l482
  7375  001850                     u3770:
  7376                           
  7377                           ;SwSpiApp.c: 40: {
  7378                           ;SwSpiApp.c: 41: SWSPI_Synth_send_bits(phrType, datac);
  7379  001850  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_Synth_send_bits@data
  7380  001854  5029               	movf	SWSPI_send_word@phrType,w,c
  7381  001856  ECCD  F00F         	call	_SWSPI_Synth_send_bits
  7382                           
  7383                           ;SwSpiApp.c: 42: }
  7384  00185A  D009               	goto	l486
  7385  00185C                     l482:
  7386                           
  7387                           ;SwSpiApp.c: 43: else if (phrType == EXT_DAC)
  7388  00185C  0E02               	movlw	2
  7389  00185E  1829               	xorwf	SWSPI_send_word@phrType,w,c
  7390  001860  A4D8               	btfss	status,2,c
  7391  001862  D005               	goto	l486
  7392                           
  7393                           ;SwSpiApp.c: 44: {
  7394                           ;SwSpiApp.c: 45: SWSPI_DAC_send_bits(phrType, datac);
  7395  001864  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
  7396  001868  5029               	movf	SWSPI_send_word@phrType,w,c
  7397  00186A  ECF9  F00F         	call	_SWSPI_DAC_send_bits
  7398  00186E                     l486:
  7399  00186E  0627               	decf	SWSPI_send_word@idx,f,c
  7400  001870  A0D8               	btfss	status,0,c
  7401  001872  0628               	decf	SWSPI_send_word@idx+1,f,c
  7402  001874  D7D3               	goto	l4656
  7403  001876                     u3790:
  7404                           
  7405                           ;SwSpiApp.c: 46: }
  7406                           ;SwSpiApp.c: 47: }
  7407                           ;SwSpiApp.c: 52: if(phrType == EXT_DAC)
  7408  001876  0E02               	movlw	2
  7409  001878  1829               	xorwf	SWSPI_send_word@phrType,w,c
  7410  00187A  A4D8               	btfss	status,2,c
  7411  00187C  D004               	goto	l487
  7412                           
  7413                           ;SwSpiApp.c: 53: {
  7414                           ;SwSpiApp.c: 54: SwSpi_Set_Dac_Sync_Pin(1);
  7415  00187E  0E01               	movlw	1
  7416  001880  ECF3  F012         	call	_SwSpi_Set_Dac_Sync_Pin
  7417                           
  7418                           ;SwSpiApp.c: 55: }
  7419  001884  D00B               	goto	l489
  7420  001886                     l487:
  7421                           
  7422                           ;SwSpiApp.c: 56: else if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  7423  001886  5029               	movf	SWSPI_send_word@phrType,w,c
  7424  001888  B4D8               	btfsc	status,2,c
  7425  00188A  D003               	goto	u3820
  7426  00188C  0429               	decf	SWSPI_send_word@phrType,w,c
  7427  00188E  A4D8               	btfss	status,2,c
  7428  001890  D005               	goto	l489
  7429  001892                     u3820:
  7430                           
  7431                           ;SwSpiApp.c: 57: {
  7432                           ;SwSpiApp.c: 58: SwSpi_Set_Synth_Le_Pin(phrType, 1);
  7433  001892  0E01               	movlw	1
  7434  001894  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  7435  001896  5029               	movf	SWSPI_send_word@phrType,w,c
  7436  001898  EC61  F011         	call	_SwSpi_Set_Synth_Le_Pin
  7437  00189C                     l489:
  7438                           
  7439                           ;SwSpiApp.c: 59: }
  7440                           ;SwSpiApp.c: 62: (INTCONbits.GIE = 1);
  7441  00189C  8EF2               	bsf	intcon,7,c	;volatile
  7442  00189E  0012               	return		;funcret
  7443  0018A0                     __end_of_SWSPI_send_word:
  7444                           	opt stack 0
  7445                           tosu	equ	0xFFF
  7446                           tosh	equ	0xFFE
  7447                           tosl	equ	0xFFD
  7448                           pclath	equ	0xFFA
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           intcon	equ	0xFF2
  7456                           intcon2	equ	0xFF1
  7457                           postinc0	equ	0xFEE
  7458                           wreg	equ	0xFE8
  7459                           postdec1	equ	0xFE5
  7460                           fsr1l	equ	0xFE1
  7461                           indf2	equ	0xFDF
  7462                           postinc2	equ	0xFDE
  7463                           postdec2	equ	0xFDD
  7464                           fsr2h	equ	0xFDA
  7465                           fsr2l	equ	0xFD9
  7466                           status	equ	0xFD8
  7467                           
  7468 ;; *************** function _make8 *****************
  7469 ;; Defined at:
  7470 ;;		line 62 in file "SystemCommon.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  data            4   23[COMRAM] unsigned long 
  7473 ;;  dataLocation    1   27[COMRAM] unsigned char 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;		None
  7476 ;; Return value:  Size  Location     Type
  7477 ;;                  1    wreg      unsigned char 
  7478 ;; Registers used:
  7479 ;;		wreg, status,2, status,0
  7480 ;; Tracked objects:
  7481 ;;		On entry : 0/0
  7482 ;;		On exit  : 0/0
  7483 ;;		Unchanged: 0/0
  7484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7485 ;;      Params:         5       0       0       0       0       0       0
  7486 ;;      Locals:         0       0       0       0       0       0       0
  7487 ;;      Temps:          4       0       0       0       0       0       0
  7488 ;;      Totals:         9       0       0       0       0       0       0
  7489 ;;Total ram usage:        9 bytes
  7490 ;; Hardware stack levels used:    1
  7491 ;; Hardware stack levels required when called:    3
  7492 ;; This function calls:
  7493 ;;		Nothing
  7494 ;; This function is called by:
  7495 ;;		_SWSPI_send_word
  7496 ;;		_FlashReadCondition
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           	psect	text35
  7501  001EE2                     __ptext35:
  7502                           	opt stack 0
  7503  001EE2                     _make8:
  7504                           	opt stack 24
  7505                           
  7506                           ;SystemCommon.c: 64: switch(dataLocation)
  7507                           
  7508                           ;incstack = 0
  7509  001EE2  D01F               	goto	l1115
  7510  001EE4                     
  7511                           ;SystemCommon.c: 67: return (data & 0x000000ff);
  7512  001EE4  5018               	movf	make8@data,w,c
  7513  001EE6  0012               	return	
  7514  001EE8                     
  7515                           ;SystemCommon.c: 70: return (data & 0x0000ff00) >> 8;
  7516  001EE8  5019               	movf	make8@data+1,w,c
  7517  001EEA  0012               	return	
  7518  001EEC                     
  7519                           ;SystemCommon.c: 73: return (data & 0x00ff0000) >> 16;
  7520  001EEC  501A               	movf	make8@data+2,w,c
  7521  001EEE  0012               	return	
  7522  001EF0                     
  7523                           ;SystemCommon.c: 76: return (data & 0xff000000) >> 24;
  7524  001EF0  0E00               	movlw	0
  7525  001EF2  1418               	andwf	make8@data,w,c
  7526  001EF4  6E1D               	movwf	??_make8& (0+255),c
  7527  001EF6  0E00               	movlw	0
  7528  001EF8  1419               	andwf	make8@data+1,w,c
  7529  001EFA  6E1E               	movwf	(??_make8+1)& (0+255),c
  7530  001EFC  0E00               	movlw	0
  7531  001EFE  141A               	andwf	make8@data+2,w,c
  7532  001F00  6E1F               	movwf	(??_make8+2)& (0+255),c
  7533  001F02  0EFF               	movlw	255
  7534  001F04  141B               	andwf	make8@data+3,w,c
  7535  001F06  6E20               	movwf	(??_make8+3)& (0+255),c
  7536  001F08  0E19               	movlw	25
  7537  001F0A  D005               	goto	u3340
  7538  001F0C                     u3345:
  7539  001F0C  90D8               	bcf	status,0,c
  7540  001F0E  3220               	rrcf	??_make8+3,f,c
  7541  001F10  321F               	rrcf	??_make8+2,f,c
  7542  001F12  321E               	rrcf	??_make8+1,f,c
  7543  001F14  321D               	rrcf	??_make8,f,c
  7544  001F16                     u3340:
  7545  001F16  2EE8               	decfsz	wreg,f,c
  7546  001F18  D7F9               	goto	u3345
  7547  001F1A  501D               	movf	??_make8,w,c
  7548  001F1C  0012               	return	
  7549  001F1E                     
  7550                           ;SystemCommon.c: 79: return (0);
  7551  001F1E  0E00               	movlw	0
  7552                           
  7553                           ;SystemCommon.c: 80: }
  7554  001F20  0012               	return	
  7555  001F22                     l1115:
  7556  001F22  501C               	movf	make8@dataLocation,w,c
  7557                           
  7558                           ; Switch size 1, requested type "space"
  7559                           ; Number of cases is 4, Range of values is 0 to 3
  7560                           ; switch strategies available:
  7561                           ; Name         Instructions Cycles
  7562                           ; simple_byte           13     7 (average)
  7563                           ;	Chosen strategy is simple_byte
  7564  001F24  0A00               	xorlw	0	; case 0
  7565  001F26  B4D8               	btfsc	status,2,c
  7566  001F28  D7DD               	goto	l1116
  7567  001F2A  0A01               	xorlw	1	; case 1
  7568  001F2C  B4D8               	btfsc	status,2,c
  7569  001F2E  D7DC               	goto	l1118
  7570  001F30  0A03               	xorlw	3	; case 2
  7571  001F32  B4D8               	btfsc	status,2,c
  7572  001F34  D7DB               	goto	l1119
  7573  001F36  0A01               	xorlw	1	; case 3
  7574  001F38  B4D8               	btfsc	status,2,c
  7575  001F3A  D7DA               	goto	l1120
  7576  001F3C  D7F0               	goto	l1121
  7577  001F3E                     __end_of_make8:
  7578                           	opt stack 0
  7579                           tosu	equ	0xFFF
  7580                           tosh	equ	0xFFE
  7581                           tosl	equ	0xFFD
  7582                           pclath	equ	0xFFA
  7583                           tblptru	equ	0xFF8
  7584                           tblptrh	equ	0xFF7
  7585                           tblptrl	equ	0xFF6
  7586                           tablat	equ	0xFF5
  7587                           prodh	equ	0xFF4
  7588                           prodl	equ	0xFF3
  7589                           intcon	equ	0xFF2
  7590                           intcon2	equ	0xFF1
  7591                           postinc0	equ	0xFEE
  7592                           wreg	equ	0xFE8
  7593                           postdec1	equ	0xFE5
  7594                           fsr1l	equ	0xFE1
  7595                           indf2	equ	0xFDF
  7596                           postinc2	equ	0xFDE
  7597                           postdec2	equ	0xFDD
  7598                           fsr2h	equ	0xFDA
  7599                           fsr2l	equ	0xFD9
  7600                           status	equ	0xFD8
  7601                           
  7602 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
  7603 ;; Defined at:
  7604 ;;		line 252 in file "SwSpiApp.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;  phrType         1    wreg     enum E7600
  7607 ;;  cPinMode        1   23[COMRAM] unsigned char 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  phrType         1   24[COMRAM] enum E7600
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  1    wreg      void 
  7612 ;; Registers used:
  7613 ;;		wreg, status,2, status,0
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7619 ;;      Params:         1       0       0       0       0       0       0
  7620 ;;      Locals:         1       0       0       0       0       0       0
  7621 ;;      Temps:          0       0       0       0       0       0       0
  7622 ;;      Totals:         2       0       0       0       0       0       0
  7623 ;;Total ram usage:        2 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    3
  7626 ;; This function calls:
  7627 ;;		Nothing
  7628 ;; This function is called by:
  7629 ;;		_SWSPI_send_word
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           	psect	text36
  7634  0022C2                     __ptext36:
  7635                           	opt stack 0
  7636  0022C2                     _SwSpi_Set_Synth_Le_Pin:
  7637                           	opt stack 24
  7638                           
  7639                           ;incstack = 0
  7640                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
  7641  0022C2  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
  7642                           
  7643                           ;SwSpiApp.c: 254: switch(phrType)
  7644  0022C4  D014               	goto	l598
  7645  0022C6                     
  7646                           ;SwSpiApp.c: 257: if(cPinMode == 1)
  7647  0022C6  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  7648  0022C8  A4D8               	btfss	status,2,c
  7649  0022CA  D002               	goto	l600
  7650                           
  7651                           ;SwSpiApp.c: 258: {
  7652                           ;SwSpiApp.c: 259: do { LATCbits.LATC2 = 1; } while(0);
  7653  0022CC  848B               	bsf	3979,2,c	;volatile
  7654                           
  7655                           ;SwSpiApp.c: 260: }
  7656  0022CE  0012               	return	
  7657  0022D0                     l600:
  7658                           
  7659                           ;SwSpiApp.c: 261: else if(cPinMode == 0)
  7660  0022D0  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  7661  0022D2  A4D8               	btfss	status,2,c
  7662  0022D4  0012               	return	
  7663                           
  7664                           ;SwSpiApp.c: 262: {
  7665                           ;SwSpiApp.c: 263: do { LATCbits.LATC2 = 0; } while(0);
  7666  0022D6  948B               	bcf	3979,2,c	;volatile
  7667                           
  7668                           ;SwSpiApp.c: 264: }
  7669                           ;SwSpiApp.c: 265: break;
  7670  0022D8  0012               	return	
  7671  0022DA                     
  7672                           ;SwSpiApp.c: 268: if(cPinMode == 1)
  7673  0022DA  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  7674  0022DC  A4D8               	btfss	status,2,c
  7675  0022DE  D002               	goto	l609
  7676                           
  7677                           ;SwSpiApp.c: 269: {
  7678                           ;SwSpiApp.c: 270: do { LATDbits.LATD3 = 1; } while(0);
  7679  0022E0  868C               	bsf	3980,3,c	;volatile
  7680                           
  7681                           ;SwSpiApp.c: 271: }
  7682  0022E2  0012               	return	
  7683  0022E4                     l609:
  7684                           
  7685                           ;SwSpiApp.c: 272: else if(cPinMode == 0)
  7686  0022E4  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  7687  0022E6  A4D8               	btfss	status,2,c
  7688  0022E8  0012               	return	
  7689                           
  7690                           ;SwSpiApp.c: 273: {
  7691                           ;SwSpiApp.c: 274: do { LATDbits.LATD3 = 0; } while(0);
  7692  0022EA  968C               	bcf	3980,3,c	;volatile
  7693                           
  7694                           ;SwSpiApp.c: 277: }
  7695                           
  7696                           ;SwSpiApp.c: 275: }
  7697                           ;SwSpiApp.c: 276: break;
  7698  0022EC  0012               	return	
  7699  0022EE                     l598:
  7700  0022EE  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
  7701                           
  7702                           ; Switch size 1, requested type "space"
  7703                           ; Number of cases is 2, Range of values is 0 to 1
  7704                           ; switch strategies available:
  7705                           ; Name         Instructions Cycles
  7706                           ; simple_byte            7     4 (average)
  7707                           ;	Chosen strategy is simple_byte
  7708  0022F0  0A00               	xorlw	0	; case 0
  7709  0022F2  B4D8               	btfsc	status,2,c
  7710  0022F4  D7E8               	goto	l599
  7711  0022F6  0A01               	xorlw	1	; case 1
  7712  0022F8  A4D8               	btfss	status,2,c
  7713  0022FA  0012               	return	
  7714  0022FC  D7EE               	goto	l608
  7715  0022FE                     __end_of_SwSpi_Set_Synth_Le_Pin:
  7716                           	opt stack 0
  7717                           tosu	equ	0xFFF
  7718                           tosh	equ	0xFFE
  7719                           tosl	equ	0xFFD
  7720                           pclath	equ	0xFFA
  7721                           tblptru	equ	0xFF8
  7722                           tblptrh	equ	0xFF7
  7723                           tblptrl	equ	0xFF6
  7724                           tablat	equ	0xFF5
  7725                           prodh	equ	0xFF4
  7726                           prodl	equ	0xFF3
  7727                           intcon	equ	0xFF2
  7728                           intcon2	equ	0xFF1
  7729                           postinc0	equ	0xFEE
  7730                           wreg	equ	0xFE8
  7731                           postdec1	equ	0xFE5
  7732                           fsr1l	equ	0xFE1
  7733                           indf2	equ	0xFDF
  7734                           postinc2	equ	0xFDE
  7735                           postdec2	equ	0xFDD
  7736                           fsr2h	equ	0xFDA
  7737                           fsr2l	equ	0xFD9
  7738                           status	equ	0xFD8
  7739                           
  7740 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
  7741 ;; Defined at:
  7742 ;;		line 280 in file "SwSpiApp.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;  cPinMode        1    wreg     unsigned char 
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;  cPinMode        1   23[COMRAM] unsigned char 
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  1    wreg      void 
  7749 ;; Registers used:
  7750 ;;		wreg, status,2, status,0
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/0
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7756 ;;      Params:         0       0       0       0       0       0       0
  7757 ;;      Locals:         1       0       0       0       0       0       0
  7758 ;;      Temps:          0       0       0       0       0       0       0
  7759 ;;      Totals:         1       0       0       0       0       0       0
  7760 ;;Total ram usage:        1 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; Hardware stack levels required when called:    3
  7763 ;; This function calls:
  7764 ;;		Nothing
  7765 ;; This function is called by:
  7766 ;;		_SWSPI_send_word
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           	psect	text37
  7771  0025E6                     __ptext37:
  7772                           	opt stack 0
  7773  0025E6                     _SwSpi_Set_Dac_Sync_Pin:
  7774                           	opt stack 24
  7775                           
  7776                           ;incstack = 0
  7777                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
  7778  0025E6  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
  7779                           
  7780                           ;SwSpiApp.c: 282: switch(cPinMode)
  7781  0025E8  D004               	goto	l619
  7782  0025EA                     
  7783                           ;SwSpiApp.c: 285: do { LATAbits.LATA2 = 0; } while(0);
  7784  0025EA  9489               	bcf	3977,2,c	;volatile
  7785                           
  7786                           ;SwSpiApp.c: 286: break;
  7787  0025EC  0012               	return	
  7788  0025EE                     
  7789                           ;SwSpiApp.c: 289: do { LATAbits.LATA2 = 1; } while(0);
  7790  0025EE  8489               	bsf	3977,2,c	;volatile
  7791                           
  7792                           ;SwSpiApp.c: 291: }
  7793                           
  7794                           ;SwSpiApp.c: 290: break;
  7795  0025F0  0012               	return	
  7796  0025F2                     l619:
  7797  0025F2  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
  7798                           
  7799                           ; Switch size 1, requested type "space"
  7800                           ; Number of cases is 2, Range of values is 0 to 1
  7801                           ; switch strategies available:
  7802                           ; Name         Instructions Cycles
  7803                           ; simple_byte            7     4 (average)
  7804                           ;	Chosen strategy is simple_byte
  7805  0025F4  0A00               	xorlw	0	; case 0
  7806  0025F6  B4D8               	btfsc	status,2,c
  7807  0025F8  D7F8               	goto	l620
  7808  0025FA  0A01               	xorlw	1	; case 1
  7809  0025FC  A4D8               	btfss	status,2,c
  7810  0025FE  0012               	return	
  7811  002600  D7F6               	goto	l624
  7812  002602                     __end_of_SwSpi_Set_Dac_Sync_Pin:
  7813                           	opt stack 0
  7814                           tosu	equ	0xFFF
  7815                           tosh	equ	0xFFE
  7816                           tosl	equ	0xFFD
  7817                           pclath	equ	0xFFA
  7818                           tblptru	equ	0xFF8
  7819                           tblptrh	equ	0xFF7
  7820                           tblptrl	equ	0xFF6
  7821                           tablat	equ	0xFF5
  7822                           prodh	equ	0xFF4
  7823                           prodl	equ	0xFF3
  7824                           intcon	equ	0xFF2
  7825                           intcon2	equ	0xFF1
  7826                           postinc0	equ	0xFEE
  7827                           wreg	equ	0xFE8
  7828                           postdec1	equ	0xFE5
  7829                           fsr1l	equ	0xFE1
  7830                           indf2	equ	0xFDF
  7831                           postinc2	equ	0xFDE
  7832                           postdec2	equ	0xFDD
  7833                           fsr2h	equ	0xFDA
  7834                           fsr2l	equ	0xFD9
  7835                           status	equ	0xFD8
  7836                           
  7837 ;; *************** function _SWSPI_Synth_send_bits *****************
  7838 ;; Defined at:
  7839 ;;		line 89 in file "SwSpiApp.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;  phrType         1    wreg     enum E7600
  7842 ;;  data            1   25[COMRAM] unsigned char 
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;  phrType         1   27[COMRAM] enum E7600
  7845 ;;  count           1   26[COMRAM] unsigned char 
  7846 ;; Return value:  Size  Location     Type
  7847 ;;                  1    wreg      void 
  7848 ;; Registers used:
  7849 ;;		wreg, status,2, status,0, cstack
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 0/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7855 ;;      Params:         1       0       0       0       0       0       0
  7856 ;;      Locals:         2       0       0       0       0       0       0
  7857 ;;      Temps:          0       0       0       0       0       0       0
  7858 ;;      Totals:         3       0       0       0       0       0       0
  7859 ;;Total ram usage:        3 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:    4
  7862 ;; This function calls:
  7863 ;;		_SwSpi_Clk_Pin
  7864 ;;		_SwSpi_Data_Pin
  7865 ;; This function is called by:
  7866 ;;		_SWSPI_send_word
  7867 ;; This function uses a non-reentrant model
  7868 ;;
  7869                           
  7870                           	psect	text38
  7871  001F9A                     __ptext38:
  7872                           	opt stack 0
  7873  001F9A                     _SWSPI_Synth_send_bits:
  7874                           	opt stack 23
  7875                           
  7876                           ;incstack = 0
  7877                           ;SWSPI_Synth_send_bits@phrType stored from wreg
  7878  001F9A  6E1C               	movwf	SWSPI_Synth_send_bits@phrType,c
  7879                           
  7880                           ;SwSpiApp.c: 91: uint8_t count;
  7881                           ;SwSpiApp.c: 92: for (count = 8; count ; count--, data <<= 1)
  7882  001F9C  0E08               	movlw	8
  7883  001F9E  6E1B               	movwf	SWSPI_Synth_send_bits@count,c
  7884  001FA0  D01A               	goto	l503
  7885  001FA2                     
  7886                           ;SwSpiApp.c: 93: {
  7887                           ;SwSpiApp.c: 94: SwSpi_Clk_Pin(phrType, 0);
  7888  001FA2  0E00               	movlw	0
  7889  001FA4  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  7890  001FA6  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  7891  001FA8  EC50  F010         	call	_SwSpi_Clk_Pin
  7892                           
  7893                           ;SwSpiApp.c: 96: if (data & 0X80)
  7894  001FAC  AE1A               	btfss	SWSPI_Synth_send_bits@data,7,c
  7895  001FAE  D006               	goto	l505
  7896                           
  7897                           ;SwSpiApp.c: 97: {
  7898                           ;SwSpiApp.c: 99: SwSpi_Data_Pin(phrType, 1);
  7899  001FB0  0E01               	movlw	1
  7900  001FB2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  7901  001FB4  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  7902  001FB6  EC25  F010         	call	_SwSpi_Data_Pin
  7903                           
  7904                           ;SwSpiApp.c: 100: }
  7905  001FBA  D005               	goto	l506
  7906  001FBC                     l505:
  7907                           
  7908                           ;SwSpiApp.c: 101: else
  7909                           ;SwSpiApp.c: 102: {
  7910                           ;SwSpiApp.c: 103: SwSpi_Data_Pin(phrType, 0);
  7911  001FBC  0E00               	movlw	0
  7912  001FBE  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  7913  001FC0  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  7914  001FC2  EC25  F010         	call	_SwSpi_Data_Pin
  7915  001FC6                     l506:
  7916                           
  7917                           ;SwSpiApp.c: 104: }
  7918                           ;SwSpiApp.c: 106: SwSpi_Clk_Pin(phrType, 1);
  7919  001FC6  0E01               	movlw	1
  7920  001FC8  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  7921  001FCA  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  7922  001FCC  EC50  F010         	call	_SwSpi_Clk_Pin
  7923  001FD0  061B               	decf	SWSPI_Synth_send_bits@count,f,c
  7924  001FD2  90D8               	bcf	status,0,c
  7925  001FD4  361A               	rlcf	SWSPI_Synth_send_bits@data,f,c
  7926  001FD6                     l503:
  7927  001FD6  501B               	movf	SWSPI_Synth_send_bits@count,w,c
  7928  001FD8  A4D8               	btfss	status,2,c
  7929  001FDA  D7E3               	goto	l504
  7930                           
  7931                           ;SwSpiApp.c: 113: }
  7932                           ;SwSpiApp.c: 115: SwSpi_Data_Pin(phrType, 0);
  7933  001FDC  0E00               	movlw	0
  7934  001FDE  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  7935  001FE0  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  7936  001FE2  EC25  F010         	call	_SwSpi_Data_Pin
  7937                           
  7938                           ;SwSpiApp.c: 116: SwSpi_Clk_Pin(phrType, 0);
  7939  001FE6  0E00               	movlw	0
  7940  001FE8  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  7941  001FEA  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  7942  001FEC  EC50  F010         	call	_SwSpi_Clk_Pin
  7943  001FF0  0012               	return		;funcret
  7944  001FF2                     __end_of_SWSPI_Synth_send_bits:
  7945                           	opt stack 0
  7946                           tosu	equ	0xFFF
  7947                           tosh	equ	0xFFE
  7948                           tosl	equ	0xFFD
  7949                           pclath	equ	0xFFA
  7950                           tblptru	equ	0xFF8
  7951                           tblptrh	equ	0xFF7
  7952                           tblptrl	equ	0xFF6
  7953                           tablat	equ	0xFF5
  7954                           prodh	equ	0xFF4
  7955                           prodl	equ	0xFF3
  7956                           intcon	equ	0xFF2
  7957                           intcon2	equ	0xFF1
  7958                           postinc0	equ	0xFEE
  7959                           wreg	equ	0xFE8
  7960                           postdec1	equ	0xFE5
  7961                           fsr1l	equ	0xFE1
  7962                           indf2	equ	0xFDF
  7963                           postinc2	equ	0xFDE
  7964                           postdec2	equ	0xFDD
  7965                           fsr2h	equ	0xFDA
  7966                           fsr2l	equ	0xFD9
  7967                           status	equ	0xFD8
  7968                           
  7969 ;; *************** function _SWSPI_DAC_send_bits *****************
  7970 ;; Defined at:
  7971 ;;		line 65 in file "SwSpiApp.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  phrType         1    wreg     enum E7600
  7974 ;;  data            1   25[COMRAM] unsigned char 
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  phrType         1   27[COMRAM] enum E7600
  7977 ;;  count           1   26[COMRAM] unsigned char 
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  1    wreg      void 
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7987 ;;      Params:         1       0       0       0       0       0       0
  7988 ;;      Locals:         2       0       0       0       0       0       0
  7989 ;;      Temps:          0       0       0       0       0       0       0
  7990 ;;      Totals:         3       0       0       0       0       0       0
  7991 ;;Total ram usage:        3 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    4
  7994 ;; This function calls:
  7995 ;;		_SwSpi_Clk_Pin
  7996 ;;		_SwSpi_Data_Pin
  7997 ;; This function is called by:
  7998 ;;		_SWSPI_send_word
  7999 ;; This function uses a non-reentrant model
  8000 ;;
  8001                           
  8002                           	psect	text39
  8003  001FF2                     __ptext39:
  8004                           	opt stack 0
  8005  001FF2                     _SWSPI_DAC_send_bits:
  8006                           	opt stack 23
  8007                           
  8008                           ;incstack = 0
  8009                           ;SWSPI_DAC_send_bits@phrType stored from wreg
  8010  001FF2  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
  8011                           
  8012                           ;SwSpiApp.c: 67: uint8_t count;
  8013                           ;SwSpiApp.c: 68: for (count = 8; count ; count--, data <<= 1)
  8014  001FF4  0E08               	movlw	8
  8015  001FF6  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
  8016  001FF8  D01A               	goto	l495
  8017  001FFA                     
  8018                           ;SwSpiApp.c: 69: {
  8019                           ;SwSpiApp.c: 70: SwSpi_Clk_Pin(phrType, 1);
  8020  001FFA  0E01               	movlw	1
  8021  001FFC  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  8022  001FFE  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  8023  002000  EC50  F010         	call	_SwSpi_Clk_Pin
  8024                           
  8025                           ;SwSpiApp.c: 72: if (data & 0X80)
  8026  002004  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
  8027  002006  D006               	goto	l497
  8028                           
  8029                           ;SwSpiApp.c: 73: {
  8030                           ;SwSpiApp.c: 75: SwSpi_Data_Pin(phrType, 1);
  8031  002008  0E01               	movlw	1
  8032  00200A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  8033  00200C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  8034  00200E  EC25  F010         	call	_SwSpi_Data_Pin
  8035                           
  8036                           ;SwSpiApp.c: 76: }
  8037  002012  D005               	goto	l498
  8038  002014                     l497:
  8039                           
  8040                           ;SwSpiApp.c: 77: else
  8041                           ;SwSpiApp.c: 78: {
  8042                           ;SwSpiApp.c: 79: SwSpi_Data_Pin(phrType, 0);
  8043  002014  0E00               	movlw	0
  8044  002016  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  8045  002018  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  8046  00201A  EC25  F010         	call	_SwSpi_Data_Pin
  8047  00201E                     l498:
  8048                           
  8049                           ;SwSpiApp.c: 80: }
  8050                           ;SwSpiApp.c: 82: SwSpi_Clk_Pin(phrType, 0);
  8051  00201E  0E00               	movlw	0
  8052  002020  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  8053  002022  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  8054  002024  EC50  F010         	call	_SwSpi_Clk_Pin
  8055  002028  061B               	decf	SWSPI_DAC_send_bits@count,f,c
  8056  00202A  90D8               	bcf	status,0,c
  8057  00202C  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
  8058  00202E                     l495:
  8059  00202E  501B               	movf	SWSPI_DAC_send_bits@count,w,c
  8060  002030  A4D8               	btfss	status,2,c
  8061  002032  D7E3               	goto	l496
  8062                           
  8063                           ;SwSpiApp.c: 83: }
  8064                           ;SwSpiApp.c: 85: SwSpi_Data_Pin(phrType, 0);
  8065  002034  0E00               	movlw	0
  8066  002036  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  8067  002038  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  8068  00203A  EC25  F010         	call	_SwSpi_Data_Pin
  8069                           
  8070                           ;SwSpiApp.c: 86: SwSpi_Clk_Pin(phrType, 0);
  8071  00203E  0E00               	movlw	0
  8072  002040  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  8073  002042  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  8074  002044  EC50  F010         	call	_SwSpi_Clk_Pin
  8075  002048  0012               	return		;funcret
  8076  00204A                     __end_of_SWSPI_DAC_send_bits:
  8077                           	opt stack 0
  8078                           tosu	equ	0xFFF
  8079                           tosh	equ	0xFFE
  8080                           tosl	equ	0xFFD
  8081                           pclath	equ	0xFFA
  8082                           tblptru	equ	0xFF8
  8083                           tblptrh	equ	0xFF7
  8084                           tblptrl	equ	0xFF6
  8085                           tablat	equ	0xFF5
  8086                           prodh	equ	0xFF4
  8087                           prodl	equ	0xFF3
  8088                           intcon	equ	0xFF2
  8089                           intcon2	equ	0xFF1
  8090                           postinc0	equ	0xFEE
  8091                           wreg	equ	0xFE8
  8092                           postdec1	equ	0xFE5
  8093                           fsr1l	equ	0xFE1
  8094                           indf2	equ	0xFDF
  8095                           postinc2	equ	0xFDE
  8096                           postdec2	equ	0xFDD
  8097                           fsr2h	equ	0xFDA
  8098                           fsr2l	equ	0xFD9
  8099                           status	equ	0xFD8
  8100                           
  8101 ;; *************** function _SwSpi_Data_Pin *****************
  8102 ;; Defined at:
  8103 ;;		line 123 in file "SwSpiApp.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;  phrType         1    wreg     enum E7600
  8106 ;;  cPinMode        1   23[COMRAM] unsigned char 
  8107 ;; Auto vars:     Size  Location     Type
  8108 ;;  phrType         1   24[COMRAM] enum E7600
  8109 ;; Return value:  Size  Location     Type
  8110 ;;                  1    wreg      void 
  8111 ;; Registers used:
  8112 ;;		wreg, status,2, status,0
  8113 ;; Tracked objects:
  8114 ;;		On entry : 0/0
  8115 ;;		On exit  : 0/0
  8116 ;;		Unchanged: 0/0
  8117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8118 ;;      Params:         1       0       0       0       0       0       0
  8119 ;;      Locals:         1       0       0       0       0       0       0
  8120 ;;      Temps:          0       0       0       0       0       0       0
  8121 ;;      Totals:         2       0       0       0       0       0       0
  8122 ;;Total ram usage:        2 bytes
  8123 ;; Hardware stack levels used:    1
  8124 ;; Hardware stack levels required when called:    3
  8125 ;; This function calls:
  8126 ;;		Nothing
  8127 ;; This function is called by:
  8128 ;;		_SWSPI_DAC_send_bits
  8129 ;;		_SWSPI_Synth_send_bits
  8130 ;; This function uses a non-reentrant model
  8131 ;;
  8132                           
  8133                           	psect	text40
  8134  00204A                     __ptext40:
  8135                           	opt stack 0
  8136  00204A                     _SwSpi_Data_Pin:
  8137                           	opt stack 23
  8138                           
  8139                           ;incstack = 0
  8140                           ;SwSpi_Data_Pin@phrType stored from wreg
  8141  00204A  6E19               	movwf	SwSpi_Data_Pin@phrType,c
  8142                           
  8143                           ;SwSpiApp.c: 125: switch(phrType)
  8144  00204C  D01E               	goto	l511
  8145  00204E                     
  8146                           ;SwSpiApp.c: 128: if(cPinMode == 1)
  8147  00204E  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
  8148  002050  A4D8               	btfss	status,2,c
  8149  002052  D002               	goto	l513
  8150                           
  8151                           ;SwSpiApp.c: 129: {
  8152                           ;SwSpiApp.c: 130: do { LATDbits.LATD0 = 1; } while(0);
  8153  002054  808C               	bsf	3980,0,c	;volatile
  8154                           
  8155                           ;SwSpiApp.c: 131: }
  8156  002056  0012               	return	
  8157  002058                     l513:
  8158                           
  8159                           ;SwSpiApp.c: 132: else if (cPinMode == 0)
  8160  002058  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
  8161  00205A  A4D8               	btfss	status,2,c
  8162  00205C  0012               	return	
  8163                           
  8164                           ;SwSpiApp.c: 133: {
  8165                           ;SwSpiApp.c: 134: do { LATDbits.LATD0 = 0; } while(0);
  8166  00205E  908C               	bcf	3980,0,c	;volatile
  8167                           
  8168                           ;SwSpiApp.c: 135: }
  8169                           ;SwSpiApp.c: 136: break;
  8170  002060  0012               	return	
  8171  002062                     
  8172                           ;SwSpiApp.c: 139: if(cPinMode == 1)
  8173  002062  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
  8174  002064  A4D8               	btfss	status,2,c
  8175  002066  D002               	goto	l522
  8176                           
  8177                           ;SwSpiApp.c: 140: {
  8178                           ;SwSpiApp.c: 141: do { LATCbits.LATC5 = 1; } while(0);
  8179  002068  8A8B               	bsf	3979,5,c	;volatile
  8180                           
  8181                           ;SwSpiApp.c: 142: }
  8182  00206A  0012               	return	
  8183  00206C                     l522:
  8184                           
  8185                           ;SwSpiApp.c: 143: else if (cPinMode == 0)
  8186  00206C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
  8187  00206E  A4D8               	btfss	status,2,c
  8188  002070  0012               	return	
  8189                           
  8190                           ;SwSpiApp.c: 144: {
  8191                           ;SwSpiApp.c: 145: do { LATCbits.LATC5 = 0; } while(0);
  8192  002072  9A8B               	bcf	3979,5,c	;volatile
  8193                           
  8194                           ;SwSpiApp.c: 146: }
  8195                           ;SwSpiApp.c: 147: break;
  8196  002074  0012               	return	
  8197  002076                     
  8198                           ;SwSpiApp.c: 150: if(cPinMode == 1)
  8199  002076  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
  8200  002078  A4D8               	btfss	status,2,c
  8201  00207A  D002               	goto	l530
  8202                           
  8203                           ;SwSpiApp.c: 151: {
  8204                           ;SwSpiApp.c: 152: do { LATAbits.LATA4 = 1; } while(0);
  8205  00207C  8889               	bsf	3977,4,c	;volatile
  8206                           
  8207                           ;SwSpiApp.c: 153: }
  8208  00207E  0012               	return	
  8209  002080                     l530:
  8210                           
  8211                           ;SwSpiApp.c: 154: else if (cPinMode == 0)
  8212  002080  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
  8213  002082  A4D8               	btfss	status,2,c
  8214  002084  0012               	return	
  8215                           
  8216                           ;SwSpiApp.c: 155: {
  8217                           ;SwSpiApp.c: 156: do { LATAbits.LATA4 = 0; } while(0);
  8218  002086  9889               	bcf	3977,4,c	;volatile
  8219                           
  8220                           ;SwSpiApp.c: 159: }
  8221                           
  8222                           ;SwSpiApp.c: 157: }
  8223                           ;SwSpiApp.c: 158: break;
  8224  002088  0012               	return	
  8225  00208A                     l511:
  8226  00208A  5019               	movf	SwSpi_Data_Pin@phrType,w,c
  8227                           
  8228                           ; Switch size 1, requested type "space"
  8229                           ; Number of cases is 3, Range of values is 0 to 2
  8230                           ; switch strategies available:
  8231                           ; Name         Instructions Cycles
  8232                           ; simple_byte           10     6 (average)
  8233                           ;	Chosen strategy is simple_byte
  8234  00208C  0A00               	xorlw	0	; case 0
  8235  00208E  B4D8               	btfsc	status,2,c
  8236  002090  D7DE               	goto	l512
  8237  002092  0A01               	xorlw	1	; case 1
  8238  002094  B4D8               	btfsc	status,2,c
  8239  002096  D7E5               	goto	l521
  8240  002098  0A03               	xorlw	3	; case 2
  8241  00209A  A4D8               	btfss	status,2,c
  8242  00209C  0012               	return	
  8243  00209E  D7EB               	goto	l529
  8244  0020A0                     __end_of_SwSpi_Data_Pin:
  8245                           	opt stack 0
  8246                           tosu	equ	0xFFF
  8247                           tosh	equ	0xFFE
  8248                           tosl	equ	0xFFD
  8249                           pclath	equ	0xFFA
  8250                           tblptru	equ	0xFF8
  8251                           tblptrh	equ	0xFF7
  8252                           tblptrl	equ	0xFF6
  8253                           tablat	equ	0xFF5
  8254                           prodh	equ	0xFF4
  8255                           prodl	equ	0xFF3
  8256                           intcon	equ	0xFF2
  8257                           intcon2	equ	0xFF1
  8258                           postinc0	equ	0xFEE
  8259                           wreg	equ	0xFE8
  8260                           postdec1	equ	0xFE5
  8261                           fsr1l	equ	0xFE1
  8262                           indf2	equ	0xFDF
  8263                           postinc2	equ	0xFDE
  8264                           postdec2	equ	0xFDD
  8265                           fsr2h	equ	0xFDA
  8266                           fsr2l	equ	0xFD9
  8267                           status	equ	0xFD8
  8268                           
  8269 ;; *************** function _SwSpi_Clk_Pin *****************
  8270 ;; Defined at:
  8271 ;;		line 162 in file "SwSpiApp.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;  phrType         1    wreg     enum E7600
  8274 ;;  cPinMode        1   23[COMRAM] unsigned char 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;  phrType         1   24[COMRAM] enum E7600
  8277 ;; Return value:  Size  Location     Type
  8278 ;;                  1    wreg      void 
  8279 ;; Registers used:
  8280 ;;		wreg, status,2, status,0
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8286 ;;      Params:         1       0       0       0       0       0       0
  8287 ;;      Locals:         1       0       0       0       0       0       0
  8288 ;;      Temps:          0       0       0       0       0       0       0
  8289 ;;      Totals:         2       0       0       0       0       0       0
  8290 ;;Total ram usage:        2 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    3
  8293 ;; This function calls:
  8294 ;;		Nothing
  8295 ;; This function is called by:
  8296 ;;		_SWSPI_DAC_send_bits
  8297 ;;		_SWSPI_Synth_send_bits
  8298 ;;		_SwSpi_Synth_Toggle_Clock
  8299 ;; This function uses a non-reentrant model
  8300 ;;
  8301                           
  8302                           	psect	text41
  8303  0020A0                     __ptext41:
  8304                           	opt stack 0
  8305  0020A0                     _SwSpi_Clk_Pin:
  8306                           	opt stack 23
  8307                           
  8308                           ;incstack = 0
  8309                           ;SwSpi_Clk_Pin@phrType stored from wreg
  8310  0020A0  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
  8311                           
  8312                           ;SwSpiApp.c: 164: switch(phrType)
  8313  0020A2  D01E               	goto	l540
  8314  0020A4                     
  8315                           ;SwSpiApp.c: 167: if(cPinMode == 1)
  8316  0020A4  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
  8317  0020A6  A4D8               	btfss	status,2,c
  8318  0020A8  D002               	goto	l542
  8319                           
  8320                           ;SwSpiApp.c: 168: {
  8321                           ;SwSpiApp.c: 169: do { LATCbits.LATC3 = 1; } while(0);
  8322  0020AA  868B               	bsf	3979,3,c	;volatile
  8323                           
  8324                           ;SwSpiApp.c: 170: }
  8325  0020AC  0012               	return	
  8326  0020AE                     l542:
  8327                           
  8328                           ;SwSpiApp.c: 171: else if (cPinMode == 0)
  8329  0020AE  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
  8330  0020B0  A4D8               	btfss	status,2,c
  8331  0020B2  0012               	return	
  8332                           
  8333                           ;SwSpiApp.c: 172: {
  8334                           ;SwSpiApp.c: 173: do { LATCbits.LATC3 = 0; } while(0);
  8335  0020B4  968B               	bcf	3979,3,c	;volatile
  8336                           
  8337                           ;SwSpiApp.c: 174: }
  8338                           ;SwSpiApp.c: 175: break;
  8339  0020B6  0012               	return	
  8340  0020B8                     
  8341                           ;SwSpiApp.c: 178: if(cPinMode == 1)
  8342  0020B8  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
  8343  0020BA  A4D8               	btfss	status,2,c
  8344  0020BC  D002               	goto	l551
  8345                           
  8346                           ;SwSpiApp.c: 179: {
  8347                           ;SwSpiApp.c: 180: do { LATCbits.LATC4 = 1; } while(0);
  8348  0020BE  888B               	bsf	3979,4,c	;volatile
  8349                           
  8350                           ;SwSpiApp.c: 181: }
  8351  0020C0  0012               	return	
  8352  0020C2                     l551:
  8353                           
  8354                           ;SwSpiApp.c: 182: else if (cPinMode == 0)
  8355  0020C2  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
  8356  0020C4  A4D8               	btfss	status,2,c
  8357  0020C6  0012               	return	
  8358                           
  8359                           ;SwSpiApp.c: 183: {
  8360                           ;SwSpiApp.c: 184: do { LATCbits.LATC4 = 0; } while(0);
  8361  0020C8  988B               	bcf	3979,4,c	;volatile
  8362                           
  8363                           ;SwSpiApp.c: 185: }
  8364                           ;SwSpiApp.c: 187: break;
  8365  0020CA  0012               	return	
  8366  0020CC                     
  8367                           ;SwSpiApp.c: 190: if(cPinMode == 1)
  8368  0020CC  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
  8369  0020CE  A4D8               	btfss	status,2,c
  8370  0020D0  D002               	goto	l559
  8371                           
  8372                           ;SwSpiApp.c: 191: {
  8373                           ;SwSpiApp.c: 192: do { LATAbits.LATA3 = 1; } while(0);
  8374  0020D2  8689               	bsf	3977,3,c	;volatile
  8375                           
  8376                           ;SwSpiApp.c: 193: }
  8377  0020D4  0012               	return	
  8378  0020D6                     l559:
  8379                           
  8380                           ;SwSpiApp.c: 194: else if (cPinMode == 0)
  8381  0020D6  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
  8382  0020D8  A4D8               	btfss	status,2,c
  8383  0020DA  0012               	return	
  8384                           
  8385                           ;SwSpiApp.c: 195: {
  8386                           ;SwSpiApp.c: 196: do { LATAbits.LATA3 = 0; } while(0);
  8387  0020DC  9689               	bcf	3977,3,c	;volatile
  8388                           
  8389                           ;SwSpiApp.c: 199: }
  8390                           
  8391                           ;SwSpiApp.c: 197: }
  8392                           ;SwSpiApp.c: 198: break;
  8393  0020DE  0012               	return	
  8394  0020E0                     l540:
  8395  0020E0  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
  8396                           
  8397                           ; Switch size 1, requested type "space"
  8398                           ; Number of cases is 3, Range of values is 0 to 2
  8399                           ; switch strategies available:
  8400                           ; Name         Instructions Cycles
  8401                           ; simple_byte           10     6 (average)
  8402                           ;	Chosen strategy is simple_byte
  8403  0020E2  0A00               	xorlw	0	; case 0
  8404  0020E4  B4D8               	btfsc	status,2,c
  8405  0020E6  D7DE               	goto	l541
  8406  0020E8  0A01               	xorlw	1	; case 1
  8407  0020EA  B4D8               	btfsc	status,2,c
  8408  0020EC  D7E5               	goto	l550
  8409  0020EE  0A03               	xorlw	3	; case 2
  8410  0020F0  A4D8               	btfss	status,2,c
  8411  0020F2  0012               	return	
  8412  0020F4  D7EB               	goto	l558
  8413  0020F6                     __end_of_SwSpi_Clk_Pin:
  8414                           	opt stack 0
  8415                           tosu	equ	0xFFF
  8416                           tosh	equ	0xFFE
  8417                           tosl	equ	0xFFD
  8418                           pclath	equ	0xFFA
  8419                           tblptru	equ	0xFF8
  8420                           tblptrh	equ	0xFF7
  8421                           tblptrl	equ	0xFF6
  8422                           tablat	equ	0xFF5
  8423                           prodh	equ	0xFF4
  8424                           prodl	equ	0xFF3
  8425                           intcon	equ	0xFF2
  8426                           intcon2	equ	0xFF1
  8427                           postinc0	equ	0xFEE
  8428                           wreg	equ	0xFE8
  8429                           postdec1	equ	0xFE5
  8430                           fsr1l	equ	0xFE1
  8431                           indf2	equ	0xFDF
  8432                           postinc2	equ	0xFDE
  8433                           postdec2	equ	0xFDD
  8434                           fsr2h	equ	0xFDA
  8435                           fsr2l	equ	0xFD9
  8436                           status	equ	0xFD8
  8437                           
  8438 ;; *************** function _ClearMcuRunTime *****************
  8439 ;; Defined at:
  8440 ;;		line 50 in file "SystemStatus.c"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;		None
  8443 ;; Auto vars:     Size  Location     Type
  8444 ;;		None
  8445 ;; Return value:  Size  Location     Type
  8446 ;;                  1    wreg      void 
  8447 ;; Registers used:
  8448 ;;		wreg, status,2
  8449 ;; Tracked objects:
  8450 ;;		On entry : 0/0
  8451 ;;		On exit  : 0/0
  8452 ;;		Unchanged: 0/0
  8453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8454 ;;      Params:         0       0       0       0       0       0       0
  8455 ;;      Locals:         0       0       0       0       0       0       0
  8456 ;;      Temps:          0       0       0       0       0       0       0
  8457 ;;      Totals:         0       0       0       0       0       0       0
  8458 ;;Total ram usage:        0 bytes
  8459 ;; Hardware stack levels used:    1
  8460 ;; Hardware stack levels required when called:    3
  8461 ;; This function calls:
  8462 ;;		Nothing
  8463 ;; This function is called by:
  8464 ;;		_InitSystemApplicationManagers
  8465 ;; This function uses a non-reentrant model
  8466 ;;
  8467                           
  8468                           	psect	text42
  8469  002674                     __ptext42:
  8470                           	opt stack 0
  8471  002674                     _ClearMcuRunTime:
  8472                           	opt stack 26
  8473                           
  8474                           ;SystemStatus.c: 52: mcuRunTimeIn5SecTicks = 0;
  8475                           
  8476                           ;incstack = 0
  8477  002674  0E00               	movlw	0
  8478  002676  0100               	movlb	0	; () banked
  8479  002678  6FC5               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
  8480  00267A  0E00               	movlw	0
  8481  00267C  6FC6               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
  8482  00267E  0E00               	movlw	0
  8483  002680  6FC7               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
  8484  002682  0E00               	movlw	0
  8485  002684  6FC8               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
  8486                           
  8487                           ; BSR set to: 0
  8488  002686  0012               	return		;funcret
  8489  002688                     __end_of_ClearMcuRunTime:
  8490                           	opt stack 0
  8491                           tosu	equ	0xFFF
  8492                           tosh	equ	0xFFE
  8493                           tosl	equ	0xFFD
  8494                           pclath	equ	0xFFA
  8495                           tblptru	equ	0xFF8
  8496                           tblptrh	equ	0xFF7
  8497                           tblptrl	equ	0xFF6
  8498                           tablat	equ	0xFF5
  8499                           prodh	equ	0xFF4
  8500                           prodl	equ	0xFF3
  8501                           intcon	equ	0xFF2
  8502                           intcon2	equ	0xFF1
  8503                           postinc0	equ	0xFEE
  8504                           wreg	equ	0xFE8
  8505                           postdec1	equ	0xFE5
  8506                           fsr1l	equ	0xFE1
  8507                           indf2	equ	0xFDF
  8508                           postinc2	equ	0xFDE
  8509                           postdec2	equ	0xFDD
  8510                           fsr2h	equ	0xFDA
  8511                           fsr2l	equ	0xFD9
  8512                           status	equ	0xFD8
  8513                           
  8514 ;; *************** function _CheckFlashPrecentage *****************
  8515 ;; Defined at:
  8516 ;;		line 205 in file "FlashApp.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;		None
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;  precentage      3   28[BANK0 ] void 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  1    wreg      unsigned char 
  8523 ;; Registers used:
  8524 ;;		wreg, status,2, status,0, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8530 ;;      Params:         0       0       0       0       0       0       0
  8531 ;;      Locals:         0       3       0       0       0       0       0
  8532 ;;      Temps:          0       4       0       0       0       0       0
  8533 ;;      Totals:         0       7       0       0       0       0       0
  8534 ;;Total ram usage:        7 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    5
  8537 ;; This function calls:
  8538 ;;		___ftdiv
  8539 ;;		___ftge
  8540 ;;		___ftmul
  8541 ;;		___lltoft
  8542 ;; This function is called by:
  8543 ;;		_main
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547                           	psect	text43
  8548  0018A0                     __ptext43:
  8549                           	opt stack 0
  8550  0018A0                     _CheckFlashPrecentage:
  8551                           	opt stack 25
  8552                           
  8553                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;incstack = 0
  8557  0018A0  0EE0               	movlw	224
  8558  0018A2  6E2C               	movwf	___ftdiv@f2,c
  8559  0018A4  0EFF               	movlw	255
  8560  0018A6  6E2D               	movwf	___ftdiv@f2+1,c
  8561  0018A8  0E46               	movlw	70
  8562  0018AA  6E2E               	movwf	___ftdiv@f2+2,c
  8563  0018AC  C042  F078         	movff	_writeAddress,??_CheckFlashPrecentage
  8564  0018B0  C043  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
  8565  0018B4  C044  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
  8566  0018B8  C045  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
  8567  0018BC  0100               	movlb	0	; () banked
  8568  0018BE  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
  8569  0018C0  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
  8570  0018C2  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
  8571  0018C4  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
  8572  0018C6  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
  8573  0018C8  0E00               	movlw	0
  8574  0018CA  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
  8575  0018CC  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
  8576  0018CE  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
  8577  0018D0  0EF0               	movlw	240
  8578  0018D2  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
  8579  0018D4  6E20               	movwf	___lltoft@c,c
  8580  0018D6  0E7F               	movlw	127
  8581  0018D8  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
  8582  0018DA  6E21               	movwf	___lltoft@c+1,c
  8583  0018DC  0E00               	movlw	0
  8584  0018DE  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
  8585  0018E0  6E22               	movwf	___lltoft@c+2,c
  8586  0018E2  0E00               	movlw	0
  8587  0018E4  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
  8588  0018E6  6E23               	movwf	___lltoft@c+3,c
  8589  0018E8  EC9F  F00F         	call	___lltoft	;wreg free
  8590  0018EC  C020  F029         	movff	?___lltoft,___ftdiv@f1
  8591  0018F0  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
  8592  0018F4  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
  8593  0018F8  EC0E  F009         	call	___ftdiv	;wreg free
  8594  0018FC  C029  F069         	movff	?___ftdiv,___ftmul@f1
  8595  001900  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  8596  001904  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  8597  001908  0E00               	movlw	0
  8598  00190A  0100               	movlb	0	; () banked
  8599  00190C  6F6C               	movwf	___ftmul@f2& (0+255),b
  8600  00190E  0EC8               	movlw	200
  8601  001910  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  8602  001912  0E42               	movlw	66
  8603  001914  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  8604  001916  EC93  F008         	call	___ftmul	;wreg free
  8605  00191A  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
  8606  00191E  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
  8607  001922  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
  8608                           
  8609                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
  8610  001926  0E00               	movlw	0
  8611  001928  6E18               	movwf	___ftge@ff1,c
  8612  00192A  0E96               	movlw	150
  8613  00192C  6E19               	movwf	___ftge@ff1+1,c
  8614  00192E  0E42               	movlw	66
  8615  001930  6E1A               	movwf	___ftge@ff1+2,c
  8616  001932  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
  8617  001936  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
  8618  00193A  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
  8619  00193E  EC8F  F00D         	call	___ftge	;wreg free
  8620  001942  B0D8               	btfsc	status,0,c
  8621  001944  D002               	goto	u6040
  8622  001946  0E01               	movlw	1
  8623  001948  0012               	return	
  8624  00194A                     u6040:
  8625  00194A  0E00               	movlw	0
  8626  00194C  0012               	return	
  8627  00194E                     __end_of_CheckFlashPrecentage:
  8628                           	opt stack 0
  8629                           tosu	equ	0xFFF
  8630                           tosh	equ	0xFFE
  8631                           tosl	equ	0xFFD
  8632                           pclath	equ	0xFFA
  8633                           tblptru	equ	0xFF8
  8634                           tblptrh	equ	0xFF7
  8635                           tblptrl	equ	0xFF6
  8636                           tablat	equ	0xFF5
  8637                           prodh	equ	0xFF4
  8638                           prodl	equ	0xFF3
  8639                           intcon	equ	0xFF2
  8640                           intcon2	equ	0xFF1
  8641                           postinc0	equ	0xFEE
  8642                           wreg	equ	0xFE8
  8643                           postdec1	equ	0xFE5
  8644                           fsr1l	equ	0xFE1
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           postdec2	equ	0xFDD
  8648                           fsr2h	equ	0xFDA
  8649                           fsr2l	equ	0xFD9
  8650                           status	equ	0xFD8
  8651                           
  8652 ;; *************** function _BlinkOkLeds *****************
  8653 ;; Defined at:
  8654 ;;		line 24 in file "LedsApp.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  state           1    wreg     enum E7616
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;  state           1   26[COMRAM] enum E7616
  8659 ;;  idx             2   27[COMRAM] int 
  8660 ;; Return value:  Size  Location     Type
  8661 ;;                  1    wreg      void 
  8662 ;; Registers used:
  8663 ;;		wreg, status,2, status,0
  8664 ;; Tracked objects:
  8665 ;;		On entry : 0/0
  8666 ;;		On exit  : 0/0
  8667 ;;		Unchanged: 0/0
  8668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8669 ;;      Params:         0       0       0       0       0       0       0
  8670 ;;      Locals:         3       0       0       0       0       0       0
  8671 ;;      Temps:          3       0       0       0       0       0       0
  8672 ;;      Totals:         6       0       0       0       0       0       0
  8673 ;;Total ram usage:        6 bytes
  8674 ;; Hardware stack levels used:    1
  8675 ;; Hardware stack levels required when called:    3
  8676 ;; This function calls:
  8677 ;;		Nothing
  8678 ;; This function is called by:
  8679 ;;		_main
  8680 ;; This function uses a non-reentrant model
  8681 ;;
  8682                           
  8683                           	psect	text44
  8684  001DCA                     __ptext44:
  8685                           	opt stack 0
  8686  001DCA                     _BlinkOkLeds:
  8687                           	opt stack 27
  8688                           
  8689                           ;incstack = 0
  8690                           ;BlinkOkLeds@state stored from wreg
  8691  001DCA  6E1B               	movwf	BlinkOkLeds@state,c
  8692                           
  8693                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
  8694  001DCC  0E00               	movlw	0
  8695  001DCE  6E1D               	movwf	BlinkOkLeds@idx+1,c
  8696  001DD0  0E00               	movlw	0
  8697  001DD2  6E1C               	movwf	BlinkOkLeds@idx,c
  8698  001DD4                     l5098:
  8699  001DD4  501B               	movf	BlinkOkLeds@state,w,c
  8700  001DD6  6E18               	movwf	??_BlinkOkLeds& (0+255),c
  8701  001DD8  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
  8702  001DDA  5018               	movf	??_BlinkOkLeds,w,c
  8703  001DDC  5C1C               	subwf	BlinkOkLeds@idx,w,c
  8704  001DDE  501D               	movf	BlinkOkLeds@idx+1,w,c
  8705  001DE0  0A80               	xorlw	128
  8706  001DE2  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
  8707  001DE4  5019               	movf	??_BlinkOkLeds+1,w,c
  8708  001DE6  0A80               	xorlw	128
  8709  001DE8  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
  8710  001DEA  B0D8               	btfsc	status,0,c
  8711  001DEC  0012               	return	
  8712                           
  8713                           ;LedsApp.c: 27: {
  8714                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
  8715  001DEE  908B               	bcf	3979,0,c	;volatile
  8716                           
  8717                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
  8718  001DF0  0E02               	movlw	2
  8719  001DF2  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
  8720  001DF4  0E04               	movlw	4
  8721  001DF6  6E18               	movwf	??_BlinkOkLeds& (0+255),c
  8722  001DF8  0EBA               	movlw	186
  8723  001DFA                     u6437:
  8724  001DFA  2EE8               	decfsz	wreg,f,c
  8725  001DFC  D7FE               	bra	u6437
  8726  001DFE  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
  8727  001E00  D7FC               	bra	u6437
  8728  001E02  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
  8729  001E04  D7FA               	bra	u6437
  8730  001E06  D000               	nop2	
  8731                           
  8732                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
  8733  001E08  808B               	bsf	3979,0,c	;volatile
  8734                           
  8735                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
  8736  001E0A  0E02               	movlw	2
  8737  001E0C  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
  8738  001E0E  0E04               	movlw	4
  8739  001E10  6E18               	movwf	??_BlinkOkLeds& (0+255),c
  8740  001E12  0EBA               	movlw	186
  8741  001E14                     u6447:
  8742  001E14  2EE8               	decfsz	wreg,f,c
  8743  001E16  D7FE               	bra	u6447
  8744  001E18  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
  8745  001E1A  D7FC               	bra	u6447
  8746  001E1C  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
  8747  001E1E  D7FA               	bra	u6447
  8748  001E20  D000               	nop2	
  8749  001E22  4A1C               	infsnz	BlinkOkLeds@idx,f,c
  8750  001E24  2A1D               	incf	BlinkOkLeds@idx+1,f,c
  8751  001E26  D7D6               	goto	l5098
  8752  001E28                     __end_of_BlinkOkLeds:
  8753                           	opt stack 0
  8754                           tosu	equ	0xFFF
  8755                           tosh	equ	0xFFE
  8756                           tosl	equ	0xFFD
  8757                           pclath	equ	0xFFA
  8758                           tblptru	equ	0xFF8
  8759                           tblptrh	equ	0xFF7
  8760                           tblptrl	equ	0xFF6
  8761                           tablat	equ	0xFF5
  8762                           prodh	equ	0xFF4
  8763                           prodl	equ	0xFF3
  8764                           intcon	equ	0xFF2
  8765                           intcon2	equ	0xFF1
  8766                           postinc0	equ	0xFEE
  8767                           wreg	equ	0xFE8
  8768                           postdec1	equ	0xFE5
  8769                           fsr1l	equ	0xFE1
  8770                           indf2	equ	0xFDF
  8771                           postinc2	equ	0xFDE
  8772                           postdec2	equ	0xFDD
  8773                           fsr2h	equ	0xFDA
  8774                           fsr2l	equ	0xFD9
  8775                           status	equ	0xFD8
  8776                           
  8777 ;; *************** function _BlinkErrorLeds *****************
  8778 ;; Defined at:
  8779 ;;		line 13 in file "LedsApp.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;  state           1    wreg     enum E7619
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;  state           1   26[COMRAM] enum E7619
  8784 ;;  idx             2   27[COMRAM] int 
  8785 ;; Return value:  Size  Location     Type
  8786 ;;                  1    wreg      void 
  8787 ;; Registers used:
  8788 ;;		wreg, status,2, status,0
  8789 ;; Tracked objects:
  8790 ;;		On entry : 0/0
  8791 ;;		On exit  : 0/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8794 ;;      Params:         0       0       0       0       0       0       0
  8795 ;;      Locals:         3       0       0       0       0       0       0
  8796 ;;      Temps:          3       0       0       0       0       0       0
  8797 ;;      Totals:         6       0       0       0       0       0       0
  8798 ;;Total ram usage:        6 bytes
  8799 ;; Hardware stack levels used:    1
  8800 ;; Hardware stack levels required when called:    3
  8801 ;; This function calls:
  8802 ;;		Nothing
  8803 ;; This function is called by:
  8804 ;;		_main
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           	psect	text45
  8809  001E28                     __ptext45:
  8810                           	opt stack 0
  8811  001E28                     _BlinkErrorLeds:
  8812                           	opt stack 27
  8813                           
  8814                           ;incstack = 0
  8815                           ;BlinkErrorLeds@state stored from wreg
  8816  001E28  6E1B               	movwf	BlinkErrorLeds@state,c
  8817                           
  8818                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
  8819  001E2A  0E00               	movlw	0
  8820  001E2C  6E1D               	movwf	BlinkErrorLeds@idx+1,c
  8821  001E2E  0E00               	movlw	0
  8822  001E30  6E1C               	movwf	BlinkErrorLeds@idx,c
  8823  001E32                     l5086:
  8824  001E32  501B               	movf	BlinkErrorLeds@state,w,c
  8825  001E34  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8826  001E36  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
  8827  001E38  5018               	movf	??_BlinkErrorLeds,w,c
  8828  001E3A  5C1C               	subwf	BlinkErrorLeds@idx,w,c
  8829  001E3C  501D               	movf	BlinkErrorLeds@idx+1,w,c
  8830  001E3E  0A80               	xorlw	128
  8831  001E40  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
  8832  001E42  5019               	movf	??_BlinkErrorLeds+1,w,c
  8833  001E44  0A80               	xorlw	128
  8834  001E46  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
  8835  001E48  B0D8               	btfsc	status,0,c
  8836  001E4A  0012               	return	
  8837                           
  8838                           ;LedsApp.c: 16: {
  8839                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
  8840  001E4C  988A               	bcf	3978,4,c	;volatile
  8841                           
  8842                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
  8843  001E4E  0E02               	movlw	2
  8844  001E50  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8845  001E52  0E04               	movlw	4
  8846  001E54  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8847  001E56  0EBA               	movlw	186
  8848  001E58                     u6457:
  8849  001E58  2EE8               	decfsz	wreg,f,c
  8850  001E5A  D7FE               	bra	u6457
  8851  001E5C  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8852  001E5E  D7FC               	bra	u6457
  8853  001E60  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8854  001E62  D7FA               	bra	u6457
  8855  001E64  D000               	nop2	
  8856                           
  8857                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
  8858  001E66  888A               	bsf	3978,4,c	;volatile
  8859                           
  8860                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
  8861  001E68  0E02               	movlw	2
  8862  001E6A  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8863  001E6C  0E04               	movlw	4
  8864  001E6E  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8865  001E70  0EBA               	movlw	186
  8866  001E72                     u6467:
  8867  001E72  2EE8               	decfsz	wreg,f,c
  8868  001E74  D7FE               	bra	u6467
  8869  001E76  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8870  001E78  D7FC               	bra	u6467
  8871  001E7A  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8872  001E7C  D7FA               	bra	u6467
  8873  001E7E  D000               	nop2	
  8874  001E80  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
  8875  001E82  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
  8876  001E84  D7D6               	goto	l5086
  8877  001E86                     __end_of_BlinkErrorLeds:
  8878                           	opt stack 0
  8879                           tosu	equ	0xFFF
  8880                           tosh	equ	0xFFE
  8881                           tosl	equ	0xFFD
  8882                           pclath	equ	0xFFA
  8883                           tblptru	equ	0xFF8
  8884                           tblptrh	equ	0xFF7
  8885                           tblptrl	equ	0xFF6
  8886                           tablat	equ	0xFF5
  8887                           prodh	equ	0xFF4
  8888                           prodl	equ	0xFF3
  8889                           intcon	equ	0xFF2
  8890                           intcon2	equ	0xFF1
  8891                           postinc0	equ	0xFEE
  8892                           wreg	equ	0xFE8
  8893                           postdec1	equ	0xFE5
  8894                           fsr1l	equ	0xFE1
  8895                           indf2	equ	0xFDF
  8896                           postinc2	equ	0xFDE
  8897                           postdec2	equ	0xFDD
  8898                           fsr2h	equ	0xFDA
  8899                           fsr2l	equ	0xFD9
  8900                           status	equ	0xFD8
  8901                           
  8902 ;; *************** function _AdcConvert *****************
  8903 ;; Defined at:
  8904 ;;		line 56 in file "AdcApp.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;		None
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;  _adcResult      2   85[BANK0 ] unsigned int 
  8909 ;;  idx             1   94[BANK0 ] unsigned char 
  8910 ;;  _adcResult      2   87[BANK0 ] unsigned int 
  8911 ;;  adcRes          2   92[BANK0 ] unsigned int 
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  1    wreg      void 
  8914 ;; Registers used:
  8915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8921 ;;      Params:         0       0       0       0       0       0       0
  8922 ;;      Locals:         0      10       0       0       0       0       0
  8923 ;;      Temps:          0       2       0       0       0       0       0
  8924 ;;      Totals:         0      12       0       0       0       0       0
  8925 ;;Total ram usage:       12 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; Hardware stack levels required when called:    8
  8928 ;; This function calls:
  8929 ;;		_ADC_GetConversion
  8930 ;;		_FlashSampleWrite
  8931 ;;		___ftdiv
  8932 ;;		___ftmul
  8933 ;;		___fttol
  8934 ;;		___lwtoft
  8935 ;;		_pow
  8936 ;; This function is called by:
  8937 ;;		_main
  8938 ;; This function uses a non-reentrant model
  8939 ;;
  8940                           
  8941                           	psect	text46
  8942  0007B0                     __ptext46:
  8943                           	opt stack 0
  8944  0007B0                     _AdcConvert:
  8945                           	opt stack 22
  8946                           
  8947                           ;AdcApp.c: 61: uint16_t adcRes = 0;
  8948                           
  8949                           ;incstack = 0
  8950  0007B0  0E00               	movlw	0
  8951  0007B2  0100               	movlb	0	; () banked
  8952  0007B4  6FBD               	movwf	(AdcConvert@adcRes+1)& (0+255),b
  8953  0007B6  0E00               	movlw	0
  8954  0007B8  6FBC               	movwf	AdcConvert@adcRes& (0+255),b
  8955                           
  8956                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
  8957  0007BA  51D6               	movf	_adcSampleMode& (0+255),w,b
  8958  0007BC  A4D8               	btfss	status,2,c
  8959  0007BE  D073               	goto	l96
  8960                           
  8961                           ; BSR set to: 0
  8962                           ;AdcApp.c: 64: {
  8963                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
  8964  0007C0  0E00               	movlw	0
  8965  0007C2  6FBE               	movwf	AdcConvert@idx& (0+255),b
  8966  0007C4                     l6198:
  8967                           
  8968                           ; BSR set to: 0
  8969  0007C4  0E06               	movlw	6
  8970  0007C6  65BE               	cpfsgt	AdcConvert@idx& (0+255),b
  8971  0007C8  D001               	goto	l97
  8972  0007CA  0012               	return	
  8973  0007CC                     l97:
  8974                           
  8975                           ; BSR set to: 0
  8976                           ;AdcApp.c: 66: {
  8977                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
  8978                           
  8979                           ; BSR set to: 0
  8980  0007CC  51BE               	movf	AdcConvert@idx& (0+255),w,b
  8981  0007CE  0D01               	mullw	1
  8982  0007D0  0EDF               	movlw	low _channelArr
  8983  0007D2  24F3               	addwf	prodl,w,c
  8984  0007D4  6EF6               	movwf	tblptrl,c
  8985  0007D6  0E7A               	movlw	high _channelArr
  8986  0007D8  20F4               	addwfc	prodh,w,c
  8987  0007DA  6EF7               	movwf	tblptrh,c
  8988  0007DC                     	if	0	;There are less than 3 active tblptr bytes
  8989  0007DC                     	endif
  8990  0007DC  0008               	tblrd		*
  8991  0007DE  50F5               	movf	tablat,w,c
  8992  0007E0  EC20  F012         	call	_ADC_GetConversion
  8993  0007E4  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
  8994  0007E8  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
  8995                           
  8996                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
  8997  0007EC  0E00               	movlw	0
  8998  0007EE  0100               	movlb	0	; () banked
  8999  0007F0  6FA5               	movwf	pow@y& (0+255),b
  9000  0007F2  0E20               	movlw	32
  9001  0007F4  6FA6               	movwf	(pow@y+1)& (0+255),b
  9002  0007F6  0E41               	movlw	65
  9003  0007F8  6FA7               	movwf	(pow@y+2)& (0+255),b
  9004  0007FA  0E00               	movlw	0
  9005  0007FC  6FA2               	movwf	pow@x& (0+255),b
  9006  0007FE  0E00               	movlw	0
  9007  000800  6FA3               	movwf	(pow@x+1)& (0+255),b
  9008  000802  0E40               	movlw	64
  9009  000804  6FA4               	movwf	(pow@x+2)& (0+255),b
  9010  000806  EC4B  F006         	call	_pow	;wreg free
  9011  00080A  C0A2  F0B9         	movff	?_pow,_AdcConvert$2943
  9012  00080E  C0A3  F0BA         	movff	?_pow+1,_AdcConvert$2943+1
  9013  000812  C0A4  F0BB         	movff	?_pow+2,_AdcConvert$2943+2
  9014                           
  9015                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
  9016  000816  0EC0               	movlw	192
  9017  000818  0100               	movlb	0	; () banked
  9018  00081A  6F6C               	movwf	___ftmul@f2& (0+255),b
  9019  00081C  0E50               	movlw	80
  9020  00081E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  9021  000820  0E45               	movlw	69
  9022  000822  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  9023  000824  C0B9  F02C         	movff	_AdcConvert$2943,___ftdiv@f2
  9024  000828  C0BA  F02D         	movff	_AdcConvert$2943+1,___ftdiv@f2+1
  9025  00082C  C0BB  F02E         	movff	_AdcConvert$2943+2,___ftdiv@f2+2
  9026  000830  C0B5  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
  9027  000834  C0B6  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
  9028  000838  ECB2  F012         	call	___lwtoft	;wreg free
  9029  00083C  C020  F029         	movff	?___lwtoft,___ftdiv@f1
  9030  000840  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
  9031  000844  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
  9032  000848  EC0E  F009         	call	___ftdiv	;wreg free
  9033  00084C  C029  F069         	movff	?___ftdiv,___ftmul@f1
  9034  000850  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  9035  000854  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  9036  000858  EC93  F008         	call	___ftmul	;wreg free
  9037  00085C  C069  F078         	movff	?___ftmul,___fttol@f1
  9038  000860  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  9039  000864  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  9040  000868  EC17  F008         	call	___fttol	;wreg free
  9041  00086C  C078  F0BC         	movff	?___fttol,AdcConvert@adcRes
  9042  000870  C079  F0BD         	movff	?___fttol+1,AdcConvert@adcRes+1
  9043                           
  9044                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
  9045  000874  C0BC  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
  9046  000878  C0BD  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
  9047  00087C  0100               	movlb	0	; () banked
  9048  00087E  29BE               	incf	AdcConvert@idx& (0+255),w,b
  9049  000880  6E2F               	movwf	FlashSampleWrite@channelNum,c
  9050  000882  EC9A  F007         	call	_FlashSampleWrite	;wreg free
  9051                           
  9052                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
  9053  000886  0E03               	movlw	3
  9054  000888  0100               	movlb	0	; () banked
  9055  00088A  6FB4               	movwf	(??_AdcConvert+1)& (0+255),b
  9056  00088C  0E8A               	movlw	138
  9057  00088E  6FB3               	movwf	??_AdcConvert& (0+255),b
  9058  000890  0E55               	movlw	85
  9059  000892                     u6477:
  9060  000892  2EE8               	decfsz	wreg,f,c
  9061  000894  D7FE               	bra	u6477
  9062  000896  2FB3               	decfsz	??_AdcConvert& (0+255),f,b
  9063  000898  D7FC               	bra	u6477
  9064  00089A  2FB4               	decfsz	(??_AdcConvert+1)& (0+255),f,b
  9065  00089C  D7FA               	bra	u6477
  9066  00089E  D000               	nop2	
  9067  0008A0  0100               	movlb	0	; () banked
  9068  0008A2  2BBE               	incf	AdcConvert@idx& (0+255),f,b
  9069  0008A4  D78F               	goto	l6198
  9070  0008A6                     l96:
  9071                           
  9072                           ; BSR set to: 0
  9073                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
  9074                           
  9075                           ; BSR set to: 0
  9076  0008A6  05D6               	decf	_adcSampleMode& (0+255),w,b
  9077  0008A8  A4D8               	btfss	status,2,c
  9078  0008AA  0012               	return	
  9079                           
  9080                           ; BSR set to: 0
  9081                           ;AdcApp.c: 74: {
  9082                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
  9083  0008AC  51D5               	movf	_channel& (0+255),w,b
  9084  0008AE  0D01               	mullw	1
  9085  0008B0  0EDF               	movlw	low _channelArr
  9086  0008B2  24F3               	addwf	prodl,w,c
  9087  0008B4  6EF6               	movwf	tblptrl,c
  9088  0008B6  0E7A               	movlw	high _channelArr
  9089  0008B8  20F4               	addwfc	prodh,w,c
  9090  0008BA  6EF7               	movwf	tblptrh,c
  9091  0008BC                     	if	0	;There are less than 3 active tblptr bytes
  9092  0008BC                     	endif
  9093  0008BC  0008               	tblrd		*
  9094  0008BE  50F5               	movf	tablat,w,c
  9095  0008C0  EC20  F012         	call	_ADC_GetConversion
  9096  0008C4  C018  F0B7         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_258
  9097  0008C8  C019  F0B8         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_258+1
  9098                           
  9099                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
  9100  0008CC  0E00               	movlw	0
  9101  0008CE  0100               	movlb	0	; () banked
  9102  0008D0  6FA5               	movwf	pow@y& (0+255),b
  9103  0008D2  0E20               	movlw	32
  9104  0008D4  6FA6               	movwf	(pow@y+1)& (0+255),b
  9105  0008D6  0E41               	movlw	65
  9106  0008D8  6FA7               	movwf	(pow@y+2)& (0+255),b
  9107  0008DA  0E00               	movlw	0
  9108  0008DC  6FA2               	movwf	pow@x& (0+255),b
  9109  0008DE  0E00               	movlw	0
  9110  0008E0  6FA3               	movwf	(pow@x+1)& (0+255),b
  9111  0008E2  0E40               	movlw	64
  9112  0008E4  6FA4               	movwf	(pow@x+2)& (0+255),b
  9113  0008E6  EC4B  F006         	call	_pow	;wreg free
  9114  0008EA  C0A2  F0B9         	movff	?_pow,_AdcConvert$2943
  9115  0008EE  C0A3  F0BA         	movff	?_pow+1,_AdcConvert$2943+1
  9116  0008F2  C0A4  F0BB         	movff	?_pow+2,_AdcConvert$2943+2
  9117                           
  9118                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
  9119  0008F6  0EC0               	movlw	192
  9120  0008F8  0100               	movlb	0	; () banked
  9121  0008FA  6F6C               	movwf	___ftmul@f2& (0+255),b
  9122  0008FC  0E50               	movlw	80
  9123  0008FE  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  9124  000900  0E45               	movlw	69
  9125  000902  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  9126  000904  C0B9  F02C         	movff	_AdcConvert$2943,___ftdiv@f2
  9127  000908  C0BA  F02D         	movff	_AdcConvert$2943+1,___ftdiv@f2+1
  9128  00090C  C0BB  F02E         	movff	_AdcConvert$2943+2,___ftdiv@f2+2
  9129  000910  C0B7  F020         	movff	AdcConvert@_adcResult_258,___lwtoft@c
  9130  000914  C0B8  F021         	movff	AdcConvert@_adcResult_258+1,___lwtoft@c+1
  9131  000918  ECB2  F012         	call	___lwtoft	;wreg free
  9132  00091C  C020  F029         	movff	?___lwtoft,___ftdiv@f1
  9133  000920  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
  9134  000924  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
  9135  000928  EC0E  F009         	call	___ftdiv	;wreg free
  9136  00092C  C029  F069         	movff	?___ftdiv,___ftmul@f1
  9137  000930  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  9138  000934  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  9139  000938  EC93  F008         	call	___ftmul	;wreg free
  9140  00093C  C069  F078         	movff	?___ftmul,___fttol@f1
  9141  000940  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  9142  000944  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  9143  000948  EC17  F008         	call	___fttol	;wreg free
  9144  00094C  C078  F0BC         	movff	?___fttol,AdcConvert@adcRes
  9145  000950  C079  F0BD         	movff	?___fttol+1,AdcConvert@adcRes+1
  9146                           
  9147                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
  9148  000954  C0BC  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
  9149  000958  C0BD  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
  9150  00095C  0E01               	movlw	1
  9151  00095E  6E2F               	movwf	FlashSampleWrite@channelNum,c
  9152  000960  EC9A  F007         	call	_FlashSampleWrite	;wreg free
  9153  000964  0012               	return	
  9154  000966                     __end_of_AdcConvert:
  9155                           	opt stack 0
  9156                           tosu	equ	0xFFF
  9157                           tosh	equ	0xFFE
  9158                           tosl	equ	0xFFD
  9159                           pclath	equ	0xFFA
  9160                           tblptru	equ	0xFF8
  9161                           tblptrh	equ	0xFF7
  9162                           tblptrl	equ	0xFF6
  9163                           tablat	equ	0xFF5
  9164                           prodh	equ	0xFF4
  9165                           prodl	equ	0xFF3
  9166                           intcon	equ	0xFF2
  9167                           intcon2	equ	0xFF1
  9168                           postinc0	equ	0xFEE
  9169                           wreg	equ	0xFE8
  9170                           postdec1	equ	0xFE5
  9171                           fsr1l	equ	0xFE1
  9172                           indf2	equ	0xFDF
  9173                           postinc2	equ	0xFDE
  9174                           postdec2	equ	0xFDD
  9175                           fsr2h	equ	0xFDA
  9176                           fsr2l	equ	0xFD9
  9177                           status	equ	0xFD8
  9178                           
  9179 ;; *************** function _pow *****************
  9180 ;; Defined at:
  9181 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;  x               3   66[BANK0 ] void 
  9184 ;;  y               3   69[BANK0 ] void 
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;  yi              4   79[BANK0 ] unsigned long 
  9187 ;;  sign            1   78[BANK0 ] unsigned char 
  9188 ;; Return value:  Size  Location     Type
  9189 ;;                  3   66[BANK0 ] unsigned char 
  9190 ;; Registers used:
  9191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9192 ;; Tracked objects:
  9193 ;;		On entry : 0/0
  9194 ;;		On exit  : 0/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9197 ;;      Params:         0       6       0       0       0       0       0
  9198 ;;      Locals:         0      11       0       0       0       0       0
  9199 ;;      Temps:          0       0       0       0       0       0       0
  9200 ;;      Totals:         0      17       0       0       0       0       0
  9201 ;;Total ram usage:       17 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:    7
  9204 ;; This function calls:
  9205 ;;		___ftge
  9206 ;;		___ftmul
  9207 ;;		___ftneg
  9208 ;;		___fttol
  9209 ;;		___lltoft
  9210 ;;		_exp
  9211 ;;		_log
  9212 ;; This function is called by:
  9213 ;;		_AdcConvert
  9214 ;; This function uses a non-reentrant model
  9215 ;;
  9216                           
  9217                           	psect	text47
  9218  000C96                     __ptext47:
  9219                           	opt stack 0
  9220  000C96                     _pow:
  9221                           	opt stack 22
  9222                           
  9223                           ;incstack = 0
  9224  000C96  0E00               	movlw	0
  9225  000C98  0100               	movlb	0	; () banked
  9226  000C9A  6FAE               	movwf	pow@sign& (0+255),b
  9227                           
  9228                           ; BSR set to: 0
  9229  000C9C  51A2               	movf	pow@x& (0+255),w,b
  9230  000C9E  11A3               	iorwf	(pow@x+1)& (0+255),w,b
  9231  000CA0  11A4               	iorwf	(pow@x+2)& (0+255),w,b
  9232  000CA2  A4D8               	btfss	status,2,c
  9233  000CA4  D01D               	goto	l1709
  9234                           
  9235                           ; BSR set to: 0
  9236  000CA6  0E00               	movlw	0
  9237  000CA8  6E18               	movwf	___ftge@ff1,c
  9238  000CAA  0E00               	movlw	0
  9239  000CAC  6E19               	movwf	___ftge@ff1+1,c
  9240  000CAE  0E00               	movlw	0
  9241  000CB0  6E1A               	movwf	___ftge@ff1+2,c
  9242  000CB2  C0A5  F01B         	movff	pow@y,___ftge@ff2
  9243  000CB6  C0A6  F01C         	movff	pow@y+1,___ftge@ff2+1
  9244  000CBA  C0A7  F01D         	movff	pow@y+2,___ftge@ff2+2
  9245  000CBE  EC8F  F00D         	call	___ftge	;wreg free
  9246  000CC2  A0D8               	btfss	status,0,c
  9247  000CC4  D005               	goto	l1710
  9248  000CC6  0E00               	movlw	0
  9249  000CC8  0100               	movlb	0	; () banked
  9250  000CCA  6FCA               	movwf	(_errno+1)& (0+255),b
  9251  000CCC  0E21               	movlw	33
  9252  000CCE  6FC9               	movwf	_errno& (0+255),b
  9253  000CD0                     l1710:
  9254  000CD0  0E00               	movlw	0
  9255  000CD2  0100               	movlb	0	; () banked
  9256  000CD4  6FA2               	movwf	?_pow& (0+255),b
  9257  000CD6  0E00               	movlw	0
  9258  000CD8  6FA3               	movwf	(?_pow+1)& (0+255),b
  9259  000CDA  0E00               	movlw	0
  9260  000CDC  6FA4               	movwf	(?_pow+2)& (0+255),b
  9261                           
  9262                           ; BSR set to: 0
  9263  000CDE  0012               	return	
  9264  000CE0                     l1709:
  9265                           
  9266                           ; BSR set to: 0
  9267                           
  9268                           ; BSR set to: 0
  9269  000CE0  51A5               	movf	pow@y& (0+255),w,b
  9270  000CE2  11A6               	iorwf	(pow@y+1)& (0+255),w,b
  9271  000CE4  11A7               	iorwf	(pow@y+2)& (0+255),w,b
  9272  000CE6  A4D8               	btfss	status,2,c
  9273  000CE8  D007               	goto	l1712
  9274                           
  9275                           ; BSR set to: 0
  9276  000CEA  0E00               	movlw	0
  9277  000CEC  6FA2               	movwf	?_pow& (0+255),b
  9278  000CEE  0E80               	movlw	128
  9279  000CF0  6FA3               	movwf	(?_pow+1)& (0+255),b
  9280  000CF2  0E3F               	movlw	63
  9281  000CF4  6FA4               	movwf	(?_pow+2)& (0+255),b
  9282                           
  9283                           ; BSR set to: 0
  9284  000CF6  0012               	return	
  9285  000CF8                     l1712:
  9286                           
  9287                           ; BSR set to: 0
  9288                           
  9289                           ; BSR set to: 0
  9290  000CF8  AFA4               	btfss	(pow@x+2)& (0+255),7,b
  9291  000CFA  D041               	goto	l1713
  9292                           
  9293                           ; BSR set to: 0
  9294  000CFC  C0A5  F078         	movff	pow@y,___fttol@f1
  9295  000D00  C0A6  F079         	movff	pow@y+1,___fttol@f1+1
  9296  000D04  C0A7  F07A         	movff	pow@y+2,___fttol@f1+2
  9297  000D08  EC17  F008         	call	___fttol	;wreg free
  9298  000D0C  C078  F0AF         	movff	?___fttol,pow@yi
  9299  000D10  C079  F0B0         	movff	?___fttol+1,pow@yi+1
  9300  000D14  C07A  F0B1         	movff	?___fttol+2,pow@yi+2
  9301  000D18  C07B  F0B2         	movff	?___fttol+3,pow@yi+3
  9302  000D1C  C0AF  F020         	movff	pow@yi,___lltoft@c
  9303  000D20  C0B0  F021         	movff	pow@yi+1,___lltoft@c+1
  9304  000D24  C0B1  F022         	movff	pow@yi+2,___lltoft@c+2
  9305  000D28  C0B2  F023         	movff	pow@yi+3,___lltoft@c+3
  9306  000D2C  EC9F  F00F         	call	___lltoft	;wreg free
  9307  000D30  0100               	movlb	0	; () banked
  9308  000D32  51A5               	movf	pow@y& (0+255),w,b
  9309  000D34  1820               	xorwf	?___lltoft,w,c
  9310  000D36  E107               	bnz	u5920
  9311  000D38  51A6               	movf	(pow@y+1)& (0+255),w,b
  9312  000D3A  1821               	xorwf	?___lltoft+1,w,c
  9313  000D3C  E104               	bnz	u5920
  9314  000D3E  51A7               	movf	(pow@y+2)& (0+255),w,b
  9315  000D40  1822               	xorwf	?___lltoft+2,w,c
  9316  000D42  B4D8               	btfsc	status,2,c
  9317  000D44  D00B               	goto	l1714
  9318  000D46                     u5920:
  9319                           
  9320                           ; BSR set to: 0
  9321  000D46  0E00               	movlw	0
  9322  000D48  6FCA               	movwf	(_errno+1)& (0+255),b
  9323  000D4A  0E21               	movlw	33
  9324  000D4C  6FC9               	movwf	_errno& (0+255),b
  9325  000D4E  0E00               	movlw	0
  9326  000D50  6FA2               	movwf	?_pow& (0+255),b
  9327  000D52  0E00               	movlw	0
  9328  000D54  6FA3               	movwf	(?_pow+1)& (0+255),b
  9329  000D56  0E00               	movlw	0
  9330  000D58  6FA4               	movwf	(?_pow+2)& (0+255),b
  9331                           
  9332                           ; BSR set to: 0
  9333  000D5A  0012               	return	
  9334  000D5C                     l1714:
  9335                           
  9336                           ; BSR set to: 0
  9337                           
  9338                           ; BSR set to: 0
  9339  000D5C  51AF               	movf	pow@yi& (0+255),w,b
  9340  000D5E  0B01               	andlw	1
  9341  000D60  6FAE               	movwf	pow@sign& (0+255),b
  9342                           
  9343                           ; BSR set to: 0
  9344  000D62  C0A2  F018         	movff	pow@x,___ftneg@f1
  9345  000D66  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
  9346  000D6A  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
  9347  000D6E  ECA0  F012         	call	___ftneg	;wreg free
  9348  000D72  C018  F0A2         	movff	?___ftneg,pow@x
  9349  000D76  C019  F0A3         	movff	?___ftneg+1,pow@x+1
  9350  000D7A  C01A  F0A4         	movff	?___ftneg+2,pow@x+2
  9351  000D7E                     l1713:
  9352  000D7E  C0A2  F090         	movff	pow@x,log@x
  9353  000D82  C0A3  F091         	movff	pow@x+1,log@x+1
  9354  000D86  C0A4  F092         	movff	pow@x+2,log@x+2
  9355  000D8A  EC09  F007         	call	_log	;wreg free
  9356  000D8E  C090  F0A8         	movff	?_log,_pow$2944
  9357  000D92  C091  F0A9         	movff	?_log+1,_pow$2944+1
  9358  000D96  C092  F0AA         	movff	?_log+2,_pow$2944+2
  9359  000D9A  C0A8  F069         	movff	_pow$2944,___ftmul@f1
  9360  000D9E  C0A9  F06A         	movff	_pow$2944+1,___ftmul@f1+1
  9361  000DA2  C0AA  F06B         	movff	_pow$2944+2,___ftmul@f1+2
  9362  000DA6  C0A5  F06C         	movff	pow@y,___ftmul@f2
  9363  000DAA  C0A6  F06D         	movff	pow@y+1,___ftmul@f2+1
  9364  000DAE  C0A7  F06E         	movff	pow@y+2,___ftmul@f2+2
  9365  000DB2  EC93  F008         	call	___ftmul	;wreg free
  9366  000DB6  C069  F0AB         	movff	?___ftmul,_pow$2945
  9367  000DBA  C06A  F0AC         	movff	?___ftmul+1,_pow$2945+1
  9368  000DBE  C06B  F0AD         	movff	?___ftmul+2,_pow$2945+2
  9369  000DC2  C0AB  F099         	movff	_pow$2945,exp@x
  9370  000DC6  C0AC  F09A         	movff	_pow$2945+1,exp@x+1
  9371  000DCA  C0AD  F09B         	movff	_pow$2945+2,exp@x+2
  9372  000DCE  ECDF  F002         	call	_exp	;wreg free
  9373  000DD2  C099  F0A2         	movff	?_exp,pow@x
  9374  000DD6  C09A  F0A3         	movff	?_exp+1,pow@x+1
  9375  000DDA  C09B  F0A4         	movff	?_exp+2,pow@x+2
  9376  000DDE  0100               	movlb	0	; () banked
  9377  000DE0  51AE               	movf	pow@sign& (0+255),w,b
  9378  000DE2  B4D8               	btfsc	status,2,c
  9379  000DE4  D00F               	goto	l1715
  9380                           
  9381                           ; BSR set to: 0
  9382  000DE6  C0A2  F018         	movff	pow@x,___ftneg@f1
  9383  000DEA  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
  9384  000DEE  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
  9385  000DF2  ECA0  F012         	call	___ftneg	;wreg free
  9386  000DF6  C018  F0A2         	movff	?___ftneg,?_pow
  9387  000DFA  C019  F0A3         	movff	?___ftneg+1,?_pow+1
  9388  000DFE  C01A  F0A4         	movff	?___ftneg+2,?_pow+2
  9389  000E02  0012               	return	
  9390  000E04                     l1715:
  9391                           
  9392                           ; BSR set to: 0
  9393  000E04  C0A2  F0A2         	movff	pow@x,?_pow
  9394  000E08  C0A3  F0A3         	movff	pow@x+1,?_pow+1
  9395  000E0C  C0A4  F0A4         	movff	pow@x+2,?_pow+2
  9396  000E10  0012               	return		;funcret
  9397  000E12                     __end_of_pow:
  9398                           	opt stack 0
  9399                           tosu	equ	0xFFF
  9400                           tosh	equ	0xFFE
  9401                           tosl	equ	0xFFD
  9402                           pclath	equ	0xFFA
  9403                           tblptru	equ	0xFF8
  9404                           tblptrh	equ	0xFF7
  9405                           tblptrl	equ	0xFF6
  9406                           tablat	equ	0xFF5
  9407                           prodh	equ	0xFF4
  9408                           prodl	equ	0xFF3
  9409                           intcon	equ	0xFF2
  9410                           intcon2	equ	0xFF1
  9411                           postinc0	equ	0xFEE
  9412                           wreg	equ	0xFE8
  9413                           postdec1	equ	0xFE5
  9414                           fsr1l	equ	0xFE1
  9415                           indf2	equ	0xFDF
  9416                           postinc2	equ	0xFDE
  9417                           postdec2	equ	0xFDD
  9418                           fsr2h	equ	0xFDA
  9419                           fsr2l	equ	0xFD9
  9420                           status	equ	0xFD8
  9421                           
  9422 ;; *************** function _log *****************
  9423 ;; Defined at:
  9424 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;  x               3   48[BANK0 ] unsigned char 
  9427 ;; Auto vars:     Size  Location     Type
  9428 ;;  exponent        2   51[BANK0 ] int 
  9429 ;; Return value:  Size  Location     Type
  9430 ;;                  3   48[BANK0 ] int 
  9431 ;; Registers used:
  9432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9438 ;;      Params:         0       3       0       0       0       0       0
  9439 ;;      Locals:         0       2       0       0       0       0       0
  9440 ;;      Temps:          0       0       0       0       0       0       0
  9441 ;;      Totals:         0       5       0       0       0       0       0
  9442 ;;Total ram usage:        5 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:    6
  9445 ;; This function calls:
  9446 ;;		___awtoft
  9447 ;;		___ftadd
  9448 ;;		___ftmul
  9449 ;;		_eval_poly
  9450 ;;		_frexp
  9451 ;; This function is called by:
  9452 ;;		_pow
  9453 ;; This function uses a non-reentrant model
  9454 ;;
  9455                           
  9456                           	psect	text48
  9457  000E12                     __ptext48:
  9458                           	opt stack 0
  9459  000E12                     _log:
  9460                           	opt stack 22
  9461                           
  9462                           ;incstack = 0
  9463  000E12  0100               	movlb	0	; () banked
  9464  000E14  AF92               	btfss	(log@x+2)& (0+255),7,b
  9465  000E16  D00B               	goto	l1971
  9466                           
  9467                           ; BSR set to: 0
  9468  000E18  0E00               	movlw	0
  9469  000E1A  6FCA               	movwf	(_errno+1)& (0+255),b
  9470  000E1C  0E21               	movlw	33
  9471  000E1E  6FC9               	movwf	_errno& (0+255),b
  9472  000E20  0E00               	movlw	0
  9473  000E22  6F90               	movwf	?_log& (0+255),b
  9474  000E24  0E00               	movlw	0
  9475  000E26  6F91               	movwf	(?_log+1)& (0+255),b
  9476  000E28  0E00               	movlw	0
  9477  000E2A  6F92               	movwf	(?_log+2)& (0+255),b
  9478                           
  9479                           ; BSR set to: 0
  9480  000E2C  0012               	return	
  9481  000E2E                     l1971:
  9482                           
  9483                           ; BSR set to: 0
  9484                           
  9485                           ; BSR set to: 0
  9486  000E2E  5190               	movf	log@x& (0+255),w,b
  9487  000E30  1191               	iorwf	(log@x+1)& (0+255),w,b
  9488  000E32  1192               	iorwf	(log@x+2)& (0+255),w,b
  9489  000E34  A4D8               	btfss	status,2,c
  9490  000E36  D00B               	goto	l1973
  9491                           
  9492                           ; BSR set to: 0
  9493  000E38  0E00               	movlw	0
  9494  000E3A  6FCA               	movwf	(_errno+1)& (0+255),b
  9495  000E3C  0E22               	movlw	34
  9496  000E3E  6FC9               	movwf	_errno& (0+255),b
  9497  000E40  0E00               	movlw	0
  9498  000E42  6F90               	movwf	?_log& (0+255),b
  9499  000E44  0E00               	movlw	0
  9500  000E46  6F91               	movwf	(?_log+1)& (0+255),b
  9501  000E48  0E00               	movlw	0
  9502  000E4A  6F92               	movwf	(?_log+2)& (0+255),b
  9503                           
  9504                           ; BSR set to: 0
  9505  000E4C  0012               	return	
  9506  000E4E                     l1973:
  9507                           
  9508                           ; BSR set to: 0
  9509                           
  9510                           ; BSR set to: 0
  9511  000E4E  0E00               	movlw	0
  9512  000E50  6F6C               	movwf	___ftmul@f2& (0+255),b
  9513  000E52  0E00               	movlw	0
  9514  000E54  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  9515  000E56  0E40               	movlw	64
  9516  000E58  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  9517  000E5A  0E93               	movlw	low log@exponent
  9518  000E5C  6E1B               	movwf	frexp@eptr,c
  9519  000E5E  0E00               	movlw	high log@exponent
  9520  000E60  6E1C               	movwf	frexp@eptr+1,c
  9521  000E62  C090  F018         	movff	log@x,frexp@value
  9522  000E66  C091  F019         	movff	log@x+1,frexp@value+1
  9523  000E6A  C092  F01A         	movff	log@x+2,frexp@value+2
  9524  000E6E  EC47  F00D         	call	_frexp	;wreg free
  9525  000E72  C018  F069         	movff	?_frexp,___ftmul@f1
  9526  000E76  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
  9527  000E7A  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
  9528  000E7E  EC93  F008         	call	___ftmul	;wreg free
  9529  000E82  C069  F078         	movff	?___ftmul,___ftadd@f1
  9530  000E86  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
  9531  000E8A  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
  9532  000E8E  0E00               	movlw	0
  9533  000E90  0100               	movlb	0	; () banked
  9534  000E92  6F7B               	movwf	___ftadd@f2& (0+255),b
  9535  000E94  0E80               	movlw	128
  9536  000E96  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
  9537  000E98  0EBF               	movlw	191
  9538  000E9A  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
  9539  000E9C  ECB3  F004         	call	___ftadd	;wreg free
  9540  000EA0  C078  F090         	movff	?___ftadd,log@x
  9541  000EA4  C079  F091         	movff	?___ftadd+1,log@x+1
  9542  000EA8  C07A  F092         	movff	?___ftadd+2,log@x+2
  9543  000EAC  0100               	movlb	0	; () banked
  9544  000EAE  0793               	decf	log@exponent& (0+255),f,b
  9545  000EB0  A0D8               	btfss	status,0,c
  9546  000EB2  0794               	decf	(log@exponent+1)& (0+255),f,b
  9547                           
  9548                           ; BSR set to: 0
  9549  000EB4  C090  F084         	movff	log@x,eval_poly@x
  9550  000EB8  C091  F085         	movff	log@x+1,eval_poly@x+1
  9551  000EBC  C092  F086         	movff	log@x+2,eval_poly@x+2
  9552  000EC0  0E04               	movlw	low log@coeff
  9553  000EC2  6F87               	movwf	eval_poly@d& (0+255),b
  9554  000EC4  0E7B               	movlw	high log@coeff
  9555  000EC6  6F88               	movwf	(eval_poly@d+1)& (0+255),b
  9556  000EC8  0E00               	movlw	0
  9557  000ECA  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
  9558  000ECC  0E08               	movlw	8
  9559  000ECE  6F89               	movwf	eval_poly@n& (0+255),b
  9560  000ED0  EC60  F00A         	call	_eval_poly	;wreg free
  9561  000ED4  C084  F090         	movff	?_eval_poly,log@x
  9562  000ED8  C085  F091         	movff	?_eval_poly+1,log@x+1
  9563  000EDC  C086  F092         	movff	?_eval_poly+2,log@x+2
  9564  000EE0  0E72               	movlw	114
  9565  000EE2  0100               	movlb	0	; () banked
  9566  000EE4  6F6C               	movwf	___ftmul@f2& (0+255),b
  9567  000EE6  0E31               	movlw	49
  9568  000EE8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  9569  000EEA  0E3F               	movlw	63
  9570  000EEC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  9571  000EEE  C093  F020         	movff	log@exponent,___awtoft@c
  9572  000EF2  C094  F021         	movff	log@exponent+1,___awtoft@c+1
  9573  000EF6  EC7F  F011         	call	___awtoft	;wreg free
  9574  000EFA  C020  F069         	movff	?___awtoft,___ftmul@f1
  9575  000EFE  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
  9576  000F02  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
  9577  000F06  EC93  F008         	call	___ftmul	;wreg free
  9578  000F0A  C069  F078         	movff	?___ftmul,___ftadd@f1
  9579  000F0E  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
  9580  000F12  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
  9581  000F16  C090  F07B         	movff	log@x,___ftadd@f2
  9582  000F1A  C091  F07C         	movff	log@x+1,___ftadd@f2+1
  9583  000F1E  C092  F07D         	movff	log@x+2,___ftadd@f2+2
  9584  000F22  ECB3  F004         	call	___ftadd	;wreg free
  9585  000F26  C078  F090         	movff	?___ftadd,?_log
  9586  000F2A  C079  F091         	movff	?___ftadd+1,?_log+1
  9587  000F2E  C07A  F092         	movff	?___ftadd+2,?_log+2
  9588  000F32  0012               	return	
  9589  000F34                     __end_of_log:
  9590                           	opt stack 0
  9591                           tosu	equ	0xFFF
  9592                           tosh	equ	0xFFE
  9593                           tosl	equ	0xFFD
  9594                           pclath	equ	0xFFA
  9595                           tblptru	equ	0xFF8
  9596                           tblptrh	equ	0xFF7
  9597                           tblptrl	equ	0xFF6
  9598                           tablat	equ	0xFF5
  9599                           prodh	equ	0xFF4
  9600                           prodl	equ	0xFF3
  9601                           intcon	equ	0xFF2
  9602                           intcon2	equ	0xFF1
  9603                           postinc0	equ	0xFEE
  9604                           wreg	equ	0xFE8
  9605                           postdec1	equ	0xFE5
  9606                           fsr1l	equ	0xFE1
  9607                           indf2	equ	0xFDF
  9608                           postinc2	equ	0xFDE
  9609                           postdec2	equ	0xFDD
  9610                           fsr2h	equ	0xFDA
  9611                           fsr2l	equ	0xFD9
  9612                           status	equ	0xFD8
  9613                           
  9614 ;; *************** function _exp *****************
  9615 ;; Defined at:
  9616 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;  x               3   57[BANK0 ] int 
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;  exponent        2   63[BANK0 ] int 
  9621 ;;  sign            1   65[BANK0 ] unsigned char 
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  3   57[BANK0 ] unsigned char 
  9624 ;; Registers used:
  9625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9631 ;;      Params:         0       3       0       0       0       0       0
  9632 ;;      Locals:         0       6       0       0       0       0       0
  9633 ;;      Temps:          0       0       0       0       0       0       0
  9634 ;;      Totals:         0       9       0       0       0       0       0
  9635 ;;Total ram usage:        9 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:    6
  9638 ;; This function calls:
  9639 ;;		___awtoft
  9640 ;;		___ftdiv
  9641 ;;		___ftge
  9642 ;;		___ftmul
  9643 ;;		___ftneg
  9644 ;;		___ftsub
  9645 ;;		___fttol
  9646 ;;		_eval_poly
  9647 ;;		_floor
  9648 ;;		_ldexp
  9649 ;; This function is called by:
  9650 ;;		_pow
  9651 ;; This function uses a non-reentrant model
  9652 ;;
  9653                           
  9654                           	psect	text49
  9655  0005BE                     __ptext49:
  9656                           	opt stack 0
  9657  0005BE                     _exp:
  9658                           	opt stack 22
  9659                           
  9660                           ;incstack = 0
  9661  0005BE  0100               	movlb	0	; () banked
  9662  0005C0  5199               	movf	exp@x& (0+255),w,b
  9663  0005C2  119A               	iorwf	(exp@x+1)& (0+255),w,b
  9664  0005C4  119B               	iorwf	(exp@x+2)& (0+255),w,b
  9665  0005C6  A4D8               	btfss	status,2,c
  9666  0005C8  D007               	goto	l1907
  9667                           
  9668                           ; BSR set to: 0
  9669  0005CA  0E00               	movlw	0
  9670  0005CC  6F99               	movwf	?_exp& (0+255),b
  9671  0005CE  0E80               	movlw	128
  9672  0005D0  6F9A               	movwf	(?_exp+1)& (0+255),b
  9673  0005D2  0E3F               	movlw	63
  9674  0005D4  6F9B               	movwf	(?_exp+2)& (0+255),b
  9675                           
  9676                           ; BSR set to: 0
  9677  0005D6  0012               	return	
  9678  0005D8                     l1907:
  9679                           
  9680                           ; BSR set to: 0
  9681                           
  9682                           ; BSR set to: 0
  9683  0005D8  0E72               	movlw	114
  9684  0005DA  6E18               	movwf	___ftge@ff1,c
  9685  0005DC  0E31               	movlw	49
  9686  0005DE  6E19               	movwf	___ftge@ff1+1,c
  9687  0005E0  0E44               	movlw	68
  9688  0005E2  6E1A               	movwf	___ftge@ff1+2,c
  9689  0005E4  C099  F01B         	movff	exp@x,___ftge@ff2
  9690  0005E8  C09A  F01C         	movff	exp@x+1,___ftge@ff2+1
  9691  0005EC  C09B  F01D         	movff	exp@x+2,___ftge@ff2+2
  9692  0005F0  EC8F  F00D         	call	___ftge	;wreg free
  9693  0005F4  B0D8               	btfsc	status,0,c
  9694  0005F6  D00C               	goto	l1909
  9695  0005F8  0E00               	movlw	0
  9696  0005FA  0100               	movlb	0	; () banked
  9697  0005FC  6FCA               	movwf	(_errno+1)& (0+255),b
  9698  0005FE  0E22               	movlw	34
  9699  000600  6FC9               	movwf	_errno& (0+255),b
  9700  000602  0EFF               	movlw	255
  9701  000604  6F99               	movwf	?_exp& (0+255),b
  9702  000606  0E7F               	movlw	127
  9703  000608  6F9A               	movwf	(?_exp+1)& (0+255),b
  9704  00060A  0E7F               	movlw	127
  9705  00060C  6F9B               	movwf	(?_exp+2)& (0+255),b
  9706                           
  9707                           ; BSR set to: 0
  9708  00060E  0012               	return	
  9709  000610                     l1909:
  9710                           
  9711                           ; BSR set to: 0
  9712  000610  C099  F018         	movff	exp@x,___ftge@ff1
  9713  000614  C09A  F019         	movff	exp@x+1,___ftge@ff1+1
  9714  000618  C09B  F01A         	movff	exp@x+2,___ftge@ff1+2
  9715  00061C  0E49               	movlw	73
  9716  00061E  6E1B               	movwf	___ftge@ff2,c
  9717  000620  0E3A               	movlw	58
  9718  000622  6E1C               	movwf	___ftge@ff2+1,c
  9719  000624  0EC4               	movlw	196
  9720  000626  6E1D               	movwf	___ftge@ff2+2,c
  9721  000628  EC8F  F00D         	call	___ftge	;wreg free
  9722  00062C  B0D8               	btfsc	status,0,c
  9723  00062E  D00C               	goto	l1910
  9724  000630  0E00               	movlw	0
  9725  000632  0100               	movlb	0	; () banked
  9726  000634  6FCA               	movwf	(_errno+1)& (0+255),b
  9727  000636  0E22               	movlw	34
  9728  000638  6FC9               	movwf	_errno& (0+255),b
  9729  00063A  0E00               	movlw	0
  9730  00063C  6F99               	movwf	?_exp& (0+255),b
  9731  00063E  0E00               	movlw	0
  9732  000640  6F9A               	movwf	(?_exp+1)& (0+255),b
  9733  000642  0E00               	movlw	0
  9734  000644  6F9B               	movwf	(?_exp+2)& (0+255),b
  9735                           
  9736                           ; BSR set to: 0
  9737  000646  0012               	return	
  9738  000648                     l1910:
  9739                           
  9740                           ; BSR set to: 0
  9741  000648  0100               	movlb	0	; () banked
  9742  00064A  AF9B               	btfss	(exp@x+2)& (0+255),7,b
  9743  00064C  D002               	goto	u5830
  9744  00064E  0E01               	movlw	1
  9745  000650  D001               	goto	u5840
  9746  000652                     u5830:
  9747  000652  0E00               	movlw	0
  9748  000654                     u5840:
  9749  000654  6FA1               	movwf	exp@sign& (0+255),b
  9750                           
  9751                           ; BSR set to: 0
  9752  000656  51A1               	movf	exp@sign& (0+255),w,b
  9753  000658  B4D8               	btfsc	status,2,c
  9754  00065A  D00E               	goto	l1911
  9755                           
  9756                           ; BSR set to: 0
  9757  00065C  C099  F018         	movff	exp@x,___ftneg@f1
  9758  000660  C09A  F019         	movff	exp@x+1,___ftneg@f1+1
  9759  000664  C09B  F01A         	movff	exp@x+2,___ftneg@f1+2
  9760  000668  ECA0  F012         	call	___ftneg	;wreg free
  9761  00066C  C018  F099         	movff	?___ftneg,exp@x
  9762  000670  C019  F09A         	movff	?___ftneg+1,exp@x+1
  9763  000674  C01A  F09B         	movff	?___ftneg+2,exp@x+2
  9764  000678                     l1911:
  9765  000678  C099  F069         	movff	exp@x,___ftmul@f1
  9766  00067C  C09A  F06A         	movff	exp@x+1,___ftmul@f1+1
  9767  000680  C09B  F06B         	movff	exp@x+2,___ftmul@f1+2
  9768  000684  0EAA               	movlw	170
  9769  000686  0100               	movlb	0	; () banked
  9770  000688  6F6C               	movwf	___ftmul@f2& (0+255),b
  9771  00068A  0EB8               	movlw	184
  9772  00068C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  9773  00068E  0E3F               	movlw	63
  9774  000690  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  9775  000692  EC93  F008         	call	___ftmul	;wreg free
  9776  000696  C069  F099         	movff	?___ftmul,exp@x
  9777  00069A  C06A  F09A         	movff	?___ftmul+1,exp@x+1
  9778  00069E  C06B  F09B         	movff	?___ftmul+2,exp@x+2
  9779  0006A2  C099  F091         	movff	exp@x,floor@x
  9780  0006A6  C09A  F092         	movff	exp@x+1,floor@x+1
  9781  0006AA  C09B  F093         	movff	exp@x+2,floor@x+2
  9782  0006AE  EC82  F009         	call	_floor	;wreg free
  9783  0006B2  C091  F09C         	movff	?_floor,_exp$2946
  9784  0006B6  C092  F09D         	movff	?_floor+1,_exp$2946+1
  9785  0006BA  C093  F09E         	movff	?_floor+2,_exp$2946+2
  9786  0006BE  C09C  F078         	movff	_exp$2946,___fttol@f1
  9787  0006C2  C09D  F079         	movff	_exp$2946+1,___fttol@f1+1
  9788  0006C6  C09E  F07A         	movff	_exp$2946+2,___fttol@f1+2
  9789  0006CA  EC17  F008         	call	___fttol	;wreg free
  9790  0006CE  C078  F09F         	movff	?___fttol,exp@exponent
  9791  0006D2  C079  F0A0         	movff	?___fttol+1,exp@exponent+1
  9792  0006D6  C099  F084         	movff	exp@x,___ftsub@f1
  9793  0006DA  C09A  F085         	movff	exp@x+1,___ftsub@f1+1
  9794  0006DE  C09B  F086         	movff	exp@x+2,___ftsub@f1+2
  9795  0006E2  C09F  F020         	movff	exp@exponent,___awtoft@c
  9796  0006E6  C0A0  F021         	movff	exp@exponent+1,___awtoft@c+1
  9797  0006EA  EC7F  F011         	call	___awtoft	;wreg free
  9798  0006EE  C020  F087         	movff	?___awtoft,___ftsub@f2
  9799  0006F2  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
  9800  0006F6  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
  9801  0006FA  ECE3  F010         	call	___ftsub	;wreg free
  9802  0006FE  C084  F099         	movff	?___ftsub,exp@x
  9803  000702  C085  F09A         	movff	?___ftsub+1,exp@x+1
  9804  000706  C086  F09B         	movff	?___ftsub+2,exp@x+2
  9805  00070A  C099  F084         	movff	exp@x,eval_poly@x
  9806  00070E  C09A  F085         	movff	exp@x+1,eval_poly@x+1
  9807  000712  C09B  F086         	movff	exp@x+2,eval_poly@x+2
  9808  000716  0EE6               	movlw	low exp@coeff
  9809  000718  0100               	movlb	0	; () banked
  9810  00071A  6F87               	movwf	eval_poly@d& (0+255),b
  9811  00071C  0E7A               	movlw	high exp@coeff
  9812  00071E  6F88               	movwf	(eval_poly@d+1)& (0+255),b
  9813  000720  0E00               	movlw	0
  9814  000722  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
  9815  000724  0E09               	movlw	9
  9816  000726  6F89               	movwf	eval_poly@n& (0+255),b
  9817  000728  EC60  F00A         	call	_eval_poly	;wreg free
  9818  00072C  C084  F090         	movff	?_eval_poly,ldexp@value
  9819  000730  C085  F091         	movff	?_eval_poly+1,ldexp@value+1
  9820  000734  C086  F092         	movff	?_eval_poly+2,ldexp@value+2
  9821  000738  C09F  F093         	movff	exp@exponent,ldexp@newexp
  9822  00073C  C0A0  F094         	movff	exp@exponent+1,ldexp@newexp+1
  9823  000740  EC33  F00B         	call	_ldexp	;wreg free
  9824  000744  C090  F099         	movff	?_ldexp,exp@x
  9825  000748  C091  F09A         	movff	?_ldexp+1,exp@x+1
  9826  00074C  C092  F09B         	movff	?_ldexp+2,exp@x+2
  9827  000750  0100               	movlb	0	; () banked
  9828  000752  51A1               	movf	exp@sign& (0+255),w,b
  9829  000754  B4D8               	btfsc	status,2,c
  9830  000756  D025               	goto	l1912
  9831                           
  9832                           ; BSR set to: 0
  9833  000758  2999               	incf	exp@x& (0+255),w,b
  9834  00075A  E10E               	bnz	l6120
  9835  00075C  0E7F               	movlw	127
  9836  00075E  199A               	xorwf	(exp@x+1)& (0+255),w,b
  9837  000760  E10B               	bnz	l6120
  9838  000762  0E7F               	movlw	127
  9839  000764  199B               	xorwf	(exp@x+2)& (0+255),w,b
  9840  000766  A4D8               	btfss	status,2,c
  9841  000768  D007               	goto	l1913
  9842                           
  9843                           ; BSR set to: 0
  9844  00076A  0E00               	movlw	0
  9845  00076C  6F99               	movwf	?_exp& (0+255),b
  9846  00076E  0E00               	movlw	0
  9847  000770  6F9A               	movwf	(?_exp+1)& (0+255),b
  9848  000772  0E00               	movlw	0
  9849  000774  6F9B               	movwf	(?_exp+2)& (0+255),b
  9850                           
  9851                           ; BSR set to: 0
  9852  000776  0012               	return	
  9853  000778                     l1913:
  9854  000778                     l6120:
  9855                           
  9856                           ; BSR set to: 0
  9857  000778  0E00               	movlw	0
  9858  00077A  6E29               	movwf	___ftdiv@f1,c
  9859  00077C  0E80               	movlw	128
  9860  00077E  6E2A               	movwf	___ftdiv@f1+1,c
  9861  000780  0E3F               	movlw	63
  9862  000782  6E2B               	movwf	___ftdiv@f1+2,c
  9863  000784  C099  F02C         	movff	exp@x,___ftdiv@f2
  9864  000788  C09A  F02D         	movff	exp@x+1,___ftdiv@f2+1
  9865  00078C  C09B  F02E         	movff	exp@x+2,___ftdiv@f2+2
  9866  000790  EC0E  F009         	call	___ftdiv	;wreg free
  9867  000794  C029  F099         	movff	?___ftdiv,?_exp
  9868  000798  C02A  F09A         	movff	?___ftdiv+1,?_exp+1
  9869  00079C  C02B  F09B         	movff	?___ftdiv+2,?_exp+2
  9870  0007A0  0012               	return	
  9871  0007A2                     l1912:
  9872                           
  9873                           ; BSR set to: 0
  9874  0007A2  C099  F099         	movff	exp@x,?_exp
  9875  0007A6  C09A  F09A         	movff	exp@x+1,?_exp+1
  9876  0007AA  C09B  F09B         	movff	exp@x+2,?_exp+2
  9877  0007AE  0012               	return		;funcret
  9878  0007B0                     __end_of_exp:
  9879                           	opt stack 0
  9880                           tosu	equ	0xFFF
  9881                           tosh	equ	0xFFE
  9882                           tosl	equ	0xFFD
  9883                           pclath	equ	0xFFA
  9884                           tblptru	equ	0xFF8
  9885                           tblptrh	equ	0xFF7
  9886                           tblptrl	equ	0xFF6
  9887                           tablat	equ	0xFF5
  9888                           prodh	equ	0xFF4
  9889                           prodl	equ	0xFF3
  9890                           intcon	equ	0xFF2
  9891                           intcon2	equ	0xFF1
  9892                           postinc0	equ	0xFEE
  9893                           wreg	equ	0xFE8
  9894                           postdec1	equ	0xFE5
  9895                           fsr1l	equ	0xFE1
  9896                           indf2	equ	0xFDF
  9897                           postinc2	equ	0xFDE
  9898                           postdec2	equ	0xFDD
  9899                           fsr2h	equ	0xFDA
  9900                           fsr2l	equ	0xFD9
  9901                           status	equ	0xFD8
  9902                           
  9903 ;; *************** function _ldexp *****************
  9904 ;; Defined at:
  9905 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  9906 ;; Parameters:    Size  Location     Type
  9907 ;;  value           3   48[BANK0 ] unsigned char 
  9908 ;;  newexp          2   51[BANK0 ] int 
  9909 ;; Auto vars:     Size  Location     Type
  9910 ;;		None
  9911 ;; Return value:  Size  Location     Type
  9912 ;;                  3   48[BANK0 ] int 
  9913 ;; Registers used:
  9914 ;;		wreg, status,2, status,0
  9915 ;; Tracked objects:
  9916 ;;		On entry : 0/0
  9917 ;;		On exit  : 0/0
  9918 ;;		Unchanged: 0/0
  9919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9920 ;;      Params:         0       5       0       0       0       0       0
  9921 ;;      Locals:         0       0       0       0       0       0       0
  9922 ;;      Temps:          0       2       0       0       0       0       0
  9923 ;;      Totals:         0       7       0       0       0       0       0
  9924 ;;Total ram usage:        7 bytes
  9925 ;; Hardware stack levels used:    1
  9926 ;; Hardware stack levels required when called:    3
  9927 ;; This function calls:
  9928 ;;		Nothing
  9929 ;; This function is called by:
  9930 ;;		_exp
  9931 ;; This function uses a non-reentrant model
  9932 ;;
  9933                           
  9934                           	psect	text50
  9935  001666                     __ptext50:
  9936                           	opt stack 0
  9937  001666                     _ldexp:
  9938                           	opt stack 24
  9939                           
  9940                           ;incstack = 0
  9941  001666  0100               	movlb	0	; () banked
  9942  001668  5190               	movf	ldexp@value& (0+255),w,b
  9943  00166A  1191               	iorwf	(ldexp@value+1)& (0+255),w,b
  9944  00166C  1192               	iorwf	(ldexp@value+2)& (0+255),w,b
  9945  00166E  A4D8               	btfss	status,2,c
  9946  001670  D007               	goto	l1931
  9947                           
  9948                           ; BSR set to: 0
  9949  001672  0E00               	movlw	0
  9950  001674  6F90               	movwf	?_ldexp& (0+255),b
  9951  001676  0E00               	movlw	0
  9952  001678  6F91               	movwf	(?_ldexp+1)& (0+255),b
  9953  00167A  0E00               	movlw	0
  9954  00167C  6F92               	movwf	(?_ldexp+2)& (0+255),b
  9955                           
  9956                           ; BSR set to: 0
  9957  00167E  0012               	return	
  9958  001680                     l1931:
  9959                           
  9960                           ; BSR set to: 0
  9961                           
  9962                           ; BSR set to: 0
  9963  001680  5192               	movf	(ldexp@value+2)& (0+255),w,b
  9964  001682  0B7F               	andlw	127
  9965  001684  6F95               	movwf	??_ldexp& (0+255),b
  9966  001686  6B96               	clrf	(??_ldexp+1)& (0+255),b
  9967  001688  90D8               	bcf	status,0,c
  9968  00168A  3795               	rlcf	??_ldexp& (0+255),f,b
  9969  00168C  3796               	rlcf	(??_ldexp+1)& (0+255),f,b
  9970  00168E  5195               	movf	??_ldexp& (0+255),w,b
  9971  001690  2793               	addwf	ldexp@newexp& (0+255),f,b
  9972  001692  5196               	movf	(??_ldexp+1)& (0+255),w,b
  9973  001694  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  9974  001696  AF91               	btfss	(ldexp@value+1)& (0+255),7,b
  9975  001698  D003               	goto	u3590
  9976  00169A  6B95               	clrf	??_ldexp& (0+255),b
  9977  00169C  2B95               	incf	??_ldexp& (0+255),f,b
  9978  00169E  D002               	goto	u3598
  9979  0016A0                     u3590:
  9980  0016A0  0100               	movlb	0	; () banked
  9981  0016A2  6B95               	clrf	??_ldexp& (0+255),b
  9982  0016A4                     u3598:
  9983  0016A4  5195               	movf	??_ldexp& (0+255),w,b
  9984  0016A6  2793               	addwf	ldexp@newexp& (0+255),f,b
  9985  0016A8  0E00               	movlw	0
  9986  0016AA  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  9987  0016AC  AF94               	btfss	(ldexp@newexp+1)& (0+255),7,b
  9988  0016AE  D00B               	goto	l1933
  9989                           
  9990                           ; BSR set to: 0
  9991  0016B0  0E00               	movlw	0
  9992  0016B2  6FCA               	movwf	(_errno+1)& (0+255),b
  9993  0016B4  0E22               	movlw	34
  9994  0016B6  6FC9               	movwf	_errno& (0+255),b
  9995  0016B8  0E00               	movlw	0
  9996  0016BA  6F90               	movwf	?_ldexp& (0+255),b
  9997  0016BC  0E00               	movlw	0
  9998  0016BE  6F91               	movwf	(?_ldexp+1)& (0+255),b
  9999  0016C0  0E00               	movlw	0
 10000  0016C2                     L3:
 10001  0016C2  6F92               	movwf	(?_ldexp+2)& (0+255),b
 10002                           
 10003                           ; BSR set to: 0
 10004  0016C4  0012               	return	
 10005  0016C6                     l1933:
 10006                           
 10007                           ; BSR set to: 0
 10008                           
 10009                           ; BSR set to: 0
 10010  0016C6  BF94               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 10011  0016C8  D015               	goto	l1935
 10012  0016CA  0594               	decf	(ldexp@newexp+1)& (0+255),w,b
 10013  0016CC  A0D8               	btfss	status,0,c
 10014  0016CE  D012               	goto	l1935
 10015                           
 10016                           ; BSR set to: 0
 10017  0016D0  0E00               	movlw	0
 10018  0016D2  6FCA               	movwf	(_errno+1)& (0+255),b
 10019  0016D4  0E22               	movlw	34
 10020  0016D6  6FC9               	movwf	_errno& (0+255),b
 10021                           
 10022                           ; BSR set to: 0
 10023  0016D8  AF92               	btfss	(ldexp@value+2)& (0+255),7,b
 10024  0016DA  D006               	goto	l1936
 10025                           
 10026                           ; BSR set to: 0
 10027  0016DC  0EFF               	movlw	255
 10028  0016DE  6F90               	movwf	?_ldexp& (0+255),b
 10029  0016E0  0E7F               	movlw	127
 10030  0016E2  6F91               	movwf	(?_ldexp+1)& (0+255),b
 10031  0016E4  0EFF               	movlw	255
 10032  0016E6  D7ED               	goto	L3
 10033  0016E8                     l1936:
 10034                           
 10035                           ; BSR set to: 0
 10036                           
 10037                           ; BSR set to: 0
 10038  0016E8  0EFF               	movlw	255
 10039  0016EA  6F90               	movwf	?_ldexp& (0+255),b
 10040  0016EC  0E7F               	movlw	127
 10041  0016EE  6F91               	movwf	(?_ldexp+1)& (0+255),b
 10042  0016F0  0E7F               	movlw	127
 10043  0016F2  D7E7               	goto	L3
 10044  0016F4                     l1935:
 10045                           
 10046                           ; BSR set to: 0
 10047                           
 10048                           ; BSR set to: 0
 10049  0016F4  3594               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 10050  0016F6  3194               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 10051  0016F8  6F96               	movwf	(??_ldexp+1)& (0+255),b
 10052  0016FA  3193               	rrcf	ldexp@newexp& (0+255),w,b
 10053  0016FC  6F95               	movwf	??_ldexp& (0+255),b
 10054  0016FE  5192               	movf	(ldexp@value+2)& (0+255),w,b
 10055  001700  1995               	xorwf	??_ldexp& (0+255),w,b
 10056  001702  0B80               	andlw	-128
 10057  001704  1995               	xorwf	??_ldexp& (0+255),w,b
 10058  001706  6F92               	movwf	(ldexp@value+2)& (0+255),b
 10059  001708  C093  F095         	movff	ldexp@newexp,??_ldexp
 10060  00170C  0E01               	movlw	1
 10061  00170E  1795               	andwf	??_ldexp& (0+255),f,b
 10062  001710  3395               	rrcf	??_ldexp& (0+255),f,b
 10063  001712  3395               	rrcf	??_ldexp& (0+255),f,b
 10064  001714  5191               	movf	(ldexp@value+1)& (0+255),w,b
 10065  001716  1995               	xorwf	??_ldexp& (0+255),w,b
 10066  001718  0B7F               	andlw	-129
 10067  00171A  1995               	xorwf	??_ldexp& (0+255),w,b
 10068  00171C  6F91               	movwf	(ldexp@value+1)& (0+255),b
 10069                           
 10070                           ; BSR set to: 0
 10071                           
 10072                           ; BSR set to: 0
 10073                           
 10074                           ; BSR set to: 0
 10075  00171E  C090  F090         	movff	ldexp@value,?_ldexp
 10076  001722  C091  F091         	movff	ldexp@value+1,?_ldexp+1
 10077  001726  C092  F092         	movff	ldexp@value+2,?_ldexp+2
 10078  00172A  0012               	return	
 10079  00172C                     __end_of_ldexp:
 10080                           	opt stack 0
 10081                           tosu	equ	0xFFF
 10082                           tosh	equ	0xFFE
 10083                           tosl	equ	0xFFD
 10084                           pclath	equ	0xFFA
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           intcon	equ	0xFF2
 10092                           intcon2	equ	0xFF1
 10093                           postinc0	equ	0xFEE
 10094                           wreg	equ	0xFE8
 10095                           postdec1	equ	0xFE5
 10096                           fsr1l	equ	0xFE1
 10097                           indf2	equ	0xFDF
 10098                           postinc2	equ	0xFDE
 10099                           postdec2	equ	0xFDD
 10100                           fsr2h	equ	0xFDA
 10101                           fsr2l	equ	0xFD9
 10102                           status	equ	0xFD8
 10103                           
 10104 ;; *************** function _floor *****************
 10105 ;; Defined at:
 10106 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 10107 ;; Parameters:    Size  Location     Type
 10108 ;;  x               3   49[BANK0 ] int 
 10109 ;; Auto vars:     Size  Location     Type
 10110 ;;  i               3   52[BANK0 ] int 
 10111 ;;  expon           2   55[BANK0 ] int 
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  3   49[BANK0 ] int 
 10114 ;; Registers used:
 10115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10121 ;;      Params:         0       3       0       0       0       0       0
 10122 ;;      Locals:         0       5       0       0       0       0       0
 10123 ;;      Temps:          0       0       0       0       0       0       0
 10124 ;;      Totals:         0       8       0       0       0       0       0
 10125 ;;Total ram usage:        8 bytes
 10126 ;; Hardware stack levels used:    1
 10127 ;; Hardware stack levels required when called:    5
 10128 ;; This function calls:
 10129 ;;		___altoft
 10130 ;;		___ftadd
 10131 ;;		___ftge
 10132 ;;		___fttol
 10133 ;;		_frexp
 10134 ;; This function is called by:
 10135 ;;		_exp
 10136 ;; This function uses a non-reentrant model
 10137 ;;
 10138                           
 10139                           	psect	text51
 10140  001304                     __ptext51:
 10141                           	opt stack 0
 10142  001304                     _floor:
 10143                           	opt stack 22
 10144                           
 10145                           ; BSR set to: 0
 10146                           ;incstack = 0
 10147  001304  C091  F018         	movff	floor@x,frexp@value
 10148  001308  C092  F019         	movff	floor@x+1,frexp@value+1
 10149  00130C  C093  F01A         	movff	floor@x+2,frexp@value+2
 10150  001310  0E97               	movlw	low floor@expon
 10151  001312  6E1B               	movwf	frexp@eptr,c
 10152  001314  0E00               	movlw	high floor@expon
 10153  001316  6E1C               	movwf	frexp@eptr+1,c
 10154  001318  EC47  F00D         	call	_frexp	;wreg free
 10155  00131C  0100               	movlb	0	; () banked
 10156  00131E  AF98               	btfss	(floor@expon+1)& (0+255),7,b
 10157  001320  D010               	goto	l1918
 10158                           
 10159                           ; BSR set to: 0
 10160  001322  AF93               	btfss	(floor@x+2)& (0+255),7,b
 10161  001324  D007               	goto	l1919
 10162                           
 10163                           ; BSR set to: 0
 10164  001326  0E00               	movlw	0
 10165  001328  6F91               	movwf	?_floor& (0+255),b
 10166  00132A  0E80               	movlw	128
 10167  00132C  6F92               	movwf	(?_floor+1)& (0+255),b
 10168  00132E  0EBF               	movlw	191
 10169  001330  6F93               	movwf	(?_floor+2)& (0+255),b
 10170                           
 10171                           ; BSR set to: 0
 10172  001332  0012               	return	
 10173  001334                     l1919:
 10174                           
 10175                           ; BSR set to: 0
 10176                           
 10177                           ; BSR set to: 0
 10178  001334  0E00               	movlw	0
 10179  001336  6F91               	movwf	?_floor& (0+255),b
 10180  001338  0E00               	movlw	0
 10181  00133A  6F92               	movwf	(?_floor+1)& (0+255),b
 10182  00133C  0E00               	movlw	0
 10183  00133E  6F93               	movwf	(?_floor+2)& (0+255),b
 10184                           
 10185                           ; BSR set to: 0
 10186  001340  0012               	return	
 10187  001342                     l1918:
 10188                           
 10189                           ; BSR set to: 0
 10190                           
 10191                           ; BSR set to: 0
 10192  001342  5198               	movf	(floor@expon+1)& (0+255),w,b
 10193  001344  E104               	bnz	u5670
 10194  001346  0E15               	movlw	21
 10195  001348  5D97               	subwf	floor@expon& (0+255),w,b
 10196  00134A  A0D8               	btfss	status,0,c
 10197  00134C  D007               	goto	l1921
 10198  00134E                     u5670:
 10199                           
 10200                           ; BSR set to: 0
 10201  00134E  C091  F091         	movff	floor@x,?_floor
 10202  001352  C092  F092         	movff	floor@x+1,?_floor+1
 10203  001356  C093  F093         	movff	floor@x+2,?_floor+2
 10204  00135A  0012               	return	
 10205  00135C                     l1921:
 10206                           
 10207                           ; BSR set to: 0
 10208                           
 10209                           ; BSR set to: 0
 10210  00135C  C091  F078         	movff	floor@x,___fttol@f1
 10211  001360  C092  F079         	movff	floor@x+1,___fttol@f1+1
 10212  001364  C093  F07A         	movff	floor@x+2,___fttol@f1+2
 10213  001368  EC17  F008         	call	___fttol	;wreg free
 10214  00136C  C078  F087         	movff	?___fttol,___altoft@c
 10215  001370  C079  F088         	movff	?___fttol+1,___altoft@c+1
 10216  001374  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 10217  001378  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 10218  00137C  ECD7  F00D         	call	___altoft	;wreg free
 10219  001380  C087  F094         	movff	?___altoft,floor@i
 10220  001384  C088  F095         	movff	?___altoft+1,floor@i+1
 10221  001388  C089  F096         	movff	?___altoft+2,floor@i+2
 10222  00138C  C091  F018         	movff	floor@x,___ftge@ff1
 10223  001390  C092  F019         	movff	floor@x+1,___ftge@ff1+1
 10224  001394  C093  F01A         	movff	floor@x+2,___ftge@ff1+2
 10225  001398  C094  F01B         	movff	floor@i,___ftge@ff2
 10226  00139C  C095  F01C         	movff	floor@i+1,___ftge@ff2+1
 10227  0013A0  C096  F01D         	movff	floor@i+2,___ftge@ff2+2
 10228  0013A4  EC8F  F00D         	call	___ftge	;wreg free
 10229  0013A8  B0D8               	btfsc	status,0,c
 10230  0013AA  D016               	goto	l1922
 10231  0013AC  C094  F078         	movff	floor@i,___ftadd@f1
 10232  0013B0  C095  F079         	movff	floor@i+1,___ftadd@f1+1
 10233  0013B4  C096  F07A         	movff	floor@i+2,___ftadd@f1+2
 10234  0013B8  0E00               	movlw	0
 10235  0013BA  0100               	movlb	0	; () banked
 10236  0013BC  6F7B               	movwf	___ftadd@f2& (0+255),b
 10237  0013BE  0E80               	movlw	128
 10238  0013C0  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 10239  0013C2  0EBF               	movlw	191
 10240  0013C4  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 10241  0013C6  ECB3  F004         	call	___ftadd	;wreg free
 10242  0013CA  C078  F091         	movff	?___ftadd,?_floor
 10243  0013CE  C079  F092         	movff	?___ftadd+1,?_floor+1
 10244  0013D2  C07A  F093         	movff	?___ftadd+2,?_floor+2
 10245  0013D6  0012               	return	
 10246  0013D8                     l1922:
 10247  0013D8  C094  F091         	movff	floor@i,?_floor
 10248  0013DC  C095  F092         	movff	floor@i+1,?_floor+1
 10249  0013E0  C096  F093         	movff	floor@i+2,?_floor+2
 10250  0013E4  0012               	return		;funcret
 10251  0013E6                     __end_of_floor:
 10252                           	opt stack 0
 10253                           tosu	equ	0xFFF
 10254                           tosh	equ	0xFFE
 10255                           tosl	equ	0xFFD
 10256                           pclath	equ	0xFFA
 10257                           tblptru	equ	0xFF8
 10258                           tblptrh	equ	0xFF7
 10259                           tblptrl	equ	0xFF6
 10260                           tablat	equ	0xFF5
 10261                           prodh	equ	0xFF4
 10262                           prodl	equ	0xFF3
 10263                           intcon	equ	0xFF2
 10264                           intcon2	equ	0xFF1
 10265                           postinc0	equ	0xFEE
 10266                           wreg	equ	0xFE8
 10267                           postdec1	equ	0xFE5
 10268                           fsr1l	equ	0xFE1
 10269                           indf2	equ	0xFDF
 10270                           postinc2	equ	0xFDE
 10271                           postdec2	equ	0xFDD
 10272                           fsr2h	equ	0xFDA
 10273                           fsr2l	equ	0xFD9
 10274                           status	equ	0xFD8
 10275                           
 10276 ;; *************** function _frexp *****************
 10277 ;; Defined at:
 10278 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;  value           3   23[COMRAM] int 
 10281 ;;  eptr            2   26[COMRAM] PTR int 
 10282 ;;		 -> log@exponent(2), floor@expon(2), 
 10283 ;; Auto vars:     Size  Location     Type
 10284 ;;		None
 10285 ;; Return value:  Size  Location     Type
 10286 ;;                  3   23[COMRAM] PTR int 
 10287 ;; Registers used:
 10288 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10289 ;; Tracked objects:
 10290 ;;		On entry : 0/0
 10291 ;;		On exit  : 0/0
 10292 ;;		Unchanged: 0/0
 10293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10294 ;;      Params:         5       0       0       0       0       0       0
 10295 ;;      Locals:         0       0       0       0       0       0       0
 10296 ;;      Temps:          2       0       0       0       0       0       0
 10297 ;;      Totals:         7       0       0       0       0       0       0
 10298 ;;Total ram usage:        7 bytes
 10299 ;; Hardware stack levels used:    1
 10300 ;; Hardware stack levels required when called:    3
 10301 ;; This function calls:
 10302 ;;		Nothing
 10303 ;; This function is called by:
 10304 ;;		_floor
 10305 ;;		_log
 10306 ;; This function uses a non-reentrant model
 10307 ;;
 10308                           
 10309                           	psect	text52
 10310  001A8E                     __ptext52:
 10311                           	opt stack 0
 10312  001A8E                     _frexp:
 10313                           	opt stack 24
 10314                           
 10315                           ;incstack = 0
 10316  001A8E  5018               	movf	frexp@value,w,c
 10317  001A90  1019               	iorwf	frexp@value+1,w,c
 10318  001A92  101A               	iorwf	frexp@value+2,w,c
 10319  001A94  A4D8               	btfss	status,2,c
 10320  001A96  D00F               	goto	l1927
 10321  001A98  C01B  FFD9         	movff	frexp@eptr,fsr2l
 10322  001A9C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 10323  001AA0  0E00               	movlw	0
 10324  001AA2  6EDE               	movwf	postinc2,c
 10325  001AA4  0E00               	movlw	0
 10326  001AA6  6EDD               	movwf	postdec2,c
 10327  001AA8  0E00               	movlw	0
 10328  001AAA  6E18               	movwf	?_frexp,c
 10329  001AAC  0E00               	movlw	0
 10330  001AAE  6E19               	movwf	?_frexp+1,c
 10331  001AB0  0E00               	movlw	0
 10332  001AB2  6E1A               	movwf	?_frexp+2,c
 10333  001AB4  0012               	return	
 10334  001AB6                     l1927:
 10335  001AB6  501A               	movf	frexp@value+2,w,c
 10336  001AB8  0B7F               	andlw	127
 10337  001ABA  6E1D               	movwf	??_frexp& (0+255),c
 10338  001ABC  6A1E               	clrf	(??_frexp+1)& (0+255),c
 10339  001ABE  90D8               	bcf	status,0,c
 10340  001AC0  361D               	rlcf	??_frexp,f,c
 10341  001AC2  361E               	rlcf	??_frexp+1,f,c
 10342  001AC4  C01B  FFD9         	movff	frexp@eptr,fsr2l
 10343  001AC8  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 10344  001ACC  C01D  FFDE         	movff	??_frexp,postinc2
 10345  001AD0  C01E  FFDD         	movff	??_frexp+1,postdec2
 10346  001AD4  AE19               	btfss	frexp@value+1,7,c
 10347  001AD6  D003               	goto	u3280
 10348  001AD8  6A1D               	clrf	??_frexp& (0+255),c
 10349  001ADA  2A1D               	incf	??_frexp& (0+255),f,c
 10350  001ADC  D001               	goto	u3288
 10351  001ADE                     u3280:
 10352  001ADE  6A1D               	clrf	??_frexp& (0+255),c
 10353  001AE0                     u3288:
 10354  001AE0  501D               	movf	??_frexp,w,c
 10355  001AE2  C01B  FFD9         	movff	frexp@eptr,fsr2l
 10356  001AE6  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 10357  001AEA  12DE               	iorwf	postinc2,f,c
 10358  001AEC  0E00               	movlw	0
 10359  001AEE  12DD               	iorwf	postdec2,f,c
 10360  001AF0  C01B  FFD9         	movff	frexp@eptr,fsr2l
 10361  001AF4  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 10362  001AF8  0E82               	movlw	130
 10363  001AFA  26DE               	addwf	postinc2,f,c
 10364  001AFC  0EFF               	movlw	255
 10365  001AFE  22DD               	addwfc	postdec2,f,c
 10366  001B00  801A               	bsf	frexp@value+2,0,c
 10367  001B02  821A               	bsf	frexp@value+2,1,c
 10368  001B04  841A               	bsf	frexp@value+2,2,c
 10369  001B06  861A               	bsf	frexp@value+2,3,c
 10370  001B08  881A               	bsf	frexp@value+2,4,c
 10371  001B0A  8A1A               	bsf	frexp@value+2,5,c
 10372  001B0C  9C1A               	bcf	frexp@value+2,6,c
 10373  001B0E  9E19               	bcf	frexp@value+1,7,c
 10374  001B10  C018  F018         	movff	frexp@value,?_frexp
 10375  001B14  C019  F019         	movff	frexp@value+1,?_frexp+1
 10376  001B18  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 10377  001B1C  0012               	return	
 10378  001B1E                     __end_of_frexp:
 10379                           	opt stack 0
 10380                           tosu	equ	0xFFF
 10381                           tosh	equ	0xFFE
 10382                           tosl	equ	0xFFD
 10383                           pclath	equ	0xFFA
 10384                           tblptru	equ	0xFF8
 10385                           tblptrh	equ	0xFF7
 10386                           tblptrl	equ	0xFF6
 10387                           tablat	equ	0xFF5
 10388                           prodh	equ	0xFF4
 10389                           prodl	equ	0xFF3
 10390                           intcon	equ	0xFF2
 10391                           intcon2	equ	0xFF1
 10392                           postinc0	equ	0xFEE
 10393                           wreg	equ	0xFE8
 10394                           postdec1	equ	0xFE5
 10395                           fsr1l	equ	0xFE1
 10396                           indf2	equ	0xFDF
 10397                           postinc2	equ	0xFDE
 10398                           postdec2	equ	0xFDD
 10399                           fsr2h	equ	0xFDA
 10400                           fsr2l	equ	0xFD9
 10401                           status	equ	0xFD8
 10402                           
 10403 ;; *************** function ___fttol *****************
 10404 ;; Defined at:
 10405 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 10406 ;; Parameters:    Size  Location     Type
 10407 ;;  f1              3   24[BANK0 ] float 
 10408 ;; Auto vars:     Size  Location     Type
 10409 ;;  lval            4   34[BANK0 ] unsigned long 
 10410 ;;  exp1            1   38[BANK0 ] unsigned char 
 10411 ;;  sign1           1   33[BANK0 ] unsigned char 
 10412 ;; Return value:  Size  Location     Type
 10413 ;;                  4   24[BANK0 ] long 
 10414 ;; Registers used:
 10415 ;;		wreg, status,2, status,0
 10416 ;; Tracked objects:
 10417 ;;		On entry : 0/0
 10418 ;;		On exit  : 0/0
 10419 ;;		Unchanged: 0/0
 10420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10421 ;;      Params:         0       4       0       0       0       0       0
 10422 ;;      Locals:         0       6       0       0       0       0       0
 10423 ;;      Temps:          0       5       0       0       0       0       0
 10424 ;;      Totals:         0      15       0       0       0       0       0
 10425 ;;Total ram usage:       15 bytes
 10426 ;; Hardware stack levels used:    1
 10427 ;; Hardware stack levels required when called:    3
 10428 ;; This function calls:
 10429 ;;		Nothing
 10430 ;; This function is called by:
 10431 ;;		_AdcConvert
 10432 ;;		_pow
 10433 ;;		_exp
 10434 ;;		_floor
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           	psect	text53
 10439  00102E                     __ptext53:
 10440                           	opt stack 0
 10441  00102E                     ___fttol:
 10442                           	opt stack 23
 10443                           
 10444                           ;incstack = 0
 10445  00102E  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 10446  001032  0100               	movlb	0	; () banked
 10447  001034  6B7D               	clrf	(??___fttol+1)& (0+255),b
 10448  001036  6B7E               	clrf	(??___fttol+2)& (0+255),b
 10449  001038  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 10450  00103A  377C               	rlcf	??___fttol& (0+255),f,b
 10451  00103C  E301               	bnc	u3191
 10452  00103E  817D               	bsf	(??___fttol+1)& (0+255),0,b
 10453  001040                     u3191:
 10454  001040  517C               	movf	??___fttol& (0+255),w,b
 10455  001042  6F86               	movwf	___fttol@exp1& (0+255),b
 10456  001044  5186               	movf	___fttol@exp1& (0+255),w,b
 10457  001046  A4D8               	btfss	status,2,c
 10458  001048  D009               	goto	l1584
 10459                           
 10460                           ; BSR set to: 0
 10461  00104A  0E00               	movlw	0
 10462  00104C  6F78               	movwf	?___fttol& (0+255),b
 10463  00104E  0E00               	movlw	0
 10464  001050  6F79               	movwf	(?___fttol+1)& (0+255),b
 10465  001052  0E00               	movlw	0
 10466  001054  6F7A               	movwf	(?___fttol+2)& (0+255),b
 10467  001056  0E00               	movlw	0
 10468  001058  6F7B               	movwf	(?___fttol+3)& (0+255),b
 10469                           
 10470                           ; BSR set to: 0
 10471  00105A  0012               	return	
 10472  00105C                     l1584:
 10473                           
 10474                           ; BSR set to: 0
 10475                           
 10476                           ; BSR set to: 0
 10477  00105C  0E17               	movlw	23
 10478  00105E  6F7C               	movwf	??___fttol& (0+255),b
 10479  001060  C078  F07D         	movff	___fttol@f1,??___fttol+1
 10480  001064  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 10481  001068  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 10482  00106C  297C               	incf	??___fttol& (0+255),w,b
 10483  00106E  6F80               	movwf	(??___fttol+4)& (0+255),b
 10484  001070  D004               	goto	u3210
 10485  001072                     u3215:
 10486  001072  90D8               	bcf	status,0,c
 10487  001074  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 10488  001076  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 10489  001078  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 10490  00107A                     u3210:
 10491  00107A  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 10492  00107C  D7FA               	goto	u3215
 10493  00107E  0100               	movlb	0	; () banked
 10494  001080  517D               	movf	(??___fttol+1)& (0+255),w,b
 10495  001082  6F81               	movwf	___fttol@sign1& (0+255),b
 10496                           
 10497                           ; BSR set to: 0
 10498  001084  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 10499                           
 10500                           ; BSR set to: 0
 10501  001086  0EFF               	movlw	255
 10502  001088  1778               	andwf	___fttol@f1& (0+255),f,b
 10503  00108A  0EFF               	movlw	255
 10504  00108C  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 10505  00108E  0E00               	movlw	0
 10506  001090  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 10507                           
 10508                           ; BSR set to: 0
 10509  001092  5178               	movf	___fttol@f1& (0+255),w,b
 10510  001094  6F82               	movwf	___fttol@lval& (0+255),b
 10511  001096  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 10512  001098  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 10513  00109A  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 10514  00109C  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 10515  00109E  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 10516                           
 10517                           ; BSR set to: 0
 10518  0010A0  0E8E               	movlw	142
 10519  0010A2  5F86               	subwf	___fttol@exp1& (0+255),f,b
 10520                           
 10521                           ; BSR set to: 0
 10522  0010A4  AF86               	btfss	___fttol@exp1& (0+255),7,b
 10523  0010A6  D016               	goto	l1586
 10524                           
 10525                           ; BSR set to: 0
 10526  0010A8  5186               	movf	___fttol@exp1& (0+255),w,b
 10527  0010AA  0A80               	xorlw	128
 10528  0010AC  0F8F               	addlw	143
 10529  0010AE  B0D8               	btfsc	status,0,c
 10530  0010B0  D009               	goto	l1587
 10531                           
 10532                           ; BSR set to: 0
 10533  0010B2  0E00               	movlw	0
 10534  0010B4  6F78               	movwf	?___fttol& (0+255),b
 10535  0010B6  0E00               	movlw	0
 10536  0010B8  6F79               	movwf	(?___fttol+1)& (0+255),b
 10537  0010BA  0E00               	movlw	0
 10538  0010BC  6F7A               	movwf	(?___fttol+2)& (0+255),b
 10539  0010BE  0E00               	movlw	0
 10540  0010C0  6F7B               	movwf	(?___fttol+3)& (0+255),b
 10541                           
 10542                           ; BSR set to: 0
 10543  0010C2  0012               	return	
 10544  0010C4                     l1587:
 10545                           
 10546                           ; BSR set to: 0
 10547                           
 10548                           ; BSR set to: 0
 10549                           
 10550                           ; BSR set to: 0
 10551  0010C4  90D8               	bcf	status,0,c
 10552  0010C6  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10553  0010C8  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10554  0010CA  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10555  0010CC  3382               	rrcf	___fttol@lval& (0+255),f,b
 10556                           
 10557                           ; BSR set to: 0
 10558  0010CE  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 10559  0010D0  D7F9               	goto	l1587
 10560                           
 10561                           ; BSR set to: 0
 10562  0010D2  D015               	goto	u3250
 10563  0010D4                     l1586:
 10564                           
 10565                           ; BSR set to: 0
 10566                           
 10567                           ; BSR set to: 0
 10568  0010D4  0E17               	movlw	23
 10569  0010D6  6586               	cpfsgt	___fttol@exp1& (0+255),b
 10570  0010D8  D00F               	goto	l1592
 10571                           
 10572                           ; BSR set to: 0
 10573  0010DA  0E00               	movlw	0
 10574  0010DC  6F78               	movwf	?___fttol& (0+255),b
 10575  0010DE  0E00               	movlw	0
 10576  0010E0  6F79               	movwf	(?___fttol+1)& (0+255),b
 10577  0010E2  0E00               	movlw	0
 10578  0010E4  6F7A               	movwf	(?___fttol+2)& (0+255),b
 10579  0010E6  0E00               	movlw	0
 10580  0010E8  6F7B               	movwf	(?___fttol+3)& (0+255),b
 10581                           
 10582                           ; BSR set to: 0
 10583  0010EA  0012               	return	
 10584  0010EC                     
 10585                           ; BSR set to: 0
 10586                           
 10587                           ; BSR set to: 0
 10588  0010EC  90D8               	bcf	status,0,c
 10589  0010EE  3782               	rlcf	___fttol@lval& (0+255),f,b
 10590  0010F0  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10591  0010F2  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10592  0010F4  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10593  0010F6  0786               	decf	___fttol@exp1& (0+255),f,b
 10594  0010F8                     l1592:
 10595                           
 10596                           ; BSR set to: 0
 10597                           
 10598                           ; BSR set to: 0
 10599  0010F8  5186               	movf	___fttol@exp1& (0+255),w,b
 10600  0010FA  A4D8               	btfss	status,2,c
 10601  0010FC  D7F7               	goto	l1593
 10602  0010FE                     u3250:
 10603                           
 10604                           ; BSR set to: 0
 10605                           
 10606                           ; BSR set to: 0
 10607                           
 10608                           ; BSR set to: 0
 10609  0010FE  5181               	movf	___fttol@sign1& (0+255),w,b
 10610  001100  B4D8               	btfsc	status,2,c
 10611  001102  D008               	goto	l1595
 10612                           
 10613                           ; BSR set to: 0
 10614  001104  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 10615  001106  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 10616  001108  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 10617  00110A  6D82               	negf	___fttol@lval& (0+255),b
 10618  00110C  0E00               	movlw	0
 10619  00110E  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10620  001110  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10621  001112  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10622  001114                     l1595:
 10623                           
 10624                           ; BSR set to: 0
 10625                           
 10626                           ; BSR set to: 0
 10627  001114  C082  F078         	movff	___fttol@lval,?___fttol
 10628  001118  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 10629  00111C  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 10630  001120  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 10631  001124  0012               	return	
 10632  001126                     __end_of___fttol:
 10633                           	opt stack 0
 10634                           tosu	equ	0xFFF
 10635                           tosh	equ	0xFFE
 10636                           tosl	equ	0xFFD
 10637                           pclath	equ	0xFFA
 10638                           tblptru	equ	0xFF8
 10639                           tblptrh	equ	0xFF7
 10640                           tblptrl	equ	0xFF6
 10641                           tablat	equ	0xFF5
 10642                           prodh	equ	0xFF4
 10643                           prodl	equ	0xFF3
 10644                           intcon	equ	0xFF2
 10645                           intcon2	equ	0xFF1
 10646                           postinc0	equ	0xFEE
 10647                           wreg	equ	0xFE8
 10648                           postdec1	equ	0xFE5
 10649                           fsr1l	equ	0xFE1
 10650                           indf2	equ	0xFDF
 10651                           postinc2	equ	0xFDE
 10652                           postdec2	equ	0xFDD
 10653                           fsr2h	equ	0xFDA
 10654                           fsr2l	equ	0xFD9
 10655                           status	equ	0xFD8
 10656                           
 10657 ;; *************** function ___ftge *****************
 10658 ;; Defined at:
 10659 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;  ff1             3   23[COMRAM] float 
 10662 ;;  ff2             3   26[COMRAM] float 
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;		None
 10665 ;; Return value:  Size  Location     Type
 10666 ;;		None               void
 10667 ;; Registers used:
 10668 ;;		wreg, status,2, status,0
 10669 ;; Tracked objects:
 10670 ;;		On entry : 0/0
 10671 ;;		On exit  : 0/0
 10672 ;;		Unchanged: 0/0
 10673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10674 ;;      Params:         6       0       0       0       0       0       0
 10675 ;;      Locals:         0       0       0       0       0       0       0
 10676 ;;      Temps:          3       0       0       0       0       0       0
 10677 ;;      Totals:         9       0       0       0       0       0       0
 10678 ;;Total ram usage:        9 bytes
 10679 ;; Hardware stack levels used:    1
 10680 ;; Hardware stack levels required when called:    3
 10681 ;; This function calls:
 10682 ;;		Nothing
 10683 ;; This function is called by:
 10684 ;;		_CheckFlashPrecentage
 10685 ;;		_pow
 10686 ;;		_exp
 10687 ;;		_floor
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           	psect	text54
 10692  001B1E                     __ptext54:
 10693                           	opt stack 0
 10694  001B1E                     ___ftge:
 10695                           	opt stack 26
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;incstack = 0
 10699  001B1E  AE1A               	btfss	___ftge@ff1+2,7,c
 10700  001B20  D016               	goto	l1556
 10701  001B22  C018  F01E         	movff	___ftge@ff1,??___ftge
 10702  001B26  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 10703  001B2A  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 10704  001B2E  1E1E               	comf	??___ftge,f,c
 10705  001B30  1E1F               	comf	??___ftge+1,f,c
 10706  001B32  1E20               	comf	??___ftge+2,f,c
 10707  001B34  2A1E               	incf	??___ftge,f,c
 10708  001B36  0E00               	movlw	0
 10709  001B38  221F               	addwfc	??___ftge+1,f,c
 10710  001B3A  2220               	addwfc	??___ftge+2,f,c
 10711  001B3C  0E00               	movlw	0
 10712  001B3E  241E               	addwf	??___ftge,w,c
 10713  001B40  6E18               	movwf	___ftge@ff1,c
 10714  001B42  0E00               	movlw	0
 10715  001B44  201F               	addwfc	??___ftge+1,w,c
 10716  001B46  6E19               	movwf	___ftge@ff1+1,c
 10717  001B48  0E80               	movlw	128
 10718  001B4A  2020               	addwfc	??___ftge+2,w,c
 10719  001B4C  6E1A               	movwf	___ftge@ff1+2,c
 10720  001B4E                     l1556:
 10721  001B4E  AE1D               	btfss	___ftge@ff2+2,7,c
 10722  001B50  D016               	goto	l1557
 10723  001B52  C01B  F01E         	movff	___ftge@ff2,??___ftge
 10724  001B56  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 10725  001B5A  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 10726  001B5E  1E1E               	comf	??___ftge,f,c
 10727  001B60  1E1F               	comf	??___ftge+1,f,c
 10728  001B62  1E20               	comf	??___ftge+2,f,c
 10729  001B64  2A1E               	incf	??___ftge,f,c
 10730  001B66  0E00               	movlw	0
 10731  001B68  221F               	addwfc	??___ftge+1,f,c
 10732  001B6A  2220               	addwfc	??___ftge+2,f,c
 10733  001B6C  0E00               	movlw	0
 10734  001B6E  241E               	addwf	??___ftge,w,c
 10735  001B70  6E1B               	movwf	___ftge@ff2,c
 10736  001B72  0E00               	movlw	0
 10737  001B74  201F               	addwfc	??___ftge+1,w,c
 10738  001B76  6E1C               	movwf	___ftge@ff2+1,c
 10739  001B78  0E80               	movlw	128
 10740  001B7A  2020               	addwfc	??___ftge+2,w,c
 10741  001B7C  6E1D               	movwf	___ftge@ff2+2,c
 10742  001B7E                     l1557:
 10743  001B7E  0E00               	movlw	0
 10744  001B80  1A18               	xorwf	___ftge@ff1,f,c
 10745  001B82  0E00               	movlw	0
 10746  001B84  1A19               	xorwf	___ftge@ff1+1,f,c
 10747  001B86  0E80               	movlw	128
 10748  001B88  1A1A               	xorwf	___ftge@ff1+2,f,c
 10749  001B8A  0E00               	movlw	0
 10750  001B8C  1A1B               	xorwf	___ftge@ff2,f,c
 10751  001B8E  0E00               	movlw	0
 10752  001B90  1A1C               	xorwf	___ftge@ff2+1,f,c
 10753  001B92  0E80               	movlw	128
 10754  001B94  1A1D               	xorwf	___ftge@ff2+2,f,c
 10755  001B96  501B               	movf	___ftge@ff2,w,c
 10756  001B98  5C18               	subwf	___ftge@ff1,w,c
 10757  001B9A  501C               	movf	___ftge@ff2+1,w,c
 10758  001B9C  5819               	subwfb	___ftge@ff1+1,w,c
 10759  001B9E  501D               	movf	___ftge@ff2+2,w,c
 10760  001BA0  581A               	subwfb	___ftge@ff1+2,w,c
 10761  001BA2  B0D8               	btfsc	status,0,c
 10762  001BA4  D002               	goto	l3962
 10763  001BA6  90D8               	bcf	status,0,c
 10764  001BA8  0012               	return	
 10765  001BAA                     l3962:
 10766  001BAA  80D8               	bsf	status,0,c
 10767  001BAC  0012               	return	
 10768  001BAE                     __end_of___ftge:
 10769                           	opt stack 0
 10770                           tosu	equ	0xFFF
 10771                           tosh	equ	0xFFE
 10772                           tosl	equ	0xFFD
 10773                           pclath	equ	0xFFA
 10774                           tblptru	equ	0xFF8
 10775                           tblptrh	equ	0xFF7
 10776                           tblptrl	equ	0xFF6
 10777                           tablat	equ	0xFF5
 10778                           prodh	equ	0xFF4
 10779                           prodl	equ	0xFF3
 10780                           intcon	equ	0xFF2
 10781                           intcon2	equ	0xFF1
 10782                           postinc0	equ	0xFEE
 10783                           wreg	equ	0xFE8
 10784                           postdec1	equ	0xFE5
 10785                           fsr1l	equ	0xFE1
 10786                           indf2	equ	0xFDF
 10787                           postinc2	equ	0xFDE
 10788                           postdec2	equ	0xFDD
 10789                           fsr2h	equ	0xFDA
 10790                           fsr2l	equ	0xFD9
 10791                           status	equ	0xFD8
 10792                           
 10793 ;; *************** function ___altoft *****************
 10794 ;; Defined at:
 10795 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 10796 ;; Parameters:    Size  Location     Type
 10797 ;;  c               4   39[BANK0 ] long 
 10798 ;; Auto vars:     Size  Location     Type
 10799 ;;  sign            1   48[BANK0 ] unsigned char 
 10800 ;;  exp             1   47[BANK0 ] unsigned char 
 10801 ;; Return value:  Size  Location     Type
 10802 ;;                  3   39[BANK0 ] float 
 10803 ;; Registers used:
 10804 ;;		wreg, status,2, status,0, cstack
 10805 ;; Tracked objects:
 10806 ;;		On entry : 0/0
 10807 ;;		On exit  : 0/0
 10808 ;;		Unchanged: 0/0
 10809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10810 ;;      Params:         0       4       0       0       0       0       0
 10811 ;;      Locals:         0       2       0       0       0       0       0
 10812 ;;      Temps:          0       4       0       0       0       0       0
 10813 ;;      Totals:         0      10       0       0       0       0       0
 10814 ;;Total ram usage:       10 bytes
 10815 ;; Hardware stack levels used:    1
 10816 ;; Hardware stack levels required when called:    4
 10817 ;; This function calls:
 10818 ;;		___ftpack
 10819 ;; This function is called by:
 10820 ;;		_floor
 10821 ;; This function uses a non-reentrant model
 10822 ;;
 10823                           
 10824                           	psect	text55
 10825  001BAE                     __ptext55:
 10826                           	opt stack 0
 10827  001BAE                     ___altoft:
 10828                           	opt stack 22
 10829                           
 10830                           ;incstack = 0
 10831  001BAE  0E00               	movlw	0
 10832  001BB0  0100               	movlb	0	; () banked
 10833  001BB2  6F90               	movwf	___altoft@sign& (0+255),b
 10834  001BB4  0E8E               	movlw	142
 10835  001BB6  6F8F               	movwf	___altoft@exp& (0+255),b
 10836                           
 10837                           ; BSR set to: 0
 10838  001BB8  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 10839  001BBA  D011               	goto	l1354
 10840                           
 10841                           ; BSR set to: 0
 10842  001BBC  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 10843  001BBE  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 10844  001BC0  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 10845  001BC2  6D87               	negf	___altoft@c& (0+255),b
 10846  001BC4  0E00               	movlw	0
 10847  001BC6  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 10848  001BC8  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 10849  001BCA  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 10850                           
 10851                           ; BSR set to: 0
 10852  001BCC  0E01               	movlw	1
 10853  001BCE  6F90               	movwf	___altoft@sign& (0+255),b
 10854                           
 10855                           ; BSR set to: 0
 10856  001BD0  D006               	goto	l1354
 10857  001BD2                     
 10858                           ; BSR set to: 0
 10859                           
 10860                           ; BSR set to: 0
 10861  001BD2  90D8               	bcf	status,0,c
 10862  001BD4  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 10863  001BD6  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 10864  001BD8  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 10865  001BDA  3387               	rrcf	___altoft@c& (0+255),f,b
 10866  001BDC  2B8F               	incf	___altoft@exp& (0+255),f,b
 10867  001BDE                     l1354:
 10868                           
 10869                           ; BSR set to: 0
 10870                           
 10871                           ; BSR set to: 0
 10872  001BDE  0E00               	movlw	0
 10873  001BE0  1587               	andwf	___altoft@c& (0+255),w,b
 10874  001BE2  6F8B               	movwf	??___altoft& (0+255),b
 10875  001BE4  0E00               	movlw	0
 10876  001BE6  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 10877  001BE8  6F8C               	movwf	(??___altoft+1)& (0+255),b
 10878  001BEA  0E00               	movlw	0
 10879  001BEC  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 10880  001BEE  6F8D               	movwf	(??___altoft+2)& (0+255),b
 10881  001BF0  0EFF               	movlw	255
 10882  001BF2  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 10883  001BF4  6F8E               	movwf	(??___altoft+3)& (0+255),b
 10884  001BF6  518B               	movf	??___altoft& (0+255),w,b
 10885  001BF8  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 10886  001BFA  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 10887  001BFC  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 10888  001BFE  A4D8               	btfss	status,2,c
 10889  001C00  D7E8               	goto	l1355
 10890                           
 10891                           ; BSR set to: 0
 10892                           
 10893                           ; BSR set to: 0
 10894  001C02  C087  F018         	movff	___altoft@c,___ftpack@arg
 10895  001C06  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 10896  001C0A  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 10897  001C0E  C08F  F01B         	movff	___altoft@exp,___ftpack@exp
 10898  001C12  C090  F01C         	movff	___altoft@sign,___ftpack@sign
 10899  001C16  ECA7  F00C         	call	___ftpack	;wreg free
 10900  001C1A  C018  F087         	movff	?___ftpack,?___altoft
 10901  001C1E  C019  F088         	movff	?___ftpack+1,?___altoft+1
 10902  001C22  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 10903  001C26  0012               	return	
 10904  001C28                     __end_of___altoft:
 10905                           	opt stack 0
 10906                           tosu	equ	0xFFF
 10907                           tosh	equ	0xFFE
 10908                           tosl	equ	0xFFD
 10909                           pclath	equ	0xFFA
 10910                           tblptru	equ	0xFF8
 10911                           tblptrh	equ	0xFF7
 10912                           tblptrl	equ	0xFF6
 10913                           tablat	equ	0xFF5
 10914                           prodh	equ	0xFF4
 10915                           prodl	equ	0xFF3
 10916                           intcon	equ	0xFF2
 10917                           intcon2	equ	0xFF1
 10918                           postinc0	equ	0xFEE
 10919                           wreg	equ	0xFE8
 10920                           postdec1	equ	0xFE5
 10921                           fsr1l	equ	0xFE1
 10922                           indf2	equ	0xFDF
 10923                           postinc2	equ	0xFDE
 10924                           postdec2	equ	0xFDD
 10925                           fsr2h	equ	0xFDA
 10926                           fsr2l	equ	0xFD9
 10927                           status	equ	0xFD8
 10928                           
 10929 ;; *************** function _eval_poly *****************
 10930 ;; Defined at:
 10931 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;  x               3   36[BANK0 ] float 
 10934 ;;  d               2   39[BANK0 ] PTR const 
 10935 ;;		 -> log@coeff(27), exp@coeff(30), 
 10936 ;;  n               2   41[BANK0 ] int 
 10937 ;; Auto vars:     Size  Location     Type
 10938 ;;  res             3   45[BANK0 ] int 
 10939 ;; Return value:  Size  Location     Type
 10940 ;;                  3   36[BANK0 ] int 
 10941 ;; Registers used:
 10942 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10943 ;; Tracked objects:
 10944 ;;		On entry : 0/0
 10945 ;;		On exit  : 0/0
 10946 ;;		Unchanged: 0/0
 10947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10948 ;;      Params:         0       7       0       0       0       0       0
 10949 ;;      Locals:         0       3       0       0       0       0       0
 10950 ;;      Temps:          0       2       0       0       0       0       0
 10951 ;;      Totals:         0      12       0       0       0       0       0
 10952 ;;Total ram usage:       12 bytes
 10953 ;; Hardware stack levels used:    1
 10954 ;; Hardware stack levels required when called:    5
 10955 ;; This function calls:
 10956 ;;		___ftadd
 10957 ;;		___ftmul
 10958 ;;		___wmul
 10959 ;; This function is called by:
 10960 ;;		_exp
 10961 ;;		_log
 10962 ;; This function uses a non-reentrant model
 10963 ;;
 10964                           
 10965                           	psect	text56
 10966  0014C0                     __ptext56:
 10967                           	opt stack 0
 10968  0014C0                     _eval_poly:
 10969                           	opt stack 22
 10970                           
 10971                           ;incstack = 0
 10972  0014C0  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 10973  0014C4  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 10974  0014C8  0E00               	movlw	0
 10975  0014CA  6E1B               	movwf	___wmul@multiplicand+1,c
 10976  0014CC  0E03               	movlw	3
 10977  0014CE  6E1A               	movwf	___wmul@multiplicand,c
 10978  0014D0  EC7B  F012         	call	___wmul	;wreg free
 10979  0014D4  C087  F08B         	movff	eval_poly@d,??_eval_poly
 10980  0014D8  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
 10981  0014DC  5018               	movf	?___wmul,w,c
 10982  0014DE  0100               	movlb	0	; () banked
 10983  0014E0  278B               	addwf	??_eval_poly& (0+255),f,b
 10984  0014E2  5019               	movf	?___wmul+1,w,c
 10985  0014E4  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
 10986  0014E6  C08B  FFF6         	movff	??_eval_poly,tblptrl
 10987  0014EA  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
 10988  0014EE                     	if	0	;tblptru may be non-zero
 10989  0014EE                     	endif
 10990  0014EE                     	if	0	;tblptru may be non-zero
 10991  0014EE                     	endif
 10992  0014EE  0009               	tblrd		*+
 10993  0014F0  CFF5 F08D          	movff	tablat,eval_poly@res
 10994  0014F4  0009               	tblrd		*+
 10995  0014F6  CFF5 F08E          	movff	tablat,eval_poly@res+1
 10996  0014FA  000A               	tblrd		*-
 10997  0014FC  CFF5 F08F          	movff	tablat,eval_poly@res+2
 10998  001500  D040               	goto	l1979
 10999  001502                     
 11000                           ; BSR set to: 0
 11001                           
 11002                           ; BSR set to: 0
 11003  001502  C08D  F06C         	movff	eval_poly@res,___ftmul@f2
 11004  001506  C08E  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 11005  00150A  C08F  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 11006  00150E  C084  F069         	movff	eval_poly@x,___ftmul@f1
 11007  001512  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 11008  001516  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 11009  00151A  EC93  F008         	call	___ftmul	;wreg free
 11010  00151E  C069  F078         	movff	?___ftmul,___ftadd@f1
 11011  001522  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 11012  001526  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 11013  00152A  0E00               	movlw	0
 11014  00152C  6E1B               	movwf	___wmul@multiplicand+1,c
 11015  00152E  0E03               	movlw	3
 11016  001530  6E1A               	movwf	___wmul@multiplicand,c
 11017  001532  0100               	movlb	0	; () banked
 11018  001534  0789               	decf	eval_poly@n& (0+255),f,b
 11019  001536  A0D8               	btfss	status,0,c
 11020  001538  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 11021  00153A  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 11022  00153E  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 11023  001542  EC7B  F012         	call	___wmul	;wreg free
 11024  001546  C087  F08B         	movff	eval_poly@d,??_eval_poly
 11025  00154A  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
 11026  00154E  5018               	movf	?___wmul,w,c
 11027  001550  0100               	movlb	0	; () banked
 11028  001552  278B               	addwf	??_eval_poly& (0+255),f,b
 11029  001554  5019               	movf	?___wmul+1,w,c
 11030  001556  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
 11031  001558  C08B  FFF6         	movff	??_eval_poly,tblptrl
 11032  00155C  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
 11033  001560                     	if	0	;tblptru may be non-zero
 11034  001560                     	endif
 11035  001560                     	if	0	;tblptru may be non-zero
 11036  001560                     	endif
 11037  001560  0009               	tblrd		*+
 11038  001562  CFF5 F07B          	movff	tablat,___ftadd@f2
 11039  001566  0009               	tblrd		*+
 11040  001568  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 11041  00156C  000A               	tblrd		*-
 11042  00156E  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 11043  001572  ECB3  F004         	call	___ftadd	;wreg free
 11044  001576  C078  F08D         	movff	?___ftadd,eval_poly@res
 11045  00157A  C079  F08E         	movff	?___ftadd+1,eval_poly@res+1
 11046  00157E  C07A  F08F         	movff	?___ftadd+2,eval_poly@res+2
 11047  001582                     l1979:
 11048  001582  0100               	movlb	0	; () banked
 11049  001584  5189               	movf	eval_poly@n& (0+255),w,b
 11050  001586  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 11051  001588  A4D8               	btfss	status,2,c
 11052  00158A  D7BB               	goto	l1980
 11053                           
 11054                           ; BSR set to: 0
 11055  00158C  C08D  F084         	movff	eval_poly@res,?_eval_poly
 11056  001590  C08E  F085         	movff	eval_poly@res+1,?_eval_poly+1
 11057  001594  C08F  F086         	movff	eval_poly@res+2,?_eval_poly+2
 11058                           
 11059                           ; BSR set to: 0
 11060  001598  0012               	return		;funcret
 11061  00159A                     __end_of_eval_poly:
 11062                           	opt stack 0
 11063                           tosu	equ	0xFFF
 11064                           tosh	equ	0xFFE
 11065                           tosl	equ	0xFFD
 11066                           pclath	equ	0xFFA
 11067                           tblptru	equ	0xFF8
 11068                           tblptrh	equ	0xFF7
 11069                           tblptrl	equ	0xFF6
 11070                           tablat	equ	0xFF5
 11071                           prodh	equ	0xFF4
 11072                           prodl	equ	0xFF3
 11073                           intcon	equ	0xFF2
 11074                           intcon2	equ	0xFF1
 11075                           postinc0	equ	0xFEE
 11076                           wreg	equ	0xFE8
 11077                           postdec1	equ	0xFE5
 11078                           fsr1l	equ	0xFE1
 11079                           indf2	equ	0xFDF
 11080                           postinc2	equ	0xFDE
 11081                           postdec2	equ	0xFDD
 11082                           fsr2h	equ	0xFDA
 11083                           fsr2l	equ	0xFD9
 11084                           status	equ	0xFD8
 11085                           
 11086 ;; *************** function ___wmul *****************
 11087 ;; Defined at:
 11088 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 11089 ;; Parameters:    Size  Location     Type
 11090 ;;  multiplier      2   23[COMRAM] unsigned int 
 11091 ;;  multiplicand    2   25[COMRAM] unsigned int 
 11092 ;; Auto vars:     Size  Location     Type
 11093 ;;  product         2   27[COMRAM] unsigned int 
 11094 ;; Return value:  Size  Location     Type
 11095 ;;                  2   23[COMRAM] unsigned int 
 11096 ;; Registers used:
 11097 ;;		wreg, status,2, status,0, prodl, prodh
 11098 ;; Tracked objects:
 11099 ;;		On entry : 0/0
 11100 ;;		On exit  : 0/0
 11101 ;;		Unchanged: 0/0
 11102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11103 ;;      Params:         4       0       0       0       0       0       0
 11104 ;;      Locals:         2       0       0       0       0       0       0
 11105 ;;      Temps:          0       0       0       0       0       0       0
 11106 ;;      Totals:         6       0       0       0       0       0       0
 11107 ;;Total ram usage:        6 bytes
 11108 ;; Hardware stack levels used:    1
 11109 ;; Hardware stack levels required when called:    3
 11110 ;; This function calls:
 11111 ;;		Nothing
 11112 ;; This function is called by:
 11113 ;;		_eval_poly
 11114 ;; This function uses a non-reentrant model
 11115 ;;
 11116                           
 11117                           	psect	text57
 11118  0024F6                     __ptext57:
 11119                           	opt stack 0
 11120  0024F6                     ___wmul:
 11121                           	opt stack 23
 11122                           
 11123                           ; BSR set to: 0
 11124                           ;incstack = 0
 11125  0024F6  5018               	movf	___wmul@multiplier,w,c
 11126  0024F8  021A               	mulwf	___wmul@multiplicand,c
 11127  0024FA  CFF3 F01C          	movff	prodl,___wmul@product
 11128  0024FE  CFF4 F01D          	movff	prodh,___wmul@product+1
 11129  002502  5018               	movf	___wmul@multiplier,w,c
 11130  002504  021B               	mulwf	___wmul@multiplicand+1,c
 11131  002506  50F3               	movf	prodl,w,c
 11132  002508  261D               	addwf	___wmul@product+1,f,c
 11133  00250A  5019               	movf	___wmul@multiplier+1,w,c
 11134  00250C  021A               	mulwf	___wmul@multiplicand,c
 11135  00250E  50F3               	movf	prodl,w,c
 11136  002510  261D               	addwf	___wmul@product+1,f,c
 11137  002512  C01C  F018         	movff	___wmul@product,?___wmul
 11138  002516  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 11139  00251A  0012               	return	
 11140  00251C                     __end_of___wmul:
 11141                           	opt stack 0
 11142                           tosu	equ	0xFFF
 11143                           tosh	equ	0xFFE
 11144                           tosl	equ	0xFFD
 11145                           pclath	equ	0xFFA
 11146                           tblptru	equ	0xFF8
 11147                           tblptrh	equ	0xFF7
 11148                           tblptrl	equ	0xFF6
 11149                           tablat	equ	0xFF5
 11150                           prodh	equ	0xFF4
 11151                           prodl	equ	0xFF3
 11152                           intcon	equ	0xFF2
 11153                           intcon2	equ	0xFF1
 11154                           postinc0	equ	0xFEE
 11155                           wreg	equ	0xFE8
 11156                           postdec1	equ	0xFE5
 11157                           fsr1l	equ	0xFE1
 11158                           indf2	equ	0xFDF
 11159                           postinc2	equ	0xFDE
 11160                           postdec2	equ	0xFDD
 11161                           fsr2h	equ	0xFDA
 11162                           fsr2l	equ	0xFD9
 11163                           status	equ	0xFD8
 11164                           
 11165 ;; *************** function ___ftmul *****************
 11166 ;; Defined at:
 11167 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;  f1              3    9[BANK0 ] float 
 11170 ;;  f2              3   12[BANK0 ] float 
 11171 ;; Auto vars:     Size  Location     Type
 11172 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 11173 ;;  sign            1   23[BANK0 ] unsigned char 
 11174 ;;  cntr            1   22[BANK0 ] unsigned char 
 11175 ;;  exp             1   18[BANK0 ] unsigned char 
 11176 ;; Return value:  Size  Location     Type
 11177 ;;                  3    9[BANK0 ] float 
 11178 ;; Registers used:
 11179 ;;		wreg, status,2, status,0, cstack
 11180 ;; Tracked objects:
 11181 ;;		On entry : 0/0
 11182 ;;		On exit  : 0/0
 11183 ;;		Unchanged: 0/0
 11184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11185 ;;      Params:         0       6       0       0       0       0       0
 11186 ;;      Locals:         0       6       0       0       0       0       0
 11187 ;;      Temps:          0       3       0       0       0       0       0
 11188 ;;      Totals:         0      15       0       0       0       0       0
 11189 ;;Total ram usage:       15 bytes
 11190 ;; Hardware stack levels used:    1
 11191 ;; Hardware stack levels required when called:    4
 11192 ;; This function calls:
 11193 ;;		___ftpack
 11194 ;; This function is called by:
 11195 ;;		_AdcConvert
 11196 ;;		_CheckFlashPrecentage
 11197 ;;		_pow
 11198 ;;		_exp
 11199 ;;		_log
 11200 ;;		_eval_poly
 11201 ;; This function uses a non-reentrant model
 11202 ;;
 11203                           
 11204                           	psect	text58
 11205  001126                     __ptext58:
 11206                           	opt stack 0
 11207  001126                     ___ftmul:
 11208                           	opt stack 25
 11209                           
 11210                           ;incstack = 0
 11211  001126  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 11212  00112A  0100               	movlb	0	; () banked
 11213  00112C  6B70               	clrf	(??___ftmul+1)& (0+255),b
 11214  00112E  6B71               	clrf	(??___ftmul+2)& (0+255),b
 11215  001130  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 11216  001132  376F               	rlcf	??___ftmul& (0+255),f,b
 11217  001134  E301               	bnc	u5511
 11218  001136  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 11219  001138                     u5511:
 11220  001138  516F               	movf	??___ftmul& (0+255),w,b
 11221  00113A  6F72               	movwf	___ftmul@exp& (0+255),b
 11222  00113C  5172               	movf	___ftmul@exp& (0+255),w,b
 11223  00113E  A4D8               	btfss	status,2,c
 11224  001140  D007               	goto	l1563
 11225                           
 11226                           ; BSR set to: 0
 11227  001142  0E00               	movlw	0
 11228  001144  6F69               	movwf	?___ftmul& (0+255),b
 11229  001146  0E00               	movlw	0
 11230  001148  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 11231  00114A  0E00               	movlw	0
 11232  00114C  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 11233                           
 11234                           ; BSR set to: 0
 11235  00114E  0012               	return	
 11236  001150                     l1563:
 11237                           
 11238                           ; BSR set to: 0
 11239                           
 11240                           ; BSR set to: 0
 11241  001150  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 11242  001154  6B70               	clrf	(??___ftmul+1)& (0+255),b
 11243  001156  6B71               	clrf	(??___ftmul+2)& (0+255),b
 11244  001158  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 11245  00115A  376F               	rlcf	??___ftmul& (0+255),f,b
 11246  00115C  E301               	bnc	u5531
 11247  00115E  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 11248  001160                     u5531:
 11249  001160  516F               	movf	??___ftmul& (0+255),w,b
 11250  001162  6F77               	movwf	___ftmul@sign& (0+255),b
 11251  001164  5177               	movf	___ftmul@sign& (0+255),w,b
 11252  001166  A4D8               	btfss	status,2,c
 11253  001168  D007               	goto	l1565
 11254                           
 11255                           ; BSR set to: 0
 11256  00116A  0E00               	movlw	0
 11257  00116C  6F69               	movwf	?___ftmul& (0+255),b
 11258  00116E  0E00               	movlw	0
 11259  001170  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 11260  001172  0E00               	movlw	0
 11261  001174  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 11262                           
 11263                           ; BSR set to: 0
 11264  001176  0012               	return	
 11265  001178                     l1565:
 11266                           
 11267                           ; BSR set to: 0
 11268                           
 11269                           ; BSR set to: 0
 11270  001178  5177               	movf	___ftmul@sign& (0+255),w,b
 11271  00117A  0F7B               	addlw	123
 11272  00117C  2772               	addwf	___ftmul@exp& (0+255),f,b
 11273                           
 11274                           ; BSR set to: 0
 11275  00117E  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 11276  001182  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 11277  001184  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 11278  001186  0E80               	movlw	128
 11279  001188  1777               	andwf	___ftmul@sign& (0+255),f,b
 11280                           
 11281                           ; BSR set to: 0
 11282  00118A  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 11283                           
 11284                           ; BSR set to: 0
 11285  00118C  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 11286                           
 11287                           ; BSR set to: 0
 11288  00118E  0EFF               	movlw	255
 11289  001190  176C               	andwf	___ftmul@f2& (0+255),f,b
 11290  001192  0EFF               	movlw	255
 11291  001194  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 11292  001196  0E00               	movlw	0
 11293  001198  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 11294                           
 11295                           ; BSR set to: 0
 11296  00119A  0E00               	movlw	0
 11297  00119C  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 11298  00119E  0E00               	movlw	0
 11299  0011A0  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 11300  0011A2  0E00               	movlw	0
 11301  0011A4  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 11302                           
 11303                           ; BSR set to: 0
 11304  0011A6  0E07               	movlw	7
 11305  0011A8  6F76               	movwf	___ftmul@cntr& (0+255),b
 11306  0011AA                     
 11307                           ; BSR set to: 0
 11308                           
 11309                           ; BSR set to: 0
 11310  0011AA  A169               	btfss	___ftmul@f1& (0+255),0,b
 11311  0011AC  D006               	goto	l1567
 11312                           
 11313                           ; BSR set to: 0
 11314  0011AE  516C               	movf	___ftmul@f2& (0+255),w,b
 11315  0011B0  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11316  0011B2  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 11317  0011B4  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11318  0011B6  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 11319  0011B8  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11320  0011BA                     l1567:
 11321                           
 11322                           ; BSR set to: 0
 11323                           
 11324                           ; BSR set to: 0
 11325  0011BA  90D8               	bcf	status,0,c
 11326  0011BC  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11327  0011BE  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11328  0011C0  3369               	rrcf	___ftmul@f1& (0+255),f,b
 11329  0011C2  90D8               	bcf	status,0,c
 11330  0011C4  376C               	rlcf	___ftmul@f2& (0+255),f,b
 11331  0011C6  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 11332  0011C8  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 11333                           
 11334                           ; BSR set to: 0
 11335  0011CA  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 11336  0011CC  D7EE               	goto	l1566
 11337                           
 11338                           ; BSR set to: 0
 11339                           
 11340                           ; BSR set to: 0
 11341  0011CE  0E09               	movlw	9
 11342  0011D0  6F76               	movwf	___ftmul@cntr& (0+255),b
 11343  0011D2                     
 11344                           ; BSR set to: 0
 11345                           
 11346                           ; BSR set to: 0
 11347  0011D2  A169               	btfss	___ftmul@f1& (0+255),0,b
 11348  0011D4  D006               	goto	l1570
 11349                           
 11350                           ; BSR set to: 0
 11351  0011D6  516C               	movf	___ftmul@f2& (0+255),w,b
 11352  0011D8  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11353  0011DA  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 11354  0011DC  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11355  0011DE  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 11356  0011E0  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11357  0011E2                     l1570:
 11358                           
 11359                           ; BSR set to: 0
 11360                           
 11361                           ; BSR set to: 0
 11362  0011E2  90D8               	bcf	status,0,c
 11363  0011E4  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11364  0011E6  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11365  0011E8  3369               	rrcf	___ftmul@f1& (0+255),f,b
 11366  0011EA  90D8               	bcf	status,0,c
 11367  0011EC  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 11368  0011EE  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 11369  0011F0  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 11370                           
 11371                           ; BSR set to: 0
 11372  0011F2  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 11373  0011F4  D7EE               	goto	l1569
 11374                           
 11375                           ; BSR set to: 0
 11376                           
 11377                           ; BSR set to: 0
 11378  0011F6  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 11379  0011FA  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11380  0011FE  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11381  001202  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 11382  001206  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 11383  00120A  ECA7  F00C         	call	___ftpack	;wreg free
 11384  00120E  C018  F069         	movff	?___ftpack,?___ftmul
 11385  001212  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 11386  001216  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 11387  00121A  0012               	return	
 11388  00121C                     __end_of___ftmul:
 11389                           	opt stack 0
 11390                           tosu	equ	0xFFF
 11391                           tosh	equ	0xFFE
 11392                           tosl	equ	0xFFD
 11393                           pclath	equ	0xFFA
 11394                           tblptru	equ	0xFF8
 11395                           tblptrh	equ	0xFF7
 11396                           tblptrl	equ	0xFF6
 11397                           tablat	equ	0xFF5
 11398                           prodh	equ	0xFF4
 11399                           prodl	equ	0xFF3
 11400                           intcon	equ	0xFF2
 11401                           intcon2	equ	0xFF1
 11402                           postinc0	equ	0xFEE
 11403                           wreg	equ	0xFE8
 11404                           postdec1	equ	0xFE5
 11405                           fsr1l	equ	0xFE1
 11406                           indf2	equ	0xFDF
 11407                           postinc2	equ	0xFDE
 11408                           postdec2	equ	0xFDD
 11409                           fsr2h	equ	0xFDA
 11410                           fsr2l	equ	0xFD9
 11411                           status	equ	0xFD8
 11412                           
 11413 ;; *************** function ___ftsub *****************
 11414 ;; Defined at:
 11415 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 11416 ;; Parameters:    Size  Location     Type
 11417 ;;  f1              3   36[BANK0 ] float 
 11418 ;;  f2              3   39[BANK0 ] float 
 11419 ;; Auto vars:     Size  Location     Type
 11420 ;;		None
 11421 ;; Return value:  Size  Location     Type
 11422 ;;                  3   36[BANK0 ] float 
 11423 ;; Registers used:
 11424 ;;		wreg, status,2, status,0, cstack
 11425 ;; Tracked objects:
 11426 ;;		On entry : 0/0
 11427 ;;		On exit  : 0/0
 11428 ;;		Unchanged: 0/0
 11429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11430 ;;      Params:         0       6       0       0       0       0       0
 11431 ;;      Locals:         0       0       0       0       0       0       0
 11432 ;;      Temps:          0       0       0       0       0       0       0
 11433 ;;      Totals:         0       6       0       0       0       0       0
 11434 ;;Total ram usage:        6 bytes
 11435 ;; Hardware stack levels used:    1
 11436 ;; Hardware stack levels required when called:    5
 11437 ;; This function calls:
 11438 ;;		___ftadd
 11439 ;; This function is called by:
 11440 ;;		_exp
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           	psect	text59
 11445  0021C6                     __ptext59:
 11446                           	opt stack 0
 11447  0021C6                     ___ftsub:
 11448                           	opt stack 22
 11449                           
 11450                           ;incstack = 0
 11451  0021C6  0100               	movlb	0	; () banked
 11452  0021C8  5187               	movf	___ftsub@f2& (0+255),w,b
 11453  0021CA  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11454  0021CC  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11455  0021CE  B4D8               	btfsc	status,2,c
 11456  0021D0  D006               	goto	l1580
 11457                           
 11458                           ; BSR set to: 0
 11459  0021D2  0E00               	movlw	0
 11460  0021D4  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 11461  0021D6  0E00               	movlw	0
 11462  0021D8  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11463  0021DA  0E80               	movlw	128
 11464  0021DC  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11465  0021DE                     l1580:
 11466                           
 11467                           ; BSR set to: 0
 11468                           
 11469                           ; BSR set to: 0
 11470  0021DE  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 11471  0021E2  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 11472  0021E6  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 11473  0021EA  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 11474  0021EE  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 11475  0021F2  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 11476  0021F6  ECB3  F004         	call	___ftadd	;wreg free
 11477  0021FA  C078  F084         	movff	?___ftadd,?___ftsub
 11478  0021FE  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 11479  002202  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 11480  002206  0012               	return	
 11481  002208                     __end_of___ftsub:
 11482                           	opt stack 0
 11483                           tosu	equ	0xFFF
 11484                           tosh	equ	0xFFE
 11485                           tosl	equ	0xFFD
 11486                           pclath	equ	0xFFA
 11487                           tblptru	equ	0xFF8
 11488                           tblptrh	equ	0xFF7
 11489                           tblptrl	equ	0xFF6
 11490                           tablat	equ	0xFF5
 11491                           prodh	equ	0xFF4
 11492                           prodl	equ	0xFF3
 11493                           intcon	equ	0xFF2
 11494                           intcon2	equ	0xFF1
 11495                           postinc0	equ	0xFEE
 11496                           wreg	equ	0xFE8
 11497                           postdec1	equ	0xFE5
 11498                           fsr1l	equ	0xFE1
 11499                           indf2	equ	0xFDF
 11500                           postinc2	equ	0xFDE
 11501                           postdec2	equ	0xFDD
 11502                           fsr2h	equ	0xFDA
 11503                           fsr2l	equ	0xFD9
 11504                           status	equ	0xFD8
 11505                           
 11506 ;; *************** function ___ftadd *****************
 11507 ;; Defined at:
 11508 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 11509 ;; Parameters:    Size  Location     Type
 11510 ;;  f1              3   24[BANK0 ] float 
 11511 ;;  f2              3   27[BANK0 ] float 
 11512 ;; Auto vars:     Size  Location     Type
 11513 ;;  exp1            1   35[BANK0 ] unsigned char 
 11514 ;;  exp2            1   34[BANK0 ] unsigned char 
 11515 ;;  sign            1   33[BANK0 ] unsigned char 
 11516 ;; Return value:  Size  Location     Type
 11517 ;;                  3   24[BANK0 ] float 
 11518 ;; Registers used:
 11519 ;;		wreg, status,2, status,0, cstack
 11520 ;; Tracked objects:
 11521 ;;		On entry : 0/0
 11522 ;;		On exit  : 0/0
 11523 ;;		Unchanged: 0/0
 11524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11525 ;;      Params:         0       6       0       0       0       0       0
 11526 ;;      Locals:         0       3       0       0       0       0       0
 11527 ;;      Temps:          0       3       0       0       0       0       0
 11528 ;;      Totals:         0      12       0       0       0       0       0
 11529 ;;Total ram usage:       12 bytes
 11530 ;; Hardware stack levels used:    1
 11531 ;; Hardware stack levels required when called:    4
 11532 ;; This function calls:
 11533 ;;		___ftpack
 11534 ;; This function is called by:
 11535 ;;		___ftsub
 11536 ;;		_floor
 11537 ;;		_log
 11538 ;;		_eval_poly
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           	psect	text60
 11543  000966                     __ptext60:
 11544                           	opt stack 0
 11545  000966                     ___ftadd:
 11546                           	opt stack 22
 11547                           
 11548                           ;incstack = 0
 11549  000966  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 11550  00096A  0100               	movlb	0	; () banked
 11551  00096C  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 11552  00096E  6B80               	clrf	(??___ftadd+2)& (0+255),b
 11553  000970  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 11554  000972  377E               	rlcf	??___ftadd& (0+255),f,b
 11555  000974  E301               	bnc	u5301
 11556  000976  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 11557  000978                     u5301:
 11558  000978  517E               	movf	??___ftadd& (0+255),w,b
 11559  00097A  6F83               	movwf	___ftadd@exp1& (0+255),b
 11560  00097C  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 11561  000980  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 11562  000982  6B80               	clrf	(??___ftadd+2)& (0+255),b
 11563  000984  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11564  000986  377E               	rlcf	??___ftadd& (0+255),f,b
 11565  000988  E301               	bnc	u5311
 11566  00098A  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 11567  00098C                     u5311:
 11568  00098C  517E               	movf	??___ftadd& (0+255),w,b
 11569  00098E  6F82               	movwf	___ftadd@exp2& (0+255),b
 11570                           
 11571                           ; BSR set to: 0
 11572  000990  5183               	movf	___ftadd@exp1& (0+255),w,b
 11573  000992  B4D8               	btfsc	status,2,c
 11574  000994  D00B               	goto	u5340
 11575                           
 11576                           ; BSR set to: 0
 11577  000996  5182               	movf	___ftadd@exp2& (0+255),w,b
 11578  000998  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 11579  00099A  B0D8               	btfsc	status,0,c
 11580  00099C  D00E               	goto	l1515
 11581                           
 11582                           ; BSR set to: 0
 11583  00099E  5183               	movf	___ftadd@exp1& (0+255),w,b
 11584  0009A0  0800               	sublw	0
 11585  0009A2  2582               	addwf	___ftadd@exp2& (0+255),w,b
 11586  0009A4  6F7E               	movwf	??___ftadd& (0+255),b
 11587  0009A6  0E18               	movlw	24
 11588  0009A8  657E               	cpfsgt	??___ftadd& (0+255),b
 11589  0009AA  D007               	goto	l1515
 11590  0009AC                     u5340:
 11591                           
 11592                           ; BSR set to: 0
 11593  0009AC  C07B  F078         	movff	___ftadd@f2,?___ftadd
 11594  0009B0  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 11595  0009B4  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 11596  0009B8  0012               	return	
 11597  0009BA                     l1515:
 11598                           
 11599                           ; BSR set to: 0
 11600                           
 11601                           ; BSR set to: 0
 11602  0009BA  5182               	movf	___ftadd@exp2& (0+255),w,b
 11603  0009BC  B4D8               	btfsc	status,2,c
 11604  0009BE  D00B               	goto	u5370
 11605                           
 11606                           ; BSR set to: 0
 11607  0009C0  5183               	movf	___ftadd@exp1& (0+255),w,b
 11608  0009C2  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 11609  0009C4  B0D8               	btfsc	status,0,c
 11610  0009C6  D00E               	goto	l1519
 11611                           
 11612                           ; BSR set to: 0
 11613  0009C8  5182               	movf	___ftadd@exp2& (0+255),w,b
 11614  0009CA  0800               	sublw	0
 11615  0009CC  2583               	addwf	___ftadd@exp1& (0+255),w,b
 11616  0009CE  6F7E               	movwf	??___ftadd& (0+255),b
 11617  0009D0  0E18               	movlw	24
 11618  0009D2  657E               	cpfsgt	??___ftadd& (0+255),b
 11619  0009D4  D007               	goto	l1519
 11620  0009D6                     u5370:
 11621                           
 11622                           ; BSR set to: 0
 11623  0009D6  C078  F078         	movff	___ftadd@f1,?___ftadd
 11624  0009DA  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 11625  0009DE  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 11626  0009E2  0012               	return	
 11627  0009E4                     l1519:
 11628                           
 11629                           ; BSR set to: 0
 11630                           
 11631                           ; BSR set to: 0
 11632  0009E4  0E06               	movlw	6
 11633  0009E6  6F81               	movwf	___ftadd@sign& (0+255),b
 11634                           
 11635                           ; BSR set to: 0
 11636  0009E8  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 11637                           
 11638                           ; BSR set to: 0
 11639  0009EA  8F81               	bsf	___ftadd@sign& (0+255),7,b
 11640                           
 11641                           ; BSR set to: 0
 11642                           
 11643                           ; BSR set to: 0
 11644  0009EC  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 11645                           
 11646                           ; BSR set to: 0
 11647  0009EE  8D81               	bsf	___ftadd@sign& (0+255),6,b
 11648                           
 11649                           ; BSR set to: 0
 11650  0009F0  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11651                           
 11652                           ; BSR set to: 0
 11653  0009F2  0EFF               	movlw	255
 11654  0009F4  1778               	andwf	___ftadd@f1& (0+255),f,b
 11655  0009F6  0EFF               	movlw	255
 11656  0009F8  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11657  0009FA  0E00               	movlw	0
 11658  0009FC  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11659  0009FE  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11660                           
 11661                           ; BSR set to: 0
 11662  000A00  0EFF               	movlw	255
 11663  000A02  177B               	andwf	___ftadd@f2& (0+255),f,b
 11664  000A04  0EFF               	movlw	255
 11665  000A06  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11666  000A08  0E00               	movlw	0
 11667  000A0A  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11668                           
 11669                           ; BSR set to: 0
 11670  000A0C  5182               	movf	___ftadd@exp2& (0+255),w,b
 11671  000A0E  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 11672  000A10  B0D8               	btfsc	status,0,c
 11673  000A12  D01B               	goto	l1524
 11674  000A14                     u5400:
 11675                           
 11676                           ; BSR set to: 0
 11677                           
 11678                           ; BSR set to: 0
 11679  000A14  90D8               	bcf	status,0,c
 11680  000A16  377B               	rlcf	___ftadd@f2& (0+255),f,b
 11681  000A18  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11682  000A1A  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11683  000A1C  0782               	decf	___ftadd@exp2& (0+255),f,b
 11684                           
 11685                           ; BSR set to: 0
 11686  000A1E  5183               	movf	___ftadd@exp1& (0+255),w,b
 11687  000A20  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 11688  000A22  B4D8               	btfsc	status,2,c
 11689  000A24  D00D               	goto	l1529
 11690                           
 11691                           ; BSR set to: 0
 11692  000A26  0781               	decf	___ftadd@sign& (0+255),f,b
 11693  000A28  C081  F07E         	movff	___ftadd@sign,??___ftadd
 11694  000A2C  0E07               	movlw	7
 11695  000A2E  177E               	andwf	??___ftadd& (0+255),f,b
 11696  000A30  B4D8               	btfsc	status,2,c
 11697  000A32  D006               	goto	l1529
 11698  000A34  D7EF               	goto	u5400
 11699  000A36                     
 11700                           ; BSR set to: 0
 11701                           
 11702                           ; BSR set to: 0
 11703  000A36  90D8               	bcf	status,0,c
 11704  000A38  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11705  000A3A  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11706  000A3C  3378               	rrcf	___ftadd@f1& (0+255),f,b
 11707  000A3E  2B83               	incf	___ftadd@exp1& (0+255),f,b
 11708  000A40                     l1529:
 11709                           
 11710                           ; BSR set to: 0
 11711                           
 11712                           ; BSR set to: 0
 11713  000A40  5182               	movf	___ftadd@exp2& (0+255),w,b
 11714  000A42  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 11715  000A44  B4D8               	btfsc	status,2,c
 11716  000A46  D01F               	goto	u5470
 11717  000A48  D7F6               	goto	l1530
 11718  000A4A                     l1524:
 11719                           
 11720                           ; BSR set to: 0
 11721                           
 11722                           ; BSR set to: 0
 11723  000A4A  5183               	movf	___ftadd@exp1& (0+255),w,b
 11724  000A4C  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 11725  000A4E  B0D8               	btfsc	status,0,c
 11726  000A50  D01A               	goto	u5470
 11727  000A52                     u5440:
 11728                           
 11729                           ; BSR set to: 0
 11730                           
 11731                           ; BSR set to: 0
 11732  000A52  90D8               	bcf	status,0,c
 11733  000A54  3778               	rlcf	___ftadd@f1& (0+255),f,b
 11734  000A56  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11735  000A58  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11736  000A5A  0783               	decf	___ftadd@exp1& (0+255),f,b
 11737                           
 11738                           ; BSR set to: 0
 11739  000A5C  5183               	movf	___ftadd@exp1& (0+255),w,b
 11740  000A5E  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 11741  000A60  B4D8               	btfsc	status,2,c
 11742  000A62  D00D               	goto	l1538
 11743                           
 11744                           ; BSR set to: 0
 11745  000A64  0781               	decf	___ftadd@sign& (0+255),f,b
 11746  000A66  C081  F07E         	movff	___ftadd@sign,??___ftadd
 11747  000A6A  0E07               	movlw	7
 11748  000A6C  177E               	andwf	??___ftadd& (0+255),f,b
 11749  000A6E  B4D8               	btfsc	status,2,c
 11750  000A70  D006               	goto	l1538
 11751  000A72  D7EF               	goto	u5440
 11752  000A74                     
 11753                           ; BSR set to: 0
 11754                           
 11755                           ; BSR set to: 0
 11756  000A74  90D8               	bcf	status,0,c
 11757  000A76  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11758  000A78  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11759  000A7A  337B               	rrcf	___ftadd@f2& (0+255),f,b
 11760  000A7C  2B82               	incf	___ftadd@exp2& (0+255),f,b
 11761  000A7E                     l1538:
 11762                           
 11763                           ; BSR set to: 0
 11764                           
 11765                           ; BSR set to: 0
 11766  000A7E  5182               	movf	___ftadd@exp2& (0+255),w,b
 11767  000A80  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 11768  000A82  A4D8               	btfss	status,2,c
 11769  000A84  D7F7               	goto	l1539
 11770  000A86                     u5470:
 11771                           
 11772                           ; BSR set to: 0
 11773                           
 11774                           ; BSR set to: 0
 11775                           
 11776                           ; BSR set to: 0
 11777  000A86  AF81               	btfss	___ftadd@sign& (0+255),7,b
 11778  000A88  D00C               	goto	l1541
 11779                           
 11780                           ; BSR set to: 0
 11781  000A8A  0EFF               	movlw	255
 11782  000A8C  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 11783  000A8E  0EFF               	movlw	255
 11784  000A90  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11785  000A92  0EFF               	movlw	255
 11786  000A94  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11787  000A96  0E01               	movlw	1
 11788  000A98  2778               	addwf	___ftadd@f1& (0+255),f,b
 11789  000A9A  0E00               	movlw	0
 11790  000A9C  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11791  000A9E  0E00               	movlw	0
 11792  000AA0  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11793  000AA2                     l1541:
 11794                           
 11795                           ; BSR set to: 0
 11796  000AA2  AD81               	btfss	___ftadd@sign& (0+255),6,b
 11797  000AA4  D00C               	goto	l1542
 11798                           
 11799                           ; BSR set to: 0
 11800  000AA6  0EFF               	movlw	255
 11801  000AA8  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 11802  000AAA  0EFF               	movlw	255
 11803  000AAC  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11804  000AAE  0EFF               	movlw	255
 11805  000AB0  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11806  000AB2  0E01               	movlw	1
 11807  000AB4  277B               	addwf	___ftadd@f2& (0+255),f,b
 11808  000AB6  0E00               	movlw	0
 11809  000AB8  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11810  000ABA  0E00               	movlw	0
 11811  000ABC  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11812  000ABE                     l1542:
 11813                           
 11814                           ; BSR set to: 0
 11815                           
 11816                           ; BSR set to: 0
 11817  000ABE  0E00               	movlw	0
 11818  000AC0  6F81               	movwf	___ftadd@sign& (0+255),b
 11819                           
 11820                           ; BSR set to: 0
 11821  000AC2  5178               	movf	___ftadd@f1& (0+255),w,b
 11822  000AC4  277B               	addwf	___ftadd@f2& (0+255),f,b
 11823  000AC6  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 11824  000AC8  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11825  000ACA  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 11826  000ACC  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11827                           
 11828                           ; BSR set to: 0
 11829  000ACE  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11830  000AD0  D00E               	goto	l1543
 11831                           
 11832                           ; BSR set to: 0
 11833  000AD2  0EFF               	movlw	255
 11834  000AD4  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 11835  000AD6  0EFF               	movlw	255
 11836  000AD8  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11837  000ADA  0EFF               	movlw	255
 11838  000ADC  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11839  000ADE  0E01               	movlw	1
 11840  000AE0  277B               	addwf	___ftadd@f2& (0+255),f,b
 11841  000AE2  0E00               	movlw	0
 11842  000AE4  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11843  000AE6  0E00               	movlw	0
 11844  000AE8  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11845                           
 11846                           ; BSR set to: 0
 11847  000AEA  0E01               	movlw	1
 11848  000AEC  6F81               	movwf	___ftadd@sign& (0+255),b
 11849  000AEE                     l1543:
 11850                           
 11851                           ; BSR set to: 0
 11852                           
 11853                           ; BSR set to: 0
 11854  000AEE  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 11855  000AF2  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 11856  000AF6  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 11857  000AFA  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 11858  000AFE  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 11859  000B02  ECA7  F00C         	call	___ftpack	;wreg free
 11860  000B06  C018  F078         	movff	?___ftpack,?___ftadd
 11861  000B0A  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 11862  000B0E  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 11863  000B12  0012               	return	
 11864  000B14                     __end_of___ftadd:
 11865                           	opt stack 0
 11866                           tosu	equ	0xFFF
 11867                           tosh	equ	0xFFE
 11868                           tosl	equ	0xFFD
 11869                           pclath	equ	0xFFA
 11870                           tblptru	equ	0xFF8
 11871                           tblptrh	equ	0xFF7
 11872                           tblptrl	equ	0xFF6
 11873                           tablat	equ	0xFF5
 11874                           prodh	equ	0xFF4
 11875                           prodl	equ	0xFF3
 11876                           intcon	equ	0xFF2
 11877                           intcon2	equ	0xFF1
 11878                           postinc0	equ	0xFEE
 11879                           wreg	equ	0xFE8
 11880                           postdec1	equ	0xFE5
 11881                           fsr1l	equ	0xFE1
 11882                           indf2	equ	0xFDF
 11883                           postinc2	equ	0xFDE
 11884                           postdec2	equ	0xFDD
 11885                           fsr2h	equ	0xFDA
 11886                           fsr2l	equ	0xFD9
 11887                           status	equ	0xFD8
 11888                           
 11889 ;; *************** function ___ftneg *****************
 11890 ;; Defined at:
 11891 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 11892 ;; Parameters:    Size  Location     Type
 11893 ;;  f1              3   23[COMRAM] float 
 11894 ;; Auto vars:     Size  Location     Type
 11895 ;;		None
 11896 ;; Return value:  Size  Location     Type
 11897 ;;                  3   23[COMRAM] float 
 11898 ;; Registers used:
 11899 ;;		wreg, status,2, status,0
 11900 ;; Tracked objects:
 11901 ;;		On entry : 0/0
 11902 ;;		On exit  : 0/0
 11903 ;;		Unchanged: 0/0
 11904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11905 ;;      Params:         3       0       0       0       0       0       0
 11906 ;;      Locals:         0       0       0       0       0       0       0
 11907 ;;      Temps:          0       0       0       0       0       0       0
 11908 ;;      Totals:         3       0       0       0       0       0       0
 11909 ;;Total ram usage:        3 bytes
 11910 ;; Hardware stack levels used:    1
 11911 ;; Hardware stack levels required when called:    3
 11912 ;; This function calls:
 11913 ;;		Nothing
 11914 ;; This function is called by:
 11915 ;;		_pow
 11916 ;;		_exp
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920                           	psect	text61
 11921  002540                     __ptext61:
 11922                           	opt stack 0
 11923  002540                     ___ftneg:
 11924                           	opt stack 24
 11925                           
 11926                           ;incstack = 0
 11927  002540  5018               	movf	___ftneg@f1,w,c
 11928  002542  1019               	iorwf	___ftneg@f1+1,w,c
 11929  002544  101A               	iorwf	___ftneg@f1+2,w,c
 11930  002546  B4D8               	btfsc	status,2,c
 11931  002548  D006               	goto	l1574
 11932  00254A  0E00               	movlw	0
 11933  00254C  1A18               	xorwf	___ftneg@f1,f,c
 11934  00254E  0E00               	movlw	0
 11935  002550  1A19               	xorwf	___ftneg@f1+1,f,c
 11936  002552  0E80               	movlw	128
 11937  002554  1A1A               	xorwf	___ftneg@f1+2,f,c
 11938  002556                     l1574:
 11939  002556  C018  F018         	movff	___ftneg@f1,?___ftneg
 11940  00255A  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 11941  00255E  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 11942  002562  0012               	return		;funcret
 11943  002564                     __end_of___ftneg:
 11944                           	opt stack 0
 11945                           tosu	equ	0xFFF
 11946                           tosh	equ	0xFFE
 11947                           tosl	equ	0xFFD
 11948                           pclath	equ	0xFFA
 11949                           tblptru	equ	0xFF8
 11950                           tblptrh	equ	0xFF7
 11951                           tblptrl	equ	0xFF6
 11952                           tablat	equ	0xFF5
 11953                           prodh	equ	0xFF4
 11954                           prodl	equ	0xFF3
 11955                           intcon	equ	0xFF2
 11956                           intcon2	equ	0xFF1
 11957                           postinc0	equ	0xFEE
 11958                           wreg	equ	0xFE8
 11959                           postdec1	equ	0xFE5
 11960                           fsr1l	equ	0xFE1
 11961                           indf2	equ	0xFDF
 11962                           postinc2	equ	0xFDE
 11963                           postdec2	equ	0xFDD
 11964                           fsr2h	equ	0xFDA
 11965                           fsr2l	equ	0xFD9
 11966                           status	equ	0xFD8
 11967                           
 11968 ;; *************** function ___ftdiv *****************
 11969 ;; Defined at:
 11970 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11971 ;; Parameters:    Size  Location     Type
 11972 ;;  f1              3   40[COMRAM] float 
 11973 ;;  f2              3   43[COMRAM] float 
 11974 ;; Auto vars:     Size  Location     Type
 11975 ;;  f3              3    4[BANK0 ] float 
 11976 ;;  sign            1    8[BANK0 ] unsigned char 
 11977 ;;  exp             1    7[BANK0 ] unsigned char 
 11978 ;;  cntr            1    3[BANK0 ] unsigned char 
 11979 ;; Return value:  Size  Location     Type
 11980 ;;                  3   40[COMRAM] float 
 11981 ;; Registers used:
 11982 ;;		wreg, status,2, status,0, cstack
 11983 ;; Tracked objects:
 11984 ;;		On entry : 0/0
 11985 ;;		On exit  : 0/0
 11986 ;;		Unchanged: 0/0
 11987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11988 ;;      Params:         6       0       0       0       0       0       0
 11989 ;;      Locals:         0       6       0       0       0       0       0
 11990 ;;      Temps:          0       3       0       0       0       0       0
 11991 ;;      Totals:         6       9       0       0       0       0       0
 11992 ;;Total ram usage:       15 bytes
 11993 ;; Hardware stack levels used:    1
 11994 ;; Hardware stack levels required when called:    4
 11995 ;; This function calls:
 11996 ;;		___ftpack
 11997 ;; This function is called by:
 11998 ;;		_AdcConvert
 11999 ;;		_CheckFlashPrecentage
 12000 ;;		_exp
 12001 ;; This function uses a non-reentrant model
 12002 ;;
 12003                           
 12004                           	psect	text62
 12005  00121C                     __ptext62:
 12006                           	opt stack 0
 12007  00121C                     ___ftdiv:
 12008                           	opt stack 25
 12009                           
 12010                           ;incstack = 0
 12011  00121C  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 12012  001220  0100               	movlb	0	; () banked
 12013  001222  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 12014  001224  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 12015  001226  342A               	rlcf	___ftdiv@f1+1,w,c
 12016  001228  3760               	rlcf	??___ftdiv& (0+255),f,b
 12017  00122A  E301               	bnc	u5581
 12018  00122C  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 12019  00122E                     u5581:
 12020  00122E  5160               	movf	??___ftdiv& (0+255),w,b
 12021  001230  6F67               	movwf	___ftdiv@exp& (0+255),b
 12022  001232  5167               	movf	___ftdiv@exp& (0+255),w,b
 12023  001234  A4D8               	btfss	status,2,c
 12024  001236  D007               	goto	l1548
 12025                           
 12026                           ; BSR set to: 0
 12027  001238  0E00               	movlw	0
 12028  00123A  6E29               	movwf	?___ftdiv,c
 12029  00123C  0E00               	movlw	0
 12030  00123E  6E2A               	movwf	?___ftdiv+1,c
 12031  001240  0E00               	movlw	0
 12032  001242  6E2B               	movwf	?___ftdiv+2,c
 12033                           
 12034                           ; BSR set to: 0
 12035  001244  0012               	return	
 12036  001246                     l1548:
 12037                           
 12038                           ; BSR set to: 0
 12039                           
 12040                           ; BSR set to: 0
 12041  001246  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 12042  00124A  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 12043  00124C  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 12044  00124E  342D               	rlcf	___ftdiv@f2+1,w,c
 12045  001250  3760               	rlcf	??___ftdiv& (0+255),f,b
 12046  001252  E301               	bnc	u5601
 12047  001254  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 12048  001256                     u5601:
 12049  001256  5160               	movf	??___ftdiv& (0+255),w,b
 12050  001258  6F68               	movwf	___ftdiv@sign& (0+255),b
 12051  00125A  5168               	movf	___ftdiv@sign& (0+255),w,b
 12052  00125C  A4D8               	btfss	status,2,c
 12053  00125E  D007               	goto	l1550
 12054                           
 12055                           ; BSR set to: 0
 12056  001260  0E00               	movlw	0
 12057  001262  6E29               	movwf	?___ftdiv,c
 12058  001264  0E00               	movlw	0
 12059  001266  6E2A               	movwf	?___ftdiv+1,c
 12060  001268  0E00               	movlw	0
 12061  00126A  6E2B               	movwf	?___ftdiv+2,c
 12062                           
 12063                           ; BSR set to: 0
 12064  00126C  0012               	return	
 12065  00126E                     l1550:
 12066                           
 12067                           ; BSR set to: 0
 12068                           
 12069                           ; BSR set to: 0
 12070  00126E  0E00               	movlw	0
 12071  001270  6F64               	movwf	___ftdiv@f3& (0+255),b
 12072  001272  0E00               	movlw	0
 12073  001274  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 12074  001276  0E00               	movlw	0
 12075  001278  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 12076                           
 12077                           ; BSR set to: 0
 12078  00127A  5168               	movf	___ftdiv@sign& (0+255),w,b
 12079  00127C  0F89               	addlw	137
 12080  00127E  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 12081                           
 12082                           ; BSR set to: 0
 12083  001280  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 12084                           
 12085                           ; BSR set to: 0
 12086  001284  502E               	movf	___ftdiv@f2+2,w,c
 12087  001286  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 12088                           
 12089                           ; BSR set to: 0
 12090  001288  0E80               	movlw	128
 12091  00128A  1768               	andwf	___ftdiv@sign& (0+255),f,b
 12092                           
 12093                           ; BSR set to: 0
 12094  00128C  8E2A               	bsf	___ftdiv@f1+1,7,c
 12095                           
 12096                           ; BSR set to: 0
 12097  00128E  0EFF               	movlw	255
 12098  001290  1629               	andwf	___ftdiv@f1,f,c
 12099  001292  0EFF               	movlw	255
 12100  001294  162A               	andwf	___ftdiv@f1+1,f,c
 12101  001296  0E00               	movlw	0
 12102  001298  162B               	andwf	___ftdiv@f1+2,f,c
 12103                           
 12104                           ; BSR set to: 0
 12105  00129A  8E2D               	bsf	___ftdiv@f2+1,7,c
 12106                           
 12107                           ; BSR set to: 0
 12108  00129C  0EFF               	movlw	255
 12109  00129E  162C               	andwf	___ftdiv@f2,f,c
 12110  0012A0  0EFF               	movlw	255
 12111  0012A2  162D               	andwf	___ftdiv@f2+1,f,c
 12112  0012A4  0E00               	movlw	0
 12113  0012A6  162E               	andwf	___ftdiv@f2+2,f,c
 12114                           
 12115                           ; BSR set to: 0
 12116  0012A8  0E18               	movlw	24
 12117  0012AA  6F63               	movwf	___ftdiv@cntr& (0+255),b
 12118  0012AC                     
 12119                           ; BSR set to: 0
 12120                           
 12121                           ; BSR set to: 0
 12122  0012AC  90D8               	bcf	status,0,c
 12123  0012AE  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 12124  0012B0  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 12125  0012B2  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 12126                           
 12127                           ; BSR set to: 0
 12128  0012B4  502C               	movf	___ftdiv@f2,w,c
 12129  0012B6  5C29               	subwf	___ftdiv@f1,w,c
 12130  0012B8  502D               	movf	___ftdiv@f2+1,w,c
 12131  0012BA  582A               	subwfb	___ftdiv@f1+1,w,c
 12132  0012BC  502E               	movf	___ftdiv@f2+2,w,c
 12133  0012BE  582B               	subwfb	___ftdiv@f1+2,w,c
 12134  0012C0  A0D8               	btfss	status,0,c
 12135  0012C2  D007               	goto	l1552
 12136                           
 12137                           ; BSR set to: 0
 12138  0012C4  502C               	movf	___ftdiv@f2,w,c
 12139  0012C6  5E29               	subwf	___ftdiv@f1,f,c
 12140  0012C8  502D               	movf	___ftdiv@f2+1,w,c
 12141  0012CA  5A2A               	subwfb	___ftdiv@f1+1,f,c
 12142  0012CC  502E               	movf	___ftdiv@f2+2,w,c
 12143  0012CE  5A2B               	subwfb	___ftdiv@f1+2,f,c
 12144                           
 12145                           ; BSR set to: 0
 12146  0012D0  8164               	bsf	___ftdiv@f3& (0+255),0,b
 12147  0012D2                     l1552:
 12148                           
 12149                           ; BSR set to: 0
 12150  0012D2  90D8               	bcf	status,0,c
 12151  0012D4  3629               	rlcf	___ftdiv@f1,f,c
 12152  0012D6  362A               	rlcf	___ftdiv@f1+1,f,c
 12153  0012D8  362B               	rlcf	___ftdiv@f1+2,f,c
 12154                           
 12155                           ; BSR set to: 0
 12156  0012DA  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 12157  0012DC  D7E7               	goto	l1551
 12158                           
 12159                           ; BSR set to: 0
 12160                           
 12161                           ; BSR set to: 0
 12162  0012DE  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 12163  0012E2  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12164  0012E6  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12165  0012EA  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 12166  0012EE  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 12167  0012F2  ECA7  F00C         	call	___ftpack	;wreg free
 12168  0012F6  C018  F029         	movff	?___ftpack,?___ftdiv
 12169  0012FA  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 12170  0012FE  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 12171  001302  0012               	return	
 12172  001304                     __end_of___ftdiv:
 12173                           	opt stack 0
 12174                           tosu	equ	0xFFF
 12175                           tosh	equ	0xFFE
 12176                           tosl	equ	0xFFD
 12177                           pclath	equ	0xFFA
 12178                           tblptru	equ	0xFF8
 12179                           tblptrh	equ	0xFF7
 12180                           tblptrl	equ	0xFF6
 12181                           tablat	equ	0xFF5
 12182                           prodh	equ	0xFF4
 12183                           prodl	equ	0xFF3
 12184                           intcon	equ	0xFF2
 12185                           intcon2	equ	0xFF1
 12186                           postinc0	equ	0xFEE
 12187                           wreg	equ	0xFE8
 12188                           postdec1	equ	0xFE5
 12189                           fsr1l	equ	0xFE1
 12190                           indf2	equ	0xFDF
 12191                           postinc2	equ	0xFDE
 12192                           postdec2	equ	0xFDD
 12193                           fsr2h	equ	0xFDA
 12194                           fsr2l	equ	0xFD9
 12195                           status	equ	0xFD8
 12196                           
 12197 ;; *************** function ___awtoft *****************
 12198 ;; Defined at:
 12199 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 12200 ;; Parameters:    Size  Location     Type
 12201 ;;  c               2   31[COMRAM] int 
 12202 ;; Auto vars:     Size  Location     Type
 12203 ;;  sign            1   34[COMRAM] unsigned char 
 12204 ;; Return value:  Size  Location     Type
 12205 ;;                  3   31[COMRAM] float 
 12206 ;; Registers used:
 12207 ;;		wreg, status,2, status,0, cstack
 12208 ;; Tracked objects:
 12209 ;;		On entry : 0/0
 12210 ;;		On exit  : 0/0
 12211 ;;		Unchanged: 0/0
 12212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12213 ;;      Params:         3       0       0       0       0       0       0
 12214 ;;      Locals:         1       0       0       0       0       0       0
 12215 ;;      Temps:          0       0       0       0       0       0       0
 12216 ;;      Totals:         4       0       0       0       0       0       0
 12217 ;;Total ram usage:        4 bytes
 12218 ;; Hardware stack levels used:    1
 12219 ;; Hardware stack levels required when called:    4
 12220 ;; This function calls:
 12221 ;;		___ftpack
 12222 ;; This function is called by:
 12223 ;;		_exp
 12224 ;;		_log
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           	psect	text63
 12229  0022FE                     __ptext63:
 12230                           	opt stack 0
 12231  0022FE                     ___awtoft:
 12232                           	opt stack 23
 12233                           
 12234                           ;incstack = 0
 12235  0022FE  0E00               	movlw	0
 12236  002300  6E23               	movwf	___awtoft@sign,c
 12237  002302  AE21               	btfss	___awtoft@c+1,7,c
 12238  002304  D006               	goto	l1465
 12239  002306  6C20               	negf	___awtoft@c,c
 12240  002308  1E21               	comf	___awtoft@c+1,f,c
 12241  00230A  B0D8               	btfsc	status,0,c
 12242  00230C  2A21               	incf	___awtoft@c+1,f,c
 12243  00230E  0E01               	movlw	1
 12244  002310  6E23               	movwf	___awtoft@sign,c
 12245  002312                     l1465:
 12246  002312  C020  F018         	movff	___awtoft@c,___ftpack@arg
 12247  002316  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 12248  00231A  6A1A               	clrf	___ftpack@arg+2,c
 12249  00231C  0E8E               	movlw	142
 12250  00231E  6E1B               	movwf	___ftpack@exp,c
 12251  002320  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 12252  002324  ECA7  F00C         	call	___ftpack	;wreg free
 12253  002328  C018  F020         	movff	?___ftpack,?___awtoft
 12254  00232C  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 12255  002330  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 12256  002334  0012               	return	
 12257  002336                     __end_of___awtoft:
 12258                           	opt stack 0
 12259                           tosu	equ	0xFFF
 12260                           tosh	equ	0xFFE
 12261                           tosl	equ	0xFFD
 12262                           pclath	equ	0xFFA
 12263                           tblptru	equ	0xFF8
 12264                           tblptrh	equ	0xFF7
 12265                           tblptrl	equ	0xFF6
 12266                           tablat	equ	0xFF5
 12267                           prodh	equ	0xFF4
 12268                           prodl	equ	0xFF3
 12269                           intcon	equ	0xFF2
 12270                           intcon2	equ	0xFF1
 12271                           postinc0	equ	0xFEE
 12272                           wreg	equ	0xFE8
 12273                           postdec1	equ	0xFE5
 12274                           fsr1l	equ	0xFE1
 12275                           indf2	equ	0xFDF
 12276                           postinc2	equ	0xFDE
 12277                           postdec2	equ	0xFDD
 12278                           fsr2h	equ	0xFDA
 12279                           fsr2l	equ	0xFD9
 12280                           status	equ	0xFD8
 12281                           
 12282 ;; *************** function ___lltoft *****************
 12283 ;; Defined at:
 12284 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 12285 ;; Parameters:    Size  Location     Type
 12286 ;;  c               4   31[COMRAM] unsigned long 
 12287 ;; Auto vars:     Size  Location     Type
 12288 ;;  exp             1   39[COMRAM] unsigned char 
 12289 ;; Return value:  Size  Location     Type
 12290 ;;                  3   31[COMRAM] float 
 12291 ;; Registers used:
 12292 ;;		wreg, status,2, status,0, cstack
 12293 ;; Tracked objects:
 12294 ;;		On entry : 0/0
 12295 ;;		On exit  : 0/0
 12296 ;;		Unchanged: 0/0
 12297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12298 ;;      Params:         4       0       0       0       0       0       0
 12299 ;;      Locals:         1       0       0       0       0       0       0
 12300 ;;      Temps:          4       0       0       0       0       0       0
 12301 ;;      Totals:         9       0       0       0       0       0       0
 12302 ;;Total ram usage:        9 bytes
 12303 ;; Hardware stack levels used:    1
 12304 ;; Hardware stack levels required when called:    4
 12305 ;; This function calls:
 12306 ;;		___ftpack
 12307 ;; This function is called by:
 12308 ;;		_CheckFlashPrecentage
 12309 ;;		_pow
 12310 ;; This function uses a non-reentrant model
 12311 ;;
 12312                           
 12313                           	psect	text64
 12314  001F3E                     __ptext64:
 12315                           	opt stack 0
 12316  001F3E                     ___lltoft:
 12317                           	opt stack 25
 12318                           
 12319                           ;incstack = 0
 12320  001F3E  0E8E               	movlw	142
 12321  001F40  6E28               	movwf	___lltoft@exp,c
 12322  001F42  D006               	goto	l1641
 12323  001F44  90D8               	bcf	status,0,c
 12324  001F46  3223               	rrcf	___lltoft@c+3,f,c
 12325  001F48  3222               	rrcf	___lltoft@c+2,f,c
 12326  001F4A  3221               	rrcf	___lltoft@c+1,f,c
 12327  001F4C  3220               	rrcf	___lltoft@c,f,c
 12328  001F4E  2A28               	incf	___lltoft@exp,f,c
 12329  001F50                     l1641:
 12330  001F50  0E00               	movlw	0
 12331  001F52  1420               	andwf	___lltoft@c,w,c
 12332  001F54  6E24               	movwf	??___lltoft& (0+255),c
 12333  001F56  0E00               	movlw	0
 12334  001F58  1421               	andwf	___lltoft@c+1,w,c
 12335  001F5A  6E25               	movwf	(??___lltoft+1)& (0+255),c
 12336  001F5C  0E00               	movlw	0
 12337  001F5E  1422               	andwf	___lltoft@c+2,w,c
 12338  001F60  6E26               	movwf	(??___lltoft+2)& (0+255),c
 12339  001F62  0EFF               	movlw	255
 12340  001F64  1423               	andwf	___lltoft@c+3,w,c
 12341  001F66  6E27               	movwf	(??___lltoft+3)& (0+255),c
 12342  001F68  5024               	movf	??___lltoft,w,c
 12343  001F6A  1025               	iorwf	??___lltoft+1,w,c
 12344  001F6C  1026               	iorwf	??___lltoft+2,w,c
 12345  001F6E  1027               	iorwf	??___lltoft+3,w,c
 12346  001F70  A4D8               	btfss	status,2,c
 12347  001F72  D7E8               	goto	l1642
 12348  001F74  C020  F018         	movff	___lltoft@c,___ftpack@arg
 12349  001F78  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 12350  001F7C  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 12351  001F80  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 12352  001F84  0E00               	movlw	0
 12353  001F86  6E1C               	movwf	___ftpack@sign,c
 12354  001F88  ECA7  F00C         	call	___ftpack	;wreg free
 12355  001F8C  C018  F020         	movff	?___ftpack,?___lltoft
 12356  001F90  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 12357  001F94  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 12358  001F98  0012               	return	
 12359  001F9A                     __end_of___lltoft:
 12360                           	opt stack 0
 12361                           tosu	equ	0xFFF
 12362                           tosh	equ	0xFFE
 12363                           tosl	equ	0xFFD
 12364                           pclath	equ	0xFFA
 12365                           tblptru	equ	0xFF8
 12366                           tblptrh	equ	0xFF7
 12367                           tblptrl	equ	0xFF6
 12368                           tablat	equ	0xFF5
 12369                           prodh	equ	0xFF4
 12370                           prodl	equ	0xFF3
 12371                           intcon	equ	0xFF2
 12372                           intcon2	equ	0xFF1
 12373                           postinc0	equ	0xFEE
 12374                           wreg	equ	0xFE8
 12375                           postdec1	equ	0xFE5
 12376                           fsr1l	equ	0xFE1
 12377                           indf2	equ	0xFDF
 12378                           postinc2	equ	0xFDE
 12379                           postdec2	equ	0xFDD
 12380                           fsr2h	equ	0xFDA
 12381                           fsr2l	equ	0xFD9
 12382                           status	equ	0xFD8
 12383                           
 12384 ;; *************** function ___lwtoft *****************
 12385 ;; Defined at:
 12386 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 12387 ;; Parameters:    Size  Location     Type
 12388 ;;  c               2   31[COMRAM] unsigned int 
 12389 ;; Auto vars:     Size  Location     Type
 12390 ;;		None
 12391 ;; Return value:  Size  Location     Type
 12392 ;;                  3   31[COMRAM] float 
 12393 ;; Registers used:
 12394 ;;		wreg, status,2, status,0, cstack
 12395 ;; Tracked objects:
 12396 ;;		On entry : 0/0
 12397 ;;		On exit  : 0/0
 12398 ;;		Unchanged: 0/0
 12399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12400 ;;      Params:         3       0       0       0       0       0       0
 12401 ;;      Locals:         0       0       0       0       0       0       0
 12402 ;;      Temps:          0       0       0       0       0       0       0
 12403 ;;      Totals:         3       0       0       0       0       0       0
 12404 ;;Total ram usage:        3 bytes
 12405 ;; Hardware stack levels used:    1
 12406 ;; Hardware stack levels required when called:    4
 12407 ;; This function calls:
 12408 ;;		___ftpack
 12409 ;; This function is called by:
 12410 ;;		_AdcConvert
 12411 ;; This function uses a non-reentrant model
 12412 ;;
 12413                           
 12414                           	psect	text65
 12415  002564                     __ptext65:
 12416                           	opt stack 0
 12417  002564                     ___lwtoft:
 12418                           	opt stack 25
 12419                           
 12420                           ;incstack = 0
 12421  002564  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 12422  002568  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 12423  00256C  6A1A               	clrf	___ftpack@arg+2,c
 12424  00256E  0E8E               	movlw	142
 12425  002570  6E1B               	movwf	___ftpack@exp,c
 12426  002572  0E00               	movlw	0
 12427  002574  6E1C               	movwf	___ftpack@sign,c
 12428  002576  ECA7  F00C         	call	___ftpack	;wreg free
 12429  00257A  C018  F020         	movff	?___ftpack,?___lwtoft
 12430  00257E  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 12431  002582  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 12432  002586  0012               	return	
 12433  002588                     __end_of___lwtoft:
 12434                           	opt stack 0
 12435                           tosu	equ	0xFFF
 12436                           tosh	equ	0xFFE
 12437                           tosl	equ	0xFFD
 12438                           pclath	equ	0xFFA
 12439                           tblptru	equ	0xFF8
 12440                           tblptrh	equ	0xFF7
 12441                           tblptrl	equ	0xFF6
 12442                           tablat	equ	0xFF5
 12443                           prodh	equ	0xFF4
 12444                           prodl	equ	0xFF3
 12445                           intcon	equ	0xFF2
 12446                           intcon2	equ	0xFF1
 12447                           postinc0	equ	0xFEE
 12448                           wreg	equ	0xFE8
 12449                           postdec1	equ	0xFE5
 12450                           fsr1l	equ	0xFE1
 12451                           indf2	equ	0xFDF
 12452                           postinc2	equ	0xFDE
 12453                           postdec2	equ	0xFDD
 12454                           fsr2h	equ	0xFDA
 12455                           fsr2l	equ	0xFD9
 12456                           status	equ	0xFD8
 12457                           
 12458 ;; *************** function ___ftpack *****************
 12459 ;; Defined at:
 12460 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 12461 ;; Parameters:    Size  Location     Type
 12462 ;;  arg             3   23[COMRAM] unsigned um
 12463 ;;  exp             1   26[COMRAM] unsigned char 
 12464 ;;  sign            1   27[COMRAM] unsigned char 
 12465 ;; Auto vars:     Size  Location     Type
 12466 ;;		None
 12467 ;; Return value:  Size  Location     Type
 12468 ;;                  3   23[COMRAM] float 
 12469 ;; Registers used:
 12470 ;;		wreg, status,2, status,0
 12471 ;; Tracked objects:
 12472 ;;		On entry : 0/0
 12473 ;;		On exit  : 0/0
 12474 ;;		Unchanged: 0/0
 12475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12476 ;;      Params:         5       0       0       0       0       0       0
 12477 ;;      Locals:         0       0       0       0       0       0       0
 12478 ;;      Temps:          3       0       0       0       0       0       0
 12479 ;;      Totals:         8       0       0       0       0       0       0
 12480 ;;Total ram usage:        8 bytes
 12481 ;; Hardware stack levels used:    1
 12482 ;; Hardware stack levels required when called:    3
 12483 ;; This function calls:
 12484 ;;		Nothing
 12485 ;; This function is called by:
 12486 ;;		___altoft
 12487 ;;		___awtoft
 12488 ;;		___ftadd
 12489 ;;		___ftdiv
 12490 ;;		___ftmul
 12491 ;;		___lltoft
 12492 ;;		___lwtoft
 12493 ;; This function uses a non-reentrant model
 12494 ;;
 12495                           
 12496                           	psect	text66
 12497  00194E                     __ptext66:
 12498                           	opt stack 0
 12499  00194E                     ___ftpack:
 12500                           	opt stack 25
 12501                           
 12502                           ;incstack = 0
 12503  00194E  501B               	movf	___ftpack@exp,w,c
 12504  001950  B4D8               	btfsc	status,2,c
 12505  001952  D005               	goto	u5210
 12506  001954  5018               	movf	___ftpack@arg,w,c
 12507  001956  1019               	iorwf	___ftpack@arg+1,w,c
 12508  001958  101A               	iorwf	___ftpack@arg+2,w,c
 12509  00195A  A4D8               	btfss	status,2,c
 12510  00195C  D00C               	goto	l1484
 12511  00195E                     u5210:
 12512  00195E  0E00               	movlw	0
 12513  001960  6E18               	movwf	?___ftpack,c
 12514  001962  0E00               	movlw	0
 12515  001964  6E19               	movwf	?___ftpack+1,c
 12516  001966  0E00               	movlw	0
 12517  001968  6E1A               	movwf	?___ftpack+2,c
 12518  00196A  0012               	return	
 12519  00196C  2A1B               	incf	___ftpack@exp,f,c
 12520  00196E  90D8               	bcf	status,0,c
 12521  001970  321A               	rrcf	___ftpack@arg+2,f,c
 12522  001972  3219               	rrcf	___ftpack@arg+1,f,c
 12523  001974  3218               	rrcf	___ftpack@arg,f,c
 12524  001976                     l1484:
 12525  001976  0E00               	movlw	0
 12526  001978  1418               	andwf	___ftpack@arg,w,c
 12527  00197A  6E1D               	movwf	??___ftpack& (0+255),c
 12528  00197C  0E00               	movlw	0
 12529  00197E  1419               	andwf	___ftpack@arg+1,w,c
 12530  001980  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 12531  001982  0EFE               	movlw	254
 12532  001984  141A               	andwf	___ftpack@arg+2,w,c
 12533  001986  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 12534  001988  501D               	movf	??___ftpack,w,c
 12535  00198A  101E               	iorwf	??___ftpack+1,w,c
 12536  00198C  101F               	iorwf	??___ftpack+2,w,c
 12537  00198E  B4D8               	btfsc	status,2,c
 12538  001990  D00C               	goto	l1487
 12539  001992  D7EC               	goto	l1485
 12540  001994  2A1B               	incf	___ftpack@exp,f,c
 12541  001996  0E01               	movlw	1
 12542  001998  2618               	addwf	___ftpack@arg,f,c
 12543  00199A  0E00               	movlw	0
 12544  00199C  2219               	addwfc	___ftpack@arg+1,f,c
 12545  00199E  0E00               	movlw	0
 12546  0019A0  221A               	addwfc	___ftpack@arg+2,f,c
 12547  0019A2  90D8               	bcf	status,0,c
 12548  0019A4  321A               	rrcf	___ftpack@arg+2,f,c
 12549  0019A6  3219               	rrcf	___ftpack@arg+1,f,c
 12550  0019A8  3218               	rrcf	___ftpack@arg,f,c
 12551  0019AA                     l1487:
 12552  0019AA  0E00               	movlw	0
 12553  0019AC  1418               	andwf	___ftpack@arg,w,c
 12554  0019AE  6E1D               	movwf	??___ftpack& (0+255),c
 12555  0019B0  0E00               	movlw	0
 12556  0019B2  1419               	andwf	___ftpack@arg+1,w,c
 12557  0019B4  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 12558  0019B6  0EFF               	movlw	255
 12559  0019B8  141A               	andwf	___ftpack@arg+2,w,c
 12560  0019BA  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 12561  0019BC  501D               	movf	??___ftpack,w,c
 12562  0019BE  101E               	iorwf	??___ftpack+1,w,c
 12563  0019C0  101F               	iorwf	??___ftpack+2,w,c
 12564  0019C2  B4D8               	btfsc	status,2,c
 12565  0019C4  D006               	goto	l1490
 12566  0019C6  D7E6               	goto	l1488
 12567  0019C8  061B               	decf	___ftpack@exp,f,c
 12568  0019CA  90D8               	bcf	status,0,c
 12569  0019CC  3618               	rlcf	___ftpack@arg,f,c
 12570  0019CE  3619               	rlcf	___ftpack@arg+1,f,c
 12571  0019D0  361A               	rlcf	___ftpack@arg+2,f,c
 12572  0019D2                     l1490:
 12573  0019D2  BE19               	btfsc	___ftpack@arg+1,7,c
 12574  0019D4  D003               	goto	u5250
 12575  0019D6  0E02               	movlw	2
 12576  0019D8  601B               	cpfslt	___ftpack@exp,c
 12577  0019DA  D7F6               	goto	l1491
 12578  0019DC                     u5250:
 12579  0019DC  A01B               	btfss	___ftpack@exp,0,c
 12580  0019DE  9E19               	bcf	___ftpack@arg+1,7,c
 12581  0019E0  90D8               	bcf	status,0,c
 12582  0019E2  321B               	rrcf	___ftpack@exp,f,c
 12583  0019E4  501B               	movf	___ftpack@exp,w,c
 12584  0019E6  121A               	iorwf	___ftpack@arg+2,f,c
 12585  0019E8  501C               	movf	___ftpack@sign,w,c
 12586  0019EA  A4D8               	btfss	status,2,c
 12587  0019EC  8E1A               	bsf	___ftpack@arg+2,7,c
 12588  0019EE  C018  F018         	movff	___ftpack@arg,?___ftpack
 12589  0019F2  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 12590  0019F6  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 12591  0019FA  0012               	return	
 12592  0019FC                     __end_of___ftpack:
 12593                           	opt stack 0
 12594                           tosu	equ	0xFFF
 12595                           tosh	equ	0xFFE
 12596                           tosl	equ	0xFFD
 12597                           pclath	equ	0xFFA
 12598                           tblptru	equ	0xFF8
 12599                           tblptrh	equ	0xFF7
 12600                           tblptrl	equ	0xFF6
 12601                           tablat	equ	0xFF5
 12602                           prodh	equ	0xFF4
 12603                           prodl	equ	0xFF3
 12604                           intcon	equ	0xFF2
 12605                           intcon2	equ	0xFF1
 12606                           postinc0	equ	0xFEE
 12607                           wreg	equ	0xFE8
 12608                           postdec1	equ	0xFE5
 12609                           fsr1l	equ	0xFE1
 12610                           indf2	equ	0xFDF
 12611                           postinc2	equ	0xFDE
 12612                           postdec2	equ	0xFDD
 12613                           fsr2h	equ	0xFDA
 12614                           fsr2l	equ	0xFD9
 12615                           status	equ	0xFD8
 12616                           
 12617 ;; *************** function _FlashSampleWrite *****************
 12618 ;; Defined at:
 12619 ;;		line 29 in file "FlashApp.c"
 12620 ;; Parameters:    Size  Location     Type
 12621 ;;  sampleData      2   44[COMRAM] unsigned int 
 12622 ;;  channelNum      1   46[COMRAM] unsigned char 
 12623 ;; Auto vars:     Size  Location     Type
 12624 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 12625 ;; Return value:  Size  Location     Type
 12626 ;;                  1    wreg      void 
 12627 ;; Registers used:
 12628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12629 ;; Tracked objects:
 12630 ;;		On entry : 0/0
 12631 ;;		On exit  : 0/0
 12632 ;;		Unchanged: 0/0
 12633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12634 ;;      Params:         3       0       0       0       0       0       0
 12635 ;;      Locals:         0       2       0       0       0       0       0
 12636 ;;      Temps:          0       2       0       0       0       0       0
 12637 ;;      Totals:         3       4       0       0       0       0       0
 12638 ;;Total ram usage:        7 bytes
 12639 ;; Hardware stack levels used:    1
 12640 ;; Hardware stack levels required when called:    5
 12641 ;; This function calls:
 12642 ;;		_FLASH_IsWriteDone
 12643 ;;		_FLASH_WriteBlock
 12644 ;; This function is called by:
 12645 ;;		_AdcConvert
 12646 ;; This function uses a non-reentrant model
 12647 ;;
 12648                           
 12649                           	psect	text67
 12650  000F34                     __ptext67:
 12651                           	opt stack 0
 12652  000F34                     _FlashSampleWrite:
 12653                           	opt stack 24
 12654                           
 12655                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 12656                           
 12657                           ;incstack = 0
 12658  000F34  502F               	movf	FlashSampleWrite@channelNum,w,c
 12659  000F36  0100               	movlb	0	; () banked
 12660  000F38  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 12661  000F3A  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 12662  000F3C  0E0C               	movlw	12
 12663  000F3E                     u5945:
 12664  000F3E  90D8               	bcf	status,0,c
 12665  000F40  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 12666  000F42  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 12667  000F44  2EE8               	decfsz	wreg,f,c
 12668  000F46  D7FB               	goto	u5945
 12669  000F48  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 12670  000F4C  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 12671                           
 12672                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 12673  000F50  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 12674  000F52  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 12675  000F54  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 12676  000F56  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 12677                           
 12678                           ; BSR set to: 0
 12679                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 12680  000F58  90D8               	bcf	status,0,c
 12681  000F5A  35CB               	rlcf	_sampleCount& (0+255),w,b
 12682  000F5C  6ED9               	movwf	fsr2l,c
 12683  000F5E  35CC               	rlcf	(_sampleCount+1)& (0+255),w,b
 12684  000F60  6EDA               	movwf	fsr2h,c
 12685  000F62  0E6E               	movlw	low _sampleArray
 12686  000F64  26D9               	addwf	fsr2l,f,c
 12687  000F66  0E01               	movlw	high _sampleArray
 12688  000F68  22DA               	addwfc	fsr2h,f,c
 12689  000F6A  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 12690  000F6E  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;FlashApp.c: 35: sampleCount ++;
 12694  000F72  4BCB               	infsnz	_sampleCount& (0+255),f,b
 12695  000F74  2BCC               	incf	(_sampleCount+1)& (0+255),f,b
 12696                           
 12697                           ; BSR set to: 0
 12698                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 12699  000F76  C0CB  F060         	movff	_sampleCount,??_FlashSampleWrite
 12700  000F7A  C0CC  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 12701  000F7E  90D8               	bcf	status,0,c
 12702  000F80  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 12703  000F82  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 12704  000F84  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 12705  000F86  E104               	bnz	u5950
 12706  000F88  0E40               	movlw	64
 12707  000F8A  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 12708  000F8C  A0D8               	btfss	status,0,c
 12709  000F8E  0012               	return	
 12710  000F90                     u5950:
 12711                           
 12712                           ; BSR set to: 0
 12713  000F90  EC53  F013         	call	_FLASH_IsWriteDone	;wreg free
 12714  000F94  0900               	iorlw	0
 12715  000F96  B4D8               	btfsc	status,2,c
 12716  000F98  0012               	return	
 12717                           
 12718                           ;FlashApp.c: 38: {
 12719                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 12720  000F9A  C042  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 12721  000F9E  C043  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 12722  000FA2  C044  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 12723  000FA6  C045  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 12724  000FAA  0E6E               	movlw	low _sampleArray
 12725  000FAC  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 12726  000FAE  0E01               	movlw	high _sampleArray
 12727  000FB0  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 12728  000FB2  EC96  F00B         	call	_FLASH_WriteBlock	;wreg free
 12729                           
 12730                           ;FlashApp.c: 40: writeAddress += (64);
 12731  000FB6  0E40               	movlw	64
 12732  000FB8  2642               	addwf	_writeAddress,f,c
 12733  000FBA  0E00               	movlw	0
 12734  000FBC  2243               	addwfc	_writeAddress+1,f,c
 12735  000FBE  2244               	addwfc	_writeAddress+2,f,c
 12736  000FC0  2245               	addwfc	_writeAddress+3,f,c
 12737                           
 12738                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 12739  000FC2  5045               	movf	_writeAddress+3,w,c
 12740  000FC4  1044               	iorwf	_writeAddress+2,w,c
 12741  000FC6  E106               	bnz	u5970
 12742  000FC8  0EF0               	movlw	240
 12743  000FCA  5C42               	subwf	_writeAddress,w,c
 12744  000FCC  0E7F               	movlw	127
 12745  000FCE  5843               	subwfb	_writeAddress+1,w,c
 12746  000FD0  A0D8               	btfss	status,0,c
 12747  000FD2  D018               	goto	l275
 12748  000FD4                     u5970:
 12749                           
 12750                           ;FlashApp.c: 42: {
 12751                           ;FlashApp.c: 43: writeAddress = 0x4000;
 12752  000FD4  0E00               	movlw	0
 12753  000FD6  6E42               	movwf	_writeAddress,c
 12754  000FD8  0E40               	movlw	64
 12755  000FDA  6E43               	movwf	_writeAddress+1,c
 12756  000FDC  0E00               	movlw	0
 12757  000FDE  6E44               	movwf	_writeAddress+2,c
 12758  000FE0  0E00               	movlw	0
 12759  000FE2  6E45               	movwf	_writeAddress+3,c
 12760                           
 12761                           ;FlashApp.c: 44: isReWriteDone = 1;
 12762  000FE4  0E01               	movlw	1
 12763  000FE6  0100               	movlb	0	; () banked
 12764  000FE8  6FCF               	movwf	_isReWriteDone& (0+255),b
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 12768  000FEA  0E40               	movlw	64
 12769  000FEC  183F               	xorwf	_readAddress+1,w,c
 12770  000FEE  103E               	iorwf	_readAddress,w,c
 12771  000FF0  1040               	iorwf	_readAddress+2,w,c
 12772  000FF2  1041               	iorwf	_readAddress+3,w,c
 12773  000FF4  A4D8               	btfss	status,2,c
 12774  000FF6  D006               	goto	l275
 12775                           
 12776                           ; BSR set to: 0
 12777                           ;FlashApp.c: 46: {
 12778                           ;FlashApp.c: 47: readAddress += (64);
 12779  000FF8  0E40               	movlw	64
 12780  000FFA  263E               	addwf	_readAddress,f,c
 12781  000FFC  0E00               	movlw	0
 12782  000FFE  223F               	addwfc	_readAddress+1,f,c
 12783  001000  2240               	addwfc	_readAddress+2,f,c
 12784  001002  2241               	addwfc	_readAddress+3,f,c
 12785  001004                     l275:
 12786                           
 12787                           ;FlashApp.c: 48: }
 12788                           ;FlashApp.c: 49: }
 12789                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 12790                           
 12791                           ; BSR set to: 0
 12792  001004  0430               	decf	_numOfValidateSamples,w,c
 12793  001006  0EFF               	movlw	255
 12794  001008  5831               	subwfb	_numOfValidateSamples+1,w,c
 12795  00100A  0EFF               	movlw	255
 12796  00100C  5832               	subwfb	_numOfValidateSamples+2,w,c
 12797  00100E  0EFF               	movlw	255
 12798  001010  5833               	subwfb	_numOfValidateSamples+3,w,c
 12799  001012  B0D8               	btfsc	status,0,c
 12800  001014  D006               	goto	l276
 12801                           
 12802                           ;FlashApp.c: 52: {
 12803                           ;FlashApp.c: 53: numOfValidateSamples++;
 12804  001016  0E01               	movlw	1
 12805  001018  2630               	addwf	_numOfValidateSamples,f,c
 12806  00101A  0E00               	movlw	0
 12807  00101C  2231               	addwfc	_numOfValidateSamples+1,f,c
 12808  00101E  2232               	addwfc	_numOfValidateSamples+2,f,c
 12809  001020  2233               	addwfc	_numOfValidateSamples+3,f,c
 12810  001022                     l276:
 12811                           
 12812                           ;FlashApp.c: 54: }
 12813                           ;FlashApp.c: 55: sampleCount = 0;
 12814  001022  0E00               	movlw	0
 12815  001024  0100               	movlb	0	; () banked
 12816  001026  6FCC               	movwf	(_sampleCount+1)& (0+255),b
 12817  001028  0E00               	movlw	0
 12818  00102A  6FCB               	movwf	_sampleCount& (0+255),b
 12819  00102C  0012               	return	
 12820  00102E                     __end_of_FlashSampleWrite:
 12821                           	opt stack 0
 12822                           tosu	equ	0xFFF
 12823                           tosh	equ	0xFFE
 12824                           tosl	equ	0xFFD
 12825                           pclath	equ	0xFFA
 12826                           tblptru	equ	0xFF8
 12827                           tblptrh	equ	0xFF7
 12828                           tblptrl	equ	0xFF6
 12829                           tablat	equ	0xFF5
 12830                           prodh	equ	0xFF4
 12831                           prodl	equ	0xFF3
 12832                           intcon	equ	0xFF2
 12833                           intcon2	equ	0xFF1
 12834                           postinc0	equ	0xFEE
 12835                           wreg	equ	0xFE8
 12836                           postdec1	equ	0xFE5
 12837                           fsr1l	equ	0xFE1
 12838                           indf2	equ	0xFDF
 12839                           postinc2	equ	0xFDE
 12840                           postdec2	equ	0xFDD
 12841                           fsr2h	equ	0xFDA
 12842                           fsr2l	equ	0xFD9
 12843                           status	equ	0xFD8
 12844                           
 12845 ;; *************** function _FLASH_WriteBlock *****************
 12846 ;; Defined at:
 12847 ;;		line 93 in file "mcc_generated_files/memory.c"
 12848 ;; Parameters:    Size  Location     Type
 12849 ;;  writeAddr       4   28[COMRAM] unsigned long 
 12850 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 12851 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 12852 ;; Auto vars:     Size  Location     Type
 12853 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 12854 ;;  i               1   43[COMRAM] unsigned char 
 12855 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 12856 ;; Return value:  Size  Location     Type
 12857 ;;                  1    wreg      char 
 12858 ;; Registers used:
 12859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12860 ;; Tracked objects:
 12861 ;;		On entry : 0/0
 12862 ;;		On exit  : 0/0
 12863 ;;		Unchanged: 0/0
 12864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12865 ;;      Params:         6       0       0       0       0       0       0
 12866 ;;      Locals:         6       0       0       0       0       0       0
 12867 ;;      Temps:          4       0       0       0       0       0       0
 12868 ;;      Totals:        16       0       0       0       0       0       0
 12869 ;;Total ram usage:       16 bytes
 12870 ;; Hardware stack levels used:    1
 12871 ;; Hardware stack levels required when called:    4
 12872 ;; This function calls:
 12873 ;;		_FLASH_EraseBlock
 12874 ;; This function is called by:
 12875 ;;		_FlashSampleWrite
 12876 ;;		_FlashTest
 12877 ;;		_FLASH_WriteByte
 12878 ;; This function uses a non-reentrant model
 12879 ;;
 12880                           
 12881                           	psect	text68
 12882  00172C                     __ptext68:
 12883                           	opt stack 0
 12884  00172C                     _FLASH_WriteBlock:
 12885                           	opt stack 24
 12886                           
 12887                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 12888                           
 12889                           ;incstack = 0
 12890  00172C  0EC0               	movlw	192
 12891  00172E  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 12892  001730  0E7F               	movlw	127
 12893  001732  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 12894  001734  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 12895  001738  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 12896  00173C  5023               	movf	??_FLASH_WriteBlock,w,c
 12897  00173E  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 12898  001740  5024               	movf	??_FLASH_WriteBlock+1,w,c
 12899  001742  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 12900  001744  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 12901  001748  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 12902  00174C  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 12903  00174E  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 12904                           
 12905                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 12906  001750  0E00               	movlw	0
 12907  001752  BEF2               	btfsc	intcon,7,c	;volatile
 12908  001754  0E01               	movlw	1
 12909  001756  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 12910                           
 12911                           ;memory.c: 97: uint8_t i;
 12912                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 12913  001758  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 12914  00175A  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 12915  00175C  E144               	bnz	l855
 12916  00175E  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 12917  001760  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 12918  001762  E141               	bnz	l855
 12919  001764  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 12920  001766  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 12921  001768  E13E               	bnz	l855
 12922  00176A  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 12923  00176C  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 12924  00176E  A4D8               	btfss	status,2,c
 12925  001770  0012               	return	
 12926                           
 12927                           ;memory.c: 103: }
 12928                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 12929                           
 12930                           ;memory.c: 101: {
 12931                           ;memory.c: 102: return -1;
 12932                           ;	Return value of _FLASH_WriteBlock is never used
 12933  001772  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 12934  001776  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 12935  00177A  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 12936  00177E  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 12937  001782  EC06  F012         	call	_FLASH_EraseBlock	;wreg free
 12938                           
 12939                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 12940  001786  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 12941                           
 12942                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 12943  00178A  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 12944                           
 12945                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 12946  00178E  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 12947                           
 12948                           ;memory.c: 114: for (i=0; i<(64); i++)
 12949  001792  0E00               	movlw	0
 12950  001794  6E2C               	movwf	FLASH_WriteBlock@i,c
 12951  001796                     l6024:
 12952  001796  0E3F               	movlw	63
 12953  001798  642C               	cpfsgt	FLASH_WriteBlock@i,c
 12954  00179A  D001               	goto	l856
 12955  00179C  D013               	goto	u5750
 12956  00179E                     l856:
 12957                           
 12958                           ;memory.c: 115: {
 12959                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 12960  00179E  502C               	movf	FLASH_WriteBlock@i,w,c
 12961  0017A0  0D01               	mullw	1
 12962  0017A2  50F3               	movf	prodl,w,c
 12963  0017A4  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 12964  0017A6  6ED9               	movwf	fsr2l,c
 12965  0017A8  50F4               	movf	prodh,w,c
 12966  0017AA  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 12967  0017AC  6EDA               	movwf	fsr2h,c
 12968  0017AE  50DF               	movf	indf2,w,c
 12969  0017B0  6EF5               	movwf	tablat,c	;volatile
 12970                           
 12971                           ;memory.c: 118: if (i == ((64)-1))
 12972  0017B2  0E3F               	movlw	63
 12973  0017B4  182C               	xorwf	FLASH_WriteBlock@i,w,c
 12974  0017B6  A4D8               	btfss	status,2,c
 12975  0017B8  D002               	goto	l858
 12976  0017BA  000C               	tblwt		*	;# 
 12977                           
 12978                           ;memory.c: 121: }
 12979  0017BC  D001               	goto	l859
 12980  0017BE                     l858:
 12981  0017BE  000D               	tblwt		*+	;# 
 12982  0017C0                     l859:
 12983  0017C0  2A2C               	incf	FLASH_WriteBlock@i,f,c
 12984  0017C2  D7E9               	goto	l6024
 12985  0017C4                     u5750:
 12986                           
 12987                           ;memory.c: 125: }
 12988                           ;memory.c: 126: }
 12989                           ;memory.c: 128: PIR2bits.EEIF = 1;
 12990  0017C4  88A1               	bsf	4001,4,c	;volatile
 12991                           
 12992                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 12993  0017C6  8EA6               	bsf	4006,7,c	;volsfr
 12994                           
 12995                           ;memory.c: 130: EECON1bits.CFGS = 0;
 12996  0017C8  9CA6               	bcf	4006,6,c	;volsfr
 12997                           
 12998                           ;memory.c: 131: EECON1bits.WREN = 1;
 12999  0017CA  84A6               	bsf	4006,2,c	;volsfr
 13000                           
 13001                           ;memory.c: 132: INTCONbits.GIE = 0;
 13002  0017CC  9EF2               	bcf	intcon,7,c	;volatile
 13003                           
 13004                           ;memory.c: 133: EECON2 = 0x55;
 13005  0017CE  0E55               	movlw	85
 13006  0017D0  6EA7               	movwf	4007,c	;volsfr
 13007                           
 13008                           ;memory.c: 134: EECON2 = 0xAA;
 13009  0017D2  0EAA               	movlw	170
 13010  0017D4  6EA7               	movwf	4007,c	;volsfr
 13011                           
 13012                           ;memory.c: 135: EECON1bits.WR = 1;
 13013  0017D6  82A6               	bsf	4006,1,c	;volsfr
 13014                           
 13015                           ;memory.c: 137: EECON1bits.WREN = 0;
 13016  0017D8  94A6               	bcf	4006,2,c	;volsfr
 13017                           
 13018                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 13019  0017DA  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 13020  0017DC  D002               	bra	u5765
 13021  0017DE  9EF2               	bcf	intcon,7,c	;volatile
 13022  0017E0  D001               	bra	u5766
 13023  0017E2                     u5765:
 13024  0017E2  8EF2               	bsf	intcon,7,c	;volatile
 13025  0017E4                     u5766:
 13026  0017E4  0012               	return	
 13027  0017E6                     l855:
 13028  0017E6  0012               	return		;funcret
 13029  0017E8                     __end_of_FLASH_WriteBlock:
 13030                           	opt stack 0
 13031                           tosu	equ	0xFFF
 13032                           tosh	equ	0xFFE
 13033                           tosl	equ	0xFFD
 13034                           pclath	equ	0xFFA
 13035                           tblptru	equ	0xFF8
 13036                           tblptrh	equ	0xFF7
 13037                           tblptrl	equ	0xFF6
 13038                           tablat	equ	0xFF5
 13039                           prodh	equ	0xFF4
 13040                           prodl	equ	0xFF3
 13041                           intcon	equ	0xFF2
 13042                           intcon2	equ	0xFF1
 13043                           postinc0	equ	0xFEE
 13044                           wreg	equ	0xFE8
 13045                           postdec1	equ	0xFE5
 13046                           fsr1l	equ	0xFE1
 13047                           indf2	equ	0xFDF
 13048                           postinc2	equ	0xFDE
 13049                           postdec2	equ	0xFDD
 13050                           fsr2h	equ	0xFDA
 13051                           fsr2l	equ	0xFD9
 13052                           status	equ	0xFD8
 13053                           
 13054 ;; *************** function _FLASH_EraseBlock *****************
 13055 ;; Defined at:
 13056 ;;		line 144 in file "mcc_generated_files/memory.c"
 13057 ;; Parameters:    Size  Location     Type
 13058 ;;  baseAddr        4   23[COMRAM] unsigned long 
 13059 ;; Auto vars:     Size  Location     Type
 13060 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 13061 ;; Return value:  Size  Location     Type
 13062 ;;                  1    wreg      void 
 13063 ;; Registers used:
 13064 ;;		wreg, status,2
 13065 ;; Tracked objects:
 13066 ;;		On entry : 0/0
 13067 ;;		On exit  : 0/0
 13068 ;;		Unchanged: 0/0
 13069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13070 ;;      Params:         4       0       0       0       0       0       0
 13071 ;;      Locals:         1       0       0       0       0       0       0
 13072 ;;      Temps:          0       0       0       0       0       0       0
 13073 ;;      Totals:         5       0       0       0       0       0       0
 13074 ;;Total ram usage:        5 bytes
 13075 ;; Hardware stack levels used:    1
 13076 ;; Hardware stack levels required when called:    3
 13077 ;; This function calls:
 13078 ;;		Nothing
 13079 ;; This function is called by:
 13080 ;;		_FLASH_WriteBlock
 13081 ;; This function uses a non-reentrant model
 13082 ;;
 13083                           
 13084                           	psect	text69
 13085  00240C                     __ptext69:
 13086                           	opt stack 0
 13087  00240C                     _FLASH_EraseBlock:
 13088                           	opt stack 24
 13089                           
 13090                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 13091                           
 13092                           ;incstack = 0
 13093  00240C  0E00               	movlw	0
 13094  00240E  BEF2               	btfsc	intcon,7,c	;volatile
 13095  002410  0E01               	movlw	1
 13096  002412  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 13097                           
 13098                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 13099  002414  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 13100                           
 13101                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 13102  002418  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 13103                           
 13104                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 13105  00241C  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 13106                           
 13107                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 13108  002420  8EA6               	bsf	4006,7,c	;volsfr
 13109                           
 13110                           ;memory.c: 153: EECON1bits.CFGS = 0;
 13111  002422  9CA6               	bcf	4006,6,c	;volsfr
 13112                           
 13113                           ;memory.c: 154: EECON1bits.WREN = 1;
 13114  002424  84A6               	bsf	4006,2,c	;volsfr
 13115                           
 13116                           ;memory.c: 155: EECON1bits.FREE = 1;
 13117  002426  88A6               	bsf	4006,4,c	;volsfr
 13118                           
 13119                           ;memory.c: 156: INTCONbits.GIE = 0;
 13120  002428  9EF2               	bcf	intcon,7,c	;volatile
 13121                           
 13122                           ;memory.c: 157: EECON2 = 0x55;
 13123  00242A  0E55               	movlw	85
 13124  00242C  6EA7               	movwf	4007,c	;volsfr
 13125                           
 13126                           ;memory.c: 158: EECON2 = 0xAA;
 13127  00242E  0EAA               	movlw	170
 13128  002430  6EA7               	movwf	4007,c	;volsfr
 13129                           
 13130                           ;memory.c: 159: EECON1bits.WR = 1;
 13131  002432  82A6               	bsf	4006,1,c	;volsfr
 13132                           
 13133                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 13134  002434  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 13135  002436  D002               	bra	u5575
 13136  002438  9EF2               	bcf	intcon,7,c	;volatile
 13137  00243A  D001               	bra	u5576
 13138  00243C                     u5575:
 13139  00243C  8EF2               	bsf	intcon,7,c	;volatile
 13140  00243E                     u5576:
 13141  00243E  0012               	return		;funcret
 13142  002440                     __end_of_FLASH_EraseBlock:
 13143                           	opt stack 0
 13144                           tosu	equ	0xFFF
 13145                           tosh	equ	0xFFE
 13146                           tosl	equ	0xFFD
 13147                           pclath	equ	0xFFA
 13148                           tblptru	equ	0xFF8
 13149                           tblptrh	equ	0xFF7
 13150                           tblptrl	equ	0xFF6
 13151                           tablat	equ	0xFF5
 13152                           prodh	equ	0xFF4
 13153                           prodl	equ	0xFF3
 13154                           intcon	equ	0xFF2
 13155                           intcon2	equ	0xFF1
 13156                           postinc0	equ	0xFEE
 13157                           wreg	equ	0xFE8
 13158                           postdec1	equ	0xFE5
 13159                           fsr1l	equ	0xFE1
 13160                           indf2	equ	0xFDF
 13161                           postinc2	equ	0xFDE
 13162                           postdec2	equ	0xFDD
 13163                           fsr2h	equ	0xFDA
 13164                           fsr2l	equ	0xFD9
 13165                           status	equ	0xFD8
 13166                           
 13167 ;; *************** function _FLASH_IsWriteDone *****************
 13168 ;; Defined at:
 13169 ;;		line 189 in file "mcc_generated_files/memory.c"
 13170 ;; Parameters:    Size  Location     Type
 13171 ;;		None
 13172 ;; Auto vars:     Size  Location     Type
 13173 ;;		None
 13174 ;; Return value:  Size  Location     Type
 13175 ;;                  1    wreg      unsigned char 
 13176 ;; Registers used:
 13177 ;;		wreg
 13178 ;; Tracked objects:
 13179 ;;		On entry : 0/0
 13180 ;;		On exit  : 0/0
 13181 ;;		Unchanged: 0/0
 13182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13183 ;;      Params:         0       0       0       0       0       0       0
 13184 ;;      Locals:         0       0       0       0       0       0       0
 13185 ;;      Temps:          0       0       0       0       0       0       0
 13186 ;;      Totals:         0       0       0       0       0       0       0
 13187 ;;Total ram usage:        0 bytes
 13188 ;; Hardware stack levels used:    1
 13189 ;; Hardware stack levels required when called:    3
 13190 ;; This function calls:
 13191 ;;		Nothing
 13192 ;; This function is called by:
 13193 ;;		_FlashSampleWrite
 13194 ;;		_FlashReadUart
 13195 ;; This function uses a non-reentrant model
 13196 ;;
 13197                           
 13198                           	psect	text70
 13199  0026A6                     __ptext70:
 13200                           	opt stack 0
 13201  0026A6                     _FLASH_IsWriteDone:
 13202                           	opt stack 25
 13203                           
 13204                           ;memory.c: 191: return (EECON1bits.WR == 0);
 13205                           
 13206                           ;incstack = 0
 13207  0026A6  A2A6               	btfss	4006,1,c	;volsfr
 13208  0026A8  D001               	goto	u5701
 13209  0026AA  D002               	goto	u5700
 13210  0026AC                     u5701:
 13211  0026AC  0E01               	movlw	1
 13212  0026AE  0012               	return	
 13213  0026B0                     u5700:
 13214  0026B0  0E00               	movlw	0
 13215  0026B2  0012               	return	
 13216  0026B4                     __end_of_FLASH_IsWriteDone:
 13217                           	opt stack 0
 13218                           tosu	equ	0xFFF
 13219                           tosh	equ	0xFFE
 13220                           tosl	equ	0xFFD
 13221                           pclath	equ	0xFFA
 13222                           tblptru	equ	0xFF8
 13223                           tblptrh	equ	0xFF7
 13224                           tblptrl	equ	0xFF6
 13225                           tablat	equ	0xFF5
 13226                           prodh	equ	0xFF4
 13227                           prodl	equ	0xFF3
 13228                           intcon	equ	0xFF2
 13229                           intcon2	equ	0xFF1
 13230                           postinc0	equ	0xFEE
 13231                           wreg	equ	0xFE8
 13232                           postdec1	equ	0xFE5
 13233                           fsr1l	equ	0xFE1
 13234                           indf2	equ	0xFDF
 13235                           postinc2	equ	0xFDE
 13236                           postdec2	equ	0xFDD
 13237                           fsr2h	equ	0xFDA
 13238                           fsr2l	equ	0xFD9
 13239                           status	equ	0xFD8
 13240                           
 13241 ;; *************** function _ADC_GetConversion *****************
 13242 ;; Defined at:
 13243 ;;		line 106 in file "mcc_generated_files/adc.c"
 13244 ;; Parameters:    Size  Location     Type
 13245 ;;  channel         1    wreg     enum E6975
 13246 ;; Auto vars:     Size  Location     Type
 13247 ;;  channel         1   27[COMRAM] enum E6975
 13248 ;; Return value:  Size  Location     Type
 13249 ;;                  2   23[COMRAM] unsigned int 
 13250 ;; Registers used:
 13251 ;;		wreg, status,2, status,0
 13252 ;; Tracked objects:
 13253 ;;		On entry : 0/0
 13254 ;;		On exit  : 0/0
 13255 ;;		Unchanged: 0/0
 13256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13257 ;;      Params:         2       0       0       0       0       0       0
 13258 ;;      Locals:         1       0       0       0       0       0       0
 13259 ;;      Temps:          2       0       0       0       0       0       0
 13260 ;;      Totals:         5       0       0       0       0       0       0
 13261 ;;Total ram usage:        5 bytes
 13262 ;; Hardware stack levels used:    1
 13263 ;; Hardware stack levels required when called:    3
 13264 ;; This function calls:
 13265 ;;		Nothing
 13266 ;; This function is called by:
 13267 ;;		_AdcConvert
 13268 ;; This function uses a non-reentrant model
 13269 ;;
 13270                           
 13271                           	psect	text71
 13272  002440                     __ptext71:
 13273                           	opt stack 0
 13274  002440                     _ADC_GetConversion:
 13275                           	opt stack 26
 13276                           
 13277                           ;incstack = 0
 13278                           ;ADC_GetConversion@channel stored from wreg
 13279  002440  6E1C               	movwf	ADC_GetConversion@channel,c
 13280                           
 13281                           ;adc.c: 109: ADCON0bits.CHS = channel;
 13282  002442  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 13283  002446  461A               	rlncf	??_ADC_GetConversion,f,c
 13284  002448  461A               	rlncf	??_ADC_GetConversion,f,c
 13285  00244A  50C2               	movf	4034,w,c	;volatile
 13286  00244C  181A               	xorwf	??_ADC_GetConversion,w,c
 13287  00244E  0B83               	andlw	-125
 13288  002450  181A               	xorwf	??_ADC_GetConversion,w,c
 13289  002452  6EC2               	movwf	4034,c	;volatile
 13290                           
 13291                           ;adc.c: 112: ADCON0bits.ADON = 1;
 13292  002454  80C2               	bsf	4034,0,c	;volatile
 13293                           
 13294                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 13295  002456  82C2               	bsf	4034,1,c	;volatile
 13296  002458                     
 13297                           ;adc.c: 119: {
 13298  002458  B2C2               	btfsc	4034,1,c	;volatile
 13299  00245A  D7FE               	goto	l968
 13300                           
 13301                           ;adc.c: 120: }
 13302                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 13303  00245C  50C4               	movf	4036,w,c	;volatile
 13304  00245E  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 13305  002460  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 13306  002462  50C3               	movf	4035,w,c	;volatile
 13307  002464  241A               	addwf	??_ADC_GetConversion,w,c
 13308  002466  6E18               	movwf	?_ADC_GetConversion,c
 13309  002468  0E00               	movlw	0
 13310  00246A  201B               	addwfc	??_ADC_GetConversion+1,w,c
 13311  00246C  6E19               	movwf	?_ADC_GetConversion+1,c
 13312  00246E  0012               	return	
 13313  002470                     __end_of_ADC_GetConversion:
 13314                           	opt stack 0
 13315                           tosu	equ	0xFFF
 13316                           tosh	equ	0xFFE
 13317                           tosl	equ	0xFFD
 13318                           pclath	equ	0xFFA
 13319                           tblptru	equ	0xFF8
 13320                           tblptrh	equ	0xFF7
 13321                           tblptrl	equ	0xFF6
 13322                           tablat	equ	0xFF5
 13323                           prodh	equ	0xFF4
 13324                           prodl	equ	0xFF3
 13325                           intcon	equ	0xFF2
 13326                           intcon2	equ	0xFF1
 13327                           postinc0	equ	0xFEE
 13328                           wreg	equ	0xFE8
 13329                           postdec1	equ	0xFE5
 13330                           fsr1l	equ	0xFE1
 13331                           indf2	equ	0xFDF
 13332                           postinc2	equ	0xFDE
 13333                           postdec2	equ	0xFDD
 13334                           fsr2h	equ	0xFDA
 13335                           fsr2l	equ	0xFD9
 13336                           status	equ	0xFD8
 13337                           
 13338 ;; *************** function _INTERRUPT_InterruptManager *****************
 13339 ;; Defined at:
 13340 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 13341 ;; Parameters:    Size  Location     Type
 13342 ;;		None
 13343 ;; Auto vars:     Size  Location     Type
 13344 ;;		None
 13345 ;; Return value:  Size  Location     Type
 13346 ;;                  1    wreg      void 
 13347 ;; Registers used:
 13348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13349 ;; Tracked objects:
 13350 ;;		On entry : 0/0
 13351 ;;		On exit  : 0/0
 13352 ;;		Unchanged: 0/0
 13353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13354 ;;      Params:         0       0       0       0       0       0       0
 13355 ;;      Locals:         0       0       0       0       0       0       0
 13356 ;;      Temps:         18       0       0       0       0       0       0
 13357 ;;      Totals:        18       0       0       0       0       0       0
 13358 ;;Total ram usage:       18 bytes
 13359 ;; Hardware stack levels used:    1
 13360 ;; Hardware stack levels required when called:    2
 13361 ;; This function calls:
 13362 ;;		_EUSART1_Receive_ISR
 13363 ;;		_EUSART1_Transmit_ISR
 13364 ;;		_MEMORY_ISR
 13365 ;;		_PIN_MANAGER_IOC
 13366 ;;		_TMR0_ISR
 13367 ;; This function is called by:
 13368 ;;		Interrupt level 2
 13369 ;; This function uses a non-reentrant model
 13370 ;;
 13371                           
 13372                           	psect	intcode
 13373  000008                     __pintcode:
 13374                           	opt stack 0
 13375  000008                     _INTERRUPT_InterruptManager:
 13376                           	opt stack 22
 13377                           
 13378                           ;incstack = 0
 13379  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13380  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 13381  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 13382  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 13383  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 13384  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 13385  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 13386  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 13387  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 13388  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 13389  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 13390  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 13391  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 13392  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 13393  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 13394  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 13395  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 13396  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 13397  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 13398                           
 13399                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 13400  000052  B6F2               	btfsc	intcon,3,c	;volatile
 13401  000054  A0F2               	btfss	intcon,0,c	;volatile
 13402  000056  D003               	goto	i2l693
 13403                           
 13404                           ;interrupt_manager.c: 61: {
 13405                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 13406  000058  EC72  F013         	call	_PIN_MANAGER_IOC	;wreg free
 13407                           
 13408                           ;interrupt_manager.c: 63: }
 13409  00005C  D019               	goto	i2l702
 13410  00005E                     i2l693:
 13411                           
 13412                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 13413  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 13414  000060  A4F2               	btfss	intcon,2,c	;volatile
 13415  000062  D003               	goto	i2l695
 13416                           
 13417                           ;interrupt_manager.c: 65: {
 13418                           ;interrupt_manager.c: 66: TMR0_ISR();
 13419  000064  ECFE  F00C         	call	_TMR0_ISR	;wreg free
 13420                           
 13421                           ;interrupt_manager.c: 67: }
 13422  000068  D013               	goto	i2l702
 13423  00006A                     i2l695:
 13424                           
 13425                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 13426  00006A  ACF2               	btfss	intcon,6,c	;volatile
 13427  00006C  D011               	goto	i2l702
 13428                           
 13429                           ;interrupt_manager.c: 69: {
 13430                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 13431  00006E  B8A0               	btfsc	4000,4,c	;volatile
 13432  000070  A8A1               	btfss	4001,4,c	;volatile
 13433  000072  D003               	goto	i2l698
 13434                           
 13435                           ;interrupt_manager.c: 71: {
 13436                           ;interrupt_manager.c: 72: MEMORY_ISR();
 13437  000074  EC74  F013         	call	_MEMORY_ISR	;wreg free
 13438                           
 13439                           ;interrupt_manager.c: 73: }
 13440  000078  D00B               	goto	i2l702
 13441  00007A                     i2l698:
 13442                           
 13443                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 13444  00007A  B89D               	btfsc	3997,4,c	;volatile
 13445  00007C  A89E               	btfss	3998,4,c	;volatile
 13446  00007E  D003               	goto	i2l700
 13447                           
 13448                           ;interrupt_manager.c: 75: {
 13449                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 13450  000080  EC9B  F011         	call	_EUSART1_Transmit_ISR	;wreg free
 13451                           
 13452                           ;interrupt_manager.c: 77: }
 13453  000084  D005               	goto	i2l702
 13454  000086                     i2l700:
 13455                           
 13456                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 13457  000086  BA9D               	btfsc	3997,5,c	;volatile
 13458  000088  AA9E               	btfss	3998,5,c	;volatile
 13459  00008A  D002               	goto	i2l702
 13460                           
 13461                           ;interrupt_manager.c: 79: {
 13462                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 13463  00008C  EC38  F012         	call	_EUSART1_Receive_ISR	;wreg free
 13464  000090                     i2l702:
 13465                           
 13466                           ;interrupt_manager.c: 87: else
 13467                           ;interrupt_manager.c: 88: {
 13468                           
 13469                           ;interrupt_manager.c: 85: }
 13470                           ;interrupt_manager.c: 86: }
 13471                           
 13472                           ;interrupt_manager.c: 82: else
 13473                           ;interrupt_manager.c: 83: {
 13474  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 13475  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 13476  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 13477  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 13478  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 13479  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 13480  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 13481  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 13482  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 13483  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 13484  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 13485  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 13486  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 13487  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 13488  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 13489  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 13490  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 13491  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 13492  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13493  0000DA  0011               	retfie		f
 13494  0000DC                     __end_of_INTERRUPT_InterruptManager:
 13495                           	opt stack 0
 13496                           tosu	equ	0xFFF
 13497                           tosh	equ	0xFFE
 13498                           tosl	equ	0xFFD
 13499                           pclatu	equ	0xFFB
 13500                           pclath	equ	0xFFA
 13501                           tblptru	equ	0xFF8
 13502                           tblptrh	equ	0xFF7
 13503                           tblptrl	equ	0xFF6
 13504                           tablat	equ	0xFF5
 13505                           prodh	equ	0xFF4
 13506                           prodl	equ	0xFF3
 13507                           intcon	equ	0xFF2
 13508                           intcon2	equ	0xFF1
 13509                           postinc0	equ	0xFEE
 13510                           fsr0h	equ	0xFEA
 13511                           fsr0l	equ	0xFE9
 13512                           wreg	equ	0xFE8
 13513                           postdec1	equ	0xFE5
 13514                           fsr1h	equ	0xFE2
 13515                           fsr1l	equ	0xFE1
 13516                           indf2	equ	0xFDF
 13517                           postinc2	equ	0xFDE
 13518                           postdec2	equ	0xFDD
 13519                           fsr2h	equ	0xFDA
 13520                           fsr2l	equ	0xFD9
 13521                           status	equ	0xFD8
 13522                           
 13523 ;; *************** function _TMR0_ISR *****************
 13524 ;; Defined at:
 13525 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 13526 ;; Parameters:    Size  Location     Type
 13527 ;;		None
 13528 ;; Auto vars:     Size  Location     Type
 13529 ;;		None
 13530 ;; Return value:  Size  Location     Type
 13531 ;;                  1    wreg      void 
 13532 ;; Registers used:
 13533 ;;		wreg, status,2, status,0, cstack
 13534 ;; Tracked objects:
 13535 ;;		On entry : 0/0
 13536 ;;		On exit  : 0/0
 13537 ;;		Unchanged: 0/0
 13538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13539 ;;      Params:         0       0       0       0       0       0       0
 13540 ;;      Locals:         0       0       0       0       0       0       0
 13541 ;;      Temps:          0       0       0       0       0       0       0
 13542 ;;      Totals:         0       0       0       0       0       0       0
 13543 ;;Total ram usage:        0 bytes
 13544 ;; Hardware stack levels used:    1
 13545 ;; Hardware stack levels required when called:    1
 13546 ;; This function calls:
 13547 ;;		___lwmod
 13548 ;; This function is called by:
 13549 ;;		_INTERRUPT_InterruptManager
 13550 ;; This function uses a non-reentrant model
 13551 ;;
 13552                           
 13553                           	psect	text73
 13554  0019FC                     __ptext73:
 13555                           	opt stack 0
 13556  0019FC                     _TMR0_ISR:
 13557                           	opt stack 22
 13558                           
 13559                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 13560                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 13561                           
 13562                           ;incstack = 0
 13563  0019FC  94F2               	bcf	intcon,2,c	;volatile
 13564                           
 13565                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 13566  0019FE  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 13567  001A00  6ED7               	movwf	4055,c	;volatile
 13568                           
 13569                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 13570  001A02  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 13571                           
 13572                           ;tmr0.c: 146: CountCallBack ++;
 13573  001A06  4A34               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 13574  001A08  2A35               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 13575                           
 13576                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 13577  001A0A  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 13578  001A0E  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 13579  001A12  0E00               	movlw	0
 13580  001A14  6E04               	movwf	___lwmod@divisor+1,c
 13581  001A16  0E14               	movlw	20
 13582  001A18  6E03               	movwf	___lwmod@divisor,c
 13583  001A1A  EC04  F011         	call	___lwmod	;wreg free
 13584  001A1E  5001               	movf	?___lwmod,w,c
 13585  001A20  1002               	iorwf	?___lwmod+1,w,c
 13586  001A22  A4D8               	btfss	status,2,c
 13587  001A24  D003               	goto	i2l924
 13588                           
 13589                           ;tmr0.c: 148: {
 13590                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 13591  001A26  0E01               	movlw	1
 13592  001A28  0100               	movlb	0	; () banked
 13593  001A2A  6FDA               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 13594  001A2C                     i2l924:
 13595                           
 13596                           ;tmr0.c: 150: }
 13597                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 13598                           
 13599                           ; BSR set to: 0
 13600  001A2C  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 13601  001A30  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 13602  001A34  0E00               	movlw	0
 13603  001A36  6E04               	movwf	___lwmod@divisor+1,c
 13604  001A38  0E32               	movlw	50
 13605  001A3A  6E03               	movwf	___lwmod@divisor,c
 13606  001A3C  EC04  F011         	call	___lwmod	;wreg free
 13607  001A40  5001               	movf	?___lwmod,w,c
 13608  001A42  1002               	iorwf	?___lwmod+1,w,c
 13609  001A44  A4D8               	btfss	status,2,c
 13610  001A46  D003               	goto	i2l925
 13611                           
 13612                           ;tmr0.c: 153: {
 13613                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 13614  001A48  0E01               	movlw	1
 13615  001A4A  0100               	movlb	0	; () banked
 13616  001A4C  6FD9               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 13617  001A4E                     i2l925:
 13618                           
 13619                           ;tmr0.c: 155: }
 13620                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 13621                           
 13622                           ; BSR set to: 0
 13623  001A4E  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 13624  001A52  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 13625  001A56  0E01               	movlw	1
 13626  001A58  6E04               	movwf	___lwmod@divisor+1,c
 13627  001A5A  0E2C               	movlw	44
 13628  001A5C  6E03               	movwf	___lwmod@divisor,c
 13629  001A5E  EC04  F011         	call	___lwmod	;wreg free
 13630  001A62  5001               	movf	?___lwmod,w,c
 13631  001A64  1002               	iorwf	?___lwmod+1,w,c
 13632  001A66  A4D8               	btfss	status,2,c
 13633  001A68  D003               	goto	i2l926
 13634                           
 13635                           ;tmr0.c: 157: {
 13636                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 13637  001A6A  0E01               	movlw	1
 13638  001A6C  0100               	movlb	0	; () banked
 13639  001A6E  6FD8               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 13640  001A70                     i2l926:
 13641                           
 13642                           ;tmr0.c: 159: }
 13643                           ;tmr0.c: 161: CountCallBack %= 300;
 13644                           
 13645                           ; BSR set to: 0
 13646  001A70  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 13647  001A74  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 13648  001A78  0E01               	movlw	1
 13649  001A7A  6E04               	movwf	___lwmod@divisor+1,c
 13650  001A7C  0E2C               	movlw	44
 13651  001A7E  6E03               	movwf	___lwmod@divisor,c
 13652  001A80  EC04  F011         	call	___lwmod	;wreg free
 13653  001A84  C001  F034         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 13654  001A88  C002  F035         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 13655  001A8C  0012               	return		;funcret
 13656  001A8E                     __end_of_TMR0_ISR:
 13657                           	opt stack 0
 13658                           tosu	equ	0xFFF
 13659                           tosh	equ	0xFFE
 13660                           tosl	equ	0xFFD
 13661                           pclatu	equ	0xFFB
 13662                           pclath	equ	0xFFA
 13663                           tblptru	equ	0xFF8
 13664                           tblptrh	equ	0xFF7
 13665                           tblptrl	equ	0xFF6
 13666                           tablat	equ	0xFF5
 13667                           prodh	equ	0xFF4
 13668                           prodl	equ	0xFF3
 13669                           intcon	equ	0xFF2
 13670                           intcon2	equ	0xFF1
 13671                           postinc0	equ	0xFEE
 13672                           fsr0h	equ	0xFEA
 13673                           fsr0l	equ	0xFE9
 13674                           wreg	equ	0xFE8
 13675                           postdec1	equ	0xFE5
 13676                           fsr1h	equ	0xFE2
 13677                           fsr1l	equ	0xFE1
 13678                           indf2	equ	0xFDF
 13679                           postinc2	equ	0xFDE
 13680                           postdec2	equ	0xFDD
 13681                           fsr2h	equ	0xFDA
 13682                           fsr2l	equ	0xFD9
 13683                           status	equ	0xFD8
 13684                           
 13685 ;; *************** function ___lwmod *****************
 13686 ;; Defined at:
 13687 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13688 ;; Parameters:    Size  Location     Type
 13689 ;;  dividend        2    0[COMRAM] unsigned int 
 13690 ;;  divisor         2    2[COMRAM] unsigned int 
 13691 ;; Auto vars:     Size  Location     Type
 13692 ;;  counter         1    4[COMRAM] unsigned char 
 13693 ;; Return value:  Size  Location     Type
 13694 ;;                  2    0[COMRAM] unsigned int 
 13695 ;; Registers used:
 13696 ;;		wreg, status,2, status,0
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13702 ;;      Params:         4       0       0       0       0       0       0
 13703 ;;      Locals:         1       0       0       0       0       0       0
 13704 ;;      Temps:          0       0       0       0       0       0       0
 13705 ;;      Totals:         5       0       0       0       0       0       0
 13706 ;;Total ram usage:        5 bytes
 13707 ;; Hardware stack levels used:    1
 13708 ;; This function calls:
 13709 ;;		Nothing
 13710 ;; This function is called by:
 13711 ;;		_TMR0_ISR
 13712 ;; This function uses a non-reentrant model
 13713 ;;
 13714                           
 13715                           	psect	text74
 13716  002208                     __ptext74:
 13717                           	opt stack 0
 13718  002208                     ___lwmod:
 13719                           	opt stack 22
 13720                           
 13721                           ;incstack = 0
 13722  002208  5003               	movf	___lwmod@divisor,w,c
 13723  00220A  1004               	iorwf	___lwmod@divisor+1,w,c
 13724  00220C  B4D8               	btfsc	status,2,c
 13725  00220E  D018               	goto	i2l1688
 13726  002210  0E01               	movlw	1
 13727  002212  6E05               	movwf	___lwmod@counter,c
 13728  002214  D004               	goto	i2l1683
 13729  002216  90D8               	bcf	status,0,c
 13730  002218  3603               	rlcf	___lwmod@divisor,f,c
 13731  00221A  3604               	rlcf	___lwmod@divisor+1,f,c
 13732  00221C  2A05               	incf	___lwmod@counter,f,c
 13733  00221E                     i2l1683:
 13734  00221E  AE04               	btfss	___lwmod@divisor+1,7,c
 13735  002220  D7FA               	goto	i2l1684
 13736  002222                     i2u423_40:
 13737  002222  5003               	movf	___lwmod@divisor,w,c
 13738  002224  5C01               	subwf	___lwmod@dividend,w,c
 13739  002226  5004               	movf	___lwmod@divisor+1,w,c
 13740  002228  5802               	subwfb	___lwmod@dividend+1,w,c
 13741  00222A  A0D8               	btfss	status,0,c
 13742  00222C  D004               	goto	i2l1687
 13743  00222E  5003               	movf	___lwmod@divisor,w,c
 13744  002230  5E01               	subwf	___lwmod@dividend,f,c
 13745  002232  5004               	movf	___lwmod@divisor+1,w,c
 13746  002234  5A02               	subwfb	___lwmod@dividend+1,f,c
 13747  002236                     i2l1687:
 13748  002236  90D8               	bcf	status,0,c
 13749  002238  3204               	rrcf	___lwmod@divisor+1,f,c
 13750  00223A  3203               	rrcf	___lwmod@divisor,f,c
 13751  00223C  2E05               	decfsz	___lwmod@counter,f,c
 13752  00223E  D7F1               	goto	i2u423_40
 13753  002240                     i2l1688:
 13754  002240  C001  F001         	movff	___lwmod@dividend,?___lwmod
 13755  002244  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 13756  002248  0012               	return		;funcret
 13757  00224A                     __end_of___lwmod:
 13758                           	opt stack 0
 13759                           tosu	equ	0xFFF
 13760                           tosh	equ	0xFFE
 13761                           tosl	equ	0xFFD
 13762                           pclatu	equ	0xFFB
 13763                           pclath	equ	0xFFA
 13764                           tblptru	equ	0xFF8
 13765                           tblptrh	equ	0xFF7
 13766                           tblptrl	equ	0xFF6
 13767                           tablat	equ	0xFF5
 13768                           prodh	equ	0xFF4
 13769                           prodl	equ	0xFF3
 13770                           intcon	equ	0xFF2
 13771                           intcon2	equ	0xFF1
 13772                           postinc0	equ	0xFEE
 13773                           fsr0h	equ	0xFEA
 13774                           fsr0l	equ	0xFE9
 13775                           wreg	equ	0xFE8
 13776                           postdec1	equ	0xFE5
 13777                           fsr1h	equ	0xFE2
 13778                           fsr1l	equ	0xFE1
 13779                           indf2	equ	0xFDF
 13780                           postinc2	equ	0xFDE
 13781                           postdec2	equ	0xFDD
 13782                           fsr2h	equ	0xFDA
 13783                           fsr2l	equ	0xFD9
 13784                           status	equ	0xFD8
 13785                           
 13786 ;; *************** function _PIN_MANAGER_IOC *****************
 13787 ;; Defined at:
 13788 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 13789 ;; Parameters:    Size  Location     Type
 13790 ;;		None
 13791 ;; Auto vars:     Size  Location     Type
 13792 ;;		None
 13793 ;; Return value:  Size  Location     Type
 13794 ;;                  1    wreg      void 
 13795 ;; Registers used:
 13796 ;;		None
 13797 ;; Tracked objects:
 13798 ;;		On entry : 0/0
 13799 ;;		On exit  : 0/0
 13800 ;;		Unchanged: 0/0
 13801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13802 ;;      Params:         0       0       0       0       0       0       0
 13803 ;;      Locals:         0       0       0       0       0       0       0
 13804 ;;      Temps:          0       0       0       0       0       0       0
 13805 ;;      Totals:         0       0       0       0       0       0       0
 13806 ;;Total ram usage:        0 bytes
 13807 ;; Hardware stack levels used:    1
 13808 ;; This function calls:
 13809 ;;		Nothing
 13810 ;; This function is called by:
 13811 ;;		_INTERRUPT_InterruptManager
 13812 ;; This function uses a non-reentrant model
 13813 ;;
 13814                           
 13815                           	psect	text75
 13816  0026E4                     __ptext75:
 13817                           	opt stack 0
 13818  0026E4                     _PIN_MANAGER_IOC:
 13819                           	opt stack 23
 13820                           
 13821                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 13822                           
 13823                           ;incstack = 0
 13824  0026E4  90F2               	bcf	intcon,0,c	;volatile
 13825  0026E6  0012               	return		;funcret
 13826  0026E8                     __end_of_PIN_MANAGER_IOC:
 13827                           	opt stack 0
 13828                           tosu	equ	0xFFF
 13829                           tosh	equ	0xFFE
 13830                           tosl	equ	0xFFD
 13831                           pclatu	equ	0xFFB
 13832                           pclath	equ	0xFFA
 13833                           tblptru	equ	0xFF8
 13834                           tblptrh	equ	0xFF7
 13835                           tblptrl	equ	0xFF6
 13836                           tablat	equ	0xFF5
 13837                           prodh	equ	0xFF4
 13838                           prodl	equ	0xFF3
 13839                           intcon	equ	0xFF2
 13840                           intcon2	equ	0xFF1
 13841                           postinc0	equ	0xFEE
 13842                           fsr0h	equ	0xFEA
 13843                           fsr0l	equ	0xFE9
 13844                           wreg	equ	0xFE8
 13845                           postdec1	equ	0xFE5
 13846                           fsr1h	equ	0xFE2
 13847                           fsr1l	equ	0xFE1
 13848                           indf2	equ	0xFDF
 13849                           postinc2	equ	0xFDE
 13850                           postdec2	equ	0xFDD
 13851                           fsr2h	equ	0xFDA
 13852                           fsr2l	equ	0xFD9
 13853                           status	equ	0xFD8
 13854                           
 13855 ;; *************** function _MEMORY_ISR *****************
 13856 ;; Defined at:
 13857 ;;		line 206 in file "mcc_generated_files/memory.c"
 13858 ;; Parameters:    Size  Location     Type
 13859 ;;		None
 13860 ;; Auto vars:     Size  Location     Type
 13861 ;;		None
 13862 ;; Return value:  Size  Location     Type
 13863 ;;                  1    wreg      void 
 13864 ;; Registers used:
 13865 ;;		None
 13866 ;; Tracked objects:
 13867 ;;		On entry : 0/0
 13868 ;;		On exit  : 0/0
 13869 ;;		Unchanged: 0/0
 13870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13871 ;;      Params:         0       0       0       0       0       0       0
 13872 ;;      Locals:         0       0       0       0       0       0       0
 13873 ;;      Temps:          0       0       0       0       0       0       0
 13874 ;;      Totals:         0       0       0       0       0       0       0
 13875 ;;Total ram usage:        0 bytes
 13876 ;; Hardware stack levels used:    1
 13877 ;; This function calls:
 13878 ;;		Nothing
 13879 ;; This function is called by:
 13880 ;;		_INTERRUPT_InterruptManager
 13881 ;; This function uses a non-reentrant model
 13882 ;;
 13883                           
 13884                           	psect	text76
 13885  0026E8                     __ptext76:
 13886                           	opt stack 0
 13887  0026E8                     _MEMORY_ISR:
 13888                           	opt stack 23
 13889                           
 13890                           ;memory.c: 209: PIR2bits.EEIF = 0;
 13891                           
 13892                           ;incstack = 0
 13893  0026E8  98A1               	bcf	4001,4,c	;volatile
 13894  0026EA  0012               	return		;funcret
 13895  0026EC                     __end_of_MEMORY_ISR:
 13896                           	opt stack 0
 13897                           tosu	equ	0xFFF
 13898                           tosh	equ	0xFFE
 13899                           tosl	equ	0xFFD
 13900                           pclatu	equ	0xFFB
 13901                           pclath	equ	0xFFA
 13902                           tblptru	equ	0xFF8
 13903                           tblptrh	equ	0xFF7
 13904                           tblptrl	equ	0xFF6
 13905                           tablat	equ	0xFF5
 13906                           prodh	equ	0xFF4
 13907                           prodl	equ	0xFF3
 13908                           intcon	equ	0xFF2
 13909                           intcon2	equ	0xFF1
 13910                           postinc0	equ	0xFEE
 13911                           fsr0h	equ	0xFEA
 13912                           fsr0l	equ	0xFE9
 13913                           wreg	equ	0xFE8
 13914                           postdec1	equ	0xFE5
 13915                           fsr1h	equ	0xFE2
 13916                           fsr1l	equ	0xFE1
 13917                           indf2	equ	0xFDF
 13918                           postinc2	equ	0xFDE
 13919                           postdec2	equ	0xFDD
 13920                           fsr2h	equ	0xFDA
 13921                           fsr2l	equ	0xFD9
 13922                           status	equ	0xFD8
 13923                           
 13924 ;; *************** function _EUSART1_Transmit_ISR *****************
 13925 ;; Defined at:
 13926 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 13927 ;; Parameters:    Size  Location     Type
 13928 ;;		None
 13929 ;; Auto vars:     Size  Location     Type
 13930 ;;		None
 13931 ;; Return value:  Size  Location     Type
 13932 ;;                  1    wreg      void 
 13933 ;; Registers used:
 13934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13935 ;; Tracked objects:
 13936 ;;		On entry : 0/0
 13937 ;;		On exit  : 0/0
 13938 ;;		Unchanged: 0/0
 13939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13940 ;;      Params:         0       0       0       0       0       0       0
 13941 ;;      Locals:         0       0       0       0       0       0       0
 13942 ;;      Temps:          0       0       0       0       0       0       0
 13943 ;;      Totals:         0       0       0       0       0       0       0
 13944 ;;Total ram usage:        0 bytes
 13945 ;; Hardware stack levels used:    1
 13946 ;; This function calls:
 13947 ;;		Nothing
 13948 ;; This function is called by:
 13949 ;;		_INTERRUPT_InterruptManager
 13950 ;; This function uses a non-reentrant model
 13951 ;;
 13952                           
 13953                           	psect	text77
 13954  002336                     __ptext77:
 13955                           	opt stack 0
 13956  002336                     _EUSART1_Transmit_ISR:
 13957                           	opt stack 23
 13958                           
 13959                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 13960                           
 13961                           ;incstack = 0
 13962  002336  0E46               	movlw	70
 13963  002338  0100               	movlb	0	; () banked
 13964  00233A  61FD               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 13965  00233C  D012               	goto	i2l764
 13966                           
 13967                           ; BSR set to: 0
 13968                           ;eusart1.c: 186: {
 13969                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 13970  00233E  5038               	movf	_eusart1TxTail,w,c	;volatile
 13971  002340  0D01               	mullw	1
 13972  002342  0E00               	movlw	low _eusart1TxBuffer
 13973  002344  24F3               	addwf	prodl,w,c
 13974  002346  6ED9               	movwf	fsr2l,c
 13975  002348  0E01               	movlw	high _eusart1TxBuffer
 13976  00234A  20F4               	addwfc	prodh,w,c
 13977  00234C  6EDA               	movwf	fsr2h,c
 13978  00234E  50DF               	movf	indf2,w,c
 13979  002350  6EAD               	movwf	4013,c	;volatile
 13980                           
 13981                           ; BSR set to: 0
 13982  002352  2A38               	incf	_eusart1TxTail,f,c	;volatile
 13983                           
 13984                           ; BSR set to: 0
 13985                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 13986  002354  0E45               	movlw	69
 13987  002356  6438               	cpfsgt	_eusart1TxTail,c	;volatile
 13988  002358  D002               	goto	i2l765
 13989                           
 13990                           ; BSR set to: 0
 13991                           ;eusart1.c: 189: {
 13992                           ;eusart1.c: 190: eusart1TxTail = 0;
 13993  00235A  0E00               	movlw	0
 13994  00235C  6E38               	movwf	_eusart1TxTail,c	;volatile
 13995  00235E                     i2l765:
 13996                           
 13997                           ; BSR set to: 0
 13998                           ;eusart1.c: 191: }
 13999                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 14000                           
 14001                           ; BSR set to: 0
 14002  00235E  2BFD               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 14003                           
 14004                           ;eusart1.c: 193: }
 14005  002360  0012               	return	
 14006  002362                     i2l764:
 14007                           
 14008                           ; BSR set to: 0
 14009                           ;eusart1.c: 194: else
 14010                           ;eusart1.c: 195: {
 14011                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 14012  002362  989D               	bcf	3997,4,c	;volatile
 14013                           
 14014                           ; BSR set to: 0
 14015                           ;eusart1.c: 197: eusart1TxTail = 0;
 14016  002364  0E00               	movlw	0
 14017  002366  6E38               	movwf	_eusart1TxTail,c	;volatile
 14018                           
 14019                           ;eusart1.c: 198: eusart1TxHead = 0;
 14020  002368  0E00               	movlw	0
 14021  00236A  6E39               	movwf	_eusart1TxHead,c	;volatile
 14022  00236C  0012               	return	
 14023  00236E                     __end_of_EUSART1_Transmit_ISR:
 14024                           	opt stack 0
 14025                           tosu	equ	0xFFF
 14026                           tosh	equ	0xFFE
 14027                           tosl	equ	0xFFD
 14028                           pclatu	equ	0xFFB
 14029                           pclath	equ	0xFFA
 14030                           tblptru	equ	0xFF8
 14031                           tblptrh	equ	0xFF7
 14032                           tblptrl	equ	0xFF6
 14033                           tablat	equ	0xFF5
 14034                           prodh	equ	0xFF4
 14035                           prodl	equ	0xFF3
 14036                           intcon	equ	0xFF2
 14037                           intcon2	equ	0xFF1
 14038                           postinc0	equ	0xFEE
 14039                           fsr0h	equ	0xFEA
 14040                           fsr0l	equ	0xFE9
 14041                           wreg	equ	0xFE8
 14042                           postdec1	equ	0xFE5
 14043                           fsr1h	equ	0xFE2
 14044                           fsr1l	equ	0xFE1
 14045                           indf2	equ	0xFDF
 14046                           postinc2	equ	0xFDE
 14047                           postdec2	equ	0xFDD
 14048                           fsr2h	equ	0xFDA
 14049                           fsr2l	equ	0xFD9
 14050                           status	equ	0xFD8
 14051                           
 14052 ;; *************** function _EUSART1_Receive_ISR *****************
 14053 ;; Defined at:
 14054 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 14055 ;; Parameters:    Size  Location     Type
 14056 ;;		None
 14057 ;; Auto vars:     Size  Location     Type
 14058 ;;		None
 14059 ;; Return value:  Size  Location     Type
 14060 ;;                  1    wreg      void 
 14061 ;; Registers used:
 14062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14063 ;; Tracked objects:
 14064 ;;		On entry : 0/0
 14065 ;;		On exit  : 0/0
 14066 ;;		Unchanged: 0/0
 14067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14068 ;;      Params:         0       0       0       0       0       0       0
 14069 ;;      Locals:         0       0       0       0       0       0       0
 14070 ;;      Temps:          0       0       0       0       0       0       0
 14071 ;;      Totals:         0       0       0       0       0       0       0
 14072 ;;Total ram usage:        0 bytes
 14073 ;; Hardware stack levels used:    1
 14074 ;; This function calls:
 14075 ;;		Nothing
 14076 ;; This function is called by:
 14077 ;;		_INTERRUPT_InterruptManager
 14078 ;; This function uses a non-reentrant model
 14079 ;;
 14080                           
 14081                           	psect	text78
 14082  002470                     __ptext78:
 14083                           	opt stack 0
 14084  002470                     _EUSART1_Receive_ISR:
 14085                           	opt stack 23
 14086                           
 14087                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 14088                           
 14089                           ; BSR set to: 0
 14090                           ;incstack = 0
 14091  002470  A2AB               	btfss	4011,1,c	;volatile
 14092  002472  D002               	goto	i2l770
 14093                           
 14094                           ;eusart1.c: 206: {
 14095                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 14096  002474  98AB               	bcf	4011,4,c	;volatile
 14097                           
 14098                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 14099  002476  88AB               	bsf	4011,4,c	;volatile
 14100  002478                     i2l770:
 14101                           
 14102                           ;eusart1.c: 210: }
 14103                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 14104  002478  5037               	movf	_eusart1RxHead,w,c	;volatile
 14105  00247A  0D01               	mullw	1
 14106  00247C  0E46               	movlw	low _eusart1RxBuffer
 14107  00247E  24F3               	addwf	prodl,w,c
 14108  002480  6ED9               	movwf	fsr2l,c
 14109  002482  0E01               	movlw	high _eusart1RxBuffer
 14110  002484  20F4               	addwfc	prodh,w,c
 14111  002486  6EDA               	movwf	fsr2h,c
 14112  002488  CFAE FFDF          	movff	4014,indf2	;volatile
 14113  00248C  2A37               	incf	_eusart1RxHead,f,c	;volatile
 14114                           
 14115                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 14116  00248E  0E27               	movlw	39
 14117  002490  6437               	cpfsgt	_eusart1RxHead,c	;volatile
 14118  002492  D002               	goto	i2l771
 14119                           
 14120                           ;eusart1.c: 217: {
 14121                           ;eusart1.c: 218: eusart1RxHead = 0;
 14122  002494  0E00               	movlw	0
 14123  002496  6E37               	movwf	_eusart1RxHead,c	;volatile
 14124  002498                     i2l771:
 14125                           
 14126                           ;eusart1.c: 219: }
 14127                           ;eusart1.c: 220: eusart1RxCount++;
 14128  002498  0100               	movlb	0	; () banked
 14129  00249A  2BD4               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 14130                           
 14131                           ; BSR set to: 0
 14132  00249C  0012               	return		;funcret
 14133  00249E                     __end_of_EUSART1_Receive_ISR:
 14134                           	opt stack 0
 14135                           tosu	equ	0xFFF
 14136                           tosh	equ	0xFFE
 14137                           tosl	equ	0xFFD
 14138                           pclatu	equ	0xFFB
 14139                           pclath	equ	0xFFA
 14140                           tblptru	equ	0xFF8
 14141                           tblptrh	equ	0xFF7
 14142                           tblptrl	equ	0xFF6
 14143                           tablat	equ	0xFF5
 14144                           prodh	equ	0xFF4
 14145                           prodl	equ	0xFF3
 14146                           intcon	equ	0xFF2
 14147                           intcon2	equ	0xFF1
 14148                           postinc0	equ	0xFEE
 14149                           fsr0h	equ	0xFEA
 14150                           fsr0l	equ	0xFE9
 14151                           wreg	equ	0xFE8
 14152                           postdec1	equ	0xFE5
 14153                           fsr1h	equ	0xFE2
 14154                           fsr1l	equ	0xFE1
 14155                           indf2	equ	0xFDF
 14156                           postinc2	equ	0xFDE
 14157                           postdec2	equ	0xFDD
 14158                           fsr2h	equ	0xFDA
 14159                           fsr2l	equ	0xFD9
 14160                           status	equ	0xFD8
 14161                           tosu	equ	0xFFF
 14162                           tosh	equ	0xFFE
 14163                           tosl	equ	0xFFD
 14164                           pclatu	equ	0xFFB
 14165                           pclath	equ	0xFFA
 14166                           tblptru	equ	0xFF8
 14167                           tblptrh	equ	0xFF7
 14168                           tblptrl	equ	0xFF6
 14169                           tablat	equ	0xFF5
 14170                           prodh	equ	0xFF4
 14171                           prodl	equ	0xFF3
 14172                           intcon	equ	0xFF2
 14173                           intcon2	equ	0xFF1
 14174                           postinc0	equ	0xFEE
 14175                           fsr0h	equ	0xFEA
 14176                           fsr0l	equ	0xFE9
 14177                           wreg	equ	0xFE8
 14178                           postdec1	equ	0xFE5
 14179                           fsr1h	equ	0xFE2
 14180                           fsr1l	equ	0xFE1
 14181                           indf2	equ	0xFDF
 14182                           postinc2	equ	0xFDE
 14183                           postdec2	equ	0xFDD
 14184                           fsr2h	equ	0xFDA
 14185                           fsr2l	equ	0xFD9
 14186                           status	equ	0xFD8
 14187                           
 14188                           	psect	text79
 14189  000000                     __ptext79:
 14190                           	opt stack 0
 14191                           tosu	equ	0xFFF
 14192                           tosh	equ	0xFFE
 14193                           tosl	equ	0xFFD
 14194                           pclatu	equ	0xFFB
 14195                           pclath	equ	0xFFA
 14196                           tblptru	equ	0xFF8
 14197                           tblptrh	equ	0xFF7
 14198                           tblptrl	equ	0xFF6
 14199                           tablat	equ	0xFF5
 14200                           prodh	equ	0xFF4
 14201                           prodl	equ	0xFF3
 14202                           intcon	equ	0xFF2
 14203                           intcon2	equ	0xFF1
 14204                           postinc0	equ	0xFEE
 14205                           fsr0h	equ	0xFEA
 14206                           fsr0l	equ	0xFE9
 14207                           wreg	equ	0xFE8
 14208                           postdec1	equ	0xFE5
 14209                           fsr1h	equ	0xFE2
 14210                           fsr1l	equ	0xFE1
 14211                           indf2	equ	0xFDF
 14212                           postinc2	equ	0xFDE
 14213                           postdec2	equ	0xFDD
 14214                           fsr2h	equ	0xFDA
 14215                           fsr2l	equ	0xFD9
 14216                           status	equ	0xFD8
 14217                           
 14218                           	psect	rparam
 14219  0000                     tosu	equ	0xFFF
 14220                           tosh	equ	0xFFE
 14221                           tosl	equ	0xFFD
 14222                           pclatu	equ	0xFFB
 14223                           pclath	equ	0xFFA
 14224                           tblptru	equ	0xFF8
 14225                           tblptrh	equ	0xFF7
 14226                           tblptrl	equ	0xFF6
 14227                           tablat	equ	0xFF5
 14228                           prodh	equ	0xFF4
 14229                           prodl	equ	0xFF3
 14230                           intcon	equ	0xFF2
 14231                           intcon2	equ	0xFF1
 14232                           postinc0	equ	0xFEE
 14233                           fsr0h	equ	0xFEA
 14234                           fsr0l	equ	0xFE9
 14235                           wreg	equ	0xFE8
 14236                           postdec1	equ	0xFE5
 14237                           fsr1h	equ	0xFE2
 14238                           fsr1l	equ	0xFE1
 14239                           indf2	equ	0xFDF
 14240                           postinc2	equ	0xFDE
 14241                           postdec2	equ	0xFDD
 14242                           fsr2h	equ	0xFDA
 14243                           fsr2l	equ	0xFD9
 14244                           status	equ	0xFD8
 14245                           
 14246                           	psect	temp
 14247  000048                     btemp:
 14248                           	opt stack 0
 14249  000048                     	ds	1
 14250  0000                     int$flags	set	btemp
 14251  0000                     wtemp6	set	btemp+1
 14252                           tosu	equ	0xFFF
 14253                           tosh	equ	0xFFE
 14254                           tosl	equ	0xFFD
 14255                           pclatu	equ	0xFFB
 14256                           pclath	equ	0xFFA
 14257                           tblptru	equ	0xFF8
 14258                           tblptrh	equ	0xFF7
 14259                           tblptrl	equ	0xFF6
 14260                           tablat	equ	0xFF5
 14261                           prodh	equ	0xFF4
 14262                           prodl	equ	0xFF3
 14263                           intcon	equ	0xFF2
 14264                           intcon2	equ	0xFF1
 14265                           postinc0	equ	0xFEE
 14266                           fsr0h	equ	0xFEA
 14267                           fsr0l	equ	0xFE9
 14268                           wreg	equ	0xFE8
 14269                           postdec1	equ	0xFE5
 14270                           fsr1h	equ	0xFE2
 14271                           fsr1l	equ	0xFE1
 14272                           indf2	equ	0xFDF
 14273                           postinc2	equ	0xFDE
 14274                           postdec2	equ	0xFDD
 14275                           fsr2h	equ	0xFDA
 14276                           fsr2l	equ	0xFD9
 14277                           status	equ	0xFD8


Data Sizes:
    Strings     1247
    Constant    168
    Data        20
    BSS         250
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      71
    BANK0           160    101     158
    BANK1           256      0     194
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    GroupCommon@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetIntFromUartData@dataRegArr(COMRAM[8]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetIntFromUartData@dataRegArr(COMRAM[8]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 101
		 -> STR_32(CODE[37]), STR_31(CODE[38]), STR_30(CODE[86]), STR_29(CODE[53]), 
		 -> STR_28(CODE[46]), STR_27(CODE[29]), STR_26(CODE[101]), STR_25(CODE[86]), 
		 -> STR_24(CODE[61]), STR_23(CODE[62]), STR_22(CODE[45]), STR_21(CODE[74]), 
		 -> STR_20(CODE[25]), STR_19(CODE[79]), STR_18(CODE[75]), STR_17(CODE[46]), 
		 -> STR_16(CODE[61]), STR_15(CODE[66]), STR_14(CODE[23]), STR_13(CODE[31]), 
		 -> STR_11(CODE[20]), STR_9(CODE[20]), STR_7(CODE[18]), STR_6(CODE[20]), 
		 -> STR_5(CODE[31]), STR_4(CODE[11]), STR_3(CODE[11]), STR_2(CODE[11]), 
		 -> STR_1(CODE[11]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_33(CODE[7]), STR_12(CODE[9]), STR_10(CODE[12]), STR_8(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), readUartByte@dest(BANK0[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetIntFromUartData@dataRegArr(COMRAM[8]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetIntFromUartData@dataRegArr(COMRAM[8]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), readUartByte@dest(BANK0[50]), 

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 


Critical Paths under _main in COMRAM

    _readUartByte->_GroupCommon
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _InitRxMessageParams->_ZeroArray
    _ZeroArray->_memset
    _PrintHelpScreen->_sprintf
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendUartSystemInitMessage->_sprintf
    _UART_Write_Text->_EUSART1_Write
    _InitSystemApplicationManagers->_PLLInitialize
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_make8
    _SWSPI_Synth_send_bits->_SwSpi_Clk_Pin
    _SWSPI_Synth_send_bits->_SwSpi_Data_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _CheckFlashPrecentage->___ftdiv
    _AdcConvert->_FlashSampleWrite
    _exp->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartByte
    _GroupCommon->_PrintHelpScreen
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  153655
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                        51    51      0   17115
                                             50 BANK0     51    51      0
                       _EUSART1_Read
                        _GroupCommon *
                            _GroupRx *
                            _GroupTx *
                _InitRxMessageParams
                    _UART_Write_Text
                            _sprintf
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      67
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    1280
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    1280
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     324
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _GroupTx                                              4     1      3      22
                                             35 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _GroupRx                                              4     1      3      22
                                             35 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _GroupCommon                                          3     1      2    7963
                                             35 COMRAM     3     1      2
                    _PrintHelpScreen
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _PrintHelpScreen                                     50    50      0    7842
                                              0 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     311
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           50    50      0    7270
                                              0 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6    4660
                                             23 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      4     2      2    2338
                                             24 COMRAM     4     2      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      44
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   16181
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0    8289
                                             41 COMRAM     6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              0     0      0    7891
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (3) _SWSPI_send_word                                      9     4      5    7891
                                             32 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (4) _make8                                                9     4      5     870
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SWSPI_Synth_send_bits                                3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (4) _SWSPI_DAC_send_bits                                  3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Data_Pin                                       2     1      1     610
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Clk_Pin                                        2     1      1     762
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   13919
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0   98581
                                             83 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83041
                                             66 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26919
                                             48 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   44808
                                             57 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             48 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11219
                                             49 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     632
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     896
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             39 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11976
                                             36 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     563
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (8) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendUartSystemInitMessage
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _GroupCommon *
       _PrintHelpScreen
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
       _testLeds
     _GroupRx *
     _GroupTx *
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _UART_Write_Text *
       _EUSART1_Write
     _sprintf *
     _toupper *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      C2       6       75.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     65      9E       4       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A7       9        0.0%
DATA                 0      0     1A7      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 06 18:11:53 2018

              __end_of_keepAliveSignalLed 2634                              ___altoft@exp 008F  
                _eusart1TxBufferRemaining 00FD                             ___altoft@sign 0090  
              __size_of_FLASH_IsWriteDone 000E                                        l42 1D82  
                                      l44 1DC8                                        l96 08A6  
                                      l97 07CC                       __end_of_BlinkOkLeds 1E28  
                         _SWSPI_send_word 17E8                       ___wmul@multiplicand 001A  
                         _timer0ReloadVal 0046                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 0083  
                            ___ftadd@exp2 0082                               __CFG_LVP$ON 000000  
                            ___ftadd@sign 0081                               ?_MEMORY_ISR 0001  
                                     l210 23F8                                       l211 23E2  
                                     l154 032E                                       l170 0158  
                                     l155 00E8                                       l172 0162  
                                     l164 012C                                       l413 0B3A  
                                     l181 0240                                       l173 016C  
                                     l157 00F4                                       l182 0218  
                                     l174 0176                                       l511 208A  
                                     l503 1FD6                                       l415 0BA4  
                                     l175 01B4                                       l159 010A  
                                     l512 204E                                       l504 1FA2  
                                     l600 22D0                                       l176 02B2  
                                     l192 0276                                       l168 014C  
                                     l521 2062                                       l513 2058  
                                     l505 1FBC                                       l177 01C0  
                                     l169 019E                                       l530 2080  
                                     l522 206C                                       l506 1FC6  
                                     l275 1004                                       l187 02C6  
                                     l195 028C                                       l276 1022  
                                     l540 20E0                                       l620 25EA  
                                     l188 024C                                       l541 20A4  
                                     l197 02EE                                       l550 20B8  
                                     l542 20AE                                       l198 02F4  
                                     l551 20C2                                       l624 25EE  
                                     l608 22DA                                       l529 2076  
                                     l609 22E4                                       l482 185C  
                                     l619 25F2                                       l476 1802  
                                     l558 20CC                                       l486 186E  
                                     l559 20D6                                       l495 202E  
                                     l487 1886                                       l479 1810  
                                     l496 1FFA                                       l760 2280  
                                     l497 2014                                       l489 189C  
                                     l577 22B2                                       l745 2152  
                                     l498 201E                                       l578 228A  
                                     l587 229E                                       l579 2294  
                                     l747 2178                                       l588 22A8  
                                     l598 22EE                                       l758 225E  
                                     l855 17E6                                       l599 22C6  
                                     l759 2282                                       l856 179E  
                                     l858 17BE                                       l859 17C0  
                                     l968 2458                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                          PLLInitialize@idx 002C  
                                     _exp 05BE                                       _log 0E12  
                                     _pow 0C96                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
          ?_InitSystemApplicationManagers 0001                              ___ftdiv@cntr 0063  
                            ___ftdiv@sign 0068                                      l1120 1EF0  
                                    l1121 1F1E                                      l1115 1F22  
                                    l1116 1EE4                                      l1061 2598  
                                    l1118 1EE8                                      l1062 258C  
                                    l1119 1EEC                                      l1064 2592  
                                    l1235 1E98                                      l1260 15EE  
                                    l1252 15A4                                      l1236 1EB0  
                                    l1253 15BE                                      l1254 1620  
                                    l1238 1ED6                                      l1263 1640  
                                    l1239 1ECA                                      l1257 15C4  
                                    l1530 0A36                                      l1354 1BDE  
                                    l4002 224C                                      l1515 09BA  
                                    l1355 1BD2                                      l1259 160C  
                                    l1524 0A4A                                      l1541 0AA2  
                                    l1550 126E                                      l1542 0ABE  
                                    l1710 0CD0                                      l1630 1D22  
                                    l1551 12AC                                      l1543 0AEE  
                                    l1519 09E4                                      l1631 1D16  
                                    l1552 12D2                                      l1712 0CF8  
                                    l1641 1F50                                      l1465 2312  
                                    l1529 0A40                                      l1713 0D7E  
                                    l1490 19D2                                      l1642 1F44  
                                    l1538 0A7E                                      l1570 11E2  
                                    l1714 0D5C                                      l1634 1D4A  
                                    l1491 19C8                                      l1539 0A74  
                                    l1563 1150                                      l1715 0E04  
                                    l1635 1D58                                      l1484 1976  
                                    l1548 1246                                      l1580 21DE  
                                    l1556 1B4E                                      l1485 196C  
                                    l1565 1178                                      l1557 1B7E  
                                    l1709 0CE0                                      l1574 2556  
                                    l1566 11AA                                      l1910 0648  
                                    l1487 19AA                                      l1567 11BA  
                                    l1911 0678                                      l1488 1994  
                                    l1592 10F8                                      l1584 105C  
                                    l1912 07A2                                      l5008 0BEC  
                                    l1569 11D2                                      l1593 10EC  
                                    l1921 135C                                      l1913 0778  
                                    l1586 10D4                                      l1922 13D8  
                                    l1595 1114                                      l1587 10C4  
                                    l1931 1680                                      l1907 05D8  
                                    l1933 16C6                                      l1909 0610  
                                    l1918 1342                                      l1927 1AB6  
                                    l1919 1334                                      l1935 16F4  
                                    l6024 1796                                      l1936 16E8  
                                    l6120 0778                                      l1872 2670  
                                    l1697 24B8                                      l1698 24A8  
                                    l1971 0E2E                                      l1980 1502  
                                    l4436 24A8                                      l1973 0E4E  
                                    l5086 1E32                                      l5256 0288  
                                    l5098 1DD4                                      l1979 1582  
                                    l4660 182A                                      l4580 1D72  
                                    l4656 181C                                      l3962 1BAA  
                                    ?_exp 0099                                      ?_log 0090  
                                    l6198 07C4                                      l4984 0B2A  
                                    l4994 0B82                                      l4998 0B94  
                                    ?_pow 00A2                                      STR_1 7FDD  
                                    STR_2 7FDD                                      STR_3 7FDD  
                                    STR_4 7FDD                                      STR_5 7F17  
                                    STR_6 7F83                                      STR_7 7FBF  
                                    STR_8 7FF8                                      STR_9 7FAB  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u3210 107A                                      u3215 1072  
                                    u3320 1658                                      u4200 1D26  
                                    u3250 10FE                                      u3340 1F16  
                                    u3191 1040                                      u3280 1ADE  
                                    u4160 0B82                                      u3345 1F0C  
                                    u5210 195E                                      u4180 0BEC  
                                    u4308 2628                                      u5301 0978  
                                    u5311 098C                                      u5400 0A14  
                                    u3288 1AE0                                      u6040 194A  
                                    u4440 01E8                                      u5250 19DC  
                                    u3730 17F8                                      u4290 2626  
                                    u5340 09AC                                      u3820 1892  
                                    u3590 16A0                                      u4470 020A  
                                    u5511 1138                                      u5440 0A52  
                                    u5601 1256                                      u5370 09D6  
                                    u3770 1850                                      u5531 1160  
                                    u5700 26B0                                      u5701 26AC  
                                    u5470 0A86                                      u3598 16A4  
                                    u3790 1876                                      u4558 0308  
                                    u6407 1D9A                                      u4559 0326  
                                    u6417 1DAA                                      u6427 1DBA  
                                    u5581 122E                                      u6437 1DFA  
                                    u5750 17C4                                      u5670 134E  
                                    u5830 0652                                      u5575 243C  
                                    u6447 1E14                                      u5576 243E  
                                    u5840 0654                                      u5920 0D46  
                                    u6457 1E58                                      u6467 1E72  
                                    u5765 17E2                                      u6477 0892  
                                    u6397 1D8A                                      u5766 17E4  
                                    u5950 0F90                                      u5945 0F3E  
                                    u5970 0FD4                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 224A  
                 ??_InitAdcApplicationMgr 0018                                      _main 1E86  
                            ___ftpack@arg 0018                             ?_EUSART1_Read 0001  
                            ___ftpack@exp 001B                           _TMR0_StartTimer 26E0  
                         __end_of_DacInit 1D04                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0099                                      log@x 0090  
                       ?_FLASH_WriteBlock 001D                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A2                                      pow@y 00A5  
                                    prodh 000FF4                                      prodl 000FF3  
           __size_of_CheckFlashPrecentage 00AE                                      start 00DC  
                           __CFG_IESO$OFF 000000                        ??_FLASH_WriteBlock 0023  
                           _adcSampleMode 00D6                           GroupCommon@data 0024  
                            ___ftmul@cntr 0076                              ___param_bank 000000  
                            ___ftmul@sign 0077                            _BlinkErrorLeds 1E28  
                 __end_of_UART_Write_Text 240C                           __end_of_GroupRx 25C8  
                         __end_of_GroupTx 24F6                              ___fttol@exp1 0086  
                                   ??_exp 002F                                     ??_log 002F  
                            ___fttol@lval 0082                                     ??_pow 002F  
                 __end_of_TMR0_Initialize 23D8            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 26A6                SWSPI_DAC_send_bits@phrType 001C  
                                   ?_main 0001                                     _EEADR 000FA9  
                         __end_of___ftadd 0B14                                     STR_10 7FD1  
                                   STR_11 7F97                                     STR_12 7FE8  
                                   STR_20 7F53                                     STR_13 7F17  
                                   STR_21 7CCA                                     STR_14 7F6C  
                                   STR_22 7E9F                                     STR_30 7BDA  
                                   STR_31 7ECC                                     STR_23 7D56  
                                   STR_15 7D14                                     STR_32 7EF2  
                                   STR_24 7DD1                                     STR_16 7D94  
                                   STR_33 7FF1                                     STR_17 7E71  
                                   STR_25 7B84           __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                                   STR_18 7C7F                                     STR_26 7B1F  
                                   STR_27 7F36                                     STR_19 7C30  
                                   STR_28 7E43                                     STR_29 7E0E  
                         __end_of___ftdiv 1304                           __end_of___ftneg 2564  
                         __end_of___ftmul 121C                                     _T0CON 000FD5  
                         __end_of___llmod 1D6A                           __end_of___ftsub 2208  
                         __end_of___fttol 1126                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 224A                                     i2l700 0086  
                                   i2l702 0090                                     i2l770 2478  
                                   i2l771 2498                                     i2l764 2362  
                                   i2l924 1A2C                                     i2l765 235E  
                                   i2l925 1A4E                                     i2l693 005E  
                                   i2l926 1A70                                     i2l695 006A  
                                   i2l698 007A                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                     _SWSPI_DAC_send_bits 1FF2         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                          ?_PrintHelpScreen 0001  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 2336  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 1A8E  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 26E8  
                                   _make8 1EE2            __size_of_SWSPI_Synth_send_bits 0058  
                                   _count 00CD                                     _floor 1304  
                                   _ldexp 1666                                     _frexp 1A8E  
                                   _errno 00C9             __end_of_SWSPI_Synth_send_bits 1FF2  
                                   _group 00D2                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 001C                             ??_GroupCommon 0026  
                          ?_EUSART1_Write 0001                               ?_AdcConvert 0001  
                                   pclath 000FFA                                     tablat 000FF5  
                                   pow@yi 00AF                            ??_EUSART1_Read 0018  
                                   status 000FD8                                     wtemp6 0049  
                         __end_of_sprintf 1666                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 2674            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
                             exp@exponent 009F            CheckFlashPrecentage@precentage 007C  
                    ?_SWSPI_DAC_send_bits 001A                    __end_of_BlinkErrorLeds 1E86  
                             ldexp@newexp 0093                   __end_of_SWSPI_send_word 18A0  
                             _BlinkOkLeds 1DCA                           __initialization 1C28  
                             log@exponent 0093                __end_of_EUSART1_Initialize 23A4  
                            __end_of_main 1EE2               ?_INTERRUPT_InterruptManager 0001  
                                  ??_main 0030                             ___fttol@sign1 0081  
                       ?_SwSpi_Set_CE_Pin 0018                        _TimerKeepAliveFlag 00D8  
                           __activetblptr 000002                ?_SendUartSystemInitMessage 0001  
                            _writeAddress 0042                        ??_SwSpi_Set_CE_Pin 0019  
                   ?_EUSART1_Transmit_ISR 0001                   __end_of_TMR0_StartTimer 26E4  
                                  ?_make8 0018                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  ?_floor 0091                 FLASH_WriteBlock@writeAddr 001D  
                                  ?_ldexp 0090                                    ?_frexp 0018  
                        __end_of___altoft 1C28                          ___llmod@dividend 0018  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                 ??_DacInit 002A  
                                  _EECON2 000FA7                             ?_readUartByte 0001  
                        __end_of___awtoft 2336                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 19FC                          __end_of___lltoft 1F9A  
                       ?_FlashSampleWrite 002D                            __CFG_WDTEN$OFF 000000  
                                  i2l1683 221E                                    i2l1684 2216  
                                  i2l1687 2236                                    i2l1688 2240  
                                  _TABLAT 000FF5                                    _RCREG1 000FAE  
                        __end_of___lwtoft 2588                 __size_of_FLASH_EraseBlock 0034  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 25E6                   __size_of_SwSpi_Data_Pin 0056  
                      ??_FlashSampleWrite 0060                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                     ??_SWSPI_DAC_send_bits 001B  
                     __end_of_GroupCommon 25A8                                 ??_GroupRx 0027  
                               ??_GroupTx 0027                           ?_BlinkErrorLeds 0001  
                          __CFG_XINST$OFF 000000                               GroupRx@data 0024  
                             GroupTx@data 0024                                    _cState 00D3  
                                  ___ftge 1B1E                 SWSPI_Synth_send_bits@data 001A  
                                  ___wmul 24F6                                 ??___ftadd 007E  
                          __CFG_STVREN$ON 000000                          ?_UART_Write_Text 0019  
                               ??___ftdiv 0060                                 ??___ftneg 001B  
                               ??___ftmul 006F                     __end_of_PLLInitialize 0C96  
                               ??___llmod 0020                                 ??___ftsub 002F  
                               ??___fttol 007C                                 ??___lwmod 0005  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                          ?_TMR0_Initialize 0001  
                                  _memset 249E                                    clear_0 1C6E  
                                  clear_1 1C7A                                    clear_2 1C86  
                     __size_of_AdcConvert 01B6                                    floor@i 0094  
                   __end_of_SwSpi_Clk_Pin 20F6                                    floor@x 0091  
                   ___ftmul@f3_as_product 0073                  SWSPI_DAC_send_bits@count 001B  
              FlashSampleWrite@channelNum 002F                              __pdataCOMRAM 003E  
                        __end_of_testLeds 1DCA                             ?_SetMcuSystem 0001  
       __end_of_SendUartSystemInitMessage 14C0                              __mediumconst 7A76  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                  ADC_GetConversion@channel 001C  
                          ??_readUartByte 0027                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0024  
                        ?_PIN_MANAGER_IOC 0001                                 ??_sprintf 001E  
                         _eusart1RxBuffer 0146                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                         _eusart1TxBuffer 0100                          __end_ofexp@coeff 7B04  
                       _SYSTEM_Initialize 2602                          __end_oflog@coeff 7B1F  
                              __accesstop 0060                   __end_of__initialization 1C8C  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                              ___ftadd@f1 0078                                ___ftadd@f2 007B  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 008D  
                           ___rparam_used 000001                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 002C                                ___ftdiv@f3 0064  
                              ___ftneg@f1 0018                                ___awtoft@c 0020  
                              ___ftmul@f1 0069                                ___ftmul@f2 006C  
                        ?_SWSPI_send_word 0021                                ___ftsub@f1 0084  
                              ___ftsub@f2 0087                                ___fttol@f1 0078  
                          __pcstackCOMRAM 0001                              __pidataBANK0 26B4  
                     ??_SYSTEM_Initialize 001C                                 ?_TMR0_ISR 0001  
                              ___lltoft@c 0020                             __end_of_make8 1F3E  
                           __end_of_floor 13E6                             __end_of_ldexp 172C  
                           __end_of_frexp 1B1E                    _SwSpi_Set_Synth_Le_Pin 22C2  
                              ___lwtoft@c 0020                      __end_of_EUSART1_Read 2182  
                            ??_MEMORY_ISR 0001                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                            ??_SetMcuSystem 001C  
                   TMR0_ISR@CountCallBack 0034             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                      _keepAliveSignalLed 261C                         make8@dataLocation 001C  
             __end_of_EUSART1_Receive_ISR 249E               FLASH_WriteBlock@GIEBitValue 002B  
                                 ??_make8 001D                                   ??_floor 002F  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0095  
                                 ??_frexp 001D                 __end_of_SYSTEM_Initialize 261C  
                         _AdcConvert$2943 00B9                             _eusart1RxHead 0037  
                     PrintHelpScreen@dest 0060                             _eusart1TxHead 0039  
                           _eusart1RxTail 0036                                __pbssBANK0 00C5  
                              __pbssBANK1 0100                               _GroupCommon 2588  
                           _eusart1TxTail 0038                       ?_keepAliveSignalLed 0001  
                      __size_of_eval_poly 00DA                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 7ADF                                __pnvCOMRAM 0046  
          __size_of_InitAdcApplicationMgr 0010             __end_of_InitAdcApplicationMgr 2698  
                      __end_of_MEMORY_ISR 26EC           ??_InitSystemApplicationManagers 0030  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
        __end_of_TMR0_SetInterruptHandler 26D4                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                    ??_keepAliveSignalLed 0018                         __end_of_ZeroArray 25E6  
                               ?___altoft 0087                                   ?_memset 0018  
                               ?___awtoft 0020                                 ?___ftpack 0018  
                               ?___lltoft 0020                 __size_of_FLASH_WriteBlock 00BC  
                 __size_of_ADC_Initialize 0016                FlashSampleWrite@sampleData 002D  
                               ?___lwtoft 0020              __end_of_CheckFlashPrecentage 194E  
                                 _OSCCON2 000FD2                                   _TBLPTRH 000FF7  
                                 _TBLPTRL 000FF6                                   _TBLPTRU 000FF8  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
                                 _DacInit 1C9A                              ??_AdcConvert 00B3  
                        _FLASH_EraseBlock 240C                            _SwSpi_Data_Pin 204A  
                           _SetMcuRunTime 2182                           __CFG_PWRTEN$OFF 000000  
                                 _GroupRx 25A8                                   _GroupTx 24CA  
                                 __Hparam 0000                              ?_BlinkOkLeds 0001  
                                 __Lparam 0000                                 ?_testLeds 0001  
                    PLLInitialize@idx_590 002E                           __size_of___ftge 0090  
                                 ___ftadd 0966                                   ___ftdiv 121C  
                    __end_of_readUartByte 035C                                   ___ftneg 2540  
                         __size_of___wmul 0026                                   ___ftmul 1126  
                                 ___llmod 1D04                                   ___ftsub 21C6  
                                 ___fttol 102E                FlashSampleWrite@rotateLeft 0062  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 2208  
                    AdcConvert@_adcResult 00B5                                ??___altoft 008B  
              SWSPI_Synth_send_bits@count 001B                     _mcuRunTimeIn5SecTicks 00C5  
                                 _channel 00D5                                   __pcinit 1C28  
                              ??___awtoft 0023                                ??___ftpack 001D  
                       __end_of_eval_poly 159A                           __size_of_memset 002C  
                                 __ramtop 0600                                ??___lltoft 0024  
                                 __ptext0 1E86                                   __ptext1 00E0  
                                 __ptext2 2660                                   __ptext3 251C  
                                 __ptext4 25C8                                   __ptext5 249E  
                                 __ptext6 2588                                   __ptext7 25A8  
                                 __ptext8 24CA                                   __ptext9 1D6A  
                      __end_of_AdcConvert 0966                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001C  
                   _OSCILLATOR_Initialize 2698                              __size_of_exp 01F2  
                            __size_of_log 0122                              __size_of_pow 017C  
             ??_SendUartSystemInitMessage 0024                        _EUSART1_Initialize 236E  
                ??_PIN_MANAGER_Initialize 0018                                   _request 00D1  
              __size_of_SYSTEM_Initialize 001A                   ?_SwSpi_Set_Dac_Sync_Pin 0001  
                                 _sprintf 159A                    __end_of_SwSpi_Data_Pin 20A0  
                                 _toupper 2660                      end_of_initialization 1C8C  
                                 exp@sign 00A1                       ?_EUSART1_Initialize 0001  
                        ??_BlinkErrorLeds 0018                     _SWSPI_Synth_send_bits 1F9A  
              __end_of_TEST_PLL_REGISTERS 7AAB                  __size_of_PrintHelpScreen 0262  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 7A76  
                    __end_of_SetMcuSystem 26CA                                   pow@sign 00AE  
                        AdcConvert@adcRes 00BC                         readUartByte@chRec 00C4  
                              ??_testLeds 0018                      SWSPI_send_word@datac 0026  
                              _rxMsgQueue 00DB                                   postdec1 000FE5  
                                 postdec2 000FDD                __end_of_PLL_INIT_REGISTERS 7ADF  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0044                       _InitRxMessageParams 251C  
                             testLeds@idx 0019                 __size_of_FlashSampleWrite 00FA  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 2660  
  __size_of_InitSystemApplicationManagers 0016             _InitSystemApplicationManagers 264A  
                _TMR0_SetInterruptHandler 26CA                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 2602             FLASH_WriteBlock@flashWrBufPtr 0021  
                    ?_InitRxMessageParams 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018               __end_of_SWSPI_DAC_send_bits 204A  
                FLASH_EraseBlock@baseAddr 0018             SendUartSystemInitMessage@dest 0060  
                             ___ftdiv@exp 0067                              _EUSART1_Read 213E  
               _SendUartSystemInitMessage 13E6                      _CheckFlashPrecentage 18A0  
                       FLASH_WriteBlock@i 002C                               ___ftmul@exp 0072  
                 ?_SwSpi_Set_Synth_Le_Pin 0018              __end_of_INTERRUPT_Initialize 26E0  
                          __end_of___ftge 1BAE              InitAdcApplicationMgr@channel 0018  
                      GroupCommon@request 0026                            __end_of___wmul 251C  
                           __pidataCOMRAM 26D4                         __size_of_TMR0_ISR 0092  
                          _ADC_Initialize 2634                          _FLASH_WriteBlock 172C  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_memset 24CA  
                              floor@expon 0097                  __size_of_UART_Write_Text 0034  
                       ??_ClearMcuRunTime 0018                       start_initialization 1C28  
                              eval_poly@d 0087                                eval_poly@n 0089  
                              eval_poly@x 0084                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 0090  
         __size_of_PIN_MANAGER_Initialize 0048                     ??_InitRxMessageParams 0024  
                             __end_of_exp 07B0                               __end_of_log 0F34  
                             __end_of_pow 0E12                  AdcConvert@_adcResult_258 00B7  
                  ?_SWSPI_Synth_send_bits 001A                           ??_SetMcuRunTime 0021  
                            ?_GroupCommon 0024                     __end_of_EUSART1_Write 2286  
                  __size_of_PLLInitialize 0182                                frexp@value 0018  
                         ___llmod@divisor 001C                     ?_CheckFlashPrecentage 0001  
                         ___llmod@counter 0020                  __size_of_PIN_MANAGER_IOC 0004  
                   __size_of_readUartByte 027C                    __size_of_SwSpi_Clk_Pin 0056  
          __end_of_SwSpi_Set_Synth_Le_Pin 22FE                         ??_PrintHelpScreen 0024  
                                ??___ftge 001E                                  ??___wmul 001C  
                    __size_of_BlinkOkLeds 005E                    __end_of_ADC_Initialize 264A  
                             __pdataBANK0 00EF                   SWSPI_DAC_send_bits@data 001A  
                          GroupRx@request 0027                                  ??_memset 001E  
             FLASH_EraseBlock@GIEBitValue 001C                  __end_of_FLASH_EraseBlock 2440  
                __size_of_SWSPI_send_word 00B8                            _eusart1RxCount 00D4  
                       __size_of___altoft 007A                                 _ZeroArray 25C8  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                          GroupTx@request 0027                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0030                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                          BlinkOkLeds@idx 001C                                  ?_DacInit 0001  
                            _readUartByte 00E0                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 2286              __size_of_EUSART1_Receive_ISR 002E  
                             sprintf@flag 001E                     _TMR0_InterruptHandler 00FB  
                               __pnvBANK0 00FB                  __size_of_TMR0_StartTimer 0004  
                                ?_GroupRx 0024                                  ?_GroupTx 0024  
                  _PIN_MANAGER_Initialize 20F6                     _InitAdcApplicationMgr 2688  
                               __pintcode 0008                             __pmediumconst 7A76  
                                ?___ftadd 0078                                  ?___ftdiv 0029  
                                ?___ftneg 0018                                  ?___ftmul 0069  
                                ?___llmod 0018                                  ?___ftsub 0084  
                                ?___fttol 0078                          _FlashSampleWrite 0F34  
                                ?___lwmod 0001                           ?_ADC_Initialize 0001  
                       __size_of_testLeds 0060                             _PLLInitialize 0B14  
             __size_of_keepAliveSignalLed 0018              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                                ?_ZeroArray 0020  
                                _BAUDCON1 000FB8                             _SwSpi_Clk_Pin 20A0  
                               _eval_poly 14C0                       BlinkErrorLeds@state 001B  
                         _TimerOneSecFlag 00DA                              _SetMcuSystem 26C0  
                          __size_of_make8 005C                                  ?_sprintf 0018  
                          __size_of_floor 00E2                            __size_of_ldexp 00C6  
                          __size_of_frexp 0090                                  ?_toupper 0001  
                        _conversionFormat 00D7                         ??_UART_Write_Text 001B  
                    _INTERRUPT_Initialize 26DC            FLASH_WriteBlock@blockStartAddr 0027  
                       ??_TMR0_Initialize 001A                    ??_CheckFlashPrecentage 0078  
                          ___wmul@product 001C                                  _LATAbits 000F89  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0       __size_of_INTERRUPT_InterruptManager 00D4  
              ??_TMR0_SetInterruptHandler 001A                                  i2u423_40 2222  
                                _PIR1bits 000F9E                                  _PIR2bits 000FA1  
                               _rxMsgData 01AE                          readUartByte@dest 0092  
                     SWSPI_send_word@data 0021                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                                 make8@data 0018  
                                _TMR0_ISR 19FC                        _TEST_PLL_REGISTERS 7A77  
                          ?_PLLInitialize 0001                         ??_PIN_MANAGER_IOC 0001  
      __size_of_SendUartSystemInitMessage 00DA                   SWSPI_send_word@dataSize 0025  
                              _ADCON0bits 000FC2                         ___wmul@multiplier 0018  
                          ?_SwSpi_Clk_Pin 0018                        __end_of_channelArr 7AE6  
                        ??_SwSpi_Data_Pin 0019                                ?_eval_poly 0084  
                      _PLL_INIT_REGISTERS 7AAB                         ??_SWSPI_send_word 0026  
                             _INTCON2bits 000FF1                                 copy_data0 1C3C  
                               copy_data1 1C5C                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 006A                     EUSART1_Read@readValue 0019  
                __end_of_FLASH_WriteBlock 17E8                      __size_of_GroupCommon 0020  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                                __Hrparam 0000                    ?_InitAdcApplicationMgr 0001  
                        __size_of_GroupRx 0020                          __size_of_GroupTx 002C  
                             _readAddress 003E                                  __Lrparam 0000  
                       _ADC_GetConversion 2440                        __CFG_BOREN$SBORDIS 000000  
                         _ClearMcuRunTime 2674                         __CFG_P2BMX$PORTD2 000000  
                 ??_OSCILLATOR_Initialize 0018                        ?_ADC_GetConversion 0018  
                       ??_TMR0_StartTimer 0018                          __size_of___ftadd 01AE  
                        __size_of___ftdiv 00E8                      _numOfValidateSamples 0030  
                        __size_of___ftneg 0024                                  ___altoft 1BAE  
                        __size_of___ftmul 00F6                          __size_of___llmod 0066  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0036                          __size_of___lwmod 0042  
                                ___awtoft 22FE                                  ___ftpack 194E  
                        _numOfReadSamples 003A                                  ___lltoft 1F3E  
                       _FLASH_IsWriteDone 26A6                                  ___lwtoft 2564  
                             ??_ZeroArray 0024                       ??_ADC_GetConversion 001A  
                                _exp$2946 009C                        ?_FLASH_IsWriteDone 0001  
                   SwSpi_Clk_Pin@cPinMode 0018                   ??_SWSPI_Synth_send_bits 001B  
                  SwSpi_Data_Pin@cPinMode 0018                                  __ptext10 035C  
                                __ptext11 213E                                  __ptext20 236E  
                                __ptext12 261C                                  __ptext21 2634  
                                __ptext13 26C0                                  __ptext30 0B14  
                                __ptext22 2182                                  __ptext14 2602  
                                __ptext31 2286                                  __ptext23 1D04  
                                __ptext15 23A4                                  __ptext40 204A  
                                __ptext32 2688                                  __ptext24 13E6  
                                __ptext16 26CA                                  __ptext41 20A0  
                                __ptext33 1C9A                                  __ptext25 159A  
                                __ptext17 20F6                                  __ptext50 1666  
                                __ptext42 2674                                  __ptext34 17E8  
                                __ptext26 23D8                                  __ptext18 2698  
                                __ptext51 1304                                  __ptext43 18A0  
                                __ptext35 1EE2                                  __ptext27 224A  
                                __ptext19 26DC                                  __ptext60 0966  
                                __ptext52 1A8E                                  __ptext44 1DCA  
                                __ptext36 22C2                                  __ptext28 264A  
                                __ptext61 2540                                  __ptext53 102E  
                                __ptext45 1E28                                  __ptext37 25E6  
                                __ptext29 26E0                                  __ptext70 26A6  
                                __ptext62 121C                                  __ptext54 1B1E  
                                __ptext46 07B0                                  __ptext38 1F9A  
                                __ptext71 2440                                  __ptext63 22FE  
                                __ptext55 1BAE                                  __ptext47 0C96  
                                __ptext39 1FF2                                  __ptext64 1F3E  
                                __ptext56 14C0                                  __ptext48 0E12  
                                __ptext73 19FC                                  __ptext65 2564  
                                __ptext57 24F6                                  __ptext49 05BE  
                                __ptext74 2208                                  __ptext66 194E  
                                __ptext58 1126                                  __ptext75 26E4  
                                __ptext67 0F34                                  __ptext59 21C6  
                                __ptext76 26E8                                  __ptext68 172C  
                                __ptext77 2336                                  __ptext69 240C  
                                __ptext78 2470                                  __ptext79 0000  
            SWSPI_Synth_send_bits@phrType 001C                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$2944 00A8                                  _pow$2945 00AB  
                     ??_FLASH_IsWriteDone 0018                           _PrintHelpScreen 035C  
                        __size_of_sprintf 00CC                          __size_of_toupper 0014  
                     UART_Write_Text@text 0019                             __size_of_main 005C  
                                _msgCount 00D0              _TMR0_DefaultInterruptHandler 000000  
               __end_of_ADC_GetConversion 2470              __size_of_SWSPI_DAC_send_bits 0058  
                      SWSPI_send_word@idx 0027                               _groupsArray 00EF  
                         ??_PLLInitialize 002A                                  _testLeds 1D6A  
                 __size_of_BlinkErrorLeds 005E                                  int$flags 0048  
               __end_of_FLASH_IsWriteDone 26B4        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                           ??_SwSpi_Clk_Pin 0019  
                     _EUSART1_Receive_ISR 2470                  __end_of_SwSpi_Set_CE_Pin 22C2  
                       ?_FLASH_EraseBlock 0018               __end_of_InitRxMessageParams 2540  
                                exp@coeff 7AE6                                _MEMORY_ISR 26E8  
                                log@coeff 7B04                    SWSPI_send_word@phrType 0029  
                      ??_FLASH_EraseBlock 001C                                _INTCONbits 000FF2  
                             ??_eval_poly 008B                               _sampleArray 016E  
                             _sampleCount 00CB                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                  __end_of_FlashSampleWrite 102E  
                                intlevel2 0000                                 sprintf@ap 001F  
                               sprintf@cp 0022                                 sprintf@sp 0018  
                    ?_EUSART1_Receive_ISR 0001                     __end_of_SetMcuRunTime 21C6  
                        ___lwmod@dividend 0001                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 2688                                _RCSTA1bits 000FAB  
            __end_of_EUSART1_Transmit_ISR 236E                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                         _TimerSamplingFlag 00D9  
                           AdcConvert@idx 00BE                             _isReWriteDone 00CF  
                    SwSpi_Clk_Pin@phrType 0019                     SwSpi_Data_Pin@phrType 0019  
                 SwSpi_Set_CE_Pin@phrType 0019                    __size_of_EUSART1_Write 003C  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                           _UART_Write_Text 23D8  
                                sprintf@c 0021                                  sprintf@f 001A  
                         ___lwmod@divisor 0003                           _TMR0_Initialize 23A4  
                 __end_of_PrintHelpScreen 05BE                           ___lwmod@counter 0005  
                                toupper@c 0018                         __CFG_T3CMX$PORTC0 000000  
                              _AdcConvert 07B0                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 213E                          UART_Write_Text@i 001B  
                       __CFG_FOSC$INTIO67 000000                           _PIN_MANAGER_IOC 26E4  
              __size_of_ADC_GetConversion 0030  
