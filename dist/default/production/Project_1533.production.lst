

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 06 13:25:54 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    96                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    97  0000                     
    98                           ; Version 1.45
    99                           ; Generated 16/11/2017 GMT
   100                           ; 
   101                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC18F45K22 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     
   133 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   134  0000                     
   135 ;; Function _GroupControlMcu is unused but had its address taken
   136  0000                     
   137 ;; Function _GroupStatusAndVersion is unused but had its address taken
   138  0000                     
   139 ;; Function _GroupAdc is unused but had its address taken
   140  0000                     
   141 ;; Function _GroupSynthesizers is unused but had its address taken
   142  0000                     
   143 ;; Function _GroupFlashMemory is unused but had its address taken
   144  0000                     
   145 ;; Function _GroupDAC is unused but had its address taken
   146  0000                     
   147                           	psect	idataCOMRAM
   148  002772                     __pidataCOMRAM:
   149                           	opt stack 0
   150                           
   151                           ;initializer for _writeAddress
   152  002772  4000               	dw	16384
   153  002774  0000               	dw	0
   154                           
   155                           	psect	idataBANK0
   156  0026F4                     __pidataBANK0:
   157                           	opt stack 0
   158                           
   159                           ;initializer for _groupsArray
   160  0026F4  00                 	db	0
   161  0026F5  00                 	db	0
   162  0026F6  00                 	db	0
   163  0026F7  00                 	db	0
   164  0026F8  00                 	db	0
   165  0026F9  00                 	db	0
   166  0026FA  00                 	db	0
   167  0026FB  00                 	db	0
   168  0026FC  00                 	db	0
   169  0026FD  00                 	db	0
   170  0026FE  00                 	db	0
   171  0026FF  00                 	db	0
   172                           
   173                           ;initializer for SendUartSystemInitMessage@F7616
   174  002700  52                 	db	82
   175  002701  6F                 	db	111
   176  002702  65                 	db	101
   177  002703  65                 	db	101
   178  002704  00                 	db	0
   179                           
   180                           ;initializer for _readAddress
   181  002705  4000               	dw	16384
   182  002707  0000               	dw	0
   183                           
   184                           	psect	smallconst
   185  000600                     __psmallconst:
   186                           	opt stack 0
   187  000600  00                 	db	0
   188  000601                     _TEST_PLL_REGISTERS:
   189                           	opt stack 0
   190  000601  041C               	dw	1052
   191  000603  0001               	dw	1
   192  000605  300B               	dw	12299
   193  000607  0061               	dw	97
   194  000609  26BA               	dw	9914
   195  00060B  00C0               	dw	192
   196  00060D  FCC9               	dw	64713
   197  00060F  1A19               	dw	6681
   198  000611  0428               	dw	1064
   199  000613  102D               	dw	4141
   200  000615  00E7               	dw	231
   201  000617  1200               	dw	4608
   202  000619  6076               	dw	24694
   203  00061B  3505               	dw	13573
   204  00061D  0025               	dw	37
   205  00061F  0080               	dw	128
   206  000621  8B84               	dw	35716
   207  000623  3200               	dw	12800
   208  000625  0003               	dw	3
   209  000627  0000               	dw	0
   210  000629  0032               	dw	50
   211  00062B  0008               	dw	8
   212  00062D  AAA1               	dw	43681
   213  00062F  01AA               	dw	426
   214  000631  0EDA               	dw	3802
   215  000633  0003               	dw	3
   216  000635                     __end_of_TEST_PLL_REGISTERS:
   217                           	opt stack 0
   218  000635                     _PLL_INIT_REGISTERS:
   219                           	opt stack 0
   220  000635  041C               	dw	1052
   221  000637  0001               	dw	1
   222  000639  300B               	dw	12299
   223  00063B  0061               	dw	97
   224  00063D  323A               	dw	12858
   225  00063F  00C0               	dw	192
   226  000641  BCC9               	dw	48329
   227  000643  2221               	dw	8737
   228  000645  0428               	dw	1064
   229  000647  102D               	dw	4141
   230  000649  00E7               	dw	231
   231  00064B  1200               	dw	4608
   232  00064D  2076               	dw	8310
   233  00064F  3501               	dw	13569
   234  000651  0025               	dw	37
   235  000653  0080               	dw	128
   236  000655  9B84               	dw	39812
   237  000657  3400               	dw	13312
   238  000659  0003               	dw	3
   239  00065B  0000               	dw	0
   240  00065D  0012               	dw	18
   241  00065F  0000               	dw	0
   242  000661  0001               	dw	1
   243  000663  0600               	dw	1536
   244  000665  0340               	dw	832
   245  000667  0020               	dw	32
   246  000669                     __end_of_PLL_INIT_REGISTERS:
   247                           	opt stack 0
   248  000669                     _channelArr:
   249                           	opt stack 0
   250  000669  07                 	db	7
   251  00066A  06                 	db	6
   252  00066B  05                 	db	5
   253  00066C  04                 	db	4
   254  00066D  19                 	db	25
   255  00066E  0A                 	db	10
   256  00066F  0D                 	db	13
   257  000670                     __end_of_channelArr:
   258                           	opt stack 0
   259  000670                     exp@coeff:
   260                           	opt stack 0
   261  000670  00                 	db	0
   262  000671  80                 	db	128
   263  000672  3F                 	db	63
   264  000673  72                 	db	114
   265  000674  31                 	db	49
   266  000675  3F                 	db	63
   267  000676  FE                 	db	254
   268  000677  75                 	db	117
   269  000678  3E                 	db	62
   270  000679  58                 	db	88
   271  00067A  63                 	db	99
   272  00067B  3D                 	db	61
   273  00067C  95                 	db	149
   274  00067D  1D                 	db	29
   275  00067E  3C                 	db	60
   276  00067F  C5                 	db	197
   277  000680  AE                 	db	174
   278  000681  3A                 	db	58
   279  000682  79                 	db	121
   280  000683  21                 	db	33
   281  000684  39                 	db	57
   282  000685  94                 	db	148
   283  000686  80                 	db	128
   284  000687  37                 	db	55
   285  000688  93                 	db	147
   286  000689  A7                 	db	167
   287  00068A  35                 	db	53
   288  00068B  56                 	db	86
   289  00068C  15                 	db	21
   290  00068D  34                 	db	52
   291  00068E                     __end_ofexp@coeff:
   292                           	opt stack 0
   293  00068E                     log@coeff:
   294                           	opt stack 0
   295  00068E  00                 	db	0
   296  00068F  00                 	db	0
   297  000690  00                 	db	0
   298  000691  00                 	db	0
   299  000692  80                 	db	128
   300  000693  3F                 	db	63
   301  000694  F0                 	db	240
   302  000695  FF                 	db	255
   303  000696  BE                 	db	190
   304  000697  E2                 	db	226
   305  000698  A9                 	db	169
   306  000699  3E                 	db	62
   307  00069A  83                 	db	131
   308  00069B  76                 	db	118
   309  00069C  BE                 	db	190
   310  00069D  AE                 	db	174
   311  00069E  2B                 	db	43
   312  00069F  3E                 	db	62
   313  0006A0  3C                 	db	60
   314  0006A1  C3                 	db	195
   315  0006A2  BD                 	db	189
   316  0006A3  D2                 	db	210
   317  0006A4  13                 	db	19
   318  0006A5  3D                 	db	61
   319  0006A6  78                 	db	120
   320  0006A7  D3                 	db	211
   321  0006A8  BB                 	db	187
   322  0006A9                     __end_oflog@coeff:
   323                           	opt stack 0
   324  0006A9                     STR_1:
   325  0006A9  2A                 	db	42
   326  0006AA  2A                 	db	42
   327  0006AB  2A                 	db	42
   328  0006AC  2A                 	db	42
   329  0006AD  2A                 	db	42
   330  0006AE  2A                 	db	42
   331  0006AF  2A                 	db	42
   332  0006B0  2A                 	db	42
   333  0006B1  2A                 	db	42
   334  0006B2  2A                 	db	42
   335  0006B3  2A                 	db	42
   336  0006B4  2A                 	db	42
   337  0006B5  2A                 	db	42
   338  0006B6  2A                 	db	42
   339  0006B7  2A                 	db	42
   340  0006B8  2A                 	db	42
   341  0006B9  2A                 	db	42
   342  0006BA  2A                 	db	42
   343  0006BB  2A                 	db	42
   344  0006BC  2A                 	db	42
   345  0006BD  2A                 	db	42
   346  0006BE  2A                 	db	42
   347  0006BF  2A                 	db	42
   348  0006C0  2A                 	db	42
   349  0006C1  20                 	db	32
   350  0006C2  0A                 	db	10
   351  0006C3  0D                 	db	13
   352  0006C4  00                 	db	0
   353  0006C5                     STR_3:
   354  0006C5  2A                 	db	42
   355  0006C6  2A                 	db	42
   356  0006C7  2A                 	db	42
   357  0006C8  2A                 	db	42
   358  0006C9  2A                 	db	42
   359  0006CA  2A                 	db	42
   360  0006CB  2A                 	db	42
   361  0006CC  2A                 	db	42
   362  0006CD  2A                 	db	42
   363  0006CE  2A                 	db	42
   364  0006CF  2A                 	db	42
   365  0006D0  2A                 	db	42
   366  0006D1  2A                 	db	42
   367  0006D2  2A                 	db	42
   368  0006D3  2A                 	db	42
   369  0006D4  2A                 	db	42
   370  0006D5  2A                 	db	42
   371  0006D6  2A                 	db	42
   372  0006D7  2A                 	db	42
   373  0006D8  2A                 	db	42
   374  0006D9  2A                 	db	42
   375  0006DA  2A                 	db	42
   376  0006DB  2A                 	db	42
   377  0006DC  2A                 	db	42
   378  0006DD  00                 	db	0
   379  0006DE                     STR_2:
   380  0006DE  0A                 	db	10
   381  0006DF  0D                 	db	13
   382  0006E0  20                 	db	32
   383  0006E1  46                 	db	70	;'F'
   384  0006E2  41                 	db	65	;'A'
   385  0006E3  53                 	db	83	;'S'
   386  0006E4  54                 	db	84	;'T'
   387  0006E5  20                 	db	32
   388  0006E6  4C                 	db	76	;'L'
   389  0006E7  49                 	db	73	;'I'
   390  0006E8  4E                 	db	78	;'N'
   391  0006E9  4B                 	db	75	;'K'
   392  0006EA  20                 	db	32
   393  0006EB  53                 	db	83	;'S'
   394  0006EC  59                 	db	89	;'Y'
   395  0006ED  53                 	db	83	;'S'
   396  0006EE  54                 	db	84	;'T'
   397  0006EF  45                 	db	69	;'E'
   398  0006F0  4D                 	db	77	;'M'
   399  0006F1  20                 	db	32
   400  0006F2  0A                 	db	10
   401  0006F3  0D                 	db	13
   402  0006F4  00                 	db	0
   403                           
   404                           ; #config settings
   405  0006F5  00                 	db	0	; dummy byte at the end
   406  0000                     
   407                           	psect	nvCOMRAM
   408  000046                     __pnvCOMRAM:
   409                           	opt stack 0
   410  000046                     _timer0ReloadVal:
   411                           	opt stack 0
   412  000046                     	ds	2
   413                           
   414                           	psect	nvBANK0
   415  0000F7                     __pnvBANK0:
   416                           	opt stack 0
   417  0000F7                     _TMR0_InterruptHandler:
   418                           	opt stack 0
   419  0000F7                     	ds	2
   420  0000F9                     _cnt:
   421                           	opt stack 0
   422  0000F9                     	ds	2
   423  0000FB                     _eusart1TxBufferRemaining:
   424                           	opt stack 0
   425  0000FB                     	ds	1
   426  0000                     _ANSELE	set	3900
   427  0000                     _ANSELB	set	3897
   428  0000                     _ANSELC	set	3898
   429  0000                     _ANSELD	set	3899
   430  0000                     _ANSELA	set	3896
   431  0000                     _ADCON0bits	set	4034
   432  0000                     _ADRESH	set	4036
   433  0000                     _ADRESL	set	4035
   434  0000                     _ADCON2	set	4032
   435  0000                     _ADCON1	set	4033
   436  0000                     _ADCON0	set	4034
   437  0000                     _T0CONbits	set	4053
   438  0000                     _T0CON	set	4053
   439  0000                     _TMR0L	set	4054
   440  0000                     _TMR0H	set	4055
   441  0000                     _EEDATA	set	4008
   442  0000                     _EEADR	set	4009
   443  0000                     _EECON2	set	4007
   444  0000                     _EECON1bits	set	4006
   445  0000                     _TABLAT	set	4085
   446  0000                     _TBLPTRL	set	4086
   447  0000                     _TBLPTRH	set	4087
   448  0000                     _TBLPTRU	set	4088
   449  0000                     _INTCON2bits	set	4081
   450  0000                     _WPUB	set	3937
   451  0000                     _TRISC	set	3988
   452  0000                     _TRISB	set	3987
   453  0000                     _TRISE	set	3990
   454  0000                     _LATC	set	3979
   455  0000                     _LATB	set	3978
   456  0000                     _LATE	set	3981
   457  0000                     _RCREG1	set	4014
   458  0000                     _RCSTA1bits	set	4011
   459  0000                     _TXREG1	set	4013
   460  0000                     _SPBRGH1	set	4016
   461  0000                     _SPBRG1	set	4015
   462  0000                     _TXSTA1	set	4012
   463  0000                     _RCSTA1	set	4011
   464  0000                     _BAUDCON1	set	4024
   465  0000                     _PIR1bits	set	3998
   466  0000                     _PIE1bits	set	3997
   467  0000                     _PIR2bits	set	4001
   468  0000                     _PIE2bits	set	4000
   469  0000                     _RCONbits	set	4048
   470  0000                     _OSCTUNE	set	3995
   471  0000                     _OSCCON2	set	4050
   472  0000                     _OSCCON	set	4051
   473  0000                     _LATAbits	set	3977
   474  0000                     _LATDbits	set	3980
   475  0000                     _INTCONbits	set	4082
   476  0000                     _IOCB	set	3938
   477  0000                     _PORTD	set	3971
   478  0000                     _LATD	set	3980
   479  0000                     _TRISD	set	3989
   480  0000                     _LATA	set	3977
   481  0000                     _TRISA	set	3986
   482  0000                     _LATCbits	set	3979
   483  0000                     _LATBbits	set	3978
   484                           
   485                           	psect	cinit
   486  001D28                     __pcinit:
   487                           	opt stack 0
   488  001D28                     start_initialization:
   489                           	opt stack 0
   490  001D28                     __initialization:
   491                           	opt stack 0
   492                           
   493                           ; Initialize objects allocated to BANK0 (21 bytes)
   494                           ; load TBLPTR registers with __pidataBANK0
   495  001D28  0EF4               	movlw	low __pidataBANK0
   496  001D2A  6EF6               	movwf	tblptrl,c
   497  001D2C  0E26               	movlw	high __pidataBANK0
   498  001D2E  6EF7               	movwf	tblptrh,c
   499  001D30  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   500  001D32  6EF8               	movwf	tblptru,c
   501  001D34  EE00  F0E2         	lfsr	0,__pdataBANK0
   502  001D38  EE10 F015          	lfsr	1,21
   503  001D3C                     copy_data0:
   504  001D3C  0009               	tblrd		*+
   505  001D3E  CFF5 FFEE          	movff	tablat,postinc0
   506  001D42  50E5               	movf	postdec1,w,c
   507  001D44  50E1               	movf	fsr1l,w,c
   508  001D46  E1FA               	bnz	copy_data0
   509                           
   510                           ; Initialize objects allocated to COMRAM (4 bytes)
   511                           ; load TBLPTR registers with __pidataCOMRAM
   512  001D48  0E72               	movlw	low __pidataCOMRAM
   513  001D4A  6EF6               	movwf	tblptrl,c
   514  001D4C  0E27               	movlw	high __pidataCOMRAM
   515  001D4E  6EF7               	movwf	tblptrh,c
   516  001D50  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   517  001D52  6EF8               	movwf	tblptru,c
   518  001D54  EE00  F042         	lfsr	0,__pdataCOMRAM
   519  001D58  EE10 F004          	lfsr	1,4
   520  001D5C                     copy_data1:
   521  001D5C  0009               	tblrd		*+
   522  001D5E  CFF5 FFEE          	movff	tablat,postinc0
   523  001D62  50E5               	movf	postdec1,w,c
   524  001D64  50E1               	movf	fsr1l,w,c
   525  001D66  E1FA               	bnz	copy_data1
   526                           
   527                           ; Clear objects allocated to BANK1 (174 bytes)
   528  001D68  EE01  F000         	lfsr	0,__pbssBANK1
   529  001D6C  0EAE               	movlw	174
   530  001D6E                     clear_0:
   531  001D6E  6AEE               	clrf	postinc0,c
   532  001D70  06E8               	decf	wreg,f,c
   533  001D72  E1FD               	bnz	clear_0
   534                           
   535                           ; Clear objects allocated to BANK0 (56 bytes)
   536  001D74  EE00  F0AA         	lfsr	0,__pbssBANK0
   537  001D78  0E38               	movlw	56
   538  001D7A                     clear_1:
   539  001D7A  6AEE               	clrf	postinc0,c
   540  001D7C  06E8               	decf	wreg,f,c
   541  001D7E  E1FD               	bnz	clear_1
   542                           
   543                           ; Clear objects allocated to COMRAM (18 bytes)
   544  001D80  EE00  F030         	lfsr	0,__pbssCOMRAM
   545  001D84  0E12               	movlw	18
   546  001D86                     clear_2:
   547  001D86  6AEE               	clrf	postinc0,c
   548  001D88  06E8               	decf	wreg,f,c
   549  001D8A  E1FD               	bnz	clear_2
   550  001D8C                     end_of_initialization:
   551                           	opt stack 0
   552  001D8C                     __end_of__initialization:
   553                           	opt stack 0
   554  001D8C  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   555  001D8E  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   556  001D90  0E00               	movlw	low (__Lmediumconst shr (0+16))
   557  001D92  6EF8               	movwf	tblptru,c
   558  001D94  0100               	movlb	0
   559  001D96  EF47  F010         	goto	_main	;jump to C main() function
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           postdec1	equ	0xFE5
   567                           fsr1l	equ	0xFE1
   568                           
   569                           	psect	bssCOMRAM
   570  000030                     __pbssCOMRAM:
   571                           	opt stack 0
   572  000030                     _numOfValidateSamples:
   573                           	opt stack 0
   574  000030                     	ds	4
   575  000034                     TMR0_ISR@CountCallBack:
   576                           	opt stack 0
   577  000034                     	ds	2
   578  000036                     _eusart1RxCount:
   579                           	opt stack 0
   580  000036                     	ds	1
   581  000037                     _eusart1RxTail:
   582                           	opt stack 0
   583  000037                     	ds	1
   584  000038                     _eusart1RxHead:
   585                           	opt stack 0
   586  000038                     	ds	1
   587  000039                     _eusart1TxTail:
   588                           	opt stack 0
   589  000039                     	ds	1
   590  00003A                     _eusart1TxHead:
   591                           	opt stack 0
   592  00003A                     	ds	1
   593  00003B                     _TimerKeepAliveFlag:
   594                           	opt stack 0
   595  00003B                     	ds	1
   596  00003C                     _TimerSamplingFlag:
   597                           	opt stack 0
   598  00003C                     	ds	1
   599  00003D                     _TimerOneSecFlag:
   600                           	opt stack 0
   601  00003D                     	ds	1
   602  00003E                     _numOfReadSamples:
   603                           	opt stack 0
   604  00003E                     	ds	4
   605                           tblptru	equ	0xFF8
   606                           tblptrh	equ	0xFF7
   607                           tblptrl	equ	0xFF6
   608                           tablat	equ	0xFF5
   609                           postinc0	equ	0xFEE
   610                           wreg	equ	0xFE8
   611                           postdec1	equ	0xFE5
   612                           fsr1l	equ	0xFE1
   613                           
   614                           	psect	dataCOMRAM
   615  000042                     __pdataCOMRAM:
   616                           	opt stack 0
   617  000042                     _writeAddress:
   618                           	opt stack 0
   619  000042                     	ds	4
   620                           tblptru	equ	0xFF8
   621                           tblptrh	equ	0xFF7
   622                           tblptrl	equ	0xFF6
   623                           tablat	equ	0xFF5
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           postdec1	equ	0xFE5
   627                           fsr1l	equ	0xFE1
   628                           
   629                           	psect	bssBANK0
   630  0000AA                     __pbssBANK0:
   631                           	opt stack 0
   632  0000AA                     _rxMsgData:
   633                           	opt stack 0
   634  0000AA                     	ds	20
   635  0000BE                     _mcuRunTimeIn5SecTicks:
   636                           	opt stack 0
   637  0000BE                     	ds	4
   638  0000C2                     _errno:
   639                           	opt stack 0
   640  0000C2                     	ds	2
   641  0000C4                     _sampleCount:
   642                           	opt stack 0
   643  0000C4                     	ds	2
   644  0000C6                     _count:
   645                           	opt stack 0
   646  0000C6                     	ds	2
   647  0000C8                     _isReWriteDone:
   648                           	opt stack 0
   649  0000C8                     	ds	1
   650  0000C9                     _msgCount:
   651                           	opt stack 0
   652  0000C9                     	ds	1
   653  0000CA                     _cState:
   654                           	opt stack 0
   655  0000CA                     	ds	1
   656  0000CB                     _channel:
   657                           	opt stack 0
   658  0000CB                     	ds	1
   659  0000CC                     _adcSampleMode:
   660                           	opt stack 0
   661  0000CC                     	ds	1
   662  0000CD                     _conversionFormat:
   663                           	opt stack 0
   664  0000CD                     	ds	1
   665  0000CE                     _rxMsgQueue:
   666                           	opt stack 0
   667  0000CE                     	ds	20
   668                           tblptru	equ	0xFF8
   669                           tblptrh	equ	0xFF7
   670                           tblptrl	equ	0xFF6
   671                           tablat	equ	0xFF5
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           postdec1	equ	0xFE5
   675                           fsr1l	equ	0xFE1
   676                           
   677                           	psect	dataBANK0
   678  0000E2                     __pdataBANK0:
   679                           	opt stack 0
   680  0000E2                     _groupsArray:
   681                           	opt stack 0
   682  0000E2                     	ds	12
   683  0000EE                     SendUartSystemInitMessage@F7616:
   684                           	opt stack 0
   685  0000EE                     	ds	5
   686  0000F3                     _readAddress:
   687                           	opt stack 0
   688  0000F3                     	ds	4
   689                           tblptru	equ	0xFF8
   690                           tblptrh	equ	0xFF7
   691                           tblptrl	equ	0xFF6
   692                           tablat	equ	0xFF5
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           postdec1	equ	0xFE5
   696                           fsr1l	equ	0xFE1
   697                           
   698                           	psect	bssBANK1
   699  000100                     __pbssBANK1:
   700                           	opt stack 0
   701  000100                     _eusart1TxBuffer:
   702                           	opt stack 0
   703  000100                     	ds	70
   704  000146                     _eusart1RxBuffer:
   705                           	opt stack 0
   706  000146                     	ds	40
   707  00016E                     _sampleArray:
   708                           	opt stack 0
   709  00016E                     	ds	64
   710                           tblptru	equ	0xFF8
   711                           tblptrh	equ	0xFF7
   712                           tblptrl	equ	0xFF6
   713                           tablat	equ	0xFF5
   714                           postinc0	equ	0xFEE
   715                           wreg	equ	0xFE8
   716                           postdec1	equ	0xFE5
   717                           fsr1l	equ	0xFE1
   718                           
   719                           	psect	cstackBANK1
   720  0001AE                     __pcstackBANK1:
   721                           	opt stack 0
   722  0001AE                     _pow$3289:
   723                           	opt stack 0
   724                           
   725                           ; 3 bytes @ 0x0
   726  0001AE                     	ds	3
   727  0001B1                     _pow$3290:
   728                           	opt stack 0
   729                           
   730                           ; 3 bytes @ 0x3
   731  0001B1                     	ds	3
   732  0001B4                     pow@sign:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0x6
   736  0001B4                     	ds	1
   737  0001B5                     pow@yi:
   738                           	opt stack 0
   739                           
   740                           ; 4 bytes @ 0x7
   741  0001B5                     	ds	4
   742  0001B9                     AdcConvert@_adcResult:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0xB
   746  0001B9                     	ds	2
   747  0001BB                     AdcConvert@_adcResult_332:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0xD
   751  0001BB                     	ds	2
   752  0001BD                     _AdcConvert$3288:
   753                           	opt stack 0
   754                           
   755                           ; 3 bytes @ 0xF
   756  0001BD                     	ds	3
   757  0001C0                     AdcConvert@adcRes:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x12
   761  0001C0                     	ds	2
   762  0001C2                     AdcConvert@idx:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x14
   766  0001C2                     	ds	1
   767                           tblptru	equ	0xFF8
   768                           tblptrh	equ	0xFF7
   769                           tblptrl	equ	0xFF6
   770                           tablat	equ	0xFF5
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           postdec1	equ	0xFE5
   774                           fsr1l	equ	0xFE1
   775                           
   776                           	psect	cstackBANK0
   777  000060                     __pcstackBANK0:
   778                           	opt stack 0
   779  000060                     ??_FlashSampleWrite:
   780  000060                     ??___ftdiv:
   781  000060                     SendUartSystemInitMessage@firstLine:
   782                           	opt stack 0
   783                           
   784                           ; 5 bytes @ 0x0
   785  000060                     	ds	2
   786  000062                     FlashSampleWrite@rotateLeft:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x2
   790  000062                     	ds	1
   791  000063                     ___ftdiv@cntr:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x3
   795  000063                     	ds	1
   796  000064                     ___ftdiv@f3:
   797                           	opt stack 0
   798                           
   799                           ; 3 bytes @ 0x4
   800  000064                     	ds	1
   801  000065                     SendUartSystemInitMessage@TxMsg:
   802                           	opt stack 0
   803                           
   804                           ; 30 bytes @ 0x5
   805  000065                     	ds	2
   806  000067                     ___ftdiv@exp:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x7
   810  000067                     	ds	1
   811  000068                     ___ftdiv@sign:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x8
   815  000068                     	ds	1
   816  000069                     ?___ftmul:
   817                           	opt stack 0
   818  000069                     ___ftmul@f1:
   819                           	opt stack 0
   820                           
   821                           ; 3 bytes @ 0x9
   822  000069                     	ds	3
   823  00006C                     ___ftmul@f2:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0xC
   827  00006C                     	ds	3
   828  00006F                     ??___ftmul:
   829                           
   830                           ; 1 bytes @ 0xF
   831  00006F                     	ds	3
   832  000072                     ___ftmul@exp:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x12
   836  000072                     	ds	1
   837  000073                     ___ftmul@f3_as_product:
   838                           	opt stack 0
   839                           
   840                           ; 3 bytes @ 0x13
   841  000073                     	ds	3
   842  000076                     ___ftmul@cntr:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x16
   846  000076                     	ds	1
   847  000077                     ___ftmul@sign:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0x17
   851  000077                     	ds	1
   852  000078                     ??_CheckFlashPrecentage:
   853  000078                     ?___ftadd:
   854                           	opt stack 0
   855  000078                     ?___fttol:
   856                           	opt stack 0
   857  000078                     ___ftadd@f1:
   858                           	opt stack 0
   859  000078                     ___fttol@f1:
   860                           	opt stack 0
   861                           
   862                           ; 3 bytes @ 0x18
   863  000078                     	ds	3
   864  00007B                     ___ftadd@f2:
   865                           	opt stack 0
   866                           
   867                           ; 3 bytes @ 0x1B
   868  00007B                     	ds	1
   869  00007C                     ??___fttol:
   870  00007C                     CheckFlashPrecentage@precentage:
   871                           	opt stack 0
   872                           
   873                           ; 3 bytes @ 0x1C
   874  00007C                     	ds	2
   875  00007E                     ??___ftadd:
   876                           
   877                           ; 1 bytes @ 0x1E
   878  00007E                     	ds	3
   879  000081                     ___ftadd@sign:
   880                           	opt stack 0
   881  000081                     ___fttol@sign1:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x21
   885  000081                     	ds	1
   886  000082                     ___ftadd@exp2:
   887                           	opt stack 0
   888  000082                     ___fttol@lval:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0x22
   892  000082                     	ds	1
   893  000083                     ___ftadd@exp1:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x23
   897  000083                     	ds	1
   898  000084                     ?___ftsub:
   899                           	opt stack 0
   900  000084                     ?_eval_poly:
   901                           	opt stack 0
   902  000084                     ___ftsub@f1:
   903                           	opt stack 0
   904  000084                     eval_poly@x:
   905                           	opt stack 0
   906                           
   907                           ; 3 bytes @ 0x24
   908  000084                     	ds	2
   909  000086                     ___fttol@exp1:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x26
   913  000086                     	ds	1
   914  000087                     ?___altoft:
   915                           	opt stack 0
   916  000087                     eval_poly@d:
   917                           	opt stack 0
   918  000087                     ___ftsub@f2:
   919                           	opt stack 0
   920  000087                     ___altoft@c:
   921                           	opt stack 0
   922                           
   923                           ; 4 bytes @ 0x27
   924  000087                     	ds	2
   925  000089                     eval_poly@n:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x29
   929  000089                     	ds	2
   930  00008B                     ??_eval_poly:
   931  00008B                     ??___altoft:
   932                           
   933                           ; 1 bytes @ 0x2B
   934  00008B                     	ds	2
   935  00008D                     eval_poly@res:
   936                           	opt stack 0
   937                           
   938                           ; 3 bytes @ 0x2D
   939  00008D                     	ds	2
   940  00008F                     ___altoft@exp:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x2F
   944  00008F                     	ds	1
   945  000090                     ?_log:
   946                           	opt stack 0
   947  000090                     ?_ldexp:
   948                           	opt stack 0
   949  000090                     ___altoft@sign:
   950                           	opt stack 0
   951  000090                     ldexp@value:
   952                           	opt stack 0
   953  000090                     log@x:
   954                           	opt stack 0
   955                           
   956                           ; 3 bytes @ 0x30
   957  000090                     	ds	1
   958  000091                     ?_floor:
   959                           	opt stack 0
   960  000091                     floor@x:
   961                           	opt stack 0
   962                           
   963                           ; 3 bytes @ 0x31
   964  000091                     	ds	2
   965  000093                     ldexp@newexp:
   966                           	opt stack 0
   967  000093                     log@exponent:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x33
   971  000093                     	ds	1
   972  000094                     floor@i:
   973                           	opt stack 0
   974                           
   975                           ; 3 bytes @ 0x34
   976  000094                     	ds	1
   977  000095                     ??_ldexp:
   978                           
   979                           ; 1 bytes @ 0x35
   980  000095                     	ds	2
   981  000097                     floor@expon:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x37
   985  000097                     	ds	2
   986  000099                     ?_exp:
   987                           	opt stack 0
   988  000099                     exp@x:
   989                           	opt stack 0
   990                           
   991                           ; 3 bytes @ 0x39
   992  000099                     	ds	3
   993  00009C                     _exp$3291:
   994                           	opt stack 0
   995                           
   996                           ; 3 bytes @ 0x3C
   997  00009C                     	ds	3
   998  00009F                     exp@exponent:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x3F
  1002  00009F                     	ds	2
  1003  0000A1                     exp@sign:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x41
  1007  0000A1                     	ds	1
  1008  0000A2                     ?_pow:
  1009                           	opt stack 0
  1010  0000A2                     pow@x:
  1011                           	opt stack 0
  1012                           
  1013                           ; 3 bytes @ 0x42
  1014  0000A2                     	ds	3
  1015  0000A5                     pow@y:
  1016                           	opt stack 0
  1017                           
  1018                           ; 3 bytes @ 0x45
  1019  0000A5                     	ds	3
  1020  0000A8                     ??_AdcConvert:
  1021                           
  1022                           ; 1 bytes @ 0x48
  1023  0000A8                     	ds	2
  1024                           tblptru	equ	0xFF8
  1025                           tblptrh	equ	0xFF7
  1026                           tblptrl	equ	0xFF6
  1027                           tablat	equ	0xFF5
  1028                           postinc0	equ	0xFEE
  1029                           wreg	equ	0xFE8
  1030                           postdec1	equ	0xFE5
  1031                           fsr1l	equ	0xFE1
  1032                           
  1033                           	psect	cstackCOMRAM
  1034  000001                     __pcstackCOMRAM:
  1035                           	opt stack 0
  1036  000001                     ?___lwmod:
  1037                           	opt stack 0
  1038  000001                     ___lwmod@dividend:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x0
  1042  000001                     	ds	2
  1043  000003                     ___lwmod@divisor:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x2
  1047  000003                     	ds	2
  1048  000005                     ___lwmod@counter:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x4
  1052  000005                     	ds	1
  1053  000006                     ??_INTERRUPT_InterruptManager:
  1054                           
  1055                           ; 1 bytes @ 0x5
  1056  000006                     	ds	18
  1057  000018                     ??_EUSART1_Read:
  1058  000018                     ??_BlinkErrorLeds:
  1059  000018                     ??_BlinkOkLeds:
  1060  000018                     ??_keepAliveSignalLed:
  1061  000018                     ?_ADC_GetConversion:
  1062                           	opt stack 0
  1063  000018                     ?___wmul:
  1064                           	opt stack 0
  1065  000018                     ?___ftpack:
  1066                           	opt stack 0
  1067  000018                     ?_frexp:
  1068                           	opt stack 0
  1069  000018                     ?___ftneg:
  1070                           	opt stack 0
  1071  000018                     ?___llmod:
  1072                           	opt stack 0
  1073  000018                     InitAdcApplicationMgr@channel:
  1074                           	opt stack 0
  1075  000018                     SwSpi_Data_Pin@cPinMode:
  1076                           	opt stack 0
  1077  000018                     SwSpi_Clk_Pin@cPinMode:
  1078                           	opt stack 0
  1079  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1080                           	opt stack 0
  1081  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1082                           	opt stack 0
  1083  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1084                           	opt stack 0
  1085  000018                     EUSART1_Write@txData:
  1086                           	opt stack 0
  1087  000018                     toupper@c:
  1088                           	opt stack 0
  1089  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1090                           	opt stack 0
  1091  000018                     ___wmul@multiplier:
  1092                           	opt stack 0
  1093  000018                     memcpy@d1:
  1094                           	opt stack 0
  1095  000018                     memset@p1:
  1096                           	opt stack 0
  1097  000018                     ___ftpack@arg:
  1098                           	opt stack 0
  1099  000018                     ___ftge@ff1:
  1100                           	opt stack 0
  1101  000018                     ___ftneg@f1:
  1102                           	opt stack 0
  1103  000018                     frexp@value:
  1104                           	opt stack 0
  1105  000018                     FLASH_EraseBlock@baseAddr:
  1106                           	opt stack 0
  1107  000018                     make8@data:
  1108                           	opt stack 0
  1109  000018                     ___llmod@dividend:
  1110                           	opt stack 0
  1111                           
  1112                           ; 4 bytes @ 0x17
  1113  000018                     	ds	1
  1114  000019                     SwSpi_Data_Pin@phrType:
  1115                           	opt stack 0
  1116  000019                     SwSpi_Clk_Pin@phrType:
  1117                           	opt stack 0
  1118  000019                     SwSpi_Set_CE_Pin@phrType:
  1119                           	opt stack 0
  1120  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1121                           	opt stack 0
  1122  000019                     WriteUartMessage@dataBuf:
  1123                           	opt stack 0
  1124  000019                     EUSART1_Read@readValue:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x18
  1128  000019                     	ds	1
  1129  00001A                     ??_ADC_GetConversion:
  1130  00001A                     ??_TMR0_Initialize:
  1131  00001A                     SWSPI_DAC_send_bits@data:
  1132                           	opt stack 0
  1133  00001A                     SWSPI_Synth_send_bits@data:
  1134                           	opt stack 0
  1135  00001A                     ___wmul@multiplicand:
  1136                           	opt stack 0
  1137  00001A                     memcpy@s1:
  1138                           	opt stack 0
  1139  00001A                     memset@c:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x19
  1143  00001A                     	ds	1
  1144  00001B                     SWSPI_DAC_send_bits@count:
  1145                           	opt stack 0
  1146  00001B                     SWSPI_Synth_send_bits@count:
  1147                           	opt stack 0
  1148  00001B                     ___ftpack@exp:
  1149                           	opt stack 0
  1150  00001B                     BlinkErrorLeds@idx:
  1151                           	opt stack 0
  1152  00001B                     BlinkOkLeds@idx:
  1153                           	opt stack 0
  1154  00001B                     WriteUartMessage@dataSize:
  1155                           	opt stack 0
  1156  00001B                     frexp@eptr:
  1157                           	opt stack 0
  1158  00001B                     ___ftge@ff2:
  1159                           	opt stack 0
  1160                           
  1161                           ; 3 bytes @ 0x1A
  1162  00001B                     	ds	1
  1163  00001C                     SWSPI_DAC_send_bits@phrType:
  1164                           	opt stack 0
  1165  00001C                     SWSPI_Synth_send_bits@phrType:
  1166                           	opt stack 0
  1167  00001C                     FLASH_EraseBlock@GIEBitValue:
  1168                           	opt stack 0
  1169  00001C                     ADC_GetConversion@channel:
  1170                           	opt stack 0
  1171  00001C                     make8@dataLocation:
  1172                           	opt stack 0
  1173  00001C                     ___ftpack@sign:
  1174                           	opt stack 0
  1175  00001C                     ___wmul@product:
  1176                           	opt stack 0
  1177  00001C                     memcpy@n:
  1178                           	opt stack 0
  1179  00001C                     memset@n:
  1180                           	opt stack 0
  1181  00001C                     ___llmod@divisor:
  1182                           	opt stack 0
  1183                           
  1184                           ; 4 bytes @ 0x1B
  1185  00001C                     	ds	1
  1186  00001D                     ??_make8:
  1187  00001D                     ??___ftpack:
  1188  00001D                     ??_frexp:
  1189  00001D                     ??_WriteUartMessage:
  1190  00001D                     BlinkErrorLeds@state:
  1191                           	opt stack 0
  1192  00001D                     BlinkOkLeds@state:
  1193                           	opt stack 0
  1194  00001D                     FLASH_WriteBlock@writeAddr:
  1195                           	opt stack 0
  1196                           
  1197                           ; 4 bytes @ 0x1C
  1198  00001D                     	ds	1
  1199  00001E                     ??___ftge:
  1200  00001E                     memcpy@tmp:
  1201                           	opt stack 0
  1202  00001E                     WriteUartMessage@idx:
  1203                           	opt stack 0
  1204  00001E                     memset@p:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x1D
  1208  00001E                     	ds	1
  1209  00001F                     memcpy@d:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x1E
  1213  00001F                     	ds	1
  1214  000020                     ?___awtoft:
  1215                           	opt stack 0
  1216  000020                     ?___lltoft:
  1217                           	opt stack 0
  1218  000020                     ?___lwtoft:
  1219                           	opt stack 0
  1220  000020                     ___llmod@counter:
  1221                           	opt stack 0
  1222  000020                     ZeroArray@array:
  1223                           	opt stack 0
  1224  000020                     ___awtoft@c:
  1225                           	opt stack 0
  1226  000020                     ___lwtoft@c:
  1227                           	opt stack 0
  1228  000020                     ___lltoft@c:
  1229                           	opt stack 0
  1230                           
  1231                           ; 4 bytes @ 0x1F
  1232  000020                     	ds	1
  1233  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1234                           	opt stack 0
  1235  000021                     memcpy@s:
  1236                           	opt stack 0
  1237  000021                     SWSPI_send_word@data:
  1238                           	opt stack 0
  1239                           
  1240                           ; 4 bytes @ 0x20
  1241  000021                     	ds	1
  1242  000022                     ZeroArray@size:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x21
  1246  000022                     	ds	1
  1247  000023                     ??_FLASH_WriteBlock:
  1248  000023                     ___awtoft@sign:
  1249                           	opt stack 0
  1250                           
  1251                           ; 1 bytes @ 0x22
  1252  000023                     	ds	1
  1253  000024                     ??___lltoft:
  1254  000024                     readUartByte@c2:
  1255                           	opt stack 0
  1256                           
  1257                           ; 1 bytes @ 0x23
  1258  000024                     	ds	1
  1259  000025                     readUartByte@c1:
  1260                           	opt stack 0
  1261  000025                     SWSPI_send_word@dataSize:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x24
  1265  000025                     	ds	1
  1266  000026                     readUartByte@chRec:
  1267                           	opt stack 0
  1268  000026                     SWSPI_send_word@datac:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x25
  1272  000026                     	ds	1
  1273  000027                     SWSPI_send_word@idx:
  1274                           	opt stack 0
  1275  000027                     FLASH_WriteBlock@blockStartAddr:
  1276                           	opt stack 0
  1277                           
  1278                           ; 4 bytes @ 0x26
  1279  000027                     	ds	1
  1280  000028                     ___lltoft@exp:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x27
  1284  000028                     	ds	1
  1285  000029                     ?___ftdiv:
  1286                           	opt stack 0
  1287  000029                     SWSPI_send_word@phrType:
  1288                           	opt stack 0
  1289  000029                     ___ftdiv@f1:
  1290                           	opt stack 0
  1291                           
  1292                           ; 3 bytes @ 0x28
  1293  000029                     	ds	1
  1294  00002A                     ??_PLLInitialize:
  1295                           
  1296                           ; 1 bytes @ 0x29
  1297  00002A                     	ds	1
  1298  00002B                     FLASH_WriteBlock@GIEBitValue:
  1299                           	opt stack 0
  1300                           
  1301                           ; 1 bytes @ 0x2A
  1302  00002B                     	ds	1
  1303  00002C                     FLASH_WriteBlock@i:
  1304                           	opt stack 0
  1305  00002C                     PLLInitialize@idx:
  1306                           	opt stack 0
  1307  00002C                     ___ftdiv@f2:
  1308                           	opt stack 0
  1309                           
  1310                           ; 3 bytes @ 0x2B
  1311  00002C                     	ds	1
  1312  00002D                     FlashSampleWrite@sampleData:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x2C
  1316  00002D                     	ds	1
  1317  00002E                     PLLInitialize@idx_807:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x2D
  1321  00002E                     	ds	1
  1322  00002F                     FlashSampleWrite@channelNum:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x2E
  1326  00002F                     	ds	1
  1327  000030                     tblptru	equ	0xFF8
  1328                           tblptrh	equ	0xFF7
  1329                           tblptrl	equ	0xFF6
  1330                           tablat	equ	0xFF5
  1331                           postinc0	equ	0xFEE
  1332                           wreg	equ	0xFE8
  1333                           postdec1	equ	0xFE5
  1334                           fsr1l	equ	0xFE1
  1335                           
  1336                           ; 1 bytes @ 0x2F
  1337 ;;
  1338 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1339 ;;
  1340 ;; *************** function _main *****************
  1341 ;; Defined at:
  1342 ;;		line 13 in file "main.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1356 ;;      Params:         0       0       0       0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0
  1359 ;;      Totals:         0       0       0       0       0       0       0
  1360 ;;Total ram usage:        0 bytes
  1361 ;; Hardware stack levels required when called:    9
  1362 ;; This function calls:
  1363 ;;		_AdcConvert
  1364 ;;		_BlinkErrorLeds
  1365 ;;		_BlinkOkLeds
  1366 ;;		_CheckFlashPrecentage
  1367 ;;		_InitSystemApplicationManagers
  1368 ;;		_SendUartSystemInitMessage
  1369 ;;		_SetMcuRunTime
  1370 ;;		_SetMcuSystem
  1371 ;;		_keepAliveSignalLed
  1372 ;;		_readUartByte
  1373 ;; This function is called by:
  1374 ;;		Startup code after reset
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text0
  1379  00208E                     __ptext0:
  1380                           	opt stack 0
  1381  00208E                     _main:
  1382                           	opt stack 22
  1383                           
  1384                           ;main.c: 16: SetMcuSystem();
  1385                           
  1386                           ;incstack = 0
  1387  00208E  ECAF  F013         	call	_SetMcuSystem	;wreg free
  1388                           
  1389                           ;main.c: 19: InitSystemApplicationManagers();
  1390  002092  EC56  F013         	call	_InitSystemApplicationManagers	;wreg free
  1391                           
  1392                           ;main.c: 22: SendUartSystemInitMessage();
  1393  002096  EC94  F00A         	call	_SendUartSystemInitMessage	;wreg free
  1394                           
  1395                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1396  00209A  0E03               	movlw	3
  1397  00209C  EC35  F00F         	call	_BlinkOkLeds
  1398  0020A0                     
  1399                           ;main.c: 28: {
  1400                           ;main.c: 29: readUartByte();
  1401  0020A0  EC12  F00E         	call	_readUartByte	;wreg free
  1402                           
  1403                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1404  0020A4  043D               	decf	_TimerOneSecFlag,w,c	;volatile
  1405  0020A6  A4D8               	btfss	status,2,c
  1406  0020A8  D005               	goto	l1410
  1407                           
  1408                           ;main.c: 32: {
  1409                           ;main.c: 34: SetMcuRunTime();
  1410  0020AA  EC0F  F011         	call	_SetMcuRunTime	;wreg free
  1411                           
  1412                           ;main.c: 35: TimerOneSecFlag = 0;
  1413  0020AE  0E00               	movlw	0
  1414  0020B0  6E3D               	movwf	_TimerOneSecFlag,c	;volatile
  1415                           
  1416                           ;main.c: 36: }
  1417  0020B2  D7F6               	goto	l1409
  1418  0020B4                     l1410:
  1419                           
  1420                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1421  0020B4  043C               	decf	_TimerSamplingFlag,w,c	;volatile
  1422  0020B6  A4D8               	btfss	status,2,c
  1423  0020B8  D00F               	goto	l1412
  1424                           
  1425                           ;main.c: 38: {
  1426                           ;main.c: 39: keepAliveSignalLed();
  1427  0020BA  EC63  F013         	call	_keepAliveSignalLed	;wreg free
  1428                           
  1429                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1430  0020BE  EC8E  F00C         	call	_CheckFlashPrecentage	;wreg free
  1431  0020C2  06E8               	decf	wreg,f,c
  1432  0020C4  A4D8               	btfss	status,2,c
  1433  0020C6  D003               	goto	l1413
  1434                           
  1435                           ;main.c: 42: {
  1436                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1437  0020C8  0E04               	movlw	4
  1438  0020CA  EC64  F00F         	call	_BlinkErrorLeds
  1439  0020CE                     l1413:
  1440                           
  1441                           ;main.c: 44: }
  1442                           ;main.c: 47: AdcConvert();
  1443  0020CE  EC74  F004         	call	_AdcConvert	;wreg free
  1444                           
  1445                           ;main.c: 49: TimerSamplingFlag = 0;
  1446  0020D2  0E00               	movlw	0
  1447  0020D4  6E3C               	movwf	_TimerSamplingFlag,c	;volatile
  1448                           
  1449                           ;main.c: 50: }
  1450  0020D6  D7E4               	goto	l1409
  1451  0020D8                     l1412:
  1452                           
  1453                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1454  0020D8  043B               	decf	_TimerKeepAliveFlag,w,c	;volatile
  1455  0020DA  A4D8               	btfss	status,2,c
  1456  0020DC  D7E1               	goto	l1409
  1457                           
  1458                           ;main.c: 52: {
  1459                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1460  0020DE  0E00               	movlw	0
  1461  0020E0  6E3B               	movwf	_TimerKeepAliveFlag,c	;volatile
  1462  0020E2  D7DE               	goto	l1409
  1463  0020E4                     __end_of_main:
  1464                           	opt stack 0
  1465                           tblptru	equ	0xFF8
  1466                           tblptrh	equ	0xFF7
  1467                           tblptrl	equ	0xFF6
  1468                           tablat	equ	0xFF5
  1469                           postinc0	equ	0xFEE
  1470                           wreg	equ	0xFE8
  1471                           postdec1	equ	0xFE5
  1472                           fsr1l	equ	0xFE1
  1473                           status	equ	0xFD8
  1474                           
  1475 ;; *************** function _readUartByte *****************
  1476 ;; Defined at:
  1477 ;;		line 24 in file "EusartApp.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;  chRec           1   37[COMRAM] unsigned char 
  1482 ;;  c1              1   36[COMRAM] unsigned char 
  1483 ;;  c2              1   35[COMRAM] unsigned char 
  1484 ;; Return value:  Size  Location     Type
  1485 ;;                  1    wreg      void 
  1486 ;; Registers used:
  1487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1493 ;;      Params:         0       0       0       0       0       0       0
  1494 ;;      Locals:         3       0       0       0       0       0       0
  1495 ;;      Temps:          0       0       0       0       0       0       0
  1496 ;;      Totals:         3       0       0       0       0       0       0
  1497 ;;Total ram usage:        3 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; Hardware stack levels required when called:    6
  1500 ;; This function calls:
  1501 ;;		_EUSART1_Read
  1502 ;;		_InitRxMessageParams
  1503 ;;		_toupper
  1504 ;; This function is called by:
  1505 ;;		_main
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text1
  1510  001C24                     __ptext1:
  1511                           	opt stack 0
  1512  001C24                     _readUartByte:
  1513                           	opt stack 24
  1514                           
  1515                           ;EusartApp.c: 27: uint8_t chRec = (0), c1 = (0), c2 = (0);
  1516                           
  1517                           ;incstack = 0
  1518  001C24  0E00               	movlw	0
  1519  001C26  6E26               	movwf	readUartByte@chRec,c
  1520  001C28  0E00               	movlw	0
  1521  001C2A  6E25               	movwf	readUartByte@c1,c
  1522  001C2C  0E00               	movlw	0
  1523  001C2E  6E24               	movwf	readUartByte@c2,c
  1524                           
  1525                           ;EusartApp.c: 28: switch(cState)
  1526  001C30  D02F               	goto	l166
  1527  001C32                     
  1528                           ;EusartApp.c: 32: InitRxMessageParams();
  1529  001C32  EC2D  F013         	call	_InitRxMessageParams	;wreg free
  1530                           
  1531                           ;EusartApp.c: 33: cState = FIND_MAGIC;
  1532  001C36  0E01               	movlw	1
  1533  001C38  0100               	movlb	0	; () banked
  1534  001C3A  6FCA               	movwf	_cState& (0+255),b
  1535                           
  1536                           ;EusartApp.c: 34: break;
  1537  001C3C  0012               	return	
  1538  001C3E                     
  1539                           ; BSR set to: 0
  1540                           ;EusartApp.c: 38: chRec = EUSART1_Read();
  1541                           
  1542                           ; BSR set to: 0
  1543  001C3E  EC31  F011         	call	_EUSART1_Read	;wreg free
  1544  001C42  6E26               	movwf	readUartByte@chRec,c
  1545                           
  1546                           ;EusartApp.c: 40: if(chRec == (0x24))
  1547  001C44  0E24               	movlw	36
  1548  001C46  1826               	xorwf	readUartByte@chRec,w,c
  1549  001C48  A4D8               	btfss	status,2,c
  1550  001C4A  0012               	return	
  1551                           
  1552                           ;EusartApp.c: 41: {
  1553                           ;EusartApp.c: 42: cState = READ_DATA;
  1554  001C4C  0E02               	movlw	2
  1555  001C4E  0100               	movlb	0	; () banked
  1556  001C50  6FCA               	movwf	_cState& (0+255),b
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;EusartApp.c: 43: }
  1560                           ;EusartApp.c: 44: break;
  1561  001C52  0012               	return	
  1562  001C54                     
  1563                           ; BSR set to: 0
  1564                           ;EusartApp.c: 48: rxMsgQueue[msgCount++] = chRec;
  1565                           
  1566                           ; BSR set to: 0
  1567  001C54  51C9               	movf	_msgCount& (0+255),w,b
  1568  001C56  0D01               	mullw	1
  1569  001C58  0ECE               	movlw	low _rxMsgQueue
  1570  001C5A  24F3               	addwf	prodl,w,c
  1571  001C5C  6ED9               	movwf	fsr2l,c
  1572  001C5E  0E00               	movlw	high _rxMsgQueue
  1573  001C60  20F4               	addwfc	prodh,w,c
  1574  001C62  6EDA               	movwf	fsr2h,c
  1575  001C64  C026  FFDF         	movff	readUartByte@chRec,indf2
  1576                           
  1577                           ; BSR set to: 0
  1578  001C68  2BC9               	incf	_msgCount& (0+255),f,b
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;EusartApp.c: 49: if(chRec == (0x14))
  1582  001C6A  0E14               	movlw	20
  1583  001C6C  1826               	xorwf	readUartByte@chRec,w,c
  1584  001C6E  A4D8               	btfss	status,2,c
  1585  001C70  0012               	return	
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;EusartApp.c: 50: {
  1589                           ;EusartApp.c: 51: cState = JUMP_FUNCTION;
  1590  001C72  0E04               	movlw	4
  1591  001C74  6FCA               	movwf	_cState& (0+255),b
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;EusartApp.c: 52: }
  1595                           ;EusartApp.c: 53: break;
  1596  001C76  0012               	return	
  1597  001C78                     
  1598                           ; BSR set to: 0
  1599                           ;EusartApp.c: 56: c1 = toupper(rxMsgQueue[0]);
  1600                           
  1601                           ; BSR set to: 0
  1602  001C78  51CE               	movf	_rxMsgQueue& (0+255),w,b
  1603  001C7A  EC85  F013         	call	_toupper
  1604  001C7E  6E25               	movwf	readUartByte@c1,c
  1605                           
  1606                           ;EusartApp.c: 66: }
  1607                           
  1608                           ;EusartApp.c: 65: break;
  1609                           
  1610                           ;EusartApp.c: 64: case 'T':
  1611                           
  1612                           ;EusartApp.c: 62: break;
  1613                           
  1614                           ;EusartApp.c: 59: {
  1615                           ;EusartApp.c: 60: case 'Q':
  1616                           
  1617                           ;EusartApp.c: 58: switch(c1)
  1618  001C80  5025               	movf	readUartByte@c1,w,c
  1619                           
  1620                           ; Switch size 1, requested type "space"
  1621                           ; Number of cases is 2, Range of values is 81 to 84
  1622                           ; switch strategies available:
  1623                           ; Name         Instructions Cycles
  1624                           ; simple_byte            7     4 (average)
  1625                           ;	Chosen strategy is simple_byte
  1626  001C82  0A51               	xorlw	81	; case 81
  1627  001C84  A4D8               	btfss	status,2,c
  1628  001C86  0A05               	xorlw	5	; case 84
  1629                           
  1630                           ;EusartApp.c: 69: cState = START_RX_MESSAGE_READ;
  1631  001C88  0E00               	movlw	0
  1632  001C8A  0100               	movlb	0	; () banked
  1633  001C8C  6FCA               	movwf	_cState& (0+255),b
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;EusartApp.c: 71: }
  1637                           
  1638                           ;EusartApp.c: 70: break;
  1639  001C8E  0012               	return	
  1640  001C90                     l166:
  1641                           
  1642                           ; BSR set to: 0
  1643  001C90  0100               	movlb	0	; () banked
  1644  001C92  51CA               	movf	_cState& (0+255),w,b
  1645                           
  1646                           ; Switch size 1, requested type "space"
  1647                           ; Number of cases is 4, Range of values is 0 to 4
  1648                           ; switch strategies available:
  1649                           ; Name         Instructions Cycles
  1650                           ; simple_byte           13     7 (average)
  1651                           ;	Chosen strategy is simple_byte
  1652  001C94  0A00               	xorlw	0	; case 0
  1653  001C96  B4D8               	btfsc	status,2,c
  1654  001C98  D7CC               	goto	l167
  1655  001C9A  0A01               	xorlw	1	; case 1
  1656  001C9C  B4D8               	btfsc	status,2,c
  1657  001C9E  D7CF               	goto	l169
  1658  001CA0  0A03               	xorlw	3	; case 2
  1659  001CA2  B4D8               	btfsc	status,2,c
  1660  001CA4  D7D7               	goto	l171
  1661  001CA6  0A06               	xorlw	6	; case 4
  1662  001CA8  A4D8               	btfss	status,2,c
  1663  001CAA  0012               	return	
  1664  001CAC  D7E5               	goto	l173
  1665  001CAE                     __end_of_readUartByte:
  1666                           	opt stack 0
  1667                           tblptru	equ	0xFF8
  1668                           tblptrh	equ	0xFF7
  1669                           tblptrl	equ	0xFF6
  1670                           tablat	equ	0xFF5
  1671                           prodh	equ	0xFF4
  1672                           prodl	equ	0xFF3
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1l	equ	0xFE1
  1677                           indf2	equ	0xFDF
  1678                           fsr2h	equ	0xFDA
  1679                           fsr2l	equ	0xFD9
  1680                           status	equ	0xFD8
  1681                           
  1682 ;; *************** function _toupper *****************
  1683 ;; Defined at:
  1684 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;  c               1    wreg     unsigned char 
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;  c               1   23[COMRAM] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      unsigned char 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2, status,0
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1698 ;;      Params:         0       0       0       0       0       0       0
  1699 ;;      Locals:         1       0       0       0       0       0       0
  1700 ;;      Temps:          0       0       0       0       0       0       0
  1701 ;;      Totals:         1       0       0       0       0       0       0
  1702 ;;Total ram usage:        1 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    3
  1705 ;; This function calls:
  1706 ;;		Nothing
  1707 ;; This function is called by:
  1708 ;;		_readUartByte
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text2
  1713  00270A                     __ptext2:
  1714                           	opt stack 0
  1715  00270A                     _toupper:
  1716                           	opt stack 26
  1717                           
  1718                           ;incstack = 0
  1719                           ;toupper@c stored from wreg
  1720  00270A  6E18               	movwf	toupper@c,c
  1721  00270C  0E7B               	movlw	123
  1722  00270E  6018               	cpfslt	toupper@c,c
  1723  002710  D004               	goto	l2031
  1724  002712  0E60               	movlw	96
  1725  002714  6418               	cpfsgt	toupper@c,c
  1726  002716  D001               	goto	l2031
  1727  002718  9A18               	bcf	toupper@c,5,c
  1728  00271A                     l2031:
  1729  00271A  5018               	movf	toupper@c,w,c
  1730  00271C  0012               	return	
  1731  00271E                     __end_of_toupper:
  1732                           	opt stack 0
  1733                           tblptru	equ	0xFF8
  1734                           tblptrh	equ	0xFF7
  1735                           tblptrl	equ	0xFF6
  1736                           tablat	equ	0xFF5
  1737                           prodh	equ	0xFF4
  1738                           prodl	equ	0xFF3
  1739                           postinc0	equ	0xFEE
  1740                           wreg	equ	0xFE8
  1741                           postdec1	equ	0xFE5
  1742                           fsr1l	equ	0xFE1
  1743                           indf2	equ	0xFDF
  1744                           fsr2h	equ	0xFDA
  1745                           fsr2l	equ	0xFD9
  1746                           status	equ	0xFD8
  1747                           
  1748 ;; *************** function _InitRxMessageParams *****************
  1749 ;; Defined at:
  1750 ;;		line 74 in file "EusartApp.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;		None
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;		None
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      void 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1764 ;;      Params:         0       0       0       0       0       0       0
  1765 ;;      Locals:         0       0       0       0       0       0       0
  1766 ;;      Temps:          0       0       0       0       0       0       0
  1767 ;;      Totals:         0       0       0       0       0       0       0
  1768 ;;Total ram usage:        0 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    5
  1771 ;; This function calls:
  1772 ;;		_ZeroArray
  1773 ;; This function is called by:
  1774 ;;		_readUartByte
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text3
  1779  00265A                     __ptext3:
  1780                           	opt stack 0
  1781  00265A                     _InitRxMessageParams:
  1782                           	opt stack 24
  1783                           
  1784                           ;EusartApp.c: 76: msgCount = 0;
  1785                           
  1786                           ;incstack = 0
  1787  00265A  0E00               	movlw	0
  1788  00265C  0100               	movlb	0	; () banked
  1789  00265E  6FC9               	movwf	_msgCount& (0+255),b
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;EusartApp.c: 77: ZeroArray(rxMsgQueue, (0x14));
  1793  002660  0ECE               	movlw	low _rxMsgQueue
  1794  002662  6E20               	movwf	ZeroArray@array,c
  1795  002664  0E00               	movlw	high _rxMsgQueue
  1796  002666  6E21               	movwf	ZeroArray@array+1,c
  1797  002668  0E00               	movlw	0
  1798  00266A  6E23               	movwf	ZeroArray@size+1,c
  1799  00266C  0E14               	movlw	20
  1800  00266E  6E22               	movwf	ZeroArray@size,c
  1801  002670  EC1E  F013         	call	_ZeroArray	;wreg free
  1802  002674  0012               	return		;funcret
  1803  002676                     __end_of_InitRxMessageParams:
  1804                           	opt stack 0
  1805                           tblptru	equ	0xFF8
  1806                           tblptrh	equ	0xFF7
  1807                           tblptrl	equ	0xFF6
  1808                           tablat	equ	0xFF5
  1809                           prodh	equ	0xFF4
  1810                           prodl	equ	0xFF3
  1811                           postinc0	equ	0xFEE
  1812                           wreg	equ	0xFE8
  1813                           postdec1	equ	0xFE5
  1814                           fsr1l	equ	0xFE1
  1815                           indf2	equ	0xFDF
  1816                           fsr2h	equ	0xFDA
  1817                           fsr2l	equ	0xFD9
  1818                           status	equ	0xFD8
  1819                           
  1820 ;; *************** function _EUSART1_Read *****************
  1821 ;; Defined at:
  1822 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  readValue       2   24[COMRAM] unsigned int 
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      unsigned char 
  1829 ;; Registers used:
  1830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1836 ;;      Params:         0       0       0       0       0       0       0
  1837 ;;      Locals:         2       0       0       0       0       0       0
  1838 ;;      Temps:          1       0       0       0       0       0       0
  1839 ;;      Totals:         3       0       0       0       0       0       0
  1840 ;;Total ram usage:        3 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    3
  1843 ;; This function calls:
  1844 ;;		Nothing
  1845 ;; This function is called by:
  1846 ;;		_readUartByte
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           	psect	text4
  1851  002262                     __ptext4:
  1852                           	opt stack 0
  1853  002262                     _EUSART1_Read:
  1854                           	opt stack 26
  1855                           
  1856                           ;eusart1.c: 112: uint16_t readValue = 0;
  1857                           
  1858                           ;incstack = 0
  1859  002262  0E00               	movlw	0
  1860  002264  6E1A               	movwf	EUSART1_Read@readValue+1,c
  1861  002266  0E00               	movlw	0
  1862  002268  6E19               	movwf	EUSART1_Read@readValue,c
  1863                           
  1864                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  1865  00226A  5036               	movf	_eusart1RxCount,w,c	;volatile
  1866  00226C  A4D8               	btfss	status,2,c
  1867  00226E  D002               	goto	l812
  1868                           
  1869                           ;eusart1.c: 120: {
  1870                           ;eusart1.c: 121: return readValue;
  1871  002270  5019               	movf	EUSART1_Read@readValue,w,c
  1872  002272  0012               	return	
  1873  002274                     l812:
  1874                           
  1875                           ;eusart1.c: 122: }
  1876                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  1877  002274  5037               	movf	_eusart1RxTail,w,c	;volatile
  1878  002276  0D01               	mullw	1
  1879  002278  0E46               	movlw	low _eusart1RxBuffer
  1880  00227A  24F3               	addwf	prodl,w,c
  1881  00227C  6ED9               	movwf	fsr2l,c
  1882  00227E  0E01               	movlw	high _eusart1RxBuffer
  1883  002280  20F4               	addwfc	prodh,w,c
  1884  002282  6EDA               	movwf	fsr2h,c
  1885  002284  50DF               	movf	indf2,w,c
  1886  002286  6E18               	movwf	??_EUSART1_Read& (0+255),c
  1887  002288  5018               	movf	??_EUSART1_Read,w,c
  1888  00228A  6E19               	movwf	EUSART1_Read@readValue,c
  1889  00228C  6A1A               	clrf	EUSART1_Read@readValue+1,c
  1890  00228E  2A37               	incf	_eusart1RxTail,f,c	;volatile
  1891                           
  1892                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  1893  002290  0E27               	movlw	39
  1894  002292  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  1895  002294  D002               	goto	l814
  1896                           
  1897                           ;eusart1.c: 126: {
  1898                           ;eusart1.c: 127: eusart1RxTail = 0;
  1899  002296  0E00               	movlw	0
  1900  002298  6E37               	movwf	_eusart1RxTail,c	;volatile
  1901  00229A                     l814:
  1902                           
  1903                           ;eusart1.c: 128: }
  1904                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  1905  00229A  9A9D               	bcf	3997,5,c	;volatile
  1906                           
  1907                           ;eusart1.c: 130: eusart1RxCount--;
  1908  00229C  0636               	decf	_eusart1RxCount,f,c	;volatile
  1909                           
  1910                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  1911  00229E  8A9D               	bsf	3997,5,c	;volatile
  1912                           
  1913                           ;eusart1.c: 133: return readValue;
  1914  0022A0  5019               	movf	EUSART1_Read@readValue,w,c
  1915  0022A2  0012               	return	
  1916  0022A4                     __end_of_EUSART1_Read:
  1917                           	opt stack 0
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           prodh	equ	0xFF4
  1923                           prodl	equ	0xFF3
  1924                           postinc0	equ	0xFEE
  1925                           wreg	equ	0xFE8
  1926                           postdec1	equ	0xFE5
  1927                           fsr1l	equ	0xFE1
  1928                           indf2	equ	0xFDF
  1929                           fsr2h	equ	0xFDA
  1930                           fsr2l	equ	0xFD9
  1931                           status	equ	0xFD8
  1932                           
  1933 ;; *************** function _keepAliveSignalLed *****************
  1934 ;; Defined at:
  1935 ;;		line 35 in file "LedsApp.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;		None
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1949 ;;      Params:         0       0       0       0       0       0       0
  1950 ;;      Locals:         0       0       0       0       0       0       0
  1951 ;;      Temps:          1       0       0       0       0       0       0
  1952 ;;      Totals:         1       0       0       0       0       0       0
  1953 ;;Total ram usage:        1 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    3
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text5
  1964  0026C6                     __ptext5:
  1965                           	opt stack 0
  1966  0026C6                     _keepAliveSignalLed:
  1967                           	opt stack 27
  1968                           
  1969                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  1970                           
  1971                           ;incstack = 0
  1972  0026C6  B08B               	btfsc	3979,0,c	;volatile
  1973  0026C8  D003               	goto	u1640
  1974  0026CA  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  1975  0026CC  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  1976  0026CE  D001               	goto	u1658
  1977  0026D0                     u1640:
  1978  0026D0  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  1979  0026D2                     u1658:
  1980  0026D2  508B               	movf	3979,w,c	;volatile
  1981  0026D4  1818               	xorwf	??_keepAliveSignalLed,w,c
  1982  0026D6  0BFE               	andlw	-2
  1983  0026D8  1818               	xorwf	??_keepAliveSignalLed,w,c
  1984  0026DA  6E8B               	movwf	3979,c	;volatile
  1985  0026DC  0012               	return		;funcret
  1986  0026DE                     __end_of_keepAliveSignalLed:
  1987                           	opt stack 0
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           prodh	equ	0xFF4
  1993                           prodl	equ	0xFF3
  1994                           postinc0	equ	0xFEE
  1995                           wreg	equ	0xFE8
  1996                           postdec1	equ	0xFE5
  1997                           fsr1l	equ	0xFE1
  1998                           indf2	equ	0xFDF
  1999                           fsr2h	equ	0xFDA
  2000                           fsr2l	equ	0xFD9
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function _SetMcuSystem *****************
  2004 ;; Defined at:
  2005 ;;		line 11 in file "SystemSettings.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;		None
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;		None
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      void 
  2012 ;; Registers used:
  2013 ;;		wreg, status,2, status,0, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2019 ;;      Params:         0       0       0       0       0       0       0
  2020 ;;      Locals:         0       0       0       0       0       0       0
  2021 ;;      Temps:          0       0       0       0       0       0       0
  2022 ;;      Totals:         0       0       0       0       0       0       0
  2023 ;;Total ram usage:        0 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    6
  2026 ;; This function calls:
  2027 ;;		_SYSTEM_Initialize
  2028 ;; This function is called by:
  2029 ;;		_main
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           	psect	text6
  2034  00275E                     __ptext6:
  2035                           	opt stack 0
  2036  00275E                     _SetMcuSystem:
  2037                           	opt stack 24
  2038                           
  2039                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  2040                           
  2041                           ;incstack = 0
  2042  00275E  EC49  F013         	call	_SYSTEM_Initialize	;wreg free
  2043                           
  2044                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  2045  002762  8EF2               	bsf	intcon,7,c	;volatile
  2046                           
  2047                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  2048  002764  8CF2               	bsf	intcon,6,c	;volatile
  2049  002766  0012               	return		;funcret
  2050  002768                     __end_of_SetMcuSystem:
  2051                           	opt stack 0
  2052                           tblptru	equ	0xFF8
  2053                           tblptrh	equ	0xFF7
  2054                           tblptrl	equ	0xFF6
  2055                           tablat	equ	0xFF5
  2056                           prodh	equ	0xFF4
  2057                           prodl	equ	0xFF3
  2058                           intcon	equ	0xFF2
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postdec1	equ	0xFE5
  2062                           fsr1l	equ	0xFE1
  2063                           indf2	equ	0xFDF
  2064                           fsr2h	equ	0xFDA
  2065                           fsr2l	equ	0xFD9
  2066                           status	equ	0xFD8
  2067                           
  2068 ;; *************** function _SYSTEM_Initialize *****************
  2069 ;; Defined at:
  2070 ;;		line 112 in file "mcc_generated_files/mcc.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2, status,0, cstack
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2084 ;;      Params:         0       0       0       0       0       0       0
  2085 ;;      Locals:         0       0       0       0       0       0       0
  2086 ;;      Temps:          0       0       0       0       0       0       0
  2087 ;;      Totals:         0       0       0       0       0       0       0
  2088 ;;Total ram usage:        0 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    5
  2091 ;; This function calls:
  2092 ;;		_ADC_Initialize
  2093 ;;		_EUSART1_Initialize
  2094 ;;		_INTERRUPT_Initialize
  2095 ;;		_OSCILLATOR_Initialize
  2096 ;;		_PIN_MANAGER_Initialize
  2097 ;;		_TMR0_Initialize
  2098 ;; This function is called by:
  2099 ;;		_SetMcuSystem
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text7
  2104  002692                     __ptext7:
  2105                           	opt stack 0
  2106  002692                     _SYSTEM_Initialize:
  2107                           	opt stack 24
  2108                           
  2109                           ;mcc.c: 114: INTERRUPT_Initialize();
  2110                           
  2111                           ;incstack = 0
  2112  002692  ECBB  F013         	call	_INTERRUPT_Initialize	;wreg free
  2113                           
  2114                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  2115  002696  ECC8  F010         	call	_PIN_MANAGER_Initialize	;wreg free
  2116                           
  2117                           ;mcc.c: 116: OSCILLATOR_Initialize();
  2118  00269A  ECA1  F013         	call	_OSCILLATOR_Initialize	;wreg free
  2119                           
  2120                           ;mcc.c: 117: ADC_Initialize();
  2121  00269E  EC6F  F013         	call	_ADC_Initialize	;wreg free
  2122                           
  2123                           ;mcc.c: 118: TMR0_Initialize();
  2124  0026A2  EC5C  F012         	call	_TMR0_Initialize	;wreg free
  2125                           
  2126                           ;mcc.c: 119: EUSART1_Initialize();
  2127  0026A6  EC26  F012         	call	_EUSART1_Initialize	;wreg free
  2128  0026AA  0012               	return		;funcret
  2129  0026AC                     __end_of_SYSTEM_Initialize:
  2130                           	opt stack 0
  2131                           tblptru	equ	0xFF8
  2132                           tblptrh	equ	0xFF7
  2133                           tblptrl	equ	0xFF6
  2134                           tablat	equ	0xFF5
  2135                           prodh	equ	0xFF4
  2136                           prodl	equ	0xFF3
  2137                           intcon	equ	0xFF2
  2138                           postinc0	equ	0xFEE
  2139                           wreg	equ	0xFE8
  2140                           postdec1	equ	0xFE5
  2141                           fsr1l	equ	0xFE1
  2142                           indf2	equ	0xFDF
  2143                           fsr2h	equ	0xFDA
  2144                           fsr2l	equ	0xFD9
  2145                           status	equ	0xFD8
  2146                           
  2147 ;; *************** function _TMR0_Initialize *****************
  2148 ;; Defined at:
  2149 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;		None
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;		None
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  1    wreg      void 
  2156 ;; Registers used:
  2157 ;;		wreg, status,2, status,0, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2163 ;;      Params:         0       0       0       0       0       0       0
  2164 ;;      Locals:         0       0       0       0       0       0       0
  2165 ;;      Temps:          2       0       0       0       0       0       0
  2166 ;;      Totals:         2       0       0       0       0       0       0
  2167 ;;Total ram usage:        2 bytes
  2168 ;; Hardware stack levels used:    1
  2169 ;; Hardware stack levels required when called:    4
  2170 ;; This function calls:
  2171 ;;		_TMR0_SetInterruptHandler
  2172 ;; This function is called by:
  2173 ;;		_SYSTEM_Initialize
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text8
  2178  0024B8                     __ptext8:
  2179                           	opt stack 0
  2180  0024B8                     _TMR0_Initialize:
  2181                           	opt stack 24
  2182                           
  2183                           ;tmr0.c: 71: TMR0H = 0x3C;
  2184                           
  2185                           ;incstack = 0
  2186  0024B8  0E3C               	movlw	60
  2187  0024BA  6ED7               	movwf	4055,c	;volatile
  2188                           
  2189                           ;tmr0.c: 74: TMR0L = 0xAF;
  2190  0024BC  0EAF               	movlw	175
  2191  0024BE  6ED6               	movwf	4054,c	;volatile
  2192                           
  2193                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  2194  0024C0  50D6               	movf	4054,w,c	;volatile
  2195  0024C2  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  2196  0024C6  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  2197  0024C8  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  2198  0024CC  6A1A               	clrf	??_TMR0_Initialize,c
  2199  0024CE  101A               	iorwf	??_TMR0_Initialize,w,c
  2200  0024D0  6E46               	movwf	_timer0ReloadVal,c	;volatile
  2201  0024D2  501B               	movf	??_TMR0_Initialize+1,w,c
  2202  0024D4  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  2203                           
  2204                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  2205  0024D6  94F2               	bcf	intcon,2,c	;volatile
  2206                           
  2207                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  2208  0024D8  8AF2               	bsf	intcon,5,c	;volatile
  2209                           
  2210                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2211  0024DA  0E00               	movlw	0
  2212  0024DC  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  2213  0024DE  0E00               	movlw	0
  2214  0024E0  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  2215  0024E2  ECB4  F013         	call	_TMR0_SetInterruptHandler	;wreg free
  2216                           
  2217                           ;tmr0.c: 90: T0CON = 0x90;
  2218  0024E6  0E90               	movlw	144
  2219  0024E8  6ED5               	movwf	4053,c	;volatile
  2220  0024EA  0012               	return		;funcret
  2221  0024EC                     __end_of_TMR0_Initialize:
  2222                           	opt stack 0
  2223                           tblptru	equ	0xFF8
  2224                           tblptrh	equ	0xFF7
  2225                           tblptrl	equ	0xFF6
  2226                           tablat	equ	0xFF5
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           intcon	equ	0xFF2
  2230                           postinc0	equ	0xFEE
  2231                           wreg	equ	0xFE8
  2232                           postdec1	equ	0xFE5
  2233                           fsr1l	equ	0xFE1
  2234                           indf2	equ	0xFDF
  2235                           fsr2h	equ	0xFDA
  2236                           fsr2l	equ	0xFD9
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function _TMR0_SetInterruptHandler *****************
  2240 ;; Defined at:
  2241 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  2244 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;		None
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      void 
  2249 ;; Registers used:
  2250 ;;		wreg, status,2, status,0
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2256 ;;      Params:         2       0       0       0       0       0       0
  2257 ;;      Locals:         0       0       0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0
  2259 ;;      Totals:         2       0       0       0       0       0       0
  2260 ;;Total ram usage:        2 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    3
  2263 ;; This function calls:
  2264 ;;		Nothing
  2265 ;; This function is called by:
  2266 ;;		_TMR0_Initialize
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text9
  2271  002768                     __ptext9:
  2272                           	opt stack 0
  2273  002768                     _TMR0_SetInterruptHandler:
  2274                           	opt stack 24
  2275                           
  2276                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  2277                           
  2278                           ;incstack = 0
  2279  002768  C018  F0F7         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  2280  00276C  C019  F0F8         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  2281  002770  0012               	return		;funcret
  2282  002772                     __end_of_TMR0_SetInterruptHandler:
  2283                           	opt stack 0
  2284                           tblptru	equ	0xFF8
  2285                           tblptrh	equ	0xFF7
  2286                           tblptrl	equ	0xFF6
  2287                           tablat	equ	0xFF5
  2288                           prodh	equ	0xFF4
  2289                           prodl	equ	0xFF3
  2290                           intcon	equ	0xFF2
  2291                           postinc0	equ	0xFEE
  2292                           wreg	equ	0xFE8
  2293                           postdec1	equ	0xFE5
  2294                           fsr1l	equ	0xFE1
  2295                           indf2	equ	0xFDF
  2296                           fsr2h	equ	0xFDA
  2297                           fsr2l	equ	0xFD9
  2298                           status	equ	0xFD8
  2299                           
  2300 ;; *************** function _PIN_MANAGER_Initialize *****************
  2301 ;; Defined at:
  2302 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;		None
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;		None
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      void 
  2309 ;; Registers used:
  2310 ;;		wreg, status,2
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2316 ;;      Params:         0       0       0       0       0       0       0
  2317 ;;      Locals:         0       0       0       0       0       0       0
  2318 ;;      Temps:          0       0       0       0       0       0       0
  2319 ;;      Totals:         0       0       0       0       0       0       0
  2320 ;;Total ram usage:        0 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:    3
  2323 ;; This function calls:
  2324 ;;		Nothing
  2325 ;; This function is called by:
  2326 ;;		_SYSTEM_Initialize
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text10
  2331  002190                     __ptext10:
  2332                           	opt stack 0
  2333  002190                     _PIN_MANAGER_Initialize:
  2334                           	opt stack 25
  2335                           
  2336                           ;pin_manager.c: 57: LATE = 0x00;
  2337                           
  2338                           ;incstack = 0
  2339  002190  0E00               	movlw	0
  2340  002192  6E8D               	movwf	3981,c	;volatile
  2341                           
  2342                           ;pin_manager.c: 58: LATD = 0x00;
  2343  002194  0E00               	movlw	0
  2344  002196  6E8C               	movwf	3980,c	;volatile
  2345                           
  2346                           ;pin_manager.c: 59: LATA = 0x06;
  2347  002198  0E06               	movlw	6
  2348  00219A  6E89               	movwf	3977,c	;volatile
  2349                           
  2350                           ;pin_manager.c: 60: LATB = 0x00;
  2351  00219C  0E00               	movlw	0
  2352  00219E  6E8A               	movwf	3978,c	;volatile
  2353                           
  2354                           ;pin_manager.c: 61: LATC = 0x00;
  2355  0021A0  0E00               	movlw	0
  2356  0021A2  6E8B               	movwf	3979,c	;volatile
  2357                           
  2358                           ;pin_manager.c: 66: TRISE = 0x07;
  2359  0021A4  0E07               	movlw	7
  2360  0021A6  6E96               	movwf	3990,c	;volatile
  2361                           
  2362                           ;pin_manager.c: 67: TRISA = 0xE1;
  2363  0021A8  0EE1               	movlw	225
  2364  0021AA  6E92               	movwf	3986,c	;volatile
  2365                           
  2366                           ;pin_manager.c: 68: TRISB = 0xEF;
  2367  0021AC  0EEF               	movlw	239
  2368  0021AE  6E93               	movwf	3987,c	;volatile
  2369                           
  2370                           ;pin_manager.c: 69: TRISC = 0x80;
  2371  0021B0  0E80               	movlw	128
  2372  0021B2  6E94               	movwf	3988,c	;volatile
  2373                           
  2374                           ;pin_manager.c: 70: TRISD = 0xF2;
  2375  0021B4  0EF2               	movlw	242
  2376  0021B6  6E95               	movwf	3989,c	;volatile
  2377                           
  2378                           ;pin_manager.c: 75: ANSELC = 0x30;
  2379  0021B8  0E30               	movlw	48
  2380  0021BA  010F               	movlb	15	; () banked
  2381  0021BC  6F3A               	movwf	58,b	;volatile
  2382                           
  2383                           ;pin_manager.c: 76: ANSELB = 0x33;
  2384  0021BE  0E33               	movlw	51
  2385  0021C0  6F39               	movwf	57,b	;volatile
  2386                           
  2387                           ;pin_manager.c: 77: ANSELD = 0xE4;
  2388  0021C2  0EE4               	movlw	228
  2389  0021C4  6F3B               	movwf	59,b	;volatile
  2390                           
  2391                           ;pin_manager.c: 78: ANSELE = 0x07;
  2392  0021C6  0E07               	movlw	7
  2393  0021C8  6F3C               	movwf	60,b	;volatile
  2394                           
  2395                           ;pin_manager.c: 79: ANSELA = 0x2F;
  2396  0021CA  0E2F               	movlw	47
  2397  0021CC  6F38               	movwf	56,b	;volatile
  2398                           
  2399                           ;pin_manager.c: 84: WPUB = 0xC2;
  2400  0021CE  0EC2               	movlw	194
  2401  0021D0  6E61               	movwf	3937,c	;volatile
  2402                           
  2403                           ; BSR set to: 15
  2404                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  2405  0021D2  9EF1               	bcf	intcon2,7,c	;volatile
  2406                           
  2407                           ; BSR set to: 15
  2408                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  2409  0021D4  86F2               	bsf	intcon,3,c	;volatile
  2410                           
  2411                           ; BSR set to: 15
  2412  0021D6  0012               	return		;funcret
  2413  0021D8                     __end_of_PIN_MANAGER_Initialize:
  2414                           	opt stack 0
  2415                           tblptru	equ	0xFF8
  2416                           tblptrh	equ	0xFF7
  2417                           tblptrl	equ	0xFF6
  2418                           tablat	equ	0xFF5
  2419                           prodh	equ	0xFF4
  2420                           prodl	equ	0xFF3
  2421                           intcon	equ	0xFF2
  2422                           intcon2	equ	0xFF1
  2423                           postinc0	equ	0xFEE
  2424                           wreg	equ	0xFE8
  2425                           postdec1	equ	0xFE5
  2426                           fsr1l	equ	0xFE1
  2427                           indf2	equ	0xFDF
  2428                           fsr2h	equ	0xFDA
  2429                           fsr2l	equ	0xFD9
  2430                           status	equ	0xFD8
  2431                           
  2432 ;; *************** function _OSCILLATOR_Initialize *****************
  2433 ;; Defined at:
  2434 ;;		line 122 in file "mcc_generated_files/mcc.c"
  2435 ;; Parameters:    Size  Location     Type
  2436 ;;		None
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;		None
  2439 ;; Return value:  Size  Location     Type
  2440 ;;                  1    wreg      void 
  2441 ;; Registers used:
  2442 ;;		wreg, status,2
  2443 ;; Tracked objects:
  2444 ;;		On entry : 0/0
  2445 ;;		On exit  : 0/0
  2446 ;;		Unchanged: 0/0
  2447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2448 ;;      Params:         0       0       0       0       0       0       0
  2449 ;;      Locals:         0       0       0       0       0       0       0
  2450 ;;      Temps:          0       0       0       0       0       0       0
  2451 ;;      Totals:         0       0       0       0       0       0       0
  2452 ;;Total ram usage:        0 bytes
  2453 ;; Hardware stack levels used:    1
  2454 ;; Hardware stack levels required when called:    3
  2455 ;; This function calls:
  2456 ;;		Nothing
  2457 ;; This function is called by:
  2458 ;;		_SYSTEM_Initialize
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           	psect	text11
  2463  002742                     __ptext11:
  2464                           	opt stack 0
  2465  002742                     _OSCILLATOR_Initialize:
  2466                           	opt stack 25
  2467                           
  2468                           ;mcc.c: 125: OSCCON = 0x60;
  2469                           
  2470                           ; BSR set to: 15
  2471                           ;incstack = 0
  2472  002742  0E60               	movlw	96
  2473  002744  6ED3               	movwf	4051,c	;volatile
  2474                           
  2475                           ;mcc.c: 127: OSCCON2 = 0x04;
  2476  002746  0E04               	movlw	4
  2477  002748  6ED2               	movwf	4050,c	;volatile
  2478                           
  2479                           ;mcc.c: 129: OSCTUNE = 0x00;
  2480  00274A  0E00               	movlw	0
  2481  00274C  6E9B               	movwf	3995,c	;volatile
  2482  00274E  0012               	return		;funcret
  2483  002750                     __end_of_OSCILLATOR_Initialize:
  2484                           	opt stack 0
  2485                           tblptru	equ	0xFF8
  2486                           tblptrh	equ	0xFF7
  2487                           tblptrl	equ	0xFF6
  2488                           tablat	equ	0xFF5
  2489                           prodh	equ	0xFF4
  2490                           prodl	equ	0xFF3
  2491                           intcon	equ	0xFF2
  2492                           intcon2	equ	0xFF1
  2493                           postinc0	equ	0xFEE
  2494                           wreg	equ	0xFE8
  2495                           postdec1	equ	0xFE5
  2496                           fsr1l	equ	0xFE1
  2497                           indf2	equ	0xFDF
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function _INTERRUPT_Initialize *****************
  2503 ;; Defined at:
  2504 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;		None
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		None
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2518 ;;      Params:         0       0       0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0
  2520 ;;      Temps:          0       0       0       0       0       0       0
  2521 ;;      Totals:         0       0       0       0       0       0       0
  2522 ;;Total ram usage:        0 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    3
  2525 ;; This function calls:
  2526 ;;		Nothing
  2527 ;; This function is called by:
  2528 ;;		_SYSTEM_Initialize
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text12
  2533  002776                     __ptext12:
  2534                           	opt stack 0
  2535  002776                     _INTERRUPT_Initialize:
  2536                           	opt stack 25
  2537                           
  2538                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  2539                           
  2540                           ;incstack = 0
  2541  002776  9ED0               	bcf	4048,7,c	;volatile
  2542  002778  0012               	return		;funcret
  2543  00277A                     __end_of_INTERRUPT_Initialize:
  2544                           	opt stack 0
  2545                           tblptru	equ	0xFF8
  2546                           tblptrh	equ	0xFF7
  2547                           tblptrl	equ	0xFF6
  2548                           tablat	equ	0xFF5
  2549                           prodh	equ	0xFF4
  2550                           prodl	equ	0xFF3
  2551                           intcon	equ	0xFF2
  2552                           intcon2	equ	0xFF1
  2553                           postinc0	equ	0xFEE
  2554                           wreg	equ	0xFE8
  2555                           postdec1	equ	0xFE5
  2556                           fsr1l	equ	0xFE1
  2557                           indf2	equ	0xFDF
  2558                           fsr2h	equ	0xFDA
  2559                           fsr2l	equ	0xFD9
  2560                           status	equ	0xFD8
  2561                           
  2562 ;; *************** function _EUSART1_Initialize *****************
  2563 ;; Defined at:
  2564 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;		None
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;		None
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  1    wreg      void 
  2571 ;; Registers used:
  2572 ;;		wreg, status,2
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2578 ;;      Params:         0       0       0       0       0       0       0
  2579 ;;      Locals:         0       0       0       0       0       0       0
  2580 ;;      Temps:          0       0       0       0       0       0       0
  2581 ;;      Totals:         0       0       0       0       0       0       0
  2582 ;;Total ram usage:        0 bytes
  2583 ;; Hardware stack levels used:    1
  2584 ;; Hardware stack levels required when called:    3
  2585 ;; This function calls:
  2586 ;;		Nothing
  2587 ;; This function is called by:
  2588 ;;		_SYSTEM_Initialize
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           	psect	text13
  2593  00244C                     __ptext13:
  2594                           	opt stack 0
  2595  00244C                     _EUSART1_Initialize:
  2596                           	opt stack 25
  2597                           
  2598                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  2599                           
  2600                           ;incstack = 0
  2601  00244C  9A9D               	bcf	3997,5,c	;volatile
  2602                           
  2603                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  2604  00244E  989D               	bcf	3997,4,c	;volatile
  2605                           
  2606                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  2607  002450  0E08               	movlw	8
  2608  002452  6EB8               	movwf	4024,c	;volatile
  2609                           
  2610                           ;eusart1.c: 85: RCSTA1 = 0x90;
  2611  002454  0E90               	movlw	144
  2612  002456  6EAB               	movwf	4011,c	;volatile
  2613                           
  2614                           ;eusart1.c: 88: TXSTA1 = 0x24;
  2615  002458  0E24               	movlw	36
  2616  00245A  6EAC               	movwf	4012,c	;volatile
  2617                           
  2618                           ;eusart1.c: 91: SPBRG1 = 0x10;
  2619  00245C  0E10               	movlw	16
  2620  00245E  6EAF               	movwf	4015,c	;volatile
  2621                           
  2622                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  2623  002460  0E00               	movlw	0
  2624  002462  6EB0               	movwf	4016,c	;volatile
  2625                           
  2626                           ;eusart1.c: 98: eusart1TxHead = 0;
  2627  002464  0E00               	movlw	0
  2628  002466  6E3A               	movwf	_eusart1TxHead,c	;volatile
  2629                           
  2630                           ;eusart1.c: 99: eusart1TxTail = 0;
  2631  002468  0E00               	movlw	0
  2632  00246A  6E39               	movwf	_eusart1TxTail,c	;volatile
  2633                           
  2634                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  2635  00246C  0E46               	movlw	70
  2636  00246E  0100               	movlb	0	; () banked
  2637  002470  6FFB               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  2638                           
  2639                           ;eusart1.c: 102: eusart1RxHead = 0;
  2640  002472  0E00               	movlw	0
  2641  002474  6E38               	movwf	_eusart1RxHead,c	;volatile
  2642                           
  2643                           ;eusart1.c: 103: eusart1RxTail = 0;
  2644  002476  0E00               	movlw	0
  2645  002478  6E37               	movwf	_eusart1RxTail,c	;volatile
  2646                           
  2647                           ;eusart1.c: 104: eusart1RxCount = 0;
  2648  00247A  0E00               	movlw	0
  2649  00247C  6E36               	movwf	_eusart1RxCount,c	;volatile
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  2653  00247E  8A9D               	bsf	3997,5,c	;volatile
  2654                           
  2655                           ; BSR set to: 0
  2656  002480  0012               	return		;funcret
  2657  002482                     __end_of_EUSART1_Initialize:
  2658                           	opt stack 0
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           prodh	equ	0xFF4
  2664                           prodl	equ	0xFF3
  2665                           intcon	equ	0xFF2
  2666                           intcon2	equ	0xFF1
  2667                           postinc0	equ	0xFEE
  2668                           wreg	equ	0xFE8
  2669                           postdec1	equ	0xFE5
  2670                           fsr1l	equ	0xFE1
  2671                           indf2	equ	0xFDF
  2672                           fsr2h	equ	0xFDA
  2673                           fsr2l	equ	0xFD9
  2674                           status	equ	0xFD8
  2675                           
  2676 ;; *************** function _ADC_Initialize *****************
  2677 ;; Defined at:
  2678 ;;		line 58 in file "mcc_generated_files/adc.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;		None
  2681 ;; Auto vars:     Size  Location     Type
  2682 ;;		None
  2683 ;; Return value:  Size  Location     Type
  2684 ;;                  1    wreg      void 
  2685 ;; Registers used:
  2686 ;;		wreg, status,2
  2687 ;; Tracked objects:
  2688 ;;		On entry : 0/0
  2689 ;;		On exit  : 0/0
  2690 ;;		Unchanged: 0/0
  2691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2692 ;;      Params:         0       0       0       0       0       0       0
  2693 ;;      Locals:         0       0       0       0       0       0       0
  2694 ;;      Temps:          0       0       0       0       0       0       0
  2695 ;;      Totals:         0       0       0       0       0       0       0
  2696 ;;Total ram usage:        0 bytes
  2697 ;; Hardware stack levels used:    1
  2698 ;; Hardware stack levels required when called:    3
  2699 ;; This function calls:
  2700 ;;		Nothing
  2701 ;; This function is called by:
  2702 ;;		_SYSTEM_Initialize
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           	psect	text14
  2707  0026DE                     __ptext14:
  2708                           	opt stack 0
  2709  0026DE                     _ADC_Initialize:
  2710                           	opt stack 25
  2711                           
  2712                           ;adc.c: 63: ADCON0 = 0x05;
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;incstack = 0
  2716  0026DE  0E05               	movlw	5
  2717  0026E0  6EC2               	movwf	4034,c	;volatile
  2718                           
  2719                           ;adc.c: 66: ADCON1 = 0x00;
  2720  0026E2  0E00               	movlw	0
  2721  0026E4  6EC1               	movwf	4033,c	;volatile
  2722                           
  2723                           ;adc.c: 69: ADCON2 = 0x87;
  2724  0026E6  0E87               	movlw	135
  2725  0026E8  6EC0               	movwf	4032,c	;volatile
  2726                           
  2727                           ;adc.c: 72: ADRESL = 0x00;
  2728  0026EA  0E00               	movlw	0
  2729  0026EC  6EC3               	movwf	4035,c	;volatile
  2730                           
  2731                           ;adc.c: 75: ADRESH = 0x00;
  2732  0026EE  0E00               	movlw	0
  2733  0026F0  6EC4               	movwf	4036,c	;volatile
  2734  0026F2  0012               	return		;funcret
  2735  0026F4                     __end_of_ADC_Initialize:
  2736                           	opt stack 0
  2737                           tblptru	equ	0xFF8
  2738                           tblptrh	equ	0xFF7
  2739                           tblptrl	equ	0xFF6
  2740                           tablat	equ	0xFF5
  2741                           prodh	equ	0xFF4
  2742                           prodl	equ	0xFF3
  2743                           intcon	equ	0xFF2
  2744                           intcon2	equ	0xFF1
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           postdec1	equ	0xFE5
  2748                           fsr1l	equ	0xFE1
  2749                           indf2	equ	0xFDF
  2750                           fsr2h	equ	0xFDA
  2751                           fsr2l	equ	0xFD9
  2752                           status	equ	0xFD8
  2753                           
  2754 ;; *************** function _SetMcuRunTime *****************
  2755 ;; Defined at:
  2756 ;;		line 81 in file "SystemStatus.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;		None
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2, status,0, cstack
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2770 ;;      Params:         0       0       0       0       0       0       0
  2771 ;;      Locals:         0       0       0       0       0       0       0
  2772 ;;      Temps:          0       0       0       0       0       0       0
  2773 ;;      Totals:         0       0       0       0       0       0       0
  2774 ;;Total ram usage:        0 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    4
  2777 ;; This function calls:
  2778 ;;		___llmod
  2779 ;; This function is called by:
  2780 ;;		_main
  2781 ;; This function uses a non-reentrant model
  2782 ;;
  2783                           
  2784                           	psect	text15
  2785  00221E                     __ptext15:
  2786                           	opt stack 0
  2787  00221E                     _SetMcuRunTime:
  2788                           	opt stack 26
  2789                           
  2790                           ;SystemStatus.c: 83: mcuRunTimeIn5SecTicks++;
  2791                           
  2792                           ;incstack = 0
  2793  00221E  0E01               	movlw	1
  2794  002220  0100               	movlb	0	; () banked
  2795  002222  27BE               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  2796  002224  0E00               	movlw	0
  2797  002226  23BF               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  2798  002228  23C0               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  2799  00222A  23C1               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;SystemStatus.c: 84: mcuRunTimeIn5SecTicks %= (17280);
  2803  00222C  C0BE  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  2804  002230  C0BF  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  2805  002234  C0C0  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  2806  002238  C0C1  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  2807  00223C  0E80               	movlw	128
  2808  00223E  6E1C               	movwf	___llmod@divisor,c
  2809  002240  0E43               	movlw	67
  2810  002242  6E1D               	movwf	___llmod@divisor+1,c
  2811  002244  0E00               	movlw	0
  2812  002246  6E1E               	movwf	___llmod@divisor+2,c
  2813  002248  0E00               	movlw	0
  2814  00224A  6E1F               	movwf	___llmod@divisor+3,c
  2815  00224C  EC02  F00F         	call	___llmod	;wreg free
  2816  002250  C018  F0BE         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  2817  002254  C019  F0BF         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  2818  002258  C01A  F0C0         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  2819  00225C  C01B  F0C1         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  2820  002260  0012               	return		;funcret
  2821  002262                     __end_of_SetMcuRunTime:
  2822                           	opt stack 0
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           prodh	equ	0xFF4
  2828                           prodl	equ	0xFF3
  2829                           intcon	equ	0xFF2
  2830                           intcon2	equ	0xFF1
  2831                           postinc0	equ	0xFEE
  2832                           wreg	equ	0xFE8
  2833                           postdec1	equ	0xFE5
  2834                           fsr1l	equ	0xFE1
  2835                           indf2	equ	0xFDF
  2836                           fsr2h	equ	0xFDA
  2837                           fsr2l	equ	0xFD9
  2838                           status	equ	0xFD8
  2839                           
  2840 ;; *************** function ___llmod *****************
  2841 ;; Defined at:
  2842 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;  dividend        4   23[COMRAM] unsigned long 
  2845 ;;  divisor         4   27[COMRAM] unsigned long 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  counter         1   31[COMRAM] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  4   23[COMRAM] unsigned long 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2, status,0
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2857 ;;      Params:         8       0       0       0       0       0       0
  2858 ;;      Locals:         1       0       0       0       0       0       0
  2859 ;;      Temps:          0       0       0       0       0       0       0
  2860 ;;      Totals:         9       0       0       0       0       0       0
  2861 ;;Total ram usage:        9 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    3
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_SetMcuRunTime
  2868 ;;		_GetMcuRunTime
  2869 ;; This function uses a non-reentrant model
  2870 ;;
  2871                           
  2872                           	psect	text16
  2873  001E04                     __ptext16:
  2874                           	opt stack 0
  2875  001E04                     ___llmod:
  2876                           	opt stack 26
  2877                           
  2878                           ;incstack = 0
  2879  001E04  501C               	movf	___llmod@divisor,w,c
  2880  001E06  101D               	iorwf	___llmod@divisor+1,w,c
  2881  001E08  101E               	iorwf	___llmod@divisor+2,w,c
  2882  001E0A  101F               	iorwf	___llmod@divisor+3,w,c
  2883  001E0C  B4D8               	btfsc	status,2,c
  2884  001E0E  D024               	goto	l1788
  2885  001E10  0E01               	movlw	1
  2886  001E12  6E20               	movwf	___llmod@counter,c
  2887  001E14  D006               	goto	l1783
  2888  001E16  90D8               	bcf	status,0,c
  2889  001E18  361C               	rlcf	___llmod@divisor,f,c
  2890  001E1A  361D               	rlcf	___llmod@divisor+1,f,c
  2891  001E1C  361E               	rlcf	___llmod@divisor+2,f,c
  2892  001E1E  361F               	rlcf	___llmod@divisor+3,f,c
  2893  001E20  2A20               	incf	___llmod@counter,f,c
  2894  001E22                     l1783:
  2895  001E22  AE1F               	btfss	___llmod@divisor+3,7,c
  2896  001E24  D7F8               	goto	l1784
  2897  001E26                     u4040:
  2898  001E26  501C               	movf	___llmod@divisor,w,c
  2899  001E28  5C18               	subwf	___llmod@dividend,w,c
  2900  001E2A  501D               	movf	___llmod@divisor+1,w,c
  2901  001E2C  5819               	subwfb	___llmod@dividend+1,w,c
  2902  001E2E  501E               	movf	___llmod@divisor+2,w,c
  2903  001E30  581A               	subwfb	___llmod@dividend+2,w,c
  2904  001E32  501F               	movf	___llmod@divisor+3,w,c
  2905  001E34  581B               	subwfb	___llmod@dividend+3,w,c
  2906  001E36  A0D8               	btfss	status,0,c
  2907  001E38  D008               	goto	l1787
  2908  001E3A  501C               	movf	___llmod@divisor,w,c
  2909  001E3C  5E18               	subwf	___llmod@dividend,f,c
  2910  001E3E  501D               	movf	___llmod@divisor+1,w,c
  2911  001E40  5A19               	subwfb	___llmod@dividend+1,f,c
  2912  001E42  501E               	movf	___llmod@divisor+2,w,c
  2913  001E44  5A1A               	subwfb	___llmod@dividend+2,f,c
  2914  001E46  501F               	movf	___llmod@divisor+3,w,c
  2915  001E48  5A1B               	subwfb	___llmod@dividend+3,f,c
  2916  001E4A                     l1787:
  2917  001E4A  90D8               	bcf	status,0,c
  2918  001E4C  321F               	rrcf	___llmod@divisor+3,f,c
  2919  001E4E  321E               	rrcf	___llmod@divisor+2,f,c
  2920  001E50  321D               	rrcf	___llmod@divisor+1,f,c
  2921  001E52  321C               	rrcf	___llmod@divisor,f,c
  2922  001E54  2E20               	decfsz	___llmod@counter,f,c
  2923  001E56  D7E7               	goto	u4040
  2924  001E58                     l1788:
  2925  001E58  C018  F018         	movff	___llmod@dividend,?___llmod
  2926  001E5C  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  2927  001E60  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  2928  001E64  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  2929  001E68  0012               	return		;funcret
  2930  001E6A                     __end_of___llmod:
  2931                           	opt stack 0
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           prodh	equ	0xFF4
  2937                           prodl	equ	0xFF3
  2938                           intcon	equ	0xFF2
  2939                           intcon2	equ	0xFF1
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postdec1	equ	0xFE5
  2943                           fsr1l	equ	0xFE1
  2944                           indf2	equ	0xFDF
  2945                           fsr2h	equ	0xFDA
  2946                           fsr2l	equ	0xFD9
  2947                           status	equ	0xFD8
  2948                           
  2949 ;; *************** function _SendUartSystemInitMessage *****************
  2950 ;; Defined at:
  2951 ;;		line 122 in file "SystemStatus.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;		None
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  TxMsg          30    5[BANK0 ] unsigned char [30]
  2956 ;;  firstLine       5    0[BANK0 ] unsigned char [5]
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  1    wreg      void 
  2959 ;; Registers used:
  2960 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2966 ;;      Params:         0       0       0       0       0       0       0
  2967 ;;      Locals:         0      35       0       0       0       0       0
  2968 ;;      Temps:          0       0       0       0       0       0       0
  2969 ;;      Totals:         0      35       0       0       0       0       0
  2970 ;;Total ram usage:       35 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    5
  2973 ;; This function calls:
  2974 ;;		_WriteUartMessage
  2975 ;;		_ZeroArray
  2976 ;;		_memcpy
  2977 ;; This function is called by:
  2978 ;;		_main
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text17
  2983  001528                     __ptext17:
  2984                           	opt stack 0
  2985  001528                     _SendUartSystemInitMessage:
  2986                           	opt stack 25
  2987                           
  2988                           ;SystemStatus.c: 124: char TxMsg[30];
  2989                           ;SystemStatus.c: 126: char firstLine[] = "Roee";
  2990                           
  2991                           ;incstack = 0
  2992  001528  EE20  F0EE         	lfsr	2,SendUartSystemInitMessage@F7616
  2993  00152C  EE10  F060         	lfsr	1,SendUartSystemInitMessage@firstLine
  2994  001530  0E04               	movlw	4
  2995  001532                     u6331:
  2996  001532  CFDB FFE3          	movff	plusw2,plusw1
  2997  001536  06E8               	decf	wreg,f,c
  2998  001538  E2FC               	bc	u6331
  2999                           
  3000                           ;SystemStatus.c: 128: ZeroArray(TxMsg, 30);
  3001  00153A  0E65               	movlw	low SendUartSystemInitMessage@TxMsg
  3002  00153C  6E20               	movwf	ZeroArray@array,c
  3003  00153E  0E00               	movlw	high SendUartSystemInitMessage@TxMsg
  3004  001540  6E21               	movwf	ZeroArray@array+1,c
  3005  001542  0E00               	movlw	0
  3006  001544  6E23               	movwf	ZeroArray@size+1,c
  3007  001546  0E1E               	movlw	30
  3008  001548  6E22               	movwf	ZeroArray@size,c
  3009  00154A  EC1E  F013         	call	_ZeroArray	;wreg free
  3010                           
  3011                           ;SystemStatus.c: 129: memcpy(TxMsg, "************************ \n\r", 30);
  3012  00154E  0E65               	movlw	low SendUartSystemInitMessage@TxMsg
  3013  001550  6E18               	movwf	memcpy@d1,c
  3014  001552  0E00               	movlw	high SendUartSystemInitMessage@TxMsg
  3015  001554  6E19               	movwf	memcpy@d1+1,c
  3016  001556  0EA9               	movlw	low STR_1
  3017  001558  6E1A               	movwf	memcpy@s1,c
  3018  00155A  0E06               	movlw	high STR_1
  3019  00155C  6E1B               	movwf	memcpy@s1+1,c
  3020  00155E  0E00               	movlw	0
  3021  001560  6E1D               	movwf	memcpy@n+1,c
  3022  001562  0E1E               	movlw	30
  3023  001564  6E1C               	movwf	memcpy@n,c
  3024  001566  ECEC  F010         	call	_memcpy	;wreg free
  3025                           
  3026                           ;SystemStatus.c: 130: WriteUartMessage(TxMsg, 30);
  3027  00156A  0E65               	movlw	low SendUartSystemInitMessage@TxMsg
  3028  00156C  6E19               	movwf	WriteUartMessage@dataBuf,c
  3029  00156E  0E00               	movlw	high SendUartSystemInitMessage@TxMsg
  3030  001570  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3031  001572  0E00               	movlw	0
  3032  001574  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3033  001576  0E1E               	movlw	30
  3034  001578  6E1B               	movwf	WriteUartMessage@dataSize,c
  3035  00157A  EC41  F012         	call	_WriteUartMessage	;wreg free
  3036                           
  3037                           ;SystemStatus.c: 132: ZeroArray(TxMsg, 30);
  3038  00157E  0E65               	movlw	low SendUartSystemInitMessage@TxMsg
  3039  001580  6E20               	movwf	ZeroArray@array,c
  3040  001582  0E00               	movlw	high SendUartSystemInitMessage@TxMsg
  3041  001584  6E21               	movwf	ZeroArray@array+1,c
  3042  001586  0E00               	movlw	0
  3043  001588  6E23               	movwf	ZeroArray@size+1,c
  3044  00158A  0E1E               	movlw	30
  3045  00158C  6E22               	movwf	ZeroArray@size,c
  3046  00158E  EC1E  F013         	call	_ZeroArray	;wreg free
  3047                           
  3048                           ;SystemStatus.c: 133: memcpy(TxMsg, "\n\r FAST LINK SYSTEM \n\r", 30);
  3049  001592  0E65               	movlw	low SendUartSystemInitMessage@TxMsg
  3050  001594  6E18               	movwf	memcpy@d1,c
  3051  001596  0E00               	movlw	high SendUartSystemInitMessage@TxMsg
  3052  001598  6E19               	movwf	memcpy@d1+1,c
  3053  00159A  0EDE               	movlw	low STR_2
  3054  00159C  6E1A               	movwf	memcpy@s1,c
  3055  00159E  0E06               	movlw	high STR_2
  3056  0015A0  6E1B               	movwf	memcpy@s1+1,c
  3057  0015A2  0E00               	movlw	0
  3058  0015A4  6E1D               	movwf	memcpy@n+1,c
  3059  0015A6  0E1E               	movlw	30
  3060  0015A8  6E1C               	movwf	memcpy@n,c
  3061  0015AA  ECEC  F010         	call	_memcpy	;wreg free
  3062                           
  3063                           ;SystemStatus.c: 134: WriteUartMessage(TxMsg, 30);
  3064  0015AE  0E65               	movlw	low SendUartSystemInitMessage@TxMsg
  3065  0015B0  6E19               	movwf	WriteUartMessage@dataBuf,c
  3066  0015B2  0E00               	movlw	high SendUartSystemInitMessage@TxMsg
  3067  0015B4  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3068  0015B6  0E00               	movlw	0
  3069  0015B8  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3070  0015BA  0E1E               	movlw	30
  3071  0015BC  6E1B               	movwf	WriteUartMessage@dataSize,c
  3072  0015BE  EC41  F012         	call	_WriteUartMessage	;wreg free
  3073                           
  3074                           ;SystemStatus.c: 136: ZeroArray(TxMsg, 30);
  3075  0015C2  0E65               	movlw	low SendUartSystemInitMessage@TxMsg
  3076  0015C4  6E20               	movwf	ZeroArray@array,c
  3077  0015C6  0E00               	movlw	high SendUartSystemInitMessage@TxMsg
  3078  0015C8  6E21               	movwf	ZeroArray@array+1,c
  3079  0015CA  0E00               	movlw	0
  3080  0015CC  6E23               	movwf	ZeroArray@size+1,c
  3081  0015CE  0E1E               	movlw	30
  3082  0015D0  6E22               	movwf	ZeroArray@size,c
  3083  0015D2  EC1E  F013         	call	_ZeroArray	;wreg free
  3084                           
  3085                           ;SystemStatus.c: 137: memcpy(TxMsg, "************************", 30);
  3086  0015D6  0E65               	movlw	low SendUartSystemInitMessage@TxMsg
  3087  0015D8  6E18               	movwf	memcpy@d1,c
  3088  0015DA  0E00               	movlw	high SendUartSystemInitMessage@TxMsg
  3089  0015DC  6E19               	movwf	memcpy@d1+1,c
  3090  0015DE  0EC5               	movlw	low STR_3
  3091  0015E0  6E1A               	movwf	memcpy@s1,c
  3092  0015E2  0E06               	movlw	high STR_3
  3093  0015E4  6E1B               	movwf	memcpy@s1+1,c
  3094  0015E6  0E00               	movlw	0
  3095  0015E8  6E1D               	movwf	memcpy@n+1,c
  3096  0015EA  0E1E               	movlw	30
  3097  0015EC  6E1C               	movwf	memcpy@n,c
  3098  0015EE  ECEC  F010         	call	_memcpy	;wreg free
  3099                           
  3100                           ;SystemStatus.c: 138: WriteUartMessage(TxMsg, 30);
  3101  0015F2  0E65               	movlw	low SendUartSystemInitMessage@TxMsg
  3102  0015F4  6E19               	movwf	WriteUartMessage@dataBuf,c
  3103  0015F6  0E00               	movlw	high SendUartSystemInitMessage@TxMsg
  3104  0015F8  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3105  0015FA  0E00               	movlw	0
  3106  0015FC  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3107  0015FE  0E1E               	movlw	30
  3108  001600  6E1B               	movwf	WriteUartMessage@dataSize,c
  3109  001602  EC41  F012         	call	_WriteUartMessage	;wreg free
  3110  001606  0012               	return		;funcret
  3111  001608                     __end_of_SendUartSystemInitMessage:
  3112                           	opt stack 0
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           prodh	equ	0xFF4
  3118                           prodl	equ	0xFF3
  3119                           intcon	equ	0xFF2
  3120                           intcon2	equ	0xFF1
  3121                           postinc0	equ	0xFEE
  3122                           wreg	equ	0xFE8
  3123                           postdec1	equ	0xFE5
  3124                           plusw1	equ	0xFE3
  3125                           fsr1l	equ	0xFE1
  3126                           indf2	equ	0xFDF
  3127                           plusw2	equ	0xFDB
  3128                           fsr2h	equ	0xFDA
  3129                           fsr2l	equ	0xFD9
  3130                           status	equ	0xFD8
  3131                           
  3132 ;; *************** function _memcpy *****************
  3133 ;; Defined at:
  3134 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;  d1              2   23[COMRAM] PTR void 
  3137 ;;		 -> SendUartSystemInitMessage@TxMsg(30), 
  3138 ;;  s1              2   25[COMRAM] PTR const void 
  3139 ;;		 -> STR_3(25), STR_2(23), STR_1(28), 
  3140 ;;  n               2   27[COMRAM] unsigned int 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  s               2   32[COMRAM] PTR const unsigned char 
  3143 ;;		 -> STR_3(25), STR_2(23), STR_1(28), 
  3144 ;;  d               2   30[COMRAM] PTR unsigned char 
  3145 ;;		 -> SendUartSystemInitMessage@TxMsg(30), 
  3146 ;;  tmp             1   29[COMRAM] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  2   23[COMRAM] PTR void 
  3149 ;; Registers used:
  3150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3156 ;;      Params:         6       0       0       0       0       0       0
  3157 ;;      Locals:         5       0       0       0       0       0       0
  3158 ;;      Temps:          0       0       0       0       0       0       0
  3159 ;;      Totals:        11       0       0       0       0       0       0
  3160 ;;Total ram usage:       11 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    3
  3163 ;; This function calls:
  3164 ;;		Nothing
  3165 ;; This function is called by:
  3166 ;;		_SendUartSystemInitMessage
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text18
  3171  0021D8                     __ptext18:
  3172                           	opt stack 0
  3173  0021D8                     _memcpy:
  3174                           	opt stack 26
  3175                           
  3176                           ;incstack = 0
  3177  0021D8  C01A  F021         	movff	memcpy@s1,memcpy@s
  3178  0021DC  C01B  F022         	movff	memcpy@s1+1,memcpy@s+1
  3179  0021E0  C018  F01F         	movff	memcpy@d1,memcpy@d
  3180  0021E4  C019  F020         	movff	memcpy@d1+1,memcpy@d+1
  3181  0021E8  D011               	goto	l1850
  3182  0021EA                     l6597:
  3183  0021EA  C021  FFF6         	movff	memcpy@s,tblptrl
  3184  0021EE  C022  FFF7         	movff	memcpy@s+1,tblptrh
  3185  0021F2                     	if	0	;tblptru may be non-zero
  3186  0021F2                     	endif
  3187  0021F2                     	if	0	;tblptru may be non-zero
  3188  0021F2                     	endif
  3189  0021F2  0008               	tblrd		*
  3190  0021F4  CFF5 F01E          	movff	tablat,memcpy@tmp
  3191  0021F8  4A21               	infsnz	memcpy@s,f,c
  3192  0021FA  2A22               	incf	memcpy@s+1,f,c
  3193  0021FC  C01F  FFD9         	movff	memcpy@d,fsr2l
  3194  002200  C020  FFDA         	movff	memcpy@d+1,fsr2h
  3195  002204  C01E  FFDF         	movff	memcpy@tmp,indf2
  3196  002208  4A1F               	infsnz	memcpy@d,f,c
  3197  00220A  2A20               	incf	memcpy@d+1,f,c
  3198  00220C                     l1850:
  3199  00220C  061C               	decf	memcpy@n,f,c
  3200  00220E  A0D8               	btfss	status,0,c
  3201  002210  061D               	decf	memcpy@n+1,f,c
  3202  002212  281C               	incf	memcpy@n,w,c
  3203  002214  E1EA               	bnz	l6597
  3204  002216  281D               	incf	memcpy@n+1,w,c
  3205  002218  B4D8               	btfsc	status,2,c
  3206  00221A  0012               	return	
  3207  00221C  D7E6               	goto	l1851
  3208  00221E                     __end_of_memcpy:
  3209                           	opt stack 0
  3210                           tblptru	equ	0xFF8
  3211                           tblptrh	equ	0xFF7
  3212                           tblptrl	equ	0xFF6
  3213                           tablat	equ	0xFF5
  3214                           prodh	equ	0xFF4
  3215                           prodl	equ	0xFF3
  3216                           intcon	equ	0xFF2
  3217                           intcon2	equ	0xFF1
  3218                           postinc0	equ	0xFEE
  3219                           wreg	equ	0xFE8
  3220                           postdec1	equ	0xFE5
  3221                           plusw1	equ	0xFE3
  3222                           fsr1l	equ	0xFE1
  3223                           indf2	equ	0xFDF
  3224                           plusw2	equ	0xFDB
  3225                           fsr2h	equ	0xFDA
  3226                           fsr2l	equ	0xFD9
  3227                           status	equ	0xFD8
  3228                           
  3229 ;; *************** function _ZeroArray *****************
  3230 ;; Defined at:
  3231 ;;		line 24 in file "SystemCommon.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  array           2   31[COMRAM] PTR unsigned char 
  3234 ;;		 -> SendUartSystemInitMessage@TxMsg(30), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dat
      +aRegArr(8), 
  3235 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
  3236 ;;		 -> rxMsgQueue(20), 
  3237 ;;  size            2   33[COMRAM] int 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;		None
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3249 ;;      Params:         4       0       0       0       0       0       0
  3250 ;;      Locals:         0       0       0       0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0
  3252 ;;      Totals:         4       0       0       0       0       0       0
  3253 ;;Total ram usage:        4 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    4
  3256 ;; This function calls:
  3257 ;;		_memset
  3258 ;; This function is called by:
  3259 ;;		_InitRxMessageParams
  3260 ;;		_SendUartSystemInitMessage
  3261 ;;		_SendAckMessage
  3262 ;;		_FlashReadUart
  3263 ;;		_FlashEreaseMem
  3264 ;;		_FlashReadCondition
  3265 ;;		_GetIntFromUartData
  3266 ;;		_GetMcuFwVersion
  3267 ;;		_GetCpldFwVersion
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text19
  3272  00263C                     __ptext19:
  3273                           	opt stack 0
  3274  00263C                     _ZeroArray:
  3275                           	opt stack 24
  3276                           
  3277                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  3278                           
  3279                           ;incstack = 0
  3280  00263C  C020  F018         	movff	ZeroArray@array,memset@p1
  3281  002640  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  3282  002644  0E00               	movlw	0
  3283  002646  6E1B               	movwf	memset@c+1,c
  3284  002648  0E00               	movlw	0
  3285  00264A  6E1A               	movwf	memset@c,c
  3286  00264C  C022  F01C         	movff	ZeroArray@size,memset@n
  3287  002650  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  3288  002654  ECA8  F012         	call	_memset	;wreg free
  3289  002658  0012               	return		;funcret
  3290  00265A                     __end_of_ZeroArray:
  3291                           	opt stack 0
  3292                           tblptru	equ	0xFF8
  3293                           tblptrh	equ	0xFF7
  3294                           tblptrl	equ	0xFF6
  3295                           tablat	equ	0xFF5
  3296                           prodh	equ	0xFF4
  3297                           prodl	equ	0xFF3
  3298                           intcon	equ	0xFF2
  3299                           intcon2	equ	0xFF1
  3300                           postinc0	equ	0xFEE
  3301                           wreg	equ	0xFE8
  3302                           postdec1	equ	0xFE5
  3303                           plusw1	equ	0xFE3
  3304                           fsr1l	equ	0xFE1
  3305                           indf2	equ	0xFDF
  3306                           plusw2	equ	0xFDB
  3307                           fsr2h	equ	0xFDA
  3308                           fsr2l	equ	0xFD9
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function _memset *****************
  3312 ;; Defined at:
  3313 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  p1              2   23[COMRAM] PTR void 
  3316 ;;		 -> SendUartSystemInitMessage@TxMsg(30), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dat
      +aRegArr(8), 
  3317 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
  3318 ;;		 -> rxMsgQueue(20), 
  3319 ;;  c               2   25[COMRAM] int 
  3320 ;;  n               2   27[COMRAM] unsigned int 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  p               2   29[COMRAM] PTR unsigned char 
  3323 ;;		 -> SendUartSystemInitMessage@TxMsg(30), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dat
      +aRegArr(8), 
  3324 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
  3325 ;;		 -> rxMsgQueue(20), 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  2   23[COMRAM] PTR void 
  3328 ;; Registers used:
  3329 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3335 ;;      Params:         6       0       0       0       0       0       0
  3336 ;;      Locals:         2       0       0       0       0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0
  3338 ;;      Totals:         8       0       0       0       0       0       0
  3339 ;;Total ram usage:        8 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    3
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_ZeroArray
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text20
  3350  002550                     __ptext20:
  3351                           	opt stack 0
  3352  002550                     _memset:
  3353                           	opt stack 24
  3354                           
  3355                           ;incstack = 0
  3356  002550  C018  F01E         	movff	memset@p1,memset@p
  3357  002554  C019  F01F         	movff	memset@p1+1,memset@p+1
  3358  002558  D008               	goto	l1856
  3359  00255A                     l6223:
  3360  00255A  C01E  FFD9         	movff	memset@p,fsr2l
  3361  00255E  C01F  FFDA         	movff	memset@p+1,fsr2h
  3362  002562  C01A  FFDF         	movff	memset@c,indf2
  3363  002566  4A1E               	infsnz	memset@p,f,c
  3364  002568  2A1F               	incf	memset@p+1,f,c
  3365  00256A                     l1856:
  3366  00256A  061C               	decf	memset@n,f,c
  3367  00256C  A0D8               	btfss	status,0,c
  3368  00256E  061D               	decf	memset@n+1,f,c
  3369  002570  281C               	incf	memset@n,w,c
  3370  002572  E1F3               	bnz	l6223
  3371  002574  281D               	incf	memset@n+1,w,c
  3372  002576  B4D8               	btfsc	status,2,c
  3373  002578  0012               	return	
  3374  00257A  D7EF               	goto	l1857
  3375  00257C                     __end_of_memset:
  3376                           	opt stack 0
  3377                           tblptru	equ	0xFF8
  3378                           tblptrh	equ	0xFF7
  3379                           tblptrl	equ	0xFF6
  3380                           tablat	equ	0xFF5
  3381                           prodh	equ	0xFF4
  3382                           prodl	equ	0xFF3
  3383                           intcon	equ	0xFF2
  3384                           intcon2	equ	0xFF1
  3385                           postinc0	equ	0xFEE
  3386                           wreg	equ	0xFE8
  3387                           postdec1	equ	0xFE5
  3388                           plusw1	equ	0xFE3
  3389                           fsr1l	equ	0xFE1
  3390                           indf2	equ	0xFDF
  3391                           plusw2	equ	0xFDB
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _WriteUartMessage *****************
  3397 ;; Defined at:
  3398 ;;		line 85 in file "EusartApp.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  3401 ;;		 -> SendUartSystemInitMessage@TxMsg(30), GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9)
      +, 
  3402 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  3403 ;;  dataSize        2   26[COMRAM] int 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;  idx             2   29[COMRAM] int 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3415 ;;      Params:         4       0       0       0       0       0       0
  3416 ;;      Locals:         2       0       0       0       0       0       0
  3417 ;;      Temps:          1       0       0       0       0       0       0
  3418 ;;      Totals:         7       0       0       0       0       0       0
  3419 ;;Total ram usage:        7 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    4
  3422 ;; This function calls:
  3423 ;;		_EUSART1_Write
  3424 ;; This function is called by:
  3425 ;;		_SendUartSystemInitMessage
  3426 ;;		_SendAckMessage
  3427 ;;		_FlashReadUart
  3428 ;;		_FlashReadCondition
  3429 ;;		_GetMcuFwVersion
  3430 ;;		_GetCpldFwVersion
  3431 ;;		_GetMcuRunTime
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           	psect	text21
  3436  002482                     __ptext21:
  3437                           	opt stack 0
  3438  002482                     _WriteUartMessage:
  3439                           	opt stack 25
  3440                           
  3441                           ;EusartApp.c: 87: for(int idx = 0; idx < dataSize; idx++)
  3442                           
  3443                           ;incstack = 0
  3444  002482  0E00               	movlw	0
  3445  002484  6E1F               	movwf	WriteUartMessage@idx+1,c
  3446  002486  0E00               	movlw	0
  3447  002488  6E1E               	movwf	WriteUartMessage@idx,c
  3448  00248A  D00B               	goto	l184
  3449  00248C                     
  3450                           ;EusartApp.c: 88: {
  3451                           ;EusartApp.c: 89: EUSART1_Write(dataBuf[idx]);
  3452  00248C  501E               	movf	WriteUartMessage@idx,w,c
  3453  00248E  2419               	addwf	WriteUartMessage@dataBuf,w,c
  3454  002490  6ED9               	movwf	fsr2l,c
  3455  002492  501F               	movf	WriteUartMessage@idx+1,w,c
  3456  002494  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  3457  002496  6EDA               	movwf	fsr2h,c
  3458  002498  50DF               	movf	indf2,w,c
  3459  00249A  EC94  F011         	call	_EUSART1_Write
  3460  00249E  4A1E               	infsnz	WriteUartMessage@idx,f,c
  3461  0024A0  2A1F               	incf	WriteUartMessage@idx+1,f,c
  3462  0024A2                     l184:
  3463  0024A2  501B               	movf	WriteUartMessage@dataSize,w,c
  3464  0024A4  5C1E               	subwf	WriteUartMessage@idx,w,c
  3465  0024A6  501F               	movf	WriteUartMessage@idx+1,w,c
  3466  0024A8  0A80               	xorlw	128
  3467  0024AA  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  3468  0024AC  501C               	movf	WriteUartMessage@dataSize+1,w,c
  3469  0024AE  0A80               	xorlw	128
  3470  0024B0  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  3471  0024B2  B0D8               	btfsc	status,0,c
  3472  0024B4  0012               	return	
  3473  0024B6  D7EA               	goto	l185
  3474  0024B8                     __end_of_WriteUartMessage:
  3475                           	opt stack 0
  3476                           tblptru	equ	0xFF8
  3477                           tblptrh	equ	0xFF7
  3478                           tblptrl	equ	0xFF6
  3479                           tablat	equ	0xFF5
  3480                           prodh	equ	0xFF4
  3481                           prodl	equ	0xFF3
  3482                           intcon	equ	0xFF2
  3483                           intcon2	equ	0xFF1
  3484                           postinc0	equ	0xFEE
  3485                           wreg	equ	0xFE8
  3486                           postdec1	equ	0xFE5
  3487                           plusw1	equ	0xFE3
  3488                           fsr1l	equ	0xFE1
  3489                           indf2	equ	0xFDF
  3490                           plusw2	equ	0xFDB
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8
  3494                           
  3495 ;; *************** function _EUSART1_Write *****************
  3496 ;; Defined at:
  3497 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;  txData          1    wreg     unsigned char 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  txData          1   23[COMRAM] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  1    wreg      void 
  3504 ;; Registers used:
  3505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3511 ;;      Params:         0       0       0       0       0       0       0
  3512 ;;      Locals:         1       0       0       0       0       0       0
  3513 ;;      Temps:          0       0       0       0       0       0       0
  3514 ;;      Totals:         1       0       0       0       0       0       0
  3515 ;;Total ram usage:        1 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    3
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_WriteUartMessage
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text22
  3526  002328                     __ptext22:
  3527                           	opt stack 0
  3528  002328                     _EUSART1_Write:
  3529                           	opt stack 25
  3530                           
  3531                           ;incstack = 0
  3532                           ;EUSART1_Write@txData stored from wreg
  3533  002328  6E18               	movwf	EUSART1_Write@txData,c
  3534  00232A                     
  3535                           ;eusart1.c: 160: {
  3536                           
  3537                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  3538  00232A  0100               	movlb	0	; () banked
  3539  00232C  51FB               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  3540  00232E  B4D8               	btfsc	status,2,c
  3541  002330  D7FC               	goto	l6367
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;eusart1.c: 161: }
  3545                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  3546  002332  B89D               	btfsc	3997,4,c	;volatile
  3547  002334  D003               	goto	l825
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;eusart1.c: 164: {
  3551                           ;eusart1.c: 165: TXREG1 = txData;
  3552  002336  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  3553                           
  3554                           ;eusart1.c: 166: }
  3555  00233A  D012               	goto	l826
  3556  00233C                     l825:
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;eusart1.c: 167: else
  3560                           ;eusart1.c: 168: {
  3561                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  3562  00233C  989D               	bcf	3997,4,c	;volatile
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  3566  00233E  503A               	movf	_eusart1TxHead,w,c	;volatile
  3567  002340  0D01               	mullw	1
  3568  002342  0E00               	movlw	low _eusart1TxBuffer
  3569  002344  24F3               	addwf	prodl,w,c
  3570  002346  6ED9               	movwf	fsr2l,c
  3571  002348  0E01               	movlw	high _eusart1TxBuffer
  3572  00234A  20F4               	addwfc	prodh,w,c
  3573  00234C  6EDA               	movwf	fsr2h,c
  3574  00234E  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  3575                           
  3576                           ; BSR set to: 0
  3577  002352  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  3581  002354  0E45               	movlw	69
  3582  002356  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  3583  002358  D002               	goto	l827
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;eusart1.c: 172: {
  3587                           ;eusart1.c: 173: eusart1TxHead = 0;
  3588  00235A  0E00               	movlw	0
  3589  00235C  6E3A               	movwf	_eusart1TxHead,c	;volatile
  3590  00235E                     l827:
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;eusart1.c: 174: }
  3594                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  3595                           
  3596                           ; BSR set to: 0
  3597  00235E  07FB               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  3598  002360                     l826:
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;eusart1.c: 176: }
  3602                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  3603                           
  3604                           ; BSR set to: 0
  3605  002360  889D               	bsf	3997,4,c	;volatile
  3606                           
  3607                           ; BSR set to: 0
  3608  002362  0012               	return		;funcret
  3609  002364                     __end_of_EUSART1_Write:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           intcon	equ	0xFF2
  3618                           intcon2	equ	0xFF1
  3619                           postinc0	equ	0xFEE
  3620                           wreg	equ	0xFE8
  3621                           postdec1	equ	0xFE5
  3622                           plusw1	equ	0xFE3
  3623                           fsr1l	equ	0xFE1
  3624                           indf2	equ	0xFDF
  3625                           plusw2	equ	0xFDB
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _InitSystemApplicationManagers *****************
  3631 ;; Defined at:
  3632 ;;		line 33 in file "SystemSettings.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3646 ;;      Params:         0       0       0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0
  3649 ;;      Totals:         0       0       0       0       0       0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    7
  3653 ;; This function calls:
  3654 ;;		_ClearMcuRunTime
  3655 ;;		_DacInit
  3656 ;;		_InitAdcApplicationMgr
  3657 ;;		_InitSevenSegment
  3658 ;;		_PLLInitialize
  3659 ;;		_TMR0_StartTimer
  3660 ;; This function is called by:
  3661 ;;		_main
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           	psect	text23
  3666  0026AC                     __ptext23:
  3667                           	opt stack 0
  3668  0026AC                     _InitSystemApplicationManagers:
  3669                           	opt stack 23
  3670                           
  3671                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;incstack = 0
  3675  0026AC  EC99  F013         	call	_InitAdcApplicationMgr	;wreg free
  3676                           
  3677                           ;SystemSettings.c: 39: TMR0_StartTimer();
  3678  0026B0  ECBD  F013         	call	_TMR0_StartTimer	;wreg free
  3679                           
  3680                           ;SystemSettings.c: 42: InitSevenSegment();
  3681  0026B4  ECD4  F012         	call	_InitSevenSegment	;wreg free
  3682                           
  3683                           ;SystemSettings.c: 45: PLLInitialize();
  3684  0026B8  EC29  F006         	call	_PLLInitialize	;wreg free
  3685                           
  3686                           ;SystemSettings.c: 48: ClearMcuRunTime();
  3687  0026BC  EC8F  F013         	call	_ClearMcuRunTime	;wreg free
  3688                           
  3689                           ;SystemSettings.c: 51: DacInit();
  3690  0026C0  ECCD  F00E         	call	_DacInit	;wreg free
  3691  0026C4  0012               	return		;funcret
  3692  0026C6                     __end_of_InitSystemApplicationManagers:
  3693                           	opt stack 0
  3694                           tblptru	equ	0xFF8
  3695                           tblptrh	equ	0xFF7
  3696                           tblptrl	equ	0xFF6
  3697                           tablat	equ	0xFF5
  3698                           prodh	equ	0xFF4
  3699                           prodl	equ	0xFF3
  3700                           intcon	equ	0xFF2
  3701                           intcon2	equ	0xFF1
  3702                           postinc0	equ	0xFEE
  3703                           wreg	equ	0xFE8
  3704                           postdec1	equ	0xFE5
  3705                           plusw1	equ	0xFE3
  3706                           fsr1l	equ	0xFE1
  3707                           indf2	equ	0xFDF
  3708                           plusw2	equ	0xFDB
  3709                           fsr2h	equ	0xFDA
  3710                           fsr2l	equ	0xFD9
  3711                           status	equ	0xFD8
  3712                           
  3713 ;; *************** function _TMR0_StartTimer *****************
  3714 ;; Defined at:
  3715 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  3716 ;; Parameters:    Size  Location     Type
  3717 ;;		None
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;		None
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      void 
  3722 ;; Registers used:
  3723 ;;		None
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3729 ;;      Params:         0       0       0       0       0       0       0
  3730 ;;      Locals:         0       0       0       0       0       0       0
  3731 ;;      Temps:          0       0       0       0       0       0       0
  3732 ;;      Totals:         0       0       0       0       0       0       0
  3733 ;;Total ram usage:        0 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    3
  3736 ;; This function calls:
  3737 ;;		Nothing
  3738 ;; This function is called by:
  3739 ;;		_InitSystemApplicationManagers
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           	psect	text24
  3744  00277A                     __ptext24:
  3745                           	opt stack 0
  3746  00277A                     _TMR0_StartTimer:
  3747                           	opt stack 26
  3748                           
  3749                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  3750                           
  3751                           ;incstack = 0
  3752  00277A  8ED5               	bsf	4053,7,c	;volatile
  3753  00277C  0012               	return		;funcret
  3754  00277E                     __end_of_TMR0_StartTimer:
  3755                           	opt stack 0
  3756                           tblptru	equ	0xFF8
  3757                           tblptrh	equ	0xFF7
  3758                           tblptrl	equ	0xFF6
  3759                           tablat	equ	0xFF5
  3760                           prodh	equ	0xFF4
  3761                           prodl	equ	0xFF3
  3762                           intcon	equ	0xFF2
  3763                           intcon2	equ	0xFF1
  3764                           postinc0	equ	0xFEE
  3765                           wreg	equ	0xFE8
  3766                           postdec1	equ	0xFE5
  3767                           plusw1	equ	0xFE3
  3768                           fsr1l	equ	0xFE1
  3769                           indf2	equ	0xFDF
  3770                           plusw2	equ	0xFDB
  3771                           fsr2h	equ	0xFDA
  3772                           fsr2l	equ	0xFD9
  3773                           status	equ	0xFD8
  3774                           
  3775 ;; *************** function _PLLInitialize *****************
  3776 ;; Defined at:
  3777 ;;		line 14 in file "SyntApp.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;		None
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  idx             2   45[COMRAM] int 
  3782 ;;  idx             2   43[COMRAM] int 
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  1    wreg      void 
  3785 ;; Registers used:
  3786 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3792 ;;      Params:         0       0       0       0       0       0       0
  3793 ;;      Locals:         4       0       0       0       0       0       0
  3794 ;;      Temps:          2       0       0       0       0       0       0
  3795 ;;      Totals:         6       0       0       0       0       0       0
  3796 ;;Total ram usage:        6 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    6
  3799 ;; This function calls:
  3800 ;;		_SWSPI_send_word
  3801 ;;		_SwSpi_Set_CE_Pin
  3802 ;; This function is called by:
  3803 ;;		_InitSystemApplicationManagers
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           	psect	text25
  3808  000C52                     __ptext25:
  3809                           	opt stack 0
  3810  000C52                     _PLLInitialize:
  3811                           	opt stack 23
  3812                           
  3813                           ;SyntApp.c: 17: IOCB = 0b10000000;
  3814                           
  3815                           ;incstack = 0
  3816  000C52  0E80               	movlw	128
  3817  000C54  6E62               	movwf	3938,c	;volatile
  3818                           
  3819                           ;SyntApp.c: 20: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  3820  000C56  0E01               	movlw	1
  3821  000C58  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  3822  000C5A  0E00               	movlw	0
  3823  000C5C  ECB2  F011         	call	_SwSpi_Set_CE_Pin
  3824                           
  3825                           ;SyntApp.c: 24: for(int idx = 0; idx < 13; idx++)
  3826  000C60  0E00               	movlw	0
  3827  000C62  6E2D               	movwf	PLLInitialize@idx+1,c
  3828  000C64  0E00               	movlw	0
  3829  000C66  6E2C               	movwf	PLLInitialize@idx,c
  3830  000C68                     l5081:
  3831  000C68  BE2D               	btfsc	PLLInitialize@idx+1,7,c
  3832  000C6A  D006               	goto	l474
  3833  000C6C  502D               	movf	PLLInitialize@idx+1,w,c
  3834  000C6E  E128               	bnz	l5091
  3835  000C70  0E0D               	movlw	13
  3836  000C72  5C2C               	subwf	PLLInitialize@idx,w,c
  3837  000C74  B0D8               	btfsc	status,0,c
  3838  000C76  D024               	goto	u3990
  3839  000C78                     l474:
  3840                           
  3841                           ;SyntApp.c: 25: {
  3842                           ;SyntApp.c: 26: SWSPI_send_word(SYNTH_TX, TEST_PLL_REGISTERS[idx], 3);
  3843  000C78  C02C  F02A         	movff	PLLInitialize@idx,??_PLLInitialize
  3844  000C7C  C02D  F02B         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
  3845  000C80  90D8               	bcf	status,0,c
  3846  000C82  362A               	rlcf	??_PLLInitialize,f,c
  3847  000C84  362B               	rlcf	??_PLLInitialize+1,f,c
  3848  000C86  90D8               	bcf	status,0,c
  3849  000C88  362A               	rlcf	??_PLLInitialize,f,c
  3850  000C8A  362B               	rlcf	??_PLLInitialize+1,f,c
  3851  000C8C  0E01               	movlw	low _TEST_PLL_REGISTERS
  3852  000C8E  242A               	addwf	??_PLLInitialize,w,c
  3853  000C90  6EF6               	movwf	tblptrl,c
  3854  000C92  0E06               	movlw	high _TEST_PLL_REGISTERS
  3855  000C94  202B               	addwfc	??_PLLInitialize+1,w,c
  3856  000C96  6EF7               	movwf	tblptrh,c
  3857  000C98                     	if	0	;There are less than 3 active tblptr bytes
  3858  000C98                     	endif
  3859  000C98  0009               	tblrd		*+
  3860  000C9A  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  3861  000C9E  0009               	tblrd		*+
  3862  000CA0  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  3863  000CA4  0009               	tblrd		*+
  3864  000CA6  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  3865  000CAA  000A               	tblrd		*-
  3866  000CAC  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  3867  000CB0  0E03               	movlw	3
  3868  000CB2  6E25               	movwf	SWSPI_send_word@dataSize,c
  3869  000CB4  0E00               	movlw	0
  3870  000CB6  EC32  F00C         	call	_SWSPI_send_word
  3871  000CBA  4A2C               	infsnz	PLLInitialize@idx,f,c
  3872  000CBC  2A2D               	incf	PLLInitialize@idx+1,f,c
  3873  000CBE  D7D4               	goto	l5081
  3874  000CC0                     u3990:
  3875  000CC0                     l5091:
  3876                           
  3877                           ;SyntApp.c: 27: }
  3878                           ;SyntApp.c: 36: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
  3879  000CC0  0E01               	movlw	1
  3880  000CC2  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  3881  000CC4  0E01               	movlw	1
  3882  000CC6  ECB2  F011         	call	_SwSpi_Set_CE_Pin
  3883                           
  3884                           ;SyntApp.c: 39: for(int idx = 0; idx < 13; idx++)
  3885  000CCA  0E00               	movlw	0
  3886  000CCC  6E2F               	movwf	PLLInitialize@idx_807+1,c
  3887  000CCE  0E00               	movlw	0
  3888  000CD0  6E2E               	movwf	PLLInitialize@idx_807,c
  3889  000CD2                     l5095:
  3890  000CD2  BE2F               	btfsc	PLLInitialize@idx_807+1,7,c
  3891  000CD4  D006               	goto	l476
  3892  000CD6  502F               	movf	PLLInitialize@idx_807+1,w,c
  3893  000CD8  E128               	bnz	l5105
  3894  000CDA  0E0D               	movlw	13
  3895  000CDC  5C2E               	subwf	PLLInitialize@idx_807,w,c
  3896  000CDE  B0D8               	btfsc	status,0,c
  3897  000CE0  D024               	goto	u4010
  3898  000CE2                     l476:
  3899                           
  3900                           ;SyntApp.c: 40: {
  3901                           ;SyntApp.c: 41: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
  3902  000CE2  C02E  F02A         	movff	PLLInitialize@idx_807,??_PLLInitialize
  3903  000CE6  C02F  F02B         	movff	PLLInitialize@idx_807+1,??_PLLInitialize+1
  3904  000CEA  90D8               	bcf	status,0,c
  3905  000CEC  362A               	rlcf	??_PLLInitialize,f,c
  3906  000CEE  362B               	rlcf	??_PLLInitialize+1,f,c
  3907  000CF0  90D8               	bcf	status,0,c
  3908  000CF2  362A               	rlcf	??_PLLInitialize,f,c
  3909  000CF4  362B               	rlcf	??_PLLInitialize+1,f,c
  3910  000CF6  0E35               	movlw	low _PLL_INIT_REGISTERS
  3911  000CF8  242A               	addwf	??_PLLInitialize,w,c
  3912  000CFA  6EF6               	movwf	tblptrl,c
  3913  000CFC  0E06               	movlw	high _PLL_INIT_REGISTERS
  3914  000CFE  202B               	addwfc	??_PLLInitialize+1,w,c
  3915  000D00  6EF7               	movwf	tblptrh,c
  3916  000D02                     	if	0	;There are less than 3 active tblptr bytes
  3917  000D02                     	endif
  3918  000D02  0009               	tblrd		*+
  3919  000D04  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  3920  000D08  0009               	tblrd		*+
  3921  000D0A  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  3922  000D0E  0009               	tblrd		*+
  3923  000D10  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  3924  000D14  000A               	tblrd		*-
  3925  000D16  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  3926  000D1A  0E03               	movlw	3
  3927  000D1C  6E25               	movwf	SWSPI_send_word@dataSize,c
  3928  000D1E  0E01               	movlw	1
  3929  000D20  EC32  F00C         	call	_SWSPI_send_word
  3930  000D24  4A2E               	infsnz	PLLInitialize@idx_807,f,c
  3931  000D26  2A2F               	incf	PLLInitialize@idx_807+1,f,c
  3932  000D28  D7D4               	goto	l5095
  3933  000D2A                     u4010:
  3934  000D2A                     l5105:
  3935                           
  3936                           ;SyntApp.c: 42: }
  3937                           ;SyntApp.c: 45: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
  3938  000D2A  0E45               	movlw	low (_PLL_INIT_REGISTERS+16)
  3939  000D2C  6EF6               	movwf	tblptrl,c
  3940  000D2E  0E06               	movlw	high (_PLL_INIT_REGISTERS+16)
  3941  000D30  6EF7               	movwf	tblptrh,c
  3942  000D32                     	if	0	;tblptru may be non-zero
  3943  000D32                     	endif
  3944  000D32                     	if	0	;tblptru may be non-zero
  3945  000D32                     	endif
  3946  000D32  0009               	tblrd		*+
  3947  000D34  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  3948  000D38  0009               	tblrd		*+
  3949  000D3A  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  3950  000D3E  0009               	tblrd		*+
  3951  000D40  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  3952  000D44  000A               	tblrd		*-
  3953  000D46  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  3954  000D4A  0E03               	movlw	3
  3955  000D4C  6E25               	movwf	SWSPI_send_word@dataSize,c
  3956  000D4E  0E01               	movlw	1
  3957  000D50  EC32  F00C         	call	_SWSPI_send_word
  3958                           
  3959                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
  3960  000D54  0E3D               	movlw	low (_PLL_INIT_REGISTERS+8)
  3961  000D56  6EF6               	movwf	tblptrl,c
  3962  000D58  0E06               	movlw	high (_PLL_INIT_REGISTERS+8)
  3963  000D5A  6EF7               	movwf	tblptrh,c
  3964  000D5C                     	if	0	;tblptru may be non-zero
  3965  000D5C                     	endif
  3966  000D5C                     	if	0	;tblptru may be non-zero
  3967  000D5C                     	endif
  3968  000D5C  0009               	tblrd		*+
  3969  000D5E  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  3970  000D62  0009               	tblrd		*+
  3971  000D64  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  3972  000D68  0009               	tblrd		*+
  3973  000D6A  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  3974  000D6E  000A               	tblrd		*-
  3975  000D70  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  3976  000D74  0E03               	movlw	3
  3977  000D76  6E25               	movwf	SWSPI_send_word@dataSize,c
  3978  000D78  0E01               	movlw	1
  3979  000D7A  EC32  F00C         	call	_SWSPI_send_word
  3980                           
  3981                           ;SyntApp.c: 47: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
  3982  000D7E  0E39               	movlw	low (_PLL_INIT_REGISTERS+4)
  3983  000D80  6EF6               	movwf	tblptrl,c
  3984  000D82  0E06               	movlw	high (_PLL_INIT_REGISTERS+4)
  3985  000D84  6EF7               	movwf	tblptrh,c
  3986  000D86                     	if	0	;tblptru may be non-zero
  3987  000D86                     	endif
  3988  000D86                     	if	0	;tblptru may be non-zero
  3989  000D86                     	endif
  3990  000D86  0009               	tblrd		*+
  3991  000D88  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  3992  000D8C  0009               	tblrd		*+
  3993  000D8E  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  3994  000D92  0009               	tblrd		*+
  3995  000D94  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  3996  000D98  000A               	tblrd		*-
  3997  000D9A  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  3998  000D9E  0E03               	movlw	3
  3999  000DA0  6E25               	movwf	SWSPI_send_word@dataSize,c
  4000  000DA2  0E01               	movlw	1
  4001  000DA4  EC32  F00C         	call	_SWSPI_send_word
  4002                           
  4003                           ;SyntApp.c: 48: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
  4004  000DA8  0E35               	movlw	low _PLL_INIT_REGISTERS
  4005  000DAA  6EF6               	movwf	tblptrl,c
  4006  000DAC                     	if	1	;There is more than 1 active tblptr byte
  4007  000DAC  0E06               	movlw	high _PLL_INIT_REGISTERS
  4008  000DAE  6EF7               	movwf	tblptrh,c
  4009  000DB0                     	endif
  4010  000DB0                     	if	0	;There are less than 3 active tblptr bytes
  4011  000DB0                     	endif
  4012  000DB0  0009               	tblrd		*+
  4013  000DB2  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  4014  000DB6  0009               	tblrd		*+
  4015  000DB8  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  4016  000DBC  0009               	tblrd		*+
  4017  000DBE  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  4018  000DC2  000A               	tblrd		*-
  4019  000DC4  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  4020  000DC8  0E03               	movlw	3
  4021  000DCA  6E25               	movwf	SWSPI_send_word@dataSize,c
  4022  000DCC  0E01               	movlw	1
  4023  000DCE  EC32  F00C         	call	_SWSPI_send_word
  4024  000DD2  0012               	return		;funcret
  4025  000DD4                     __end_of_PLLInitialize:
  4026                           	opt stack 0
  4027                           tblptru	equ	0xFF8
  4028                           tblptrh	equ	0xFF7
  4029                           tblptrl	equ	0xFF6
  4030                           tablat	equ	0xFF5
  4031                           prodh	equ	0xFF4
  4032                           prodl	equ	0xFF3
  4033                           intcon	equ	0xFF2
  4034                           intcon2	equ	0xFF1
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           postdec1	equ	0xFE5
  4038                           plusw1	equ	0xFE3
  4039                           fsr1l	equ	0xFE1
  4040                           indf2	equ	0xFDF
  4041                           plusw2	equ	0xFDB
  4042                           fsr2h	equ	0xFDA
  4043                           fsr2l	equ	0xFD9
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function _SwSpi_Set_CE_Pin *****************
  4047 ;; Defined at:
  4048 ;;		line 221 in file "SwSpiApp.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  phrType         1    wreg     enum E7563
  4051 ;;  cPinMode        1   23[COMRAM] unsigned char 
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  phrType         1   24[COMRAM] enum E7563
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  1    wreg      void 
  4056 ;; Registers used:
  4057 ;;		wreg, status,2, status,0
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4063 ;;      Params:         1       0       0       0       0       0       0
  4064 ;;      Locals:         1       0       0       0       0       0       0
  4065 ;;      Temps:          0       0       0       0       0       0       0
  4066 ;;      Totals:         2       0       0       0       0       0       0
  4067 ;;Total ram usage:        2 bytes
  4068 ;; Hardware stack levels used:    1
  4069 ;; Hardware stack levels required when called:    3
  4070 ;; This function calls:
  4071 ;;		Nothing
  4072 ;; This function is called by:
  4073 ;;		_PLLInitialize
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text26
  4078  002364                     __ptext26:
  4079                           	opt stack 0
  4080  002364                     _SwSpi_Set_CE_Pin:
  4081                           	opt stack 25
  4082                           
  4083                           ;incstack = 0
  4084                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  4085  002364  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  4086                           
  4087                           ;SwSpiApp.c: 223: switch(phrType)
  4088  002366  D014               	goto	l644
  4089  002368                     
  4090                           ;SwSpiApp.c: 226: if(cPinMode == 1)
  4091  002368  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  4092  00236A  A4D8               	btfss	status,2,c
  4093  00236C  D002               	goto	l646
  4094                           
  4095                           ;SwSpiApp.c: 227: {
  4096                           ;SwSpiApp.c: 228: do { LATCbits.LATC1 = 1; } while(0);
  4097  00236E  828B               	bsf	3979,1,c	;volatile
  4098                           
  4099                           ;SwSpiApp.c: 229: }
  4100  002370  0012               	return	
  4101  002372                     l646:
  4102                           
  4103                           ;SwSpiApp.c: 230: else if(cPinMode == 0)
  4104  002372  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  4105  002374  A4D8               	btfss	status,2,c
  4106  002376  0012               	return	
  4107                           
  4108                           ;SwSpiApp.c: 231: {
  4109                           ;SwSpiApp.c: 232: do { LATCbits.LATC1 = 0; } while(0);
  4110  002378  928B               	bcf	3979,1,c	;volatile
  4111                           
  4112                           ;SwSpiApp.c: 233: }
  4113                           ;SwSpiApp.c: 234: break;
  4114  00237A  0012               	return	
  4115  00237C                     
  4116                           ;SwSpiApp.c: 237: if(cPinMode == 1)
  4117  00237C  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  4118  00237E  A4D8               	btfss	status,2,c
  4119  002380  D002               	goto	l655
  4120                           
  4121                           ;SwSpiApp.c: 238: {
  4122                           ;SwSpiApp.c: 239: do { LATDbits.LATD2 = 1; } while(0);
  4123  002382  848C               	bsf	3980,2,c	;volatile
  4124                           
  4125                           ;SwSpiApp.c: 240: }
  4126  002384  0012               	return	
  4127  002386                     l655:
  4128                           
  4129                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
  4130  002386  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  4131  002388  A4D8               	btfss	status,2,c
  4132  00238A  0012               	return	
  4133                           
  4134                           ;SwSpiApp.c: 242: {
  4135                           ;SwSpiApp.c: 243: do { LATCbits.LATC1 = 0; } while(0);
  4136  00238C  928B               	bcf	3979,1,c	;volatile
  4137                           
  4138                           ;SwSpiApp.c: 246: }
  4139                           
  4140                           ;SwSpiApp.c: 244: }
  4141                           ;SwSpiApp.c: 245: break;
  4142  00238E  0012               	return	
  4143  002390                     l644:
  4144  002390  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
  4145                           
  4146                           ; Switch size 1, requested type "space"
  4147                           ; Number of cases is 2, Range of values is 0 to 1
  4148                           ; switch strategies available:
  4149                           ; Name         Instructions Cycles
  4150                           ; simple_byte            7     4 (average)
  4151                           ;	Chosen strategy is simple_byte
  4152  002392  0A00               	xorlw	0	; case 0
  4153  002394  B4D8               	btfsc	status,2,c
  4154  002396  D7E8               	goto	l645
  4155  002398  0A01               	xorlw	1	; case 1
  4156  00239A  A4D8               	btfss	status,2,c
  4157  00239C  0012               	return	
  4158  00239E  D7EE               	goto	l654
  4159  0023A0                     __end_of_SwSpi_Set_CE_Pin:
  4160                           	opt stack 0
  4161                           tblptru	equ	0xFF8
  4162                           tblptrh	equ	0xFF7
  4163                           tblptrl	equ	0xFF6
  4164                           tablat	equ	0xFF5
  4165                           prodh	equ	0xFF4
  4166                           prodl	equ	0xFF3
  4167                           intcon	equ	0xFF2
  4168                           intcon2	equ	0xFF1
  4169                           postinc0	equ	0xFEE
  4170                           wreg	equ	0xFE8
  4171                           postdec1	equ	0xFE5
  4172                           plusw1	equ	0xFE3
  4173                           fsr1l	equ	0xFE1
  4174                           indf2	equ	0xFDF
  4175                           plusw2	equ	0xFDB
  4176                           fsr2h	equ	0xFDA
  4177                           fsr2l	equ	0xFD9
  4178                           status	equ	0xFD8
  4179                           
  4180 ;; *************** function _InitSevenSegment *****************
  4181 ;; Defined at:
  4182 ;;		line 14 in file "SevenSegmentApp.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;		None
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  1    wreg      void 
  4189 ;; Registers used:
  4190 ;;		wreg, status,2
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4196 ;;      Params:         0       0       0       0       0       0       0
  4197 ;;      Locals:         0       0       0       0       0       0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0
  4199 ;;      Totals:         0       0       0       0       0       0       0
  4200 ;;Total ram usage:        0 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    3
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_InitSystemApplicationManagers
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text27
  4211  0025A8                     __ptext27:
  4212                           	opt stack 0
  4213  0025A8                     _InitSevenSegment:
  4214                           	opt stack 26
  4215                           
  4216                           ;SevenSegmentApp.c: 16: ANSELA = 0;
  4217                           
  4218                           ;incstack = 0
  4219  0025A8  0E00               	movlw	0
  4220  0025AA  010F               	movlb	15	; () banked
  4221  0025AC  6F38               	movwf	56,b	;volatile
  4222                           
  4223                           ;SevenSegmentApp.c: 17: ANSELD = 0;
  4224  0025AE  0E00               	movlw	0
  4225  0025B0  6F3B               	movwf	59,b	;volatile
  4226                           
  4227                           ;SevenSegmentApp.c: 19: TRISA = 0;
  4228  0025B2  0E00               	movlw	0
  4229  0025B4  6E92               	movwf	3986,c	;volatile
  4230                           
  4231                           ;SevenSegmentApp.c: 20: LATA = 0;
  4232  0025B6  0E00               	movlw	0
  4233  0025B8  6E89               	movwf	3977,c	;volatile
  4234                           
  4235                           ;SevenSegmentApp.c: 21: TRISD = 0;
  4236  0025BA  0E00               	movlw	0
  4237  0025BC  6E95               	movwf	3989,c	;volatile
  4238                           
  4239                           ;SevenSegmentApp.c: 22: LATD = 0;
  4240  0025BE  0E00               	movlw	0
  4241  0025C0  6E8C               	movwf	3980,c	;volatile
  4242                           
  4243                           ;SevenSegmentApp.c: 24: cnt = 1;
  4244  0025C2  0E00               	movlw	0
  4245  0025C4  0100               	movlb	0	; () banked
  4246  0025C6  6FFA               	movwf	(_cnt+1)& (0+255),b
  4247  0025C8  0E01               	movlw	1
  4248  0025CA  6FF9               	movwf	_cnt& (0+255),b
  4249                           
  4250                           ; BSR set to: 0
  4251  0025CC  0012               	return		;funcret
  4252  0025CE                     __end_of_InitSevenSegment:
  4253                           	opt stack 0
  4254                           tblptru	equ	0xFF8
  4255                           tblptrh	equ	0xFF7
  4256                           tblptrl	equ	0xFF6
  4257                           tablat	equ	0xFF5
  4258                           prodh	equ	0xFF4
  4259                           prodl	equ	0xFF3
  4260                           intcon	equ	0xFF2
  4261                           intcon2	equ	0xFF1
  4262                           postinc0	equ	0xFEE
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           plusw1	equ	0xFE3
  4266                           fsr1l	equ	0xFE1
  4267                           indf2	equ	0xFDF
  4268                           plusw2	equ	0xFDB
  4269                           fsr2h	equ	0xFDA
  4270                           fsr2l	equ	0xFD9
  4271                           status	equ	0xFD8
  4272                           
  4273 ;; *************** function _InitAdcApplicationMgr *****************
  4274 ;; Defined at:
  4275 ;;		line 22 in file "AdcApp.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;		None
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  channel         1   23[COMRAM] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  1    wreg      void 
  4282 ;; Registers used:
  4283 ;;		wreg, status,2
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4289 ;;      Params:         0       0       0       0       0       0       0
  4290 ;;      Locals:         1       0       0       0       0       0       0
  4291 ;;      Temps:          0       0       0       0       0       0       0
  4292 ;;      Totals:         1       0       0       0       0       0       0
  4293 ;;Total ram usage:        1 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    3
  4296 ;; This function calls:
  4297 ;;		Nothing
  4298 ;; This function is called by:
  4299 ;;		_InitSystemApplicationManagers
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           	psect	text28
  4304  002732                     __ptext28:
  4305                           	opt stack 0
  4306  002732                     _InitAdcApplicationMgr:
  4307                           	opt stack 26
  4308                           
  4309                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;incstack = 0
  4313  002732  0E00               	movlw	0
  4314  002734  0100               	movlb	0	; () banked
  4315  002736  6FCD               	movwf	_conversionFormat& (0+255),b
  4316                           
  4317                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
  4318  002738  0E00               	movlw	0
  4319  00273A  6FCC               	movwf	_adcSampleMode& (0+255),b
  4320                           
  4321                           ;AdcApp.c: 26: char channel = 0;
  4322  00273C  0E00               	movlw	0
  4323  00273E  6E18               	movwf	InitAdcApplicationMgr@channel,c
  4324                           
  4325                           ; BSR set to: 0
  4326  002740  0012               	return		;funcret
  4327  002742                     __end_of_InitAdcApplicationMgr:
  4328                           	opt stack 0
  4329                           tblptru	equ	0xFF8
  4330                           tblptrh	equ	0xFF7
  4331                           tblptrl	equ	0xFF6
  4332                           tablat	equ	0xFF5
  4333                           prodh	equ	0xFF4
  4334                           prodl	equ	0xFF3
  4335                           intcon	equ	0xFF2
  4336                           intcon2	equ	0xFF1
  4337                           postinc0	equ	0xFEE
  4338                           wreg	equ	0xFE8
  4339                           postdec1	equ	0xFE5
  4340                           plusw1	equ	0xFE3
  4341                           fsr1l	equ	0xFE1
  4342                           indf2	equ	0xFDF
  4343                           plusw2	equ	0xFDB
  4344                           fsr2h	equ	0xFDA
  4345                           fsr2l	equ	0xFD9
  4346                           status	equ	0xFD8
  4347                           
  4348 ;; *************** function _DacInit *****************
  4349 ;; Defined at:
  4350 ;;		line 24 in file "DacApp.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;		None
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;		None
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      void 
  4357 ;; Registers used:
  4358 ;;		wreg, status,2, status,0, cstack
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4364 ;;      Params:         0       0       0       0       0       0       0
  4365 ;;      Locals:         0       0       0       0       0       0       0
  4366 ;;      Temps:          0       0       0       0       0       0       0
  4367 ;;      Totals:         0       0       0       0       0       0       0
  4368 ;;Total ram usage:        0 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    6
  4371 ;; This function calls:
  4372 ;;		_SWSPI_send_word
  4373 ;; This function is called by:
  4374 ;;		_InitSystemApplicationManagers
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text29
  4379  001D9A                     __ptext29:
  4380                           	opt stack 0
  4381  001D9A                     _DacInit:
  4382                           	opt stack 23
  4383                           
  4384                           ;DacApp.c: 26: SWSPI_send_word(EXT_DAC, (0x2344), 1);
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;incstack = 0
  4388  001D9A  0E44               	movlw	68
  4389  001D9C  6E21               	movwf	SWSPI_send_word@data,c
  4390  001D9E  0E23               	movlw	35
  4391  001DA0  6E22               	movwf	SWSPI_send_word@data+1,c
  4392  001DA2  0E00               	movlw	0
  4393  001DA4  6E23               	movwf	SWSPI_send_word@data+2,c
  4394  001DA6  0E00               	movlw	0
  4395  001DA8  6E24               	movwf	SWSPI_send_word@data+3,c
  4396  001DAA  0E01               	movlw	1
  4397  001DAC  6E25               	movwf	SWSPI_send_word@dataSize,c
  4398  001DAE  0E02               	movlw	2
  4399  001DB0  EC32  F00C         	call	_SWSPI_send_word
  4400                           
  4401                           ;DacApp.c: 27: SWSPI_send_word(EXT_DAC, (0x6344), 1);
  4402  001DB4  0E44               	movlw	68
  4403  001DB6  6E21               	movwf	SWSPI_send_word@data,c
  4404  001DB8  0E63               	movlw	99
  4405  001DBA  6E22               	movwf	SWSPI_send_word@data+1,c
  4406  001DBC  0E00               	movlw	0
  4407  001DBE  6E23               	movwf	SWSPI_send_word@data+2,c
  4408  001DC0  0E00               	movlw	0
  4409  001DC2  6E24               	movwf	SWSPI_send_word@data+3,c
  4410  001DC4  0E01               	movlw	1
  4411  001DC6  6E25               	movwf	SWSPI_send_word@dataSize,c
  4412  001DC8  0E02               	movlw	2
  4413  001DCA  EC32  F00C         	call	_SWSPI_send_word
  4414                           
  4415                           ;DacApp.c: 28: SWSPI_send_word(EXT_DAC, (0xA344), 1);
  4416  001DCE  0E44               	movlw	68
  4417  001DD0  6E21               	movwf	SWSPI_send_word@data,c
  4418  001DD2  0EA3               	movlw	163
  4419  001DD4  6E22               	movwf	SWSPI_send_word@data+1,c
  4420  001DD6  0E00               	movlw	0
  4421  001DD8  6E23               	movwf	SWSPI_send_word@data+2,c
  4422  001DDA  0E00               	movlw	0
  4423  001DDC  6E24               	movwf	SWSPI_send_word@data+3,c
  4424  001DDE  0E01               	movlw	1
  4425  001DE0  6E25               	movwf	SWSPI_send_word@dataSize,c
  4426  001DE2  0E02               	movlw	2
  4427  001DE4  EC32  F00C         	call	_SWSPI_send_word
  4428                           
  4429                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0xE344), 1);
  4430  001DE8  0E44               	movlw	68
  4431  001DEA  6E21               	movwf	SWSPI_send_word@data,c
  4432  001DEC  0EE3               	movlw	227
  4433  001DEE  6E22               	movwf	SWSPI_send_word@data+1,c
  4434  001DF0  0E00               	movlw	0
  4435  001DF2  6E23               	movwf	SWSPI_send_word@data+2,c
  4436  001DF4  0E00               	movlw	0
  4437  001DF6  6E24               	movwf	SWSPI_send_word@data+3,c
  4438  001DF8  0E01               	movlw	1
  4439  001DFA  6E25               	movwf	SWSPI_send_word@dataSize,c
  4440  001DFC  0E02               	movlw	2
  4441  001DFE  EC32  F00C         	call	_SWSPI_send_word
  4442  001E02  0012               	return		;funcret
  4443  001E04                     __end_of_DacInit:
  4444                           	opt stack 0
  4445                           tblptru	equ	0xFF8
  4446                           tblptrh	equ	0xFF7
  4447                           tblptrl	equ	0xFF6
  4448                           tablat	equ	0xFF5
  4449                           prodh	equ	0xFF4
  4450                           prodl	equ	0xFF3
  4451                           intcon	equ	0xFF2
  4452                           intcon2	equ	0xFF1
  4453                           postinc0	equ	0xFEE
  4454                           wreg	equ	0xFE8
  4455                           postdec1	equ	0xFE5
  4456                           plusw1	equ	0xFE3
  4457                           fsr1l	equ	0xFE1
  4458                           indf2	equ	0xFDF
  4459                           plusw2	equ	0xFDB
  4460                           fsr2h	equ	0xFDA
  4461                           fsr2l	equ	0xFD9
  4462                           status	equ	0xFD8
  4463                           
  4464 ;; *************** function _SWSPI_send_word *****************
  4465 ;; Defined at:
  4466 ;;		line 17 in file "SwSpiApp.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;  phrType         1    wreg     enum E7563
  4469 ;;  data            4   32[COMRAM] unsigned long 
  4470 ;;  dataSize        1   36[COMRAM] unsigned char 
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;  phrType         1   40[COMRAM] enum E7563
  4473 ;;  datac           1   37[COMRAM] unsigned char 
  4474 ;;  idx             2   38[COMRAM] int 
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      void 
  4477 ;; Registers used:
  4478 ;;		wreg, status,2, status,0, cstack
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4484 ;;      Params:         5       0       0       0       0       0       0
  4485 ;;      Locals:         4       0       0       0       0       0       0
  4486 ;;      Temps:          0       0       0       0       0       0       0
  4487 ;;      Totals:         9       0       0       0       0       0       0
  4488 ;;Total ram usage:        9 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    5
  4491 ;; This function calls:
  4492 ;;		_SWSPI_DAC_send_bits
  4493 ;;		_SWSPI_Synth_send_bits
  4494 ;;		_SwSpi_Set_Dac_Sync_Pin
  4495 ;;		_SwSpi_Set_Synth_Le_Pin
  4496 ;;		_make8
  4497 ;; This function is called by:
  4498 ;;		_DacInit
  4499 ;;		_PLLInitialize
  4500 ;;		_DacSetValue
  4501 ;;		_UpdateTxFreq
  4502 ;;		_UpdateRxFreq
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           	psect	text30
  4507  001864                     __ptext30:
  4508                           	opt stack 0
  4509  001864                     _SWSPI_send_word:
  4510                           	opt stack 23
  4511                           
  4512                           ;incstack = 0
  4513                           ;SWSPI_send_word@phrType stored from wreg
  4514  001864  6E29               	movwf	SWSPI_send_word@phrType,c
  4515                           
  4516                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
  4517  001866  9EF2               	bcf	intcon,7,c	;volatile
  4518                           
  4519                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  4520  001868  5029               	movf	SWSPI_send_word@phrType,w,c
  4521  00186A  B4D8               	btfsc	status,2,c
  4522  00186C  D003               	goto	u3540
  4523  00186E  0429               	decf	SWSPI_send_word@phrType,w,c
  4524  001870  A4D8               	btfss	status,2,c
  4525  001872  D005               	goto	l543
  4526  001874                     u3540:
  4527                           
  4528                           ;SwSpiApp.c: 24: {
  4529                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
  4530  001874  0E00               	movlw	0
  4531  001876  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  4532  001878  5029               	movf	SWSPI_send_word@phrType,w,c
  4533  00187A  ECD0  F011         	call	_SwSpi_Set_Synth_Le_Pin
  4534  00187E                     l543:
  4535                           
  4536                           ;SwSpiApp.c: 26: }
  4537                           ;SwSpiApp.c: 27: if(phrType == EXT_DAC)
  4538  00187E  0E02               	movlw	2
  4539  001880  1829               	xorwf	SWSPI_send_word@phrType,w,c
  4540  001882  A4D8               	btfss	status,2,c
  4541  001884  D003               	goto	l546
  4542                           
  4543                           ;SwSpiApp.c: 28: {
  4544                           ;SwSpiApp.c: 29: SwSpi_Set_Dac_Sync_Pin(0);
  4545  001886  0E00               	movlw	0
  4546  001888  EC3B  F013         	call	_SwSpi_Set_Dac_Sync_Pin
  4547  00188C                     l546:
  4548                           
  4549                           ;SwSpiApp.c: 30: }
  4550                           ;SwSpiApp.c: 35: for(int idx = dataSize + 1; idx > 0; idx--)
  4551  00188C  0E01               	movlw	1
  4552  00188E  2425               	addwf	SWSPI_send_word@dataSize,w,c
  4553  001890  6E27               	movwf	SWSPI_send_word@idx,c
  4554  001892  6A28               	clrf	SWSPI_send_word@idx+1,c
  4555  001894  0E00               	movlw	0
  4556  001896  2228               	addwfc	SWSPI_send_word@idx+1,f,c
  4557  001898                     l4787:
  4558  001898  BE28               	btfsc	SWSPI_send_word@idx+1,7,c
  4559  00189A  D02B               	goto	u3600
  4560  00189C  5028               	movf	SWSPI_send_word@idx+1,w,c
  4561  00189E  E103               	bnz	l4791
  4562  0018A0  0427               	decf	SWSPI_send_word@idx,w,c
  4563  0018A2  A0D8               	btfss	status,0,c
  4564  0018A4  D026               	goto	u3600
  4565  0018A6                     l4791:
  4566                           
  4567                           ;SwSpiApp.c: 36: {
  4568                           ;SwSpiApp.c: 37: uint8_t datac = make8(data, idx - 1);
  4569  0018A6  C021  F018         	movff	SWSPI_send_word@data,make8@data
  4570  0018AA  C022  F019         	movff	SWSPI_send_word@data+1,make8@data+1
  4571  0018AE  C023  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
  4572  0018B2  C024  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
  4573  0018B6  0427               	decf	SWSPI_send_word@idx,w,c
  4574  0018B8  6E1C               	movwf	make8@dataLocation,c
  4575  0018BA  EC93  F00F         	call	_make8	;wreg free
  4576  0018BE  6E26               	movwf	SWSPI_send_word@datac,c
  4577                           
  4578                           ;SwSpiApp.c: 39: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  4579  0018C0  5029               	movf	SWSPI_send_word@phrType,w,c
  4580  0018C2  B4D8               	btfsc	status,2,c
  4581  0018C4  D003               	goto	u3580
  4582  0018C6  0429               	decf	SWSPI_send_word@phrType,w,c
  4583  0018C8  A4D8               	btfss	status,2,c
  4584  0018CA  D006               	goto	l549
  4585  0018CC                     u3580:
  4586                           
  4587                           ;SwSpiApp.c: 40: {
  4588                           ;SwSpiApp.c: 41: SWSPI_Synth_send_bits(phrType, datac);
  4589  0018CC  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_Synth_send_bits@data
  4590  0018D0  5029               	movf	SWSPI_send_word@phrType,w,c
  4591  0018D2  ECEF  F00F         	call	_SWSPI_Synth_send_bits
  4592                           
  4593                           ;SwSpiApp.c: 42: }
  4594  0018D6  D009               	goto	l553
  4595  0018D8                     l549:
  4596                           
  4597                           ;SwSpiApp.c: 43: else if (phrType == EXT_DAC)
  4598  0018D8  0E02               	movlw	2
  4599  0018DA  1829               	xorwf	SWSPI_send_word@phrType,w,c
  4600  0018DC  A4D8               	btfss	status,2,c
  4601  0018DE  D005               	goto	l553
  4602                           
  4603                           ;SwSpiApp.c: 44: {
  4604                           ;SwSpiApp.c: 45: SWSPI_DAC_send_bits(phrType, datac);
  4605  0018E0  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
  4606  0018E4  5029               	movf	SWSPI_send_word@phrType,w,c
  4607  0018E6  EC1B  F010         	call	_SWSPI_DAC_send_bits
  4608  0018EA                     l553:
  4609  0018EA  0627               	decf	SWSPI_send_word@idx,f,c
  4610  0018EC  A0D8               	btfss	status,0,c
  4611  0018EE  0628               	decf	SWSPI_send_word@idx+1,f,c
  4612  0018F0  D7D3               	goto	l4787
  4613  0018F2                     u3600:
  4614                           
  4615                           ;SwSpiApp.c: 46: }
  4616                           ;SwSpiApp.c: 47: }
  4617                           ;SwSpiApp.c: 52: if(phrType == EXT_DAC)
  4618  0018F2  0E02               	movlw	2
  4619  0018F4  1829               	xorwf	SWSPI_send_word@phrType,w,c
  4620  0018F6  A4D8               	btfss	status,2,c
  4621  0018F8  D004               	goto	l554
  4622                           
  4623                           ;SwSpiApp.c: 53: {
  4624                           ;SwSpiApp.c: 54: SwSpi_Set_Dac_Sync_Pin(1);
  4625  0018FA  0E01               	movlw	1
  4626  0018FC  EC3B  F013         	call	_SwSpi_Set_Dac_Sync_Pin
  4627                           
  4628                           ;SwSpiApp.c: 55: }
  4629  001900  D00B               	goto	l556
  4630  001902                     l554:
  4631                           
  4632                           ;SwSpiApp.c: 56: else if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  4633  001902  5029               	movf	SWSPI_send_word@phrType,w,c
  4634  001904  B4D8               	btfsc	status,2,c
  4635  001906  D003               	goto	u3630
  4636  001908  0429               	decf	SWSPI_send_word@phrType,w,c
  4637  00190A  A4D8               	btfss	status,2,c
  4638  00190C  D005               	goto	l556
  4639  00190E                     u3630:
  4640                           
  4641                           ;SwSpiApp.c: 57: {
  4642                           ;SwSpiApp.c: 58: SwSpi_Set_Synth_Le_Pin(phrType, 1);
  4643  00190E  0E01               	movlw	1
  4644  001910  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  4645  001912  5029               	movf	SWSPI_send_word@phrType,w,c
  4646  001914  ECD0  F011         	call	_SwSpi_Set_Synth_Le_Pin
  4647  001918                     l556:
  4648                           
  4649                           ;SwSpiApp.c: 59: }
  4650                           ;SwSpiApp.c: 62: (INTCONbits.GIE = 1);
  4651  001918  8EF2               	bsf	intcon,7,c	;volatile
  4652  00191A  0012               	return		;funcret
  4653  00191C                     __end_of_SWSPI_send_word:
  4654                           	opt stack 0
  4655                           tblptru	equ	0xFF8
  4656                           tblptrh	equ	0xFF7
  4657                           tblptrl	equ	0xFF6
  4658                           tablat	equ	0xFF5
  4659                           prodh	equ	0xFF4
  4660                           prodl	equ	0xFF3
  4661                           intcon	equ	0xFF2
  4662                           intcon2	equ	0xFF1
  4663                           postinc0	equ	0xFEE
  4664                           wreg	equ	0xFE8
  4665                           postdec1	equ	0xFE5
  4666                           plusw1	equ	0xFE3
  4667                           fsr1l	equ	0xFE1
  4668                           indf2	equ	0xFDF
  4669                           plusw2	equ	0xFDB
  4670                           fsr2h	equ	0xFDA
  4671                           fsr2l	equ	0xFD9
  4672                           status	equ	0xFD8
  4673                           
  4674 ;; *************** function _make8 *****************
  4675 ;; Defined at:
  4676 ;;		line 62 in file "SystemCommon.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  data            4   23[COMRAM] unsigned long 
  4679 ;;  dataLocation    1   27[COMRAM] unsigned char 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;		None
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  1    wreg      unsigned char 
  4684 ;; Registers used:
  4685 ;;		wreg, status,2, status,0
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4691 ;;      Params:         5       0       0       0       0       0       0
  4692 ;;      Locals:         0       0       0       0       0       0       0
  4693 ;;      Temps:          4       0       0       0       0       0       0
  4694 ;;      Totals:         9       0       0       0       0       0       0
  4695 ;;Total ram usage:        9 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    3
  4698 ;; This function calls:
  4699 ;;		Nothing
  4700 ;; This function is called by:
  4701 ;;		_SWSPI_send_word
  4702 ;;		_FlashReadCondition
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           	psect	text31
  4707  001F26                     __ptext31:
  4708                           	opt stack 0
  4709  001F26                     _make8:
  4710                           	opt stack 24
  4711                           
  4712                           ;SystemCommon.c: 64: switch(dataLocation)
  4713                           
  4714                           ;incstack = 0
  4715  001F26  D01F               	goto	l1261
  4716  001F28                     
  4717                           ;SystemCommon.c: 67: return (data & 0x000000ff);
  4718  001F28  5018               	movf	make8@data,w,c
  4719  001F2A  0012               	return	
  4720  001F2C                     
  4721                           ;SystemCommon.c: 70: return (data & 0x0000ff00) >> 8;
  4722  001F2C  5019               	movf	make8@data+1,w,c
  4723  001F2E  0012               	return	
  4724  001F30                     
  4725                           ;SystemCommon.c: 73: return (data & 0x00ff0000) >> 16;
  4726  001F30  501A               	movf	make8@data+2,w,c
  4727  001F32  0012               	return	
  4728  001F34                     
  4729                           ;SystemCommon.c: 76: return (data & 0xff000000) >> 24;
  4730  001F34  0E00               	movlw	0
  4731  001F36  1418               	andwf	make8@data,w,c
  4732  001F38  6E1D               	movwf	??_make8& (0+255),c
  4733  001F3A  0E00               	movlw	0
  4734  001F3C  1419               	andwf	make8@data+1,w,c
  4735  001F3E  6E1E               	movwf	(??_make8+1)& (0+255),c
  4736  001F40  0E00               	movlw	0
  4737  001F42  141A               	andwf	make8@data+2,w,c
  4738  001F44  6E1F               	movwf	(??_make8+2)& (0+255),c
  4739  001F46  0EFF               	movlw	255
  4740  001F48  141B               	andwf	make8@data+3,w,c
  4741  001F4A  6E20               	movwf	(??_make8+3)& (0+255),c
  4742  001F4C  0E19               	movlw	25
  4743  001F4E  D005               	goto	u3140
  4744  001F50                     u3145:
  4745  001F50  90D8               	bcf	status,0,c
  4746  001F52  3220               	rrcf	??_make8+3,f,c
  4747  001F54  321F               	rrcf	??_make8+2,f,c
  4748  001F56  321E               	rrcf	??_make8+1,f,c
  4749  001F58  321D               	rrcf	??_make8,f,c
  4750  001F5A                     u3140:
  4751  001F5A  2EE8               	decfsz	wreg,f,c
  4752  001F5C  D7F9               	goto	u3145
  4753  001F5E  501D               	movf	??_make8,w,c
  4754  001F60  0012               	return	
  4755  001F62                     
  4756                           ;SystemCommon.c: 79: return (0);
  4757  001F62  0E00               	movlw	0
  4758                           
  4759                           ;SystemCommon.c: 80: }
  4760  001F64  0012               	return	
  4761  001F66                     l1261:
  4762  001F66  501C               	movf	make8@dataLocation,w,c
  4763                           
  4764                           ; Switch size 1, requested type "space"
  4765                           ; Number of cases is 4, Range of values is 0 to 3
  4766                           ; switch strategies available:
  4767                           ; Name         Instructions Cycles
  4768                           ; simple_byte           13     7 (average)
  4769                           ;	Chosen strategy is simple_byte
  4770  001F68  0A00               	xorlw	0	; case 0
  4771  001F6A  B4D8               	btfsc	status,2,c
  4772  001F6C  D7DD               	goto	l1262
  4773  001F6E  0A01               	xorlw	1	; case 1
  4774  001F70  B4D8               	btfsc	status,2,c
  4775  001F72  D7DC               	goto	l1264
  4776  001F74  0A03               	xorlw	3	; case 2
  4777  001F76  B4D8               	btfsc	status,2,c
  4778  001F78  D7DB               	goto	l1265
  4779  001F7A  0A01               	xorlw	1	; case 3
  4780  001F7C  B4D8               	btfsc	status,2,c
  4781  001F7E  D7DA               	goto	l1266
  4782  001F80  D7F0               	goto	l1267
  4783  001F82                     __end_of_make8:
  4784                           	opt stack 0
  4785                           tblptru	equ	0xFF8
  4786                           tblptrh	equ	0xFF7
  4787                           tblptrl	equ	0xFF6
  4788                           tablat	equ	0xFF5
  4789                           prodh	equ	0xFF4
  4790                           prodl	equ	0xFF3
  4791                           intcon	equ	0xFF2
  4792                           intcon2	equ	0xFF1
  4793                           postinc0	equ	0xFEE
  4794                           wreg	equ	0xFE8
  4795                           postdec1	equ	0xFE5
  4796                           plusw1	equ	0xFE3
  4797                           fsr1l	equ	0xFE1
  4798                           indf2	equ	0xFDF
  4799                           plusw2	equ	0xFDB
  4800                           fsr2h	equ	0xFDA
  4801                           fsr2l	equ	0xFD9
  4802                           status	equ	0xFD8
  4803                           
  4804 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
  4805 ;; Defined at:
  4806 ;;		line 252 in file "SwSpiApp.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  phrType         1    wreg     enum E7563
  4809 ;;  cPinMode        1   23[COMRAM] unsigned char 
  4810 ;; Auto vars:     Size  Location     Type
  4811 ;;  phrType         1   24[COMRAM] enum E7563
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  1    wreg      void 
  4814 ;; Registers used:
  4815 ;;		wreg, status,2, status,0
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4821 ;;      Params:         1       0       0       0       0       0       0
  4822 ;;      Locals:         1       0       0       0       0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0
  4824 ;;      Totals:         2       0       0       0       0       0       0
  4825 ;;Total ram usage:        2 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    3
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_SWSPI_send_word
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           	psect	text32
  4836  0023A0                     __ptext32:
  4837                           	opt stack 0
  4838  0023A0                     _SwSpi_Set_Synth_Le_Pin:
  4839                           	opt stack 24
  4840                           
  4841                           ;incstack = 0
  4842                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
  4843  0023A0  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
  4844                           
  4845                           ;SwSpiApp.c: 254: switch(phrType)
  4846  0023A2  D014               	goto	l665
  4847  0023A4                     
  4848                           ;SwSpiApp.c: 257: if(cPinMode == 1)
  4849  0023A4  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  4850  0023A6  A4D8               	btfss	status,2,c
  4851  0023A8  D002               	goto	l667
  4852                           
  4853                           ;SwSpiApp.c: 258: {
  4854                           ;SwSpiApp.c: 259: do { LATCbits.LATC2 = 1; } while(0);
  4855  0023AA  848B               	bsf	3979,2,c	;volatile
  4856                           
  4857                           ;SwSpiApp.c: 260: }
  4858  0023AC  0012               	return	
  4859  0023AE                     l667:
  4860                           
  4861                           ;SwSpiApp.c: 261: else if(cPinMode == 0)
  4862  0023AE  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  4863  0023B0  A4D8               	btfss	status,2,c
  4864  0023B2  0012               	return	
  4865                           
  4866                           ;SwSpiApp.c: 262: {
  4867                           ;SwSpiApp.c: 263: do { LATCbits.LATC2 = 0; } while(0);
  4868  0023B4  948B               	bcf	3979,2,c	;volatile
  4869                           
  4870                           ;SwSpiApp.c: 264: }
  4871                           ;SwSpiApp.c: 265: break;
  4872  0023B6  0012               	return	
  4873  0023B8                     
  4874                           ;SwSpiApp.c: 268: if(cPinMode == 1)
  4875  0023B8  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  4876  0023BA  A4D8               	btfss	status,2,c
  4877  0023BC  D002               	goto	l676
  4878                           
  4879                           ;SwSpiApp.c: 269: {
  4880                           ;SwSpiApp.c: 270: do { LATDbits.LATD3 = 1; } while(0);
  4881  0023BE  868C               	bsf	3980,3,c	;volatile
  4882                           
  4883                           ;SwSpiApp.c: 271: }
  4884  0023C0  0012               	return	
  4885  0023C2                     l676:
  4886                           
  4887                           ;SwSpiApp.c: 272: else if(cPinMode == 0)
  4888  0023C2  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  4889  0023C4  A4D8               	btfss	status,2,c
  4890  0023C6  0012               	return	
  4891                           
  4892                           ;SwSpiApp.c: 273: {
  4893                           ;SwSpiApp.c: 274: do { LATDbits.LATD3 = 0; } while(0);
  4894  0023C8  968C               	bcf	3980,3,c	;volatile
  4895                           
  4896                           ;SwSpiApp.c: 277: }
  4897                           
  4898                           ;SwSpiApp.c: 275: }
  4899                           ;SwSpiApp.c: 276: break;
  4900  0023CA  0012               	return	
  4901  0023CC                     l665:
  4902  0023CC  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
  4903                           
  4904                           ; Switch size 1, requested type "space"
  4905                           ; Number of cases is 2, Range of values is 0 to 1
  4906                           ; switch strategies available:
  4907                           ; Name         Instructions Cycles
  4908                           ; simple_byte            7     4 (average)
  4909                           ;	Chosen strategy is simple_byte
  4910  0023CE  0A00               	xorlw	0	; case 0
  4911  0023D0  B4D8               	btfsc	status,2,c
  4912  0023D2  D7E8               	goto	l666
  4913  0023D4  0A01               	xorlw	1	; case 1
  4914  0023D6  A4D8               	btfss	status,2,c
  4915  0023D8  0012               	return	
  4916  0023DA  D7EE               	goto	l675
  4917  0023DC                     __end_of_SwSpi_Set_Synth_Le_Pin:
  4918                           	opt stack 0
  4919                           tblptru	equ	0xFF8
  4920                           tblptrh	equ	0xFF7
  4921                           tblptrl	equ	0xFF6
  4922                           tablat	equ	0xFF5
  4923                           prodh	equ	0xFF4
  4924                           prodl	equ	0xFF3
  4925                           intcon	equ	0xFF2
  4926                           intcon2	equ	0xFF1
  4927                           postinc0	equ	0xFEE
  4928                           wreg	equ	0xFE8
  4929                           postdec1	equ	0xFE5
  4930                           plusw1	equ	0xFE3
  4931                           fsr1l	equ	0xFE1
  4932                           indf2	equ	0xFDF
  4933                           plusw2	equ	0xFDB
  4934                           fsr2h	equ	0xFDA
  4935                           fsr2l	equ	0xFD9
  4936                           status	equ	0xFD8
  4937                           
  4938 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
  4939 ;; Defined at:
  4940 ;;		line 280 in file "SwSpiApp.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;  cPinMode        1    wreg     unsigned char 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  cPinMode        1   23[COMRAM] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  1    wreg      void 
  4947 ;; Registers used:
  4948 ;;		wreg, status,2, status,0
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4954 ;;      Params:         0       0       0       0       0       0       0
  4955 ;;      Locals:         1       0       0       0       0       0       0
  4956 ;;      Temps:          0       0       0       0       0       0       0
  4957 ;;      Totals:         1       0       0       0       0       0       0
  4958 ;;Total ram usage:        1 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    3
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_SWSPI_send_word
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text33
  4969  002676                     __ptext33:
  4970                           	opt stack 0
  4971  002676                     _SwSpi_Set_Dac_Sync_Pin:
  4972                           	opt stack 24
  4973                           
  4974                           ;incstack = 0
  4975                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
  4976  002676  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
  4977                           
  4978                           ;SwSpiApp.c: 282: switch(cPinMode)
  4979  002678  D004               	goto	l686
  4980  00267A                     
  4981                           ;SwSpiApp.c: 285: do { LATAbits.LATA2 = 0; } while(0);
  4982  00267A  9489               	bcf	3977,2,c	;volatile
  4983                           
  4984                           ;SwSpiApp.c: 286: break;
  4985  00267C  0012               	return	
  4986  00267E                     
  4987                           ;SwSpiApp.c: 289: do { LATAbits.LATA2 = 1; } while(0);
  4988  00267E  8489               	bsf	3977,2,c	;volatile
  4989                           
  4990                           ;SwSpiApp.c: 291: }
  4991                           
  4992                           ;SwSpiApp.c: 290: break;
  4993  002680  0012               	return	
  4994  002682                     l686:
  4995  002682  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
  4996                           
  4997                           ; Switch size 1, requested type "space"
  4998                           ; Number of cases is 2, Range of values is 0 to 1
  4999                           ; switch strategies available:
  5000                           ; Name         Instructions Cycles
  5001                           ; simple_byte            7     4 (average)
  5002                           ;	Chosen strategy is simple_byte
  5003  002684  0A00               	xorlw	0	; case 0
  5004  002686  B4D8               	btfsc	status,2,c
  5005  002688  D7F8               	goto	l687
  5006  00268A  0A01               	xorlw	1	; case 1
  5007  00268C  A4D8               	btfss	status,2,c
  5008  00268E  0012               	return	
  5009  002690  D7F6               	goto	l691
  5010  002692                     __end_of_SwSpi_Set_Dac_Sync_Pin:
  5011                           	opt stack 0
  5012                           tblptru	equ	0xFF8
  5013                           tblptrh	equ	0xFF7
  5014                           tblptrl	equ	0xFF6
  5015                           tablat	equ	0xFF5
  5016                           prodh	equ	0xFF4
  5017                           prodl	equ	0xFF3
  5018                           intcon	equ	0xFF2
  5019                           intcon2	equ	0xFF1
  5020                           postinc0	equ	0xFEE
  5021                           wreg	equ	0xFE8
  5022                           postdec1	equ	0xFE5
  5023                           plusw1	equ	0xFE3
  5024                           fsr1l	equ	0xFE1
  5025                           indf2	equ	0xFDF
  5026                           plusw2	equ	0xFDB
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _SWSPI_Synth_send_bits *****************
  5032 ;; Defined at:
  5033 ;;		line 89 in file "SwSpiApp.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  phrType         1    wreg     enum E7563
  5036 ;;  data            1   25[COMRAM] unsigned char 
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;  phrType         1   27[COMRAM] enum E7563
  5039 ;;  count           1   26[COMRAM] unsigned char 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2, status,0, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5049 ;;      Params:         1       0       0       0       0       0       0
  5050 ;;      Locals:         2       0       0       0       0       0       0
  5051 ;;      Temps:          0       0       0       0       0       0       0
  5052 ;;      Totals:         3       0       0       0       0       0       0
  5053 ;;Total ram usage:        3 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    4
  5056 ;; This function calls:
  5057 ;;		_SwSpi_Clk_Pin
  5058 ;;		_SwSpi_Data_Pin
  5059 ;; This function is called by:
  5060 ;;		_SWSPI_send_word
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           	psect	text34
  5065  001FDE                     __ptext34:
  5066                           	opt stack 0
  5067  001FDE                     _SWSPI_Synth_send_bits:
  5068                           	opt stack 23
  5069                           
  5070                           ;incstack = 0
  5071                           ;SWSPI_Synth_send_bits@phrType stored from wreg
  5072  001FDE  6E1C               	movwf	SWSPI_Synth_send_bits@phrType,c
  5073                           
  5074                           ;SwSpiApp.c: 91: uint8_t count;
  5075                           ;SwSpiApp.c: 92: for (count = 8; count ; count--, data <<= 1)
  5076  001FE0  0E08               	movlw	8
  5077  001FE2  6E1B               	movwf	SWSPI_Synth_send_bits@count,c
  5078  001FE4  D01A               	goto	l570
  5079  001FE6                     
  5080                           ;SwSpiApp.c: 93: {
  5081                           ;SwSpiApp.c: 94: SwSpi_Clk_Pin(phrType, 0);
  5082  001FE6  0E00               	movlw	0
  5083  001FE8  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  5084  001FEA  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  5085  001FEC  EC9D  F010         	call	_SwSpi_Clk_Pin
  5086                           
  5087                           ;SwSpiApp.c: 96: if (data & 0X80)
  5088  001FF0  AE1A               	btfss	SWSPI_Synth_send_bits@data,7,c
  5089  001FF2  D006               	goto	l572
  5090                           
  5091                           ;SwSpiApp.c: 97: {
  5092                           ;SwSpiApp.c: 99: SwSpi_Data_Pin(phrType, 1);
  5093  001FF4  0E01               	movlw	1
  5094  001FF6  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  5095  001FF8  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  5096  001FFA  EC72  F010         	call	_SwSpi_Data_Pin
  5097                           
  5098                           ;SwSpiApp.c: 100: }
  5099  001FFE  D005               	goto	l573
  5100  002000                     l572:
  5101                           
  5102                           ;SwSpiApp.c: 101: else
  5103                           ;SwSpiApp.c: 102: {
  5104                           ;SwSpiApp.c: 103: SwSpi_Data_Pin(phrType, 0);
  5105  002000  0E00               	movlw	0
  5106  002002  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  5107  002004  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  5108  002006  EC72  F010         	call	_SwSpi_Data_Pin
  5109  00200A                     l573:
  5110                           
  5111                           ;SwSpiApp.c: 104: }
  5112                           ;SwSpiApp.c: 106: SwSpi_Clk_Pin(phrType, 1);
  5113  00200A  0E01               	movlw	1
  5114  00200C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  5115  00200E  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  5116  002010  EC9D  F010         	call	_SwSpi_Clk_Pin
  5117  002014  061B               	decf	SWSPI_Synth_send_bits@count,f,c
  5118  002016  90D8               	bcf	status,0,c
  5119  002018  361A               	rlcf	SWSPI_Synth_send_bits@data,f,c
  5120  00201A                     l570:
  5121  00201A  501B               	movf	SWSPI_Synth_send_bits@count,w,c
  5122  00201C  A4D8               	btfss	status,2,c
  5123  00201E  D7E3               	goto	l571
  5124                           
  5125                           ;SwSpiApp.c: 113: }
  5126                           ;SwSpiApp.c: 115: SwSpi_Data_Pin(phrType, 0);
  5127  002020  0E00               	movlw	0
  5128  002022  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  5129  002024  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  5130  002026  EC72  F010         	call	_SwSpi_Data_Pin
  5131                           
  5132                           ;SwSpiApp.c: 116: SwSpi_Clk_Pin(phrType, 0);
  5133  00202A  0E00               	movlw	0
  5134  00202C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  5135  00202E  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  5136  002030  EC9D  F010         	call	_SwSpi_Clk_Pin
  5137  002034  0012               	return		;funcret
  5138  002036                     __end_of_SWSPI_Synth_send_bits:
  5139                           	opt stack 0
  5140                           tblptru	equ	0xFF8
  5141                           tblptrh	equ	0xFF7
  5142                           tblptrl	equ	0xFF6
  5143                           tablat	equ	0xFF5
  5144                           prodh	equ	0xFF4
  5145                           prodl	equ	0xFF3
  5146                           intcon	equ	0xFF2
  5147                           intcon2	equ	0xFF1
  5148                           postinc0	equ	0xFEE
  5149                           wreg	equ	0xFE8
  5150                           postdec1	equ	0xFE5
  5151                           plusw1	equ	0xFE3
  5152                           fsr1l	equ	0xFE1
  5153                           indf2	equ	0xFDF
  5154                           plusw2	equ	0xFDB
  5155                           fsr2h	equ	0xFDA
  5156                           fsr2l	equ	0xFD9
  5157                           status	equ	0xFD8
  5158                           
  5159 ;; *************** function _SWSPI_DAC_send_bits *****************
  5160 ;; Defined at:
  5161 ;;		line 65 in file "SwSpiApp.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  phrType         1    wreg     enum E7563
  5164 ;;  data            1   25[COMRAM] unsigned char 
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;  phrType         1   27[COMRAM] enum E7563
  5167 ;;  count           1   26[COMRAM] unsigned char 
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  1    wreg      void 
  5170 ;; Registers used:
  5171 ;;		wreg, status,2, status,0, cstack
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5177 ;;      Params:         1       0       0       0       0       0       0
  5178 ;;      Locals:         2       0       0       0       0       0       0
  5179 ;;      Temps:          0       0       0       0       0       0       0
  5180 ;;      Totals:         3       0       0       0       0       0       0
  5181 ;;Total ram usage:        3 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    4
  5184 ;; This function calls:
  5185 ;;		_SwSpi_Clk_Pin
  5186 ;;		_SwSpi_Data_Pin
  5187 ;; This function is called by:
  5188 ;;		_SWSPI_send_word
  5189 ;; This function uses a non-reentrant model
  5190 ;;
  5191                           
  5192                           	psect	text35
  5193  002036                     __ptext35:
  5194                           	opt stack 0
  5195  002036                     _SWSPI_DAC_send_bits:
  5196                           	opt stack 23
  5197                           
  5198                           ;incstack = 0
  5199                           ;SWSPI_DAC_send_bits@phrType stored from wreg
  5200  002036  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
  5201                           
  5202                           ;SwSpiApp.c: 67: uint8_t count;
  5203                           ;SwSpiApp.c: 68: for (count = 8; count ; count--, data <<= 1)
  5204  002038  0E08               	movlw	8
  5205  00203A  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
  5206  00203C  D01A               	goto	l562
  5207  00203E                     
  5208                           ;SwSpiApp.c: 69: {
  5209                           ;SwSpiApp.c: 70: SwSpi_Clk_Pin(phrType, 1);
  5210  00203E  0E01               	movlw	1
  5211  002040  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  5212  002042  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  5213  002044  EC9D  F010         	call	_SwSpi_Clk_Pin
  5214                           
  5215                           ;SwSpiApp.c: 72: if (data & 0X80)
  5216  002048  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
  5217  00204A  D006               	goto	l564
  5218                           
  5219                           ;SwSpiApp.c: 73: {
  5220                           ;SwSpiApp.c: 75: SwSpi_Data_Pin(phrType, 1);
  5221  00204C  0E01               	movlw	1
  5222  00204E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  5223  002050  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  5224  002052  EC72  F010         	call	_SwSpi_Data_Pin
  5225                           
  5226                           ;SwSpiApp.c: 76: }
  5227  002056  D005               	goto	l565
  5228  002058                     l564:
  5229                           
  5230                           ;SwSpiApp.c: 77: else
  5231                           ;SwSpiApp.c: 78: {
  5232                           ;SwSpiApp.c: 79: SwSpi_Data_Pin(phrType, 0);
  5233  002058  0E00               	movlw	0
  5234  00205A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  5235  00205C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  5236  00205E  EC72  F010         	call	_SwSpi_Data_Pin
  5237  002062                     l565:
  5238                           
  5239                           ;SwSpiApp.c: 80: }
  5240                           ;SwSpiApp.c: 82: SwSpi_Clk_Pin(phrType, 0);
  5241  002062  0E00               	movlw	0
  5242  002064  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  5243  002066  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  5244  002068  EC9D  F010         	call	_SwSpi_Clk_Pin
  5245  00206C  061B               	decf	SWSPI_DAC_send_bits@count,f,c
  5246  00206E  90D8               	bcf	status,0,c
  5247  002070  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
  5248  002072                     l562:
  5249  002072  501B               	movf	SWSPI_DAC_send_bits@count,w,c
  5250  002074  A4D8               	btfss	status,2,c
  5251  002076  D7E3               	goto	l563
  5252                           
  5253                           ;SwSpiApp.c: 83: }
  5254                           ;SwSpiApp.c: 85: SwSpi_Data_Pin(phrType, 0);
  5255  002078  0E00               	movlw	0
  5256  00207A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  5257  00207C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  5258  00207E  EC72  F010         	call	_SwSpi_Data_Pin
  5259                           
  5260                           ;SwSpiApp.c: 86: SwSpi_Clk_Pin(phrType, 0);
  5261  002082  0E00               	movlw	0
  5262  002084  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  5263  002086  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  5264  002088  EC9D  F010         	call	_SwSpi_Clk_Pin
  5265  00208C  0012               	return		;funcret
  5266  00208E                     __end_of_SWSPI_DAC_send_bits:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           intcon	equ	0xFF2
  5275                           intcon2	equ	0xFF1
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           postdec1	equ	0xFE5
  5279                           plusw1	equ	0xFE3
  5280                           fsr1l	equ	0xFE1
  5281                           indf2	equ	0xFDF
  5282                           plusw2	equ	0xFDB
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8
  5286                           
  5287 ;; *************** function _SwSpi_Data_Pin *****************
  5288 ;; Defined at:
  5289 ;;		line 123 in file "SwSpiApp.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;  phrType         1    wreg     enum E7563
  5292 ;;  cPinMode        1   23[COMRAM] unsigned char 
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;  phrType         1   24[COMRAM] enum E7563
  5295 ;; Return value:  Size  Location     Type
  5296 ;;                  1    wreg      void 
  5297 ;; Registers used:
  5298 ;;		wreg, status,2, status,0
  5299 ;; Tracked objects:
  5300 ;;		On entry : 0/0
  5301 ;;		On exit  : 0/0
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5304 ;;      Params:         1       0       0       0       0       0       0
  5305 ;;      Locals:         1       0       0       0       0       0       0
  5306 ;;      Temps:          0       0       0       0       0       0       0
  5307 ;;      Totals:         2       0       0       0       0       0       0
  5308 ;;Total ram usage:        2 bytes
  5309 ;; Hardware stack levels used:    1
  5310 ;; Hardware stack levels required when called:    3
  5311 ;; This function calls:
  5312 ;;		Nothing
  5313 ;; This function is called by:
  5314 ;;		_SWSPI_DAC_send_bits
  5315 ;;		_SWSPI_Synth_send_bits
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text36
  5320  0020E4                     __ptext36:
  5321                           	opt stack 0
  5322  0020E4                     _SwSpi_Data_Pin:
  5323                           	opt stack 23
  5324                           
  5325                           ;incstack = 0
  5326                           ;SwSpi_Data_Pin@phrType stored from wreg
  5327  0020E4  6E19               	movwf	SwSpi_Data_Pin@phrType,c
  5328                           
  5329                           ;SwSpiApp.c: 125: switch(phrType)
  5330  0020E6  D01E               	goto	l578
  5331  0020E8                     
  5332                           ;SwSpiApp.c: 128: if(cPinMode == 1)
  5333  0020E8  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
  5334  0020EA  A4D8               	btfss	status,2,c
  5335  0020EC  D002               	goto	l580
  5336                           
  5337                           ;SwSpiApp.c: 129: {
  5338                           ;SwSpiApp.c: 130: do { LATDbits.LATD0 = 1; } while(0);
  5339  0020EE  808C               	bsf	3980,0,c	;volatile
  5340                           
  5341                           ;SwSpiApp.c: 131: }
  5342  0020F0  0012               	return	
  5343  0020F2                     l580:
  5344                           
  5345                           ;SwSpiApp.c: 132: else if (cPinMode == 0)
  5346  0020F2  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
  5347  0020F4  A4D8               	btfss	status,2,c
  5348  0020F6  0012               	return	
  5349                           
  5350                           ;SwSpiApp.c: 133: {
  5351                           ;SwSpiApp.c: 134: do { LATDbits.LATD0 = 0; } while(0);
  5352  0020F8  908C               	bcf	3980,0,c	;volatile
  5353                           
  5354                           ;SwSpiApp.c: 135: }
  5355                           ;SwSpiApp.c: 136: break;
  5356  0020FA  0012               	return	
  5357  0020FC                     
  5358                           ;SwSpiApp.c: 139: if(cPinMode == 1)
  5359  0020FC  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
  5360  0020FE  A4D8               	btfss	status,2,c
  5361  002100  D002               	goto	l589
  5362                           
  5363                           ;SwSpiApp.c: 140: {
  5364                           ;SwSpiApp.c: 141: do { LATCbits.LATC5 = 1; } while(0);
  5365  002102  8A8B               	bsf	3979,5,c	;volatile
  5366                           
  5367                           ;SwSpiApp.c: 142: }
  5368  002104  0012               	return	
  5369  002106                     l589:
  5370                           
  5371                           ;SwSpiApp.c: 143: else if (cPinMode == 0)
  5372  002106  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
  5373  002108  A4D8               	btfss	status,2,c
  5374  00210A  0012               	return	
  5375                           
  5376                           ;SwSpiApp.c: 144: {
  5377                           ;SwSpiApp.c: 145: do { LATCbits.LATC5 = 0; } while(0);
  5378  00210C  9A8B               	bcf	3979,5,c	;volatile
  5379                           
  5380                           ;SwSpiApp.c: 146: }
  5381                           ;SwSpiApp.c: 147: break;
  5382  00210E  0012               	return	
  5383  002110                     
  5384                           ;SwSpiApp.c: 150: if(cPinMode == 1)
  5385  002110  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
  5386  002112  A4D8               	btfss	status,2,c
  5387  002114  D002               	goto	l597
  5388                           
  5389                           ;SwSpiApp.c: 151: {
  5390                           ;SwSpiApp.c: 152: do { LATAbits.LATA4 = 1; } while(0);
  5391  002116  8889               	bsf	3977,4,c	;volatile
  5392                           
  5393                           ;SwSpiApp.c: 153: }
  5394  002118  0012               	return	
  5395  00211A                     l597:
  5396                           
  5397                           ;SwSpiApp.c: 154: else if (cPinMode == 0)
  5398  00211A  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
  5399  00211C  A4D8               	btfss	status,2,c
  5400  00211E  0012               	return	
  5401                           
  5402                           ;SwSpiApp.c: 155: {
  5403                           ;SwSpiApp.c: 156: do { LATAbits.LATA4 = 0; } while(0);
  5404  002120  9889               	bcf	3977,4,c	;volatile
  5405                           
  5406                           ;SwSpiApp.c: 159: }
  5407                           
  5408                           ;SwSpiApp.c: 157: }
  5409                           ;SwSpiApp.c: 158: break;
  5410  002122  0012               	return	
  5411  002124                     l578:
  5412  002124  5019               	movf	SwSpi_Data_Pin@phrType,w,c
  5413                           
  5414                           ; Switch size 1, requested type "space"
  5415                           ; Number of cases is 3, Range of values is 0 to 2
  5416                           ; switch strategies available:
  5417                           ; Name         Instructions Cycles
  5418                           ; simple_byte           10     6 (average)
  5419                           ;	Chosen strategy is simple_byte
  5420  002126  0A00               	xorlw	0	; case 0
  5421  002128  B4D8               	btfsc	status,2,c
  5422  00212A  D7DE               	goto	l579
  5423  00212C  0A01               	xorlw	1	; case 1
  5424  00212E  B4D8               	btfsc	status,2,c
  5425  002130  D7E5               	goto	l588
  5426  002132  0A03               	xorlw	3	; case 2
  5427  002134  A4D8               	btfss	status,2,c
  5428  002136  0012               	return	
  5429  002138  D7EB               	goto	l596
  5430  00213A                     __end_of_SwSpi_Data_Pin:
  5431                           	opt stack 0
  5432                           tblptru	equ	0xFF8
  5433                           tblptrh	equ	0xFF7
  5434                           tblptrl	equ	0xFF6
  5435                           tablat	equ	0xFF5
  5436                           prodh	equ	0xFF4
  5437                           prodl	equ	0xFF3
  5438                           intcon	equ	0xFF2
  5439                           intcon2	equ	0xFF1
  5440                           postinc0	equ	0xFEE
  5441                           wreg	equ	0xFE8
  5442                           postdec1	equ	0xFE5
  5443                           plusw1	equ	0xFE3
  5444                           fsr1l	equ	0xFE1
  5445                           indf2	equ	0xFDF
  5446                           plusw2	equ	0xFDB
  5447                           fsr2h	equ	0xFDA
  5448                           fsr2l	equ	0xFD9
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function _SwSpi_Clk_Pin *****************
  5452 ;; Defined at:
  5453 ;;		line 162 in file "SwSpiApp.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;  phrType         1    wreg     enum E7563
  5456 ;;  cPinMode        1   23[COMRAM] unsigned char 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;  phrType         1   24[COMRAM] enum E7563
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  1    wreg      void 
  5461 ;; Registers used:
  5462 ;;		wreg, status,2, status,0
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5468 ;;      Params:         1       0       0       0       0       0       0
  5469 ;;      Locals:         1       0       0       0       0       0       0
  5470 ;;      Temps:          0       0       0       0       0       0       0
  5471 ;;      Totals:         2       0       0       0       0       0       0
  5472 ;;Total ram usage:        2 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    3
  5475 ;; This function calls:
  5476 ;;		Nothing
  5477 ;; This function is called by:
  5478 ;;		_SWSPI_DAC_send_bits
  5479 ;;		_SWSPI_Synth_send_bits
  5480 ;;		_SwSpi_Synth_Toggle_Clock
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           	psect	text37
  5485  00213A                     __ptext37:
  5486                           	opt stack 0
  5487  00213A                     _SwSpi_Clk_Pin:
  5488                           	opt stack 23
  5489                           
  5490                           ;incstack = 0
  5491                           ;SwSpi_Clk_Pin@phrType stored from wreg
  5492  00213A  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
  5493                           
  5494                           ;SwSpiApp.c: 164: switch(phrType)
  5495  00213C  D01E               	goto	l607
  5496  00213E                     
  5497                           ;SwSpiApp.c: 167: if(cPinMode == 1)
  5498  00213E  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
  5499  002140  A4D8               	btfss	status,2,c
  5500  002142  D002               	goto	l609
  5501                           
  5502                           ;SwSpiApp.c: 168: {
  5503                           ;SwSpiApp.c: 169: do { LATCbits.LATC3 = 1; } while(0);
  5504  002144  868B               	bsf	3979,3,c	;volatile
  5505                           
  5506                           ;SwSpiApp.c: 170: }
  5507  002146  0012               	return	
  5508  002148                     l609:
  5509                           
  5510                           ;SwSpiApp.c: 171: else if (cPinMode == 0)
  5511  002148  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
  5512  00214A  A4D8               	btfss	status,2,c
  5513  00214C  0012               	return	
  5514                           
  5515                           ;SwSpiApp.c: 172: {
  5516                           ;SwSpiApp.c: 173: do { LATCbits.LATC3 = 0; } while(0);
  5517  00214E  968B               	bcf	3979,3,c	;volatile
  5518                           
  5519                           ;SwSpiApp.c: 174: }
  5520                           ;SwSpiApp.c: 175: break;
  5521  002150  0012               	return	
  5522  002152                     
  5523                           ;SwSpiApp.c: 178: if(cPinMode == 1)
  5524  002152  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
  5525  002154  A4D8               	btfss	status,2,c
  5526  002156  D002               	goto	l618
  5527                           
  5528                           ;SwSpiApp.c: 179: {
  5529                           ;SwSpiApp.c: 180: do { LATCbits.LATC4 = 1; } while(0);
  5530  002158  888B               	bsf	3979,4,c	;volatile
  5531                           
  5532                           ;SwSpiApp.c: 181: }
  5533  00215A  0012               	return	
  5534  00215C                     l618:
  5535                           
  5536                           ;SwSpiApp.c: 182: else if (cPinMode == 0)
  5537  00215C  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
  5538  00215E  A4D8               	btfss	status,2,c
  5539  002160  0012               	return	
  5540                           
  5541                           ;SwSpiApp.c: 183: {
  5542                           ;SwSpiApp.c: 184: do { LATCbits.LATC4 = 0; } while(0);
  5543  002162  988B               	bcf	3979,4,c	;volatile
  5544                           
  5545                           ;SwSpiApp.c: 185: }
  5546                           ;SwSpiApp.c: 187: break;
  5547  002164  0012               	return	
  5548  002166                     
  5549                           ;SwSpiApp.c: 190: if(cPinMode == 1)
  5550  002166  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
  5551  002168  A4D8               	btfss	status,2,c
  5552  00216A  D002               	goto	l626
  5553                           
  5554                           ;SwSpiApp.c: 191: {
  5555                           ;SwSpiApp.c: 192: do { LATAbits.LATA3 = 1; } while(0);
  5556  00216C  8689               	bsf	3977,3,c	;volatile
  5557                           
  5558                           ;SwSpiApp.c: 193: }
  5559  00216E  0012               	return	
  5560  002170                     l626:
  5561                           
  5562                           ;SwSpiApp.c: 194: else if (cPinMode == 0)
  5563  002170  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
  5564  002172  A4D8               	btfss	status,2,c
  5565  002174  0012               	return	
  5566                           
  5567                           ;SwSpiApp.c: 195: {
  5568                           ;SwSpiApp.c: 196: do { LATAbits.LATA3 = 0; } while(0);
  5569  002176  9689               	bcf	3977,3,c	;volatile
  5570                           
  5571                           ;SwSpiApp.c: 199: }
  5572                           
  5573                           ;SwSpiApp.c: 197: }
  5574                           ;SwSpiApp.c: 198: break;
  5575  002178  0012               	return	
  5576  00217A                     l607:
  5577  00217A  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
  5578                           
  5579                           ; Switch size 1, requested type "space"
  5580                           ; Number of cases is 3, Range of values is 0 to 2
  5581                           ; switch strategies available:
  5582                           ; Name         Instructions Cycles
  5583                           ; simple_byte           10     6 (average)
  5584                           ;	Chosen strategy is simple_byte
  5585  00217C  0A00               	xorlw	0	; case 0
  5586  00217E  B4D8               	btfsc	status,2,c
  5587  002180  D7DE               	goto	l608
  5588  002182  0A01               	xorlw	1	; case 1
  5589  002184  B4D8               	btfsc	status,2,c
  5590  002186  D7E5               	goto	l617
  5591  002188  0A03               	xorlw	3	; case 2
  5592  00218A  A4D8               	btfss	status,2,c
  5593  00218C  0012               	return	
  5594  00218E  D7EB               	goto	l625
  5595  002190                     __end_of_SwSpi_Clk_Pin:
  5596                           	opt stack 0
  5597                           tblptru	equ	0xFF8
  5598                           tblptrh	equ	0xFF7
  5599                           tblptrl	equ	0xFF6
  5600                           tablat	equ	0xFF5
  5601                           prodh	equ	0xFF4
  5602                           prodl	equ	0xFF3
  5603                           intcon	equ	0xFF2
  5604                           intcon2	equ	0xFF1
  5605                           postinc0	equ	0xFEE
  5606                           wreg	equ	0xFE8
  5607                           postdec1	equ	0xFE5
  5608                           plusw1	equ	0xFE3
  5609                           fsr1l	equ	0xFE1
  5610                           indf2	equ	0xFDF
  5611                           plusw2	equ	0xFDB
  5612                           fsr2h	equ	0xFDA
  5613                           fsr2l	equ	0xFD9
  5614                           status	equ	0xFD8
  5615                           
  5616 ;; *************** function _ClearMcuRunTime *****************
  5617 ;; Defined at:
  5618 ;;		line 87 in file "SystemStatus.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;		None
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;		None
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  1    wreg      void 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5632 ;;      Params:         0       0       0       0       0       0       0
  5633 ;;      Locals:         0       0       0       0       0       0       0
  5634 ;;      Temps:          0       0       0       0       0       0       0
  5635 ;;      Totals:         0       0       0       0       0       0       0
  5636 ;;Total ram usage:        0 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; Hardware stack levels required when called:    3
  5639 ;; This function calls:
  5640 ;;		Nothing
  5641 ;; This function is called by:
  5642 ;;		_InitSystemApplicationManagers
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           	psect	text38
  5647  00271E                     __ptext38:
  5648                           	opt stack 0
  5649  00271E                     _ClearMcuRunTime:
  5650                           	opt stack 26
  5651                           
  5652                           ;SystemStatus.c: 89: mcuRunTimeIn5SecTicks = 0;
  5653                           
  5654                           ;incstack = 0
  5655  00271E  0E00               	movlw	0
  5656  002720  0100               	movlb	0	; () banked
  5657  002722  6FBE               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
  5658  002724  0E00               	movlw	0
  5659  002726  6FBF               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
  5660  002728  0E00               	movlw	0
  5661  00272A  6FC0               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
  5662  00272C  0E00               	movlw	0
  5663  00272E  6FC1               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
  5664                           
  5665                           ; BSR set to: 0
  5666  002730  0012               	return		;funcret
  5667  002732                     __end_of_ClearMcuRunTime:
  5668                           	opt stack 0
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           prodh	equ	0xFF4
  5674                           prodl	equ	0xFF3
  5675                           intcon	equ	0xFF2
  5676                           intcon2	equ	0xFF1
  5677                           postinc0	equ	0xFEE
  5678                           wreg	equ	0xFE8
  5679                           postdec1	equ	0xFE5
  5680                           plusw1	equ	0xFE3
  5681                           fsr1l	equ	0xFE1
  5682                           indf2	equ	0xFDF
  5683                           plusw2	equ	0xFDB
  5684                           fsr2h	equ	0xFDA
  5685                           fsr2l	equ	0xFD9
  5686                           status	equ	0xFD8
  5687                           
  5688 ;; *************** function _CheckFlashPrecentage *****************
  5689 ;; Defined at:
  5690 ;;		line 205 in file "FlashApp.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;		None
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;  precentage      3   28[BANK0 ] void 
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  1    wreg      unsigned char 
  5697 ;; Registers used:
  5698 ;;		wreg, status,2, status,0, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5704 ;;      Params:         0       0       0       0       0       0       0
  5705 ;;      Locals:         0       3       0       0       0       0       0
  5706 ;;      Temps:          0       4       0       0       0       0       0
  5707 ;;      Totals:         0       7       0       0       0       0       0
  5708 ;;Total ram usage:        7 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    5
  5711 ;; This function calls:
  5712 ;;		___ftdiv
  5713 ;;		___ftge
  5714 ;;		___ftmul
  5715 ;;		___lltoft
  5716 ;; This function is called by:
  5717 ;;		_main
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           	psect	text39
  5722  00191C                     __ptext39:
  5723                           	opt stack 0
  5724  00191C                     _CheckFlashPrecentage:
  5725                           	opt stack 25
  5726                           
  5727                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;incstack = 0
  5731  00191C  0EE0               	movlw	224
  5732  00191E  6E2C               	movwf	___ftdiv@f2,c
  5733  001920  0EFF               	movlw	255
  5734  001922  6E2D               	movwf	___ftdiv@f2+1,c
  5735  001924  0E46               	movlw	70
  5736  001926  6E2E               	movwf	___ftdiv@f2+2,c
  5737  001928  C042  F078         	movff	_writeAddress,??_CheckFlashPrecentage
  5738  00192C  C043  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
  5739  001930  C044  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
  5740  001934  C045  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
  5741  001938  0100               	movlb	0	; () banked
  5742  00193A  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
  5743  00193C  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
  5744  00193E  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
  5745  001940  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
  5746  001942  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
  5747  001944  0E00               	movlw	0
  5748  001946  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
  5749  001948  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
  5750  00194A  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
  5751  00194C  0EF0               	movlw	240
  5752  00194E  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
  5753  001950  6E20               	movwf	___lltoft@c,c
  5754  001952  0E7F               	movlw	127
  5755  001954  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
  5756  001956  6E21               	movwf	___lltoft@c+1,c
  5757  001958  0E00               	movlw	0
  5758  00195A  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
  5759  00195C  6E22               	movwf	___lltoft@c+2,c
  5760  00195E  0E00               	movlw	0
  5761  001960  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
  5762  001962  6E23               	movwf	___lltoft@c+3,c
  5763  001964  ECC1  F00F         	call	___lltoft	;wreg free
  5764  001968  C020  F029         	movff	?___lltoft,___ftdiv@f1
  5765  00196C  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
  5766  001970  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
  5767  001974  ECAF  F009         	call	___ftdiv	;wreg free
  5768  001978  C029  F069         	movff	?___ftdiv,___ftmul@f1
  5769  00197C  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  5770  001980  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  5771  001984  0E00               	movlw	0
  5772  001986  0100               	movlb	0	; () banked
  5773  001988  6F6C               	movwf	___ftmul@f2& (0+255),b
  5774  00198A  0EC8               	movlw	200
  5775  00198C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  5776  00198E  0E42               	movlw	66
  5777  001990  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  5778  001992  EC34  F009         	call	___ftmul	;wreg free
  5779  001996  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
  5780  00199A  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
  5781  00199E  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
  5782                           
  5783                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
  5784  0019A2  0E00               	movlw	0
  5785  0019A4  6E18               	movwf	___ftge@ff1,c
  5786  0019A6  0E96               	movlw	150
  5787  0019A8  6E19               	movwf	___ftge@ff1+1,c
  5788  0019AA  0E42               	movlw	66
  5789  0019AC  6E1A               	movwf	___ftge@ff1+2,c
  5790  0019AE  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
  5791  0019B2  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
  5792  0019B6  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
  5793  0019BA  EC84  F00D         	call	___ftge	;wreg free
  5794  0019BE  B0D8               	btfsc	status,0,c
  5795  0019C0  D002               	goto	u6310
  5796  0019C2  0E01               	movlw	1
  5797  0019C4  0012               	return	
  5798  0019C6                     u6310:
  5799  0019C6  0E00               	movlw	0
  5800  0019C8  0012               	return	
  5801  0019CA                     __end_of_CheckFlashPrecentage:
  5802                           	opt stack 0
  5803                           tblptru	equ	0xFF8
  5804                           tblptrh	equ	0xFF7
  5805                           tblptrl	equ	0xFF6
  5806                           tablat	equ	0xFF5
  5807                           prodh	equ	0xFF4
  5808                           prodl	equ	0xFF3
  5809                           intcon	equ	0xFF2
  5810                           intcon2	equ	0xFF1
  5811                           postinc0	equ	0xFEE
  5812                           wreg	equ	0xFE8
  5813                           postdec1	equ	0xFE5
  5814                           plusw1	equ	0xFE3
  5815                           fsr1l	equ	0xFE1
  5816                           indf2	equ	0xFDF
  5817                           plusw2	equ	0xFDB
  5818                           fsr2h	equ	0xFDA
  5819                           fsr2l	equ	0xFD9
  5820                           status	equ	0xFD8
  5821                           
  5822 ;; *************** function _BlinkOkLeds *****************
  5823 ;; Defined at:
  5824 ;;		line 24 in file "LedsApp.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;  state           1    wreg     enum E7579
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  state           1   28[COMRAM] enum E7579
  5829 ;;  idx             2   26[COMRAM] int 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  1    wreg      void 
  5832 ;; Registers used:
  5833 ;;		wreg, status,2, status,0
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5839 ;;      Params:         0       0       0       0       0       0       0
  5840 ;;      Locals:         3       0       0       0       0       0       0
  5841 ;;      Temps:          3       0       0       0       0       0       0
  5842 ;;      Totals:         6       0       0       0       0       0       0
  5843 ;;Total ram usage:        6 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    3
  5846 ;; This function calls:
  5847 ;;		Nothing
  5848 ;; This function is called by:
  5849 ;;		_main
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           	psect	text40
  5854  001E6A                     __ptext40:
  5855                           	opt stack 0
  5856  001E6A                     _BlinkOkLeds:
  5857                           	opt stack 27
  5858                           
  5859                           ;incstack = 0
  5860                           ;BlinkOkLeds@state stored from wreg
  5861  001E6A  6E1D               	movwf	BlinkOkLeds@state,c
  5862                           
  5863                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
  5864  001E6C  0E00               	movlw	0
  5865  001E6E  6E1C               	movwf	BlinkOkLeds@idx+1,c
  5866  001E70  0E00               	movlw	0
  5867  001E72  6E1B               	movwf	BlinkOkLeds@idx,c
  5868  001E74                     l3329:
  5869  001E74  501D               	movf	BlinkOkLeds@state,w,c
  5870  001E76  6E18               	movwf	??_BlinkOkLeds& (0+255),c
  5871  001E78  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
  5872  001E7A  5018               	movf	??_BlinkOkLeds,w,c
  5873  001E7C  5C1B               	subwf	BlinkOkLeds@idx,w,c
  5874  001E7E  501C               	movf	BlinkOkLeds@idx+1,w,c
  5875  001E80  0A80               	xorlw	128
  5876  001E82  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
  5877  001E84  5019               	movf	??_BlinkOkLeds+1,w,c
  5878  001E86  0A80               	xorlw	128
  5879  001E88  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
  5880  001E8A  B0D8               	btfsc	status,0,c
  5881  001E8C  0012               	return	
  5882                           
  5883                           ;LedsApp.c: 27: {
  5884                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
  5885  001E8E  908B               	bcf	3979,0,c	;volatile
  5886                           
  5887                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
  5888  001E90  0E02               	movlw	2
  5889  001E92  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
  5890  001E94  0E04               	movlw	4
  5891  001E96  6E18               	movwf	??_BlinkOkLeds& (0+255),c
  5892  001E98  0EBA               	movlw	186
  5893  001E9A                     u6577:
  5894  001E9A  2EE8               	decfsz	wreg,f,c
  5895  001E9C  D7FE               	bra	u6577
  5896  001E9E  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
  5897  001EA0  D7FC               	bra	u6577
  5898  001EA2  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
  5899  001EA4  D7FA               	bra	u6577
  5900  001EA6  D000               	nop2	
  5901                           
  5902                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
  5903  001EA8  808B               	bsf	3979,0,c	;volatile
  5904                           
  5905                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
  5906  001EAA  0E02               	movlw	2
  5907  001EAC  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
  5908  001EAE  0E04               	movlw	4
  5909  001EB0  6E18               	movwf	??_BlinkOkLeds& (0+255),c
  5910  001EB2  0EBA               	movlw	186
  5911  001EB4                     u6587:
  5912  001EB4  2EE8               	decfsz	wreg,f,c
  5913  001EB6  D7FE               	bra	u6587
  5914  001EB8  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
  5915  001EBA  D7FC               	bra	u6587
  5916  001EBC  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
  5917  001EBE  D7FA               	bra	u6587
  5918  001EC0  D000               	nop2	
  5919  001EC2  4A1B               	infsnz	BlinkOkLeds@idx,f,c
  5920  001EC4  2A1C               	incf	BlinkOkLeds@idx+1,f,c
  5921  001EC6  D7D6               	goto	l3329
  5922  001EC8                     __end_of_BlinkOkLeds:
  5923                           	opt stack 0
  5924                           tblptru	equ	0xFF8
  5925                           tblptrh	equ	0xFF7
  5926                           tblptrl	equ	0xFF6
  5927                           tablat	equ	0xFF5
  5928                           prodh	equ	0xFF4
  5929                           prodl	equ	0xFF3
  5930                           intcon	equ	0xFF2
  5931                           intcon2	equ	0xFF1
  5932                           postinc0	equ	0xFEE
  5933                           wreg	equ	0xFE8
  5934                           postdec1	equ	0xFE5
  5935                           plusw1	equ	0xFE3
  5936                           fsr1l	equ	0xFE1
  5937                           indf2	equ	0xFDF
  5938                           plusw2	equ	0xFDB
  5939                           fsr2h	equ	0xFDA
  5940                           fsr2l	equ	0xFD9
  5941                           status	equ	0xFD8
  5942                           
  5943 ;; *************** function _BlinkErrorLeds *****************
  5944 ;; Defined at:
  5945 ;;		line 13 in file "LedsApp.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  state           1    wreg     enum E7582
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  state           1   28[COMRAM] enum E7582
  5950 ;;  idx             2   26[COMRAM] int 
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      void 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, status,0
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5960 ;;      Params:         0       0       0       0       0       0       0
  5961 ;;      Locals:         3       0       0       0       0       0       0
  5962 ;;      Temps:          3       0       0       0       0       0       0
  5963 ;;      Totals:         6       0       0       0       0       0       0
  5964 ;;Total ram usage:        6 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    3
  5967 ;; This function calls:
  5968 ;;		Nothing
  5969 ;; This function is called by:
  5970 ;;		_main
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           	psect	text41
  5975  001EC8                     __ptext41:
  5976                           	opt stack 0
  5977  001EC8                     _BlinkErrorLeds:
  5978                           	opt stack 27
  5979                           
  5980                           ;incstack = 0
  5981                           ;BlinkErrorLeds@state stored from wreg
  5982  001EC8  6E1D               	movwf	BlinkErrorLeds@state,c
  5983                           
  5984                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
  5985  001ECA  0E00               	movlw	0
  5986  001ECC  6E1C               	movwf	BlinkErrorLeds@idx+1,c
  5987  001ECE  0E00               	movlw	0
  5988  001ED0  6E1B               	movwf	BlinkErrorLeds@idx,c
  5989  001ED2                     l3317:
  5990  001ED2  501D               	movf	BlinkErrorLeds@state,w,c
  5991  001ED4  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  5992  001ED6  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
  5993  001ED8  5018               	movf	??_BlinkErrorLeds,w,c
  5994  001EDA  5C1B               	subwf	BlinkErrorLeds@idx,w,c
  5995  001EDC  501C               	movf	BlinkErrorLeds@idx+1,w,c
  5996  001EDE  0A80               	xorlw	128
  5997  001EE0  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
  5998  001EE2  5019               	movf	??_BlinkErrorLeds+1,w,c
  5999  001EE4  0A80               	xorlw	128
  6000  001EE6  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
  6001  001EE8  B0D8               	btfsc	status,0,c
  6002  001EEA  0012               	return	
  6003                           
  6004                           ;LedsApp.c: 16: {
  6005                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
  6006  001EEC  988A               	bcf	3978,4,c	;volatile
  6007                           
  6008                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
  6009  001EEE  0E02               	movlw	2
  6010  001EF0  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  6011  001EF2  0E04               	movlw	4
  6012  001EF4  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  6013  001EF6  0EBA               	movlw	186
  6014  001EF8                     u6597:
  6015  001EF8  2EE8               	decfsz	wreg,f,c
  6016  001EFA  D7FE               	bra	u6597
  6017  001EFC  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  6018  001EFE  D7FC               	bra	u6597
  6019  001F00  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  6020  001F02  D7FA               	bra	u6597
  6021  001F04  D000               	nop2	
  6022                           
  6023                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
  6024  001F06  888A               	bsf	3978,4,c	;volatile
  6025                           
  6026                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
  6027  001F08  0E02               	movlw	2
  6028  001F0A  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  6029  001F0C  0E04               	movlw	4
  6030  001F0E  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  6031  001F10  0EBA               	movlw	186
  6032  001F12                     u6607:
  6033  001F12  2EE8               	decfsz	wreg,f,c
  6034  001F14  D7FE               	bra	u6607
  6035  001F16  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  6036  001F18  D7FC               	bra	u6607
  6037  001F1A  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  6038  001F1C  D7FA               	bra	u6607
  6039  001F1E  D000               	nop2	
  6040  001F20  4A1B               	infsnz	BlinkErrorLeds@idx,f,c
  6041  001F22  2A1C               	incf	BlinkErrorLeds@idx+1,f,c
  6042  001F24  D7D6               	goto	l3317
  6043  001F26                     __end_of_BlinkErrorLeds:
  6044                           	opt stack 0
  6045                           tblptru	equ	0xFF8
  6046                           tblptrh	equ	0xFF7
  6047                           tblptrl	equ	0xFF6
  6048                           tablat	equ	0xFF5
  6049                           prodh	equ	0xFF4
  6050                           prodl	equ	0xFF3
  6051                           intcon	equ	0xFF2
  6052                           intcon2	equ	0xFF1
  6053                           postinc0	equ	0xFEE
  6054                           wreg	equ	0xFE8
  6055                           postdec1	equ	0xFE5
  6056                           plusw1	equ	0xFE3
  6057                           fsr1l	equ	0xFE1
  6058                           indf2	equ	0xFDF
  6059                           plusw2	equ	0xFDB
  6060                           fsr2h	equ	0xFDA
  6061                           fsr2l	equ	0xFD9
  6062                           status	equ	0xFD8
  6063                           
  6064 ;; *************** function _AdcConvert *****************
  6065 ;; Defined at:
  6066 ;;		line 56 in file "AdcApp.c"
  6067 ;; Parameters:    Size  Location     Type
  6068 ;;		None
  6069 ;; Auto vars:     Size  Location     Type
  6070 ;;  _adcResult      2   11[BANK1 ] unsigned int 
  6071 ;;  idx             1   20[BANK1 ] unsigned char 
  6072 ;;  _adcResult      2   13[BANK1 ] unsigned int 
  6073 ;;  adcRes          2   18[BANK1 ] unsigned int 
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  1    wreg      void 
  6076 ;; Registers used:
  6077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6078 ;; Tracked objects:
  6079 ;;		On entry : 0/0
  6080 ;;		On exit  : 0/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6083 ;;      Params:         0       0       0       0       0       0       0
  6084 ;;      Locals:         0       0      10       0       0       0       0
  6085 ;;      Temps:          0       2       0       0       0       0       0
  6086 ;;      Totals:         0       2      10       0       0       0       0
  6087 ;;Total ram usage:       12 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    8
  6090 ;; This function calls:
  6091 ;;		_ADC_GetConversion
  6092 ;;		_FlashSampleWrite
  6093 ;;		___ftdiv
  6094 ;;		___ftmul
  6095 ;;		___fttol
  6096 ;;		___lwtoft
  6097 ;;		_pow
  6098 ;; This function is called by:
  6099 ;;		_main
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           	psect	text42
  6104  0008E8                     __ptext42:
  6105                           	opt stack 0
  6106  0008E8                     _AdcConvert:
  6107                           	opt stack 22
  6108                           
  6109                           ;AdcApp.c: 61: uint16_t adcRes = 0;
  6110                           
  6111                           ;incstack = 0
  6112  0008E8  0E00               	movlw	0
  6113  0008EA  0101               	movlb	1	; () banked
  6114  0008EC  6FC1               	movwf	(AdcConvert@adcRes+1)& (0+255),b
  6115  0008EE  0E00               	movlw	0
  6116  0008F0  6FC0               	movwf	AdcConvert@adcRes& (0+255),b
  6117                           
  6118                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
  6119  0008F2  0100               	movlb	0	; () banked
  6120  0008F4  51CC               	movf	_adcSampleMode& (0+255),w,b
  6121  0008F6  A4D8               	btfss	status,2,c
  6122  0008F8  D074               	goto	l112
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;AdcApp.c: 64: {
  6126                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
  6127  0008FA  0E00               	movlw	0
  6128  0008FC  0101               	movlb	1	; () banked
  6129  0008FE  6FC2               	movwf	AdcConvert@idx& (0+255),b
  6130  000900                     l6659:
  6131                           
  6132                           ; BSR set to: 1
  6133  000900  0E06               	movlw	6
  6134  000902  65C2               	cpfsgt	AdcConvert@idx& (0+255),b
  6135  000904  D001               	goto	l113
  6136  000906  0012               	return	
  6137  000908                     l113:
  6138                           
  6139                           ; BSR set to: 1
  6140                           ;AdcApp.c: 66: {
  6141                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
  6142                           
  6143                           ; BSR set to: 1
  6144  000908  51C2               	movf	AdcConvert@idx& (0+255),w,b
  6145  00090A  0D01               	mullw	1
  6146  00090C  0E69               	movlw	low _channelArr
  6147  00090E  24F3               	addwf	prodl,w,c
  6148  000910  6EF6               	movwf	tblptrl,c
  6149  000912  0E06               	movlw	high _channelArr
  6150  000914  20F4               	addwfc	prodh,w,c
  6151  000916  6EF7               	movwf	tblptrh,c
  6152  000918                     	if	0	;There are less than 3 active tblptr bytes
  6153  000918                     	endif
  6154  000918  0008               	tblrd		*
  6155  00091A  50F5               	movf	tablat,w,c
  6156  00091C  EC90  F012         	call	_ADC_GetConversion
  6157  000920  C018  F1B9         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
  6158  000924  C019  F1BA         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
  6159                           
  6160                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
  6161  000928  0E00               	movlw	0
  6162  00092A  0100               	movlb	0	; () banked
  6163  00092C  6FA5               	movwf	pow@y& (0+255),b
  6164  00092E  0E20               	movlw	32
  6165  000930  6FA6               	movwf	(pow@y+1)& (0+255),b
  6166  000932  0E41               	movlw	65
  6167  000934  6FA7               	movwf	(pow@y+2)& (0+255),b
  6168  000936  0E00               	movlw	0
  6169  000938  6FA2               	movwf	pow@x& (0+255),b
  6170  00093A  0E00               	movlw	0
  6171  00093C  6FA3               	movwf	(pow@x+1)& (0+255),b
  6172  00093E  0E40               	movlw	64
  6173  000940  6FA4               	movwf	(pow@x+2)& (0+255),b
  6174  000942  ECEA  F006         	call	_pow	;wreg free
  6175  000946  C0A2  F1BD         	movff	?_pow,_AdcConvert$3288
  6176  00094A  C0A3  F1BE         	movff	?_pow+1,_AdcConvert$3288+1
  6177  00094E  C0A4  F1BF         	movff	?_pow+2,_AdcConvert$3288+2
  6178                           
  6179                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
  6180  000952  0EC0               	movlw	192
  6181  000954  0100               	movlb	0	; () banked
  6182  000956  6F6C               	movwf	___ftmul@f2& (0+255),b
  6183  000958  0E50               	movlw	80
  6184  00095A  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  6185  00095C  0E45               	movlw	69
  6186  00095E  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  6187  000960  C1BD  F02C         	movff	_AdcConvert$3288,___ftdiv@f2
  6188  000964  C1BE  F02D         	movff	_AdcConvert$3288+1,___ftdiv@f2+1
  6189  000968  C1BF  F02E         	movff	_AdcConvert$3288+2,___ftdiv@f2+2
  6190  00096C  C1B9  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
  6191  000970  C1BA  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
  6192  000974  EC0C  F013         	call	___lwtoft	;wreg free
  6193  000978  C020  F029         	movff	?___lwtoft,___ftdiv@f1
  6194  00097C  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
  6195  000980  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
  6196  000984  ECAF  F009         	call	___ftdiv	;wreg free
  6197  000988  C029  F069         	movff	?___ftdiv,___ftmul@f1
  6198  00098C  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  6199  000990  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  6200  000994  EC34  F009         	call	___ftmul	;wreg free
  6201  000998  C069  F078         	movff	?___ftmul,___fttol@f1
  6202  00099C  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  6203  0009A0  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  6204  0009A4  ECB8  F008         	call	___fttol	;wreg free
  6205  0009A8  C078  F1C0         	movff	?___fttol,AdcConvert@adcRes
  6206  0009AC  C079  F1C1         	movff	?___fttol+1,AdcConvert@adcRes+1
  6207                           
  6208                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
  6209  0009B0  C1C0  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
  6210  0009B4  C1C1  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
  6211  0009B8  0101               	movlb	1	; () banked
  6212  0009BA  29C2               	incf	AdcConvert@idx& (0+255),w,b
  6213  0009BC  6E2F               	movwf	FlashSampleWrite@channelNum,c
  6214  0009BE  EC3B  F008         	call	_FlashSampleWrite	;wreg free
  6215                           
  6216                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
  6217  0009C2  0E03               	movlw	3
  6218  0009C4  0100               	movlb	0	; () banked
  6219  0009C6  6FA9               	movwf	(??_AdcConvert+1)& (0+255),b
  6220  0009C8  0E8A               	movlw	138
  6221  0009CA  6FA8               	movwf	??_AdcConvert& (0+255),b
  6222  0009CC  0E55               	movlw	85
  6223  0009CE                     u6617:
  6224  0009CE  2EE8               	decfsz	wreg,f,c
  6225  0009D0  D7FE               	bra	u6617
  6226  0009D2  2FA8               	decfsz	??_AdcConvert& (0+255),f,b
  6227  0009D4  D7FC               	bra	u6617
  6228  0009D6  2FA9               	decfsz	(??_AdcConvert+1)& (0+255),f,b
  6229  0009D8  D7FA               	bra	u6617
  6230  0009DA  D000               	nop2	
  6231  0009DC  0101               	movlb	1	; () banked
  6232  0009DE  2BC2               	incf	AdcConvert@idx& (0+255),f,b
  6233  0009E0  D78F               	goto	l6659
  6234  0009E2                     l112:
  6235                           
  6236                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
  6237                           
  6238                           ; BSR set to: 1
  6239  0009E2  0100               	movlb	0	; () banked
  6240  0009E4  05CC               	decf	_adcSampleMode& (0+255),w,b
  6241  0009E6  A4D8               	btfss	status,2,c
  6242  0009E8  0012               	return	
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;AdcApp.c: 74: {
  6246                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
  6247  0009EA  51CB               	movf	_channel& (0+255),w,b
  6248  0009EC  0D01               	mullw	1
  6249  0009EE  0E69               	movlw	low _channelArr
  6250  0009F0  24F3               	addwf	prodl,w,c
  6251  0009F2  6EF6               	movwf	tblptrl,c
  6252  0009F4  0E06               	movlw	high _channelArr
  6253  0009F6  20F4               	addwfc	prodh,w,c
  6254  0009F8  6EF7               	movwf	tblptrh,c
  6255  0009FA                     	if	0	;There are less than 3 active tblptr bytes
  6256  0009FA                     	endif
  6257  0009FA  0008               	tblrd		*
  6258  0009FC  50F5               	movf	tablat,w,c
  6259  0009FE  EC90  F012         	call	_ADC_GetConversion
  6260  000A02  C018  F1BB         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_332
  6261  000A06  C019  F1BC         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_332+1
  6262                           
  6263                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
  6264  000A0A  0E00               	movlw	0
  6265  000A0C  0100               	movlb	0	; () banked
  6266  000A0E  6FA5               	movwf	pow@y& (0+255),b
  6267  000A10  0E20               	movlw	32
  6268  000A12  6FA6               	movwf	(pow@y+1)& (0+255),b
  6269  000A14  0E41               	movlw	65
  6270  000A16  6FA7               	movwf	(pow@y+2)& (0+255),b
  6271  000A18  0E00               	movlw	0
  6272  000A1A  6FA2               	movwf	pow@x& (0+255),b
  6273  000A1C  0E00               	movlw	0
  6274  000A1E  6FA3               	movwf	(pow@x+1)& (0+255),b
  6275  000A20  0E40               	movlw	64
  6276  000A22  6FA4               	movwf	(pow@x+2)& (0+255),b
  6277  000A24  ECEA  F006         	call	_pow	;wreg free
  6278  000A28  C0A2  F1BD         	movff	?_pow,_AdcConvert$3288
  6279  000A2C  C0A3  F1BE         	movff	?_pow+1,_AdcConvert$3288+1
  6280  000A30  C0A4  F1BF         	movff	?_pow+2,_AdcConvert$3288+2
  6281                           
  6282                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
  6283  000A34  0EC0               	movlw	192
  6284  000A36  0100               	movlb	0	; () banked
  6285  000A38  6F6C               	movwf	___ftmul@f2& (0+255),b
  6286  000A3A  0E50               	movlw	80
  6287  000A3C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  6288  000A3E  0E45               	movlw	69
  6289  000A40  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  6290  000A42  C1BD  F02C         	movff	_AdcConvert$3288,___ftdiv@f2
  6291  000A46  C1BE  F02D         	movff	_AdcConvert$3288+1,___ftdiv@f2+1
  6292  000A4A  C1BF  F02E         	movff	_AdcConvert$3288+2,___ftdiv@f2+2
  6293  000A4E  C1BB  F020         	movff	AdcConvert@_adcResult_332,___lwtoft@c
  6294  000A52  C1BC  F021         	movff	AdcConvert@_adcResult_332+1,___lwtoft@c+1
  6295  000A56  EC0C  F013         	call	___lwtoft	;wreg free
  6296  000A5A  C020  F029         	movff	?___lwtoft,___ftdiv@f1
  6297  000A5E  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
  6298  000A62  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
  6299  000A66  ECAF  F009         	call	___ftdiv	;wreg free
  6300  000A6A  C029  F069         	movff	?___ftdiv,___ftmul@f1
  6301  000A6E  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  6302  000A72  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  6303  000A76  EC34  F009         	call	___ftmul	;wreg free
  6304  000A7A  C069  F078         	movff	?___ftmul,___fttol@f1
  6305  000A7E  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  6306  000A82  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  6307  000A86  ECB8  F008         	call	___fttol	;wreg free
  6308  000A8A  C078  F1C0         	movff	?___fttol,AdcConvert@adcRes
  6309  000A8E  C079  F1C1         	movff	?___fttol+1,AdcConvert@adcRes+1
  6310                           
  6311                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
  6312  000A92  C1C0  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
  6313  000A96  C1C1  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
  6314  000A9A  0E01               	movlw	1
  6315  000A9C  6E2F               	movwf	FlashSampleWrite@channelNum,c
  6316  000A9E  EC3B  F008         	call	_FlashSampleWrite	;wreg free
  6317  000AA2  0012               	return	
  6318  000AA4                     __end_of_AdcConvert:
  6319                           	opt stack 0
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           intcon	equ	0xFF2
  6327                           intcon2	equ	0xFF1
  6328                           postinc0	equ	0xFEE
  6329                           wreg	equ	0xFE8
  6330                           postdec1	equ	0xFE5
  6331                           plusw1	equ	0xFE3
  6332                           fsr1l	equ	0xFE1
  6333                           indf2	equ	0xFDF
  6334                           plusw2	equ	0xFDB
  6335                           fsr2h	equ	0xFDA
  6336                           fsr2l	equ	0xFD9
  6337                           status	equ	0xFD8
  6338                           
  6339 ;; *************** function _pow *****************
  6340 ;; Defined at:
  6341 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;  x               3   66[BANK0 ] void 
  6344 ;;  y               3   69[BANK0 ] void 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  yi              4    7[BANK1 ] unsigned long 
  6347 ;;  sign            1    6[BANK1 ] unsigned char 
  6348 ;; Return value:  Size  Location     Type
  6349 ;;                  3   66[BANK0 ] unsigned char 
  6350 ;; Registers used:
  6351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6357 ;;      Params:         0       6       0       0       0       0       0
  6358 ;;      Locals:         0       0      11       0       0       0       0
  6359 ;;      Temps:          0       0       0       0       0       0       0
  6360 ;;      Totals:         0       6      11       0       0       0       0
  6361 ;;Total ram usage:       17 bytes
  6362 ;; Hardware stack levels used:    1
  6363 ;; Hardware stack levels required when called:    7
  6364 ;; This function calls:
  6365 ;;		___ftge
  6366 ;;		___ftmul
  6367 ;;		___ftneg
  6368 ;;		___fttol
  6369 ;;		___lltoft
  6370 ;;		_exp
  6371 ;;		_log
  6372 ;; This function is called by:
  6373 ;;		_AdcConvert
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           	psect	text43
  6378  000DD4                     __ptext43:
  6379                           	opt stack 0
  6380  000DD4                     _pow:
  6381                           	opt stack 22
  6382                           
  6383                           ;incstack = 0
  6384  000DD4  0E00               	movlw	0
  6385  000DD6  0101               	movlb	1	; () banked
  6386  000DD8  6FB4               	movwf	pow@sign& (0+255),b
  6387                           
  6388                           ; BSR set to: 1
  6389  000DDA  0100               	movlb	0	; () banked
  6390  000DDC  51A2               	movf	pow@x& (0+255),w,b
  6391  000DDE  11A3               	iorwf	(pow@x+1)& (0+255),w,b
  6392  000DE0  11A4               	iorwf	(pow@x+2)& (0+255),w,b
  6393  000DE2  A4D8               	btfss	status,2,c
  6394  000DE4  D01D               	goto	l1868
  6395                           
  6396                           ; BSR set to: 0
  6397  000DE6  0E00               	movlw	0
  6398  000DE8  6E18               	movwf	___ftge@ff1,c
  6399  000DEA  0E00               	movlw	0
  6400  000DEC  6E19               	movwf	___ftge@ff1+1,c
  6401  000DEE  0E00               	movlw	0
  6402  000DF0  6E1A               	movwf	___ftge@ff1+2,c
  6403  000DF2  C0A5  F01B         	movff	pow@y,___ftge@ff2
  6404  000DF6  C0A6  F01C         	movff	pow@y+1,___ftge@ff2+1
  6405  000DFA  C0A7  F01D         	movff	pow@y+2,___ftge@ff2+2
  6406  000DFE  EC84  F00D         	call	___ftge	;wreg free
  6407  000E02  A0D8               	btfss	status,0,c
  6408  000E04  D005               	goto	l1869
  6409  000E06  0E00               	movlw	0
  6410  000E08  0100               	movlb	0	; () banked
  6411  000E0A  6FC3               	movwf	(_errno+1)& (0+255),b
  6412  000E0C  0E21               	movlw	33
  6413  000E0E  6FC2               	movwf	_errno& (0+255),b
  6414  000E10                     l1869:
  6415  000E10  0E00               	movlw	0
  6416  000E12  0100               	movlb	0	; () banked
  6417  000E14  6FA2               	movwf	?_pow& (0+255),b
  6418  000E16  0E00               	movlw	0
  6419  000E18  6FA3               	movwf	(?_pow+1)& (0+255),b
  6420  000E1A  0E00               	movlw	0
  6421  000E1C  6FA4               	movwf	(?_pow+2)& (0+255),b
  6422                           
  6423                           ; BSR set to: 0
  6424  000E1E  0012               	return	
  6425  000E20                     l1868:
  6426                           
  6427                           ; BSR set to: 0
  6428                           
  6429                           ; BSR set to: 0
  6430  000E20  51A5               	movf	pow@y& (0+255),w,b
  6431  000E22  11A6               	iorwf	(pow@y+1)& (0+255),w,b
  6432  000E24  11A7               	iorwf	(pow@y+2)& (0+255),w,b
  6433  000E26  A4D8               	btfss	status,2,c
  6434  000E28  D007               	goto	l1871
  6435                           
  6436                           ; BSR set to: 0
  6437  000E2A  0E00               	movlw	0
  6438  000E2C  6FA2               	movwf	?_pow& (0+255),b
  6439  000E2E  0E80               	movlw	128
  6440  000E30  6FA3               	movwf	(?_pow+1)& (0+255),b
  6441  000E32  0E3F               	movlw	63
  6442  000E34  6FA4               	movwf	(?_pow+2)& (0+255),b
  6443                           
  6444                           ; BSR set to: 0
  6445  000E36  0012               	return	
  6446  000E38                     l1871:
  6447                           
  6448                           ; BSR set to: 0
  6449                           
  6450                           ; BSR set to: 0
  6451  000E38  AFA4               	btfss	(pow@x+2)& (0+255),7,b
  6452  000E3A  D042               	goto	l1872
  6453                           
  6454                           ; BSR set to: 0
  6455  000E3C  C0A5  F078         	movff	pow@y,___fttol@f1
  6456  000E40  C0A6  F079         	movff	pow@y+1,___fttol@f1+1
  6457  000E44  C0A7  F07A         	movff	pow@y+2,___fttol@f1+2
  6458  000E48  ECB8  F008         	call	___fttol	;wreg free
  6459  000E4C  C078  F1B5         	movff	?___fttol,pow@yi
  6460  000E50  C079  F1B6         	movff	?___fttol+1,pow@yi+1
  6461  000E54  C07A  F1B7         	movff	?___fttol+2,pow@yi+2
  6462  000E58  C07B  F1B8         	movff	?___fttol+3,pow@yi+3
  6463  000E5C  C1B5  F020         	movff	pow@yi,___lltoft@c
  6464  000E60  C1B6  F021         	movff	pow@yi+1,___lltoft@c+1
  6465  000E64  C1B7  F022         	movff	pow@yi+2,___lltoft@c+2
  6466  000E68  C1B8  F023         	movff	pow@yi+3,___lltoft@c+3
  6467  000E6C  ECC1  F00F         	call	___lltoft	;wreg free
  6468  000E70  0100               	movlb	0	; () banked
  6469  000E72  51A5               	movf	pow@y& (0+255),w,b
  6470  000E74  1820               	xorwf	?___lltoft,w,c
  6471  000E76  E107               	bnz	u5890
  6472  000E78  51A6               	movf	(pow@y+1)& (0+255),w,b
  6473  000E7A  1821               	xorwf	?___lltoft+1,w,c
  6474  000E7C  E104               	bnz	u5890
  6475  000E7E  51A7               	movf	(pow@y+2)& (0+255),w,b
  6476  000E80  1822               	xorwf	?___lltoft+2,w,c
  6477  000E82  B4D8               	btfsc	status,2,c
  6478  000E84  D00B               	goto	l1873
  6479  000E86                     u5890:
  6480                           
  6481                           ; BSR set to: 0
  6482  000E86  0E00               	movlw	0
  6483  000E88  6FC3               	movwf	(_errno+1)& (0+255),b
  6484  000E8A  0E21               	movlw	33
  6485  000E8C  6FC2               	movwf	_errno& (0+255),b
  6486  000E8E  0E00               	movlw	0
  6487  000E90  6FA2               	movwf	?_pow& (0+255),b
  6488  000E92  0E00               	movlw	0
  6489  000E94  6FA3               	movwf	(?_pow+1)& (0+255),b
  6490  000E96  0E00               	movlw	0
  6491  000E98  6FA4               	movwf	(?_pow+2)& (0+255),b
  6492                           
  6493                           ; BSR set to: 0
  6494  000E9A  0012               	return	
  6495  000E9C                     l1873:
  6496                           
  6497                           ; BSR set to: 0
  6498                           
  6499                           ; BSR set to: 0
  6500  000E9C  0101               	movlb	1	; () banked
  6501  000E9E  51B5               	movf	pow@yi& (0+255),w,b
  6502  000EA0  0B01               	andlw	1
  6503  000EA2  6FB4               	movwf	pow@sign& (0+255),b
  6504                           
  6505                           ; BSR set to: 1
  6506  000EA4  C0A2  F018         	movff	pow@x,___ftneg@f1
  6507  000EA8  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
  6508  000EAC  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
  6509  000EB0  ECFA  F012         	call	___ftneg	;wreg free
  6510  000EB4  C018  F0A2         	movff	?___ftneg,pow@x
  6511  000EB8  C019  F0A3         	movff	?___ftneg+1,pow@x+1
  6512  000EBC  C01A  F0A4         	movff	?___ftneg+2,pow@x+2
  6513  000EC0                     l1872:
  6514  000EC0  C0A2  F090         	movff	pow@x,log@x
  6515  000EC4  C0A3  F091         	movff	pow@x+1,log@x+1
  6516  000EC8  C0A4  F092         	movff	pow@x+2,log@x+2
  6517  000ECC  ECAA  F007         	call	_log	;wreg free
  6518  000ED0  C090  F1AE         	movff	?_log,_pow$3289
  6519  000ED4  C091  F1AF         	movff	?_log+1,_pow$3289+1
  6520  000ED8  C092  F1B0         	movff	?_log+2,_pow$3289+2
  6521  000EDC  C1AE  F069         	movff	_pow$3289,___ftmul@f1
  6522  000EE0  C1AF  F06A         	movff	_pow$3289+1,___ftmul@f1+1
  6523  000EE4  C1B0  F06B         	movff	_pow$3289+2,___ftmul@f1+2
  6524  000EE8  C0A5  F06C         	movff	pow@y,___ftmul@f2
  6525  000EEC  C0A6  F06D         	movff	pow@y+1,___ftmul@f2+1
  6526  000EF0  C0A7  F06E         	movff	pow@y+2,___ftmul@f2+2
  6527  000EF4  EC34  F009         	call	___ftmul	;wreg free
  6528  000EF8  C069  F1B1         	movff	?___ftmul,_pow$3290
  6529  000EFC  C06A  F1B2         	movff	?___ftmul+1,_pow$3290+1
  6530  000F00  C06B  F1B3         	movff	?___ftmul+2,_pow$3290+2
  6531  000F04  C1B1  F099         	movff	_pow$3290,exp@x
  6532  000F08  C1B2  F09A         	movff	_pow$3290+1,exp@x+1
  6533  000F0C  C1B3  F09B         	movff	_pow$3290+2,exp@x+2
  6534  000F10  EC7B  F003         	call	_exp	;wreg free
  6535  000F14  C099  F0A2         	movff	?_exp,pow@x
  6536  000F18  C09A  F0A3         	movff	?_exp+1,pow@x+1
  6537  000F1C  C09B  F0A4         	movff	?_exp+2,pow@x+2
  6538  000F20  0101               	movlb	1	; () banked
  6539  000F22  51B4               	movf	pow@sign& (0+255),w,b
  6540  000F24  B4D8               	btfsc	status,2,c
  6541  000F26  D00F               	goto	l1874
  6542                           
  6543                           ; BSR set to: 1
  6544  000F28  C0A2  F018         	movff	pow@x,___ftneg@f1
  6545  000F2C  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
  6546  000F30  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
  6547  000F34  ECFA  F012         	call	___ftneg	;wreg free
  6548  000F38  C018  F0A2         	movff	?___ftneg,?_pow
  6549  000F3C  C019  F0A3         	movff	?___ftneg+1,?_pow+1
  6550  000F40  C01A  F0A4         	movff	?___ftneg+2,?_pow+2
  6551  000F44  0012               	return	
  6552  000F46                     l1874:
  6553                           
  6554                           ; BSR set to: 1
  6555  000F46  C0A2  F0A2         	movff	pow@x,?_pow
  6556  000F4A  C0A3  F0A3         	movff	pow@x+1,?_pow+1
  6557  000F4E  C0A4  F0A4         	movff	pow@x+2,?_pow+2
  6558  000F52  0012               	return		;funcret
  6559  000F54                     __end_of_pow:
  6560                           	opt stack 0
  6561                           tblptru	equ	0xFF8
  6562                           tblptrh	equ	0xFF7
  6563                           tblptrl	equ	0xFF6
  6564                           tablat	equ	0xFF5
  6565                           prodh	equ	0xFF4
  6566                           prodl	equ	0xFF3
  6567                           intcon	equ	0xFF2
  6568                           intcon2	equ	0xFF1
  6569                           postinc0	equ	0xFEE
  6570                           wreg	equ	0xFE8
  6571                           postdec1	equ	0xFE5
  6572                           plusw1	equ	0xFE3
  6573                           fsr1l	equ	0xFE1
  6574                           indf2	equ	0xFDF
  6575                           plusw2	equ	0xFDB
  6576                           fsr2h	equ	0xFDA
  6577                           fsr2l	equ	0xFD9
  6578                           status	equ	0xFD8
  6579                           
  6580 ;; *************** function _log *****************
  6581 ;; Defined at:
  6582 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  x               3   48[BANK0 ] unsigned char 
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;  exponent        2   51[BANK0 ] int 
  6587 ;; Return value:  Size  Location     Type
  6588 ;;                  3   48[BANK0 ] int 
  6589 ;; Registers used:
  6590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6596 ;;      Params:         0       3       0       0       0       0       0
  6597 ;;      Locals:         0       2       0       0       0       0       0
  6598 ;;      Temps:          0       0       0       0       0       0       0
  6599 ;;      Totals:         0       5       0       0       0       0       0
  6600 ;;Total ram usage:        5 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    6
  6603 ;; This function calls:
  6604 ;;		___awtoft
  6605 ;;		___ftadd
  6606 ;;		___ftmul
  6607 ;;		_eval_poly
  6608 ;;		_frexp
  6609 ;; This function is called by:
  6610 ;;		_pow
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text44
  6615  000F54                     __ptext44:
  6616                           	opt stack 0
  6617  000F54                     _log:
  6618                           	opt stack 22
  6619                           
  6620                           ;incstack = 0
  6621  000F54  0100               	movlb	0	; () banked
  6622  000F56  AF92               	btfss	(log@x+2)& (0+255),7,b
  6623  000F58  D00B               	goto	l2130
  6624                           
  6625                           ; BSR set to: 0
  6626  000F5A  0E00               	movlw	0
  6627  000F5C  6FC3               	movwf	(_errno+1)& (0+255),b
  6628  000F5E  0E21               	movlw	33
  6629  000F60  6FC2               	movwf	_errno& (0+255),b
  6630  000F62  0E00               	movlw	0
  6631  000F64  6F90               	movwf	?_log& (0+255),b
  6632  000F66  0E00               	movlw	0
  6633  000F68  6F91               	movwf	(?_log+1)& (0+255),b
  6634  000F6A  0E00               	movlw	0
  6635  000F6C  6F92               	movwf	(?_log+2)& (0+255),b
  6636                           
  6637                           ; BSR set to: 0
  6638  000F6E  0012               	return	
  6639  000F70                     l2130:
  6640                           
  6641                           ; BSR set to: 0
  6642                           
  6643                           ; BSR set to: 0
  6644  000F70  5190               	movf	log@x& (0+255),w,b
  6645  000F72  1191               	iorwf	(log@x+1)& (0+255),w,b
  6646  000F74  1192               	iorwf	(log@x+2)& (0+255),w,b
  6647  000F76  A4D8               	btfss	status,2,c
  6648  000F78  D00B               	goto	l2132
  6649                           
  6650                           ; BSR set to: 0
  6651  000F7A  0E00               	movlw	0
  6652  000F7C  6FC3               	movwf	(_errno+1)& (0+255),b
  6653  000F7E  0E22               	movlw	34
  6654  000F80  6FC2               	movwf	_errno& (0+255),b
  6655  000F82  0E00               	movlw	0
  6656  000F84  6F90               	movwf	?_log& (0+255),b
  6657  000F86  0E00               	movlw	0
  6658  000F88  6F91               	movwf	(?_log+1)& (0+255),b
  6659  000F8A  0E00               	movlw	0
  6660  000F8C  6F92               	movwf	(?_log+2)& (0+255),b
  6661                           
  6662                           ; BSR set to: 0
  6663  000F8E  0012               	return	
  6664  000F90                     l2132:
  6665                           
  6666                           ; BSR set to: 0
  6667                           
  6668                           ; BSR set to: 0
  6669  000F90  0E00               	movlw	0
  6670  000F92  6F6C               	movwf	___ftmul@f2& (0+255),b
  6671  000F94  0E00               	movlw	0
  6672  000F96  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  6673  000F98  0E40               	movlw	64
  6674  000F9A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  6675  000F9C  0E93               	movlw	low log@exponent
  6676  000F9E  6E1B               	movwf	frexp@eptr,c
  6677  000FA0  0E00               	movlw	high log@exponent
  6678  000FA2  6E1C               	movwf	frexp@eptr+1,c
  6679  000FA4  C090  F018         	movff	log@x,frexp@value
  6680  000FA8  C091  F019         	movff	log@x+1,frexp@value+1
  6681  000FAC  C092  F01A         	movff	log@x+2,frexp@value+2
  6682  000FB0  EC3C  F00D         	call	_frexp	;wreg free
  6683  000FB4  C018  F069         	movff	?_frexp,___ftmul@f1
  6684  000FB8  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
  6685  000FBC  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
  6686  000FC0  EC34  F009         	call	___ftmul	;wreg free
  6687  000FC4  C069  F078         	movff	?___ftmul,___ftadd@f1
  6688  000FC8  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
  6689  000FCC  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
  6690  000FD0  0E00               	movlw	0
  6691  000FD2  0100               	movlb	0	; () banked
  6692  000FD4  6F7B               	movwf	___ftadd@f2& (0+255),b
  6693  000FD6  0E80               	movlw	128
  6694  000FD8  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
  6695  000FDA  0EBF               	movlw	191
  6696  000FDC  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
  6697  000FDE  EC52  F005         	call	___ftadd	;wreg free
  6698  000FE2  C078  F090         	movff	?___ftadd,log@x
  6699  000FE6  C079  F091         	movff	?___ftadd+1,log@x+1
  6700  000FEA  C07A  F092         	movff	?___ftadd+2,log@x+2
  6701  000FEE  0100               	movlb	0	; () banked
  6702  000FF0  0793               	decf	log@exponent& (0+255),f,b
  6703  000FF2  A0D8               	btfss	status,0,c
  6704  000FF4  0794               	decf	(log@exponent+1)& (0+255),f,b
  6705                           
  6706                           ; BSR set to: 0
  6707  000FF6  C090  F084         	movff	log@x,eval_poly@x
  6708  000FFA  C091  F085         	movff	log@x+1,eval_poly@x+1
  6709  000FFE  C092  F086         	movff	log@x+2,eval_poly@x+2
  6710  001002  0E8E               	movlw	low log@coeff
  6711  001004  6F87               	movwf	eval_poly@d& (0+255),b
  6712  001006  0E06               	movlw	high log@coeff
  6713  001008  6F88               	movwf	(eval_poly@d+1)& (0+255),b
  6714  00100A  0E00               	movlw	0
  6715  00100C  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
  6716  00100E  0E08               	movlw	8
  6717  001010  6F89               	movwf	eval_poly@n& (0+255),b
  6718  001012  EC04  F00B         	call	_eval_poly	;wreg free
  6719  001016  C084  F090         	movff	?_eval_poly,log@x
  6720  00101A  C085  F091         	movff	?_eval_poly+1,log@x+1
  6721  00101E  C086  F092         	movff	?_eval_poly+2,log@x+2
  6722  001022  0E72               	movlw	114
  6723  001024  0100               	movlb	0	; () banked
  6724  001026  6F6C               	movwf	___ftmul@f2& (0+255),b
  6725  001028  0E31               	movlw	49
  6726  00102A  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  6727  00102C  0E3F               	movlw	63
  6728  00102E  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  6729  001030  C093  F020         	movff	log@exponent,___awtoft@c
  6730  001034  C094  F021         	movff	log@exponent+1,___awtoft@c+1
  6731  001038  ECEE  F011         	call	___awtoft	;wreg free
  6732  00103C  C020  F069         	movff	?___awtoft,___ftmul@f1
  6733  001040  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
  6734  001044  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
  6735  001048  EC34  F009         	call	___ftmul	;wreg free
  6736  00104C  C069  F078         	movff	?___ftmul,___ftadd@f1
  6737  001050  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
  6738  001054  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
  6739  001058  C090  F07B         	movff	log@x,___ftadd@f2
  6740  00105C  C091  F07C         	movff	log@x+1,___ftadd@f2+1
  6741  001060  C092  F07D         	movff	log@x+2,___ftadd@f2+2
  6742  001064  EC52  F005         	call	___ftadd	;wreg free
  6743  001068  C078  F090         	movff	?___ftadd,?_log
  6744  00106C  C079  F091         	movff	?___ftadd+1,?_log+1
  6745  001070  C07A  F092         	movff	?___ftadd+2,?_log+2
  6746  001074  0012               	return	
  6747  001076                     __end_of_log:
  6748                           	opt stack 0
  6749                           tblptru	equ	0xFF8
  6750                           tblptrh	equ	0xFF7
  6751                           tblptrl	equ	0xFF6
  6752                           tablat	equ	0xFF5
  6753                           prodh	equ	0xFF4
  6754                           prodl	equ	0xFF3
  6755                           intcon	equ	0xFF2
  6756                           intcon2	equ	0xFF1
  6757                           postinc0	equ	0xFEE
  6758                           wreg	equ	0xFE8
  6759                           postdec1	equ	0xFE5
  6760                           plusw1	equ	0xFE3
  6761                           fsr1l	equ	0xFE1
  6762                           indf2	equ	0xFDF
  6763                           plusw2	equ	0xFDB
  6764                           fsr2h	equ	0xFDA
  6765                           fsr2l	equ	0xFD9
  6766                           status	equ	0xFD8
  6767                           
  6768 ;; *************** function _exp *****************
  6769 ;; Defined at:
  6770 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;  x               3   57[BANK0 ] int 
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;  exponent        2   63[BANK0 ] int 
  6775 ;;  sign            1   65[BANK0 ] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  3   57[BANK0 ] unsigned char 
  6778 ;; Registers used:
  6779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6785 ;;      Params:         0       3       0       0       0       0       0
  6786 ;;      Locals:         0       6       0       0       0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0
  6788 ;;      Totals:         0       9       0       0       0       0       0
  6789 ;;Total ram usage:        9 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    6
  6792 ;; This function calls:
  6793 ;;		___awtoft
  6794 ;;		___ftdiv
  6795 ;;		___ftge
  6796 ;;		___ftmul
  6797 ;;		___ftneg
  6798 ;;		___ftsub
  6799 ;;		___fttol
  6800 ;;		_eval_poly
  6801 ;;		_floor
  6802 ;;		_ldexp
  6803 ;; This function is called by:
  6804 ;;		_pow
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           	psect	text45
  6809  0006F6                     __ptext45:
  6810                           	opt stack 0
  6811  0006F6                     _exp:
  6812                           	opt stack 22
  6813                           
  6814                           ;incstack = 0
  6815  0006F6  0100               	movlb	0	; () banked
  6816  0006F8  5199               	movf	exp@x& (0+255),w,b
  6817  0006FA  119A               	iorwf	(exp@x+1)& (0+255),w,b
  6818  0006FC  119B               	iorwf	(exp@x+2)& (0+255),w,b
  6819  0006FE  A4D8               	btfss	status,2,c
  6820  000700  D007               	goto	l2066
  6821                           
  6822                           ; BSR set to: 0
  6823  000702  0E00               	movlw	0
  6824  000704  6F99               	movwf	?_exp& (0+255),b
  6825  000706  0E80               	movlw	128
  6826  000708  6F9A               	movwf	(?_exp+1)& (0+255),b
  6827  00070A  0E3F               	movlw	63
  6828  00070C  6F9B               	movwf	(?_exp+2)& (0+255),b
  6829                           
  6830                           ; BSR set to: 0
  6831  00070E  0012               	return	
  6832  000710                     l2066:
  6833                           
  6834                           ; BSR set to: 0
  6835                           
  6836                           ; BSR set to: 0
  6837  000710  0E72               	movlw	114
  6838  000712  6E18               	movwf	___ftge@ff1,c
  6839  000714  0E31               	movlw	49
  6840  000716  6E19               	movwf	___ftge@ff1+1,c
  6841  000718  0E44               	movlw	68
  6842  00071A  6E1A               	movwf	___ftge@ff1+2,c
  6843  00071C  C099  F01B         	movff	exp@x,___ftge@ff2
  6844  000720  C09A  F01C         	movff	exp@x+1,___ftge@ff2+1
  6845  000724  C09B  F01D         	movff	exp@x+2,___ftge@ff2+2
  6846  000728  EC84  F00D         	call	___ftge	;wreg free
  6847  00072C  B0D8               	btfsc	status,0,c
  6848  00072E  D00C               	goto	l2068
  6849  000730  0E00               	movlw	0
  6850  000732  0100               	movlb	0	; () banked
  6851  000734  6FC3               	movwf	(_errno+1)& (0+255),b
  6852  000736  0E22               	movlw	34
  6853  000738  6FC2               	movwf	_errno& (0+255),b
  6854  00073A  0EFF               	movlw	255
  6855  00073C  6F99               	movwf	?_exp& (0+255),b
  6856  00073E  0E7F               	movlw	127
  6857  000740  6F9A               	movwf	(?_exp+1)& (0+255),b
  6858  000742  0E7F               	movlw	127
  6859  000744  6F9B               	movwf	(?_exp+2)& (0+255),b
  6860                           
  6861                           ; BSR set to: 0
  6862  000746  0012               	return	
  6863  000748                     l2068:
  6864                           
  6865                           ; BSR set to: 0
  6866  000748  C099  F018         	movff	exp@x,___ftge@ff1
  6867  00074C  C09A  F019         	movff	exp@x+1,___ftge@ff1+1
  6868  000750  C09B  F01A         	movff	exp@x+2,___ftge@ff1+2
  6869  000754  0E49               	movlw	73
  6870  000756  6E1B               	movwf	___ftge@ff2,c
  6871  000758  0E3A               	movlw	58
  6872  00075A  6E1C               	movwf	___ftge@ff2+1,c
  6873  00075C  0EC4               	movlw	196
  6874  00075E  6E1D               	movwf	___ftge@ff2+2,c
  6875  000760  EC84  F00D         	call	___ftge	;wreg free
  6876  000764  B0D8               	btfsc	status,0,c
  6877  000766  D00C               	goto	l2069
  6878  000768  0E00               	movlw	0
  6879  00076A  0100               	movlb	0	; () banked
  6880  00076C  6FC3               	movwf	(_errno+1)& (0+255),b
  6881  00076E  0E22               	movlw	34
  6882  000770  6FC2               	movwf	_errno& (0+255),b
  6883  000772  0E00               	movlw	0
  6884  000774  6F99               	movwf	?_exp& (0+255),b
  6885  000776  0E00               	movlw	0
  6886  000778  6F9A               	movwf	(?_exp+1)& (0+255),b
  6887  00077A  0E00               	movlw	0
  6888  00077C  6F9B               	movwf	(?_exp+2)& (0+255),b
  6889                           
  6890                           ; BSR set to: 0
  6891  00077E  0012               	return	
  6892  000780                     l2069:
  6893                           
  6894                           ; BSR set to: 0
  6895  000780  0100               	movlb	0	; () banked
  6896  000782  AF9B               	btfss	(exp@x+2)& (0+255),7,b
  6897  000784  D002               	goto	u5790
  6898  000786  0E01               	movlw	1
  6899  000788  D001               	goto	u5800
  6900  00078A                     u5790:
  6901  00078A  0E00               	movlw	0
  6902  00078C                     u5800:
  6903  00078C  6FA1               	movwf	exp@sign& (0+255),b
  6904                           
  6905                           ; BSR set to: 0
  6906  00078E  51A1               	movf	exp@sign& (0+255),w,b
  6907  000790  B4D8               	btfsc	status,2,c
  6908  000792  D00E               	goto	l2070
  6909                           
  6910                           ; BSR set to: 0
  6911  000794  C099  F018         	movff	exp@x,___ftneg@f1
  6912  000798  C09A  F019         	movff	exp@x+1,___ftneg@f1+1
  6913  00079C  C09B  F01A         	movff	exp@x+2,___ftneg@f1+2
  6914  0007A0  ECFA  F012         	call	___ftneg	;wreg free
  6915  0007A4  C018  F099         	movff	?___ftneg,exp@x
  6916  0007A8  C019  F09A         	movff	?___ftneg+1,exp@x+1
  6917  0007AC  C01A  F09B         	movff	?___ftneg+2,exp@x+2
  6918  0007B0                     l2070:
  6919  0007B0  C099  F069         	movff	exp@x,___ftmul@f1
  6920  0007B4  C09A  F06A         	movff	exp@x+1,___ftmul@f1+1
  6921  0007B8  C09B  F06B         	movff	exp@x+2,___ftmul@f1+2
  6922  0007BC  0EAA               	movlw	170
  6923  0007BE  0100               	movlb	0	; () banked
  6924  0007C0  6F6C               	movwf	___ftmul@f2& (0+255),b
  6925  0007C2  0EB8               	movlw	184
  6926  0007C4  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  6927  0007C6  0E3F               	movlw	63
  6928  0007C8  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  6929  0007CA  EC34  F009         	call	___ftmul	;wreg free
  6930  0007CE  C069  F099         	movff	?___ftmul,exp@x
  6931  0007D2  C06A  F09A         	movff	?___ftmul+1,exp@x+1
  6932  0007D6  C06B  F09B         	movff	?___ftmul+2,exp@x+2
  6933  0007DA  C099  F091         	movff	exp@x,floor@x
  6934  0007DE  C09A  F092         	movff	exp@x+1,floor@x+1
  6935  0007E2  C09B  F093         	movff	exp@x+2,floor@x+2
  6936  0007E6  EC23  F00A         	call	_floor	;wreg free
  6937  0007EA  C091  F09C         	movff	?_floor,_exp$3291
  6938  0007EE  C092  F09D         	movff	?_floor+1,_exp$3291+1
  6939  0007F2  C093  F09E         	movff	?_floor+2,_exp$3291+2
  6940  0007F6  C09C  F078         	movff	_exp$3291,___fttol@f1
  6941  0007FA  C09D  F079         	movff	_exp$3291+1,___fttol@f1+1
  6942  0007FE  C09E  F07A         	movff	_exp$3291+2,___fttol@f1+2
  6943  000802  ECB8  F008         	call	___fttol	;wreg free
  6944  000806  C078  F09F         	movff	?___fttol,exp@exponent
  6945  00080A  C079  F0A0         	movff	?___fttol+1,exp@exponent+1
  6946  00080E  C099  F084         	movff	exp@x,___ftsub@f1
  6947  000812  C09A  F085         	movff	exp@x+1,___ftsub@f1+1
  6948  000816  C09B  F086         	movff	exp@x+2,___ftsub@f1+2
  6949  00081A  C09F  F020         	movff	exp@exponent,___awtoft@c
  6950  00081E  C0A0  F021         	movff	exp@exponent+1,___awtoft@c+1
  6951  000822  ECEE  F011         	call	___awtoft	;wreg free
  6952  000826  C020  F087         	movff	?___awtoft,___ftsub@f2
  6953  00082A  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
  6954  00082E  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
  6955  000832  EC52  F011         	call	___ftsub	;wreg free
  6956  000836  C084  F099         	movff	?___ftsub,exp@x
  6957  00083A  C085  F09A         	movff	?___ftsub+1,exp@x+1
  6958  00083E  C086  F09B         	movff	?___ftsub+2,exp@x+2
  6959  000842  C099  F084         	movff	exp@x,eval_poly@x
  6960  000846  C09A  F085         	movff	exp@x+1,eval_poly@x+1
  6961  00084A  C09B  F086         	movff	exp@x+2,eval_poly@x+2
  6962  00084E  0E70               	movlw	low exp@coeff
  6963  000850  0100               	movlb	0	; () banked
  6964  000852  6F87               	movwf	eval_poly@d& (0+255),b
  6965  000854  0E06               	movlw	high exp@coeff
  6966  000856  6F88               	movwf	(eval_poly@d+1)& (0+255),b
  6967  000858  0E00               	movlw	0
  6968  00085A  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
  6969  00085C  0E09               	movlw	9
  6970  00085E  6F89               	movwf	eval_poly@n& (0+255),b
  6971  000860  EC04  F00B         	call	_eval_poly	;wreg free
  6972  000864  C084  F090         	movff	?_eval_poly,ldexp@value
  6973  000868  C085  F091         	movff	?_eval_poly+1,ldexp@value+1
  6974  00086C  C086  F092         	movff	?_eval_poly+2,ldexp@value+2
  6975  000870  C09F  F093         	movff	exp@exponent,ldexp@newexp
  6976  000874  C0A0  F094         	movff	exp@exponent+1,ldexp@newexp+1
  6977  000878  EC71  F00B         	call	_ldexp	;wreg free
  6978  00087C  C090  F099         	movff	?_ldexp,exp@x
  6979  000880  C091  F09A         	movff	?_ldexp+1,exp@x+1
  6980  000884  C092  F09B         	movff	?_ldexp+2,exp@x+2
  6981  000888  0100               	movlb	0	; () banked
  6982  00088A  51A1               	movf	exp@sign& (0+255),w,b
  6983  00088C  B4D8               	btfsc	status,2,c
  6984  00088E  D025               	goto	l2071
  6985                           
  6986                           ; BSR set to: 0
  6987  000890  2999               	incf	exp@x& (0+255),w,b
  6988  000892  E10E               	bnz	l6503
  6989  000894  0E7F               	movlw	127
  6990  000896  199A               	xorwf	(exp@x+1)& (0+255),w,b
  6991  000898  E10B               	bnz	l6503
  6992  00089A  0E7F               	movlw	127
  6993  00089C  199B               	xorwf	(exp@x+2)& (0+255),w,b
  6994  00089E  A4D8               	btfss	status,2,c
  6995  0008A0  D007               	goto	l2072
  6996                           
  6997                           ; BSR set to: 0
  6998  0008A2  0E00               	movlw	0
  6999  0008A4  6F99               	movwf	?_exp& (0+255),b
  7000  0008A6  0E00               	movlw	0
  7001  0008A8  6F9A               	movwf	(?_exp+1)& (0+255),b
  7002  0008AA  0E00               	movlw	0
  7003  0008AC  6F9B               	movwf	(?_exp+2)& (0+255),b
  7004                           
  7005                           ; BSR set to: 0
  7006  0008AE  0012               	return	
  7007  0008B0                     l2072:
  7008  0008B0                     l6503:
  7009                           
  7010                           ; BSR set to: 0
  7011  0008B0  0E00               	movlw	0
  7012  0008B2  6E29               	movwf	___ftdiv@f1,c
  7013  0008B4  0E80               	movlw	128
  7014  0008B6  6E2A               	movwf	___ftdiv@f1+1,c
  7015  0008B8  0E3F               	movlw	63
  7016  0008BA  6E2B               	movwf	___ftdiv@f1+2,c
  7017  0008BC  C099  F02C         	movff	exp@x,___ftdiv@f2
  7018  0008C0  C09A  F02D         	movff	exp@x+1,___ftdiv@f2+1
  7019  0008C4  C09B  F02E         	movff	exp@x+2,___ftdiv@f2+2
  7020  0008C8  ECAF  F009         	call	___ftdiv	;wreg free
  7021  0008CC  C029  F099         	movff	?___ftdiv,?_exp
  7022  0008D0  C02A  F09A         	movff	?___ftdiv+1,?_exp+1
  7023  0008D4  C02B  F09B         	movff	?___ftdiv+2,?_exp+2
  7024  0008D8  0012               	return	
  7025  0008DA                     l2071:
  7026                           
  7027                           ; BSR set to: 0
  7028  0008DA  C099  F099         	movff	exp@x,?_exp
  7029  0008DE  C09A  F09A         	movff	exp@x+1,?_exp+1
  7030  0008E2  C09B  F09B         	movff	exp@x+2,?_exp+2
  7031  0008E6  0012               	return		;funcret
  7032  0008E8                     __end_of_exp:
  7033                           	opt stack 0
  7034                           tblptru	equ	0xFF8
  7035                           tblptrh	equ	0xFF7
  7036                           tblptrl	equ	0xFF6
  7037                           tablat	equ	0xFF5
  7038                           prodh	equ	0xFF4
  7039                           prodl	equ	0xFF3
  7040                           intcon	equ	0xFF2
  7041                           intcon2	equ	0xFF1
  7042                           postinc0	equ	0xFEE
  7043                           wreg	equ	0xFE8
  7044                           postdec1	equ	0xFE5
  7045                           plusw1	equ	0xFE3
  7046                           fsr1l	equ	0xFE1
  7047                           indf2	equ	0xFDF
  7048                           plusw2	equ	0xFDB
  7049                           fsr2h	equ	0xFDA
  7050                           fsr2l	equ	0xFD9
  7051                           status	equ	0xFD8
  7052                           
  7053 ;; *************** function _ldexp *****************
  7054 ;; Defined at:
  7055 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  value           3   48[BANK0 ] unsigned char 
  7058 ;;  newexp          2   51[BANK0 ] int 
  7059 ;; Auto vars:     Size  Location     Type
  7060 ;;		None
  7061 ;; Return value:  Size  Location     Type
  7062 ;;                  3   48[BANK0 ] int 
  7063 ;; Registers used:
  7064 ;;		wreg, status,2, status,0
  7065 ;; Tracked objects:
  7066 ;;		On entry : 0/0
  7067 ;;		On exit  : 0/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7070 ;;      Params:         0       5       0       0       0       0       0
  7071 ;;      Locals:         0       0       0       0       0       0       0
  7072 ;;      Temps:          0       2       0       0       0       0       0
  7073 ;;      Totals:         0       7       0       0       0       0       0
  7074 ;;Total ram usage:        7 bytes
  7075 ;; Hardware stack levels used:    1
  7076 ;; Hardware stack levels required when called:    3
  7077 ;; This function calls:
  7078 ;;		Nothing
  7079 ;; This function is called by:
  7080 ;;		_exp
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           	psect	text46
  7085  0016E2                     __ptext46:
  7086                           	opt stack 0
  7087  0016E2                     _ldexp:
  7088                           	opt stack 24
  7089                           
  7090                           ;incstack = 0
  7091  0016E2  0100               	movlb	0	; () banked
  7092  0016E4  5190               	movf	ldexp@value& (0+255),w,b
  7093  0016E6  1191               	iorwf	(ldexp@value+1)& (0+255),w,b
  7094  0016E8  1192               	iorwf	(ldexp@value+2)& (0+255),w,b
  7095  0016EA  A4D8               	btfss	status,2,c
  7096  0016EC  D007               	goto	l2090
  7097                           
  7098                           ; BSR set to: 0
  7099  0016EE  0E00               	movlw	0
  7100  0016F0  6F90               	movwf	?_ldexp& (0+255),b
  7101  0016F2  0E00               	movlw	0
  7102  0016F4  6F91               	movwf	(?_ldexp+1)& (0+255),b
  7103  0016F6  0E00               	movlw	0
  7104  0016F8  6F92               	movwf	(?_ldexp+2)& (0+255),b
  7105                           
  7106                           ; BSR set to: 0
  7107  0016FA  0012               	return	
  7108  0016FC                     l2090:
  7109                           
  7110                           ; BSR set to: 0
  7111                           
  7112                           ; BSR set to: 0
  7113  0016FC  5192               	movf	(ldexp@value+2)& (0+255),w,b
  7114  0016FE  0B7F               	andlw	127
  7115  001700  6F95               	movwf	??_ldexp& (0+255),b
  7116  001702  6B96               	clrf	(??_ldexp+1)& (0+255),b
  7117  001704  90D8               	bcf	status,0,c
  7118  001706  3795               	rlcf	??_ldexp& (0+255),f,b
  7119  001708  3796               	rlcf	(??_ldexp+1)& (0+255),f,b
  7120  00170A  5195               	movf	??_ldexp& (0+255),w,b
  7121  00170C  2793               	addwf	ldexp@newexp& (0+255),f,b
  7122  00170E  5196               	movf	(??_ldexp+1)& (0+255),w,b
  7123  001710  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  7124  001712  AF91               	btfss	(ldexp@value+1)& (0+255),7,b
  7125  001714  D003               	goto	u5590
  7126  001716  6B95               	clrf	??_ldexp& (0+255),b
  7127  001718  2B95               	incf	??_ldexp& (0+255),f,b
  7128  00171A  D002               	goto	u5598
  7129  00171C                     u5590:
  7130  00171C  0100               	movlb	0	; () banked
  7131  00171E  6B95               	clrf	??_ldexp& (0+255),b
  7132  001720                     u5598:
  7133  001720  5195               	movf	??_ldexp& (0+255),w,b
  7134  001722  2793               	addwf	ldexp@newexp& (0+255),f,b
  7135  001724  0E00               	movlw	0
  7136  001726  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  7137  001728  AF94               	btfss	(ldexp@newexp+1)& (0+255),7,b
  7138  00172A  D00B               	goto	l2092
  7139                           
  7140                           ; BSR set to: 0
  7141  00172C  0E00               	movlw	0
  7142  00172E  6FC3               	movwf	(_errno+1)& (0+255),b
  7143  001730  0E22               	movlw	34
  7144  001732  6FC2               	movwf	_errno& (0+255),b
  7145  001734  0E00               	movlw	0
  7146  001736  6F90               	movwf	?_ldexp& (0+255),b
  7147  001738  0E00               	movlw	0
  7148  00173A  6F91               	movwf	(?_ldexp+1)& (0+255),b
  7149  00173C  0E00               	movlw	0
  7150  00173E                     L1:
  7151  00173E  6F92               	movwf	(?_ldexp+2)& (0+255),b
  7152                           
  7153                           ; BSR set to: 0
  7154  001740  0012               	return	
  7155  001742                     l2092:
  7156                           
  7157                           ; BSR set to: 0
  7158                           
  7159                           ; BSR set to: 0
  7160  001742  BF94               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  7161  001744  D015               	goto	l2094
  7162  001746  0594               	decf	(ldexp@newexp+1)& (0+255),w,b
  7163  001748  A0D8               	btfss	status,0,c
  7164  00174A  D012               	goto	l2094
  7165                           
  7166                           ; BSR set to: 0
  7167  00174C  0E00               	movlw	0
  7168  00174E  6FC3               	movwf	(_errno+1)& (0+255),b
  7169  001750  0E22               	movlw	34
  7170  001752  6FC2               	movwf	_errno& (0+255),b
  7171                           
  7172                           ; BSR set to: 0
  7173  001754  AF92               	btfss	(ldexp@value+2)& (0+255),7,b
  7174  001756  D006               	goto	l2095
  7175                           
  7176                           ; BSR set to: 0
  7177  001758  0EFF               	movlw	255
  7178  00175A  6F90               	movwf	?_ldexp& (0+255),b
  7179  00175C  0E7F               	movlw	127
  7180  00175E  6F91               	movwf	(?_ldexp+1)& (0+255),b
  7181  001760  0EFF               	movlw	255
  7182  001762  D7ED               	goto	L1
  7183  001764                     l2095:
  7184                           
  7185                           ; BSR set to: 0
  7186                           
  7187                           ; BSR set to: 0
  7188  001764  0EFF               	movlw	255
  7189  001766  6F90               	movwf	?_ldexp& (0+255),b
  7190  001768  0E7F               	movlw	127
  7191  00176A  6F91               	movwf	(?_ldexp+1)& (0+255),b
  7192  00176C  0E7F               	movlw	127
  7193  00176E  D7E7               	goto	L1
  7194  001770                     l2094:
  7195                           
  7196                           ; BSR set to: 0
  7197                           
  7198                           ; BSR set to: 0
  7199  001770  3594               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  7200  001772  3194               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  7201  001774  6F96               	movwf	(??_ldexp+1)& (0+255),b
  7202  001776  3193               	rrcf	ldexp@newexp& (0+255),w,b
  7203  001778  6F95               	movwf	??_ldexp& (0+255),b
  7204  00177A  5192               	movf	(ldexp@value+2)& (0+255),w,b
  7205  00177C  1995               	xorwf	??_ldexp& (0+255),w,b
  7206  00177E  0B80               	andlw	-128
  7207  001780  1995               	xorwf	??_ldexp& (0+255),w,b
  7208  001782  6F92               	movwf	(ldexp@value+2)& (0+255),b
  7209  001784  C093  F095         	movff	ldexp@newexp,??_ldexp
  7210  001788  0E01               	movlw	1
  7211  00178A  1795               	andwf	??_ldexp& (0+255),f,b
  7212  00178C  3395               	rrcf	??_ldexp& (0+255),f,b
  7213  00178E  3395               	rrcf	??_ldexp& (0+255),f,b
  7214  001790  5191               	movf	(ldexp@value+1)& (0+255),w,b
  7215  001792  1995               	xorwf	??_ldexp& (0+255),w,b
  7216  001794  0B7F               	andlw	-129
  7217  001796  1995               	xorwf	??_ldexp& (0+255),w,b
  7218  001798  6F91               	movwf	(ldexp@value+1)& (0+255),b
  7219                           
  7220                           ; BSR set to: 0
  7221                           
  7222                           ; BSR set to: 0
  7223                           
  7224                           ; BSR set to: 0
  7225  00179A  C090  F090         	movff	ldexp@value,?_ldexp
  7226  00179E  C091  F091         	movff	ldexp@value+1,?_ldexp+1
  7227  0017A2  C092  F092         	movff	ldexp@value+2,?_ldexp+2
  7228  0017A6  0012               	return	
  7229  0017A8                     __end_of_ldexp:
  7230                           	opt stack 0
  7231                           tblptru	equ	0xFF8
  7232                           tblptrh	equ	0xFF7
  7233                           tblptrl	equ	0xFF6
  7234                           tablat	equ	0xFF5
  7235                           prodh	equ	0xFF4
  7236                           prodl	equ	0xFF3
  7237                           intcon	equ	0xFF2
  7238                           intcon2	equ	0xFF1
  7239                           postinc0	equ	0xFEE
  7240                           wreg	equ	0xFE8
  7241                           postdec1	equ	0xFE5
  7242                           plusw1	equ	0xFE3
  7243                           fsr1l	equ	0xFE1
  7244                           indf2	equ	0xFDF
  7245                           plusw2	equ	0xFDB
  7246                           fsr2h	equ	0xFDA
  7247                           fsr2l	equ	0xFD9
  7248                           status	equ	0xFD8
  7249                           
  7250 ;; *************** function _floor *****************
  7251 ;; Defined at:
  7252 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;  x               3   49[BANK0 ] int 
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;  i               3   52[BANK0 ] int 
  7257 ;;  expon           2   55[BANK0 ] int 
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  3   49[BANK0 ] int 
  7260 ;; Registers used:
  7261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7267 ;;      Params:         0       3       0       0       0       0       0
  7268 ;;      Locals:         0       5       0       0       0       0       0
  7269 ;;      Temps:          0       0       0       0       0       0       0
  7270 ;;      Totals:         0       8       0       0       0       0       0
  7271 ;;Total ram usage:        8 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    5
  7274 ;; This function calls:
  7275 ;;		___altoft
  7276 ;;		___ftadd
  7277 ;;		___ftge
  7278 ;;		___fttol
  7279 ;;		_frexp
  7280 ;; This function is called by:
  7281 ;;		_exp
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           	psect	text47
  7286  001446                     __ptext47:
  7287                           	opt stack 0
  7288  001446                     _floor:
  7289                           	opt stack 22
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;incstack = 0
  7293  001446  C091  F018         	movff	floor@x,frexp@value
  7294  00144A  C092  F019         	movff	floor@x+1,frexp@value+1
  7295  00144E  C093  F01A         	movff	floor@x+2,frexp@value+2
  7296  001452  0E97               	movlw	low floor@expon
  7297  001454  6E1B               	movwf	frexp@eptr,c
  7298  001456  0E00               	movlw	high floor@expon
  7299  001458  6E1C               	movwf	frexp@eptr+1,c
  7300  00145A  EC3C  F00D         	call	_frexp	;wreg free
  7301  00145E  0100               	movlb	0	; () banked
  7302  001460  AF98               	btfss	(floor@expon+1)& (0+255),7,b
  7303  001462  D010               	goto	l2077
  7304                           
  7305                           ; BSR set to: 0
  7306  001464  AF93               	btfss	(floor@x+2)& (0+255),7,b
  7307  001466  D007               	goto	l2078
  7308                           
  7309                           ; BSR set to: 0
  7310  001468  0E00               	movlw	0
  7311  00146A  6F91               	movwf	?_floor& (0+255),b
  7312  00146C  0E80               	movlw	128
  7313  00146E  6F92               	movwf	(?_floor+1)& (0+255),b
  7314  001470  0EBF               	movlw	191
  7315  001472  6F93               	movwf	(?_floor+2)& (0+255),b
  7316                           
  7317                           ; BSR set to: 0
  7318  001474  0012               	return	
  7319  001476                     l2078:
  7320                           
  7321                           ; BSR set to: 0
  7322                           
  7323                           ; BSR set to: 0
  7324  001476  0E00               	movlw	0
  7325  001478  6F91               	movwf	?_floor& (0+255),b
  7326  00147A  0E00               	movlw	0
  7327  00147C  6F92               	movwf	(?_floor+1)& (0+255),b
  7328  00147E  0E00               	movlw	0
  7329  001480  6F93               	movwf	(?_floor+2)& (0+255),b
  7330                           
  7331                           ; BSR set to: 0
  7332  001482  0012               	return	
  7333  001484                     l2077:
  7334                           
  7335                           ; BSR set to: 0
  7336                           
  7337                           ; BSR set to: 0
  7338  001484  5198               	movf	(floor@expon+1)& (0+255),w,b
  7339  001486  E104               	bnz	u5550
  7340  001488  0E15               	movlw	21
  7341  00148A  5D97               	subwf	floor@expon& (0+255),w,b
  7342  00148C  A0D8               	btfss	status,0,c
  7343  00148E  D007               	goto	l2080
  7344  001490                     u5550:
  7345                           
  7346                           ; BSR set to: 0
  7347  001490  C091  F091         	movff	floor@x,?_floor
  7348  001494  C092  F092         	movff	floor@x+1,?_floor+1
  7349  001498  C093  F093         	movff	floor@x+2,?_floor+2
  7350  00149C  0012               	return	
  7351  00149E                     l2080:
  7352                           
  7353                           ; BSR set to: 0
  7354                           
  7355                           ; BSR set to: 0
  7356  00149E  C091  F078         	movff	floor@x,___fttol@f1
  7357  0014A2  C092  F079         	movff	floor@x+1,___fttol@f1+1
  7358  0014A6  C093  F07A         	movff	floor@x+2,___fttol@f1+2
  7359  0014AA  ECB8  F008         	call	___fttol	;wreg free
  7360  0014AE  C078  F087         	movff	?___fttol,___altoft@c
  7361  0014B2  C079  F088         	movff	?___fttol+1,___altoft@c+1
  7362  0014B6  C07A  F089         	movff	?___fttol+2,___altoft@c+2
  7363  0014BA  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
  7364  0014BE  EC57  F00E         	call	___altoft	;wreg free
  7365  0014C2  C087  F094         	movff	?___altoft,floor@i
  7366  0014C6  C088  F095         	movff	?___altoft+1,floor@i+1
  7367  0014CA  C089  F096         	movff	?___altoft+2,floor@i+2
  7368  0014CE  C091  F018         	movff	floor@x,___ftge@ff1
  7369  0014D2  C092  F019         	movff	floor@x+1,___ftge@ff1+1
  7370  0014D6  C093  F01A         	movff	floor@x+2,___ftge@ff1+2
  7371  0014DA  C094  F01B         	movff	floor@i,___ftge@ff2
  7372  0014DE  C095  F01C         	movff	floor@i+1,___ftge@ff2+1
  7373  0014E2  C096  F01D         	movff	floor@i+2,___ftge@ff2+2
  7374  0014E6  EC84  F00D         	call	___ftge	;wreg free
  7375  0014EA  B0D8               	btfsc	status,0,c
  7376  0014EC  D016               	goto	l2081
  7377  0014EE  C094  F078         	movff	floor@i,___ftadd@f1
  7378  0014F2  C095  F079         	movff	floor@i+1,___ftadd@f1+1
  7379  0014F6  C096  F07A         	movff	floor@i+2,___ftadd@f1+2
  7380  0014FA  0E00               	movlw	0
  7381  0014FC  0100               	movlb	0	; () banked
  7382  0014FE  6F7B               	movwf	___ftadd@f2& (0+255),b
  7383  001500  0E80               	movlw	128
  7384  001502  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
  7385  001504  0EBF               	movlw	191
  7386  001506  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
  7387  001508  EC52  F005         	call	___ftadd	;wreg free
  7388  00150C  C078  F091         	movff	?___ftadd,?_floor
  7389  001510  C079  F092         	movff	?___ftadd+1,?_floor+1
  7390  001514  C07A  F093         	movff	?___ftadd+2,?_floor+2
  7391  001518  0012               	return	
  7392  00151A                     l2081:
  7393  00151A  C094  F091         	movff	floor@i,?_floor
  7394  00151E  C095  F092         	movff	floor@i+1,?_floor+1
  7395  001522  C096  F093         	movff	floor@i+2,?_floor+2
  7396  001526  0012               	return		;funcret
  7397  001528                     __end_of_floor:
  7398                           	opt stack 0
  7399                           tblptru	equ	0xFF8
  7400                           tblptrh	equ	0xFF7
  7401                           tblptrl	equ	0xFF6
  7402                           tablat	equ	0xFF5
  7403                           prodh	equ	0xFF4
  7404                           prodl	equ	0xFF3
  7405                           intcon	equ	0xFF2
  7406                           intcon2	equ	0xFF1
  7407                           postinc0	equ	0xFEE
  7408                           wreg	equ	0xFE8
  7409                           postdec1	equ	0xFE5
  7410                           plusw1	equ	0xFE3
  7411                           fsr1l	equ	0xFE1
  7412                           indf2	equ	0xFDF
  7413                           plusw2	equ	0xFDB
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418 ;; *************** function _frexp *****************
  7419 ;; Defined at:
  7420 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;  value           3   23[COMRAM] int 
  7423 ;;  eptr            2   26[COMRAM] PTR int 
  7424 ;;		 -> log@exponent(2), floor@expon(2), 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;		None
  7427 ;; Return value:  Size  Location     Type
  7428 ;;                  3   23[COMRAM] PTR int 
  7429 ;; Registers used:
  7430 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7436 ;;      Params:         5       0       0       0       0       0       0
  7437 ;;      Locals:         0       0       0       0       0       0       0
  7438 ;;      Temps:          2       0       0       0       0       0       0
  7439 ;;      Totals:         7       0       0       0       0       0       0
  7440 ;;Total ram usage:        7 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    3
  7443 ;; This function calls:
  7444 ;;		Nothing
  7445 ;; This function is called by:
  7446 ;;		_floor
  7447 ;;		_log
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           	psect	text48
  7452  001A78                     __ptext48:
  7453                           	opt stack 0
  7454  001A78                     _frexp:
  7455                           	opt stack 24
  7456                           
  7457                           ;incstack = 0
  7458  001A78  5018               	movf	frexp@value,w,c
  7459  001A7A  1019               	iorwf	frexp@value+1,w,c
  7460  001A7C  101A               	iorwf	frexp@value+2,w,c
  7461  001A7E  A4D8               	btfss	status,2,c
  7462  001A80  D00F               	goto	l2086
  7463  001A82  C01B  FFD9         	movff	frexp@eptr,fsr2l
  7464  001A86  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  7465  001A8A  0E00               	movlw	0
  7466  001A8C  6EDE               	movwf	postinc2,c
  7467  001A8E  0E00               	movlw	0
  7468  001A90  6EDD               	movwf	postdec2,c
  7469  001A92  0E00               	movlw	0
  7470  001A94  6E18               	movwf	?_frexp,c
  7471  001A96  0E00               	movlw	0
  7472  001A98  6E19               	movwf	?_frexp+1,c
  7473  001A9A  0E00               	movlw	0
  7474  001A9C  6E1A               	movwf	?_frexp+2,c
  7475  001A9E  0012               	return	
  7476  001AA0                     l2086:
  7477  001AA0  501A               	movf	frexp@value+2,w,c
  7478  001AA2  0B7F               	andlw	127
  7479  001AA4  6E1D               	movwf	??_frexp& (0+255),c
  7480  001AA6  6A1E               	clrf	(??_frexp+1)& (0+255),c
  7481  001AA8  90D8               	bcf	status,0,c
  7482  001AAA  361D               	rlcf	??_frexp,f,c
  7483  001AAC  361E               	rlcf	??_frexp+1,f,c
  7484  001AAE  C01B  FFD9         	movff	frexp@eptr,fsr2l
  7485  001AB2  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  7486  001AB6  C01D  FFDE         	movff	??_frexp,postinc2
  7487  001ABA  C01E  FFDD         	movff	??_frexp+1,postdec2
  7488  001ABE  AE19               	btfss	frexp@value+1,7,c
  7489  001AC0  D003               	goto	u5420
  7490  001AC2  6A1D               	clrf	??_frexp& (0+255),c
  7491  001AC4  2A1D               	incf	??_frexp& (0+255),f,c
  7492  001AC6  D001               	goto	u5428
  7493  001AC8                     u5420:
  7494  001AC8  6A1D               	clrf	??_frexp& (0+255),c
  7495  001ACA                     u5428:
  7496  001ACA  501D               	movf	??_frexp,w,c
  7497  001ACC  C01B  FFD9         	movff	frexp@eptr,fsr2l
  7498  001AD0  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  7499  001AD4  12DE               	iorwf	postinc2,f,c
  7500  001AD6  0E00               	movlw	0
  7501  001AD8  12DD               	iorwf	postdec2,f,c
  7502  001ADA  C01B  FFD9         	movff	frexp@eptr,fsr2l
  7503  001ADE  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  7504  001AE2  0E82               	movlw	130
  7505  001AE4  26DE               	addwf	postinc2,f,c
  7506  001AE6  0EFF               	movlw	255
  7507  001AE8  22DD               	addwfc	postdec2,f,c
  7508  001AEA  801A               	bsf	frexp@value+2,0,c
  7509  001AEC  821A               	bsf	frexp@value+2,1,c
  7510  001AEE  841A               	bsf	frexp@value+2,2,c
  7511  001AF0  861A               	bsf	frexp@value+2,3,c
  7512  001AF2  881A               	bsf	frexp@value+2,4,c
  7513  001AF4  8A1A               	bsf	frexp@value+2,5,c
  7514  001AF6  9C1A               	bcf	frexp@value+2,6,c
  7515  001AF8  9E19               	bcf	frexp@value+1,7,c
  7516  001AFA  C018  F018         	movff	frexp@value,?_frexp
  7517  001AFE  C019  F019         	movff	frexp@value+1,?_frexp+1
  7518  001B02  C01A  F01A         	movff	frexp@value+2,?_frexp+2
  7519  001B06  0012               	return	
  7520  001B08                     __end_of_frexp:
  7521                           	opt stack 0
  7522                           tblptru	equ	0xFF8
  7523                           tblptrh	equ	0xFF7
  7524                           tblptrl	equ	0xFF6
  7525                           tablat	equ	0xFF5
  7526                           prodh	equ	0xFF4
  7527                           prodl	equ	0xFF3
  7528                           intcon	equ	0xFF2
  7529                           intcon2	equ	0xFF1
  7530                           postinc0	equ	0xFEE
  7531                           wreg	equ	0xFE8
  7532                           postdec1	equ	0xFE5
  7533                           plusw1	equ	0xFE3
  7534                           fsr1l	equ	0xFE1
  7535                           indf2	equ	0xFDF
  7536                           postinc2	equ	0xFDE
  7537                           postdec2	equ	0xFDD
  7538                           plusw2	equ	0xFDB
  7539                           fsr2h	equ	0xFDA
  7540                           fsr2l	equ	0xFD9
  7541                           status	equ	0xFD8
  7542                           
  7543 ;; *************** function ___fttol *****************
  7544 ;; Defined at:
  7545 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;  f1              3   24[BANK0 ] float 
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;  lval            4   34[BANK0 ] unsigned long 
  7550 ;;  exp1            1   38[BANK0 ] unsigned char 
  7551 ;;  sign1           1   33[BANK0 ] unsigned char 
  7552 ;; Return value:  Size  Location     Type
  7553 ;;                  4   24[BANK0 ] long 
  7554 ;; Registers used:
  7555 ;;		wreg, status,2, status,0
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7561 ;;      Params:         0       4       0       0       0       0       0
  7562 ;;      Locals:         0       6       0       0       0       0       0
  7563 ;;      Temps:          0       5       0       0       0       0       0
  7564 ;;      Totals:         0      15       0       0       0       0       0
  7565 ;;Total ram usage:       15 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    3
  7568 ;; This function calls:
  7569 ;;		Nothing
  7570 ;; This function is called by:
  7571 ;;		_AdcConvert
  7572 ;;		_pow
  7573 ;;		_exp
  7574 ;;		_floor
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           	psect	text49
  7579  001170                     __ptext49:
  7580                           	opt stack 0
  7581  001170                     ___fttol:
  7582                           	opt stack 23
  7583                           
  7584                           ;incstack = 0
  7585  001170  C07A  F07C         	movff	___fttol@f1+2,??___fttol
  7586  001174  0100               	movlb	0	; () banked
  7587  001176  6B7D               	clrf	(??___fttol+1)& (0+255),b
  7588  001178  6B7E               	clrf	(??___fttol+2)& (0+255),b
  7589  00117A  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7590  00117C  377C               	rlcf	??___fttol& (0+255),f,b
  7591  00117E  E301               	bnc	u5331
  7592  001180  817D               	bsf	(??___fttol+1)& (0+255),0,b
  7593  001182                     u5331:
  7594  001182  517C               	movf	??___fttol& (0+255),w,b
  7595  001184  6F86               	movwf	___fttol@exp1& (0+255),b
  7596  001186  5186               	movf	___fttol@exp1& (0+255),w,b
  7597  001188  A4D8               	btfss	status,2,c
  7598  00118A  D009               	goto	l1737
  7599                           
  7600                           ; BSR set to: 0
  7601  00118C  0E00               	movlw	0
  7602  00118E  6F78               	movwf	?___fttol& (0+255),b
  7603  001190  0E00               	movlw	0
  7604  001192  6F79               	movwf	(?___fttol+1)& (0+255),b
  7605  001194  0E00               	movlw	0
  7606  001196  6F7A               	movwf	(?___fttol+2)& (0+255),b
  7607  001198  0E00               	movlw	0
  7608  00119A  6F7B               	movwf	(?___fttol+3)& (0+255),b
  7609                           
  7610                           ; BSR set to: 0
  7611  00119C  0012               	return	
  7612  00119E                     l1737:
  7613                           
  7614                           ; BSR set to: 0
  7615                           
  7616                           ; BSR set to: 0
  7617  00119E  0E17               	movlw	23
  7618  0011A0  6F7C               	movwf	??___fttol& (0+255),b
  7619  0011A2  C078  F07D         	movff	___fttol@f1,??___fttol+1
  7620  0011A6  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
  7621  0011AA  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
  7622  0011AE  297C               	incf	??___fttol& (0+255),w,b
  7623  0011B0  6F80               	movwf	(??___fttol+4)& (0+255),b
  7624  0011B2  D004               	goto	u5350
  7625  0011B4                     u5355:
  7626  0011B4  90D8               	bcf	status,0,c
  7627  0011B6  337F               	rrcf	(??___fttol+3)& (0+255),f,b
  7628  0011B8  337E               	rrcf	(??___fttol+2)& (0+255),f,b
  7629  0011BA  337D               	rrcf	(??___fttol+1)& (0+255),f,b
  7630  0011BC                     u5350:
  7631  0011BC  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
  7632  0011BE  D7FA               	goto	u5355
  7633  0011C0  0100               	movlb	0	; () banked
  7634  0011C2  517D               	movf	(??___fttol+1)& (0+255),w,b
  7635  0011C4  6F81               	movwf	___fttol@sign1& (0+255),b
  7636                           
  7637                           ; BSR set to: 0
  7638  0011C6  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
  7639                           
  7640                           ; BSR set to: 0
  7641  0011C8  0EFF               	movlw	255
  7642  0011CA  1778               	andwf	___fttol@f1& (0+255),f,b
  7643  0011CC  0EFF               	movlw	255
  7644  0011CE  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
  7645  0011D0  0E00               	movlw	0
  7646  0011D2  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
  7647                           
  7648                           ; BSR set to: 0
  7649  0011D4  5178               	movf	___fttol@f1& (0+255),w,b
  7650  0011D6  6F82               	movwf	___fttol@lval& (0+255),b
  7651  0011D8  5179               	movf	(___fttol@f1+1)& (0+255),w,b
  7652  0011DA  6F83               	movwf	(___fttol@lval+1)& (0+255),b
  7653  0011DC  517A               	movf	(___fttol@f1+2)& (0+255),w,b
  7654  0011DE  6F84               	movwf	(___fttol@lval+2)& (0+255),b
  7655  0011E0  6B85               	clrf	(___fttol@lval+3)& (0+255),b
  7656                           
  7657                           ; BSR set to: 0
  7658  0011E2  0E8E               	movlw	142
  7659  0011E4  5F86               	subwf	___fttol@exp1& (0+255),f,b
  7660                           
  7661                           ; BSR set to: 0
  7662  0011E6  AF86               	btfss	___fttol@exp1& (0+255),7,b
  7663  0011E8  D016               	goto	l1739
  7664                           
  7665                           ; BSR set to: 0
  7666  0011EA  5186               	movf	___fttol@exp1& (0+255),w,b
  7667  0011EC  0A80               	xorlw	128
  7668  0011EE  0F8F               	addlw	143
  7669  0011F0  B0D8               	btfsc	status,0,c
  7670  0011F2  D009               	goto	l1740
  7671                           
  7672                           ; BSR set to: 0
  7673  0011F4  0E00               	movlw	0
  7674  0011F6  6F78               	movwf	?___fttol& (0+255),b
  7675  0011F8  0E00               	movlw	0
  7676  0011FA  6F79               	movwf	(?___fttol+1)& (0+255),b
  7677  0011FC  0E00               	movlw	0
  7678  0011FE  6F7A               	movwf	(?___fttol+2)& (0+255),b
  7679  001200  0E00               	movlw	0
  7680  001202  6F7B               	movwf	(?___fttol+3)& (0+255),b
  7681                           
  7682                           ; BSR set to: 0
  7683  001204  0012               	return	
  7684  001206                     l1740:
  7685                           
  7686                           ; BSR set to: 0
  7687                           
  7688                           ; BSR set to: 0
  7689                           
  7690                           ; BSR set to: 0
  7691  001206  90D8               	bcf	status,0,c
  7692  001208  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7693  00120A  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7694  00120C  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7695  00120E  3382               	rrcf	___fttol@lval& (0+255),f,b
  7696                           
  7697                           ; BSR set to: 0
  7698  001210  3F86               	incfsz	___fttol@exp1& (0+255),f,b
  7699  001212  D7F9               	goto	l1740
  7700                           
  7701                           ; BSR set to: 0
  7702  001214  D015               	goto	u5390
  7703  001216                     l1739:
  7704                           
  7705                           ; BSR set to: 0
  7706                           
  7707                           ; BSR set to: 0
  7708  001216  0E17               	movlw	23
  7709  001218  6586               	cpfsgt	___fttol@exp1& (0+255),b
  7710  00121A  D00F               	goto	l1745
  7711                           
  7712                           ; BSR set to: 0
  7713  00121C  0E00               	movlw	0
  7714  00121E  6F78               	movwf	?___fttol& (0+255),b
  7715  001220  0E00               	movlw	0
  7716  001222  6F79               	movwf	(?___fttol+1)& (0+255),b
  7717  001224  0E00               	movlw	0
  7718  001226  6F7A               	movwf	(?___fttol+2)& (0+255),b
  7719  001228  0E00               	movlw	0
  7720  00122A  6F7B               	movwf	(?___fttol+3)& (0+255),b
  7721                           
  7722                           ; BSR set to: 0
  7723  00122C  0012               	return	
  7724  00122E                     
  7725                           ; BSR set to: 0
  7726                           
  7727                           ; BSR set to: 0
  7728  00122E  90D8               	bcf	status,0,c
  7729  001230  3782               	rlcf	___fttol@lval& (0+255),f,b
  7730  001232  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7731  001234  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7732  001236  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7733  001238  0786               	decf	___fttol@exp1& (0+255),f,b
  7734  00123A                     l1745:
  7735                           
  7736                           ; BSR set to: 0
  7737                           
  7738                           ; BSR set to: 0
  7739  00123A  5186               	movf	___fttol@exp1& (0+255),w,b
  7740  00123C  A4D8               	btfss	status,2,c
  7741  00123E  D7F7               	goto	l1746
  7742  001240                     u5390:
  7743                           
  7744                           ; BSR set to: 0
  7745                           
  7746                           ; BSR set to: 0
  7747                           
  7748                           ; BSR set to: 0
  7749  001240  5181               	movf	___fttol@sign1& (0+255),w,b
  7750  001242  B4D8               	btfsc	status,2,c
  7751  001244  D008               	goto	l1748
  7752                           
  7753                           ; BSR set to: 0
  7754  001246  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
  7755  001248  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
  7756  00124A  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
  7757  00124C  6D82               	negf	___fttol@lval& (0+255),b
  7758  00124E  0E00               	movlw	0
  7759  001250  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7760  001252  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7761  001254  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7762  001256                     l1748:
  7763                           
  7764                           ; BSR set to: 0
  7765                           
  7766                           ; BSR set to: 0
  7767  001256  C082  F078         	movff	___fttol@lval,?___fttol
  7768  00125A  C083  F079         	movff	___fttol@lval+1,?___fttol+1
  7769  00125E  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
  7770  001262  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
  7771  001266  0012               	return	
  7772  001268                     __end_of___fttol:
  7773                           	opt stack 0
  7774                           tblptru	equ	0xFF8
  7775                           tblptrh	equ	0xFF7
  7776                           tblptrl	equ	0xFF6
  7777                           tablat	equ	0xFF5
  7778                           prodh	equ	0xFF4
  7779                           prodl	equ	0xFF3
  7780                           intcon	equ	0xFF2
  7781                           intcon2	equ	0xFF1
  7782                           postinc0	equ	0xFEE
  7783                           wreg	equ	0xFE8
  7784                           postdec1	equ	0xFE5
  7785                           plusw1	equ	0xFE3
  7786                           fsr1l	equ	0xFE1
  7787                           indf2	equ	0xFDF
  7788                           postinc2	equ	0xFDE
  7789                           postdec2	equ	0xFDD
  7790                           plusw2	equ	0xFDB
  7791                           fsr2h	equ	0xFDA
  7792                           fsr2l	equ	0xFD9
  7793                           status	equ	0xFD8
  7794                           
  7795 ;; *************** function ___ftge *****************
  7796 ;; Defined at:
  7797 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;  ff1             3   23[COMRAM] float 
  7800 ;;  ff2             3   26[COMRAM] float 
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;		None
  7803 ;; Return value:  Size  Location     Type
  7804 ;;		None               void
  7805 ;; Registers used:
  7806 ;;		wreg, status,2, status,0
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7812 ;;      Params:         6       0       0       0       0       0       0
  7813 ;;      Locals:         0       0       0       0       0       0       0
  7814 ;;      Temps:          3       0       0       0       0       0       0
  7815 ;;      Totals:         9       0       0       0       0       0       0
  7816 ;;Total ram usage:        9 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    3
  7819 ;; This function calls:
  7820 ;;		Nothing
  7821 ;; This function is called by:
  7822 ;;		_CheckFlashPrecentage
  7823 ;;		_pow
  7824 ;;		_exp
  7825 ;;		_floor
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text50
  7830  001B08                     __ptext50:
  7831                           	opt stack 0
  7832  001B08                     ___ftge:
  7833                           	opt stack 26
  7834                           
  7835                           ; BSR set to: 0
  7836                           ;incstack = 0
  7837  001B08  AE1A               	btfss	___ftge@ff1+2,7,c
  7838  001B0A  D016               	goto	l1709
  7839  001B0C  C018  F01E         	movff	___ftge@ff1,??___ftge
  7840  001B10  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
  7841  001B14  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
  7842  001B18  1E1E               	comf	??___ftge,f,c
  7843  001B1A  1E1F               	comf	??___ftge+1,f,c
  7844  001B1C  1E20               	comf	??___ftge+2,f,c
  7845  001B1E  2A1E               	incf	??___ftge,f,c
  7846  001B20  0E00               	movlw	0
  7847  001B22  221F               	addwfc	??___ftge+1,f,c
  7848  001B24  2220               	addwfc	??___ftge+2,f,c
  7849  001B26  0E00               	movlw	0
  7850  001B28  241E               	addwf	??___ftge,w,c
  7851  001B2A  6E18               	movwf	___ftge@ff1,c
  7852  001B2C  0E00               	movlw	0
  7853  001B2E  201F               	addwfc	??___ftge+1,w,c
  7854  001B30  6E19               	movwf	___ftge@ff1+1,c
  7855  001B32  0E80               	movlw	128
  7856  001B34  2020               	addwfc	??___ftge+2,w,c
  7857  001B36  6E1A               	movwf	___ftge@ff1+2,c
  7858  001B38                     l1709:
  7859  001B38  AE1D               	btfss	___ftge@ff2+2,7,c
  7860  001B3A  D016               	goto	l1710
  7861  001B3C  C01B  F01E         	movff	___ftge@ff2,??___ftge
  7862  001B40  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
  7863  001B44  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
  7864  001B48  1E1E               	comf	??___ftge,f,c
  7865  001B4A  1E1F               	comf	??___ftge+1,f,c
  7866  001B4C  1E20               	comf	??___ftge+2,f,c
  7867  001B4E  2A1E               	incf	??___ftge,f,c
  7868  001B50  0E00               	movlw	0
  7869  001B52  221F               	addwfc	??___ftge+1,f,c
  7870  001B54  2220               	addwfc	??___ftge+2,f,c
  7871  001B56  0E00               	movlw	0
  7872  001B58  241E               	addwf	??___ftge,w,c
  7873  001B5A  6E1B               	movwf	___ftge@ff2,c
  7874  001B5C  0E00               	movlw	0
  7875  001B5E  201F               	addwfc	??___ftge+1,w,c
  7876  001B60  6E1C               	movwf	___ftge@ff2+1,c
  7877  001B62  0E80               	movlw	128
  7878  001B64  2020               	addwfc	??___ftge+2,w,c
  7879  001B66  6E1D               	movwf	___ftge@ff2+2,c
  7880  001B68                     l1710:
  7881  001B68  0E00               	movlw	0
  7882  001B6A  1A18               	xorwf	___ftge@ff1,f,c
  7883  001B6C  0E00               	movlw	0
  7884  001B6E  1A19               	xorwf	___ftge@ff1+1,f,c
  7885  001B70  0E80               	movlw	128
  7886  001B72  1A1A               	xorwf	___ftge@ff1+2,f,c
  7887  001B74  0E00               	movlw	0
  7888  001B76  1A1B               	xorwf	___ftge@ff2,f,c
  7889  001B78  0E00               	movlw	0
  7890  001B7A  1A1C               	xorwf	___ftge@ff2+1,f,c
  7891  001B7C  0E80               	movlw	128
  7892  001B7E  1A1D               	xorwf	___ftge@ff2+2,f,c
  7893  001B80  501B               	movf	___ftge@ff2,w,c
  7894  001B82  5C18               	subwf	___ftge@ff1,w,c
  7895  001B84  501C               	movf	___ftge@ff2+1,w,c
  7896  001B86  5819               	subwfb	___ftge@ff1+1,w,c
  7897  001B88  501D               	movf	___ftge@ff2+2,w,c
  7898  001B8A  581A               	subwfb	___ftge@ff1+2,w,c
  7899  001B8C  B0D8               	btfsc	status,0,c
  7900  001B8E  D002               	goto	l5931
  7901  001B90  90D8               	bcf	status,0,c
  7902  001B92  0012               	return	
  7903  001B94                     l5931:
  7904  001B94  80D8               	bsf	status,0,c
  7905  001B96  0012               	return	
  7906  001B98                     __end_of___ftge:
  7907                           	opt stack 0
  7908                           tblptru	equ	0xFF8
  7909                           tblptrh	equ	0xFF7
  7910                           tblptrl	equ	0xFF6
  7911                           tablat	equ	0xFF5
  7912                           prodh	equ	0xFF4
  7913                           prodl	equ	0xFF3
  7914                           intcon	equ	0xFF2
  7915                           intcon2	equ	0xFF1
  7916                           postinc0	equ	0xFEE
  7917                           wreg	equ	0xFE8
  7918                           postdec1	equ	0xFE5
  7919                           plusw1	equ	0xFE3
  7920                           fsr1l	equ	0xFE1
  7921                           indf2	equ	0xFDF
  7922                           postinc2	equ	0xFDE
  7923                           postdec2	equ	0xFDD
  7924                           plusw2	equ	0xFDB
  7925                           fsr2h	equ	0xFDA
  7926                           fsr2l	equ	0xFD9
  7927                           status	equ	0xFD8
  7928                           
  7929 ;; *************** function ___altoft *****************
  7930 ;; Defined at:
  7931 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;  c               4   39[BANK0 ] long 
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;  sign            1   48[BANK0 ] unsigned char 
  7936 ;;  exp             1   47[BANK0 ] unsigned char 
  7937 ;; Return value:  Size  Location     Type
  7938 ;;                  3   39[BANK0 ] float 
  7939 ;; Registers used:
  7940 ;;		wreg, status,2, status,0, cstack
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7946 ;;      Params:         0       4       0       0       0       0       0
  7947 ;;      Locals:         0       2       0       0       0       0       0
  7948 ;;      Temps:          0       4       0       0       0       0       0
  7949 ;;      Totals:         0      10       0       0       0       0       0
  7950 ;;Total ram usage:       10 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; Hardware stack levels required when called:    4
  7953 ;; This function calls:
  7954 ;;		___ftpack
  7955 ;; This function is called by:
  7956 ;;		_floor
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           	psect	text51
  7961  001CAE                     __ptext51:
  7962                           	opt stack 0
  7963  001CAE                     ___altoft:
  7964                           	opt stack 22
  7965                           
  7966                           ;incstack = 0
  7967  001CAE  0E00               	movlw	0
  7968  001CB0  0100               	movlb	0	; () banked
  7969  001CB2  6F90               	movwf	___altoft@sign& (0+255),b
  7970  001CB4  0E8E               	movlw	142
  7971  001CB6  6F8F               	movwf	___altoft@exp& (0+255),b
  7972                           
  7973                           ; BSR set to: 0
  7974  001CB8  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
  7975  001CBA  D011               	goto	l1507
  7976                           
  7977                           ; BSR set to: 0
  7978  001CBC  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
  7979  001CBE  1F89               	comf	(___altoft@c+2)& (0+255),f,b
  7980  001CC0  1F88               	comf	(___altoft@c+1)& (0+255),f,b
  7981  001CC2  6D87               	negf	___altoft@c& (0+255),b
  7982  001CC4  0E00               	movlw	0
  7983  001CC6  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
  7984  001CC8  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
  7985  001CCA  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
  7986                           
  7987                           ; BSR set to: 0
  7988  001CCC  0E01               	movlw	1
  7989  001CCE  6F90               	movwf	___altoft@sign& (0+255),b
  7990                           
  7991                           ; BSR set to: 0
  7992  001CD0  D006               	goto	l1507
  7993  001CD2                     
  7994                           ; BSR set to: 0
  7995                           
  7996                           ; BSR set to: 0
  7997  001CD2  90D8               	bcf	status,0,c
  7998  001CD4  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
  7999  001CD6  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
  8000  001CD8  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
  8001  001CDA  3387               	rrcf	___altoft@c& (0+255),f,b
  8002  001CDC  2B8F               	incf	___altoft@exp& (0+255),f,b
  8003  001CDE                     l1507:
  8004                           
  8005                           ; BSR set to: 0
  8006                           
  8007                           ; BSR set to: 0
  8008  001CDE  0E00               	movlw	0
  8009  001CE0  1587               	andwf	___altoft@c& (0+255),w,b
  8010  001CE2  6F8B               	movwf	??___altoft& (0+255),b
  8011  001CE4  0E00               	movlw	0
  8012  001CE6  1588               	andwf	(___altoft@c+1)& (0+255),w,b
  8013  001CE8  6F8C               	movwf	(??___altoft+1)& (0+255),b
  8014  001CEA  0E00               	movlw	0
  8015  001CEC  1589               	andwf	(___altoft@c+2)& (0+255),w,b
  8016  001CEE  6F8D               	movwf	(??___altoft+2)& (0+255),b
  8017  001CF0  0EFF               	movlw	255
  8018  001CF2  158A               	andwf	(___altoft@c+3)& (0+255),w,b
  8019  001CF4  6F8E               	movwf	(??___altoft+3)& (0+255),b
  8020  001CF6  518B               	movf	??___altoft& (0+255),w,b
  8021  001CF8  118C               	iorwf	(??___altoft+1)& (0+255),w,b
  8022  001CFA  118D               	iorwf	(??___altoft+2)& (0+255),w,b
  8023  001CFC  118E               	iorwf	(??___altoft+3)& (0+255),w,b
  8024  001CFE  A4D8               	btfss	status,2,c
  8025  001D00  D7E8               	goto	l1508
  8026                           
  8027                           ; BSR set to: 0
  8028                           
  8029                           ; BSR set to: 0
  8030  001D02  C087  F018         	movff	___altoft@c,___ftpack@arg
  8031  001D06  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
  8032  001D0A  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
  8033  001D0E  C08F  F01B         	movff	___altoft@exp,___ftpack@exp
  8034  001D12  C090  F01C         	movff	___altoft@sign,___ftpack@sign
  8035  001D16  ECE5  F00C         	call	___ftpack	;wreg free
  8036  001D1A  C018  F087         	movff	?___ftpack,?___altoft
  8037  001D1E  C019  F088         	movff	?___ftpack+1,?___altoft+1
  8038  001D22  C01A  F089         	movff	?___ftpack+2,?___altoft+2
  8039  001D26  0012               	return	
  8040  001D28                     __end_of___altoft:
  8041                           	opt stack 0
  8042                           tblptru	equ	0xFF8
  8043                           tblptrh	equ	0xFF7
  8044                           tblptrl	equ	0xFF6
  8045                           tablat	equ	0xFF5
  8046                           prodh	equ	0xFF4
  8047                           prodl	equ	0xFF3
  8048                           intcon	equ	0xFF2
  8049                           intcon2	equ	0xFF1
  8050                           postinc0	equ	0xFEE
  8051                           wreg	equ	0xFE8
  8052                           postdec1	equ	0xFE5
  8053                           plusw1	equ	0xFE3
  8054                           fsr1l	equ	0xFE1
  8055                           indf2	equ	0xFDF
  8056                           postinc2	equ	0xFDE
  8057                           postdec2	equ	0xFDD
  8058                           plusw2	equ	0xFDB
  8059                           fsr2h	equ	0xFDA
  8060                           fsr2l	equ	0xFD9
  8061                           status	equ	0xFD8
  8062                           
  8063 ;; *************** function _eval_poly *****************
  8064 ;; Defined at:
  8065 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;  x               3   36[BANK0 ] float 
  8068 ;;  d               2   39[BANK0 ] PTR const 
  8069 ;;		 -> log@coeff(27), exp@coeff(30), 
  8070 ;;  n               2   41[BANK0 ] int 
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;  res             3   45[BANK0 ] int 
  8073 ;; Return value:  Size  Location     Type
  8074 ;;                  3   36[BANK0 ] int 
  8075 ;; Registers used:
  8076 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8077 ;; Tracked objects:
  8078 ;;		On entry : 0/0
  8079 ;;		On exit  : 0/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8082 ;;      Params:         0       7       0       0       0       0       0
  8083 ;;      Locals:         0       3       0       0       0       0       0
  8084 ;;      Temps:          0       2       0       0       0       0       0
  8085 ;;      Totals:         0      12       0       0       0       0       0
  8086 ;;Total ram usage:       12 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; Hardware stack levels required when called:    5
  8089 ;; This function calls:
  8090 ;;		___ftadd
  8091 ;;		___ftmul
  8092 ;;		___wmul
  8093 ;; This function is called by:
  8094 ;;		_exp
  8095 ;;		_log
  8096 ;; This function uses a non-reentrant model
  8097 ;;
  8098                           
  8099                           	psect	text52
  8100  001608                     __ptext52:
  8101                           	opt stack 0
  8102  001608                     _eval_poly:
  8103                           	opt stack 22
  8104                           
  8105                           ;incstack = 0
  8106  001608  C089  F018         	movff	eval_poly@n,___wmul@multiplier
  8107  00160C  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
  8108  001610  0E00               	movlw	0
  8109  001612  6E1B               	movwf	___wmul@multiplicand+1,c
  8110  001614  0E03               	movlw	3
  8111  001616  6E1A               	movwf	___wmul@multiplicand,c
  8112  001618  ECE7  F012         	call	___wmul	;wreg free
  8113  00161C  C087  F08B         	movff	eval_poly@d,??_eval_poly
  8114  001620  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
  8115  001624  5018               	movf	?___wmul,w,c
  8116  001626  0100               	movlb	0	; () banked
  8117  001628  278B               	addwf	??_eval_poly& (0+255),f,b
  8118  00162A  5019               	movf	?___wmul+1,w,c
  8119  00162C  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
  8120  00162E  C08B  FFF6         	movff	??_eval_poly,tblptrl
  8121  001632  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
  8122  001636                     	if	0	;tblptru may be non-zero
  8123  001636                     	endif
  8124  001636                     	if	0	;tblptru may be non-zero
  8125  001636                     	endif
  8126  001636  0009               	tblrd		*+
  8127  001638  CFF5 F08D          	movff	tablat,eval_poly@res
  8128  00163C  0009               	tblrd		*+
  8129  00163E  CFF5 F08E          	movff	tablat,eval_poly@res+1
  8130  001642  000A               	tblrd		*-
  8131  001644  CFF5 F08F          	movff	tablat,eval_poly@res+2
  8132  001648  D040               	goto	l2138
  8133  00164A                     
  8134                           ; BSR set to: 0
  8135                           
  8136                           ; BSR set to: 0
  8137  00164A  C08D  F06C         	movff	eval_poly@res,___ftmul@f2
  8138  00164E  C08E  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
  8139  001652  C08F  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
  8140  001656  C084  F069         	movff	eval_poly@x,___ftmul@f1
  8141  00165A  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
  8142  00165E  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
  8143  001662  EC34  F009         	call	___ftmul	;wreg free
  8144  001666  C069  F078         	movff	?___ftmul,___ftadd@f1
  8145  00166A  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
  8146  00166E  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
  8147  001672  0E00               	movlw	0
  8148  001674  6E1B               	movwf	___wmul@multiplicand+1,c
  8149  001676  0E03               	movlw	3
  8150  001678  6E1A               	movwf	___wmul@multiplicand,c
  8151  00167A  0100               	movlb	0	; () banked
  8152  00167C  0789               	decf	eval_poly@n& (0+255),f,b
  8153  00167E  A0D8               	btfss	status,0,c
  8154  001680  078A               	decf	(eval_poly@n+1)& (0+255),f,b
  8155  001682  C089  F018         	movff	eval_poly@n,___wmul@multiplier
  8156  001686  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
  8157  00168A  ECE7  F012         	call	___wmul	;wreg free
  8158  00168E  C087  F08B         	movff	eval_poly@d,??_eval_poly
  8159  001692  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
  8160  001696  5018               	movf	?___wmul,w,c
  8161  001698  0100               	movlb	0	; () banked
  8162  00169A  278B               	addwf	??_eval_poly& (0+255),f,b
  8163  00169C  5019               	movf	?___wmul+1,w,c
  8164  00169E  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
  8165  0016A0  C08B  FFF6         	movff	??_eval_poly,tblptrl
  8166  0016A4  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
  8167  0016A8                     	if	0	;tblptru may be non-zero
  8168  0016A8                     	endif
  8169  0016A8                     	if	0	;tblptru may be non-zero
  8170  0016A8                     	endif
  8171  0016A8  0009               	tblrd		*+
  8172  0016AA  CFF5 F07B          	movff	tablat,___ftadd@f2
  8173  0016AE  0009               	tblrd		*+
  8174  0016B0  CFF5 F07C          	movff	tablat,___ftadd@f2+1
  8175  0016B4  000A               	tblrd		*-
  8176  0016B6  CFF5 F07D          	movff	tablat,___ftadd@f2+2
  8177  0016BA  EC52  F005         	call	___ftadd	;wreg free
  8178  0016BE  C078  F08D         	movff	?___ftadd,eval_poly@res
  8179  0016C2  C079  F08E         	movff	?___ftadd+1,eval_poly@res+1
  8180  0016C6  C07A  F08F         	movff	?___ftadd+2,eval_poly@res+2
  8181  0016CA                     l2138:
  8182  0016CA  0100               	movlb	0	; () banked
  8183  0016CC  5189               	movf	eval_poly@n& (0+255),w,b
  8184  0016CE  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
  8185  0016D0  A4D8               	btfss	status,2,c
  8186  0016D2  D7BB               	goto	l2139
  8187                           
  8188                           ; BSR set to: 0
  8189  0016D4  C08D  F084         	movff	eval_poly@res,?_eval_poly
  8190  0016D8  C08E  F085         	movff	eval_poly@res+1,?_eval_poly+1
  8191  0016DC  C08F  F086         	movff	eval_poly@res+2,?_eval_poly+2
  8192                           
  8193                           ; BSR set to: 0
  8194  0016E0  0012               	return		;funcret
  8195  0016E2                     __end_of_eval_poly:
  8196                           	opt stack 0
  8197                           tblptru	equ	0xFF8
  8198                           tblptrh	equ	0xFF7
  8199                           tblptrl	equ	0xFF6
  8200                           tablat	equ	0xFF5
  8201                           prodh	equ	0xFF4
  8202                           prodl	equ	0xFF3
  8203                           intcon	equ	0xFF2
  8204                           intcon2	equ	0xFF1
  8205                           postinc0	equ	0xFEE
  8206                           wreg	equ	0xFE8
  8207                           postdec1	equ	0xFE5
  8208                           plusw1	equ	0xFE3
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           plusw2	equ	0xFDB
  8214                           fsr2h	equ	0xFDA
  8215                           fsr2l	equ	0xFD9
  8216                           status	equ	0xFD8
  8217                           
  8218 ;; *************** function ___wmul *****************
  8219 ;; Defined at:
  8220 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;  multiplier      2   23[COMRAM] unsigned int 
  8223 ;;  multiplicand    2   25[COMRAM] unsigned int 
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;  product         2   27[COMRAM] unsigned int 
  8226 ;; Return value:  Size  Location     Type
  8227 ;;                  2   23[COMRAM] unsigned int 
  8228 ;; Registers used:
  8229 ;;		wreg, status,2, status,0, prodl, prodh
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8235 ;;      Params:         4       0       0       0       0       0       0
  8236 ;;      Locals:         2       0       0       0       0       0       0
  8237 ;;      Temps:          0       0       0       0       0       0       0
  8238 ;;      Totals:         6       0       0       0       0       0       0
  8239 ;;Total ram usage:        6 bytes
  8240 ;; Hardware stack levels used:    1
  8241 ;; Hardware stack levels required when called:    3
  8242 ;; This function calls:
  8243 ;;		Nothing
  8244 ;; This function is called by:
  8245 ;;		_eval_poly
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text53
  8250  0025CE                     __ptext53:
  8251                           	opt stack 0
  8252  0025CE                     ___wmul:
  8253                           	opt stack 23
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;incstack = 0
  8257  0025CE  5018               	movf	___wmul@multiplier,w,c
  8258  0025D0  021A               	mulwf	___wmul@multiplicand,c
  8259  0025D2  CFF3 F01C          	movff	prodl,___wmul@product
  8260  0025D6  CFF4 F01D          	movff	prodh,___wmul@product+1
  8261  0025DA  5018               	movf	___wmul@multiplier,w,c
  8262  0025DC  021B               	mulwf	___wmul@multiplicand+1,c
  8263  0025DE  50F3               	movf	prodl,w,c
  8264  0025E0  261D               	addwf	___wmul@product+1,f,c
  8265  0025E2  5019               	movf	___wmul@multiplier+1,w,c
  8266  0025E4  021A               	mulwf	___wmul@multiplicand,c
  8267  0025E6  50F3               	movf	prodl,w,c
  8268  0025E8  261D               	addwf	___wmul@product+1,f,c
  8269  0025EA  C01C  F018         	movff	___wmul@product,?___wmul
  8270  0025EE  C01D  F019         	movff	___wmul@product+1,?___wmul+1
  8271  0025F2  0012               	return	
  8272  0025F4                     __end_of___wmul:
  8273                           	opt stack 0
  8274                           tblptru	equ	0xFF8
  8275                           tblptrh	equ	0xFF7
  8276                           tblptrl	equ	0xFF6
  8277                           tablat	equ	0xFF5
  8278                           prodh	equ	0xFF4
  8279                           prodl	equ	0xFF3
  8280                           intcon	equ	0xFF2
  8281                           intcon2	equ	0xFF1
  8282                           postinc0	equ	0xFEE
  8283                           wreg	equ	0xFE8
  8284                           postdec1	equ	0xFE5
  8285                           plusw1	equ	0xFE3
  8286                           fsr1l	equ	0xFE1
  8287                           indf2	equ	0xFDF
  8288                           postinc2	equ	0xFDE
  8289                           postdec2	equ	0xFDD
  8290                           plusw2	equ	0xFDB
  8291                           fsr2h	equ	0xFDA
  8292                           fsr2l	equ	0xFD9
  8293                           status	equ	0xFD8
  8294                           
  8295 ;; *************** function ___ftmul *****************
  8296 ;; Defined at:
  8297 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;  f1              3    9[BANK0 ] float 
  8300 ;;  f2              3   12[BANK0 ] float 
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  8303 ;;  sign            1   23[BANK0 ] unsigned char 
  8304 ;;  cntr            1   22[BANK0 ] unsigned char 
  8305 ;;  exp             1   18[BANK0 ] unsigned char 
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  3    9[BANK0 ] float 
  8308 ;; Registers used:
  8309 ;;		wreg, status,2, status,0, cstack
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8315 ;;      Params:         0       6       0       0       0       0       0
  8316 ;;      Locals:         0       6       0       0       0       0       0
  8317 ;;      Temps:          0       3       0       0       0       0       0
  8318 ;;      Totals:         0      15       0       0       0       0       0
  8319 ;;Total ram usage:       15 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    4
  8322 ;; This function calls:
  8323 ;;		___ftpack
  8324 ;; This function is called by:
  8325 ;;		_AdcConvert
  8326 ;;		_CheckFlashPrecentage
  8327 ;;		_pow
  8328 ;;		_exp
  8329 ;;		_log
  8330 ;;		_eval_poly
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           	psect	text54
  8335  001268                     __ptext54:
  8336                           	opt stack 0
  8337  001268                     ___ftmul:
  8338                           	opt stack 25
  8339                           
  8340                           ;incstack = 0
  8341  001268  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
  8342  00126C  0100               	movlb	0	; () banked
  8343  00126E  6B70               	clrf	(??___ftmul+1)& (0+255),b
  8344  001270  6B71               	clrf	(??___ftmul+2)& (0+255),b
  8345  001272  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  8346  001274  376F               	rlcf	??___ftmul& (0+255),f,b
  8347  001276  E301               	bnc	u5241
  8348  001278  8170               	bsf	(??___ftmul+1)& (0+255),0,b
  8349  00127A                     u5241:
  8350  00127A  516F               	movf	??___ftmul& (0+255),w,b
  8351  00127C  6F72               	movwf	___ftmul@exp& (0+255),b
  8352  00127E  5172               	movf	___ftmul@exp& (0+255),w,b
  8353  001280  A4D8               	btfss	status,2,c
  8354  001282  D007               	goto	l1716
  8355                           
  8356                           ; BSR set to: 0
  8357  001284  0E00               	movlw	0
  8358  001286  6F69               	movwf	?___ftmul& (0+255),b
  8359  001288  0E00               	movlw	0
  8360  00128A  6F6A               	movwf	(?___ftmul+1)& (0+255),b
  8361  00128C  0E00               	movlw	0
  8362  00128E  6F6B               	movwf	(?___ftmul+2)& (0+255),b
  8363                           
  8364                           ; BSR set to: 0
  8365  001290  0012               	return	
  8366  001292                     l1716:
  8367                           
  8368                           ; BSR set to: 0
  8369                           
  8370                           ; BSR set to: 0
  8371  001292  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
  8372  001296  6B70               	clrf	(??___ftmul+1)& (0+255),b
  8373  001298  6B71               	clrf	(??___ftmul+2)& (0+255),b
  8374  00129A  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  8375  00129C  376F               	rlcf	??___ftmul& (0+255),f,b
  8376  00129E  E301               	bnc	u5261
  8377  0012A0  8170               	bsf	(??___ftmul+1)& (0+255),0,b
  8378  0012A2                     u5261:
  8379  0012A2  516F               	movf	??___ftmul& (0+255),w,b
  8380  0012A4  6F77               	movwf	___ftmul@sign& (0+255),b
  8381  0012A6  5177               	movf	___ftmul@sign& (0+255),w,b
  8382  0012A8  A4D8               	btfss	status,2,c
  8383  0012AA  D007               	goto	l1718
  8384                           
  8385                           ; BSR set to: 0
  8386  0012AC  0E00               	movlw	0
  8387  0012AE  6F69               	movwf	?___ftmul& (0+255),b
  8388  0012B0  0E00               	movlw	0
  8389  0012B2  6F6A               	movwf	(?___ftmul+1)& (0+255),b
  8390  0012B4  0E00               	movlw	0
  8391  0012B6  6F6B               	movwf	(?___ftmul+2)& (0+255),b
  8392                           
  8393                           ; BSR set to: 0
  8394  0012B8  0012               	return	
  8395  0012BA                     l1718:
  8396                           
  8397                           ; BSR set to: 0
  8398                           
  8399                           ; BSR set to: 0
  8400  0012BA  5177               	movf	___ftmul@sign& (0+255),w,b
  8401  0012BC  0F7B               	addlw	123
  8402  0012BE  2772               	addwf	___ftmul@exp& (0+255),f,b
  8403                           
  8404                           ; BSR set to: 0
  8405  0012C0  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
  8406  0012C4  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
  8407  0012C6  1B77               	xorwf	___ftmul@sign& (0+255),f,b
  8408  0012C8  0E80               	movlw	128
  8409  0012CA  1777               	andwf	___ftmul@sign& (0+255),f,b
  8410                           
  8411                           ; BSR set to: 0
  8412  0012CC  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8413                           
  8414                           ; BSR set to: 0
  8415  0012CE  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8416                           
  8417                           ; BSR set to: 0
  8418  0012D0  0EFF               	movlw	255
  8419  0012D2  176C               	andwf	___ftmul@f2& (0+255),f,b
  8420  0012D4  0EFF               	movlw	255
  8421  0012D6  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8422  0012D8  0E00               	movlw	0
  8423  0012DA  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8424                           
  8425                           ; BSR set to: 0
  8426  0012DC  0E00               	movlw	0
  8427  0012DE  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
  8428  0012E0  0E00               	movlw	0
  8429  0012E2  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8430  0012E4  0E00               	movlw	0
  8431  0012E6  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8432                           
  8433                           ; BSR set to: 0
  8434  0012E8  0E07               	movlw	7
  8435  0012EA  6F76               	movwf	___ftmul@cntr& (0+255),b
  8436  0012EC                     
  8437                           ; BSR set to: 0
  8438                           
  8439                           ; BSR set to: 0
  8440  0012EC  A169               	btfss	___ftmul@f1& (0+255),0,b
  8441  0012EE  D006               	goto	l1720
  8442                           
  8443                           ; BSR set to: 0
  8444  0012F0  516C               	movf	___ftmul@f2& (0+255),w,b
  8445  0012F2  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8446  0012F4  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
  8447  0012F6  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8448  0012F8  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
  8449  0012FA  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8450  0012FC                     l1720:
  8451                           
  8452                           ; BSR set to: 0
  8453                           
  8454                           ; BSR set to: 0
  8455  0012FC  90D8               	bcf	status,0,c
  8456  0012FE  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8457  001300  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8458  001302  3369               	rrcf	___ftmul@f1& (0+255),f,b
  8459  001304  90D8               	bcf	status,0,c
  8460  001306  376C               	rlcf	___ftmul@f2& (0+255),f,b
  8461  001308  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8462  00130A  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8463                           
  8464                           ; BSR set to: 0
  8465  00130C  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
  8466  00130E  D7EE               	goto	l1719
  8467                           
  8468                           ; BSR set to: 0
  8469                           
  8470                           ; BSR set to: 0
  8471  001310  0E09               	movlw	9
  8472  001312  6F76               	movwf	___ftmul@cntr& (0+255),b
  8473  001314                     
  8474                           ; BSR set to: 0
  8475                           
  8476                           ; BSR set to: 0
  8477  001314  A169               	btfss	___ftmul@f1& (0+255),0,b
  8478  001316  D006               	goto	l1723
  8479                           
  8480                           ; BSR set to: 0
  8481  001318  516C               	movf	___ftmul@f2& (0+255),w,b
  8482  00131A  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8483  00131C  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
  8484  00131E  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8485  001320  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
  8486  001322  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8487  001324                     l1723:
  8488                           
  8489                           ; BSR set to: 0
  8490                           
  8491                           ; BSR set to: 0
  8492  001324  90D8               	bcf	status,0,c
  8493  001326  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8494  001328  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8495  00132A  3369               	rrcf	___ftmul@f1& (0+255),f,b
  8496  00132C  90D8               	bcf	status,0,c
  8497  00132E  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8498  001330  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8499  001332  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8500                           
  8501                           ; BSR set to: 0
  8502  001334  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
  8503  001336  D7EE               	goto	l1722
  8504                           
  8505                           ; BSR set to: 0
  8506                           
  8507                           ; BSR set to: 0
  8508  001338  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  8509  00133C  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8510  001340  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8511  001344  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
  8512  001348  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
  8513  00134C  ECE5  F00C         	call	___ftpack	;wreg free
  8514  001350  C018  F069         	movff	?___ftpack,?___ftmul
  8515  001354  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
  8516  001358  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
  8517  00135C  0012               	return	
  8518  00135E                     __end_of___ftmul:
  8519                           	opt stack 0
  8520                           tblptru	equ	0xFF8
  8521                           tblptrh	equ	0xFF7
  8522                           tblptrl	equ	0xFF6
  8523                           tablat	equ	0xFF5
  8524                           prodh	equ	0xFF4
  8525                           prodl	equ	0xFF3
  8526                           intcon	equ	0xFF2
  8527                           intcon2	equ	0xFF1
  8528                           postinc0	equ	0xFEE
  8529                           wreg	equ	0xFE8
  8530                           postdec1	equ	0xFE5
  8531                           plusw1	equ	0xFE3
  8532                           fsr1l	equ	0xFE1
  8533                           indf2	equ	0xFDF
  8534                           postinc2	equ	0xFDE
  8535                           postdec2	equ	0xFDD
  8536                           plusw2	equ	0xFDB
  8537                           fsr2h	equ	0xFDA
  8538                           fsr2l	equ	0xFD9
  8539                           status	equ	0xFD8
  8540                           
  8541 ;; *************** function ___ftsub *****************
  8542 ;; Defined at:
  8543 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;  f1              3   36[BANK0 ] float 
  8546 ;;  f2              3   39[BANK0 ] float 
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;		None
  8549 ;; Return value:  Size  Location     Type
  8550 ;;                  3   36[BANK0 ] float 
  8551 ;; Registers used:
  8552 ;;		wreg, status,2, status,0, cstack
  8553 ;; Tracked objects:
  8554 ;;		On entry : 0/0
  8555 ;;		On exit  : 0/0
  8556 ;;		Unchanged: 0/0
  8557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8558 ;;      Params:         0       6       0       0       0       0       0
  8559 ;;      Locals:         0       0       0       0       0       0       0
  8560 ;;      Temps:          0       0       0       0       0       0       0
  8561 ;;      Totals:         0       6       0       0       0       0       0
  8562 ;;Total ram usage:        6 bytes
  8563 ;; Hardware stack levels used:    1
  8564 ;; Hardware stack levels required when called:    5
  8565 ;; This function calls:
  8566 ;;		___ftadd
  8567 ;; This function is called by:
  8568 ;;		_exp
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           	psect	text55
  8573  0022A4                     __ptext55:
  8574                           	opt stack 0
  8575  0022A4                     ___ftsub:
  8576                           	opt stack 22
  8577                           
  8578                           ;incstack = 0
  8579  0022A4  0100               	movlb	0	; () banked
  8580  0022A6  5187               	movf	___ftsub@f2& (0+255),w,b
  8581  0022A8  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8582  0022AA  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8583  0022AC  B4D8               	btfsc	status,2,c
  8584  0022AE  D006               	goto	l1733
  8585                           
  8586                           ; BSR set to: 0
  8587  0022B0  0E00               	movlw	0
  8588  0022B2  1B87               	xorwf	___ftsub@f2& (0+255),f,b
  8589  0022B4  0E00               	movlw	0
  8590  0022B6  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8591  0022B8  0E80               	movlw	128
  8592  0022BA  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8593  0022BC                     l1733:
  8594                           
  8595                           ; BSR set to: 0
  8596                           
  8597                           ; BSR set to: 0
  8598  0022BC  C084  F078         	movff	___ftsub@f1,___ftadd@f1
  8599  0022C0  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
  8600  0022C4  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
  8601  0022C8  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
  8602  0022CC  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
  8603  0022D0  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
  8604  0022D4  EC52  F005         	call	___ftadd	;wreg free
  8605  0022D8  C078  F084         	movff	?___ftadd,?___ftsub
  8606  0022DC  C079  F085         	movff	?___ftadd+1,?___ftsub+1
  8607  0022E0  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
  8608  0022E4  0012               	return	
  8609  0022E6                     __end_of___ftsub:
  8610                           	opt stack 0
  8611                           tblptru	equ	0xFF8
  8612                           tblptrh	equ	0xFF7
  8613                           tblptrl	equ	0xFF6
  8614                           tablat	equ	0xFF5
  8615                           prodh	equ	0xFF4
  8616                           prodl	equ	0xFF3
  8617                           intcon	equ	0xFF2
  8618                           intcon2	equ	0xFF1
  8619                           postinc0	equ	0xFEE
  8620                           wreg	equ	0xFE8
  8621                           postdec1	equ	0xFE5
  8622                           plusw1	equ	0xFE3
  8623                           fsr1l	equ	0xFE1
  8624                           indf2	equ	0xFDF
  8625                           postinc2	equ	0xFDE
  8626                           postdec2	equ	0xFDD
  8627                           plusw2	equ	0xFDB
  8628                           fsr2h	equ	0xFDA
  8629                           fsr2l	equ	0xFD9
  8630                           status	equ	0xFD8
  8631                           
  8632 ;; *************** function ___ftadd *****************
  8633 ;; Defined at:
  8634 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;  f1              3   24[BANK0 ] float 
  8637 ;;  f2              3   27[BANK0 ] float 
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;  exp1            1   35[BANK0 ] unsigned char 
  8640 ;;  exp2            1   34[BANK0 ] unsigned char 
  8641 ;;  sign            1   33[BANK0 ] unsigned char 
  8642 ;; Return value:  Size  Location     Type
  8643 ;;                  3   24[BANK0 ] float 
  8644 ;; Registers used:
  8645 ;;		wreg, status,2, status,0, cstack
  8646 ;; Tracked objects:
  8647 ;;		On entry : 0/0
  8648 ;;		On exit  : 0/0
  8649 ;;		Unchanged: 0/0
  8650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8651 ;;      Params:         0       6       0       0       0       0       0
  8652 ;;      Locals:         0       3       0       0       0       0       0
  8653 ;;      Temps:          0       3       0       0       0       0       0
  8654 ;;      Totals:         0      12       0       0       0       0       0
  8655 ;;Total ram usage:       12 bytes
  8656 ;; Hardware stack levels used:    1
  8657 ;; Hardware stack levels required when called:    4
  8658 ;; This function calls:
  8659 ;;		___ftpack
  8660 ;; This function is called by:
  8661 ;;		___ftsub
  8662 ;;		_floor
  8663 ;;		_log
  8664 ;;		_eval_poly
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           	psect	text56
  8669  000AA4                     __ptext56:
  8670                           	opt stack 0
  8671  000AA4                     ___ftadd:
  8672                           	opt stack 22
  8673                           
  8674                           ;incstack = 0
  8675  000AA4  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
  8676  000AA8  0100               	movlb	0	; () banked
  8677  000AAA  6B7F               	clrf	(??___ftadd+1)& (0+255),b
  8678  000AAC  6B80               	clrf	(??___ftadd+2)& (0+255),b
  8679  000AAE  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8680  000AB0  377E               	rlcf	??___ftadd& (0+255),f,b
  8681  000AB2  E301               	bnc	u5031
  8682  000AB4  817F               	bsf	(??___ftadd+1)& (0+255),0,b
  8683  000AB6                     u5031:
  8684  000AB6  517E               	movf	??___ftadd& (0+255),w,b
  8685  000AB8  6F83               	movwf	___ftadd@exp1& (0+255),b
  8686  000ABA  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
  8687  000ABE  6B7F               	clrf	(??___ftadd+1)& (0+255),b
  8688  000AC0  6B80               	clrf	(??___ftadd+2)& (0+255),b
  8689  000AC2  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8690  000AC4  377E               	rlcf	??___ftadd& (0+255),f,b
  8691  000AC6  E301               	bnc	u5041
  8692  000AC8  817F               	bsf	(??___ftadd+1)& (0+255),0,b
  8693  000ACA                     u5041:
  8694  000ACA  517E               	movf	??___ftadd& (0+255),w,b
  8695  000ACC  6F82               	movwf	___ftadd@exp2& (0+255),b
  8696                           
  8697                           ; BSR set to: 0
  8698  000ACE  5183               	movf	___ftadd@exp1& (0+255),w,b
  8699  000AD0  B4D8               	btfsc	status,2,c
  8700  000AD2  D00B               	goto	u5070
  8701                           
  8702                           ; BSR set to: 0
  8703  000AD4  5182               	movf	___ftadd@exp2& (0+255),w,b
  8704  000AD6  5D83               	subwf	___ftadd@exp1& (0+255),w,b
  8705  000AD8  B0D8               	btfsc	status,0,c
  8706  000ADA  D00E               	goto	l1668
  8707                           
  8708                           ; BSR set to: 0
  8709  000ADC  5183               	movf	___ftadd@exp1& (0+255),w,b
  8710  000ADE  0800               	sublw	0
  8711  000AE0  2582               	addwf	___ftadd@exp2& (0+255),w,b
  8712  000AE2  6F7E               	movwf	??___ftadd& (0+255),b
  8713  000AE4  0E18               	movlw	24
  8714  000AE6  657E               	cpfsgt	??___ftadd& (0+255),b
  8715  000AE8  D007               	goto	l1668
  8716  000AEA                     u5070:
  8717                           
  8718                           ; BSR set to: 0
  8719  000AEA  C07B  F078         	movff	___ftadd@f2,?___ftadd
  8720  000AEE  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
  8721  000AF2  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
  8722  000AF6  0012               	return	
  8723  000AF8                     l1668:
  8724                           
  8725                           ; BSR set to: 0
  8726                           
  8727                           ; BSR set to: 0
  8728  000AF8  5182               	movf	___ftadd@exp2& (0+255),w,b
  8729  000AFA  B4D8               	btfsc	status,2,c
  8730  000AFC  D00B               	goto	u5100
  8731                           
  8732                           ; BSR set to: 0
  8733  000AFE  5183               	movf	___ftadd@exp1& (0+255),w,b
  8734  000B00  5D82               	subwf	___ftadd@exp2& (0+255),w,b
  8735  000B02  B0D8               	btfsc	status,0,c
  8736  000B04  D00E               	goto	l1672
  8737                           
  8738                           ; BSR set to: 0
  8739  000B06  5182               	movf	___ftadd@exp2& (0+255),w,b
  8740  000B08  0800               	sublw	0
  8741  000B0A  2583               	addwf	___ftadd@exp1& (0+255),w,b
  8742  000B0C  6F7E               	movwf	??___ftadd& (0+255),b
  8743  000B0E  0E18               	movlw	24
  8744  000B10  657E               	cpfsgt	??___ftadd& (0+255),b
  8745  000B12  D007               	goto	l1672
  8746  000B14                     u5100:
  8747                           
  8748                           ; BSR set to: 0
  8749  000B14  C078  F078         	movff	___ftadd@f1,?___ftadd
  8750  000B18  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
  8751  000B1C  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
  8752  000B20  0012               	return	
  8753  000B22                     l1672:
  8754                           
  8755                           ; BSR set to: 0
  8756                           
  8757                           ; BSR set to: 0
  8758  000B22  0E06               	movlw	6
  8759  000B24  6F81               	movwf	___ftadd@sign& (0+255),b
  8760                           
  8761                           ; BSR set to: 0
  8762  000B26  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  8763                           
  8764                           ; BSR set to: 0
  8765  000B28  8F81               	bsf	___ftadd@sign& (0+255),7,b
  8766                           
  8767                           ; BSR set to: 0
  8768                           
  8769                           ; BSR set to: 0
  8770  000B2A  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  8771                           
  8772                           ; BSR set to: 0
  8773  000B2C  8D81               	bsf	___ftadd@sign& (0+255),6,b
  8774                           
  8775                           ; BSR set to: 0
  8776  000B2E  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8777                           
  8778                           ; BSR set to: 0
  8779  000B30  0EFF               	movlw	255
  8780  000B32  1778               	andwf	___ftadd@f1& (0+255),f,b
  8781  000B34  0EFF               	movlw	255
  8782  000B36  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8783  000B38  0E00               	movlw	0
  8784  000B3A  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8785  000B3C  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8786                           
  8787                           ; BSR set to: 0
  8788  000B3E  0EFF               	movlw	255
  8789  000B40  177B               	andwf	___ftadd@f2& (0+255),f,b
  8790  000B42  0EFF               	movlw	255
  8791  000B44  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8792  000B46  0E00               	movlw	0
  8793  000B48  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8794                           
  8795                           ; BSR set to: 0
  8796  000B4A  5182               	movf	___ftadd@exp2& (0+255),w,b
  8797  000B4C  5D83               	subwf	___ftadd@exp1& (0+255),w,b
  8798  000B4E  B0D8               	btfsc	status,0,c
  8799  000B50  D01B               	goto	l1677
  8800  000B52                     u5130:
  8801                           
  8802                           ; BSR set to: 0
  8803                           
  8804                           ; BSR set to: 0
  8805  000B52  90D8               	bcf	status,0,c
  8806  000B54  377B               	rlcf	___ftadd@f2& (0+255),f,b
  8807  000B56  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8808  000B58  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8809  000B5A  0782               	decf	___ftadd@exp2& (0+255),f,b
  8810                           
  8811                           ; BSR set to: 0
  8812  000B5C  5183               	movf	___ftadd@exp1& (0+255),w,b
  8813  000B5E  1982               	xorwf	___ftadd@exp2& (0+255),w,b
  8814  000B60  B4D8               	btfsc	status,2,c
  8815  000B62  D00D               	goto	l1682
  8816                           
  8817                           ; BSR set to: 0
  8818  000B64  0781               	decf	___ftadd@sign& (0+255),f,b
  8819  000B66  C081  F07E         	movff	___ftadd@sign,??___ftadd
  8820  000B6A  0E07               	movlw	7
  8821  000B6C  177E               	andwf	??___ftadd& (0+255),f,b
  8822  000B6E  B4D8               	btfsc	status,2,c
  8823  000B70  D006               	goto	l1682
  8824  000B72  D7EF               	goto	u5130
  8825  000B74                     
  8826                           ; BSR set to: 0
  8827                           
  8828                           ; BSR set to: 0
  8829  000B74  90D8               	bcf	status,0,c
  8830  000B76  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8831  000B78  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8832  000B7A  3378               	rrcf	___ftadd@f1& (0+255),f,b
  8833  000B7C  2B83               	incf	___ftadd@exp1& (0+255),f,b
  8834  000B7E                     l1682:
  8835                           
  8836                           ; BSR set to: 0
  8837                           
  8838                           ; BSR set to: 0
  8839  000B7E  5182               	movf	___ftadd@exp2& (0+255),w,b
  8840  000B80  1983               	xorwf	___ftadd@exp1& (0+255),w,b
  8841  000B82  B4D8               	btfsc	status,2,c
  8842  000B84  D01F               	goto	u5200
  8843  000B86  D7F6               	goto	l1683
  8844  000B88                     l1677:
  8845                           
  8846                           ; BSR set to: 0
  8847                           
  8848                           ; BSR set to: 0
  8849  000B88  5183               	movf	___ftadd@exp1& (0+255),w,b
  8850  000B8A  5D82               	subwf	___ftadd@exp2& (0+255),w,b
  8851  000B8C  B0D8               	btfsc	status,0,c
  8852  000B8E  D01A               	goto	u5200
  8853  000B90                     u5170:
  8854                           
  8855                           ; BSR set to: 0
  8856                           
  8857                           ; BSR set to: 0
  8858  000B90  90D8               	bcf	status,0,c
  8859  000B92  3778               	rlcf	___ftadd@f1& (0+255),f,b
  8860  000B94  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8861  000B96  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8862  000B98  0783               	decf	___ftadd@exp1& (0+255),f,b
  8863                           
  8864                           ; BSR set to: 0
  8865  000B9A  5183               	movf	___ftadd@exp1& (0+255),w,b
  8866  000B9C  1982               	xorwf	___ftadd@exp2& (0+255),w,b
  8867  000B9E  B4D8               	btfsc	status,2,c
  8868  000BA0  D00D               	goto	l1691
  8869                           
  8870                           ; BSR set to: 0
  8871  000BA2  0781               	decf	___ftadd@sign& (0+255),f,b
  8872  000BA4  C081  F07E         	movff	___ftadd@sign,??___ftadd
  8873  000BA8  0E07               	movlw	7
  8874  000BAA  177E               	andwf	??___ftadd& (0+255),f,b
  8875  000BAC  B4D8               	btfsc	status,2,c
  8876  000BAE  D006               	goto	l1691
  8877  000BB0  D7EF               	goto	u5170
  8878  000BB2                     
  8879                           ; BSR set to: 0
  8880                           
  8881                           ; BSR set to: 0
  8882  000BB2  90D8               	bcf	status,0,c
  8883  000BB4  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8884  000BB6  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8885  000BB8  337B               	rrcf	___ftadd@f2& (0+255),f,b
  8886  000BBA  2B82               	incf	___ftadd@exp2& (0+255),f,b
  8887  000BBC                     l1691:
  8888                           
  8889                           ; BSR set to: 0
  8890                           
  8891                           ; BSR set to: 0
  8892  000BBC  5182               	movf	___ftadd@exp2& (0+255),w,b
  8893  000BBE  1983               	xorwf	___ftadd@exp1& (0+255),w,b
  8894  000BC0  A4D8               	btfss	status,2,c
  8895  000BC2  D7F7               	goto	l1692
  8896  000BC4                     u5200:
  8897                           
  8898                           ; BSR set to: 0
  8899                           
  8900                           ; BSR set to: 0
  8901                           
  8902                           ; BSR set to: 0
  8903  000BC4  AF81               	btfss	___ftadd@sign& (0+255),7,b
  8904  000BC6  D00C               	goto	l1694
  8905                           
  8906                           ; BSR set to: 0
  8907  000BC8  0EFF               	movlw	255
  8908  000BCA  1B78               	xorwf	___ftadd@f1& (0+255),f,b
  8909  000BCC  0EFF               	movlw	255
  8910  000BCE  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8911  000BD0  0EFF               	movlw	255
  8912  000BD2  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8913  000BD4  0E01               	movlw	1
  8914  000BD6  2778               	addwf	___ftadd@f1& (0+255),f,b
  8915  000BD8  0E00               	movlw	0
  8916  000BDA  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8917  000BDC  0E00               	movlw	0
  8918  000BDE  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8919  000BE0                     l1694:
  8920                           
  8921                           ; BSR set to: 0
  8922  000BE0  AD81               	btfss	___ftadd@sign& (0+255),6,b
  8923  000BE2  D00C               	goto	l1695
  8924                           
  8925                           ; BSR set to: 0
  8926  000BE4  0EFF               	movlw	255
  8927  000BE6  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
  8928  000BE8  0EFF               	movlw	255
  8929  000BEA  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8930  000BEC  0EFF               	movlw	255
  8931  000BEE  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8932  000BF0  0E01               	movlw	1
  8933  000BF2  277B               	addwf	___ftadd@f2& (0+255),f,b
  8934  000BF4  0E00               	movlw	0
  8935  000BF6  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8936  000BF8  0E00               	movlw	0
  8937  000BFA  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8938  000BFC                     l1695:
  8939                           
  8940                           ; BSR set to: 0
  8941                           
  8942                           ; BSR set to: 0
  8943  000BFC  0E00               	movlw	0
  8944  000BFE  6F81               	movwf	___ftadd@sign& (0+255),b
  8945                           
  8946                           ; BSR set to: 0
  8947  000C00  5178               	movf	___ftadd@f1& (0+255),w,b
  8948  000C02  277B               	addwf	___ftadd@f2& (0+255),f,b
  8949  000C04  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
  8950  000C06  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8951  000C08  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
  8952  000C0A  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8953                           
  8954                           ; BSR set to: 0
  8955  000C0C  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8956  000C0E  D00E               	goto	l1696
  8957                           
  8958                           ; BSR set to: 0
  8959  000C10  0EFF               	movlw	255
  8960  000C12  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
  8961  000C14  0EFF               	movlw	255
  8962  000C16  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8963  000C18  0EFF               	movlw	255
  8964  000C1A  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8965  000C1C  0E01               	movlw	1
  8966  000C1E  277B               	addwf	___ftadd@f2& (0+255),f,b
  8967  000C20  0E00               	movlw	0
  8968  000C22  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8969  000C24  0E00               	movlw	0
  8970  000C26  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8971                           
  8972                           ; BSR set to: 0
  8973  000C28  0E01               	movlw	1
  8974  000C2A  6F81               	movwf	___ftadd@sign& (0+255),b
  8975  000C2C                     l1696:
  8976                           
  8977                           ; BSR set to: 0
  8978                           
  8979                           ; BSR set to: 0
  8980  000C2C  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
  8981  000C30  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  8982  000C34  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  8983  000C38  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
  8984  000C3C  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
  8985  000C40  ECE5  F00C         	call	___ftpack	;wreg free
  8986  000C44  C018  F078         	movff	?___ftpack,?___ftadd
  8987  000C48  C019  F079         	movff	?___ftpack+1,?___ftadd+1
  8988  000C4C  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
  8989  000C50  0012               	return	
  8990  000C52                     __end_of___ftadd:
  8991                           	opt stack 0
  8992                           tblptru	equ	0xFF8
  8993                           tblptrh	equ	0xFF7
  8994                           tblptrl	equ	0xFF6
  8995                           tablat	equ	0xFF5
  8996                           prodh	equ	0xFF4
  8997                           prodl	equ	0xFF3
  8998                           intcon	equ	0xFF2
  8999                           intcon2	equ	0xFF1
  9000                           postinc0	equ	0xFEE
  9001                           wreg	equ	0xFE8
  9002                           postdec1	equ	0xFE5
  9003                           plusw1	equ	0xFE3
  9004                           fsr1l	equ	0xFE1
  9005                           indf2	equ	0xFDF
  9006                           postinc2	equ	0xFDE
  9007                           postdec2	equ	0xFDD
  9008                           plusw2	equ	0xFDB
  9009                           fsr2h	equ	0xFDA
  9010                           fsr2l	equ	0xFD9
  9011                           status	equ	0xFD8
  9012                           
  9013 ;; *************** function ___ftneg *****************
  9014 ;; Defined at:
  9015 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  9016 ;; Parameters:    Size  Location     Type
  9017 ;;  f1              3   23[COMRAM] float 
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;		None
  9020 ;; Return value:  Size  Location     Type
  9021 ;;                  3   23[COMRAM] float 
  9022 ;; Registers used:
  9023 ;;		wreg, status,2, status,0
  9024 ;; Tracked objects:
  9025 ;;		On entry : 0/0
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9029 ;;      Params:         3       0       0       0       0       0       0
  9030 ;;      Locals:         0       0       0       0       0       0       0
  9031 ;;      Temps:          0       0       0       0       0       0       0
  9032 ;;      Totals:         3       0       0       0       0       0       0
  9033 ;;Total ram usage:        3 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; Hardware stack levels required when called:    3
  9036 ;; This function calls:
  9037 ;;		Nothing
  9038 ;; This function is called by:
  9039 ;;		_pow
  9040 ;;		_exp
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           	psect	text57
  9045  0025F4                     __ptext57:
  9046                           	opt stack 0
  9047  0025F4                     ___ftneg:
  9048                           	opt stack 24
  9049                           
  9050                           ;incstack = 0
  9051  0025F4  5018               	movf	___ftneg@f1,w,c
  9052  0025F6  1019               	iorwf	___ftneg@f1+1,w,c
  9053  0025F8  101A               	iorwf	___ftneg@f1+2,w,c
  9054  0025FA  B4D8               	btfsc	status,2,c
  9055  0025FC  D006               	goto	l1727
  9056  0025FE  0E00               	movlw	0
  9057  002600  1A18               	xorwf	___ftneg@f1,f,c
  9058  002602  0E00               	movlw	0
  9059  002604  1A19               	xorwf	___ftneg@f1+1,f,c
  9060  002606  0E80               	movlw	128
  9061  002608  1A1A               	xorwf	___ftneg@f1+2,f,c
  9062  00260A                     l1727:
  9063  00260A  C018  F018         	movff	___ftneg@f1,?___ftneg
  9064  00260E  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
  9065  002612  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
  9066  002616  0012               	return		;funcret
  9067  002618                     __end_of___ftneg:
  9068                           	opt stack 0
  9069                           tblptru	equ	0xFF8
  9070                           tblptrh	equ	0xFF7
  9071                           tblptrl	equ	0xFF6
  9072                           tablat	equ	0xFF5
  9073                           prodh	equ	0xFF4
  9074                           prodl	equ	0xFF3
  9075                           intcon	equ	0xFF2
  9076                           intcon2	equ	0xFF1
  9077                           postinc0	equ	0xFEE
  9078                           wreg	equ	0xFE8
  9079                           postdec1	equ	0xFE5
  9080                           plusw1	equ	0xFE3
  9081                           fsr1l	equ	0xFE1
  9082                           indf2	equ	0xFDF
  9083                           postinc2	equ	0xFDE
  9084                           postdec2	equ	0xFDD
  9085                           plusw2	equ	0xFDB
  9086                           fsr2h	equ	0xFDA
  9087                           fsr2l	equ	0xFD9
  9088                           status	equ	0xFD8
  9089                           
  9090 ;; *************** function ___ftdiv *****************
  9091 ;; Defined at:
  9092 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  9093 ;; Parameters:    Size  Location     Type
  9094 ;;  f1              3   40[COMRAM] float 
  9095 ;;  f2              3   43[COMRAM] float 
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;  f3              3    4[BANK0 ] float 
  9098 ;;  sign            1    8[BANK0 ] unsigned char 
  9099 ;;  exp             1    7[BANK0 ] unsigned char 
  9100 ;;  cntr            1    3[BANK0 ] unsigned char 
  9101 ;; Return value:  Size  Location     Type
  9102 ;;                  3   40[COMRAM] float 
  9103 ;; Registers used:
  9104 ;;		wreg, status,2, status,0, cstack
  9105 ;; Tracked objects:
  9106 ;;		On entry : 0/0
  9107 ;;		On exit  : 0/0
  9108 ;;		Unchanged: 0/0
  9109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9110 ;;      Params:         6       0       0       0       0       0       0
  9111 ;;      Locals:         0       6       0       0       0       0       0
  9112 ;;      Temps:          0       3       0       0       0       0       0
  9113 ;;      Totals:         6       9       0       0       0       0       0
  9114 ;;Total ram usage:       15 bytes
  9115 ;; Hardware stack levels used:    1
  9116 ;; Hardware stack levels required when called:    4
  9117 ;; This function calls:
  9118 ;;		___ftpack
  9119 ;; This function is called by:
  9120 ;;		_AdcConvert
  9121 ;;		_CheckFlashPrecentage
  9122 ;;		_exp
  9123 ;; This function uses a non-reentrant model
  9124 ;;
  9125                           
  9126                           	psect	text58
  9127  00135E                     __ptext58:
  9128                           	opt stack 0
  9129  00135E                     ___ftdiv:
  9130                           	opt stack 25
  9131                           
  9132                           ;incstack = 0
  9133  00135E  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
  9134  001362  0100               	movlb	0	; () banked
  9135  001364  6B61               	clrf	(??___ftdiv+1)& (0+255),b
  9136  001366  6B62               	clrf	(??___ftdiv+2)& (0+255),b
  9137  001368  342A               	rlcf	___ftdiv@f1+1,w,c
  9138  00136A  3760               	rlcf	??___ftdiv& (0+255),f,b
  9139  00136C  E301               	bnc	u5451
  9140  00136E  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
  9141  001370                     u5451:
  9142  001370  5160               	movf	??___ftdiv& (0+255),w,b
  9143  001372  6F67               	movwf	___ftdiv@exp& (0+255),b
  9144  001374  5167               	movf	___ftdiv@exp& (0+255),w,b
  9145  001376  A4D8               	btfss	status,2,c
  9146  001378  D007               	goto	l1701
  9147                           
  9148                           ; BSR set to: 0
  9149  00137A  0E00               	movlw	0
  9150  00137C  6E29               	movwf	?___ftdiv,c
  9151  00137E  0E00               	movlw	0
  9152  001380  6E2A               	movwf	?___ftdiv+1,c
  9153  001382  0E00               	movlw	0
  9154  001384  6E2B               	movwf	?___ftdiv+2,c
  9155                           
  9156                           ; BSR set to: 0
  9157  001386  0012               	return	
  9158  001388                     l1701:
  9159                           
  9160                           ; BSR set to: 0
  9161                           
  9162                           ; BSR set to: 0
  9163  001388  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
  9164  00138C  6B61               	clrf	(??___ftdiv+1)& (0+255),b
  9165  00138E  6B62               	clrf	(??___ftdiv+2)& (0+255),b
  9166  001390  342D               	rlcf	___ftdiv@f2+1,w,c
  9167  001392  3760               	rlcf	??___ftdiv& (0+255),f,b
  9168  001394  E301               	bnc	u5471
  9169  001396  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
  9170  001398                     u5471:
  9171  001398  5160               	movf	??___ftdiv& (0+255),w,b
  9172  00139A  6F68               	movwf	___ftdiv@sign& (0+255),b
  9173  00139C  5168               	movf	___ftdiv@sign& (0+255),w,b
  9174  00139E  A4D8               	btfss	status,2,c
  9175  0013A0  D007               	goto	l1703
  9176                           
  9177                           ; BSR set to: 0
  9178  0013A2  0E00               	movlw	0
  9179  0013A4  6E29               	movwf	?___ftdiv,c
  9180  0013A6  0E00               	movlw	0
  9181  0013A8  6E2A               	movwf	?___ftdiv+1,c
  9182  0013AA  0E00               	movlw	0
  9183  0013AC  6E2B               	movwf	?___ftdiv+2,c
  9184                           
  9185                           ; BSR set to: 0
  9186  0013AE  0012               	return	
  9187  0013B0                     l1703:
  9188                           
  9189                           ; BSR set to: 0
  9190                           
  9191                           ; BSR set to: 0
  9192  0013B0  0E00               	movlw	0
  9193  0013B2  6F64               	movwf	___ftdiv@f3& (0+255),b
  9194  0013B4  0E00               	movlw	0
  9195  0013B6  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
  9196  0013B8  0E00               	movlw	0
  9197  0013BA  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
  9198                           
  9199                           ; BSR set to: 0
  9200  0013BC  5168               	movf	___ftdiv@sign& (0+255),w,b
  9201  0013BE  0F89               	addlw	137
  9202  0013C0  5F67               	subwf	___ftdiv@exp& (0+255),f,b
  9203                           
  9204                           ; BSR set to: 0
  9205  0013C2  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
  9206                           
  9207                           ; BSR set to: 0
  9208  0013C6  502E               	movf	___ftdiv@f2+2,w,c
  9209  0013C8  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
  9210                           
  9211                           ; BSR set to: 0
  9212  0013CA  0E80               	movlw	128
  9213  0013CC  1768               	andwf	___ftdiv@sign& (0+255),f,b
  9214                           
  9215                           ; BSR set to: 0
  9216  0013CE  8E2A               	bsf	___ftdiv@f1+1,7,c
  9217                           
  9218                           ; BSR set to: 0
  9219  0013D0  0EFF               	movlw	255
  9220  0013D2  1629               	andwf	___ftdiv@f1,f,c
  9221  0013D4  0EFF               	movlw	255
  9222  0013D6  162A               	andwf	___ftdiv@f1+1,f,c
  9223  0013D8  0E00               	movlw	0
  9224  0013DA  162B               	andwf	___ftdiv@f1+2,f,c
  9225                           
  9226                           ; BSR set to: 0
  9227  0013DC  8E2D               	bsf	___ftdiv@f2+1,7,c
  9228                           
  9229                           ; BSR set to: 0
  9230  0013DE  0EFF               	movlw	255
  9231  0013E0  162C               	andwf	___ftdiv@f2,f,c
  9232  0013E2  0EFF               	movlw	255
  9233  0013E4  162D               	andwf	___ftdiv@f2+1,f,c
  9234  0013E6  0E00               	movlw	0
  9235  0013E8  162E               	andwf	___ftdiv@f2+2,f,c
  9236                           
  9237                           ; BSR set to: 0
  9238  0013EA  0E18               	movlw	24
  9239  0013EC  6F63               	movwf	___ftdiv@cntr& (0+255),b
  9240  0013EE                     
  9241                           ; BSR set to: 0
  9242                           
  9243                           ; BSR set to: 0
  9244  0013EE  90D8               	bcf	status,0,c
  9245  0013F0  3764               	rlcf	___ftdiv@f3& (0+255),f,b
  9246  0013F2  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  9247  0013F4  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  9248                           
  9249                           ; BSR set to: 0
  9250  0013F6  502C               	movf	___ftdiv@f2,w,c
  9251  0013F8  5C29               	subwf	___ftdiv@f1,w,c
  9252  0013FA  502D               	movf	___ftdiv@f2+1,w,c
  9253  0013FC  582A               	subwfb	___ftdiv@f1+1,w,c
  9254  0013FE  502E               	movf	___ftdiv@f2+2,w,c
  9255  001400  582B               	subwfb	___ftdiv@f1+2,w,c
  9256  001402  A0D8               	btfss	status,0,c
  9257  001404  D007               	goto	l1705
  9258                           
  9259                           ; BSR set to: 0
  9260  001406  502C               	movf	___ftdiv@f2,w,c
  9261  001408  5E29               	subwf	___ftdiv@f1,f,c
  9262  00140A  502D               	movf	___ftdiv@f2+1,w,c
  9263  00140C  5A2A               	subwfb	___ftdiv@f1+1,f,c
  9264  00140E  502E               	movf	___ftdiv@f2+2,w,c
  9265  001410  5A2B               	subwfb	___ftdiv@f1+2,f,c
  9266                           
  9267                           ; BSR set to: 0
  9268  001412  8164               	bsf	___ftdiv@f3& (0+255),0,b
  9269  001414                     l1705:
  9270                           
  9271                           ; BSR set to: 0
  9272  001414  90D8               	bcf	status,0,c
  9273  001416  3629               	rlcf	___ftdiv@f1,f,c
  9274  001418  362A               	rlcf	___ftdiv@f1+1,f,c
  9275  00141A  362B               	rlcf	___ftdiv@f1+2,f,c
  9276                           
  9277                           ; BSR set to: 0
  9278  00141C  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
  9279  00141E  D7E7               	goto	l1704
  9280                           
  9281                           ; BSR set to: 0
  9282                           
  9283                           ; BSR set to: 0
  9284  001420  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
  9285  001424  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9286  001428  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9287  00142C  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
  9288  001430  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
  9289  001434  ECE5  F00C         	call	___ftpack	;wreg free
  9290  001438  C018  F029         	movff	?___ftpack,?___ftdiv
  9291  00143C  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
  9292  001440  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
  9293  001444  0012               	return	
  9294  001446                     __end_of___ftdiv:
  9295                           	opt stack 0
  9296                           tblptru	equ	0xFF8
  9297                           tblptrh	equ	0xFF7
  9298                           tblptrl	equ	0xFF6
  9299                           tablat	equ	0xFF5
  9300                           prodh	equ	0xFF4
  9301                           prodl	equ	0xFF3
  9302                           intcon	equ	0xFF2
  9303                           intcon2	equ	0xFF1
  9304                           postinc0	equ	0xFEE
  9305                           wreg	equ	0xFE8
  9306                           postdec1	equ	0xFE5
  9307                           plusw1	equ	0xFE3
  9308                           fsr1l	equ	0xFE1
  9309                           indf2	equ	0xFDF
  9310                           postinc2	equ	0xFDE
  9311                           postdec2	equ	0xFDD
  9312                           plusw2	equ	0xFDB
  9313                           fsr2h	equ	0xFDA
  9314                           fsr2l	equ	0xFD9
  9315                           status	equ	0xFD8
  9316                           
  9317 ;; *************** function ___awtoft *****************
  9318 ;; Defined at:
  9319 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;  c               2   31[COMRAM] int 
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;  sign            1   34[COMRAM] unsigned char 
  9324 ;; Return value:  Size  Location     Type
  9325 ;;                  3   31[COMRAM] float 
  9326 ;; Registers used:
  9327 ;;		wreg, status,2, status,0, cstack
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9333 ;;      Params:         3       0       0       0       0       0       0
  9334 ;;      Locals:         1       0       0       0       0       0       0
  9335 ;;      Temps:          0       0       0       0       0       0       0
  9336 ;;      Totals:         4       0       0       0       0       0       0
  9337 ;;Total ram usage:        4 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    4
  9340 ;; This function calls:
  9341 ;;		___ftpack
  9342 ;; This function is called by:
  9343 ;;		_exp
  9344 ;;		_log
  9345 ;; This function uses a non-reentrant model
  9346 ;;
  9347                           
  9348                           	psect	text59
  9349  0023DC                     __ptext59:
  9350                           	opt stack 0
  9351  0023DC                     ___awtoft:
  9352                           	opt stack 23
  9353                           
  9354                           ;incstack = 0
  9355  0023DC  0E00               	movlw	0
  9356  0023DE  6E23               	movwf	___awtoft@sign,c
  9357  0023E0  AE21               	btfss	___awtoft@c+1,7,c
  9358  0023E2  D006               	goto	l1618
  9359  0023E4  6C20               	negf	___awtoft@c,c
  9360  0023E6  1E21               	comf	___awtoft@c+1,f,c
  9361  0023E8  B0D8               	btfsc	status,0,c
  9362  0023EA  2A21               	incf	___awtoft@c+1,f,c
  9363  0023EC  0E01               	movlw	1
  9364  0023EE  6E23               	movwf	___awtoft@sign,c
  9365  0023F0                     l1618:
  9366  0023F0  C020  F018         	movff	___awtoft@c,___ftpack@arg
  9367  0023F4  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
  9368  0023F8  6A1A               	clrf	___ftpack@arg+2,c
  9369  0023FA  0E8E               	movlw	142
  9370  0023FC  6E1B               	movwf	___ftpack@exp,c
  9371  0023FE  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
  9372  002402  ECE5  F00C         	call	___ftpack	;wreg free
  9373  002406  C018  F020         	movff	?___ftpack,?___awtoft
  9374  00240A  C019  F021         	movff	?___ftpack+1,?___awtoft+1
  9375  00240E  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
  9376  002412  0012               	return	
  9377  002414                     __end_of___awtoft:
  9378                           	opt stack 0
  9379                           tblptru	equ	0xFF8
  9380                           tblptrh	equ	0xFF7
  9381                           tblptrl	equ	0xFF6
  9382                           tablat	equ	0xFF5
  9383                           prodh	equ	0xFF4
  9384                           prodl	equ	0xFF3
  9385                           intcon	equ	0xFF2
  9386                           intcon2	equ	0xFF1
  9387                           postinc0	equ	0xFEE
  9388                           wreg	equ	0xFE8
  9389                           postdec1	equ	0xFE5
  9390                           plusw1	equ	0xFE3
  9391                           fsr1l	equ	0xFE1
  9392                           indf2	equ	0xFDF
  9393                           postinc2	equ	0xFDE
  9394                           postdec2	equ	0xFDD
  9395                           plusw2	equ	0xFDB
  9396                           fsr2h	equ	0xFDA
  9397                           fsr2l	equ	0xFD9
  9398                           status	equ	0xFD8
  9399                           
  9400 ;; *************** function ___lltoft *****************
  9401 ;; Defined at:
  9402 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;  c               4   31[COMRAM] unsigned long 
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;  exp             1   39[COMRAM] unsigned char 
  9407 ;; Return value:  Size  Location     Type
  9408 ;;                  3   31[COMRAM] float 
  9409 ;; Registers used:
  9410 ;;		wreg, status,2, status,0, cstack
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9416 ;;      Params:         4       0       0       0       0       0       0
  9417 ;;      Locals:         1       0       0       0       0       0       0
  9418 ;;      Temps:          4       0       0       0       0       0       0
  9419 ;;      Totals:         9       0       0       0       0       0       0
  9420 ;;Total ram usage:        9 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    4
  9423 ;; This function calls:
  9424 ;;		___ftpack
  9425 ;; This function is called by:
  9426 ;;		_CheckFlashPrecentage
  9427 ;;		_pow
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431                           	psect	text60
  9432  001F82                     __ptext60:
  9433                           	opt stack 0
  9434  001F82                     ___lltoft:
  9435                           	opt stack 25
  9436                           
  9437                           ;incstack = 0
  9438  001F82  0E8E               	movlw	142
  9439  001F84  6E28               	movwf	___lltoft@exp,c
  9440  001F86  D006               	goto	l1794
  9441  001F88  90D8               	bcf	status,0,c
  9442  001F8A  3223               	rrcf	___lltoft@c+3,f,c
  9443  001F8C  3222               	rrcf	___lltoft@c+2,f,c
  9444  001F8E  3221               	rrcf	___lltoft@c+1,f,c
  9445  001F90  3220               	rrcf	___lltoft@c,f,c
  9446  001F92  2A28               	incf	___lltoft@exp,f,c
  9447  001F94                     l1794:
  9448  001F94  0E00               	movlw	0
  9449  001F96  1420               	andwf	___lltoft@c,w,c
  9450  001F98  6E24               	movwf	??___lltoft& (0+255),c
  9451  001F9A  0E00               	movlw	0
  9452  001F9C  1421               	andwf	___lltoft@c+1,w,c
  9453  001F9E  6E25               	movwf	(??___lltoft+1)& (0+255),c
  9454  001FA0  0E00               	movlw	0
  9455  001FA2  1422               	andwf	___lltoft@c+2,w,c
  9456  001FA4  6E26               	movwf	(??___lltoft+2)& (0+255),c
  9457  001FA6  0EFF               	movlw	255
  9458  001FA8  1423               	andwf	___lltoft@c+3,w,c
  9459  001FAA  6E27               	movwf	(??___lltoft+3)& (0+255),c
  9460  001FAC  5024               	movf	??___lltoft,w,c
  9461  001FAE  1025               	iorwf	??___lltoft+1,w,c
  9462  001FB0  1026               	iorwf	??___lltoft+2,w,c
  9463  001FB2  1027               	iorwf	??___lltoft+3,w,c
  9464  001FB4  A4D8               	btfss	status,2,c
  9465  001FB6  D7E8               	goto	l1795
  9466  001FB8  C020  F018         	movff	___lltoft@c,___ftpack@arg
  9467  001FBC  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
  9468  001FC0  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
  9469  001FC4  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
  9470  001FC8  0E00               	movlw	0
  9471  001FCA  6E1C               	movwf	___ftpack@sign,c
  9472  001FCC  ECE5  F00C         	call	___ftpack	;wreg free
  9473  001FD0  C018  F020         	movff	?___ftpack,?___lltoft
  9474  001FD4  C019  F021         	movff	?___ftpack+1,?___lltoft+1
  9475  001FD8  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
  9476  001FDC  0012               	return	
  9477  001FDE                     __end_of___lltoft:
  9478                           	opt stack 0
  9479                           tblptru	equ	0xFF8
  9480                           tblptrh	equ	0xFF7
  9481                           tblptrl	equ	0xFF6
  9482                           tablat	equ	0xFF5
  9483                           prodh	equ	0xFF4
  9484                           prodl	equ	0xFF3
  9485                           intcon	equ	0xFF2
  9486                           intcon2	equ	0xFF1
  9487                           postinc0	equ	0xFEE
  9488                           wreg	equ	0xFE8
  9489                           postdec1	equ	0xFE5
  9490                           plusw1	equ	0xFE3
  9491                           fsr1l	equ	0xFE1
  9492                           indf2	equ	0xFDF
  9493                           postinc2	equ	0xFDE
  9494                           postdec2	equ	0xFDD
  9495                           plusw2	equ	0xFDB
  9496                           fsr2h	equ	0xFDA
  9497                           fsr2l	equ	0xFD9
  9498                           status	equ	0xFD8
  9499                           
  9500 ;; *************** function ___lwtoft *****************
  9501 ;; Defined at:
  9502 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;  c               2   31[COMRAM] unsigned int 
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;		None
  9507 ;; Return value:  Size  Location     Type
  9508 ;;                  3   31[COMRAM] float 
  9509 ;; Registers used:
  9510 ;;		wreg, status,2, status,0, cstack
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9516 ;;      Params:         3       0       0       0       0       0       0
  9517 ;;      Locals:         0       0       0       0       0       0       0
  9518 ;;      Temps:          0       0       0       0       0       0       0
  9519 ;;      Totals:         3       0       0       0       0       0       0
  9520 ;;Total ram usage:        3 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    4
  9523 ;; This function calls:
  9524 ;;		___ftpack
  9525 ;; This function is called by:
  9526 ;;		_AdcConvert
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text61
  9531  002618                     __ptext61:
  9532                           	opt stack 0
  9533  002618                     ___lwtoft:
  9534                           	opt stack 25
  9535                           
  9536                           ;incstack = 0
  9537  002618  C020  F018         	movff	___lwtoft@c,___ftpack@arg
  9538  00261C  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
  9539  002620  6A1A               	clrf	___ftpack@arg+2,c
  9540  002622  0E8E               	movlw	142
  9541  002624  6E1B               	movwf	___ftpack@exp,c
  9542  002626  0E00               	movlw	0
  9543  002628  6E1C               	movwf	___ftpack@sign,c
  9544  00262A  ECE5  F00C         	call	___ftpack	;wreg free
  9545  00262E  C018  F020         	movff	?___ftpack,?___lwtoft
  9546  002632  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
  9547  002636  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
  9548  00263A  0012               	return	
  9549  00263C                     __end_of___lwtoft:
  9550                           	opt stack 0
  9551                           tblptru	equ	0xFF8
  9552                           tblptrh	equ	0xFF7
  9553                           tblptrl	equ	0xFF6
  9554                           tablat	equ	0xFF5
  9555                           prodh	equ	0xFF4
  9556                           prodl	equ	0xFF3
  9557                           intcon	equ	0xFF2
  9558                           intcon2	equ	0xFF1
  9559                           postinc0	equ	0xFEE
  9560                           wreg	equ	0xFE8
  9561                           postdec1	equ	0xFE5
  9562                           plusw1	equ	0xFE3
  9563                           fsr1l	equ	0xFE1
  9564                           indf2	equ	0xFDF
  9565                           postinc2	equ	0xFDE
  9566                           postdec2	equ	0xFDD
  9567                           plusw2	equ	0xFDB
  9568                           fsr2h	equ	0xFDA
  9569                           fsr2l	equ	0xFD9
  9570                           status	equ	0xFD8
  9571                           
  9572 ;; *************** function ___ftpack *****************
  9573 ;; Defined at:
  9574 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;  arg             3   23[COMRAM] unsigned um
  9577 ;;  exp             1   26[COMRAM] unsigned char 
  9578 ;;  sign            1   27[COMRAM] unsigned char 
  9579 ;; Auto vars:     Size  Location     Type
  9580 ;;		None
  9581 ;; Return value:  Size  Location     Type
  9582 ;;                  3   23[COMRAM] float 
  9583 ;; Registers used:
  9584 ;;		wreg, status,2, status,0
  9585 ;; Tracked objects:
  9586 ;;		On entry : 0/0
  9587 ;;		On exit  : 0/0
  9588 ;;		Unchanged: 0/0
  9589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9590 ;;      Params:         5       0       0       0       0       0       0
  9591 ;;      Locals:         0       0       0       0       0       0       0
  9592 ;;      Temps:          3       0       0       0       0       0       0
  9593 ;;      Totals:         8       0       0       0       0       0       0
  9594 ;;Total ram usage:        8 bytes
  9595 ;; Hardware stack levels used:    1
  9596 ;; Hardware stack levels required when called:    3
  9597 ;; This function calls:
  9598 ;;		Nothing
  9599 ;; This function is called by:
  9600 ;;		___altoft
  9601 ;;		___awtoft
  9602 ;;		___ftadd
  9603 ;;		___ftdiv
  9604 ;;		___ftmul
  9605 ;;		___lltoft
  9606 ;;		___lwtoft
  9607 ;; This function uses a non-reentrant model
  9608 ;;
  9609                           
  9610                           	psect	text62
  9611  0019CA                     __ptext62:
  9612                           	opt stack 0
  9613  0019CA                     ___ftpack:
  9614                           	opt stack 25
  9615                           
  9616                           ;incstack = 0
  9617  0019CA  501B               	movf	___ftpack@exp,w,c
  9618  0019CC  B4D8               	btfsc	status,2,c
  9619  0019CE  D005               	goto	u4940
  9620  0019D0  5018               	movf	___ftpack@arg,w,c
  9621  0019D2  1019               	iorwf	___ftpack@arg+1,w,c
  9622  0019D4  101A               	iorwf	___ftpack@arg+2,w,c
  9623  0019D6  A4D8               	btfss	status,2,c
  9624  0019D8  D00C               	goto	l1637
  9625  0019DA                     u4940:
  9626  0019DA  0E00               	movlw	0
  9627  0019DC  6E18               	movwf	?___ftpack,c
  9628  0019DE  0E00               	movlw	0
  9629  0019E0  6E19               	movwf	?___ftpack+1,c
  9630  0019E2  0E00               	movlw	0
  9631  0019E4  6E1A               	movwf	?___ftpack+2,c
  9632  0019E6  0012               	return	
  9633  0019E8  2A1B               	incf	___ftpack@exp,f,c
  9634  0019EA  90D8               	bcf	status,0,c
  9635  0019EC  321A               	rrcf	___ftpack@arg+2,f,c
  9636  0019EE  3219               	rrcf	___ftpack@arg+1,f,c
  9637  0019F0  3218               	rrcf	___ftpack@arg,f,c
  9638  0019F2                     l1637:
  9639  0019F2  0E00               	movlw	0
  9640  0019F4  1418               	andwf	___ftpack@arg,w,c
  9641  0019F6  6E1D               	movwf	??___ftpack& (0+255),c
  9642  0019F8  0E00               	movlw	0
  9643  0019FA  1419               	andwf	___ftpack@arg+1,w,c
  9644  0019FC  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  9645  0019FE  0EFE               	movlw	254
  9646  001A00  141A               	andwf	___ftpack@arg+2,w,c
  9647  001A02  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  9648  001A04  501D               	movf	??___ftpack,w,c
  9649  001A06  101E               	iorwf	??___ftpack+1,w,c
  9650  001A08  101F               	iorwf	??___ftpack+2,w,c
  9651  001A0A  B4D8               	btfsc	status,2,c
  9652  001A0C  D00C               	goto	l1640
  9653  001A0E  D7EC               	goto	l1638
  9654  001A10  2A1B               	incf	___ftpack@exp,f,c
  9655  001A12  0E01               	movlw	1
  9656  001A14  2618               	addwf	___ftpack@arg,f,c
  9657  001A16  0E00               	movlw	0
  9658  001A18  2219               	addwfc	___ftpack@arg+1,f,c
  9659  001A1A  0E00               	movlw	0
  9660  001A1C  221A               	addwfc	___ftpack@arg+2,f,c
  9661  001A1E  90D8               	bcf	status,0,c
  9662  001A20  321A               	rrcf	___ftpack@arg+2,f,c
  9663  001A22  3219               	rrcf	___ftpack@arg+1,f,c
  9664  001A24  3218               	rrcf	___ftpack@arg,f,c
  9665  001A26                     l1640:
  9666  001A26  0E00               	movlw	0
  9667  001A28  1418               	andwf	___ftpack@arg,w,c
  9668  001A2A  6E1D               	movwf	??___ftpack& (0+255),c
  9669  001A2C  0E00               	movlw	0
  9670  001A2E  1419               	andwf	___ftpack@arg+1,w,c
  9671  001A30  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  9672  001A32  0EFF               	movlw	255
  9673  001A34  141A               	andwf	___ftpack@arg+2,w,c
  9674  001A36  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  9675  001A38  501D               	movf	??___ftpack,w,c
  9676  001A3A  101E               	iorwf	??___ftpack+1,w,c
  9677  001A3C  101F               	iorwf	??___ftpack+2,w,c
  9678  001A3E  B4D8               	btfsc	status,2,c
  9679  001A40  D006               	goto	l1643
  9680  001A42  D7E6               	goto	l1641
  9681  001A44  061B               	decf	___ftpack@exp,f,c
  9682  001A46  90D8               	bcf	status,0,c
  9683  001A48  3618               	rlcf	___ftpack@arg,f,c
  9684  001A4A  3619               	rlcf	___ftpack@arg+1,f,c
  9685  001A4C  361A               	rlcf	___ftpack@arg+2,f,c
  9686  001A4E                     l1643:
  9687  001A4E  BE19               	btfsc	___ftpack@arg+1,7,c
  9688  001A50  D003               	goto	u4980
  9689  001A52  0E02               	movlw	2
  9690  001A54  601B               	cpfslt	___ftpack@exp,c
  9691  001A56  D7F6               	goto	l1644
  9692  001A58                     u4980:
  9693  001A58  A01B               	btfss	___ftpack@exp,0,c
  9694  001A5A  9E19               	bcf	___ftpack@arg+1,7,c
  9695  001A5C  90D8               	bcf	status,0,c
  9696  001A5E  321B               	rrcf	___ftpack@exp,f,c
  9697  001A60  501B               	movf	___ftpack@exp,w,c
  9698  001A62  121A               	iorwf	___ftpack@arg+2,f,c
  9699  001A64  501C               	movf	___ftpack@sign,w,c
  9700  001A66  A4D8               	btfss	status,2,c
  9701  001A68  8E1A               	bsf	___ftpack@arg+2,7,c
  9702  001A6A  C018  F018         	movff	___ftpack@arg,?___ftpack
  9703  001A6E  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  9704  001A72  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  9705  001A76  0012               	return	
  9706  001A78                     __end_of___ftpack:
  9707                           	opt stack 0
  9708                           tblptru	equ	0xFF8
  9709                           tblptrh	equ	0xFF7
  9710                           tblptrl	equ	0xFF6
  9711                           tablat	equ	0xFF5
  9712                           prodh	equ	0xFF4
  9713                           prodl	equ	0xFF3
  9714                           intcon	equ	0xFF2
  9715                           intcon2	equ	0xFF1
  9716                           postinc0	equ	0xFEE
  9717                           wreg	equ	0xFE8
  9718                           postdec1	equ	0xFE5
  9719                           plusw1	equ	0xFE3
  9720                           fsr1l	equ	0xFE1
  9721                           indf2	equ	0xFDF
  9722                           postinc2	equ	0xFDE
  9723                           postdec2	equ	0xFDD
  9724                           plusw2	equ	0xFDB
  9725                           fsr2h	equ	0xFDA
  9726                           fsr2l	equ	0xFD9
  9727                           status	equ	0xFD8
  9728                           
  9729 ;; *************** function _FlashSampleWrite *****************
  9730 ;; Defined at:
  9731 ;;		line 29 in file "FlashApp.c"
  9732 ;; Parameters:    Size  Location     Type
  9733 ;;  sampleData      2   44[COMRAM] unsigned int 
  9734 ;;  channelNum      1   46[COMRAM] unsigned char 
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  1    wreg      void 
  9739 ;; Registers used:
  9740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9746 ;;      Params:         3       0       0       0       0       0       0
  9747 ;;      Locals:         0       2       0       0       0       0       0
  9748 ;;      Temps:          0       2       0       0       0       0       0
  9749 ;;      Totals:         3       4       0       0       0       0       0
  9750 ;;Total ram usage:        7 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    5
  9753 ;; This function calls:
  9754 ;;		_FLASH_IsWriteDone
  9755 ;;		_FLASH_WriteBlock
  9756 ;; This function is called by:
  9757 ;;		_AdcConvert
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           	psect	text63
  9762  001076                     __ptext63:
  9763                           	opt stack 0
  9764  001076                     _FlashSampleWrite:
  9765                           	opt stack 24
  9766                           
  9767                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
  9768                           
  9769                           ;incstack = 0
  9770  001076  502F               	movf	FlashSampleWrite@channelNum,w,c
  9771  001078  0100               	movlb	0	; () banked
  9772  00107A  6F60               	movwf	??_FlashSampleWrite& (0+255),b
  9773  00107C  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
  9774  00107E  0E0C               	movlw	12
  9775  001080                     u5915:
  9776  001080  90D8               	bcf	status,0,c
  9777  001082  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
  9778  001084  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
  9779  001086  2EE8               	decfsz	wreg,f,c
  9780  001088  D7FB               	goto	u5915
  9781  00108A  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
  9782  00108E  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
  9783                           
  9784                           ;FlashApp.c: 33: sampleData |= rotateLeft;
  9785  001092  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
  9786  001094  122D               	iorwf	FlashSampleWrite@sampleData,f,c
  9787  001096  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
  9788  001098  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
  9789                           
  9790                           ; BSR set to: 0
  9791                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
  9792  00109A  90D8               	bcf	status,0,c
  9793  00109C  35C4               	rlcf	_sampleCount& (0+255),w,b
  9794  00109E  6ED9               	movwf	fsr2l,c
  9795  0010A0  35C5               	rlcf	(_sampleCount+1)& (0+255),w,b
  9796  0010A2  6EDA               	movwf	fsr2h,c
  9797  0010A4  0E6E               	movlw	low _sampleArray
  9798  0010A6  26D9               	addwf	fsr2l,f,c
  9799  0010A8  0E01               	movlw	high _sampleArray
  9800  0010AA  22DA               	addwfc	fsr2h,f,c
  9801  0010AC  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
  9802  0010B0  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
  9803                           
  9804                           ; BSR set to: 0
  9805                           ;FlashApp.c: 35: sampleCount ++;
  9806  0010B4  4BC4               	infsnz	_sampleCount& (0+255),f,b
  9807  0010B6  2BC5               	incf	(_sampleCount+1)& (0+255),f,b
  9808                           
  9809                           ; BSR set to: 0
  9810                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
  9811  0010B8  C0C4  F060         	movff	_sampleCount,??_FlashSampleWrite
  9812  0010BC  C0C5  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
  9813  0010C0  90D8               	bcf	status,0,c
  9814  0010C2  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
  9815  0010C4  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
  9816  0010C6  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
  9817  0010C8  E104               	bnz	u5920
  9818  0010CA  0E40               	movlw	64
  9819  0010CC  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
  9820  0010CE  A0D8               	btfss	status,0,c
  9821  0010D0  0012               	return	
  9822  0010D2                     u5920:
  9823                           
  9824                           ; BSR set to: 0
  9825  0010D2  ECA8  F013         	call	_FLASH_IsWriteDone	;wreg free
  9826  0010D6  0900               	iorlw	0
  9827  0010D8  B4D8               	btfsc	status,2,c
  9828  0010DA  0012               	return	
  9829                           
  9830                           ;FlashApp.c: 38: {
  9831                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
  9832  0010DC  C042  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
  9833  0010E0  C043  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
  9834  0010E4  C044  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
  9835  0010E8  C045  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
  9836  0010EC  0E6E               	movlw	low _sampleArray
  9837  0010EE  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
  9838  0010F0  0E01               	movlw	high _sampleArray
  9839  0010F2  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
  9840  0010F4  ECD4  F00B         	call	_FLASH_WriteBlock	;wreg free
  9841                           
  9842                           ;FlashApp.c: 40: writeAddress += (64);
  9843  0010F8  0E40               	movlw	64
  9844  0010FA  2642               	addwf	_writeAddress,f,c
  9845  0010FC  0E00               	movlw	0
  9846  0010FE  2243               	addwfc	_writeAddress+1,f,c
  9847  001100  2244               	addwfc	_writeAddress+2,f,c
  9848  001102  2245               	addwfc	_writeAddress+3,f,c
  9849                           
  9850                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
  9851  001104  5045               	movf	_writeAddress+3,w,c
  9852  001106  1044               	iorwf	_writeAddress+2,w,c
  9853  001108  E106               	bnz	u5940
  9854  00110A  0EF0               	movlw	240
  9855  00110C  5C42               	subwf	_writeAddress,w,c
  9856  00110E  0E7F               	movlw	127
  9857  001110  5843               	subwfb	_writeAddress+1,w,c
  9858  001112  A0D8               	btfss	status,0,c
  9859  001114  D018               	goto	l257
  9860  001116                     u5940:
  9861                           
  9862                           ;FlashApp.c: 42: {
  9863                           ;FlashApp.c: 43: writeAddress = 0x4000;
  9864  001116  0E00               	movlw	0
  9865  001118  6E42               	movwf	_writeAddress,c
  9866  00111A  0E40               	movlw	64
  9867  00111C  6E43               	movwf	_writeAddress+1,c
  9868  00111E  0E00               	movlw	0
  9869  001120  6E44               	movwf	_writeAddress+2,c
  9870  001122  0E00               	movlw	0
  9871  001124  6E45               	movwf	_writeAddress+3,c
  9872                           
  9873                           ;FlashApp.c: 44: isReWriteDone = 1;
  9874  001126  0E01               	movlw	1
  9875  001128  0100               	movlb	0	; () banked
  9876  00112A  6FC8               	movwf	_isReWriteDone& (0+255),b
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;FlashApp.c: 45: if (readAddress == 0x4000)
  9880  00112C  0E40               	movlw	64
  9881  00112E  19F4               	xorwf	(_readAddress+1)& (0+255),w,b
  9882  001130  11F3               	iorwf	_readAddress& (0+255),w,b
  9883  001132  11F5               	iorwf	(_readAddress+2)& (0+255),w,b
  9884  001134  11F6               	iorwf	(_readAddress+3)& (0+255),w,b
  9885  001136  A4D8               	btfss	status,2,c
  9886  001138  D006               	goto	l257
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;FlashApp.c: 46: {
  9890                           ;FlashApp.c: 47: readAddress += (64);
  9891  00113A  0E40               	movlw	64
  9892  00113C  27F3               	addwf	_readAddress& (0+255),f,b
  9893  00113E  0E00               	movlw	0
  9894  001140  23F4               	addwfc	(_readAddress+1)& (0+255),f,b
  9895  001142  23F5               	addwfc	(_readAddress+2)& (0+255),f,b
  9896  001144  23F6               	addwfc	(_readAddress+3)& (0+255),f,b
  9897  001146                     l257:
  9898                           
  9899                           ;FlashApp.c: 48: }
  9900                           ;FlashApp.c: 49: }
  9901                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
  9902                           
  9903                           ; BSR set to: 0
  9904  001146  0430               	decf	_numOfValidateSamples,w,c
  9905  001148  0EFF               	movlw	255
  9906  00114A  5831               	subwfb	_numOfValidateSamples+1,w,c
  9907  00114C  0EFF               	movlw	255
  9908  00114E  5832               	subwfb	_numOfValidateSamples+2,w,c
  9909  001150  0EFF               	movlw	255
  9910  001152  5833               	subwfb	_numOfValidateSamples+3,w,c
  9911  001154  B0D8               	btfsc	status,0,c
  9912  001156  D006               	goto	l258
  9913                           
  9914                           ;FlashApp.c: 52: {
  9915                           ;FlashApp.c: 53: numOfValidateSamples++;
  9916  001158  0E01               	movlw	1
  9917  00115A  2630               	addwf	_numOfValidateSamples,f,c
  9918  00115C  0E00               	movlw	0
  9919  00115E  2231               	addwfc	_numOfValidateSamples+1,f,c
  9920  001160  2232               	addwfc	_numOfValidateSamples+2,f,c
  9921  001162  2233               	addwfc	_numOfValidateSamples+3,f,c
  9922  001164                     l258:
  9923                           
  9924                           ;FlashApp.c: 54: }
  9925                           ;FlashApp.c: 55: sampleCount = 0;
  9926  001164  0E00               	movlw	0
  9927  001166  0100               	movlb	0	; () banked
  9928  001168  6FC5               	movwf	(_sampleCount+1)& (0+255),b
  9929  00116A  0E00               	movlw	0
  9930  00116C  6FC4               	movwf	_sampleCount& (0+255),b
  9931  00116E  0012               	return	
  9932  001170                     __end_of_FlashSampleWrite:
  9933                           	opt stack 0
  9934                           tblptru	equ	0xFF8
  9935                           tblptrh	equ	0xFF7
  9936                           tblptrl	equ	0xFF6
  9937                           tablat	equ	0xFF5
  9938                           prodh	equ	0xFF4
  9939                           prodl	equ	0xFF3
  9940                           intcon	equ	0xFF2
  9941                           intcon2	equ	0xFF1
  9942                           postinc0	equ	0xFEE
  9943                           wreg	equ	0xFE8
  9944                           postdec1	equ	0xFE5
  9945                           plusw1	equ	0xFE3
  9946                           fsr1l	equ	0xFE1
  9947                           indf2	equ	0xFDF
  9948                           postinc2	equ	0xFDE
  9949                           postdec2	equ	0xFDD
  9950                           plusw2	equ	0xFDB
  9951                           fsr2h	equ	0xFDA
  9952                           fsr2l	equ	0xFD9
  9953                           status	equ	0xFD8
  9954                           
  9955 ;; *************** function _FLASH_WriteBlock *****************
  9956 ;; Defined at:
  9957 ;;		line 93 in file "mcc_generated_files/memory.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;  writeAddr       4   28[COMRAM] unsigned long 
  9960 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
  9961 ;;		 -> FlashTest@buff(128), sampleArray(64), 
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;  blockStartAd    4   38[COMRAM] unsigned long 
  9964 ;;  i               1   43[COMRAM] unsigned char 
  9965 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  1    wreg      char 
  9968 ;; Registers used:
  9969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9975 ;;      Params:         6       0       0       0       0       0       0
  9976 ;;      Locals:         6       0       0       0       0       0       0
  9977 ;;      Temps:          4       0       0       0       0       0       0
  9978 ;;      Totals:        16       0       0       0       0       0       0
  9979 ;;Total ram usage:       16 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    4
  9982 ;; This function calls:
  9983 ;;		_FLASH_EraseBlock
  9984 ;; This function is called by:
  9985 ;;		_FlashSampleWrite
  9986 ;;		_FlashTest
  9987 ;;		_FLASH_WriteByte
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           	psect	text64
  9992  0017A8                     __ptext64:
  9993                           	opt stack 0
  9994  0017A8                     _FLASH_WriteBlock:
  9995                           	opt stack 24
  9996                           
  9997                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
  9998                           
  9999                           ;incstack = 0
 10000  0017A8  0EC0               	movlw	192
 10001  0017AA  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 10002  0017AC  0E7F               	movlw	127
 10003  0017AE  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 10004  0017B0  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 10005  0017B4  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 10006  0017B8  5023               	movf	??_FLASH_WriteBlock,w,c
 10007  0017BA  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 10008  0017BC  5024               	movf	??_FLASH_WriteBlock+1,w,c
 10009  0017BE  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 10010  0017C0  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 10011  0017C4  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 10012  0017C8  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 10013  0017CA  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 10014                           
 10015                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 10016  0017CC  0E00               	movlw	0
 10017  0017CE  BEF2               	btfsc	intcon,7,c	;volatile
 10018  0017D0  0E01               	movlw	1
 10019  0017D2  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 10020                           
 10021                           ;memory.c: 97: uint8_t i;
 10022                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 10023  0017D4  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 10024  0017D6  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 10025  0017D8  E144               	bnz	l922
 10026  0017DA  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 10027  0017DC  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 10028  0017DE  E141               	bnz	l922
 10029  0017E0  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 10030  0017E2  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 10031  0017E4  E13E               	bnz	l922
 10032  0017E6  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 10033  0017E8  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 10034  0017EA  A4D8               	btfss	status,2,c
 10035  0017EC  0012               	return	
 10036                           
 10037                           ;memory.c: 103: }
 10038                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 10039                           
 10040                           ;memory.c: 101: {
 10041                           ;memory.c: 102: return -1;
 10042                           ;	Return value of _FLASH_WriteBlock is never used
 10043  0017EE  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 10044  0017F2  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 10045  0017F6  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 10046  0017FA  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 10047  0017FE  EC76  F012         	call	_FLASH_EraseBlock	;wreg free
 10048                           
 10049                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 10050  001802  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 10051                           
 10052                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 10053  001806  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 10054                           
 10055                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 10056  00180A  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 10057                           
 10058                           ;memory.c: 114: for (i=0; i<(64); i++)
 10059  00180E  0E00               	movlw	0
 10060  001810  6E2C               	movwf	FLASH_WriteBlock@i,c
 10061  001812                     l6407:
 10062  001812  0E3F               	movlw	63
 10063  001814  642C               	cpfsgt	FLASH_WriteBlock@i,c
 10064  001816  D001               	goto	l923
 10065  001818  D013               	goto	u5710
 10066  00181A                     l923:
 10067                           
 10068                           ;memory.c: 115: {
 10069                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 10070  00181A  502C               	movf	FLASH_WriteBlock@i,w,c
 10071  00181C  0D01               	mullw	1
 10072  00181E  50F3               	movf	prodl,w,c
 10073  001820  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 10074  001822  6ED9               	movwf	fsr2l,c
 10075  001824  50F4               	movf	prodh,w,c
 10076  001826  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 10077  001828  6EDA               	movwf	fsr2h,c
 10078  00182A  50DF               	movf	indf2,w,c
 10079  00182C  6EF5               	movwf	tablat,c	;volatile
 10080                           
 10081                           ;memory.c: 118: if (i == ((64)-1))
 10082  00182E  0E3F               	movlw	63
 10083  001830  182C               	xorwf	FLASH_WriteBlock@i,w,c
 10084  001832  A4D8               	btfss	status,2,c
 10085  001834  D002               	goto	l925
 10086  001836  000C               	tblwt		*	;# 
 10087                           
 10088                           ;memory.c: 121: }
 10089  001838  D001               	goto	l926
 10090  00183A                     l925:
 10091  00183A  000D               	tblwt		*+	;# 
 10092  00183C                     l926:
 10093  00183C  2A2C               	incf	FLASH_WriteBlock@i,f,c
 10094  00183E  D7E9               	goto	l6407
 10095  001840                     u5710:
 10096                           
 10097                           ;memory.c: 125: }
 10098                           ;memory.c: 126: }
 10099                           ;memory.c: 128: PIR2bits.EEIF = 1;
 10100  001840  88A1               	bsf	4001,4,c	;volatile
 10101                           
 10102                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 10103  001842  8EA6               	bsf	4006,7,c	;volsfr
 10104                           
 10105                           ;memory.c: 130: EECON1bits.CFGS = 0;
 10106  001844  9CA6               	bcf	4006,6,c	;volsfr
 10107                           
 10108                           ;memory.c: 131: EECON1bits.WREN = 1;
 10109  001846  84A6               	bsf	4006,2,c	;volsfr
 10110                           
 10111                           ;memory.c: 132: INTCONbits.GIE = 0;
 10112  001848  9EF2               	bcf	intcon,7,c	;volatile
 10113                           
 10114                           ;memory.c: 133: EECON2 = 0x55;
 10115  00184A  0E55               	movlw	85
 10116  00184C  6EA7               	movwf	4007,c	;volsfr
 10117                           
 10118                           ;memory.c: 134: EECON2 = 0xAA;
 10119  00184E  0EAA               	movlw	170
 10120  001850  6EA7               	movwf	4007,c	;volsfr
 10121                           
 10122                           ;memory.c: 135: EECON1bits.WR = 1;
 10123  001852  82A6               	bsf	4006,1,c	;volsfr
 10124                           
 10125                           ;memory.c: 137: EECON1bits.WREN = 0;
 10126  001854  94A6               	bcf	4006,2,c	;volsfr
 10127                           
 10128                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 10129  001856  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 10130  001858  D002               	bra	u5725
 10131  00185A  9EF2               	bcf	intcon,7,c	;volatile
 10132  00185C  D001               	bra	u5726
 10133  00185E                     u5725:
 10134  00185E  8EF2               	bsf	intcon,7,c	;volatile
 10135  001860                     u5726:
 10136  001860  0012               	return	
 10137  001862                     l922:
 10138  001862  0012               	return		;funcret
 10139  001864                     __end_of_FLASH_WriteBlock:
 10140                           	opt stack 0
 10141                           tblptru	equ	0xFF8
 10142                           tblptrh	equ	0xFF7
 10143                           tblptrl	equ	0xFF6
 10144                           tablat	equ	0xFF5
 10145                           prodh	equ	0xFF4
 10146                           prodl	equ	0xFF3
 10147                           intcon	equ	0xFF2
 10148                           intcon2	equ	0xFF1
 10149                           postinc0	equ	0xFEE
 10150                           wreg	equ	0xFE8
 10151                           postdec1	equ	0xFE5
 10152                           plusw1	equ	0xFE3
 10153                           fsr1l	equ	0xFE1
 10154                           indf2	equ	0xFDF
 10155                           postinc2	equ	0xFDE
 10156                           postdec2	equ	0xFDD
 10157                           plusw2	equ	0xFDB
 10158                           fsr2h	equ	0xFDA
 10159                           fsr2l	equ	0xFD9
 10160                           status	equ	0xFD8
 10161                           
 10162 ;; *************** function _FLASH_EraseBlock *****************
 10163 ;; Defined at:
 10164 ;;		line 144 in file "mcc_generated_files/memory.c"
 10165 ;; Parameters:    Size  Location     Type
 10166 ;;  baseAddr        4   23[COMRAM] unsigned long 
 10167 ;; Auto vars:     Size  Location     Type
 10168 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 10169 ;; Return value:  Size  Location     Type
 10170 ;;                  1    wreg      void 
 10171 ;; Registers used:
 10172 ;;		wreg, status,2
 10173 ;; Tracked objects:
 10174 ;;		On entry : 0/0
 10175 ;;		On exit  : 0/0
 10176 ;;		Unchanged: 0/0
 10177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10178 ;;      Params:         4       0       0       0       0       0       0
 10179 ;;      Locals:         1       0       0       0       0       0       0
 10180 ;;      Temps:          0       0       0       0       0       0       0
 10181 ;;      Totals:         5       0       0       0       0       0       0
 10182 ;;Total ram usage:        5 bytes
 10183 ;; Hardware stack levels used:    1
 10184 ;; Hardware stack levels required when called:    3
 10185 ;; This function calls:
 10186 ;;		Nothing
 10187 ;; This function is called by:
 10188 ;;		_FLASH_WriteBlock
 10189 ;; This function uses a non-reentrant model
 10190 ;;
 10191                           
 10192                           	psect	text65
 10193  0024EC                     __ptext65:
 10194                           	opt stack 0
 10195  0024EC                     _FLASH_EraseBlock:
 10196                           	opt stack 24
 10197                           
 10198                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 10199                           
 10200                           ;incstack = 0
 10201  0024EC  0E00               	movlw	0
 10202  0024EE  BEF2               	btfsc	intcon,7,c	;volatile
 10203  0024F0  0E01               	movlw	1
 10204  0024F2  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 10205                           
 10206                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 10207  0024F4  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 10208                           
 10209                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 10210  0024F8  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 10211                           
 10212                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 10213  0024FC  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 10214                           
 10215                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 10216  002500  8EA6               	bsf	4006,7,c	;volsfr
 10217                           
 10218                           ;memory.c: 153: EECON1bits.CFGS = 0;
 10219  002502  9CA6               	bcf	4006,6,c	;volsfr
 10220                           
 10221                           ;memory.c: 154: EECON1bits.WREN = 1;
 10222  002504  84A6               	bsf	4006,2,c	;volsfr
 10223                           
 10224                           ;memory.c: 155: EECON1bits.FREE = 1;
 10225  002506  88A6               	bsf	4006,4,c	;volsfr
 10226                           
 10227                           ;memory.c: 156: INTCONbits.GIE = 0;
 10228  002508  9EF2               	bcf	intcon,7,c	;volatile
 10229                           
 10230                           ;memory.c: 157: EECON2 = 0x55;
 10231  00250A  0E55               	movlw	85
 10232  00250C  6EA7               	movwf	4007,c	;volsfr
 10233                           
 10234                           ;memory.c: 158: EECON2 = 0xAA;
 10235  00250E  0EAA               	movlw	170
 10236  002510  6EA7               	movwf	4007,c	;volsfr
 10237                           
 10238                           ;memory.c: 159: EECON1bits.WR = 1;
 10239  002512  82A6               	bsf	4006,1,c	;volsfr
 10240                           
 10241                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 10242  002514  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 10243  002516  D002               	bra	u5435
 10244  002518  9EF2               	bcf	intcon,7,c	;volatile
 10245  00251A  D001               	bra	u5436
 10246  00251C                     u5435:
 10247  00251C  8EF2               	bsf	intcon,7,c	;volatile
 10248  00251E                     u5436:
 10249  00251E  0012               	return		;funcret
 10250  002520                     __end_of_FLASH_EraseBlock:
 10251                           	opt stack 0
 10252                           tblptru	equ	0xFF8
 10253                           tblptrh	equ	0xFF7
 10254                           tblptrl	equ	0xFF6
 10255                           tablat	equ	0xFF5
 10256                           prodh	equ	0xFF4
 10257                           prodl	equ	0xFF3
 10258                           intcon	equ	0xFF2
 10259                           intcon2	equ	0xFF1
 10260                           postinc0	equ	0xFEE
 10261                           wreg	equ	0xFE8
 10262                           postdec1	equ	0xFE5
 10263                           plusw1	equ	0xFE3
 10264                           fsr1l	equ	0xFE1
 10265                           indf2	equ	0xFDF
 10266                           postinc2	equ	0xFDE
 10267                           postdec2	equ	0xFDD
 10268                           plusw2	equ	0xFDB
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273 ;; *************** function _FLASH_IsWriteDone *****************
 10274 ;; Defined at:
 10275 ;;		line 189 in file "mcc_generated_files/memory.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;		None
 10278 ;; Auto vars:     Size  Location     Type
 10279 ;;		None
 10280 ;; Return value:  Size  Location     Type
 10281 ;;                  1    wreg      unsigned char 
 10282 ;; Registers used:
 10283 ;;		wreg
 10284 ;; Tracked objects:
 10285 ;;		On entry : 0/0
 10286 ;;		On exit  : 0/0
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10289 ;;      Params:         0       0       0       0       0       0       0
 10290 ;;      Locals:         0       0       0       0       0       0       0
 10291 ;;      Temps:          0       0       0       0       0       0       0
 10292 ;;      Totals:         0       0       0       0       0       0       0
 10293 ;;Total ram usage:        0 bytes
 10294 ;; Hardware stack levels used:    1
 10295 ;; Hardware stack levels required when called:    3
 10296 ;; This function calls:
 10297 ;;		Nothing
 10298 ;; This function is called by:
 10299 ;;		_FlashSampleWrite
 10300 ;;		_FlashReadUart
 10301 ;; This function uses a non-reentrant model
 10302 ;;
 10303                           
 10304                           	psect	text66
 10305  002750                     __ptext66:
 10306                           	opt stack 0
 10307  002750                     _FLASH_IsWriteDone:
 10308                           	opt stack 25
 10309                           
 10310                           ;memory.c: 191: return (EECON1bits.WR == 0);
 10311                           
 10312                           ;incstack = 0
 10313  002750  A2A6               	btfss	4006,1,c	;volsfr
 10314  002752  D001               	goto	u5661
 10315  002754  D002               	goto	u5660
 10316  002756                     u5661:
 10317  002756  0E01               	movlw	1
 10318  002758  0012               	return	
 10319  00275A                     u5660:
 10320  00275A  0E00               	movlw	0
 10321  00275C  0012               	return	
 10322  00275E                     __end_of_FLASH_IsWriteDone:
 10323                           	opt stack 0
 10324                           tblptru	equ	0xFF8
 10325                           tblptrh	equ	0xFF7
 10326                           tblptrl	equ	0xFF6
 10327                           tablat	equ	0xFF5
 10328                           prodh	equ	0xFF4
 10329                           prodl	equ	0xFF3
 10330                           intcon	equ	0xFF2
 10331                           intcon2	equ	0xFF1
 10332                           postinc0	equ	0xFEE
 10333                           wreg	equ	0xFE8
 10334                           postdec1	equ	0xFE5
 10335                           plusw1	equ	0xFE3
 10336                           fsr1l	equ	0xFE1
 10337                           indf2	equ	0xFDF
 10338                           postinc2	equ	0xFDE
 10339                           postdec2	equ	0xFDD
 10340                           plusw2	equ	0xFDB
 10341                           fsr2h	equ	0xFDA
 10342                           fsr2l	equ	0xFD9
 10343                           status	equ	0xFD8
 10344                           
 10345 ;; *************** function _ADC_GetConversion *****************
 10346 ;; Defined at:
 10347 ;;		line 106 in file "mcc_generated_files/adc.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;  channel         1    wreg     enum E6975
 10350 ;; Auto vars:     Size  Location     Type
 10351 ;;  channel         1   27[COMRAM] enum E6975
 10352 ;; Return value:  Size  Location     Type
 10353 ;;                  2   23[COMRAM] unsigned int 
 10354 ;; Registers used:
 10355 ;;		wreg, status,2, status,0
 10356 ;; Tracked objects:
 10357 ;;		On entry : 0/0
 10358 ;;		On exit  : 0/0
 10359 ;;		Unchanged: 0/0
 10360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10361 ;;      Params:         2       0       0       0       0       0       0
 10362 ;;      Locals:         1       0       0       0       0       0       0
 10363 ;;      Temps:          2       0       0       0       0       0       0
 10364 ;;      Totals:         5       0       0       0       0       0       0
 10365 ;;Total ram usage:        5 bytes
 10366 ;; Hardware stack levels used:    1
 10367 ;; Hardware stack levels required when called:    3
 10368 ;; This function calls:
 10369 ;;		Nothing
 10370 ;; This function is called by:
 10371 ;;		_AdcConvert
 10372 ;; This function uses a non-reentrant model
 10373 ;;
 10374                           
 10375                           	psect	text67
 10376  002520                     __ptext67:
 10377                           	opt stack 0
 10378  002520                     _ADC_GetConversion:
 10379                           	opt stack 26
 10380                           
 10381                           ;incstack = 0
 10382                           ;ADC_GetConversion@channel stored from wreg
 10383  002520  6E1C               	movwf	ADC_GetConversion@channel,c
 10384                           
 10385                           ;adc.c: 109: ADCON0bits.CHS = channel;
 10386  002522  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 10387  002526  461A               	rlncf	??_ADC_GetConversion,f,c
 10388  002528  461A               	rlncf	??_ADC_GetConversion,f,c
 10389  00252A  50C2               	movf	4034,w,c	;volatile
 10390  00252C  181A               	xorwf	??_ADC_GetConversion,w,c
 10391  00252E  0B83               	andlw	-125
 10392  002530  181A               	xorwf	??_ADC_GetConversion,w,c
 10393  002532  6EC2               	movwf	4034,c	;volatile
 10394                           
 10395                           ;adc.c: 112: ADCON0bits.ADON = 1;
 10396  002534  80C2               	bsf	4034,0,c	;volatile
 10397                           
 10398                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 10399  002536  82C2               	bsf	4034,1,c	;volatile
 10400  002538                     
 10401                           ;adc.c: 119: {
 10402  002538  B2C2               	btfsc	4034,1,c	;volatile
 10403  00253A  D7FE               	goto	l1035
 10404                           
 10405                           ;adc.c: 120: }
 10406                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 10407  00253C  50C4               	movf	4036,w,c	;volatile
 10408  00253E  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 10409  002540  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 10410  002542  50C3               	movf	4035,w,c	;volatile
 10411  002544  241A               	addwf	??_ADC_GetConversion,w,c
 10412  002546  6E18               	movwf	?_ADC_GetConversion,c
 10413  002548  0E00               	movlw	0
 10414  00254A  201B               	addwfc	??_ADC_GetConversion+1,w,c
 10415  00254C  6E19               	movwf	?_ADC_GetConversion+1,c
 10416  00254E  0012               	return	
 10417  002550                     __end_of_ADC_GetConversion:
 10418                           	opt stack 0
 10419                           tblptru	equ	0xFF8
 10420                           tblptrh	equ	0xFF7
 10421                           tblptrl	equ	0xFF6
 10422                           tablat	equ	0xFF5
 10423                           prodh	equ	0xFF4
 10424                           prodl	equ	0xFF3
 10425                           intcon	equ	0xFF2
 10426                           intcon2	equ	0xFF1
 10427                           postinc0	equ	0xFEE
 10428                           wreg	equ	0xFE8
 10429                           postdec1	equ	0xFE5
 10430                           plusw1	equ	0xFE3
 10431                           fsr1l	equ	0xFE1
 10432                           indf2	equ	0xFDF
 10433                           postinc2	equ	0xFDE
 10434                           postdec2	equ	0xFDD
 10435                           plusw2	equ	0xFDB
 10436                           fsr2h	equ	0xFDA
 10437                           fsr2l	equ	0xFD9
 10438                           status	equ	0xFD8
 10439                           
 10440 ;; *************** function _INTERRUPT_InterruptManager *****************
 10441 ;; Defined at:
 10442 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 10443 ;; Parameters:    Size  Location     Type
 10444 ;;		None
 10445 ;; Auto vars:     Size  Location     Type
 10446 ;;		None
 10447 ;; Return value:  Size  Location     Type
 10448 ;;                  1    wreg      void 
 10449 ;; Registers used:
 10450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10451 ;; Tracked objects:
 10452 ;;		On entry : 0/0
 10453 ;;		On exit  : 0/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10456 ;;      Params:         0       0       0       0       0       0       0
 10457 ;;      Locals:         0       0       0       0       0       0       0
 10458 ;;      Temps:         18       0       0       0       0       0       0
 10459 ;;      Totals:        18       0       0       0       0       0       0
 10460 ;;Total ram usage:       18 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; Hardware stack levels required when called:    2
 10463 ;; This function calls:
 10464 ;;		_EUSART1_Receive_ISR
 10465 ;;		_EUSART1_Transmit_ISR
 10466 ;;		_MEMORY_ISR
 10467 ;;		_PIN_MANAGER_IOC
 10468 ;;		_TMR0_ISR
 10469 ;; This function is called by:
 10470 ;;		Interrupt level 2
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           	psect	intcode
 10475  000008                     __pintcode:
 10476                           	opt stack 0
 10477  000008                     _INTERRUPT_InterruptManager:
 10478                           	opt stack 22
 10479                           
 10480                           ;incstack = 0
 10481  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10482  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 10483  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 10484  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 10485  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 10486  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 10487  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 10488  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 10489  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 10490  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 10491  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 10492  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 10493  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 10494  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 10495  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 10496  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 10497  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 10498  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 10499  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 10500                           
 10501                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 10502  000052  B6F2               	btfsc	intcon,3,c	;volatile
 10503  000054  A0F2               	btfss	intcon,0,c	;volatile
 10504  000056  D003               	goto	i2l760
 10505                           
 10506                           ;interrupt_manager.c: 61: {
 10507                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 10508  000058  ECBF  F013         	call	_PIN_MANAGER_IOC	;wreg free
 10509                           
 10510                           ;interrupt_manager.c: 63: }
 10511  00005C  D019               	goto	i2l769
 10512  00005E                     i2l760:
 10513                           
 10514                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 10515  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 10516  000060  A4F2               	btfss	intcon,2,c	;volatile
 10517  000062  D003               	goto	i2l762
 10518                           
 10519                           ;interrupt_manager.c: 65: {
 10520                           ;interrupt_manager.c: 66: TMR0_ISR();
 10521  000064  ECCC  F00D         	call	_TMR0_ISR	;wreg free
 10522                           
 10523                           ;interrupt_manager.c: 67: }
 10524  000068  D013               	goto	i2l769
 10525  00006A                     i2l762:
 10526                           
 10527                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 10528  00006A  ACF2               	btfss	intcon,6,c	;volatile
 10529  00006C  D011               	goto	i2l769
 10530                           
 10531                           ;interrupt_manager.c: 69: {
 10532                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 10533  00006E  B8A0               	btfsc	4000,4,c	;volatile
 10534  000070  A8A1               	btfss	4001,4,c	;volatile
 10535  000072  D003               	goto	i2l765
 10536                           
 10537                           ;interrupt_manager.c: 71: {
 10538                           ;interrupt_manager.c: 72: MEMORY_ISR();
 10539  000074  ECC1  F013         	call	_MEMORY_ISR	;wreg free
 10540                           
 10541                           ;interrupt_manager.c: 73: }
 10542  000078  D00B               	goto	i2l769
 10543  00007A                     i2l765:
 10544                           
 10545                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 10546  00007A  B89D               	btfsc	3997,4,c	;volatile
 10547  00007C  A89E               	btfss	3998,4,c	;volatile
 10548  00007E  D003               	goto	i2l767
 10549                           
 10550                           ;interrupt_manager.c: 75: {
 10551                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 10552  000080  EC0A  F012         	call	_EUSART1_Transmit_ISR	;wreg free
 10553                           
 10554                           ;interrupt_manager.c: 77: }
 10555  000084  D005               	goto	i2l769
 10556  000086                     i2l767:
 10557                           
 10558                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 10559  000086  BA9D               	btfsc	3997,5,c	;volatile
 10560  000088  AA9E               	btfss	3998,5,c	;volatile
 10561  00008A  D002               	goto	i2l769
 10562                           
 10563                           ;interrupt_manager.c: 79: {
 10564                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 10565  00008C  ECBE  F012         	call	_EUSART1_Receive_ISR	;wreg free
 10566  000090                     i2l769:
 10567                           
 10568                           ;interrupt_manager.c: 87: else
 10569                           ;interrupt_manager.c: 88: {
 10570                           
 10571                           ;interrupt_manager.c: 85: }
 10572                           ;interrupt_manager.c: 86: }
 10573                           
 10574                           ;interrupt_manager.c: 82: else
 10575                           ;interrupt_manager.c: 83: {
 10576  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 10577  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 10578  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 10579  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 10580  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 10581  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 10582  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 10583  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 10584  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 10585  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 10586  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 10587  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 10588  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 10589  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 10590  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 10591  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 10592  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 10593  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 10594  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10595  0000DA  0011               	retfie		f
 10596  0000DC                     __end_of_INTERRUPT_InterruptManager:
 10597                           	opt stack 0
 10598                           pclatu	equ	0xFFB
 10599                           pclath	equ	0xFFA
 10600                           tblptru	equ	0xFF8
 10601                           tblptrh	equ	0xFF7
 10602                           tblptrl	equ	0xFF6
 10603                           tablat	equ	0xFF5
 10604                           prodh	equ	0xFF4
 10605                           prodl	equ	0xFF3
 10606                           intcon	equ	0xFF2
 10607                           intcon2	equ	0xFF1
 10608                           postinc0	equ	0xFEE
 10609                           fsr0h	equ	0xFEA
 10610                           fsr0l	equ	0xFE9
 10611                           wreg	equ	0xFE8
 10612                           postdec1	equ	0xFE5
 10613                           plusw1	equ	0xFE3
 10614                           fsr1h	equ	0xFE2
 10615                           fsr1l	equ	0xFE1
 10616                           indf2	equ	0xFDF
 10617                           postinc2	equ	0xFDE
 10618                           postdec2	equ	0xFDD
 10619                           plusw2	equ	0xFDB
 10620                           fsr2h	equ	0xFDA
 10621                           fsr2l	equ	0xFD9
 10622                           status	equ	0xFD8
 10623                           
 10624 ;; *************** function _TMR0_ISR *****************
 10625 ;; Defined at:
 10626 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 10627 ;; Parameters:    Size  Location     Type
 10628 ;;		None
 10629 ;; Auto vars:     Size  Location     Type
 10630 ;;		None
 10631 ;; Return value:  Size  Location     Type
 10632 ;;                  1    wreg      void 
 10633 ;; Registers used:
 10634 ;;		wreg, status,2, status,0, cstack
 10635 ;; Tracked objects:
 10636 ;;		On entry : 0/0
 10637 ;;		On exit  : 0/0
 10638 ;;		Unchanged: 0/0
 10639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10640 ;;      Params:         0       0       0       0       0       0       0
 10641 ;;      Locals:         0       0       0       0       0       0       0
 10642 ;;      Temps:          0       0       0       0       0       0       0
 10643 ;;      Totals:         0       0       0       0       0       0       0
 10644 ;;Total ram usage:        0 bytes
 10645 ;; Hardware stack levels used:    1
 10646 ;; Hardware stack levels required when called:    1
 10647 ;; This function calls:
 10648 ;;		___lwmod
 10649 ;; This function is called by:
 10650 ;;		_INTERRUPT_InterruptManager
 10651 ;; This function uses a non-reentrant model
 10652 ;;
 10653                           
 10654                           	psect	text69
 10655  001B98                     __ptext69:
 10656                           	opt stack 0
 10657  001B98                     _TMR0_ISR:
 10658                           	opt stack 22
 10659                           
 10660                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 10661                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 10662                           
 10663                           ;incstack = 0
 10664  001B98  94F2               	bcf	intcon,2,c	;volatile
 10665                           
 10666                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 10667  001B9A  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 10668  001B9C  6ED7               	movwf	4055,c	;volatile
 10669                           
 10670                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 10671  001B9E  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 10672                           
 10673                           ;tmr0.c: 146: CountCallBack ++;
 10674  001BA2  4A34               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 10675  001BA4  2A35               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 10676                           
 10677                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 10678  001BA6  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 10679  001BAA  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 10680  001BAE  0E00               	movlw	0
 10681  001BB0  6E04               	movwf	___lwmod@divisor+1,c
 10682  001BB2  0E14               	movlw	20
 10683  001BB4  6E03               	movwf	___lwmod@divisor,c
 10684  001BB6  EC73  F011         	call	___lwmod	;wreg free
 10685  001BBA  5001               	movf	?___lwmod,w,c
 10686  001BBC  1002               	iorwf	?___lwmod+1,w,c
 10687  001BBE  A4D8               	btfss	status,2,c
 10688  001BC0  D002               	goto	i2l991
 10689                           
 10690                           ;tmr0.c: 148: {
 10691                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 10692  001BC2  0E01               	movlw	1
 10693  001BC4  6E3D               	movwf	_TimerOneSecFlag,c	;volatile
 10694  001BC6                     i2l991:
 10695                           
 10696                           ;tmr0.c: 150: }
 10697                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 10698  001BC6  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 10699  001BCA  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 10700  001BCE  0E00               	movlw	0
 10701  001BD0  6E04               	movwf	___lwmod@divisor+1,c
 10702  001BD2  0E32               	movlw	50
 10703  001BD4  6E03               	movwf	___lwmod@divisor,c
 10704  001BD6  EC73  F011         	call	___lwmod	;wreg free
 10705  001BDA  5001               	movf	?___lwmod,w,c
 10706  001BDC  1002               	iorwf	?___lwmod+1,w,c
 10707  001BDE  A4D8               	btfss	status,2,c
 10708  001BE0  D002               	goto	i2l992
 10709                           
 10710                           ;tmr0.c: 153: {
 10711                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 10712  001BE2  0E01               	movlw	1
 10713  001BE4  6E3C               	movwf	_TimerSamplingFlag,c	;volatile
 10714  001BE6                     i2l992:
 10715                           
 10716                           ;tmr0.c: 155: }
 10717                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 10718  001BE6  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 10719  001BEA  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 10720  001BEE  0E01               	movlw	1
 10721  001BF0  6E04               	movwf	___lwmod@divisor+1,c
 10722  001BF2  0E2C               	movlw	44
 10723  001BF4  6E03               	movwf	___lwmod@divisor,c
 10724  001BF6  EC73  F011         	call	___lwmod	;wreg free
 10725  001BFA  5001               	movf	?___lwmod,w,c
 10726  001BFC  1002               	iorwf	?___lwmod+1,w,c
 10727  001BFE  A4D8               	btfss	status,2,c
 10728  001C00  D002               	goto	i2l993
 10729                           
 10730                           ;tmr0.c: 157: {
 10731                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 10732  001C02  0E01               	movlw	1
 10733  001C04  6E3B               	movwf	_TimerKeepAliveFlag,c	;volatile
 10734  001C06                     i2l993:
 10735                           
 10736                           ;tmr0.c: 159: }
 10737                           ;tmr0.c: 161: CountCallBack %= 300;
 10738  001C06  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 10739  001C0A  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 10740  001C0E  0E01               	movlw	1
 10741  001C10  6E04               	movwf	___lwmod@divisor+1,c
 10742  001C12  0E2C               	movlw	44
 10743  001C14  6E03               	movwf	___lwmod@divisor,c
 10744  001C16  EC73  F011         	call	___lwmod	;wreg free
 10745  001C1A  C001  F034         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 10746  001C1E  C002  F035         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 10747  001C22  0012               	return		;funcret
 10748  001C24                     __end_of_TMR0_ISR:
 10749                           	opt stack 0
 10750                           pclatu	equ	0xFFB
 10751                           pclath	equ	0xFFA
 10752                           tblptru	equ	0xFF8
 10753                           tblptrh	equ	0xFF7
 10754                           tblptrl	equ	0xFF6
 10755                           tablat	equ	0xFF5
 10756                           prodh	equ	0xFF4
 10757                           prodl	equ	0xFF3
 10758                           intcon	equ	0xFF2
 10759                           intcon2	equ	0xFF1
 10760                           postinc0	equ	0xFEE
 10761                           fsr0h	equ	0xFEA
 10762                           fsr0l	equ	0xFE9
 10763                           wreg	equ	0xFE8
 10764                           postdec1	equ	0xFE5
 10765                           plusw1	equ	0xFE3
 10766                           fsr1h	equ	0xFE2
 10767                           fsr1l	equ	0xFE1
 10768                           indf2	equ	0xFDF
 10769                           postinc2	equ	0xFDE
 10770                           postdec2	equ	0xFDD
 10771                           plusw2	equ	0xFDB
 10772                           fsr2h	equ	0xFDA
 10773                           fsr2l	equ	0xFD9
 10774                           status	equ	0xFD8
 10775                           
 10776 ;; *************** function ___lwmod *****************
 10777 ;; Defined at:
 10778 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 10779 ;; Parameters:    Size  Location     Type
 10780 ;;  dividend        2    0[COMRAM] unsigned int 
 10781 ;;  divisor         2    2[COMRAM] unsigned int 
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;  counter         1    4[COMRAM] unsigned char 
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  2    0[COMRAM] unsigned int 
 10786 ;; Registers used:
 10787 ;;		wreg, status,2, status,0
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10793 ;;      Params:         4       0       0       0       0       0       0
 10794 ;;      Locals:         1       0       0       0       0       0       0
 10795 ;;      Temps:          0       0       0       0       0       0       0
 10796 ;;      Totals:         5       0       0       0       0       0       0
 10797 ;;Total ram usage:        5 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; This function calls:
 10800 ;;		Nothing
 10801 ;; This function is called by:
 10802 ;;		_TMR0_ISR
 10803 ;;		_segmentCounter
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           	psect	text70
 10808  0022E6                     __ptext70:
 10809                           	opt stack 0
 10810  0022E6                     ___lwmod:
 10811                           	opt stack 22
 10812                           
 10813                           ;incstack = 0
 10814  0022E6  5003               	movf	___lwmod@divisor,w,c
 10815  0022E8  1004               	iorwf	___lwmod@divisor+1,w,c
 10816  0022EA  B4D8               	btfsc	status,2,c
 10817  0022EC  D018               	goto	i2l1841
 10818  0022EE  0E01               	movlw	1
 10819  0022F0  6E05               	movwf	___lwmod@counter,c
 10820  0022F2  D004               	goto	i2l1836
 10821  0022F4  90D8               	bcf	status,0,c
 10822  0022F6  3603               	rlcf	___lwmod@divisor,f,c
 10823  0022F8  3604               	rlcf	___lwmod@divisor+1,f,c
 10824  0022FA  2A05               	incf	___lwmod@counter,f,c
 10825  0022FC                     i2l1836:
 10826  0022FC  AE04               	btfss	___lwmod@divisor+1,7,c
 10827  0022FE  D7FA               	goto	i2l1837
 10828  002300                     i2u407_40:
 10829  002300  5003               	movf	___lwmod@divisor,w,c
 10830  002302  5C01               	subwf	___lwmod@dividend,w,c
 10831  002304  5004               	movf	___lwmod@divisor+1,w,c
 10832  002306  5802               	subwfb	___lwmod@dividend+1,w,c
 10833  002308  A0D8               	btfss	status,0,c
 10834  00230A  D004               	goto	i2l1840
 10835  00230C  5003               	movf	___lwmod@divisor,w,c
 10836  00230E  5E01               	subwf	___lwmod@dividend,f,c
 10837  002310  5004               	movf	___lwmod@divisor+1,w,c
 10838  002312  5A02               	subwfb	___lwmod@dividend+1,f,c
 10839  002314                     i2l1840:
 10840  002314  90D8               	bcf	status,0,c
 10841  002316  3204               	rrcf	___lwmod@divisor+1,f,c
 10842  002318  3203               	rrcf	___lwmod@divisor,f,c
 10843  00231A  2E05               	decfsz	___lwmod@counter,f,c
 10844  00231C  D7F1               	goto	i2u407_40
 10845  00231E                     i2l1841:
 10846  00231E  C001  F001         	movff	___lwmod@dividend,?___lwmod
 10847  002322  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 10848  002326  0012               	return		;funcret
 10849  002328                     __end_of___lwmod:
 10850                           	opt stack 0
 10851                           pclatu	equ	0xFFB
 10852                           pclath	equ	0xFFA
 10853                           tblptru	equ	0xFF8
 10854                           tblptrh	equ	0xFF7
 10855                           tblptrl	equ	0xFF6
 10856                           tablat	equ	0xFF5
 10857                           prodh	equ	0xFF4
 10858                           prodl	equ	0xFF3
 10859                           intcon	equ	0xFF2
 10860                           intcon2	equ	0xFF1
 10861                           postinc0	equ	0xFEE
 10862                           fsr0h	equ	0xFEA
 10863                           fsr0l	equ	0xFE9
 10864                           wreg	equ	0xFE8
 10865                           postdec1	equ	0xFE5
 10866                           plusw1	equ	0xFE3
 10867                           fsr1h	equ	0xFE2
 10868                           fsr1l	equ	0xFE1
 10869                           indf2	equ	0xFDF
 10870                           postinc2	equ	0xFDE
 10871                           postdec2	equ	0xFDD
 10872                           plusw2	equ	0xFDB
 10873                           fsr2h	equ	0xFDA
 10874                           fsr2l	equ	0xFD9
 10875                           status	equ	0xFD8
 10876                           
 10877 ;; *************** function _PIN_MANAGER_IOC *****************
 10878 ;; Defined at:
 10879 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;		None
 10882 ;; Auto vars:     Size  Location     Type
 10883 ;;		None
 10884 ;; Return value:  Size  Location     Type
 10885 ;;                  1    wreg      void 
 10886 ;; Registers used:
 10887 ;;		None
 10888 ;; Tracked objects:
 10889 ;;		On entry : 0/0
 10890 ;;		On exit  : 0/0
 10891 ;;		Unchanged: 0/0
 10892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10893 ;;      Params:         0       0       0       0       0       0       0
 10894 ;;      Locals:         0       0       0       0       0       0       0
 10895 ;;      Temps:          0       0       0       0       0       0       0
 10896 ;;      Totals:         0       0       0       0       0       0       0
 10897 ;;Total ram usage:        0 bytes
 10898 ;; Hardware stack levels used:    1
 10899 ;; This function calls:
 10900 ;;		Nothing
 10901 ;; This function is called by:
 10902 ;;		_INTERRUPT_InterruptManager
 10903 ;; This function uses a non-reentrant model
 10904 ;;
 10905                           
 10906                           	psect	text71
 10907  00277E                     __ptext71:
 10908                           	opt stack 0
 10909  00277E                     _PIN_MANAGER_IOC:
 10910                           	opt stack 23
 10911                           
 10912                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 10913                           
 10914                           ;incstack = 0
 10915  00277E  90F2               	bcf	intcon,0,c	;volatile
 10916  002780  0012               	return		;funcret
 10917  002782                     __end_of_PIN_MANAGER_IOC:
 10918                           	opt stack 0
 10919                           pclatu	equ	0xFFB
 10920                           pclath	equ	0xFFA
 10921                           tblptru	equ	0xFF8
 10922                           tblptrh	equ	0xFF7
 10923                           tblptrl	equ	0xFF6
 10924                           tablat	equ	0xFF5
 10925                           prodh	equ	0xFF4
 10926                           prodl	equ	0xFF3
 10927                           intcon	equ	0xFF2
 10928                           intcon2	equ	0xFF1
 10929                           postinc0	equ	0xFEE
 10930                           fsr0h	equ	0xFEA
 10931                           fsr0l	equ	0xFE9
 10932                           wreg	equ	0xFE8
 10933                           postdec1	equ	0xFE5
 10934                           plusw1	equ	0xFE3
 10935                           fsr1h	equ	0xFE2
 10936                           fsr1l	equ	0xFE1
 10937                           indf2	equ	0xFDF
 10938                           postinc2	equ	0xFDE
 10939                           postdec2	equ	0xFDD
 10940                           plusw2	equ	0xFDB
 10941                           fsr2h	equ	0xFDA
 10942                           fsr2l	equ	0xFD9
 10943                           status	equ	0xFD8
 10944                           
 10945 ;; *************** function _MEMORY_ISR *****************
 10946 ;; Defined at:
 10947 ;;		line 206 in file "mcc_generated_files/memory.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;		None
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;		None
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  1    wreg      void 
 10954 ;; Registers used:
 10955 ;;		None
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10961 ;;      Params:         0       0       0       0       0       0       0
 10962 ;;      Locals:         0       0       0       0       0       0       0
 10963 ;;      Temps:          0       0       0       0       0       0       0
 10964 ;;      Totals:         0       0       0       0       0       0       0
 10965 ;;Total ram usage:        0 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; This function calls:
 10968 ;;		Nothing
 10969 ;; This function is called by:
 10970 ;;		_INTERRUPT_InterruptManager
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974                           	psect	text72
 10975  002782                     __ptext72:
 10976                           	opt stack 0
 10977  002782                     _MEMORY_ISR:
 10978                           	opt stack 23
 10979                           
 10980                           ;memory.c: 209: PIR2bits.EEIF = 0;
 10981                           
 10982                           ;incstack = 0
 10983  002782  98A1               	bcf	4001,4,c	;volatile
 10984  002784  0012               	return		;funcret
 10985  002786                     __end_of_MEMORY_ISR:
 10986                           	opt stack 0
 10987                           pclatu	equ	0xFFB
 10988                           pclath	equ	0xFFA
 10989                           tblptru	equ	0xFF8
 10990                           tblptrh	equ	0xFF7
 10991                           tblptrl	equ	0xFF6
 10992                           tablat	equ	0xFF5
 10993                           prodh	equ	0xFF4
 10994                           prodl	equ	0xFF3
 10995                           intcon	equ	0xFF2
 10996                           intcon2	equ	0xFF1
 10997                           postinc0	equ	0xFEE
 10998                           fsr0h	equ	0xFEA
 10999                           fsr0l	equ	0xFE9
 11000                           wreg	equ	0xFE8
 11001                           postdec1	equ	0xFE5
 11002                           plusw1	equ	0xFE3
 11003                           fsr1h	equ	0xFE2
 11004                           fsr1l	equ	0xFE1
 11005                           indf2	equ	0xFDF
 11006                           postinc2	equ	0xFDE
 11007                           postdec2	equ	0xFDD
 11008                           plusw2	equ	0xFDB
 11009                           fsr2h	equ	0xFDA
 11010                           fsr2l	equ	0xFD9
 11011                           status	equ	0xFD8
 11012                           
 11013 ;; *************** function _EUSART1_Transmit_ISR *****************
 11014 ;; Defined at:
 11015 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 11016 ;; Parameters:    Size  Location     Type
 11017 ;;		None
 11018 ;; Auto vars:     Size  Location     Type
 11019 ;;		None
 11020 ;; Return value:  Size  Location     Type
 11021 ;;                  1    wreg      void 
 11022 ;; Registers used:
 11023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11024 ;; Tracked objects:
 11025 ;;		On entry : 0/0
 11026 ;;		On exit  : 0/0
 11027 ;;		Unchanged: 0/0
 11028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11029 ;;      Params:         0       0       0       0       0       0       0
 11030 ;;      Locals:         0       0       0       0       0       0       0
 11031 ;;      Temps:          0       0       0       0       0       0       0
 11032 ;;      Totals:         0       0       0       0       0       0       0
 11033 ;;Total ram usage:        0 bytes
 11034 ;; Hardware stack levels used:    1
 11035 ;; This function calls:
 11036 ;;		Nothing
 11037 ;; This function is called by:
 11038 ;;		_INTERRUPT_InterruptManager
 11039 ;; This function uses a non-reentrant model
 11040 ;;
 11041                           
 11042                           	psect	text73
 11043  002414                     __ptext73:
 11044                           	opt stack 0
 11045  002414                     _EUSART1_Transmit_ISR:
 11046                           	opt stack 23
 11047                           
 11048                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 11049                           
 11050                           ;incstack = 0
 11051  002414  0E46               	movlw	70
 11052  002416  0100               	movlb	0	; () banked
 11053  002418  61FB               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 11054  00241A  D012               	goto	i2l831
 11055                           
 11056                           ; BSR set to: 0
 11057                           ;eusart1.c: 186: {
 11058                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 11059  00241C  5039               	movf	_eusart1TxTail,w,c	;volatile
 11060  00241E  0D01               	mullw	1
 11061  002420  0E00               	movlw	low _eusart1TxBuffer
 11062  002422  24F3               	addwf	prodl,w,c
 11063  002424  6ED9               	movwf	fsr2l,c
 11064  002426  0E01               	movlw	high _eusart1TxBuffer
 11065  002428  20F4               	addwfc	prodh,w,c
 11066  00242A  6EDA               	movwf	fsr2h,c
 11067  00242C  50DF               	movf	indf2,w,c
 11068  00242E  6EAD               	movwf	4013,c	;volatile
 11069                           
 11070                           ; BSR set to: 0
 11071  002430  2A39               	incf	_eusart1TxTail,f,c	;volatile
 11072                           
 11073                           ; BSR set to: 0
 11074                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 11075  002432  0E45               	movlw	69
 11076  002434  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 11077  002436  D002               	goto	i2l832
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;eusart1.c: 189: {
 11081                           ;eusart1.c: 190: eusart1TxTail = 0;
 11082  002438  0E00               	movlw	0
 11083  00243A  6E39               	movwf	_eusart1TxTail,c	;volatile
 11084  00243C                     i2l832:
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;eusart1.c: 191: }
 11088                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 11089                           
 11090                           ; BSR set to: 0
 11091  00243C  2BFB               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 11092                           
 11093                           ;eusart1.c: 193: }
 11094  00243E  0012               	return	
 11095  002440                     i2l831:
 11096                           
 11097                           ; BSR set to: 0
 11098                           ;eusart1.c: 194: else
 11099                           ;eusart1.c: 195: {
 11100                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 11101  002440  989D               	bcf	3997,4,c	;volatile
 11102                           
 11103                           ; BSR set to: 0
 11104                           ;eusart1.c: 197: eusart1TxTail = 0;
 11105  002442  0E00               	movlw	0
 11106  002444  6E39               	movwf	_eusart1TxTail,c	;volatile
 11107                           
 11108                           ;eusart1.c: 198: eusart1TxHead = 0;
 11109  002446  0E00               	movlw	0
 11110  002448  6E3A               	movwf	_eusart1TxHead,c	;volatile
 11111  00244A  0012               	return	
 11112  00244C                     __end_of_EUSART1_Transmit_ISR:
 11113                           	opt stack 0
 11114                           pclatu	equ	0xFFB
 11115                           pclath	equ	0xFFA
 11116                           tblptru	equ	0xFF8
 11117                           tblptrh	equ	0xFF7
 11118                           tblptrl	equ	0xFF6
 11119                           tablat	equ	0xFF5
 11120                           prodh	equ	0xFF4
 11121                           prodl	equ	0xFF3
 11122                           intcon	equ	0xFF2
 11123                           intcon2	equ	0xFF1
 11124                           postinc0	equ	0xFEE
 11125                           fsr0h	equ	0xFEA
 11126                           fsr0l	equ	0xFE9
 11127                           wreg	equ	0xFE8
 11128                           postdec1	equ	0xFE5
 11129                           plusw1	equ	0xFE3
 11130                           fsr1h	equ	0xFE2
 11131                           fsr1l	equ	0xFE1
 11132                           indf2	equ	0xFDF
 11133                           postinc2	equ	0xFDE
 11134                           postdec2	equ	0xFDD
 11135                           plusw2	equ	0xFDB
 11136                           fsr2h	equ	0xFDA
 11137                           fsr2l	equ	0xFD9
 11138                           status	equ	0xFD8
 11139                           
 11140 ;; *************** function _EUSART1_Receive_ISR *****************
 11141 ;; Defined at:
 11142 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 11143 ;; Parameters:    Size  Location     Type
 11144 ;;		None
 11145 ;; Auto vars:     Size  Location     Type
 11146 ;;		None
 11147 ;; Return value:  Size  Location     Type
 11148 ;;                  1    wreg      void 
 11149 ;; Registers used:
 11150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11151 ;; Tracked objects:
 11152 ;;		On entry : 0/0
 11153 ;;		On exit  : 0/0
 11154 ;;		Unchanged: 0/0
 11155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11156 ;;      Params:         0       0       0       0       0       0       0
 11157 ;;      Locals:         0       0       0       0       0       0       0
 11158 ;;      Temps:          0       0       0       0       0       0       0
 11159 ;;      Totals:         0       0       0       0       0       0       0
 11160 ;;Total ram usage:        0 bytes
 11161 ;; Hardware stack levels used:    1
 11162 ;; This function calls:
 11163 ;;		Nothing
 11164 ;; This function is called by:
 11165 ;;		_INTERRUPT_InterruptManager
 11166 ;; This function uses a non-reentrant model
 11167 ;;
 11168                           
 11169                           	psect	text74
 11170  00257C                     __ptext74:
 11171                           	opt stack 0
 11172  00257C                     _EUSART1_Receive_ISR:
 11173                           	opt stack 23
 11174                           
 11175                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;incstack = 0
 11179  00257C  A2AB               	btfss	4011,1,c	;volatile
 11180  00257E  D002               	goto	i2l837
 11181                           
 11182                           ;eusart1.c: 206: {
 11183                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 11184  002580  98AB               	bcf	4011,4,c	;volatile
 11185                           
 11186                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 11187  002582  88AB               	bsf	4011,4,c	;volatile
 11188  002584                     i2l837:
 11189                           
 11190                           ;eusart1.c: 210: }
 11191                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 11192  002584  5038               	movf	_eusart1RxHead,w,c	;volatile
 11193  002586  0D01               	mullw	1
 11194  002588  0E46               	movlw	low _eusart1RxBuffer
 11195  00258A  24F3               	addwf	prodl,w,c
 11196  00258C  6ED9               	movwf	fsr2l,c
 11197  00258E  0E01               	movlw	high _eusart1RxBuffer
 11198  002590  20F4               	addwfc	prodh,w,c
 11199  002592  6EDA               	movwf	fsr2h,c
 11200  002594  CFAE FFDF          	movff	4014,indf2	;volatile
 11201  002598  2A38               	incf	_eusart1RxHead,f,c	;volatile
 11202                           
 11203                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 11204  00259A  0E27               	movlw	39
 11205  00259C  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 11206  00259E  D002               	goto	i2l838
 11207                           
 11208                           ;eusart1.c: 217: {
 11209                           ;eusart1.c: 218: eusart1RxHead = 0;
 11210  0025A0  0E00               	movlw	0
 11211  0025A2  6E38               	movwf	_eusart1RxHead,c	;volatile
 11212  0025A4                     i2l838:
 11213                           
 11214                           ;eusart1.c: 219: }
 11215                           ;eusart1.c: 220: eusart1RxCount++;
 11216  0025A4  2A36               	incf	_eusart1RxCount,f,c	;volatile
 11217  0025A6  0012               	return		;funcret
 11218  0025A8                     __end_of_EUSART1_Receive_ISR:
 11219                           	opt stack 0
 11220                           pclatu	equ	0xFFB
 11221                           pclath	equ	0xFFA
 11222                           tblptru	equ	0xFF8
 11223                           tblptrh	equ	0xFF7
 11224                           tblptrl	equ	0xFF6
 11225                           tablat	equ	0xFF5
 11226                           prodh	equ	0xFF4
 11227                           prodl	equ	0xFF3
 11228                           intcon	equ	0xFF2
 11229                           intcon2	equ	0xFF1
 11230                           postinc0	equ	0xFEE
 11231                           fsr0h	equ	0xFEA
 11232                           fsr0l	equ	0xFE9
 11233                           wreg	equ	0xFE8
 11234                           postdec1	equ	0xFE5
 11235                           plusw1	equ	0xFE3
 11236                           fsr1h	equ	0xFE2
 11237                           fsr1l	equ	0xFE1
 11238                           indf2	equ	0xFDF
 11239                           postinc2	equ	0xFDE
 11240                           postdec2	equ	0xFDD
 11241                           plusw2	equ	0xFDB
 11242                           fsr2h	equ	0xFDA
 11243                           fsr2l	equ	0xFD9
 11244                           status	equ	0xFD8
 11245                           pclatu	equ	0xFFB
 11246                           pclath	equ	0xFFA
 11247                           tblptru	equ	0xFF8
 11248                           tblptrh	equ	0xFF7
 11249                           tblptrl	equ	0xFF6
 11250                           tablat	equ	0xFF5
 11251                           prodh	equ	0xFF4
 11252                           prodl	equ	0xFF3
 11253                           intcon	equ	0xFF2
 11254                           intcon2	equ	0xFF1
 11255                           postinc0	equ	0xFEE
 11256                           fsr0h	equ	0xFEA
 11257                           fsr0l	equ	0xFE9
 11258                           wreg	equ	0xFE8
 11259                           postdec1	equ	0xFE5
 11260                           plusw1	equ	0xFE3
 11261                           fsr1h	equ	0xFE2
 11262                           fsr1l	equ	0xFE1
 11263                           indf2	equ	0xFDF
 11264                           postinc2	equ	0xFDE
 11265                           postdec2	equ	0xFDD
 11266                           plusw2	equ	0xFDB
 11267                           fsr2h	equ	0xFDA
 11268                           fsr2l	equ	0xFD9
 11269                           status	equ	0xFD8
 11270                           
 11271                           	psect	rparam
 11272  0000                     pclatu	equ	0xFFB
 11273                           pclath	equ	0xFFA
 11274                           tblptru	equ	0xFF8
 11275                           tblptrh	equ	0xFF7
 11276                           tblptrl	equ	0xFF6
 11277                           tablat	equ	0xFF5
 11278                           prodh	equ	0xFF4
 11279                           prodl	equ	0xFF3
 11280                           intcon	equ	0xFF2
 11281                           intcon2	equ	0xFF1
 11282                           postinc0	equ	0xFEE
 11283                           fsr0h	equ	0xFEA
 11284                           fsr0l	equ	0xFE9
 11285                           wreg	equ	0xFE8
 11286                           postdec1	equ	0xFE5
 11287                           plusw1	equ	0xFE3
 11288                           fsr1h	equ	0xFE2
 11289                           fsr1l	equ	0xFE1
 11290                           indf2	equ	0xFDF
 11291                           postinc2	equ	0xFDE
 11292                           postdec2	equ	0xFDD
 11293                           plusw2	equ	0xFDB
 11294                           fsr2h	equ	0xFDA
 11295                           fsr2l	equ	0xFD9
 11296                           status	equ	0xFD8
 11297                           
 11298                           	psect	temp
 11299  000048                     btemp:
 11300                           	opt stack 0
 11301  000048                     	ds	1
 11302  0000                     int$flags	set	btemp
 11303  0000                     wtemp6	set	btemp+1
 11304                           pclatu	equ	0xFFB
 11305                           pclath	equ	0xFFA
 11306                           tblptru	equ	0xFF8
 11307                           tblptrh	equ	0xFF7
 11308                           tblptrl	equ	0xFF6
 11309                           tablat	equ	0xFF5
 11310                           prodh	equ	0xFF4
 11311                           prodl	equ	0xFF3
 11312                           intcon	equ	0xFF2
 11313                           intcon2	equ	0xFF1
 11314                           postinc0	equ	0xFEE
 11315                           fsr0h	equ	0xFEA
 11316                           fsr0l	equ	0xFE9
 11317                           wreg	equ	0xFE8
 11318                           postdec1	equ	0xFE5
 11319                           plusw1	equ	0xFE3
 11320                           fsr1h	equ	0xFE2
 11321                           fsr1l	equ	0xFE1
 11322                           indf2	equ	0xFDF
 11323                           postinc2	equ	0xFDE
 11324                           postdec2	equ	0xFDD
 11325                           plusw2	equ	0xFDB
 11326                           fsr2h	equ	0xFDA
 11327                           fsr2l	equ	0xFD9
 11328                           status	equ	0xFD8


Data Sizes:
    Strings     76
    Constant    168
    Data        25
    BSS         248
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      71
    BANK0           160     74     156
    BANK1           256     21     195
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> SendUartSystemInitMessage@TxMsg(BANK0[30]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(COMRAM[8]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> SendUartSystemInitMessage@TxMsg(BANK0[30]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(COMRAM[8]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgQueue(BANK0[20]), 

    memcpy@d1	PTR void  size(2) Largest target is 30
		 -> SendUartSystemInitMessage@TxMsg(BANK0[30]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 30
		 -> SendUartSystemInitMessage@TxMsg(BANK0[30]), 

    memcpy@s1	PTR const void  size(2) Largest target is 28
		 -> STR_3(CODE[25]), STR_2(CODE[23]), STR_1(CODE[28]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_3(CODE[25]), STR_2(CODE[23]), STR_1(CODE[28]), 

    sp__memcpy	PTR void  size(2) Largest target is 30
		 -> SendUartSystemInitMessage@TxMsg(BANK0[30]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> SendUartSystemInitMessage@TxMsg(BANK0[30]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(COMRAM[8]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> SendUartSystemInitMessage@TxMsg(BANK0[30]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(COMRAM[8]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgQueue(BANK0[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> SendUartSystemInitMessage@TxMsg(BANK0[30]), GetMcuRunTime@TxMsg(COMRAM[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(COMRAM[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendUartSystemInitMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _InitSystemApplicationManagers->_PLLInitialize
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_make8
    _SWSPI_Synth_send_bits->_SwSpi_Clk_Pin
    _SWSPI_Synth_send_bits->_SwSpi_Data_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _CheckFlashPrecentage->___ftdiv
    _AdcConvert->_FlashSampleWrite
    _exp->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_AdcConvert
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_AdcConvert
    _AdcConvert->_pow

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  139827
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                         3     3      0    2701
                                             35 COMRAM     3     3      0
                       _EUSART1_Read
                _InitRxMessageParams
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      67
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2449
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     463
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     463
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           35    35      0    5576
                                              0 BANK0     35    35      0
                   _WriteUartMessage
                          _ZeroArray
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              11     5      6    1018
                                             23 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    2449
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _WriteUartMessage                                     7     3      4    1812
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   16167
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                   _InitSevenSegment
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0    8282
                                             41 COMRAM     6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitSevenSegment                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              0     0      0    7884
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (3) _SWSPI_send_word                                      9     4      5    7884
                                             32 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (4) _make8                                                9     4      5     870
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      15
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SWSPI_Synth_send_bits                                3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (4) _SWSPI_DAC_send_bits                                  3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Data_Pin                                       2     1      1     610
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Clk_Pin                                        2     1      1     762
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      60
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      60
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0  100581
                                             72 BANK0      2     2      0
                                             11 BANK1     10    10      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   84843
                                             66 BANK0      6     0      6
                                              0 BANK1     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   27102
                                             48 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   45974
                                             57 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     539
                                             48 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11764
                                             49 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     821
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             39 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   12005
                                             36 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     592
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      31
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (8) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _InitSevenSegment
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendUartSystemInitMessage
     _WriteUartMessage
       _EUSART1_Write
     _ZeroArray
       _memset
     _memcpy
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _InitRxMessageParams
       _ZeroArray
         _memset
     _toupper

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     15      C3       6       76.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     4A      9C       4       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A6       9        0.0%
DATA                 0      0     1A6      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 06 13:25:54 2018

              __end_of_keepAliveSignalLed 26DE                              ___altoft@exp 008F  
                _eusart1TxBufferRemaining 00FB                           _GroupControlMcu 000000  
                           ___altoft@sign 0090                __size_of_FLASH_IsWriteDone 000E  
                     __end_of_BlinkOkLeds 1EC8                           _SWSPI_send_word 1864  
                     ___wmul@multiplicand 001A            SendUartSystemInitMessage@F7616 00EE  
                         _timer0ReloadVal 0046                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 0083  
                            ___ftadd@exp2 0082                               __CFG_LVP$ON 000000  
                            ___ftadd@sign 0081                               ?_MEMORY_ISR 0001  
                                     l112 09E2                                       l113 0908  
                                     l171 1C54                                       l173 1C78  
                                     l166 1C90                                       l167 1C32  
                                     l184 24A2                                       l257 1146  
                                     l185 248C                                       l169 1C3E  
                                     l258 1164                                       l607 217A  
                                     l543 187E                                       l608 213E  
                                     l625 2166                                       l617 2152  
                                     l609 2148                                       l553 18EA  
                                     l626 2170                                       l618 215C  
                                     l562 2072                                       l570 201A  
                                     l554 1902                                       l546 188C  
                                     l474 0C78                                       l563 203E  
                                     l571 1FE6                                       l580 20F2  
                                     l564 2058                                       l572 2000  
                                     l556 1918                                       l644 2390  
                                     l476 0CE2                                       l812 2274  
                                     l565 2062                                       l573 200A  
                                     l549 18D8                                       l645 2368  
                                     l654 237C                                       l646 2372  
                                     l814 229A                                       l655 2386  
                                     l665 23CC                                       l825 233C  
                                     l922 1862                                       l578 2124  
                                     l666 23A4                                       l826 2360  
                                     l923 181A                                       l579 20E8  
                                     l691 267E                                       l675 23B8  
                                     l667 23AE                                       l827 235E  
                                     l596 2110                                       l588 20FC  
                                     l676 23C2                                       l925 183A  
                                     l597 211A                                       l589 2106  
                                     l926 183C                                       l686 2682  
                                     l687 267A                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                          PLLInitialize@idx 002C  
                                     _cnt 00F9                                       _exp 06F6  
                                     _log 0F54                                       _pow 0DD4  
                                     prod 000FF3                                       wreg 000FE8  
          SendUartSystemInitMessage@TxMsg 0065            ?_InitSystemApplicationManagers 0001  
                            ___ftdiv@cntr 0063                              ___ftdiv@sign 0068  
                                    l1035 2538                                      l2031 271A  
                                    l2130 0F70                                      l1410 20B4  
                                    l2132 0F90                                      l1412 20D8  
                                    l1261 1F66                                      l1413 20CE  
                                    l2070 07B0                                      l1262 1F28  
                                    l2071 08DA                                      l2080 149E  
                                    l2072 08B0                                      l1264 1F2C  
                                    l2081 151A                                      l1265 1F30  
                                    l1409 20A0                                      l2138 16CA  
                                    l2090 16FC                                      l2066 0710  
                                    l1266 1F34                                      l2139 164A  
                                    l1507 1CDE                                      l1267 1F62  
                                    l1508 1CD2                                      l2092 1742  
                                    l2068 0748                                      l1701 1388  
                                    l2077 1484                                      l2069 0780  
                                    l1710 1B68                                      l2086 1AA0  
                                    l2078 1476                                      l2094 1770  
                                    l1703 13B0                                      l2095 1764  
                                    l1640 1A26                                      l1704 13EE  
                                    l1720 12FC                                      l1641 1A10  
                                    l1705 1414                                      l1618 23F0  
                                    l1722 1314                                      l1643 1A4E  
                                    l1723 1324                                      l1644 1A44  
                                    l1716 1292                                      l1740 1206  
                                    l1637 19F2                                      l1733 22BC  
                                    l1709 1B38                                      l3317 1ED2  
                                    l1638 19E8                                      l1718 12BA  
                                    l1727 260A                                      l1719 12EC  
                                    l1672 0B22                                      l1745 123A  
                                    l1737 119E                                      l3329 1E74  
                                    l5105 0D2A                                      l1682 0B7E  
                                    l1746 122E                                      l1850 220C  
                                    l1691 0BBC                                      l1683 0B74  
                                    l1739 1216                                      l1851 21EA  
                                    l1692 0BB2                                      l1668 0AF8  
                                    l1748 1256                                      l1677 0B88  
                                    l1694 0BE0                                      l1695 0BFC  
                                    l1871 0E38                                      l1783 1E22  
                                    l1696 0C2C                                      l1872 0EC0  
                                    l1856 256A                                      l1784 1E16  
                                    l1873 0E9C                                      l5081 0C68  
                                    l1857 255A                                      l1794 1F94  
                                    l1874 0F46                                      l1795 1F88  
                                    l5091 0CC0                                      l1787 1E4A  
                                    l1868 0E20                                      l1788 1E58  
                                    l1869 0E10                                      l5095 0CD2  
                                    l6223 255A                                      l6407 1812  
                                    l6503 08B0                                      ?_exp 0099  
                                    ?_log 0090                                      l4791 18A6  
                                    l6367 232A                                      l5931 1B94  
                                    l4787 1898                                      l6659 0900  
                                    l6597 21EA                                      ?_pow 00A2  
                                    STR_1 06A9                                      STR_2 06DE  
                                    STR_3 06C5                                      _IOCB 000F62  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u4010 0D2A  
                                    u3140 1F5A                                      u4040 1E26  
                                    u1640 26D0                                      u3145 1F50  
                                    u5100 0B14                                      u5031 0AB6  
                                    u5200 0BC4                                      u3600 18F2  
                                    u5041 0ACA                                      u5130 0B52  
                                    u1658 26D2                                      u3540 1874  
                                    u5070 0AEA                                      u3630 190E  
                                    u5241 127A                                      u5170 0B90  
                                    u5331 1182                                      u5420 1AC8  
                                    u3580 18CC                                      u5261 12A2  
                                    u5350 11BC                                      u6310 19C6  
                                    u5435 251C                                      u5451 1370  
                                    u5355 11B4                                      u6331 1532  
                                    u5436 251E                                      u5428 1ACA  
                                    u5710 1840                                      u5390 1240  
                                    u5550 1490                                      u5471 1398  
                                    u5800 078C                                      u5660 275A  
                                    u4940 19DA                                      u5661 2756  
                                    u5725 185E                                      u5726 1860  
                                    u5590 171C                                      u3990 0CC0  
                                    u6607 1F12                                      u5920 10D2  
                                    u6617 09CE                                      u5915 1080  
                                    u5940 1116                                      u4980 1A58  
                                    u5598 1720                                      u5790 078A  
                                    u6577 1E9A                                      u5890 0E86  
                                    u6587 1EB4                                      u6597 1EF8  
                ??_SwSpi_Set_Synth_Le_Pin 0019                                      _WPUB 000F61  
                           _EUSART1_Write 2328                   ??_InitAdcApplicationMgr 0018  
                                    _main 208E                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 277A                           __end_of_DacInit 1E04  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0048  
                           __CFG_BORV$190 000000                                      exp@x 0099  
                                    log@x 0090                         ?_FLASH_WriteBlock 001D  
                        ?_ClearMcuRunTime 0001                                      pow@x 00A2  
                                    pow@y 00A5                                      prodh 000FF4  
                                    prodl 000FF3             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                      ??_FLASH_WriteBlock 0023                             _adcSampleMode 00CC  
                            ___ftmul@cntr 0076                              ___param_bank 000000  
                            ___ftmul@sign 0077                            _BlinkErrorLeds 1EC8  
                            ___fttol@exp1 0086                                     ??_exp 002F  
                                   ??_log 002F                              ___fttol@lval 0082  
                                   ??_pow 002F                   __end_of_TMR0_Initialize 24EC  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 2750  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                                   _EEADR 000FA9                           __end_of___ftadd 0C52  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                           __end_of___ftdiv 1446  
                         __end_of___ftneg 2618                           __end_of___ftmul 135E  
                                   _T0CON 000FD5                           __end_of___llmod 1E6A  
                         __end_of___ftsub 22E6                           __end_of___fttol 1268  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwmod 2328  
                                   i2l831 2440                                     i2l832 243C  
                                   i2l760 005E                                     i2l762 006A  
                                   i2l837 2584                                     i2l765 007A  
                                   i2l838 25A4                                     i2l767 0086  
                                   i2l769 0090                                     i2l991 1BC6  
                                   i2l992 1BE6                                     i2l993 1C06  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _PORTD 000F83                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                     _SWSPI_DAC_send_bits 2036         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                 ?_TMR0_SetInterruptHandler 0018  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0028  
                    _EUSART1_Transmit_ISR 2414                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                       ?_WriteUartMessage 0019                          __end_of_TMR0_ISR 1C24  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 2782  
                                   _make8 1F26            __size_of_SWSPI_Synth_send_bits 0058  
                                   _count 00C6                                     _floor 1446  
                                   _ldexp 16E2                                     _frexp 1A78  
                                   _errno 00C2             __end_of_SWSPI_Synth_send_bits 2036  
                      ??_WriteUartMessage 001D                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 001C                            ?_EUSART1_Write 0001  
                             ?_AdcConvert 0001                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 01B5  
                          ??_EUSART1_Read 0018                                     plusw1 000FE3  
                                   plusw2 000FDB                                     status 000FD8  
                                   wtemp6 0049                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 271E            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
                             exp@exponent 009F            CheckFlashPrecentage@precentage 007C  
                    ?_SWSPI_DAC_send_bits 001A                    __end_of_BlinkErrorLeds 1F26  
                             ldexp@newexp 0093                   __end_of_SWSPI_send_word 191C  
                             _BlinkOkLeds 1E6A                   WriteUartMessage@dataBuf 0019  
                         __initialization 1D28                               log@exponent 0093  
              __end_of_EUSART1_Initialize 2482                              __end_of_main 20E4  
             ?_INTERRUPT_InterruptManager 0001                                    ??_main 0030  
                           ___fttol@sign1 0081                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 003B                             __activetblptr 000002  
              ?_SendUartSystemInitMessage 0001                              _writeAddress 0042  
                      ??_SwSpi_Set_CE_Pin 0019                     ?_EUSART1_Transmit_ISR 0001  
                 __end_of_TMR0_StartTimer 277E                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 0091  
               FLASH_WriteBlock@writeAddr 001D                                    ?_ldexp 0090  
                                  ?_frexp 0018                          __end_of___altoft 1D28  
                        ___llmod@dividend 0018                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 002A                                    _EECON2 000FA7  
                           ?_readUartByte 0001                          __end_of___awtoft 2414  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 1A78  
                        __end_of___lltoft 1FDE                         ?_FlashSampleWrite 002D  
                          __CFG_WDTEN$OFF 000000                                    i2l1840 2314  
                                  i2l1841 231E                                    i2l1836 22FC  
                                  i2l1837 22F4                                    _TABLAT 000FF5  
                                  _RCREG1 000FAE                          __end_of___lwtoft 263C  
               __size_of_FLASH_EraseBlock 0034                                    _RCSTA1 000FAB  
         __size_of_SwSpi_Set_Synth_Le_Pin 003C                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                    _SwSpi_Set_Dac_Sync_Pin 2676  
                 __size_of_SwSpi_Data_Pin 0056                        ??_FlashSampleWrite 0060  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                   ??_SWSPI_DAC_send_bits 001B                           ?_BlinkErrorLeds 0001  
                          __CFG_XINST$OFF 000000                                    _cState 00CA  
                                  ___ftge 1B08                 SWSPI_Synth_send_bits@data 001A  
                                  ___wmul 25CE                                 ??___ftadd 007E  
                          __CFG_STVREN$ON 000000                                 ??___ftdiv 0060  
                               ??___ftneg 001B                         ?_InitSevenSegment 0001  
                               ??___ftmul 006F                     __end_of_PLLInitialize 0DD4  
                               ??___llmod 0020                                 ??___ftsub 002F  
                               ??___fttol 007C                                 ??___lwmod 0005  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                                    _memcpy 21D8  
                        ?_TMR0_Initialize 0001                                    _memset 2550  
                                  clear_0 1D6E                                    clear_1 1D7A  
                                  clear_2 1D86                        ??_InitSevenSegment 0018  
                     __size_of_AdcConvert 01BC                                    floor@i 0094  
                   __end_of_SwSpi_Clk_Pin 2190                                    floor@x 0091  
                   ___ftmul@f3_as_product 0073                  SWSPI_DAC_send_bits@count 001B  
              FlashSampleWrite@channelNum 002F                              __pdataCOMRAM 0042  
                           ?_SetMcuSystem 0001         __end_of_SendUartSystemInitMessage 1608  
                            __mediumconst 0000                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                            ??_readUartByte 0024  
                         ??_EUSART1_Write 0018  TMR0_SetInterruptHandler@InterruptHandler 0018  
            __size_of_InitRxMessageParams 001C                          ?_PIN_MANAGER_IOC 0001  
                         _eusart1RxBuffer 0146                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                         _eusart1TxBuffer 0100                          __end_ofexp@coeff 068E  
                       _SYSTEM_Initialize 2692                          __end_oflog@coeff 06A9  
                              __accesstop 0060                   __end_of__initialization 1D8C  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                              ___ftadd@f1 0078                                ___ftadd@f2 007B  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 008D  
                           ___rparam_used 000001                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 002C                                ___ftdiv@f3 0064  
                              ___ftneg@f1 0018                                ___awtoft@c 0020  
                WriteUartMessage@dataSize 001B                                ___ftmul@f1 0069  
                              ___ftmul@f2 006C                          ?_SWSPI_send_word 0021  
                              ___ftsub@f1 0084                                ___ftsub@f2 0087  
                              ___fttol@f1 0078                            __pcstackCOMRAM 0001  
                            __pidataBANK0 26F4                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 1F82                             __end_of_floor 1528  
                           __end_of_ldexp 17A8                             __end_of_frexp 1B08  
                  _SwSpi_Set_Synth_Le_Pin 23A0                                ___lwtoft@c 0020  
                    __end_of_EUSART1_Read 22A4                              ??_MEMORY_ISR 0001  
                  __size_of_SetMcuRunTime 0044                    ??_EUSART1_Transmit_ISR 0001  
                          ??_SetMcuSystem 001C                     TMR0_ISR@CountCallBack 0034  
           SwSpi_Set_Synth_Le_Pin@phrType 0019                        _keepAliveSignalLed 26C6  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 25A8  
             FLASH_WriteBlock@GIEBitValue 002B                                   ??_make8 001D  
                                 ??_floor 002F                          ?_TMR0_StartTimer 0001  
                                 ??_ldexp 0095                                   ??_frexp 001D  
               __end_of_SYSTEM_Initialize 26AC                           _AdcConvert$3288 01BD  
                           _eusart1RxHead 0038                             _eusart1TxHead 003A  
                           _eusart1RxTail 0037                                __pbssBANK0 00AA  
                              __pbssBANK1 0100                             _eusart1TxTail 0039  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00DA  
                         __CFG_PLLCFG$OFF 000000                                _channelArr 0669  
                              __pnvCOMRAM 0046            __size_of_InitAdcApplicationMgr 0010  
           __end_of_InitAdcApplicationMgr 2742                        __end_of_MEMORY_ISR 2786  
         ??_InitSystemApplicationManagers 0030                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018          __end_of_TMR0_SetInterruptHandler 2772  
                                 ?___wmul 0018                                ??_TMR0_ISR 0006  
                      __CFG_CCP3MX$PORTB5 000000                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 265A                                 ?___altoft 0087  
                                 ?_memcpy 0018                                   ?_memset 0018  
                               ?___awtoft 0020                                 ?___ftpack 0018  
                               ?___lltoft 0020                 __size_of_FLASH_WriteBlock 00BC  
                 __size_of_ADC_Initialize 0016                FlashSampleWrite@sampleData 002D  
                               ?___lwtoft 0020              __end_of_CheckFlashPrecentage 19CA  
                                 _OSCCON2 000FD2                                   _TBLPTRH 000FF7  
                                 _TBLPTRL 000FF6                                   _TBLPTRU 000FF8  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
                                 _DacInit 1D9A                              ??_AdcConvert 00A8  
                        _FLASH_EraseBlock 24EC                            _SwSpi_Data_Pin 20E4  
                           _SetMcuRunTime 221E                           __CFG_PWRTEN$OFF 000000  
                                 __Hparam 0000                 __size_of_WriteUartMessage 0036  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                    PLLInitialize@idx_807 002E                           __size_of___ftge 0090  
                                 ___ftadd 0AA4                                   ___ftdiv 135E  
                    __end_of_readUartByte 1CAE                                   ___ftneg 25F4  
                         __size_of___wmul 0026                                   ___ftmul 1268  
                                 ___llmod 1E04                                   ___ftsub 22A4  
                                 ___fttol 1170                FlashSampleWrite@rotateLeft 0062  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 22E6  
                    AdcConvert@_adcResult 01B9                              __psmallconst 0600  
                              ??___altoft 008B                SWSPI_Synth_send_bits@count 001B  
                   _mcuRunTimeIn5SecTicks 00BE                                   _channel 00CB  
                                 __pcinit 1D28                           __size_of_memcpy 0046  
                              ??___awtoft 0023                                ??___ftpack 001D  
                       __end_of_eval_poly 16E2                           __size_of_memset 002C  
                                 __ramtop 0600                                ??___lltoft 0024  
                                 __ptext0 208E                                   __ptext1 1C24  
                                 __ptext2 270A                                   __ptext3 265A  
                                 __ptext4 2262                                   __ptext5 26C6  
                                 __ptext6 275E                                   __ptext7 2692  
                                 __ptext8 24B8                                   __ptext9 2768  
                      __end_of_AdcConvert 0AA4                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001B  
                   _OSCILLATOR_Initialize 2742                              __size_of_exp 01F2  
                            __size_of_log 0122                              __size_of_pow 0180  
             ??_SendUartSystemInitMessage 0024                        _EUSART1_Initialize 244C  
                ??_PIN_MANAGER_Initialize 0018                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                    __end_of_SwSpi_Data_Pin 213A  
                                 _toupper 270A                      end_of_initialization 1D8C  
                                 exp@sign 00A1                       ?_EUSART1_Initialize 0001  
                        ??_BlinkErrorLeds 0018                     _SWSPI_Synth_send_bits 1FDE  
              __end_of_TEST_PLL_REGISTERS 0635                                   memcpy@d 001F  
                                 memcpy@n 001C                                   memcpy@s 0021  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 0000  
                    __end_of_SetMcuSystem 2768                                   pow@sign 01B4  
                        AdcConvert@adcRes 01C0                         readUartByte@chRec 0026  
                    SWSPI_send_word@datac 0026                                _rxMsgQueue 00CE  
                                 postdec1 000FE5                                   postdec2 000FDD  
              __end_of_PLL_INIT_REGISTERS 0669                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0042  
                     _InitRxMessageParams 265A                 __size_of_FlashSampleWrite 00FA  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 26C6  
  __size_of_InitSystemApplicationManagers 001A             _InitSystemApplicationManagers 26AC  
                _TMR0_SetInterruptHandler 2768                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 2692             FLASH_WriteBlock@flashWrBufPtr 0021  
               __size_of_InitSevenSegment 0026                      ?_InitRxMessageParams 0001  
                     EUSART1_Write@txData 0018                           ?_SwSpi_Data_Pin 0018  
             __end_of_SWSPI_DAC_send_bits 208E                  FLASH_EraseBlock@baseAddr 0018  
                             ___ftdiv@exp 0067                              _EUSART1_Read 2262  
               _SendUartSystemInitMessage 1528                      _CheckFlashPrecentage 191C  
                       FLASH_WriteBlock@i 002C                               ___ftmul@exp 0072  
      SendUartSystemInitMessage@firstLine 0060                   ?_SwSpi_Set_Synth_Le_Pin 0018  
            __end_of_INTERRUPT_Initialize 277A                            __end_of___ftge 1B98  
            InitAdcApplicationMgr@channel 0018                            __end_of___wmul 25F4  
                           __pidataCOMRAM 2772                         __size_of_TMR0_ISR 008C  
                          _ADC_Initialize 26DE                          _FLASH_WriteBlock 17A8  
                          __end_of_memcpy 221E                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 257C                                floor@expon 0097  
                       ??_ClearMcuRunTime 0018                       start_initialization 1D28  
                              eval_poly@d 0087                                eval_poly@n 0089  
                              eval_poly@x 0084                          BlinkOkLeds@state 001D  
                __size_of_TMR0_Initialize 0034                                ldexp@value 0090  
         __size_of_PIN_MANAGER_Initialize 0048                     ??_InitRxMessageParams 0024  
                             __end_of_exp 08E8                               __end_of_log 1076  
                             __end_of_pow 0F54                  AdcConvert@_adcResult_332 01BB  
                  ?_SWSPI_Synth_send_bits 001A                           ??_SetMcuRunTime 0021  
                   __end_of_EUSART1_Write 2364                    __size_of_PLLInitialize 0182  
                              frexp@value 0018                           ___llmod@divisor 001C  
                   ?_CheckFlashPrecentage 0001                           ___llmod@counter 0020  
                __size_of_PIN_MANAGER_IOC 0004                     __size_of_readUartByte 008A  
                  __size_of_SwSpi_Clk_Pin 0056            __end_of_SwSpi_Set_Synth_Le_Pin 23DC  
                        _WriteUartMessage 2482                                  ??___ftge 001E  
                                ??___wmul 001C                      __size_of_BlinkOkLeds 005E  
                  __end_of_ADC_Initialize 26F4                               __pdataBANK0 00E2  
                 SWSPI_DAC_send_bits@data 001A                                  ??_memcpy 001E  
                                ??_memset 001E               FLASH_EraseBlock@GIEBitValue 001C  
                __end_of_FLASH_EraseBlock 2520                  __size_of_SWSPI_send_word 00B8  
                          _eusart1RxCount 0036                         __size_of___altoft 007A  
                               _ZeroArray 263C                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0030                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 01AE                            BlinkOkLeds@idx 001B  
                                ?_DacInit 0001                              _readUartByte 1C24  
                   __size_of_SetMcuSystem 000A                          _SwSpi_Set_CE_Pin 2364  
            __size_of_EUSART1_Receive_ISR 002C                     _TMR0_InterruptHandler 00F7  
                               __pnvBANK0 00F7                  __size_of_TMR0_StartTimer 0004  
                  _PIN_MANAGER_Initialize 2190                     _InitAdcApplicationMgr 2732  
                               __pintcode 0008                                  ?___ftadd 0078  
                                ?___ftdiv 0029                                  ?___ftneg 0018  
                                ?___ftmul 0069                                  ?___llmod 0018  
                                ?___ftsub 0084                                  ?___fttol 0078  
                        _FlashSampleWrite 1076                                  ?___lwmod 0001  
                         ?_ADC_Initialize 0001                             _PLLInitialize 0C52  
             __size_of_keepAliveSignalLed 0018                            readUartByte@c1 0025  
                          readUartByte@c2 0024              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                                ?_ZeroArray 0020  
                             __smallconst 0600                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 213A                                 _eval_poly 1608  
                     BlinkErrorLeds@state 001D                           _TimerOneSecFlag 003D  
                            _SetMcuSystem 275E                          _InitSevenSegment 25A8  
                          __size_of_make8 005C                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                                ?_toupper 0001                          _conversionFormat 00CD  
                    _INTERRUPT_Initialize 2776            FLASH_WriteBlock@blockStartAddr 0027  
                       ??_TMR0_Initialize 001A                    ??_CheckFlashPrecentage 0078  
                          ___wmul@product 001C                                  _LATAbits 000F89  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                     _GroupStatusAndVersion 000000  
                       _GroupSynthesizers 000000       __size_of_INTERRUPT_InterruptManager 00D4  
              ??_TMR0_SetInterruptHandler 001A                                  i2u407_40 2300  
                                _PIR1bits 000F9E                                  _PIR2bits 000FA1  
                               _rxMsgData 00AA                       SWSPI_send_word@data 0021  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                               make8@data 0018                                  _TMR0_ISR 1B98  
                      _TEST_PLL_REGISTERS 0601                            ?_PLLInitialize 0001  
                       ??_PIN_MANAGER_IOC 0001        __size_of_SendUartSystemInitMessage 00E0  
                 SWSPI_send_word@dataSize 0025                                _ADCON0bits 000FC2  
                       ___wmul@multiplier 0018                            ?_SwSpi_Clk_Pin 0018  
                      __end_of_channelArr 0670                          ??_SwSpi_Data_Pin 0019  
                              ?_eval_poly 0084                        _PLL_INIT_REGISTERS 0635  
                       ??_SWSPI_send_word 0026                               _INTCON2bits 000FF1  
                               copy_data0 1D3C                                 copy_data1 1D5C  
                   ?_INTERRUPT_Initialize 0001                          __size_of_DacInit 006A  
                   EUSART1_Read@readValue 0019                  __end_of_FLASH_WriteBlock 1864  
                                _GroupDAC 000000                                  _GroupAdc 000000  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                                __Hrparam 0000                    ?_InitAdcApplicationMgr 0001  
                               memcpy@tmp 001E                               _readAddress 00F3  
                                __Lrparam 0000                         _ADC_GetConversion 2520  
                      __CFG_BOREN$SBORDIS 000000                           _ClearMcuRunTime 271E  
                       __CFG_P2BMX$PORTD2 000000                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0030                          __size_of___ftneg 0024  
                                ___altoft 1CAE                          __size_of___ftmul 00F6  
                        __size_of___llmod 0066                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0036  
                        __size_of___lwmod 0042                                  ___awtoft 23DC  
                                ___ftpack 19CA                          _numOfReadSamples 003E  
                                ___lltoft 1F82                         _FLASH_IsWriteDone 2750  
                     WriteUartMessage@idx 001E                                  ___lwtoft 2618  
                             ??_ZeroArray 0024                       ??_ADC_GetConversion 001A  
                                _exp$3291 009C                        ?_FLASH_IsWriteDone 0001  
                   SwSpi_Clk_Pin@cPinMode 0018                  __end_of_WriteUartMessage 24B8  
                 ??_SWSPI_Synth_send_bits 001B                    SwSpi_Data_Pin@cPinMode 0018  
                                __ptext10 2190                                  __ptext11 2742  
                                __ptext20 2550                                  __ptext12 2776  
                                __ptext21 2482                                  __ptext13 244C  
                                __ptext30 1864                                  __ptext22 2328  
                                __ptext14 26DE                                  __ptext31 1F26  
                                __ptext23 26AC                                  __ptext15 221E  
                                __ptext40 1E6A                                  __ptext32 23A0  
                                __ptext24 277A                                  __ptext16 1E04  
                                __ptext41 1EC8                                  __ptext33 2676  
                                __ptext25 0C52                                  __ptext17 1528  
                                __ptext50 1B08                                  __ptext42 08E8  
                                __ptext34 1FDE                                  __ptext26 2364  
                                __ptext18 21D8                                  __ptext51 1CAE  
                                __ptext43 0DD4                                  __ptext35 2036  
                                __ptext27 25A8                                  __ptext19 263C  
                                __ptext60 1F82                                  __ptext52 1608  
                                __ptext44 0F54                                  __ptext36 20E4  
                                __ptext28 2732                                  __ptext61 2618  
                                __ptext53 25CE                                  __ptext45 06F6  
                                __ptext37 213A                                  __ptext29 1D9A  
                                __ptext70 22E6                                  __ptext62 19CA  
                                __ptext54 1268                                  __ptext46 16E2  
                                __ptext38 271E                                  __ptext71 277E  
                                __ptext63 1076                                  __ptext55 22A4  
                                __ptext47 1446                                  __ptext39 191C  
                                __ptext72 2782                                  __ptext64 17A8  
                                __ptext56 0AA4                                  __ptext48 1A78  
                                __ptext73 2414                                  __ptext65 24EC  
                                __ptext57 25F4                                  __ptext49 1170  
                                __ptext74 257C                                  __ptext66 2750  
                                __ptext58 135E                                  __ptext67 2520  
                                __ptext59 23DC                                  __ptext69 1B98  
            SWSPI_Synth_send_bits@phrType 001C                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$3290 01B1                                  _pow$3289 01AE  
                     ??_FLASH_IsWriteDone 0018                          __size_of_toupper 0014  
                           __size_of_main 0056                                  _msgCount 00C9  
            _TMR0_DefaultInterruptHandler 000000                 __end_of_ADC_GetConversion 2550  
            __size_of_SWSPI_DAC_send_bits 0058                        SWSPI_send_word@idx 0027  
                             _groupsArray 00E2                           ??_PLLInitialize 002A  
                 __size_of_BlinkErrorLeds 005E                                  int$flags 0048  
               __end_of_FLASH_IsWriteDone 275E        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                           ??_SwSpi_Clk_Pin 0019  
                     _EUSART1_Receive_ISR 257C                  __end_of_SwSpi_Set_CE_Pin 23A0  
                       ?_FLASH_EraseBlock 0018               __end_of_InitRxMessageParams 2676  
                                exp@coeff 0670                                _MEMORY_ISR 2782  
                                log@coeff 068E                    SWSPI_send_word@phrType 0029  
                      ??_FLASH_EraseBlock 001C                                _INTCONbits 000FF2  
                             ??_eval_poly 008B                               _sampleArray 016E  
                             _sampleCount 00C4                                  memcpy@d1 0018  
                                memcpy@s1 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                  __end_of_FlashSampleWrite 1170  
                                intlevel2 0000                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 2262                          ___lwmod@dividend 0001  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 2732  
                              _RCSTA1bits 000FAB              __end_of_EUSART1_Transmit_ISR 244C  
                           ??_BlinkOkLeds 0018                          ??_ADC_Initialize 0018  
                       _TimerSamplingFlag 003C                             AdcConvert@idx 01C2  
                __end_of_InitSevenSegment 25CE                             _isReWriteDone 00C8  
                    SwSpi_Clk_Pin@phrType 0019                     SwSpi_Data_Pin@phrType 0019  
                 SwSpi_Set_CE_Pin@phrType 0019                    __size_of_EUSART1_Write 003C  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                          _GroupFlashMemory 000000  
                         ___lwmod@divisor 0003                           _TMR0_Initialize 24B8  
                         ___lwmod@counter 0005                                  toupper@c 0018  
                       __CFG_T3CMX$PORTC0 000000                                _AdcConvert 08E8  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 21D8  
                       __CFG_FOSC$INTIO67 000000                           _PIN_MANAGER_IOC 277E  
              __size_of_ADC_GetConversion 0030  
