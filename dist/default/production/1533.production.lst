

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 29 13:38:10 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text95,global,reloc=2,class=CODE,delta=1
   113                           	psect	text96,global,reloc=2,class=CODE,delta=1
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1
   115                           	psect	text98,global,reloc=2,class=CODE,delta=1
   116                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   117                           	psect	text100,global,reloc=2,class=CODE,delta=1
   118                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text102,global,reloc=2,class=CODE,delta=1
   120                           	psect	text103,global,reloc=2,class=CODE,delta=1
   121                           	psect	text104,global,reloc=2,class=CODE,delta=1
   122                           	psect	text105,global,reloc=2,class=CODE,delta=1
   123                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   124                           	psect	text106,global,reloc=2,class=CODE,delta=1
   125                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   126                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   127  0000                     
   128                           ; Version 1.45
   129                           ; Generated 16/11/2017 GMT
   130                           ; 
   131                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   132                           ; All rights reserved.
   133                           ; 
   134                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   135                           ; 
   136                           ; Redistribution and use in source and binary forms, with or without modification, are
   137                           ; permitted provided that the following conditions are met:
   138                           ; 
   139                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   140                           ;        conditions and the following disclaimer.
   141                           ; 
   142                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   143                           ;        of conditions and the following disclaimer in the documentation and/or other
   144                           ;        materials provided with the distribution.
   145                           ; 
   146                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   147                           ;        software without specific prior written permission.
   148                           ; 
   149                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   150                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   151                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   152                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   153                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   154                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   155                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   156                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   157                           ; 
   158                           ; 
   159                           ; Code-generator required, PIC18F45K22 Definitions
   160                           ; 
   161                           ; SFR Addresses
   162  0000                     
   163 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   164  0000                     
   165                           	psect	idataBANK1
   166  00481C                     __pidataBANK1:
   167                           	opt stack 0
   168                           
   169                           ;initializer for _groupsArray
   170  00481C  36                 	db	low _GroupRx
   171  00481D  29                 	db	high _GroupRx
   172  00481E  C0                 	db	low _GroupTx
   173  00481F  25                 	db	high _GroupTx
   174  004820  E4                 	db	low _GroupCommon
   175  004821  3A                 	db	high _GroupCommon
   176  004822  00                 	db	0
   177  004823  00                 	db	0
   178  004824  00                 	db	0
   179  004825  00                 	db	0
   180  004826  00                 	db	0
   181  004827  00                 	db	0
   182                           
   183                           	psect	mediumconst
   184  007748                     __pmediumconst:
   185                           	opt stack 0
   186  007748  00                 	db	0
   187  007749                     _TEST_PLL_REGISTERS:
   188                           	opt stack 0
   189  007749  041C               	dw	1052
   190  00774B  0001               	dw	1
   191  00774D  300B               	dw	12299
   192  00774F  0061               	dw	97
   193  007751  26BA               	dw	9914
   194  007753  00C0               	dw	192
   195  007755  FCC9               	dw	64713
   196  007757  1A19               	dw	6681
   197  007759  0428               	dw	1064
   198  00775B  102D               	dw	4141
   199  00775D  00E7               	dw	231
   200  00775F  1200               	dw	4608
   201  007761  6076               	dw	24694
   202  007763  3505               	dw	13573
   203  007765  0025               	dw	37
   204  007767  0080               	dw	128
   205  007769  8B84               	dw	35716
   206  00776B  3200               	dw	12800
   207  00776D  0003               	dw	3
   208  00776F  0000               	dw	0
   209  007771  0032               	dw	50
   210  007773  0008               	dw	8
   211  007775  AAA1               	dw	43681
   212  007777  01AA               	dw	426
   213  007779  0EDA               	dw	3802
   214  00777B  0003               	dw	3
   215  00777D                     __end_of_TEST_PLL_REGISTERS:
   216                           	opt stack 0
   217  00777D                     _PLL_INIT_REGISTERS:
   218                           	opt stack 0
   219  00777D  041C               	dw	1052
   220  00777F  0001               	dw	1
   221  007781  300B               	dw	12299
   222  007783  0061               	dw	97
   223  007785  323A               	dw	12858
   224  007787  00C0               	dw	192
   225  007789  BCC9               	dw	48329
   226  00778B  2221               	dw	8737
   227  00778D  0428               	dw	1064
   228  00778F  102D               	dw	4141
   229  007791  00E7               	dw	231
   230  007793  1200               	dw	4608
   231  007795  2076               	dw	8310
   232  007797  3501               	dw	13569
   233  007799  0025               	dw	37
   234  00779B  0080               	dw	128
   235  00779D  9B84               	dw	39812
   236  00779F  3400               	dw	13312
   237  0077A1  0003               	dw	3
   238  0077A3  0000               	dw	0
   239  0077A5  0012               	dw	18
   240  0077A7  0000               	dw	0
   241  0077A9  0001               	dw	1
   242  0077AB  0600               	dw	1536
   243  0077AD  0340               	dw	832
   244  0077AF  0020               	dw	32
   245  0077B1                     __end_of_PLL_INIT_REGISTERS:
   246                           	opt stack 0
   247  0077B1                     _dpowers:
   248                           	opt stack 0
   249  0077B1  0001               	dw	1
   250  0077B3  0000               	dw	0
   251  0077B5  000A               	dw	10
   252  0077B7  0000               	dw	0
   253  0077B9  0064               	dw	100
   254  0077BB  0000               	dw	0
   255  0077BD  03E8               	dw	1000
   256  0077BF  0000               	dw	0
   257  0077C1  2710               	dw	10000
   258  0077C3  0000               	dw	0
   259  0077C5  86A0               	dw	34464
   260  0077C7  0001               	dw	1
   261  0077C9  4240               	dw	16960
   262  0077CB  000F               	dw	15
   263  0077CD  9680               	dw	38528
   264  0077CF  0098               	dw	152
   265  0077D1  E100               	dw	57600
   266  0077D3  05F5               	dw	1525
   267  0077D5  CA00               	dw	51712
   268  0077D7  3B9A               	dw	15258
   269  0077D9                     __end_of_dpowers:
   270                           	opt stack 0
   271  0077D9                     __powers_:
   272                           	opt stack 0
   273  0077D9  00                 	db	0
   274  0077DA  80                 	db	128
   275  0077DB  3F                 	db	63
   276  0077DC  00                 	db	0
   277  0077DD  20                 	db	32
   278  0077DE  41                 	db	65
   279  0077DF  00                 	db	0
   280  0077E0  C8                 	db	200
   281  0077E1  42                 	db	66
   282  0077E2  00                 	db	0
   283  0077E3  7A                 	db	122
   284  0077E4  44                 	db	68
   285  0077E5  40                 	db	64
   286  0077E6  1C                 	db	28
   287  0077E7  46                 	db	70
   288  0077E8  50                 	db	80
   289  0077E9  C3                 	db	195
   290  0077EA  47                 	db	71
   291  0077EB  24                 	db	36
   292  0077EC  74                 	db	116
   293  0077ED  49                 	db	73
   294  0077EE  97                 	db	151
   295  0077EF  18                 	db	24
   296  0077F0  4B                 	db	75
   297  0077F1  BC                 	db	188
   298  0077F2  BE                 	db	190
   299  0077F3  4C                 	db	76
   300  0077F4  6B                 	db	107
   301  0077F5  6E                 	db	110
   302  0077F6  4E                 	db	78
   303  0077F7  03                 	db	3
   304  0077F8  15                 	db	21
   305  0077F9  50                 	db	80
   306  0077FA  79                 	db	121
   307  0077FB  AD                 	db	173
   308  0077FC  60                 	db	96
   309  0077FD  F3                 	db	243
   310  0077FE  49                 	db	73
   311  0077FF  71                 	db	113
   312  007800                     __end_of__powers_:
   313                           	opt stack 0
   314  007800                     __npowers_:
   315                           	opt stack 0
   316  007800  00                 	db	0
   317  007801  80                 	db	128
   318  007802  3F                 	db	63
   319  007803  CD                 	db	205
   320  007804  CC                 	db	204
   321  007805  3D                 	db	61
   322  007806  D7                 	db	215
   323  007807  23                 	db	35
   324  007808  3C                 	db	60
   325  007809  12                 	db	18
   326  00780A  83                 	db	131
   327  00780B  3A                 	db	58
   328  00780C  B7                 	db	183
   329  00780D  D1                 	db	209
   330  00780E  38                 	db	56
   331  00780F  C6                 	db	198
   332  007810  27                 	db	39
   333  007811  37                 	db	55
   334  007812  38                 	db	56
   335  007813  86                 	db	134
   336  007814  35                 	db	53
   337  007815  C0                 	db	192
   338  007816  D6                 	db	214
   339  007817  33                 	db	51
   340  007818  CC                 	db	204
   341  007819  2B                 	db	43
   342  00781A  32                 	db	50
   343  00781B  70                 	db	112
   344  00781C  89                 	db	137
   345  00781D  30                 	db	48
   346  00781E  E7                 	db	231
   347  00781F  DB                 	db	219
   348  007820  2E                 	db	46
   349  007821  E5                 	db	229
   350  007822  3C                 	db	60
   351  007823  1E                 	db	30
   352  007824  42                 	db	66
   353  007825  A2                 	db	162
   354  007826  0D                 	db	13
   355  007827                     __end_of__npowers_:
   356                           	opt stack 0
   357  007827                     _DAC_DEFAULT_INIT_VALUES:
   358                           	opt stack 0
   359  007827  2344               	dw	9028
   360  007829  6344               	dw	25412
   361  00782B  A344               	dw	41796
   362  00782D  E344               	dw	58180
   363  00782F                     __end_of_DAC_DEFAULT_INIT_VALUES:
   364                           	opt stack 0
   365  00782F                     _DAC_ADDRES:
   366                           	opt stack 0
   367  00782F  02                 	db	2
   368  007830  04                 	db	4
   369  007831  06                 	db	6
   370  007832  08                 	db	8
   371  007833                     __end_of_DAC_ADDRES:
   372                           	opt stack 0
   373  007833                     _channelArr:
   374                           	opt stack 0
   375  007833  04                 	db	4
   376  007834  06                 	db	6
   377  007835  05                 	db	5
   378  007836  07                 	db	7
   379  007837                     __end_of_channelArr:
   380                           	opt stack 0
   381  007837                     _SYSTEM_INFO_ADDRES:
   382                           	opt stack 0
   383  007837  00                 	db	0
   384  007838  01                 	db	1
   385  007839  02                 	db	2
   386  00783A                     __end_of_SYSTEM_INFO_ADDRES:
   387                           	opt stack 0
   388  00783A                     exp@coeff:
   389                           	opt stack 0
   390  00783A  00                 	db	0
   391  00783B  80                 	db	128
   392  00783C  3F                 	db	63
   393  00783D  72                 	db	114
   394  00783E  31                 	db	49
   395  00783F  3F                 	db	63
   396  007840  FE                 	db	254
   397  007841  75                 	db	117
   398  007842  3E                 	db	62
   399  007843  58                 	db	88
   400  007844  63                 	db	99
   401  007845  3D                 	db	61
   402  007846  95                 	db	149
   403  007847  1D                 	db	29
   404  007848  3C                 	db	60
   405  007849  C5                 	db	197
   406  00784A  AE                 	db	174
   407  00784B  3A                 	db	58
   408  00784C  79                 	db	121
   409  00784D  21                 	db	33
   410  00784E  39                 	db	57
   411  00784F  94                 	db	148
   412  007850  80                 	db	128
   413  007851  37                 	db	55
   414  007852  93                 	db	147
   415  007853  A7                 	db	167
   416  007854  35                 	db	53
   417  007855  56                 	db	86
   418  007856  15                 	db	21
   419  007857  34                 	db	52
   420  007858                     __end_ofexp@coeff:
   421                           	opt stack 0
   422  007858                     log@coeff:
   423                           	opt stack 0
   424  007858  00                 	db	0
   425  007859  00                 	db	0
   426  00785A  00                 	db	0
   427  00785B  00                 	db	0
   428  00785C  80                 	db	128
   429  00785D  3F                 	db	63
   430  00785E  F0                 	db	240
   431  00785F  FF                 	db	255
   432  007860  BE                 	db	190
   433  007861  E2                 	db	226
   434  007862  A9                 	db	169
   435  007863  3E                 	db	62
   436  007864  83                 	db	131
   437  007865  76                 	db	118
   438  007866  BE                 	db	190
   439  007867  AE                 	db	174
   440  007868  2B                 	db	43
   441  007869  3E                 	db	62
   442  00786A  3C                 	db	60
   443  00786B  C3                 	db	195
   444  00786C  BD                 	db	189
   445  00786D  D2                 	db	210
   446  00786E  13                 	db	19
   447  00786F  3D                 	db	61
   448  007870  78                 	db	120
   449  007871  D3                 	db	211
   450  007872  BB                 	db	187
   451  007873                     __end_oflog@coeff:
   452                           	opt stack 0
   453  007873                     STR_39:
   454                           
   455                           ; BSR set to: 1
   456  007873  24                 	db	36
   457  007874  52                 	db	82	;'R'
   458  007875  43                 	db	67	;'C'
   459  007876  50                 	db	80	;'P'
   460  007877  20                 	db	32
   461  007878  3C                 	db	60	;'<'
   462  007879  58                 	db	88	;'X'
   463  00787A  3E                 	db	62	;'>'
   464  00787B  3C                 	db	60	;'<'
   465  00787C  63                 	db	99	;'c'
   466  00787D  72                 	db	114	;'r'
   467  00787E  3E                 	db	62	;'>'
   468  00787F  20                 	db	32
   469  007880  20                 	db	32
   470  007881  20                 	db	32
   471  007882  20                 	db	32
   472  007883  20                 	db	32
   473  007884  53                 	db	83	;'S'
   474  007885  65                 	db	101	;'e'
   475  007886  74                 	db	116	;'t'
   476  007887  20                 	db	32
   477  007888  43                 	db	67	;'C'
   478  007889  6F                 	db	111	;'o'
   479  00788A  6D                 	db	109	;'m'
   480  00788B  70                 	db	112	;'p'
   481  00788C  72                 	db	114	;'r'
   482  00788D  65                 	db	101	;'e'
   483  00788E  73                 	db	115	;'s'
   484  00788F  73                 	db	115	;'s'
   485  007890  69                 	db	105	;'i'
   486  007891  6F                 	db	111	;'o'
   487  007892  6E                 	db	110	;'n'
   488  007893  20                 	db	32
   489  007894  6F                 	db	111	;'o'
   490  007895  70                 	db	112	;'p'
   491  007896  65                 	db	101	;'e'
   492  007897  72                 	db	114	;'r'
   493  007898  61                 	db	97	;'a'
   494  007899  74                 	db	116	;'t'
   495  00789A  69                 	db	105	;'i'
   496  00789B  6F                 	db	111	;'o'
   497  00789C  6E                 	db	110	;'n'
   498  00789D  20                 	db	32
   499  00789E  6D                 	db	109	;'m'
   500  00789F  6F                 	db	111	;'o'
   501  0078A0  64                 	db	100	;'d'
   502  0078A1  65                 	db	101	;'e'
   503  0078A2  20                 	db	32
   504  0078A3  61                 	db	97	;'a'
   505  0078A4  74                 	db	116	;'t'
   506  0078A5  20                 	db	32
   507  0078A6  52                 	db	82	;'R'
   508  0078A7  58                 	db	88	;'X'
   509  0078A8  20                 	db	32
   510  0078A9  73                 	db	115	;'s'
   511  0078AA  79                 	db	121	;'y'
   512  0078AB  73                 	db	115	;'s'
   513  0078AC  74                 	db	116	;'t'
   514  0078AD  65                 	db	101	;'e'
   515  0078AE  6D                 	db	109	;'m'
   516  0078AF  3A                 	db	58	;':'
   517  0078B0  20                 	db	32
   518  0078B1  41                 	db	65	;'A'
   519  0078B2  75                 	db	117	;'u'
   520  0078B3  74                 	db	116	;'t'
   521  0078B4  6F                 	db	111	;'o'
   522  0078B5  6D                 	db	109	;'m'
   523  0078B6  61                 	db	97	;'a'
   524  0078B7  74                 	db	116	;'t'
   525  0078B8  69                 	db	105	;'i'
   526  0078B9  63                 	db	99	;'c'
   527  0078BA  5B                 	db	91	;'['
   528  0078BB  31                 	db	49	;'1'
   529  0078BC  5D                 	db	93	;']'
   530  0078BD  20                 	db	32
   531  0078BE  4D                 	db	77	;'M'
   532  0078BF  61                 	db	97	;'a'
   533  0078C0  6E                 	db	110	;'n'
   534  0078C1  75                 	db	117	;'u'
   535  0078C2  61                 	db	97	;'a'
   536  0078C3  6C                 	db	108	;'l'
   537  0078C4  5B                 	db	91	;'['
   538  0078C5  30                 	db	48	;'0'
   539  0078C6  5D                 	db	93	;']'
   540  0078C7  20                 	db	32
   541  0078C8  5B                 	db	91	;'['
   542  0078C9  44                 	db	68	;'D'
   543  0078CA  65                 	db	101	;'e'
   544  0078CB  66                 	db	102	;'f'
   545  0078CC  61                 	db	97	;'a'
   546  0078CD  75                 	db	117	;'u'
   547  0078CE  6C                 	db	108	;'l'
   548  0078CF  74                 	db	116	;'t'
   549  0078D0  20                 	db	32
   550  0078D1  3D                 	db	61	;'='
   551  0078D2  20                 	db	32
   552  0078D3  30                 	db	48	;'0'
   553  0078D4  5D                 	db	93	;']'
   554  0078D5  0D                 	db	13
   555  0078D6  0A                 	db	10
   556  0078D7  00                 	db	0
   557  0078D8                     STR_38:
   558                           
   559                           ; BSR set to: 1
   560  0078D8  24                 	db	36
   561  0078D9  52                 	db	82	;'R'
   562  0078DA  43                 	db	67	;'C'
   563  0078DB  52                 	db	82	;'R'
   564  0078DC  20                 	db	32
   565  0078DD  3C                 	db	60	;'<'
   566  0078DE  58                 	db	88	;'X'
   567  0078DF  3E                 	db	62	;'>'
   568  0078E0  3C                 	db	60	;'<'
   569  0078E1  63                 	db	99	;'c'
   570  0078E2  72                 	db	114	;'r'
   571  0078E3  3E                 	db	62	;'>'
   572  0078E4  20                 	db	32
   573  0078E5  20                 	db	32
   574  0078E6  20                 	db	32
   575  0078E7  20                 	db	32
   576  0078E8  20                 	db	32
   577  0078E9  53                 	db	83	;'S'
   578  0078EA  65                 	db	101	;'e'
   579  0078EB  74                 	db	116	;'t'
   580  0078EC  20                 	db	32
   581  0078ED  43                 	db	67	;'C'
   582  0078EE  6F                 	db	111	;'o'
   583  0078EF  6D                 	db	109	;'m'
   584  0078F0  70                 	db	112	;'p'
   585  0078F1  72                 	db	114	;'r'
   586  0078F2  65                 	db	101	;'e'
   587  0078F3  73                 	db	115	;'s'
   588  0078F4  73                 	db	115	;'s'
   589  0078F5  69                 	db	105	;'i'
   590  0078F6  6F                 	db	111	;'o'
   591  0078F7  6E                 	db	110	;'n'
   592  0078F8  20                 	db	32
   593  0078F9  72                 	db	114	;'r'
   594  0078FA  61                 	db	97	;'a'
   595  0078FB  6E                 	db	110	;'n'
   596  0078FC  67                 	db	103	;'g'
   597  0078FD  65                 	db	101	;'e'
   598  0078FE  20                 	db	32
   599  0078FF  61                 	db	97	;'a'
   600  007900  74                 	db	116	;'t'
   601  007901  20                 	db	32
   602  007902  52                 	db	82	;'R'
   603  007903  58                 	db	88	;'X'
   604  007904  20                 	db	32
   605  007905  73                 	db	115	;'s'
   606  007906  79                 	db	121	;'y'
   607  007907  73                 	db	115	;'s'
   608  007908  74                 	db	116	;'t'
   609  007909  65                 	db	101	;'e'
   610  00790A  6D                 	db	109	;'m'
   611  00790B  2E                 	db	46
   612  00790C  20                 	db	32
   613  00790D  48                 	db	72	;'H'
   614  00790E  69                 	db	105	;'i'
   615  00790F  67                 	db	103	;'g'
   616  007910  68                 	db	104	;'h'
   617  007911  20                 	db	32
   618  007912  5B                 	db	91	;'['
   619  007913  31                 	db	49	;'1'
   620  007914  5D                 	db	93	;']'
   621  007915  20                 	db	32
   622  007916  4C                 	db	76	;'L'
   623  007917  6F                 	db	111	;'o'
   624  007918  77                 	db	119	;'w'
   625  007919  20                 	db	32
   626  00791A  5B                 	db	91	;'['
   627  00791B  30                 	db	48	;'0'
   628  00791C  5D                 	db	93	;']'
   629  00791D  20                 	db	32
   630  00791E  5B                 	db	91	;'['
   631  00791F  44                 	db	68	;'D'
   632  007920  65                 	db	101	;'e'
   633  007921  66                 	db	102	;'f'
   634  007922  61                 	db	97	;'a'
   635  007923  75                 	db	117	;'u'
   636  007924  6C                 	db	108	;'l'
   637  007925  74                 	db	116	;'t'
   638  007926  20                 	db	32
   639  007927  3D                 	db	61	;'='
   640  007928  20                 	db	32
   641  007929  30                 	db	48	;'0'
   642  00792A  5D                 	db	93	;']'
   643  00792B  0D                 	db	13
   644  00792C  0A                 	db	10
   645  00792D  00                 	db	0
   646  00792E                     STR_43:
   647                           
   648                           ; BSR set to: 1
   649  00792E  24                 	db	36
   650  00792F  53                 	db	83	;'S'
   651  007930  41                 	db	65	;'A'
   652  007931  20                 	db	32
   653  007932  3C                 	db	60	;'<'
   654  007933  58                 	db	88	;'X'
   655  007934  3E                 	db	62	;'>'
   656  007935  3C                 	db	60	;'<'
   657  007936  63                 	db	99	;'c'
   658  007937  72                 	db	114	;'r'
   659  007938  3E                 	db	62	;'>'
   660  007939  20                 	db	32
   661  00793A  20                 	db	32
   662  00793B  20                 	db	32
   663  00793C  20                 	db	32
   664  00793D  20                 	db	32
   665  00793E  53                 	db	83	;'S'
   666  00793F  65                 	db	101	;'e'
   667  007940  74                 	db	116	;'t'
   668  007941  20                 	db	32
   669  007942  55                 	db	85	;'U'
   670  007943  41                 	db	65	;'A'
   671  007944  52                 	db	82	;'R'
   672  007945  54                 	db	84	;'T'
   673  007946  20                 	db	32
   674  007947  61                 	db	97	;'a'
   675  007948  75                 	db	117	;'u'
   676  007949  74                 	db	116	;'t'
   677  00794A  6F                 	db	111	;'o'
   678  00794B  6D                 	db	109	;'m'
   679  00794C  61                 	db	97	;'a'
   680  00794D  74                 	db	116	;'t'
   681  00794E  69                 	db	105	;'i'
   682  00794F  63                 	db	99	;'c'
   683  007950  20                 	db	32
   684  007951  6F                 	db	111	;'o'
   685  007952  70                 	db	112	;'p'
   686  007953  65                 	db	101	;'e'
   687  007954  72                 	db	114	;'r'
   688  007955  61                 	db	97	;'a'
   689  007956  74                 	db	116	;'t'
   690  007957  69                 	db	105	;'i'
   691  007958  6F                 	db	111	;'o'
   692  007959  6E                 	db	110	;'n'
   693  00795A  3A                 	db	58	;':'
   694  00795B  20                 	db	32
   695  00795C  41                 	db	65	;'A'
   696  00795D  75                 	db	117	;'u'
   697  00795E  74                 	db	116	;'t'
   698  00795F  6F                 	db	111	;'o'
   699  007960  6D                 	db	109	;'m'
   700  007961  61                 	db	97	;'a'
   701  007962  74                 	db	116	;'t'
   702  007963  69                 	db	105	;'i'
   703  007964  63                 	db	99	;'c'
   704  007965  5B                 	db	91	;'['
   705  007966  31                 	db	49	;'1'
   706  007967  5D                 	db	93	;']'
   707  007968  20                 	db	32
   708  007969  4D                 	db	77	;'M'
   709  00796A  61                 	db	97	;'a'
   710  00796B  6E                 	db	110	;'n'
   711  00796C  75                 	db	117	;'u'
   712  00796D  61                 	db	97	;'a'
   713  00796E  6C                 	db	108	;'l'
   714  00796F  5B                 	db	91	;'['
   715  007970  30                 	db	48	;'0'
   716  007971  5D                 	db	93	;']'
   717  007972  20                 	db	32
   718  007973  5B                 	db	91	;'['
   719  007974  44                 	db	68	;'D'
   720  007975  65                 	db	101	;'e'
   721  007976  66                 	db	102	;'f'
   722  007977  61                 	db	97	;'a'
   723  007978  75                 	db	117	;'u'
   724  007979  6C                 	db	108	;'l'
   725  00797A  74                 	db	116	;'t'
   726  00797B  20                 	db	32
   727  00797C  3D                 	db	61	;'='
   728  00797D  20                 	db	32
   729  00797E  30                 	db	48	;'0'
   730  00797F  5D                 	db	93	;']'
   731  007980  0D                 	db	13
   732  007981  0A                 	db	10
   733  007982  00                 	db	0
   734  007983                     STR_32:
   735                           
   736                           ; BSR set to: 1
   737  007983  24                 	db	36
   738  007984  54                 	db	84	;'T'
   739  007985  58                 	db	88	;'X'
   740  007986  20                 	db	32
   741  007987  3C                 	db	60	;'<'
   742  007988  58                 	db	88	;'X'
   743  007989  3E                 	db	62	;'>'
   744  00798A  3C                 	db	60	;'<'
   745  00798B  63                 	db	99	;'c'
   746  00798C  72                 	db	114	;'r'
   747  00798D  3E                 	db	62	;'>'
   748  00798E  20                 	db	32
   749  00798F  20                 	db	32
   750  007990  20                 	db	32
   751  007991  20                 	db	32
   752  007992  20                 	db	32
   753  007993  20                 	db	32
   754  007994  54                 	db	84	;'T'
   755  007995  75                 	db	117	;'u'
   756  007996  72                 	db	114	;'r'
   757  007997  6E                 	db	110	;'n'
   758  007998  20                 	db	32
   759  007999  6F                 	db	111	;'o'
   760  00799A  6E                 	db	110	;'n'
   761  00799B  5B                 	db	91	;'['
   762  00799C  31                 	db	49	;'1'
   763  00799D  5D                 	db	93	;']'
   764  00799E  20                 	db	32
   765  00799F  2F                 	db	47
   766  0079A0  20                 	db	32
   767  0079A1  6F                 	db	111	;'o'
   768  0079A2  66                 	db	102	;'f'
   769  0079A3  66                 	db	102	;'f'
   770  0079A4  5B                 	db	91	;'['
   771  0079A5  30                 	db	48	;'0'
   772  0079A6  5D                 	db	93	;']'
   773  0079A7  20                 	db	32
   774  0079A8  74                 	db	116	;'t'
   775  0079A9  72                 	db	114	;'r'
   776  0079AA  61                 	db	97	;'a'
   777  0079AB  6E                 	db	110	;'n'
   778  0079AC  73                 	db	115	;'s'
   779  0079AD  6D                 	db	109	;'m'
   780  0079AE  69                 	db	105	;'i'
   781  0079AF  73                 	db	115	;'s'
   782  0079B0  73                 	db	115	;'s'
   783  0079B1  69                 	db	105	;'i'
   784  0079B2  6F                 	db	111	;'o'
   785  0079B3  6E                 	db	110	;'n'
   786  0079B4  20                 	db	32
   787  0079B5  61                 	db	97	;'a'
   788  0079B6  74                 	db	116	;'t'
   789  0079B7  20                 	db	32
   790  0079B8  54                 	db	84	;'T'
   791  0079B9  58                 	db	88	;'X'
   792  0079BA  20                 	db	32
   793  0079BB  73                 	db	115	;'s'
   794  0079BC  79                 	db	121	;'y'
   795  0079BD  73                 	db	115	;'s'
   796  0079BE  74                 	db	116	;'t'
   797  0079BF  65                 	db	101	;'e'
   798  0079C0  6D                 	db	109	;'m'
   799  0079C1  20                 	db	32
   800  0079C2  5B                 	db	91	;'['
   801  0079C3  44                 	db	68	;'D'
   802  0079C4  65                 	db	101	;'e'
   803  0079C5  66                 	db	102	;'f'
   804  0079C6  61                 	db	97	;'a'
   805  0079C7  75                 	db	117	;'u'
   806  0079C8  6C                 	db	108	;'l'
   807  0079C9  74                 	db	116	;'t'
   808  0079CA  20                 	db	32
   809  0079CB  3D                 	db	61	;'='
   810  0079CC  20                 	db	32
   811  0079CD  30                 	db	48	;'0'
   812  0079CE  5D                 	db	93	;']'
   813  0079CF  0D                 	db	13
   814  0079D0  0A                 	db	10
   815  0079D1  00                 	db	0
   816  0079D2                     STR_31:
   817                           
   818                           ; BSR set to: 1
   819  0079D2  24                 	db	36
   820  0079D3  54                 	db	84	;'T'
   821  0079D4  42                 	db	66	;'B'
   822  0079D5  20                 	db	32
   823  0079D6  3C                 	db	60	;'<'
   824  0079D7  58                 	db	88	;'X'
   825  0079D8  3E                 	db	62	;'>'
   826  0079D9  3C                 	db	60	;'<'
   827  0079DA  63                 	db	99	;'c'
   828  0079DB  72                 	db	114	;'r'
   829  0079DC  3E                 	db	62	;'>'
   830  0079DD  20                 	db	32
   831  0079DE  20                 	db	32
   832  0079DF  20                 	db	32
   833  0079E0  20                 	db	32
   834  0079E1  20                 	db	32
   835  0079E2  20                 	db	32
   836  0079E3  54                 	db	84	;'T'
   837  0079E4  75                 	db	117	;'u'
   838  0079E5  72                 	db	114	;'r'
   839  0079E6  6E                 	db	110	;'n'
   840  0079E7  20                 	db	32
   841  0079E8  6F                 	db	111	;'o'
   842  0079E9  6E                 	db	110	;'n'
   843  0079EA  5B                 	db	91	;'['
   844  0079EB  31                 	db	49	;'1'
   845  0079EC  5D                 	db	93	;']'
   846  0079ED  20                 	db	32
   847  0079EE  2F                 	db	47
   848  0079EF  20                 	db	32
   849  0079F0  6F                 	db	111	;'o'
   850  0079F1  66                 	db	102	;'f'
   851  0079F2  66                 	db	102	;'f'
   852  0079F3  5B                 	db	91	;'['
   853  0079F4  30                 	db	48	;'0'
   854  0079F5  5D                 	db	93	;']'
   855  0079F6  20                 	db	32
   856  0079F7  42                 	db	66	;'B'
   857  0079F8  49                 	db	73	;'I'
   858  0079F9  54                 	db	84	;'T'
   859  0079FA  20                 	db	32
   860  0079FB  6D                 	db	109	;'m'
   861  0079FC  6F                 	db	111	;'o'
   862  0079FD  64                 	db	100	;'d'
   863  0079FE  65                 	db	101	;'e'
   864  0079FF  20                 	db	32
   865  007A00  61                 	db	97	;'a'
   866  007A01  74                 	db	116	;'t'
   867  007A02  20                 	db	32
   868  007A03  54                 	db	84	;'T'
   869  007A04  58                 	db	88	;'X'
   870  007A05  20                 	db	32
   871  007A06  73                 	db	115	;'s'
   872  007A07  79                 	db	121	;'y'
   873  007A08  73                 	db	115	;'s'
   874  007A09  74                 	db	116	;'t'
   875  007A0A  65                 	db	101	;'e'
   876  007A0B  6D                 	db	109	;'m'
   877  007A0C  20                 	db	32
   878  007A0D  5B                 	db	91	;'['
   879  007A0E  44                 	db	68	;'D'
   880  007A0F  65                 	db	101	;'e'
   881  007A10  66                 	db	102	;'f'
   882  007A11  61                 	db	97	;'a'
   883  007A12  75                 	db	117	;'u'
   884  007A13  6C                 	db	108	;'l'
   885  007A14  74                 	db	116	;'t'
   886  007A15  20                 	db	32
   887  007A16  3D                 	db	61	;'='
   888  007A17  20                 	db	32
   889  007A18  30                 	db	48	;'0'
   890  007A19  5D                 	db	93	;']'
   891  007A1A  0D                 	db	13
   892  007A1B  0A                 	db	10
   893  007A1C  00                 	db	0
   894  007A1D                     STR_34:
   895                           
   896                           ; BSR set to: 1
   897  007A1D  24                 	db	36
   898  007A1E  52                 	db	82	;'R'
   899  007A1F  49                 	db	73	;'I'
   900  007A20  20                 	db	32
   901  007A21  3C                 	db	60	;'<'
   902  007A22  58                 	db	88	;'X'
   903  007A23  58                 	db	88	;'X'
   904  007A24  58                 	db	88	;'X'
   905  007A25  58                 	db	88	;'X'
   906  007A26  3E                 	db	62	;'>'
   907  007A27  3C                 	db	60	;'<'
   908  007A28  63                 	db	99	;'c'
   909  007A29  72                 	db	114	;'r'
   910  007A2A  3E                 	db	62	;'>'
   911  007A2B  20                 	db	32
   912  007A2C  20                 	db	32
   913  007A2D  20                 	db	32
   914  007A2E  49                 	db	73	;'I'
   915  007A2F  6E                 	db	110	;'n'
   916  007A30  69                 	db	105	;'i'
   917  007A31  74                 	db	116	;'t'
   918  007A32  20                 	db	32
   919  007A33  52                 	db	82	;'R'
   920  007A34  58                 	db	88	;'X'
   921  007A35  20                 	db	32
   922  007A36  73                 	db	115	;'s'
   923  007A37  79                 	db	121	;'y'
   924  007A38  73                 	db	115	;'s'
   925  007A39  74                 	db	116	;'t'
   926  007A3A  65                 	db	101	;'e'
   927  007A3B  6D                 	db	109	;'m'
   928  007A3C  20                 	db	32
   929  007A3D  61                 	db	97	;'a'
   930  007A3E  6E                 	db	110	;'n'
   931  007A3F  64                 	db	100	;'d'
   932  007A40  20                 	db	32
   933  007A41  73                 	db	115	;'s'
   934  007A42  65                 	db	101	;'e'
   935  007A43  74                 	db	116	;'t'
   936  007A44  20                 	db	32
   937  007A45  66                 	db	102	;'f'
   938  007A46  72                 	db	114	;'r'
   939  007A47  65                 	db	101	;'e'
   940  007A48  71                 	db	113	;'q'
   941  007A49  75                 	db	117	;'u'
   942  007A4A  65                 	db	101	;'e'
   943  007A4B  6E                 	db	110	;'n'
   944  007A4C  63                 	db	99	;'c'
   945  007A4D  79                 	db	121	;'y'
   946  007A4E  20                 	db	32
   947  007A4F  61                 	db	97	;'a'
   948  007A50  74                 	db	116	;'t'
   949  007A51  20                 	db	32
   950  007A52  58                 	db	88	;'X'
   951  007A53  58                 	db	88	;'X'
   952  007A54  58                 	db	88	;'X'
   953  007A55  58                 	db	88	;'X'
   954  007A56  20                 	db	32
   955  007A57  28                 	db	40
   956  007A58  30                 	db	48	;'0'
   957  007A59  2D                 	db	45
   958  007A5A  39                 	db	57	;'9'
   959  007A5B  39                 	db	57	;'9'
   960  007A5C  39                 	db	57	;'9'
   961  007A5D  39                 	db	57	;'9'
   962  007A5E  29                 	db	41
   963  007A5F  5B                 	db	91	;'['
   964  007A60  4D                 	db	77	;'M'
   965  007A61  48                 	db	72	;'H'
   966  007A62  7A                 	db	122	;'z'
   967  007A63  5D                 	db	93	;']'
   968  007A64  0D                 	db	13
   969  007A65  0A                 	db	10
   970  007A66  00                 	db	0
   971  007A67                     STR_46:
   972                           
   973                           ; BSR set to: 1
   974  007A67  24                 	db	36
   975  007A68  54                 	db	84	;'T'
   976  007A69  44                 	db	68	;'D'
   977  007A6A  20                 	db	32
   978  007A6B  3C                 	db	60	;'<'
   979  007A6C  44                 	db	68	;'D'
   980  007A6D  41                 	db	65	;'A'
   981  007A6E  43                 	db	67	;'C'
   982  007A6F  20                 	db	32
   983  007A70  4E                 	db	78	;'N'
   984  007A71  55                 	db	85	;'U'
   985  007A72  4D                 	db	77	;'M'
   986  007A73  3E                 	db	62	;'>'
   987  007A74  3C                 	db	60	;'<'
   988  007A75  44                 	db	68	;'D'
   989  007A76  41                 	db	65	;'A'
   990  007A77  43                 	db	67	;'C'
   991  007A78  20                 	db	32
   992  007A79  56                 	db	86	;'V'
   993  007A7A  41                 	db	65	;'A'
   994  007A7B  4C                 	db	76	;'L'
   995  007A7C  55                 	db	85	;'U'
   996  007A7D  45                 	db	69	;'E'
   997  007A7E  3E                 	db	62	;'>'
   998  007A7F  3C                 	db	60	;'<'
   999  007A80  63                 	db	99	;'c'
  1000  007A81  72                 	db	114	;'r'
  1001  007A82  3E                 	db	62	;'>'
  1002  007A83  20                 	db	32
  1003  007A84  20                 	db	32
  1004  007A85  20                 	db	32
  1005  007A86  20                 	db	32
  1006  007A87  20                 	db	32
  1007  007A88  20                 	db	32
  1008  007A89  20                 	db	32
  1009  007A8A  20                 	db	32
  1010  007A8B  20                 	db	32
  1011  007A8C  53                 	db	83	;'S'
  1012  007A8D  65                 	db	101	;'e'
  1013  007A8E  74                 	db	116	;'t'
  1014  007A8F  20                 	db	32
  1015  007A90  54                 	db	84	;'T'
  1016  007A91  58                 	db	88	;'X'
  1017  007A92  20                 	db	32
  1018  007A93  44                 	db	68	;'D'
  1019  007A94  41                 	db	65	;'A'
  1020  007A95  43                 	db	67	;'C'
  1021  007A96  20                 	db	32
  1022  007A97  3C                 	db	60	;'<'
  1023  007A98  30                 	db	48	;'0'
  1024  007A99  2D                 	db	45
  1025  007A9A  33                 	db	51	;'3'
  1026  007A9B  3E                 	db	62	;'>'
  1027  007A9C  20                 	db	32
  1028  007A9D  3C                 	db	60	;'<'
  1029  007A9E  30                 	db	48	;'0'
  1030  007A9F  2D                 	db	45
  1031  007AA0  56                 	db	86	;'V'
  1032  007AA1  72                 	db	114	;'r'
  1033  007AA2  65                 	db	101	;'e'
  1034  007AA3  66                 	db	102	;'f'
  1035  007AA4  5B                 	db	91	;'['
  1036  007AA5  34                 	db	52	;'4'
  1037  007AA6  20                 	db	32
  1038  007AA7  64                 	db	100	;'d'
  1039  007AA8  69                 	db	105	;'i'
  1040  007AA9  67                 	db	103	;'g'
  1041  007AAA  5D                 	db	93	;']'
  1042  007AAB  3E                 	db	62	;'>'
  1043  007AAC  20                 	db	32
  1044  007AAD  0D                 	db	13
  1045  007AAE  0A                 	db	10
  1046  007AAF  00                 	db	0
  1047  007AB0                     STR_28:
  1048                           
  1049                           ; BSR set to: 1
  1050  007AB0  24                 	db	36
  1051  007AB1  54                 	db	84	;'T'
  1052  007AB2  49                 	db	73	;'I'
  1053  007AB3  20                 	db	32
  1054  007AB4  3C                 	db	60	;'<'
  1055  007AB5  58                 	db	88	;'X'
  1056  007AB6  58                 	db	88	;'X'
  1057  007AB7  58                 	db	88	;'X'
  1058  007AB8  58                 	db	88	;'X'
  1059  007AB9  3E                 	db	62	;'>'
  1060  007ABA  3C                 	db	60	;'<'
  1061  007ABB  63                 	db	99	;'c'
  1062  007ABC  72                 	db	114	;'r'
  1063  007ABD  3E                 	db	62	;'>'
  1064  007ABE  20                 	db	32
  1065  007ABF  20                 	db	32
  1066  007AC0  20                 	db	32
  1067  007AC1  49                 	db	73	;'I'
  1068  007AC2  6E                 	db	110	;'n'
  1069  007AC3  69                 	db	105	;'i'
  1070  007AC4  74                 	db	116	;'t'
  1071  007AC5  20                 	db	32
  1072  007AC6  54                 	db	84	;'T'
  1073  007AC7  58                 	db	88	;'X'
  1074  007AC8  20                 	db	32
  1075  007AC9  73                 	db	115	;'s'
  1076  007ACA  79                 	db	121	;'y'
  1077  007ACB  73                 	db	115	;'s'
  1078  007ACC  74                 	db	116	;'t'
  1079  007ACD  65                 	db	101	;'e'
  1080  007ACE  6D                 	db	109	;'m'
  1081  007ACF  20                 	db	32
  1082  007AD0  61                 	db	97	;'a'
  1083  007AD1  6E                 	db	110	;'n'
  1084  007AD2  64                 	db	100	;'d'
  1085  007AD3  20                 	db	32
  1086  007AD4  73                 	db	115	;'s'
  1087  007AD5  65                 	db	101	;'e'
  1088  007AD6  74                 	db	116	;'t'
  1089  007AD7  20                 	db	32
  1090  007AD8  66                 	db	102	;'f'
  1091  007AD9  72                 	db	114	;'r'
  1092  007ADA  65                 	db	101	;'e'
  1093  007ADB  71                 	db	113	;'q'
  1094  007ADC  75                 	db	117	;'u'
  1095  007ADD  65                 	db	101	;'e'
  1096  007ADE  6E                 	db	110	;'n'
  1097  007ADF  63                 	db	99	;'c'
  1098  007AE0  79                 	db	121	;'y'
  1099  007AE1  20                 	db	32
  1100  007AE2  28                 	db	40
  1101  007AE3  30                 	db	48	;'0'
  1102  007AE4  2D                 	db	45
  1103  007AE5  39                 	db	57	;'9'
  1104  007AE6  39                 	db	57	;'9'
  1105  007AE7  39                 	db	57	;'9'
  1106  007AE8  39                 	db	57	;'9'
  1107  007AE9  29                 	db	41
  1108  007AEA  5B                 	db	91	;'['
  1109  007AEB  4D                 	db	77	;'M'
  1110  007AEC  48                 	db	72	;'H'
  1111  007AED  7A                 	db	122	;'z'
  1112  007AEE  5D                 	db	93	;']'
  1113  007AEF  0D                 	db	13
  1114  007AF0  0A                 	db	10
  1115  007AF1  00                 	db	0
  1116  007AF2                     STR_36:
  1117                           
  1118                           ; BSR set to: 1
  1119  007AF2  24                 	db	36
  1120  007AF3  52                 	db	82	;'R'
  1121  007AF4  42                 	db	66	;'B'
  1122  007AF5  20                 	db	32
  1123  007AF6  3C                 	db	60	;'<'
  1124  007AF7  58                 	db	88	;'X'
  1125  007AF8  3E                 	db	62	;'>'
  1126  007AF9  3C                 	db	60	;'<'
  1127  007AFA  63                 	db	99	;'c'
  1128  007AFB  72                 	db	114	;'r'
  1129  007AFC  3E                 	db	62	;'>'
  1130  007AFD  20                 	db	32
  1131  007AFE  20                 	db	32
  1132  007AFF  20                 	db	32
  1133  007B00  20                 	db	32
  1134  007B01  20                 	db	32
  1135  007B02  20                 	db	32
  1136  007B03  54                 	db	84	;'T'
  1137  007B04  75                 	db	117	;'u'
  1138  007B05  72                 	db	114	;'r'
  1139  007B06  6E                 	db	110	;'n'
  1140  007B07  20                 	db	32
  1141  007B08  6F                 	db	111	;'o'
  1142  007B09  6E                 	db	110	;'n'
  1143  007B0A  5B                 	db	91	;'['
  1144  007B0B  31                 	db	49	;'1'
  1145  007B0C  5D                 	db	93	;']'
  1146  007B0D  20                 	db	32
  1147  007B0E  2F                 	db	47
  1148  007B0F  20                 	db	32
  1149  007B10  6F                 	db	111	;'o'
  1150  007B11  66                 	db	102	;'f'
  1151  007B12  66                 	db	102	;'f'
  1152  007B13  5B                 	db	91	;'['
  1153  007B14  30                 	db	48	;'0'
  1154  007B15  5D                 	db	93	;']'
  1155  007B16  20                 	db	32
  1156  007B17  42                 	db	66	;'B'
  1157  007B18  49                 	db	73	;'I'
  1158  007B19  54                 	db	84	;'T'
  1159  007B1A  20                 	db	32
  1160  007B1B  6D                 	db	109	;'m'
  1161  007B1C  6F                 	db	111	;'o'
  1162  007B1D  64                 	db	100	;'d'
  1163  007B1E  65                 	db	101	;'e'
  1164  007B1F  20                 	db	32
  1165  007B20  61                 	db	97	;'a'
  1166  007B21  74                 	db	116	;'t'
  1167  007B22  20                 	db	32
  1168  007B23  52                 	db	82	;'R'
  1169  007B24  58                 	db	88	;'X'
  1170  007B25  20                 	db	32
  1171  007B26  73                 	db	115	;'s'
  1172  007B27  79                 	db	121	;'y'
  1173  007B28  73                 	db	115	;'s'
  1174  007B29  74                 	db	116	;'t'
  1175  007B2A  65                 	db	101	;'e'
  1176  007B2B  6D                 	db	109	;'m'
  1177  007B2C  2E                 	db	46
  1178  007B2D  0D                 	db	13
  1179  007B2E  0A                 	db	10
  1180  007B2F  00                 	db	0
  1181  007B30                     STR_29:
  1182                           
  1183                           ; BSR set to: 1
  1184  007B30  24                 	db	36
  1185  007B31  54                 	db	84	;'T'
  1186  007B32  46                 	db	70	;'F'
  1187  007B33  20                 	db	32
  1188  007B34  3C                 	db	60	;'<'
  1189  007B35  58                 	db	88	;'X'
  1190  007B36  58                 	db	88	;'X'
  1191  007B37  58                 	db	88	;'X'
  1192  007B38  58                 	db	88	;'X'
  1193  007B39  3E                 	db	62	;'>'
  1194  007B3A  3C                 	db	60	;'<'
  1195  007B3B  63                 	db	99	;'c'
  1196  007B3C  72                 	db	114	;'r'
  1197  007B3D  3E                 	db	62	;'>'
  1198  007B3E  20                 	db	32
  1199  007B3F  20                 	db	32
  1200  007B40  20                 	db	32
  1201  007B41  53                 	db	83	;'S'
  1202  007B42  65                 	db	101	;'e'
  1203  007B43  74                 	db	116	;'t'
  1204  007B44  20                 	db	32
  1205  007B45  54                 	db	84	;'T'
  1206  007B46  58                 	db	88	;'X'
  1207  007B47  20                 	db	32
  1208  007B48  73                 	db	115	;'s'
  1209  007B49  79                 	db	121	;'y'
  1210  007B4A  73                 	db	115	;'s'
  1211  007B4B  74                 	db	116	;'t'
  1212  007B4C  65                 	db	101	;'e'
  1213  007B4D  6D                 	db	109	;'m'
  1214  007B4E  20                 	db	32
  1215  007B4F  66                 	db	102	;'f'
  1216  007B50  72                 	db	114	;'r'
  1217  007B51  65                 	db	101	;'e'
  1218  007B52  71                 	db	113	;'q'
  1219  007B53  75                 	db	117	;'u'
  1220  007B54  65                 	db	101	;'e'
  1221  007B55  6E                 	db	110	;'n'
  1222  007B56  63                 	db	99	;'c'
  1223  007B57  79                 	db	121	;'y'
  1224  007B58  20                 	db	32
  1225  007B59  61                 	db	97	;'a'
  1226  007B5A  74                 	db	116	;'t'
  1227  007B5B  20                 	db	32
  1228  007B5C  28                 	db	40
  1229  007B5D  30                 	db	48	;'0'
  1230  007B5E  2D                 	db	45
  1231  007B5F  39                 	db	57	;'9'
  1232  007B60  39                 	db	57	;'9'
  1233  007B61  39                 	db	57	;'9'
  1234  007B62  39                 	db	57	;'9'
  1235  007B63  29                 	db	41
  1236  007B64  5B                 	db	91	;'['
  1237  007B65  4D                 	db	77	;'M'
  1238  007B66  48                 	db	72	;'H'
  1239  007B67  7A                 	db	122	;'z'
  1240  007B68  5D                 	db	93	;']'
  1241  007B69  2E                 	db	46
  1242  007B6A  0D                 	db	13
  1243  007B6B  0A                 	db	10
  1244  007B6C  00                 	db	0
  1245  007B6D                     STR_37:
  1246                           
  1247                           ; BSR set to: 1
  1248  007B6D  24                 	db	36
  1249  007B6E  52                 	db	82	;'R'
  1250  007B6F  58                 	db	88	;'X'
  1251  007B70  20                 	db	32
  1252  007B71  3C                 	db	60	;'<'
  1253  007B72  58                 	db	88	;'X'
  1254  007B73  3E                 	db	62	;'>'
  1255  007B74  3C                 	db	60	;'<'
  1256  007B75  63                 	db	99	;'c'
  1257  007B76  72                 	db	114	;'r'
  1258  007B77  3E                 	db	62	;'>'
  1259  007B78  20                 	db	32
  1260  007B79  20                 	db	32
  1261  007B7A  20                 	db	32
  1262  007B7B  20                 	db	32
  1263  007B7C  20                 	db	32
  1264  007B7D  20                 	db	32
  1265  007B7E  54                 	db	84	;'T'
  1266  007B7F  75                 	db	117	;'u'
  1267  007B80  72                 	db	114	;'r'
  1268  007B81  6E                 	db	110	;'n'
  1269  007B82  20                 	db	32
  1270  007B83  6F                 	db	111	;'o'
  1271  007B84  6E                 	db	110	;'n'
  1272  007B85  5B                 	db	91	;'['
  1273  007B86  31                 	db	49	;'1'
  1274  007B87  5D                 	db	93	;']'
  1275  007B88  20                 	db	32
  1276  007B89  2F                 	db	47
  1277  007B8A  20                 	db	32
  1278  007B8B  6F                 	db	111	;'o'
  1279  007B8C  66                 	db	102	;'f'
  1280  007B8D  66                 	db	102	;'f'
  1281  007B8E  5B                 	db	91	;'['
  1282  007B8F  30                 	db	48	;'0'
  1283  007B90  5D                 	db	93	;']'
  1284  007B91  20                 	db	32
  1285  007B92  72                 	db	114	;'r'
  1286  007B93  65                 	db	101	;'e'
  1287  007B94  63                 	db	99	;'c'
  1288  007B95  65                 	db	101	;'e'
  1289  007B96  69                 	db	105	;'i'
  1290  007B97  76                 	db	118	;'v'
  1291  007B98  65                 	db	101	;'e'
  1292  007B99  20                 	db	32
  1293  007B9A  61                 	db	97	;'a'
  1294  007B9B  74                 	db	116	;'t'
  1295  007B9C  20                 	db	32
  1296  007B9D  52                 	db	82	;'R'
  1297  007B9E  58                 	db	88	;'X'
  1298  007B9F  20                 	db	32
  1299  007BA0  73                 	db	115	;'s'
  1300  007BA1  79                 	db	121	;'y'
  1301  007BA2  73                 	db	115	;'s'
  1302  007BA3  74                 	db	116	;'t'
  1303  007BA4  65                 	db	101	;'e'
  1304  007BA5  6D                 	db	109	;'m'
  1305  007BA6  2E                 	db	46
  1306  007BA7  0D                 	db	13
  1307  007BA8  0A                 	db	10
  1308  007BA9  00                 	db	0
  1309  007BAA                     STR_56:
  1310                           
  1311                           ; BSR set to: 1
  1312  007BAA  52                 	db	82	;'R'
  1313  007BAB  58                 	db	88	;'X'
  1314  007BAC  20                 	db	32
  1315  007BAD  53                 	db	83	;'S'
  1316  007BAE  59                 	db	89	;'Y'
  1317  007BAF  4E                 	db	78	;'N'
  1318  007BB0  54                 	db	84	;'T'
  1319  007BB1  48                 	db	72	;'H'
  1320  007BB2  20                 	db	32
  1321  007BB3  28                 	db	40
  1322  007BB4  50                 	db	80	;'P'
  1323  007BB5  4C                 	db	76	;'L'
  1324  007BB6  4C                 	db	76	;'L'
  1325  007BB7  29                 	db	41
  1326  007BB8  20                 	db	32
  1327  007BB9  4C                 	db	76	;'L'
  1328  007BBA  6F                 	db	111	;'o'
  1329  007BBB  63                 	db	99	;'c'
  1330  007BBC  6B                 	db	107	;'k'
  1331  007BBD  20                 	db	32
  1332  007BBE  69                 	db	105	;'i'
  1333  007BBF  6E                 	db	110	;'n'
  1334  007BC0  64                 	db	100	;'d'
  1335  007BC1  69                 	db	105	;'i'
  1336  007BC2  63                 	db	99	;'c'
  1337  007BC3  61                 	db	97	;'a'
  1338  007BC4  74                 	db	116	;'t'
  1339  007BC5  69                 	db	105	;'i'
  1340  007BC6  6F                 	db	111	;'o'
  1341  007BC7  6E                 	db	110	;'n'
  1342  007BC8  20                 	db	32
  1343  007BC9  30                 	db	48	;'0'
  1344  007BCA  3A                 	db	58	;':'
  1345  007BCB  20                 	db	32
  1346  007BCC  6E                 	db	110	;'n'
  1347  007BCD  6F                 	db	111	;'o'
  1348  007BCE  74                 	db	116	;'t'
  1349  007BCF  20                 	db	32
  1350  007BD0  6C                 	db	108	;'l'
  1351  007BD1  6F                 	db	111	;'o'
  1352  007BD2  63                 	db	99	;'c'
  1353  007BD3  6B                 	db	107	;'k'
  1354  007BD4  65                 	db	101	;'e'
  1355  007BD5  64                 	db	100	;'d'
  1356  007BD6  20                 	db	32
  1357  007BD7  31                 	db	49	;'1'
  1358  007BD8  3A                 	db	58	;':'
  1359  007BD9  20                 	db	32
  1360  007BDA  6C                 	db	108	;'l'
  1361  007BDB  6F                 	db	111	;'o'
  1362  007BDC  63                 	db	99	;'c'
  1363  007BDD  6B                 	db	107	;'k'
  1364  007BDE  65                 	db	101	;'e'
  1365  007BDF  64                 	db	100	;'d'
  1366  007BE0  25                 	db	37
  1367  007BE1  64                 	db	100	;'d'
  1368  007BE2  0A                 	db	10
  1369  007BE3  0D                 	db	13
  1370  007BE4  00                 	db	0
  1371  007BE5                     STR_42:
  1372                           
  1373                           ; BSR set to: 1
  1374  007BE5  24                 	db	36
  1375  007BE6  53                 	db	83	;'S'
  1376  007BE7  55                 	db	85	;'U'
  1377  007BE8  20                 	db	32
  1378  007BE9  3C                 	db	60	;'<'
  1379  007BEA  58                 	db	88	;'X'
  1380  007BEB  58                 	db	88	;'X'
  1381  007BEC  3E                 	db	62	;'>'
  1382  007BED  3C                 	db	60	;'<'
  1383  007BEE  63                 	db	99	;'c'
  1384  007BEF  72                 	db	114	;'r'
  1385  007BF0  3E                 	db	62	;'>'
  1386  007BF1  20                 	db	32
  1387  007BF2  20                 	db	32
  1388  007BF3  20                 	db	32
  1389  007BF4  20                 	db	32
  1390  007BF5  53                 	db	83	;'S'
  1391  007BF6  65                 	db	101	;'e'
  1392  007BF7  74                 	db	116	;'t'
  1393  007BF8  20                 	db	32
  1394  007BF9  55                 	db	85	;'U'
  1395  007BFA  41                 	db	65	;'A'
  1396  007BFB  52                 	db	82	;'R'
  1397  007BFC  54                 	db	84	;'T'
  1398  007BFD  20                 	db	32
  1399  007BFE  72                 	db	114	;'r'
  1400  007BFF  65                 	db	101	;'e'
  1401  007C00  66                 	db	102	;'f'
  1402  007C01  72                 	db	114	;'r'
  1403  007C02  65                 	db	101	;'e'
  1404  007C03  73                 	db	115	;'s'
  1405  007C04  68                 	db	104	;'h'
  1406  007C05  20                 	db	32
  1407  007C06  72                 	db	114	;'r'
  1408  007C07  61                 	db	97	;'a'
  1409  007C08  74                 	db	116	;'t'
  1410  007C09  65                 	db	101	;'e'
  1411  007C0A  20                 	db	32
  1412  007C0B  28                 	db	40
  1413  007C0C  31                 	db	49	;'1'
  1414  007C0D  2D                 	db	45
  1415  007C0E  32                 	db	50	;'2'
  1416  007C0F  30                 	db	48	;'0'
  1417  007C10  29                 	db	41
  1418  007C11  5B                 	db	91	;'['
  1419  007C12  48                 	db	72	;'H'
  1420  007C13  7A                 	db	122	;'z'
  1421  007C14  5D                 	db	93	;']'
  1422  007C15  2E                 	db	46
  1423  007C16  0D                 	db	13
  1424  007C17  0A                 	db	10
  1425  007C18  00                 	db	0
  1426  007C19                     STR_49:
  1427                           
  1428                           ; BSR set to: 1
  1429  007C19  24                 	db	36
  1430  007C1A  53                 	db	83	;'S'
  1431  007C1B  56                 	db	86	;'V'
  1432  007C1C  20                 	db	32
  1433  007C1D  3C                 	db	60	;'<'
  1434  007C1E  63                 	db	99	;'c'
  1435  007C1F  72                 	db	114	;'r'
  1436  007C20  3E                 	db	62	;'>'
  1437  007C21  20                 	db	32
  1438  007C22  20                 	db	32
  1439  007C23  20                 	db	32
  1440  007C24  20                 	db	32
  1441  007C25  20                 	db	32
  1442  007C26  20                 	db	32
  1443  007C27  20                 	db	32
  1444  007C28  20                 	db	32
  1445  007C29  20                 	db	32
  1446  007C2A  53                 	db	83	;'S'
  1447  007C2B  61                 	db	97	;'a'
  1448  007C2C  76                 	db	118	;'v'
  1449  007C2D  65                 	db	101	;'e'
  1450  007C2E  20                 	db	32
  1451  007C2F  53                 	db	83	;'S'
  1452  007C30  79                 	db	121	;'y'
  1453  007C31  73                 	db	115	;'s'
  1454  007C32  74                 	db	116	;'t'
  1455  007C33  65                 	db	101	;'e'
  1456  007C34  6D                 	db	109	;'m'
  1457  007C35  20                 	db	32
  1458  007C36  73                 	db	115	;'s'
  1459  007C37  74                 	db	116	;'t'
  1460  007C38  61                 	db	97	;'a'
  1461  007C39  74                 	db	116	;'t'
  1462  007C3A  75                 	db	117	;'u'
  1463  007C3B  73                 	db	115	;'s'
  1464  007C3C  20                 	db	32
  1465  007C3D  54                 	db	84	;'T'
  1466  007C3E  6F                 	db	111	;'o'
  1467  007C3F  20                 	db	32
  1468  007C40  45                 	db	69	;'E'
  1469  007C41  45                 	db	69	;'E'
  1470  007C42  50                 	db	80	;'P'
  1471  007C43  52                 	db	82	;'R'
  1472  007C44  4F                 	db	79	;'O'
  1473  007C45  4D                 	db	77	;'M'
  1474  007C46  20                 	db	32
  1475  007C47  0D                 	db	13
  1476  007C48  0A                 	db	10
  1477  007C49  00                 	db	0
  1478  007C4A                     STR_41:
  1479                           
  1480                           ; BSR set to: 1
  1481  007C4A  24                 	db	36
  1482  007C4B  53                 	db	83	;'S'
  1483  007C4C  48                 	db	72	;'H'
  1484  007C4D  20                 	db	32
  1485  007C4E  3C                 	db	60	;'<'
  1486  007C4F  63                 	db	99	;'c'
  1487  007C50  72                 	db	114	;'r'
  1488  007C51  3E                 	db	62	;'>'
  1489  007C52  20                 	db	32
  1490  007C53  20                 	db	32
  1491  007C54  20                 	db	32
  1492  007C55  20                 	db	32
  1493  007C56  20                 	db	32
  1494  007C57  20                 	db	32
  1495  007C58  20                 	db	32
  1496  007C59  20                 	db	32
  1497  007C5A  20                 	db	32
  1498  007C5B  50                 	db	80	;'P'
  1499  007C5C  72                 	db	114	;'r'
  1500  007C5D  69                 	db	105	;'i'
  1501  007C5E  6E                 	db	110	;'n'
  1502  007C5F  74                 	db	116	;'t'
  1503  007C60  20                 	db	32
  1504  007C61  73                 	db	115	;'s'
  1505  007C62  79                 	db	121	;'y'
  1506  007C63  73                 	db	115	;'s'
  1507  007C64  74                 	db	116	;'t'
  1508  007C65  65                 	db	101	;'e'
  1509  007C66  6D                 	db	109	;'m'
  1510  007C67  20                 	db	32
  1511  007C68  68                 	db	104	;'h'
  1512  007C69  65                 	db	101	;'e'
  1513  007C6A  6C                 	db	108	;'l'
  1514  007C6B  70                 	db	112	;'p'
  1515  007C6C  20                 	db	32
  1516  007C6D  6D                 	db	109	;'m'
  1517  007C6E  65                 	db	101	;'e'
  1518  007C6F  73                 	db	115	;'s'
  1519  007C70  73                 	db	115	;'s'
  1520  007C71  61                 	db	97	;'a'
  1521  007C72  67                 	db	103	;'g'
  1522  007C73  65                 	db	101	;'e'
  1523  007C74  2E                 	db	46
  1524  007C75  0D                 	db	13
  1525  007C76  0A                 	db	10
  1526  007C77  00                 	db	0
  1527  007C78                     STR_30:
  1528                           
  1529                           ; BSR set to: 1
  1530  007C78  24                 	db	36
  1531  007C79  54                 	db	84	;'T'
  1532  007C7A  51                 	db	81	;'Q'
  1533  007C7B  20                 	db	32
  1534  007C7C  3C                 	db	60	;'<'
  1535  007C7D  63                 	db	99	;'c'
  1536  007C7E  72                 	db	114	;'r'
  1537  007C7F  3E                 	db	62	;'>'
  1538  007C80  20                 	db	32
  1539  007C81  20                 	db	32
  1540  007C82  20                 	db	32
  1541  007C83  20                 	db	32
  1542  007C84  20                 	db	32
  1543  007C85  20                 	db	32
  1544  007C86  20                 	db	32
  1545  007C87  20                 	db	32
  1546  007C88  20                 	db	32
  1547  007C89  47                 	db	71	;'G'
  1548  007C8A  65                 	db	101	;'e'
  1549  007C8B  74                 	db	116	;'t'
  1550  007C8C  20                 	db	32
  1551  007C8D  73                 	db	115	;'s'
  1552  007C8E  74                 	db	116	;'t'
  1553  007C8F  61                 	db	97	;'a'
  1554  007C90  74                 	db	116	;'t'
  1555  007C91  75                 	db	117	;'u'
  1556  007C92  73                 	db	115	;'s'
  1557  007C93  20                 	db	32
  1558  007C94  66                 	db	102	;'f'
  1559  007C95  72                 	db	114	;'r'
  1560  007C96  6F                 	db	111	;'o'
  1561  007C97  6D                 	db	109	;'m'
  1562  007C98  20                 	db	32
  1563  007C99  54                 	db	84	;'T'
  1564  007C9A  58                 	db	88	;'X'
  1565  007C9B  20                 	db	32
  1566  007C9C  73                 	db	115	;'s'
  1567  007C9D  79                 	db	121	;'y'
  1568  007C9E  73                 	db	115	;'s'
  1569  007C9F  74                 	db	116	;'t'
  1570  007CA0  65                 	db	101	;'e'
  1571  007CA1  6D                 	db	109	;'m'
  1572  007CA2  2E                 	db	46
  1573  007CA3  0D                 	db	13
  1574  007CA4  0A                 	db	10
  1575  007CA5  00                 	db	0
  1576  007CA6                     STR_35:
  1577                           
  1578                           ; BSR set to: 1
  1579  007CA6  24                 	db	36
  1580  007CA7  52                 	db	82	;'R'
  1581  007CA8  51                 	db	81	;'Q'
  1582  007CA9  20                 	db	32
  1583  007CAA  3C                 	db	60	;'<'
  1584  007CAB  63                 	db	99	;'c'
  1585  007CAC  72                 	db	114	;'r'
  1586  007CAD  3E                 	db	62	;'>'
  1587  007CAE  20                 	db	32
  1588  007CAF  20                 	db	32
  1589  007CB0  20                 	db	32
  1590  007CB1  20                 	db	32
  1591  007CB2  20                 	db	32
  1592  007CB3  20                 	db	32
  1593  007CB4  20                 	db	32
  1594  007CB5  20                 	db	32
  1595  007CB6  20                 	db	32
  1596  007CB7  47                 	db	71	;'G'
  1597  007CB8  65                 	db	101	;'e'
  1598  007CB9  74                 	db	116	;'t'
  1599  007CBA  20                 	db	32
  1600  007CBB  73                 	db	115	;'s'
  1601  007CBC  74                 	db	116	;'t'
  1602  007CBD  61                 	db	97	;'a'
  1603  007CBE  74                 	db	116	;'t'
  1604  007CBF  75                 	db	117	;'u'
  1605  007CC0  73                 	db	115	;'s'
  1606  007CC1  20                 	db	32
  1607  007CC2  66                 	db	102	;'f'
  1608  007CC3  72                 	db	114	;'r'
  1609  007CC4  6F                 	db	111	;'o'
  1610  007CC5  6D                 	db	109	;'m'
  1611  007CC6  20                 	db	32
  1612  007CC7  52                 	db	82	;'R'
  1613  007CC8  58                 	db	88	;'X'
  1614  007CC9  20                 	db	32
  1615  007CCA  73                 	db	115	;'s'
  1616  007CCB  79                 	db	121	;'y'
  1617  007CCC  73                 	db	115	;'s'
  1618  007CCD  74                 	db	116	;'t'
  1619  007CCE  65                 	db	101	;'e'
  1620  007CCF  6D                 	db	109	;'m'
  1621  007CD0  0D                 	db	13
  1622  007CD1  0A                 	db	10
  1623  007CD2  00                 	db	0
  1624  007CD3                     STR_47:
  1625                           
  1626                           ; BSR set to: 1
  1627  007CD3  24                 	db	36
  1628  007CD4  53                 	db	83	;'S'
  1629  007CD5  51                 	db	81	;'Q'
  1630  007CD6  20                 	db	32
  1631  007CD7  3C                 	db	60	;'<'
  1632  007CD8  63                 	db	99	;'c'
  1633  007CD9  72                 	db	114	;'r'
  1634  007CDA  3E                 	db	62	;'>'
  1635  007CDB  20                 	db	32
  1636  007CDC  20                 	db	32
  1637  007CDD  20                 	db	32
  1638  007CDE  20                 	db	32
  1639  007CDF  20                 	db	32
  1640  007CE0  20                 	db	32
  1641  007CE1  20                 	db	32
  1642  007CE2  20                 	db	32
  1643  007CE3  20                 	db	32
  1644  007CE4  52                 	db	82	;'R'
  1645  007CE5  65                 	db	101	;'e'
  1646  007CE6  61                 	db	97	;'a'
  1647  007CE7  64                 	db	100	;'d'
  1648  007CE8  20                 	db	32
  1649  007CE9  53                 	db	83	;'S'
  1650  007CEA  79                 	db	121	;'y'
  1651  007CEB  73                 	db	115	;'s'
  1652  007CEC  74                 	db	116	;'t'
  1653  007CED  65                 	db	101	;'e'
  1654  007CEE  6D                 	db	109	;'m'
  1655  007CEF  20                 	db	32
  1656  007CF0  53                 	db	83	;'S'
  1657  007CF1  74                 	db	116	;'t'
  1658  007CF2  61                 	db	97	;'a'
  1659  007CF3  74                 	db	116	;'t'
  1660  007CF4  75                 	db	117	;'u'
  1661  007CF5  73                 	db	115	;'s'
  1662  007CF6  20                 	db	32
  1663  007CF7  0D                 	db	13
  1664  007CF8  0A                 	db	10
  1665  007CF9  00                 	db	0
  1666  007CFA                     STR_44:
  1667                           
  1668                           ; BSR set to: 1
  1669  007CFA  24                 	db	36
  1670  007CFB  53                 	db	83	;'S'
  1671  007CFC  51                 	db	81	;'Q'
  1672  007CFD  20                 	db	32
  1673  007CFE  3C                 	db	60	;'<'
  1674  007CFF  58                 	db	88	;'X'
  1675  007D00  3E                 	db	62	;'>'
  1676  007D01  3C                 	db	60	;'<'
  1677  007D02  63                 	db	99	;'c'
  1678  007D03  72                 	db	114	;'r'
  1679  007D04  3E                 	db	62	;'>'
  1680  007D05  20                 	db	32
  1681  007D06  20                 	db	32
  1682  007D07  20                 	db	32
  1683  007D08  20                 	db	32
  1684  007D09  20                 	db	32
  1685  007D0A  20                 	db	32
  1686  007D0B  47                 	db	71	;'G'
  1687  007D0C  65                 	db	101	;'e'
  1688  007D0D  74                 	db	116	;'t'
  1689  007D0E  20                 	db	32
  1690  007D0F  73                 	db	115	;'s'
  1691  007D10  79                 	db	121	;'y'
  1692  007D11  73                 	db	115	;'s'
  1693  007D12  74                 	db	116	;'t'
  1694  007D13  65                 	db	101	;'e'
  1695  007D14  6D                 	db	109	;'m'
  1696  007D15  20                 	db	32
  1697  007D16  73                 	db	115	;'s'
  1698  007D17  74                 	db	116	;'t'
  1699  007D18  61                 	db	97	;'a'
  1700  007D19  74                 	db	116	;'t'
  1701  007D1A  75                 	db	117	;'u'
  1702  007D1B  73                 	db	115	;'s'
  1703  007D1C  2E                 	db	46
  1704  007D1D  0D                 	db	13
  1705  007D1E  0A                 	db	10
  1706  007D1F  00                 	db	0
  1707  007D20                     STR_45:
  1708                           
  1709                           ; BSR set to: 1
  1710  007D20  24                 	db	36
  1711  007D21  53                 	db	83	;'S'
  1712  007D22  4C                 	db	76	;'L'
  1713  007D23  20                 	db	32
  1714  007D24  3C                 	db	60	;'<'
  1715  007D25  63                 	db	99	;'c'
  1716  007D26  72                 	db	114	;'r'
  1717  007D27  3E                 	db	62	;'>'
  1718  007D28  20                 	db	32
  1719  007D29  20                 	db	32
  1720  007D2A  20                 	db	32
  1721  007D2B  20                 	db	32
  1722  007D2C  20                 	db	32
  1723  007D2D  20                 	db	32
  1724  007D2E  20                 	db	32
  1725  007D2F  20                 	db	32
  1726  007D30  20                 	db	32
  1727  007D31  54                 	db	84	;'T'
  1728  007D32  65                 	db	101	;'e'
  1729  007D33  73                 	db	115	;'s'
  1730  007D34  74                 	db	116	;'t'
  1731  007D35  20                 	db	32
  1732  007D36  73                 	db	115	;'s'
  1733  007D37  79                 	db	121	;'y'
  1734  007D38  73                 	db	115	;'s'
  1735  007D39  74                 	db	116	;'t'
  1736  007D3A  65                 	db	101	;'e'
  1737  007D3B  6D                 	db	109	;'m'
  1738  007D3C  20                 	db	32
  1739  007D3D  4C                 	db	76	;'L'
  1740  007D3E  45                 	db	69	;'E'
  1741  007D3F  44                 	db	68	;'D'
  1742  007D40  73                 	db	115	;'s'
  1743  007D41  2E                 	db	46
  1744  007D42  0D                 	db	13
  1745  007D43  0A                 	db	10
  1746  007D44  00                 	db	0
  1747  007D45                     STR_65:
  1748                           
  1749                           ; BSR set to: 1
  1750  007D45  54                 	db	84	;'T'
  1751  007D46  58                 	db	88	;'X'
  1752  007D47  20                 	db	32
  1753  007D48  53                 	db	83	;'S'
  1754  007D49  59                 	db	89	;'Y'
  1755  007D4A  4E                 	db	78	;'N'
  1756  007D4B  54                 	db	84	;'T'
  1757  007D4C  48                 	db	72	;'H'
  1758  007D4D  20                 	db	32
  1759  007D4E  28                 	db	40
  1760  007D4F  50                 	db	80	;'P'
  1761  007D50  4C                 	db	76	;'L'
  1762  007D51  4C                 	db	76	;'L'
  1763  007D52  29                 	db	41
  1764  007D53  20                 	db	32
  1765  007D54  4C                 	db	76	;'L'
  1766  007D55  6F                 	db	111	;'o'
  1767  007D56  63                 	db	99	;'c'
  1768  007D57  6B                 	db	107	;'k'
  1769  007D58  20                 	db	32
  1770  007D59  69                 	db	105	;'i'
  1771  007D5A  6E                 	db	110	;'n'
  1772  007D5B  64                 	db	100	;'d'
  1773  007D5C  69                 	db	105	;'i'
  1774  007D5D  63                 	db	99	;'c'
  1775  007D5E  61                 	db	97	;'a'
  1776  007D5F  74                 	db	116	;'t'
  1777  007D60  69                 	db	105	;'i'
  1778  007D61  6F                 	db	111	;'o'
  1779  007D62  6E                 	db	110	;'n'
  1780  007D63  20                 	db	32
  1781  007D64  25                 	db	37
  1782  007D65  64                 	db	100	;'d'
  1783  007D66  0A                 	db	10
  1784  007D67  0D                 	db	13
  1785  007D68  00                 	db	0
  1786  007D69                     STR_58:
  1787                           
  1788                           ; BSR set to: 1
  1789  007D69  49                 	db	73	;'I'
  1790  007D6A  6E                 	db	110	;'n'
  1791  007D6B  70                 	db	112	;'p'
  1792  007D6C  75                 	db	117	;'u'
  1793  007D6D  74                 	db	116	;'t'
  1794  007D6E  20                 	db	32
  1795  007D6F  70                 	db	112	;'p'
  1796  007D70  6F                 	db	111	;'o'
  1797  007D71  77                 	db	119	;'w'
  1798  007D72  65                 	db	101	;'e'
  1799  007D73  72                 	db	114	;'r'
  1800  007D74  20                 	db	32
  1801  007D75  73                 	db	115	;'s'
  1802  007D76  74                 	db	116	;'t'
  1803  007D77  61                 	db	97	;'a'
  1804  007D78  74                 	db	116	;'t'
  1805  007D79  75                 	db	117	;'u'
  1806  007D7A  73                 	db	115	;'s'
  1807  007D7B  20                 	db	32
  1808  007D7C  30                 	db	48	;'0'
  1809  007D7D  3A                 	db	58	;':'
  1810  007D7E  20                 	db	32
  1811  007D7F  4F                 	db	79	;'O'
  1812  007D80  46                 	db	70	;'F'
  1813  007D81  46                 	db	70	;'F'
  1814  007D82  20                 	db	32
  1815  007D83  31                 	db	49	;'1'
  1816  007D84  3A                 	db	58	;':'
  1817  007D85  20                 	db	32
  1818  007D86  4F                 	db	79	;'O'
  1819  007D87  4E                 	db	78	;'N'
  1820  007D88  25                 	db	37
  1821  007D89  64                 	db	100	;'d'
  1822  007D8A  0A                 	db	10
  1823  007D8B  0D                 	db	13
  1824  007D8C  00                 	db	0
  1825  007D8D                     STR_48:
  1826                           
  1827                           ; BSR set to: 1
  1828  007D8D  24                 	db	36
  1829  007D8E  53                 	db	83	;'S'
  1830  007D8F  54                 	db	84	;'T'
  1831  007D90  20                 	db	32
  1832  007D91  3C                 	db	60	;'<'
  1833  007D92  63                 	db	99	;'c'
  1834  007D93  72                 	db	114	;'r'
  1835  007D94  3E                 	db	62	;'>'
  1836  007D95  20                 	db	32
  1837  007D96  20                 	db	32
  1838  007D97  20                 	db	32
  1839  007D98  20                 	db	32
  1840  007D99  20                 	db	32
  1841  007D9A  20                 	db	32
  1842  007D9B  20                 	db	32
  1843  007D9C  20                 	db	32
  1844  007D9D  20                 	db	32
  1845  007D9E  53                 	db	83	;'S'
  1846  007D9F  65                 	db	101	;'e'
  1847  007DA0  74                 	db	116	;'t'
  1848  007DA1  20                 	db	32
  1849  007DA2  55                 	db	85	;'U'
  1850  007DA3  6E                 	db	110	;'n'
  1851  007DA4  69                 	db	105	;'i'
  1852  007DA5  74                 	db	116	;'t'
  1853  007DA6  20                 	db	32
  1854  007DA7  54                 	db	84	;'T'
  1855  007DA8  79                 	db	121	;'y'
  1856  007DA9  70                 	db	112	;'p'
  1857  007DAA  65                 	db	101	;'e'
  1858  007DAB  20                 	db	32
  1859  007DAC  0D                 	db	13
  1860  007DAD  0A                 	db	10
  1861  007DAE  00                 	db	0
  1862  007DAF                     STR_6:
  1863                           
  1864                           ; BSR set to: 1
  1865  007DAF  52                 	db	82	;'R'
  1866  007DB0  58                 	db	88	;'X'
  1867  007DB1  20                 	db	32
  1868  007DB2  53                 	db	83	;'S'
  1869  007DB3  41                 	db	65	;'A'
  1870  007DB4  4D                 	db	77	;'M'
  1871  007DB5  50                 	db	80	;'P'
  1872  007DB6  4C                 	db	76	;'L'
  1873  007DB7  45                 	db	69	;'E'
  1874  007DB8  20                 	db	32
  1875  007DB9  43                 	db	67	;'C'
  1876  007DBA  48                 	db	72	;'H'
  1877  007DBB  41                 	db	65	;'A'
  1878  007DBC  4E                 	db	78	;'N'
  1879  007DBD  4E                 	db	78	;'N'
  1880  007DBE  45                 	db	69	;'E'
  1881  007DBF  4C                 	db	76	;'L'
  1882  007DC0  20                 	db	32
  1883  007DC1  52                 	db	82	;'R'
  1884  007DC2  58                 	db	88	;'X'
  1885  007DC3  2D                 	db	45
  1886  007DC4  41                 	db	65	;'A'
  1887  007DC5  44                 	db	68	;'D'
  1888  007DC6  43                 	db	67	;'C'
  1889  007DC7  5F                 	db	95	;'_'
  1890  007DC8  56                 	db	86	;'V'
  1891  007DC9  47                 	db	71	;'G'
  1892  007DCA  5F                 	db	95	;'_'
  1893  007DCB  4D                 	db	77	;'M'
  1894  007DCC  4F                 	db	79	;'O'
  1895  007DCD  4E                 	db	78	;'N'
  1896  007DCE  0A                 	db	10
  1897  007DCF  0D                 	db	13
  1898  007DD0  00                 	db	0
  1899  007DD1                     STR_2:
  1900                           
  1901                           ; BSR set to: 1
  1902  007DD1  54                 	db	84	;'T'
  1903  007DD2  58                 	db	88	;'X'
  1904  007DD3  20                 	db	32
  1905  007DD4  53                 	db	83	;'S'
  1906  007DD5  41                 	db	65	;'A'
  1907  007DD6  4D                 	db	77	;'M'
  1908  007DD7  50                 	db	80	;'P'
  1909  007DD8  4C                 	db	76	;'L'
  1910  007DD9  45                 	db	69	;'E'
  1911  007DDA  20                 	db	32
  1912  007DDB  43                 	db	67	;'C'
  1913  007DDC  48                 	db	72	;'H'
  1914  007DDD  41                 	db	65	;'A'
  1915  007DDE  4E                 	db	78	;'N'
  1916  007DDF  4E                 	db	78	;'N'
  1917  007DE0  45                 	db	69	;'E'
  1918  007DE1  4C                 	db	76	;'L'
  1919  007DE2  3A                 	db	58	;':'
  1920  007DE3  20                 	db	32
  1921  007DE4  54                 	db	84	;'T'
  1922  007DE5  58                 	db	88	;'X'
  1923  007DE6  2D                 	db	45
  1924  007DE7  41                 	db	65	;'A'
  1925  007DE8  44                 	db	68	;'D'
  1926  007DE9  43                 	db	67	;'C'
  1927  007DEA  5F                 	db	95	;'_'
  1928  007DEB  52                 	db	82	;'R'
  1929  007DEC  52                 	db	82	;'R'
  1930  007DED  45                 	db	69	;'E'
  1931  007DEE  56                 	db	86	;'V'
  1932  007DEF  0A                 	db	10
  1933  007DF0  0D                 	db	13
  1934  007DF1  00                 	db	0
  1935  007DF2                     STR_5:
  1936                           
  1937                           ; BSR set to: 1
  1938  007DF2  52                 	db	82	;'R'
  1939  007DF3  58                 	db	88	;'X'
  1940  007DF4  20                 	db	32
  1941  007DF5  53                 	db	83	;'S'
  1942  007DF6  41                 	db	65	;'A'
  1943  007DF7  4D                 	db	77	;'M'
  1944  007DF8  50                 	db	80	;'P'
  1945  007DF9  4C                 	db	76	;'L'
  1946  007DFA  45                 	db	69	;'E'
  1947  007DFB  20                 	db	32
  1948  007DFC  43                 	db	67	;'C'
  1949  007DFD  48                 	db	72	;'H'
  1950  007DFE  41                 	db	65	;'A'
  1951  007DFF  4E                 	db	78	;'N'
  1952  007E00  4E                 	db	78	;'N'
  1953  007E01  45                 	db	69	;'E'
  1954  007E02  4C                 	db	76	;'L'
  1955  007E03  20                 	db	32
  1956  007E04  52                 	db	82	;'R'
  1957  007E05  58                 	db	88	;'X'
  1958  007E06  2D                 	db	45
  1959  007E07  41                 	db	65	;'A'
  1960  007E08  44                 	db	68	;'D'
  1961  007E09  43                 	db	67	;'C'
  1962  007E0A  5F                 	db	95	;'_'
  1963  007E0B  46                 	db	70	;'F'
  1964  007E0C  46                 	db	70	;'F'
  1965  007E0D  57                 	db	87	;'W'
  1966  007E0E  52                 	db	82	;'R'
  1967  007E0F  0A                 	db	10
  1968  007E10  0D                 	db	13
  1969  007E11  00                 	db	0
  1970  007E12                     STR_18:
  1971                           
  1972                           ; BSR set to: 1
  1973  007E12  2A                 	db	42
  1974  007E13  2A                 	db	42
  1975  007E14  2A                 	db	42
  1976  007E15  2A                 	db	42
  1977  007E16  2A                 	db	42
  1978  007E17  2A                 	db	42
  1979  007E18  2A                 	db	42
  1980  007E19  2A                 	db	42
  1981  007E1A  2A                 	db	42
  1982  007E1B  2A                 	db	42
  1983  007E1C  2A                 	db	42
  1984  007E1D  2A                 	db	42
  1985  007E1E  2A                 	db	42
  1986  007E1F  2A                 	db	42
  1987  007E20  2A                 	db	42
  1988  007E21  2A                 	db	42
  1989  007E22  2A                 	db	42
  1990  007E23  2A                 	db	42
  1991  007E24  2A                 	db	42
  1992  007E25  2A                 	db	42
  1993  007E26  2A                 	db	42
  1994  007E27  2A                 	db	42
  1995  007E28  2A                 	db	42
  1996  007E29  2A                 	db	42
  1997  007E2A  2A                 	db	42
  1998  007E2B  2A                 	db	42
  1999  007E2C  2A                 	db	42
  2000  007E2D  20                 	db	32
  2001  007E2E  0A                 	db	10
  2002  007E2F  0D                 	db	13
  2003  007E30  00                 	db	0
  2004  007E31                     STR_40:
  2005                           
  2006                           ; BSR set to: 1
  2007  007E31  0A                 	db	10
  2008  007E32  0D                 	db	13
  2009  007E33  3C                 	db	60	;'<'
  2010  007E34  43                 	db	67	;'C'
  2011  007E35  6F                 	db	111	;'o'
  2012  007E36  6D                 	db	109	;'m'
  2013  007E37  6D                 	db	109	;'m'
  2014  007E38  6F                 	db	111	;'o'
  2015  007E39  6E                 	db	110	;'n'
  2016  007E3A  20                 	db	32
  2017  007E3B  73                 	db	115	;'s'
  2018  007E3C  79                 	db	121	;'y'
  2019  007E3D  73                 	db	115	;'s'
  2020  007E3E  74                 	db	116	;'t'
  2021  007E3F  65                 	db	101	;'e'
  2022  007E40  6D                 	db	109	;'m'
  2023  007E41  20                 	db	32
  2024  007E42  63                 	db	99	;'c'
  2025  007E43  6F                 	db	111	;'o'
  2026  007E44  6D                 	db	109	;'m'
  2027  007E45  6D                 	db	109	;'m'
  2028  007E46  61                 	db	97	;'a'
  2029  007E47  6E                 	db	110	;'n'
  2030  007E48  64                 	db	100	;'d'
  2031  007E49  73                 	db	115	;'s'
  2032  007E4A  3E                 	db	62	;'>'
  2033  007E4B  0A                 	db	10
  2034  007E4C  0D                 	db	13
  2035  007E4D  00                 	db	0
  2036  007E4E                     STR_3:
  2037                           
  2038                           ; BSR set to: 1
  2039  007E4E  54                 	db	84	;'T'
  2040  007E4F  58                 	db	88	;'X'
  2041  007E50  20                 	db	32
  2042  007E51  53                 	db	83	;'S'
  2043  007E52  41                 	db	65	;'A'
  2044  007E53  4D                 	db	77	;'M'
  2045  007E54  50                 	db	80	;'P'
  2046  007E55  4C                 	db	76	;'L'
  2047  007E56  45                 	db	69	;'E'
  2048  007E57  20                 	db	32
  2049  007E58  43                 	db	67	;'C'
  2050  007E59  48                 	db	72	;'H'
  2051  007E5A  41                 	db	65	;'A'
  2052  007E5B  4E                 	db	78	;'N'
  2053  007E5C  4E                 	db	78	;'N'
  2054  007E5D  45                 	db	69	;'E'
  2055  007E5E  4C                 	db	76	;'L'
  2056  007E5F  20                 	db	32
  2057  007E60  41                 	db	65	;'A'
  2058  007E61  44                 	db	68	;'D'
  2059  007E62  43                 	db	67	;'C'
  2060  007E63  5F                 	db	95	;'_'
  2061  007E64  54                 	db	84	;'T'
  2062  007E65  45                 	db	69	;'E'
  2063  007E66  4D                 	db	77	;'M'
  2064  007E67  50                 	db	80	;'P'
  2065  007E68  0A                 	db	10
  2066  007E69  0D                 	db	13
  2067  007E6A  00                 	db	0
  2068  007E6B                     STR_33:
  2069                           
  2070                           ; BSR set to: 1
  2071  007E6B  0A                 	db	10
  2072  007E6C  0D                 	db	13
  2073  007E6D  3C                 	db	60	;'<'
  2074  007E6E  52                 	db	82	;'R'
  2075  007E6F  58                 	db	88	;'X'
  2076  007E70  20                 	db	32
  2077  007E71  73                 	db	115	;'s'
  2078  007E72  79                 	db	121	;'y'
  2079  007E73  73                 	db	115	;'s'
  2080  007E74  74                 	db	116	;'t'
  2081  007E75  65                 	db	101	;'e'
  2082  007E76  6D                 	db	109	;'m'
  2083  007E77  20                 	db	32
  2084  007E78  63                 	db	99	;'c'
  2085  007E79  6F                 	db	111	;'o'
  2086  007E7A  6D                 	db	109	;'m'
  2087  007E7B  6D                 	db	109	;'m'
  2088  007E7C  61                 	db	97	;'a'
  2089  007E7D  6E                 	db	110	;'n'
  2090  007E7E  64                 	db	100	;'d'
  2091  007E7F  73                 	db	115	;'s'
  2092  007E80  3E                 	db	62	;'>'
  2093  007E81  0A                 	db	10
  2094  007E82  0D                 	db	13
  2095  007E83  00                 	db	0
  2096  007E84                     STR_57:
  2097                           
  2098                           ; BSR set to: 1
  2099  007E84  44                 	db	68	;'D'
  2100  007E85  65                 	db	101	;'e'
  2101  007E86  76                 	db	118	;'v'
  2102  007E87  69                 	db	105	;'i'
  2103  007E88  63                 	db	99	;'c'
  2104  007E89  65                 	db	101	;'e'
  2105  007E8A  20                 	db	32
  2106  007E8B  54                 	db	84	;'T'
  2107  007E8C  65                 	db	101	;'e'
  2108  007E8D  6D                 	db	109	;'m'
  2109  007E8E  70                 	db	112	;'p'
  2110  007E8F  65                 	db	101	;'e'
  2111  007E90  72                 	db	114	;'r'
  2112  007E91  61                 	db	97	;'a'
  2113  007E92  74                 	db	116	;'t'
  2114  007E93  75                 	db	117	;'u'
  2115  007E94  72                 	db	114	;'r'
  2116  007E95  65                 	db	101	;'e'
  2117  007E96  20                 	db	32
  2118  007E97  25                 	db	37
  2119  007E98  66                 	db	102	;'f'
  2120  007E99  0A                 	db	10
  2121  007E9A  0D                 	db	13
  2122  007E9B  00                 	db	0
  2123  007E9C                     STR_59:
  2124                           
  2125                           ; BSR set to: 1
  2126  007E9C  52                 	db	82	;'R'
  2127  007E9D  58                 	db	88	;'X'
  2128  007E9E  20                 	db	32
  2129  007E9F  46                 	db	70	;'F'
  2130  007EA0  72                 	db	114	;'r'
  2131  007EA1  65                 	db	101	;'e'
  2132  007EA2  71                 	db	113	;'q'
  2133  007EA3  75                 	db	117	;'u'
  2134  007EA4  65                 	db	101	;'e'
  2135  007EA5  6E                 	db	110	;'n'
  2136  007EA6  63                 	db	99	;'c'
  2137  007EA7  79                 	db	121	;'y'
  2138  007EA8  20                 	db	32
  2139  007EA9  69                 	db	105	;'i'
  2140  007EAA  6E                 	db	110	;'n'
  2141  007EAB  20                 	db	32
  2142  007EAC  4D                 	db	77	;'M'
  2143  007EAD  48                 	db	72	;'H'
  2144  007EAE  7A                 	db	122	;'z'
  2145  007EAF  25                 	db	37
  2146  007EB0  66                 	db	102	;'f'
  2147  007EB1  0A                 	db	10
  2148  007EB2  0D                 	db	13
  2149  007EB3  00                 	db	0
  2150  007EB4                     STR_68:
  2151                           
  2152                           ; BSR set to: 1
  2153  007EB4  54                 	db	84	;'T'
  2154  007EB5  58                 	db	88	;'X'
  2155  007EB6  20                 	db	32
  2156  007EB7  46                 	db	70	;'F'
  2157  007EB8  72                 	db	114	;'r'
  2158  007EB9  65                 	db	101	;'e'
  2159  007EBA  71                 	db	113	;'q'
  2160  007EBB  75                 	db	117	;'u'
  2161  007EBC  65                 	db	101	;'e'
  2162  007EBD  6E                 	db	110	;'n'
  2163  007EBE  63                 	db	99	;'c'
  2164  007EBF  79                 	db	121	;'y'
  2165  007EC0  20                 	db	32
  2166  007EC1  69                 	db	105	;'i'
  2167  007EC2  6E                 	db	110	;'n'
  2168  007EC3  20                 	db	32
  2169  007EC4  4D                 	db	77	;'M'
  2170  007EC5  48                 	db	72	;'H'
  2171  007EC6  7A                 	db	122	;'z'
  2172  007EC7  25                 	db	37
  2173  007EC8  66                 	db	102	;'f'
  2174  007EC9  0A                 	db	10
  2175  007ECA  0D                 	db	13
  2176  007ECB  00                 	db	0
  2177  007ECC                     STR_27:
  2178                           
  2179                           ; BSR set to: 1
  2180  007ECC  3C                 	db	60	;'<'
  2181  007ECD  54                 	db	84	;'T'
  2182  007ECE  58                 	db	88	;'X'
  2183  007ECF  20                 	db	32
  2184  007ED0  73                 	db	115	;'s'
  2185  007ED1  79                 	db	121	;'y'
  2186  007ED2  73                 	db	115	;'s'
  2187  007ED3  74                 	db	116	;'t'
  2188  007ED4  65                 	db	101	;'e'
  2189  007ED5  6D                 	db	109	;'m'
  2190  007ED6  20                 	db	32
  2191  007ED7  63                 	db	99	;'c'
  2192  007ED8  6F                 	db	111	;'o'
  2193  007ED9  6D                 	db	109	;'m'
  2194  007EDA  6D                 	db	109	;'m'
  2195  007EDB  61                 	db	97	;'a'
  2196  007EDC  6E                 	db	110	;'n'
  2197  007EDD  64                 	db	100	;'d'
  2198  007EDE  73                 	db	115	;'s'
  2199  007EDF  3E                 	db	62	;'>'
  2200  007EE0  0A                 	db	10
  2201  007EE1  0D                 	db	13
  2202  007EE2  00                 	db	0
  2203  007EE3                     STR_61:
  2204                           
  2205                           ; BSR set to: 1
  2206  007EE3  4C                 	db	76	;'L'
  2207  007EE4  69                 	db	105	;'i'
  2208  007EE5  67                 	db	103	;'g'
  2209  007EE6  68                 	db	104	;'h'
  2210  007EE7  74                 	db	116	;'t'
  2211  007EE8  20                 	db	32
  2212  007EE9  30                 	db	48	;'0'
  2213  007EEA  3A                 	db	58	;':'
  2214  007EEB  20                 	db	32
  2215  007EEC  4F                 	db	79	;'O'
  2216  007EED  46                 	db	70	;'F'
  2217  007EEE  46                 	db	70	;'F'
  2218  007EEF  20                 	db	32
  2219  007EF0  31                 	db	49	;'1'
  2220  007EF1  3A                 	db	58	;':'
  2221  007EF2  20                 	db	32
  2222  007EF3  4F                 	db	79	;'O'
  2223  007EF4  4E                 	db	78	;'N'
  2224  007EF5  25                 	db	37
  2225  007EF6  64                 	db	100	;'d'
  2226  007EF7  0A                 	db	10
  2227  007EF8  0D                 	db	13
  2228  007EF9  00                 	db	0
  2229  007EFA                     STR_55:
  2230                           
  2231                           ; BSR set to: 1
  2232  007EFA  2A                 	db	42
  2233  007EFB  2A                 	db	42
  2234  007EFC  2A                 	db	42
  2235  007EFD  2A                 	db	42
  2236  007EFE  2A                 	db	42
  2237  007EFF  2A                 	db	42
  2238  007F00  2A                 	db	42
  2239  007F01  2A                 	db	42
  2240  007F02  2A                 	db	42
  2241  007F03  2A                 	db	42
  2242  007F04  2A                 	db	42
  2243  007F05  2A                 	db	42
  2244  007F06  2A                 	db	42
  2245  007F07  2A                 	db	42
  2246  007F08  2A                 	db	42
  2247  007F09  2A                 	db	42
  2248  007F0A  2A                 	db	42
  2249  007F0B  2A                 	db	42
  2250  007F0C  2A                 	db	42
  2251  007F0D  0A                 	db	10
  2252  007F0E  0D                 	db	13
  2253  007F0F  00                 	db	0
  2254  007F10                     STR_52:
  2255                           
  2256                           ; BSR set to: 1
  2257  007F10  53                 	db	83	;'S'
  2258  007F11  4F                 	db	79	;'O'
  2259  007F12  46                 	db	70	;'F'
  2260  007F13  54                 	db	84	;'T'
  2261  007F14  57                 	db	87	;'W'
  2262  007F15  41                 	db	65	;'A'
  2263  007F16  52                 	db	82	;'R'
  2264  007F17  45                 	db	69	;'E'
  2265  007F18  20                 	db	32
  2266  007F19  56                 	db	86	;'V'
  2267  007F1A  45                 	db	69	;'E'
  2268  007F1B  52                 	db	82	;'R'
  2269  007F1C  53                 	db	83	;'S'
  2270  007F1D  49                 	db	73	;'I'
  2271  007F1E  4F                 	db	79	;'O'
  2272  007F1F  4E                 	db	78	;'N'
  2273  007F20  20                 	db	32
  2274  007F21  25                 	db	37
  2275  007F22  73                 	db	115	;'s'
  2276  007F23  0A                 	db	10
  2277  007F24  0D                 	db	13
  2278  007F25  00                 	db	0
  2279  007F26                     STR_19:
  2280                           
  2281                           ; BSR set to: 1
  2282  007F26  46                 	db	70	;'F'
  2283  007F27  41                 	db	65	;'A'
  2284  007F28  53                 	db	83	;'S'
  2285  007F29  54                 	db	84	;'T'
  2286  007F2A  20                 	db	32
  2287  007F2B  4C                 	db	76	;'L'
  2288  007F2C  49                 	db	73	;'I'
  2289  007F2D  4E                 	db	78	;'N'
  2290  007F2E  4B                 	db	75	;'K'
  2291  007F2F  20                 	db	32
  2292  007F30  53                 	db	83	;'S'
  2293  007F31  59                 	db	89	;'Y'
  2294  007F32  53                 	db	83	;'S'
  2295  007F33  54                 	db	84	;'T'
  2296  007F34  45                 	db	69	;'E'
  2297  007F35  4D                 	db	77	;'M'
  2298  007F36  20                 	db	32
  2299  007F37  0A                 	db	10
  2300  007F38  0D                 	db	13
  2301  007F39  00                 	db	0
  2302  007F3A                     STR_24:
  2303                           
  2304                           ; BSR set to: 1
  2305  007F3A  43                 	db	67	;'C'
  2306  007F3B  6F                 	db	111	;'o'
  2307  007F3C  6D                 	db	109	;'m'
  2308  007F3D  70                 	db	112	;'p'
  2309  007F3E  69                 	db	105	;'i'
  2310  007F3F  6C                 	db	108	;'l'
  2311  007F40  65                 	db	101	;'e'
  2312  007F41  20                 	db	32
  2313  007F42  74                 	db	116	;'t'
  2314  007F43  69                 	db	105	;'i'
  2315  007F44  6D                 	db	109	;'m'
  2316  007F45  65                 	db	101	;'e'
  2317  007F46  3A                 	db	58	;':'
  2318  007F47  20                 	db	32
  2319  007F48  25                 	db	37
  2320  007F49  73                 	db	115	;'s'
  2321  007F4A  20                 	db	32
  2322  007F4B  0A                 	db	10
  2323  007F4C  0D                 	db	13
  2324  007F4D  00                 	db	0
  2325  007F4E                     STR_22:
  2326                           
  2327                           ; BSR set to: 1
  2328  007F4E  43                 	db	67	;'C'
  2329  007F4F  6F                 	db	111	;'o'
  2330  007F50  6D                 	db	109	;'m'
  2331  007F51  70                 	db	112	;'p'
  2332  007F52  69                 	db	105	;'i'
  2333  007F53  6C                 	db	108	;'l'
  2334  007F54  65                 	db	101	;'e'
  2335  007F55  20                 	db	32
  2336  007F56  64                 	db	100	;'d'
  2337  007F57  61                 	db	97	;'a'
  2338  007F58  74                 	db	116	;'t'
  2339  007F59  65                 	db	101	;'e'
  2340  007F5A  3A                 	db	58	;':'
  2341  007F5B  20                 	db	32
  2342  007F5C  25                 	db	37
  2343  007F5D  73                 	db	115	;'s'
  2344  007F5E  20                 	db	32
  2345  007F5F  0A                 	db	10
  2346  007F60  0D                 	db	13
  2347  007F61  00                 	db	0
  2348  007F62                     STR_20:
  2349                           
  2350                           ; BSR set to: 1
  2351  007F62  53                 	db	83	;'S'
  2352  007F63  57                 	db	87	;'W'
  2353  007F64  20                 	db	32
  2354  007F65  56                 	db	86	;'V'
  2355  007F66  45                 	db	69	;'E'
  2356  007F67  53                 	db	83	;'S'
  2357  007F68  52                 	db	82	;'R'
  2358  007F69  49                 	db	73	;'I'
  2359  007F6A  4F                 	db	79	;'O'
  2360  007F6B  4E                 	db	78	;'N'
  2361  007F6C  3A                 	db	58	;':'
  2362  007F6D  20                 	db	32
  2363  007F6E  25                 	db	37
  2364  007F6F  73                 	db	115	;'s'
  2365  007F70  20                 	db	32
  2366  007F71  0A                 	db	10
  2367  007F72  0D                 	db	13
  2368  007F73  00                 	db	0
  2369  007F74                     STR_54:
  2370                           
  2371                           ; BSR set to: 1
  2372  007F74  50                 	db	80	;'P'
  2373  007F75  41                 	db	65	;'A'
  2374  007F76  53                 	db	83	;'S'
  2375  007F77  53                 	db	83	;'S'
  2376  007F78  20                 	db	32
  2377  007F79  43                 	db	67	;'C'
  2378  007F7A  4F                 	db	79	;'O'
  2379  007F7B  55                 	db	85	;'U'
  2380  007F7C  4E                 	db	78	;'N'
  2381  007F7D  54                 	db	84	;'T'
  2382  007F7E  45                 	db	69	;'E'
  2383  007F7F  52                 	db	82	;'R'
  2384  007F80  20                 	db	32
  2385  007F81  25                 	db	37
  2386  007F82  64                 	db	100	;'d'
  2387  007F83  0A                 	db	10
  2388  007F84  0D                 	db	13
  2389  007F85  00                 	db	0
  2390  007F86                     STR_53:
  2391                           
  2392                           ; BSR set to: 1
  2393  007F86  55                 	db	85	;'U'
  2394  007F87  4E                 	db	78	;'N'
  2395  007F88  49                 	db	73	;'I'
  2396  007F89  54                 	db	84	;'T'
  2397  007F8A  20                 	db	32
  2398  007F8B  54                 	db	84	;'T'
  2399  007F8C  59                 	db	89	;'Y'
  2400  007F8D  50                 	db	80	;'P'
  2401  007F8E  45                 	db	69	;'E'
  2402  007F8F  20                 	db	32
  2403  007F90  25                 	db	37
  2404  007F91  64                 	db	100	;'d'
  2405  007F92  0A                 	db	10
  2406  007F93  0D                 	db	13
  2407  007F94  00                 	db	0
  2408  007F95                     STR_62:
  2409                           
  2410                           ; BSR set to: 1
  2411  007F95  55                 	db	85	;'U'
  2412  007F96  4E                 	db	78	;'N'
  2413  007F97  49                 	db	73	;'I'
  2414  007F98  54                 	db	84	;'T'
  2415  007F99  20                 	db	32
  2416  007F9A  44                 	db	68	;'D'
  2417  007F9B  43                 	db	67	;'C'
  2418  007F9C  20                 	db	32
  2419  007F9D  25                 	db	37
  2420  007F9E  64                 	db	100	;'d'
  2421  007F9F  0A                 	db	10
  2422  007FA0  0D                 	db	13
  2423  007FA1  00                 	db	0
  2424  007FA2                     STR_51:
  2425                           
  2426                           ; BSR set to: 1
  2427  007FA2  55                 	db	85	;'U'
  2428  007FA3  4E                 	db	78	;'N'
  2429  007FA4  49                 	db	73	;'I'
  2430  007FA5  54                 	db	84	;'T'
  2431  007FA6  20                 	db	32
  2432  007FA7  49                 	db	73	;'I'
  2433  007FA8  44                 	db	68	;'D'
  2434  007FA9  20                 	db	32
  2435  007FAA  25                 	db	37
  2436  007FAB  64                 	db	100	;'d'
  2437  007FAC  0A                 	db	10
  2438  007FAD  0D                 	db	13
  2439  007FAE  00                 	db	0
  2440  007FAF                     STR_23:
  2441                           
  2442                           ; BSR set to: 1
  2443  007FAF  4D                 	db	77	;'M'
  2444  007FB0  61                 	db	97	;'a'
  2445  007FB1  72                 	db	114	;'r'
  2446  007FB2  20                 	db	32
  2447  007FB3  32                 	db	50	;'2'
  2448  007FB4  39                 	db	57	;'9'
  2449  007FB5  20                 	db	32
  2450  007FB6  32                 	db	50	;'2'
  2451  007FB7  30                 	db	48	;'0'
  2452  007FB8  31                 	db	49	;'1'
  2453  007FB9  38                 	db	56	;'8'
  2454  007FBA  00                 	db	0
  2455  007FBB                     STR_10:
  2456                           
  2457                           ; BSR set to: 1
  2458  007FBB  4E                 	db	78	;'N'
  2459  007FBC  4F                 	db	79	;'O'
  2460  007FBD  54                 	db	84	;'T'
  2461  007FBE  20                 	db	32
  2462  007FBF  4F                 	db	79	;'O'
  2463  007FC0  2E                 	db	46
  2464  007FC1  4B                 	db	75	;'K'
  2465  007FC2  20                 	db	32
  2466  007FC3  0A                 	db	10
  2467  007FC4  0D                 	db	13
  2468  007FC5  00                 	db	0
  2469  007FC6                     STR_60:
  2470                           
  2471                           ; BSR set to: 1
  2472  007FC6  52                 	db	82	;'R'
  2473  007FC7  53                 	db	83	;'S'
  2474  007FC8  53                 	db	83	;'S'
  2475  007FC9  49                 	db	73	;'I'
  2476  007FCA  20                 	db	32
  2477  007FCB  25                 	db	37
  2478  007FCC  64                 	db	100	;'d'
  2479  007FCD  0A                 	db	10
  2480  007FCE  0D                 	db	13
  2481  007FCF  00                 	db	0
  2482  007FD0                     STR_1:
  2483                           
  2484                           ; BSR set to: 1
  2485  007FD0  4E                 	db	78	;'N'
  2486  007FD1  4F                 	db	79	;'O'
  2487  007FD2  54                 	db	84	;'T'
  2488  007FD3  20                 	db	32
  2489  007FD4  4F                 	db	79	;'O'
  2490  007FD5  4B                 	db	75	;'K'
  2491  007FD6  20                 	db	32
  2492  007FD7  0A                 	db	10
  2493  007FD8  0D                 	db	13
  2494  007FD9  00                 	db	0
  2495  007FDA                     STR_25:
  2496                           
  2497                           ; BSR set to: 1
  2498  007FDA  31                 	db	49	;'1'
  2499  007FDB  33                 	db	51	;'3'
  2500  007FDC  3A                 	db	58	;':'
  2501  007FDD  33                 	db	51	;'3'
  2502  007FDE  38                 	db	56	;'8'
  2503  007FDF  3A                 	db	58	;':'
  2504  007FE0  30                 	db	48	;'0'
  2505  007FE1  34                 	db	52	;'4'
  2506  007FE2  00                 	db	0
  2507  007FE3                     STR_9:
  2508                           
  2509                           ; BSR set to: 1
  2510  007FE3  0A                 	db	10
  2511  007FE4  0D                 	db	13
  2512  007FE5  20                 	db	32
  2513  007FE6  4F                 	db	79	;'O'
  2514  007FE7  4B                 	db	75	;'K'
  2515  007FE8  20                 	db	32
  2516  007FE9  0A                 	db	10
  2517  007FEA  0D                 	db	13
  2518  007FEB  00                 	db	0
  2519  007FEC                     STR_73:
  2520                           
  2521                           ; BSR set to: 1
  2522  007FEC  28                 	db	40
  2523  007FED  6E                 	db	110	;'n'
  2524  007FEE  75                 	db	117	;'u'
  2525  007FEF  6C                 	db	108	;'l'
  2526  007FF0  6C                 	db	108	;'l'
  2527  007FF1  29                 	db	41
  2528  007FF2  00                 	db	0
  2529  007FF3                     STR_21:
  2530                           
  2531                           ; BSR set to: 1
  2532  007FF3  31                 	db	49	;'1'
  2533  007FF4  5F                 	db	95	;'_'
  2534  007FF5  30                 	db	48	;'0'
  2535  007FF6  30                 	db	48	;'0'
  2536  007FF7  32                 	db	50	;'2'
  2537  007FF8  00                 	db	0
  2538  007FF9                     STR_8:
  2539                           
  2540                           ; BSR set to: 1
  2541  007FF9  25                 	db	37
  2542  007FFA  64                 	db	100	;'d'
  2543  007FFB  20                 	db	32
  2544  007FFC  09                 	db	9
  2545  007FFD  00                 	db	0
  2546  0000                     
  2547                           ; #config settings
  2548  007FFE  00                 	db	0	; dummy byte at the end
  2549  0000                     
  2550                           	psect	nvCOMRAM
  2551  000046                     __pnvCOMRAM:
  2552                           	opt stack 0
  2553  000046                     _timer0ReloadVal:
  2554                           	opt stack 0
  2555  000046                     	ds	2
  2556                           
  2557                           	psect	nvBANK1
  2558  0001E8                     __pnvBANK1:
  2559                           	opt stack 0
  2560  0001E8                     _TMR0_InterruptHandler:
  2561                           	opt stack 0
  2562  0001E8                     	ds	2
  2563  0001EA                     _eusart1TxBufferRemaining:
  2564                           	opt stack 0
  2565  0001EA                     	ds	1
  2566  0000                     _ANSELA	set	3896
  2567  0000                     _ANSELE	set	3900
  2568  0000                     _ANSELD	set	3899
  2569  0000                     _ANSELB	set	3897
  2570  0000                     _ANSELC	set	3898
  2571  0000                     _PORTBbits	set	3969
  2572  0000                     _PORTDbits	set	3971
  2573  0000                     _ADCON0bits	set	4034
  2574  0000                     _ADRESH	set	4036
  2575  0000                     _ADRESL	set	4035
  2576  0000                     _ADCON2	set	4032
  2577  0000                     _ADCON1	set	4033
  2578  0000                     _ADCON0	set	4034
  2579  0000                     _T0CONbits	set	4053
  2580  0000                     _T0CON	set	4053
  2581  0000                     _TMR0L	set	4054
  2582  0000                     _TMR0H	set	4055
  2583  0000                     _EEDATA	set	4008
  2584  0000                     _EEADR	set	4009
  2585  0000                     _EECON2	set	4007
  2586  0000                     _EECON1bits	set	4006
  2587  0000                     _TABLAT	set	4085
  2588  0000                     _TBLPTRL	set	4086
  2589  0000                     _TBLPTRH	set	4087
  2590  0000                     _TBLPTRU	set	4088
  2591  0000                     _INTCON2bits	set	4081
  2592  0000                     _WPUB	set	3937
  2593  0000                     _TRISD	set	3989
  2594  0000                     _TRISC	set	3988
  2595  0000                     _TRISB	set	3987
  2596  0000                     _TRISA	set	3986
  2597  0000                     _TRISE	set	3990
  2598  0000                     _LATC	set	3979
  2599  0000                     _LATB	set	3978
  2600  0000                     _LATA	set	3977
  2601  0000                     _LATD	set	3980
  2602  0000                     _LATE	set	3981
  2603  0000                     _RCREG1	set	4014
  2604  0000                     _RCSTA1bits	set	4011
  2605  0000                     _TXREG1	set	4013
  2606  0000                     _SPBRGH1	set	4016
  2607  0000                     _SPBRG1	set	4015
  2608  0000                     _TXSTA1	set	4012
  2609  0000                     _RCSTA1	set	4011
  2610  0000                     _BAUDCON1	set	4024
  2611  0000                     _PIR1bits	set	3998
  2612  0000                     _PIE1bits	set	3997
  2613  0000                     _PIR2bits	set	4001
  2614  0000                     _PIE2bits	set	4000
  2615  0000                     _RCONbits	set	4048
  2616  0000                     _OSCTUNE	set	3995
  2617  0000                     _OSCCON2	set	4050
  2618  0000                     _OSCCON	set	4051
  2619  0000                     _LATAbits	set	3977
  2620  0000                     _LATDbits	set	3980
  2621  0000                     _INTCONbits	set	4082
  2622  0000                     _IOCB	set	3938
  2623  0000                     _LATCbits	set	3979
  2624  0000                     _LATBbits	set	3978
  2625                           
  2626                           	psect	cinit
  2627  0041BE                     __pcinit:
  2628                           	opt stack 0
  2629  0041BE                     start_initialization:
  2630                           	opt stack 0
  2631  0041BE                     __initialization:
  2632                           	opt stack 0
  2633                           
  2634                           ; Initialize objects allocated to BANK1 (12 bytes)
  2635                           ; load TBLPTR registers with __pidataBANK1
  2636  0041BE  0E1C               	movlw	low __pidataBANK1
  2637  0041C0  6EF6               	movwf	tblptrl,c
  2638  0041C2  0E48               	movlw	high __pidataBANK1
  2639  0041C4  6EF7               	movwf	tblptrh,c
  2640  0041C6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  2641  0041C8  6EF8               	movwf	tblptru,c
  2642  0041CA  EE01  F0DC         	lfsr	0,__pdataBANK1
  2643  0041CE  EE10 F00C          	lfsr	1,12
  2644  0041D2                     copy_data0:
  2645  0041D2  0009               	tblrd		*+
  2646  0041D4  CFF5 FFEE          	movff	tablat,postinc0
  2647  0041D8  50E5               	movf	postdec1,w,c
  2648  0041DA  50E1               	movf	fsr1l,w,c
  2649  0041DC  E1FA               	bnz	copy_data0
  2650                           
  2651                           ; Clear objects allocated to BANK2 (150 bytes)
  2652  0041DE  EE02  F000         	lfsr	0,__pbssBANK2
  2653  0041E2  0E96               	movlw	150
  2654  0041E4                     clear_0:
  2655  0041E4  6AEE               	clrf	postinc0,c
  2656  0041E6  06E8               	decf	wreg,f,c
  2657  0041E8  E1FD               	bnz	clear_0
  2658                           
  2659                           ; Clear objects allocated to BANK1 (85 bytes)
  2660  0041EA  EE01  F087         	lfsr	0,__pbssBANK1
  2661  0041EE  0E55               	movlw	85
  2662  0041F0                     clear_1:
  2663  0041F0  6AEE               	clrf	postinc0,c
  2664  0041F2  06E8               	decf	wreg,f,c
  2665  0041F4  E1FD               	bnz	clear_1
  2666                           
  2667                           ; Clear objects allocated to COMRAM (21 bytes)
  2668  0041F6  EE00  F031         	lfsr	0,__pbssCOMRAM
  2669  0041FA  0E15               	movlw	21
  2670  0041FC                     clear_2:
  2671  0041FC  6AEE               	clrf	postinc0,c
  2672  0041FE  06E8               	decf	wreg,f,c
  2673  004200  E1FD               	bnz	clear_2
  2674  004202                     end_of_initialization:
  2675                           	opt stack 0
  2676  004202                     __end_of__initialization:
  2677                           	opt stack 0
  2678  004202  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2679  004204  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2680  004206  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2681  004208  6EF8               	movwf	tblptru,c
  2682  00420A  0100               	movlb	0
  2683  00420C  EFBA  F01E         	goto	_main	;jump to C main() function
  2684                           tblptru	equ	0xFF8
  2685                           tblptrh	equ	0xFF7
  2686                           tblptrl	equ	0xFF6
  2687                           tablat	equ	0xFF5
  2688                           postinc0	equ	0xFEE
  2689                           wreg	equ	0xFE8
  2690                           postdec1	equ	0xFE5
  2691                           fsr1l	equ	0xFE1
  2692                           
  2693                           	psect	bssCOMRAM
  2694  000031                     __pbssCOMRAM:
  2695                           	opt stack 0
  2696  000031                     _txFreq:
  2697                           	opt stack 0
  2698  000031                     	ds	4
  2699  000035                     _rxFreq:
  2700                           	opt stack 0
  2701  000035                     	ds	4
  2702  000039                     TMR0_ISR@CountCallBack:
  2703                           	opt stack 0
  2704  000039                     	ds	2
  2705  00003B                     _channelNum:
  2706                           	opt stack 0
  2707  00003B                     	ds	2
  2708  00003D                     _lastAdcFfwrRSSI:
  2709                           	opt stack 0
  2710  00003D                     	ds	2
  2711  00003F                     _lastAdcTemp:
  2712                           	opt stack 0
  2713  00003F                     	ds	2
  2714  000041                     _eusart1RxTail:
  2715                           	opt stack 0
  2716  000041                     	ds	1
  2717  000042                     _eusart1RxHead:
  2718                           	opt stack 0
  2719  000042                     	ds	1
  2720  000043                     _eusart1TxTail:
  2721                           	opt stack 0
  2722  000043                     	ds	1
  2723  000044                     _eusart1TxHead:
  2724                           	opt stack 0
  2725  000044                     	ds	1
  2726  000045                     _adcSampleMode:
  2727                           	opt stack 0
  2728  000045                     	ds	1
  2729                           tblptru	equ	0xFF8
  2730                           tblptrh	equ	0xFF7
  2731                           tblptrl	equ	0xFF6
  2732                           tablat	equ	0xFF5
  2733                           postinc0	equ	0xFEE
  2734                           wreg	equ	0xFE8
  2735                           postdec1	equ	0xFE5
  2736                           fsr1l	equ	0xFE1
  2737                           
  2738                           	psect	bssBANK1
  2739  000187                     __pbssBANK1:
  2740                           	opt stack 0
  2741  000187                     _txStatistics:
  2742                           	opt stack 0
  2743  000187                     	ds	22
  2744  00019D                     _rxStatistics:
  2745                           	opt stack 0
  2746  00019D                     	ds	21
  2747  0001B2                     _systemStatus:
  2748                           	opt stack 0
  2749  0001B2                     	ds	10
  2750  0001BC                     _mcuRunTimeIn5SecTicks:
  2751                           	opt stack 0
  2752  0001BC                     	ds	4
  2753  0001C0                     _retNum:
  2754                           	opt stack 0
  2755  0001C0                     	ds	4
  2756  0001C4                     _errno:
  2757                           	opt stack 0
  2758  0001C4                     	ds	2
  2759  0001C6                     _numSamples:
  2760                           	opt stack 0
  2761  0001C6                     	ds	2
  2762  0001C8                     _count:
  2763                           	opt stack 0
  2764  0001C8                     	ds	2
  2765  0001CA                     _lastAdcVgMon:
  2766                           	opt stack 0
  2767  0001CA                     	ds	2
  2768  0001CC                     _lastAdcRREV:
  2769                           	opt stack 0
  2770  0001CC                     	ds	2
  2771  0001CE                     _msgCount:
  2772                           	opt stack 0
  2773  0001CE                     	ds	1
  2774  0001CF                     _crcGiven:
  2775                           	opt stack 0
  2776  0001CF                     	ds	1
  2777  0001D0                     _crcCalc:
  2778                           	opt stack 0
  2779  0001D0                     	ds	1
  2780  0001D1                     _dataSize:
  2781                           	opt stack 0
  2782  0001D1                     	ds	1
  2783  0001D2                     _request:
  2784                           	opt stack 0
  2785  0001D2                     	ds	1
  2786  0001D3                     _group:
  2787                           	opt stack 0
  2788  0001D3                     	ds	1
  2789  0001D4                     _cState:
  2790                           	opt stack 0
  2791  0001D4                     	ds	1
  2792  0001D5                     _eusart1RxCount:
  2793                           	opt stack 0
  2794  0001D5                     	ds	1
  2795  0001D6                     _channel:
  2796                           	opt stack 0
  2797  0001D6                     	ds	1
  2798  0001D7                     _needToSample:
  2799                           	opt stack 0
  2800  0001D7                     	ds	1
  2801  0001D8                     _TimertenSecFlag:
  2802                           	opt stack 0
  2803  0001D8                     	ds	1
  2804  0001D9                     _TimerKeepAliveFlag:
  2805                           	opt stack 0
  2806  0001D9                     	ds	1
  2807  0001DA                     _TimerSamplingFlag:
  2808                           	opt stack 0
  2809  0001DA                     	ds	1
  2810  0001DB                     _TimerOneSecFlag:
  2811                           	opt stack 0
  2812  0001DB                     	ds	1
  2813                           tblptru	equ	0xFF8
  2814                           tblptrh	equ	0xFF7
  2815                           tblptrl	equ	0xFF6
  2816                           tablat	equ	0xFF5
  2817                           postinc0	equ	0xFEE
  2818                           wreg	equ	0xFE8
  2819                           postdec1	equ	0xFE5
  2820                           fsr1l	equ	0xFE1
  2821                           
  2822                           	psect	dataBANK1
  2823  0001DC                     __pdataBANK1:
  2824                           	opt stack 0
  2825  0001DC                     _groupsArray:
  2826                           	opt stack 0
  2827  0001DC                     	ds	12
  2828                           tblptru	equ	0xFF8
  2829                           tblptrh	equ	0xFF7
  2830                           tblptrl	equ	0xFF6
  2831                           tablat	equ	0xFF5
  2832                           postinc0	equ	0xFEE
  2833                           wreg	equ	0xFE8
  2834                           postdec1	equ	0xFE5
  2835                           fsr1l	equ	0xFE1
  2836                           
  2837                           	psect	bssBANK2
  2838  000200                     __pbssBANK2:
  2839                           	opt stack 0
  2840  000200                     _eusart1TxBuffer:
  2841                           	opt stack 0
  2842  000200                     	ds	70
  2843  000246                     _eusart1RxBuffer:
  2844                           	opt stack 0
  2845  000246                     	ds	40
  2846  00026E                     _rxMsgData:
  2847                           	opt stack 0
  2848  00026E                     	ds	20
  2849  000282                     _rxMsgQueue:
  2850                           	opt stack 0
  2851  000282                     	ds	20
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           postinc0	equ	0xFEE
  2857                           wreg	equ	0xFE8
  2858                           postdec1	equ	0xFE5
  2859                           fsr1l	equ	0xFE1
  2860                           
  2861                           	psect	cstackBANK1
  2862  000100                     __pcstackBANK1:
  2863                           	opt stack 0
  2864  000100                     SampleSingleChannel@dest:
  2865                           	opt stack 0
  2866  000100                     SendUartSystemInitMessage@dest:
  2867                           	opt stack 0
  2868  000100                     PrintHelpScreen@dest:
  2869                           	opt stack 0
  2870  000100                     PrintSystemStatus@dest:
  2871                           	opt stack 0
  2872  000100                     PrintRxStatus@dest:
  2873                           	opt stack 0
  2874  000100                     PrintTxStatus@dest:
  2875                           	opt stack 0
  2876                           
  2877                           ; 80 bytes @ 0x0
  2878  000100                     	ds	50
  2879  000132                     _SampleSingleChannel$3962:
  2880                           	opt stack 0
  2881                           
  2882                           ; 3 bytes @ 0x32
  2883  000132                     	ds	3
  2884  000135                     SampleSingleChannel@_adcResult:
  2885                           	opt stack 0
  2886                           
  2887                           ; 2 bytes @ 0x35
  2888  000135                     	ds	2
  2889  000137                     SampleSingleChannel@adcRes:
  2890                           	opt stack 0
  2891                           
  2892                           ; 2 bytes @ 0x37
  2893  000137                     	ds	25
  2894  000150                     GroupRx@data:
  2895                           	opt stack 0
  2896  000150                     GroupTx@data:
  2897                           	opt stack 0
  2898  000150                     GroupCommon@data:
  2899                           	opt stack 0
  2900                           
  2901                           ; 2 bytes @ 0x50
  2902  000150                     	ds	2
  2903  000152                     readUartByte@dest:
  2904                           	opt stack 0
  2905                           
  2906                           ; 50 bytes @ 0x52
  2907  000152                     	ds	50
  2908  000184                     readUartByte@idx:
  2909                           	opt stack 0
  2910                           
  2911                           ; 2 bytes @ 0x84
  2912  000184                     	ds	2
  2913  000186                     readUartByte@chRec:
  2914                           	opt stack 0
  2915                           
  2916                           ; 1 bytes @ 0x86
  2917  000186                     	ds	1
  2918                           tblptru	equ	0xFF8
  2919                           tblptrh	equ	0xFF7
  2920                           tblptrl	equ	0xFF6
  2921                           tablat	equ	0xFF5
  2922                           postinc0	equ	0xFEE
  2923                           wreg	equ	0xFE8
  2924                           postdec1	equ	0xFE5
  2925                           fsr1l	equ	0xFE1
  2926                           
  2927                           	psect	cstackBANK0
  2928  000060                     __pcstackBANK0:
  2929                           	opt stack 0
  2930  000060                     ___ftdiv@cntr:
  2931                           	opt stack 0
  2932  000060                     strtol@sign:
  2933                           	opt stack 0
  2934  000060                     SWSPI_Synth_send_bits@bitArray:
  2935                           	opt stack 0
  2936                           
  2937                           ; 32 bytes @ 0x0
  2938  000060                     	ds	1
  2939  000061                     ___ftdiv@f3:
  2940                           	opt stack 0
  2941  000061                     strtol@a:
  2942                           	opt stack 0
  2943                           
  2944                           ; 4 bytes @ 0x1
  2945  000061                     	ds	3
  2946  000064                     ___ftdiv@exp:
  2947                           	opt stack 0
  2948                           
  2949                           ; 1 bytes @ 0x4
  2950  000064                     	ds	1
  2951  000065                     ___ftdiv@sign:
  2952                           	opt stack 0
  2953  000065                     strtol@c:
  2954                           	opt stack 0
  2955                           
  2956                           ; 1 bytes @ 0x5
  2957  000065                     	ds	1
  2958  000066                     ?___ftmul:
  2959                           	opt stack 0
  2960  000066                     ?_GetIntFromUartData:
  2961                           	opt stack 0
  2962  000066                     GetIntFromUartData@data:
  2963                           	opt stack 0
  2964  000066                     ___ftmul@f1:
  2965                           	opt stack 0
  2966                           
  2967                           ; 3 bytes @ 0x6
  2968  000066                     	ds	3
  2969  000069                     ___ftmul@f2:
  2970                           	opt stack 0
  2971                           
  2972                           ; 3 bytes @ 0x9
  2973  000069                     	ds	1
  2974  00006A                     ??_GetIntFromUartData:
  2975                           
  2976                           ; 1 bytes @ 0xA
  2977  00006A                     	ds	2
  2978  00006C                     ___ftmul@exp:
  2979                           	opt stack 0
  2980  00006C                     GetIntFromUartData@dataRegArr:
  2981                           	opt stack 0
  2982                           
  2983                           ; 8 bytes @ 0xC
  2984  00006C                     	ds	1
  2985  00006D                     ___ftmul@f3_as_product:
  2986                           	opt stack 0
  2987                           
  2988                           ; 3 bytes @ 0xD
  2989  00006D                     	ds	3
  2990  000070                     ___ftmul@cntr:
  2991                           	opt stack 0
  2992                           
  2993                           ; 1 bytes @ 0x10
  2994  000070                     	ds	1
  2995  000071                     ___ftmul@sign:
  2996                           	opt stack 0
  2997                           
  2998                           ; 1 bytes @ 0x11
  2999  000071                     	ds	1
  3000  000072                     ?_fround:
  3001                           	opt stack 0
  3002  000072                     ?_scale:
  3003                           	opt stack 0
  3004                           
  3005                           ; 3 bytes @ 0x12
  3006  000072                     	ds	2
  3007  000074                     GetIntFromUartData@c:
  3008                           	opt stack 0
  3009                           
  3010                           ; 1 bytes @ 0x14
  3011  000074                     	ds	1
  3012  000075                     GetIntFromUartData@idx:
  3013                           	opt stack 0
  3014  000075                     _fround$3977:
  3015                           	opt stack 0
  3016  000075                     _scale$3978:
  3017                           	opt stack 0
  3018                           
  3019                           ; 3 bytes @ 0x15
  3020  000075                     	ds	2
  3021  000077                     set_system_type@data:
  3022                           	opt stack 0
  3023  000077                     SetUartRefrashRate@data:
  3024                           	opt stack 0
  3025  000077                     SetUartMode@data:
  3026                           	opt stack 0
  3027                           
  3028                           ; 2 bytes @ 0x17
  3029  000077                     	ds	1
  3030  000078                     scale@scl:
  3031                           	opt stack 0
  3032  000078                     _fround$3976:
  3033                           	opt stack 0
  3034                           
  3035                           ; 3 bytes @ 0x18
  3036  000078                     	ds	1
  3037  000079                     ?___fttol:
  3038                           	opt stack 0
  3039  000079                     ___fttol@f1:
  3040                           	opt stack 0
  3041  000079                     set_system_type@retNum:
  3042                           	opt stack 0
  3043  000079                     SetUartRefrashRate@retNum:
  3044                           	opt stack 0
  3045  000079                     SetUartMode@retNum:
  3046                           	opt stack 0
  3047                           
  3048                           ; 4 bytes @ 0x19
  3049  000079                     	ds	2
  3050  00007B                     fround@prec:
  3051                           	opt stack 0
  3052                           
  3053                           ; 1 bytes @ 0x1B
  3054  00007B                     	ds	1
  3055  00007C                     ?___ftadd:
  3056                           	opt stack 0
  3057  00007C                     ___ftadd@f1:
  3058                           	opt stack 0
  3059                           
  3060                           ; 3 bytes @ 0x1C
  3061  00007C                     	ds	1
  3062  00007D                     ??___fttol:
  3063                           
  3064                           ; 1 bytes @ 0x1D
  3065  00007D                     	ds	2
  3066  00007F                     ___ftadd@f2:
  3067                           	opt stack 0
  3068                           
  3069                           ; 3 bytes @ 0x1F
  3070  00007F                     	ds	1
  3071  000080                     SWSPI_Synth_send_bits@mask:
  3072                           	opt stack 0
  3073                           
  3074                           ; 4 bytes @ 0x20
  3075  000080                     	ds	2
  3076  000082                     ??___ftadd:
  3077  000082                     ___fttol@sign1:
  3078                           	opt stack 0
  3079                           
  3080                           ; 1 bytes @ 0x22
  3081  000082                     	ds	1
  3082  000083                     ___fttol@lval:
  3083                           	opt stack 0
  3084                           
  3085                           ; 4 bytes @ 0x23
  3086  000083                     	ds	1
  3087  000084                     SWSPI_Synth_send_bits@count:
  3088                           	opt stack 0
  3089                           
  3090                           ; 1 bytes @ 0x24
  3091  000084                     	ds	1
  3092  000085                     SWSPI_Synth_send_bits@phrType:
  3093                           	opt stack 0
  3094  000085                     ___ftadd@sign:
  3095                           	opt stack 0
  3096                           
  3097                           ; 1 bytes @ 0x25
  3098  000085                     	ds	1
  3099  000086                     ??_PLLInitialize:
  3100  000086                     ___ftadd@exp2:
  3101                           	opt stack 0
  3102                           
  3103                           ; 1 bytes @ 0x26
  3104  000086                     	ds	1
  3105  000087                     ___ftadd@exp1:
  3106                           	opt stack 0
  3107  000087                     ___fttol@exp1:
  3108                           	opt stack 0
  3109                           
  3110                           ; 1 bytes @ 0x27
  3111  000087                     	ds	1
  3112  000088                     ?___ftsub:
  3113                           	opt stack 0
  3114  000088                     ?_eval_poly:
  3115                           	opt stack 0
  3116  000088                     ?___altoft:
  3117                           	opt stack 0
  3118  000088                     PLLInitialize@idx:
  3119                           	opt stack 0
  3120  000088                     ___ftsub@f1:
  3121                           	opt stack 0
  3122  000088                     eval_poly@x:
  3123                           	opt stack 0
  3124  000088                     ___altoft@c:
  3125                           	opt stack 0
  3126                           
  3127                           ; 4 bytes @ 0x28
  3128  000088                     	ds	2
  3129  00008A                     PLLInitialize@idx_803:
  3130                           	opt stack 0
  3131                           
  3132                           ; 2 bytes @ 0x2A
  3133  00008A                     	ds	1
  3134  00008B                     eval_poly@d:
  3135                           	opt stack 0
  3136  00008B                     ___ftsub@f2:
  3137                           	opt stack 0
  3138                           
  3139                           ; 3 bytes @ 0x2B
  3140  00008B                     	ds	1
  3141  00008C                     ??___altoft:
  3142                           
  3143                           ; 1 bytes @ 0x2C
  3144  00008C                     	ds	1
  3145  00008D                     eval_poly@n:
  3146                           	opt stack 0
  3147                           
  3148                           ; 2 bytes @ 0x2D
  3149  00008D                     	ds	2
  3150  00008F                     eval_poly@res:
  3151                           	opt stack 0
  3152                           
  3153                           ; 3 bytes @ 0x2F
  3154  00008F                     	ds	1
  3155  000090                     ?_floor:
  3156                           	opt stack 0
  3157  000090                     floor@x:
  3158                           	opt stack 0
  3159                           
  3160                           ; 3 bytes @ 0x30
  3161  000090                     	ds	2
  3162  000092                     ?_log:
  3163                           	opt stack 0
  3164  000092                     ?_ldexp:
  3165                           	opt stack 0
  3166  000092                     ldexp@value:
  3167                           	opt stack 0
  3168  000092                     log@x:
  3169                           	opt stack 0
  3170                           
  3171                           ; 3 bytes @ 0x32
  3172  000092                     	ds	1
  3173  000093                     floor@i:
  3174                           	opt stack 0
  3175                           
  3176                           ; 3 bytes @ 0x33
  3177  000093                     	ds	2
  3178  000095                     ldexp@newexp:
  3179                           	opt stack 0
  3180  000095                     log@exponent:
  3181                           	opt stack 0
  3182                           
  3183                           ; 2 bytes @ 0x35
  3184  000095                     	ds	1
  3185  000096                     floor@expon:
  3186                           	opt stack 0
  3187                           
  3188                           ; 2 bytes @ 0x36
  3189  000096                     	ds	1
  3190  000097                     ??_ldexp:
  3191                           
  3192                           ; 1 bytes @ 0x37
  3193  000097                     	ds	2
  3194  000099                     ?_exp:
  3195                           	opt stack 0
  3196  000099                     exp@x:
  3197                           	opt stack 0
  3198                           
  3199                           ; 3 bytes @ 0x39
  3200  000099                     	ds	3
  3201  00009C                     _exp$3982:
  3202                           	opt stack 0
  3203                           
  3204                           ; 3 bytes @ 0x3C
  3205  00009C                     	ds	3
  3206  00009F                     exp@exponent:
  3207                           	opt stack 0
  3208                           
  3209                           ; 2 bytes @ 0x3F
  3210  00009F                     	ds	2
  3211  0000A1                     exp@sign:
  3212                           	opt stack 0
  3213                           
  3214                           ; 1 bytes @ 0x41
  3215  0000A1                     	ds	1
  3216  0000A2                     ?_pow:
  3217                           	opt stack 0
  3218  0000A2                     pow@x:
  3219                           	opt stack 0
  3220                           
  3221                           ; 3 bytes @ 0x42
  3222  0000A2                     	ds	3
  3223  0000A5                     pow@y:
  3224                           	opt stack 0
  3225                           
  3226                           ; 3 bytes @ 0x45
  3227  0000A5                     	ds	3
  3228  0000A8                     _pow$3980:
  3229                           	opt stack 0
  3230                           
  3231                           ; 3 bytes @ 0x48
  3232  0000A8                     	ds	3
  3233  0000AB                     _pow$3981:
  3234                           	opt stack 0
  3235                           
  3236                           ; 3 bytes @ 0x4B
  3237  0000AB                     	ds	3
  3238  0000AE                     pow@sign:
  3239                           	opt stack 0
  3240                           
  3241                           ; 1 bytes @ 0x4E
  3242  0000AE                     	ds	1
  3243  0000AF                     pow@yi:
  3244                           	opt stack 0
  3245                           
  3246                           ; 4 bytes @ 0x4F
  3247  0000AF                     	ds	4
  3248  0000B3                     ?_ReadIntFromEeprom:
  3249                           	opt stack 0
  3250  0000B3                     ?___llmod:
  3251                           	opt stack 0
  3252  0000B3                     ReadIntFromEeprom@numOfByes:
  3253                           	opt stack 0
  3254  0000B3                     _SampleAllChannels$3963:
  3255                           	opt stack 0
  3256  0000B3                     ___llmod@dividend:
  3257                           	opt stack 0
  3258                           
  3259                           ; 4 bytes @ 0x53
  3260  0000B3                     	ds	3
  3261  0000B6                     SampleAllChannels@_adcResult:
  3262                           	opt stack 0
  3263                           
  3264                           ; 2 bytes @ 0x56
  3265  0000B6                     	ds	1
  3266  0000B7                     ??_ReadIntFromEeprom:
  3267  0000B7                     ___llmod@divisor:
  3268                           	opt stack 0
  3269                           
  3270                           ; 4 bytes @ 0x57
  3271  0000B7                     	ds	1
  3272  0000B8                     SampleAllChannels@adcRes:
  3273                           	opt stack 0
  3274                           
  3275                           ; 2 bytes @ 0x58
  3276  0000B8                     	ds	2
  3277  0000BA                     SampleAllChannels@i:
  3278                           	opt stack 0
  3279  0000BA                     ReadIntFromEeprom@base:
  3280                           	opt stack 0
  3281                           
  3282                           ; 4 bytes @ 0x5A
  3283  0000BA                     	ds	1
  3284  0000BB                     ___llmod@counter:
  3285                           	opt stack 0
  3286                           
  3287                           ; 1 bytes @ 0x5B
  3288  0000BB                     	ds	1
  3289  0000BC                     ?_sprintf:
  3290                           	opt stack 0
  3291  0000BC                     sprintf@sp:
  3292                           	opt stack 0
  3293                           
  3294                           ; 2 bytes @ 0x5C
  3295  0000BC                     	ds	2
  3296  0000BE                     sprintf@f:
  3297                           	opt stack 0
  3298  0000BE                     _ReadIntFromEeprom$3974:
  3299                           	opt stack 0
  3300                           
  3301                           ; 3 bytes @ 0x5E
  3302  0000BE                     	ds	3
  3303  0000C1                     _ReadIntFromEeprom$3975:
  3304                           	opt stack 0
  3305                           
  3306                           ; 3 bytes @ 0x61
  3307  0000C1                     	ds	3
  3308  0000C4                     ??_sprintf:
  3309  0000C4                     ReadIntFromEeprom@address:
  3310                           	opt stack 0
  3311                           
  3312                           ; 1 bytes @ 0x64
  3313  0000C4                     	ds	1
  3314  0000C5                     ReadIntFromEeprom@retVal:
  3315                           	opt stack 0
  3316                           
  3317                           ; 4 bytes @ 0x65
  3318  0000C5                     	ds	4
  3319  0000C9                     ReadIntFromEeprom@idx:
  3320                           	opt stack 0
  3321                           
  3322                           ; 1 bytes @ 0x69
  3323  0000C9                     	ds	1
  3324  0000CA                     ??_DacInit:
  3325  0000CA                     ReadSystemStatusFromEprom@sysData:
  3326                           	opt stack 0
  3327  0000CA                     _sprintf$3979:
  3328                           	opt stack 0
  3329                           
  3330                           ; 3 bytes @ 0x6A
  3331  0000CA                     	ds	2
  3332  0000CC                     DacInit@dacInput:
  3333                           	opt stack 0
  3334                           
  3335                           ; 2 bytes @ 0x6C
  3336  0000CC                     	ds	1
  3337  0000CD                     sprintf@cp:
  3338                           	opt stack 0
  3339                           
  3340                           ; 2 bytes @ 0x6D
  3341  0000CD                     	ds	1
  3342  0000CE                     DacInit@idx:
  3343                           	opt stack 0
  3344                           
  3345                           ; 1 bytes @ 0x6E
  3346  0000CE                     	ds	1
  3347  0000CF                     sprintf@ap:
  3348                           	opt stack 0
  3349                           
  3350                           ; 2 bytes @ 0x6F
  3351  0000CF                     	ds	2
  3352  0000D1                     sprintf@flag:
  3353                           	opt stack 0
  3354                           
  3355                           ; 2 bytes @ 0x71
  3356  0000D1                     	ds	2
  3357  0000D3                     sprintf@prec:
  3358                           	opt stack 0
  3359                           
  3360                           ; 2 bytes @ 0x73
  3361  0000D3                     	ds	2
  3362  0000D5                     sprintf@val:
  3363                           	opt stack 0
  3364                           
  3365                           ; 4 bytes @ 0x75
  3366  0000D5                     	ds	4
  3367  0000D9                     sprintf@exp:
  3368                           	opt stack 0
  3369                           
  3370                           ; 2 bytes @ 0x79
  3371  0000D9                     	ds	2
  3372  0000DB                     sprintf@tmpval:
  3373                           	opt stack 0
  3374                           
  3375                           ; 4 bytes @ 0x7B
  3376  0000DB                     	ds	4
  3377  0000DF                     sprintf@fval:
  3378                           	opt stack 0
  3379                           
  3380                           ; 3 bytes @ 0x7F
  3381  0000DF                     	ds	3
  3382  0000E2                     sprintf@c:
  3383                           	opt stack 0
  3384                           
  3385                           ; 1 bytes @ 0x82
  3386  0000E2                     	ds	1
  3387  0000E3                     ??_GroupRx:
  3388  0000E3                     ??_GroupTx:
  3389  0000E3                     ??_SampleSingleChannel:
  3390  0000E3                     GroupCommon@request:
  3391                           	opt stack 0
  3392                           
  3393                           ; 1 bytes @ 0x83
  3394  0000E3                     	ds	1
  3395  0000E4                     _GroupRx$3970:
  3396                           	opt stack 0
  3397  0000E4                     _GroupTx$3972:
  3398                           	opt stack 0
  3399                           
  3400                           ; 3 bytes @ 0x84
  3401  0000E4                     	ds	3
  3402  0000E7                     _GroupRx$3971:
  3403                           	opt stack 0
  3404  0000E7                     _GroupTx$3973:
  3405                           	opt stack 0
  3406                           
  3407                           ; 3 bytes @ 0x87
  3408  0000E7                     	ds	3
  3409  0000EA                     GroupRx@request:
  3410                           	opt stack 0
  3411  0000EA                     GroupTx@request:
  3412                           	opt stack 0
  3413                           
  3414                           ; 1 bytes @ 0x8A
  3415  0000EA                     	ds	1
  3416  0000EB                     ??_readUartByte:
  3417                           
  3418                           ; 1 bytes @ 0x8B
  3419  0000EB                     	ds	3
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           postinc0	equ	0xFEE
  3425                           wreg	equ	0xFE8
  3426                           postdec1	equ	0xFE5
  3427                           fsr1l	equ	0xFE1
  3428                           
  3429                           	psect	cstackCOMRAM
  3430  000001                     __pcstackCOMRAM:
  3431                           	opt stack 0
  3432  000001                     ?___lwmod:
  3433                           	opt stack 0
  3434  000001                     ___lwmod@dividend:
  3435                           	opt stack 0
  3436                           
  3437                           ; 2 bytes @ 0x0
  3438  000001                     	ds	2
  3439  000003                     ___lwmod@divisor:
  3440                           	opt stack 0
  3441                           
  3442                           ; 2 bytes @ 0x2
  3443  000003                     	ds	2
  3444  000005                     ___lwmod@counter:
  3445                           	opt stack 0
  3446                           
  3447                           ; 1 bytes @ 0x4
  3448  000005                     	ds	1
  3449  000006                     ??_INTERRUPT_InterruptManager:
  3450                           
  3451                           ; 1 bytes @ 0x5
  3452  000006                     	ds	18
  3453  000018                     ??_EUSART1_Read:
  3454  000018                     ??_isspace:
  3455  000018                     ??_isdigit:
  3456  000018                     ??_isupper:
  3457  000018                     ??_BlinkOkLeds:
  3458  000018                     ??_keepAliveSignalLed:
  3459  000018                     ??_testLeds:
  3460  000018                     ?_ADC_GetConversion:
  3461                           	opt stack 0
  3462  000018                     ?___awmod:
  3463                           	opt stack 0
  3464  000018                     ?___ftpack:
  3465                           	opt stack 0
  3466  000018                     ?_frexp:
  3467                           	opt stack 0
  3468  000018                     ?___ftneg:
  3469                           	opt stack 0
  3470  000018                     ?__tdiv_to_l_:
  3471                           	opt stack 0
  3472  000018                     ?__div_to_l_:
  3473                           	opt stack 0
  3474  000018                     ?___lldiv:
  3475                           	opt stack 0
  3476  000018                     SwSpi_Data_Pin@cPinMode:
  3477                           	opt stack 0
  3478  000018                     SwSpi_Clk_Pin@cPinMode:
  3479                           	opt stack 0
  3480  000018                     SwSpi_Set_CE_Pin@cPinMode:
  3481                           	opt stack 0
  3482  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  3483                           	opt stack 0
  3484  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  3485                           	opt stack 0
  3486  000018                     EUSART1_Write@txData:
  3487                           	opt stack 0
  3488  000018                     DATAEE_WriteByte@bData:
  3489                           	opt stack 0
  3490  000018                     DATAEE_ReadByte@bAdd:
  3491                           	opt stack 0
  3492  000018                     toupper@c:
  3493                           	opt stack 0
  3494  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  3495                           	opt stack 0
  3496  000018                     Make32bitsArray@array:
  3497                           	opt stack 0
  3498  000018                     ___awmod@dividend:
  3499                           	opt stack 0
  3500  000018                     memset@p1:
  3501                           	opt stack 0
  3502  000018                     __div_to_l_@f1:
  3503                           	opt stack 0
  3504  000018                     ___ftpack@arg:
  3505                           	opt stack 0
  3506  000018                     __tdiv_to_l_@f1:
  3507                           	opt stack 0
  3508  000018                     ___ftge@ff1:
  3509                           	opt stack 0
  3510  000018                     ___ftneg@f1:
  3511                           	opt stack 0
  3512  000018                     frexp@value:
  3513                           	opt stack 0
  3514  000018                     make8@data:
  3515                           	opt stack 0
  3516  000018                     ___lldiv@dividend:
  3517                           	opt stack 0
  3518                           
  3519                           ; 4 bytes @ 0x17
  3520  000018                     	ds	1
  3521  000019                     SwSpi_Data_Pin@phrType:
  3522                           	opt stack 0
  3523  000019                     SwSpi_Clk_Pin@phrType:
  3524                           	opt stack 0
  3525  000019                     SwSpi_Set_CE_Pin@phrType:
  3526                           	opt stack 0
  3527  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  3528                           	opt stack 0
  3529  000019                     DATAEE_WriteByte@bAdd:
  3530                           	opt stack 0
  3531  000019                     EepromRead@address:
  3532                           	opt stack 0
  3533  000019                     _isdigit$3659:
  3534                           	opt stack 0
  3535  000019                     _isspace$3662:
  3536                           	opt stack 0
  3537  000019                     _isupper$3665:
  3538                           	opt stack 0
  3539  000019                     testLeds@idx:
  3540                           	opt stack 0
  3541  000019                     UART_Write_Text@text:
  3542                           	opt stack 0
  3543  000019                     EUSART1_Read@readValue:
  3544                           	opt stack 0
  3545                           
  3546                           ; 2 bytes @ 0x18
  3547  000019                     	ds	1
  3548  00001A                     ??_ADC_GetConversion:
  3549  00001A                     ??_TMR0_Initialize:
  3550  00001A                     ?___lmul:
  3551                           	opt stack 0
  3552  00001A                     SWSPI_DAC_send_bits@data:
  3553                           	opt stack 0
  3554  00001A                     DATAEE_WriteByte@GIEBitValue:
  3555                           	opt stack 0
  3556  00001A                     isdigit@c:
  3557                           	opt stack 0
  3558  00001A                     isspace@c:
  3559                           	opt stack 0
  3560  00001A                     isupper@c:
  3561                           	opt stack 0
  3562  00001A                     ___awmod@divisor:
  3563                           	opt stack 0
  3564  00001A                     memset@c:
  3565                           	opt stack 0
  3566  00001A                     Make32bitsArray@data:
  3567                           	opt stack 0
  3568  00001A                     ___lmul@multiplier:
  3569                           	opt stack 0
  3570                           
  3571                           ; 4 bytes @ 0x19
  3572  00001A                     	ds	1
  3573  00001B                     ??_UART_Write_Text:
  3574  00001B                     ??_isalpha:
  3575  00001B                     BlinkOkLeds@state:
  3576                           	opt stack 0
  3577  00001B                     SWSPI_DAC_send_bits@count:
  3578                           	opt stack 0
  3579  00001B                     EepromWrite@data:
  3580                           	opt stack 0
  3581  00001B                     ___ftpack@exp:
  3582                           	opt stack 0
  3583  00001B                     frexp@eptr:
  3584                           	opt stack 0
  3585  00001B                     __div_to_l_@f2:
  3586                           	opt stack 0
  3587  00001B                     __tdiv_to_l_@f2:
  3588                           	opt stack 0
  3589  00001B                     ___ftge@ff2:
  3590                           	opt stack 0
  3591                           
  3592                           ; 3 bytes @ 0x1A
  3593  00001B                     	ds	1
  3594  00001C                     SWSPI_DAC_send_bits@phrType:
  3595                           	opt stack 0
  3596  00001C                     ADC_GetConversion@channel:
  3597                           	opt stack 0
  3598  00001C                     make8@dataLocation:
  3599                           	opt stack 0
  3600  00001C                     EepromWrite@address:
  3601                           	opt stack 0
  3602  00001C                     ___awmod@counter:
  3603                           	opt stack 0
  3604  00001C                     ___ftpack@sign:
  3605                           	opt stack 0
  3606  00001C                     _isalpha$3656:
  3607                           	opt stack 0
  3608  00001C                     BlinkOkLeds@idx:
  3609                           	opt stack 0
  3610  00001C                     memset@n:
  3611                           	opt stack 0
  3612  00001C                     ___lldiv@divisor:
  3613                           	opt stack 0
  3614                           
  3615                           ; 4 bytes @ 0x1B
  3616  00001C                     	ds	1
  3617  00001D                     ??_make8:
  3618  00001D                     ??___ftpack:
  3619  00001D                     ??_frexp:
  3620  00001D                     ___awmod@sign:
  3621                           	opt stack 0
  3622  00001D                     isalpha@c:
  3623                           	opt stack 0
  3624  00001D                     UART_Write_Text@i:
  3625                           	opt stack 0
  3626                           
  3627                           ; 2 bytes @ 0x1C
  3628  00001D                     	ds	1
  3629  00001E                     ??_Make32bitsArray:
  3630  00001E                     ??__tdiv_to_l_:
  3631  00001E                     ??___ftge:
  3632  00001E                     ?___awdiv:
  3633                           	opt stack 0
  3634  00001E                     ___awdiv@dividend:
  3635                           	opt stack 0
  3636  00001E                     memset@p:
  3637                           	opt stack 0
  3638  00001E                     ___lmul@multiplicand:
  3639                           	opt stack 0
  3640  00001E                     __div_to_l_@quot:
  3641                           	opt stack 0
  3642                           
  3643                           ; 4 bytes @ 0x1D
  3644  00001E                     	ds	1
  3645  00001F                     AdcSingleSample@chType:
  3646                           	opt stack 0
  3647                           
  3648                           ; 1 bytes @ 0x1E
  3649  00001F                     	ds	1
  3650  000020                     ?___awtoft:
  3651                           	opt stack 0
  3652  000020                     ?___lltoft:
  3653                           	opt stack 0
  3654  000020                     ?___lwtoft:
  3655                           	opt stack 0
  3656  000020                     Make32bitsArray@idx:
  3657                           	opt stack 0
  3658  000020                     ZeroArray@array:
  3659                           	opt stack 0
  3660  000020                     ___awdiv@divisor:
  3661                           	opt stack 0
  3662  000020                     ___awtoft@c:
  3663                           	opt stack 0
  3664  000020                     ___lwtoft@c:
  3665                           	opt stack 0
  3666  000020                     AdcSingleSample@numSamples:
  3667                           	opt stack 0
  3668  000020                     ___lldiv@quotient:
  3669                           	opt stack 0
  3670  000020                     ___lltoft@c:
  3671                           	opt stack 0
  3672                           
  3673                           ; 4 bytes @ 0x1F
  3674  000020                     	ds	1
  3675  000021                     StoreIntInEeprom@data:
  3676                           	opt stack 0
  3677  000021                     __tdiv_to_l_@quot:
  3678                           	opt stack 0
  3679                           
  3680                           ; 4 bytes @ 0x20
  3681  000021                     	ds	1
  3682  000022                     ___awdiv@counter:
  3683                           	opt stack 0
  3684  000022                     __div_to_l_@cntr:
  3685                           	opt stack 0
  3686  000022                     ZeroArray@size:
  3687                           	opt stack 0
  3688  000022                     ___lmul@product:
  3689                           	opt stack 0
  3690                           
  3691                           ; 4 bytes @ 0x21
  3692  000022                     	ds	1
  3693  000023                     ?___ftdiv:
  3694                           	opt stack 0
  3695  000023                     ___awdiv@sign:
  3696                           	opt stack 0
  3697  000023                     ___awtoft@sign:
  3698                           	opt stack 0
  3699  000023                     __div_to_l_@exp1:
  3700                           	opt stack 0
  3701  000023                     ___ftdiv@f1:
  3702                           	opt stack 0
  3703                           
  3704                           ; 3 bytes @ 0x22
  3705  000023                     	ds	1
  3706  000024                     ??___lltoft:
  3707  000024                     ___lldiv@counter:
  3708                           	opt stack 0
  3709  000024                     ___awdiv@quotient:
  3710                           	opt stack 0
  3711  000024                     AdcSingleSample@retNum:
  3712                           	opt stack 0
  3713  000024                     SWSPI_Synth_send_bits@data:
  3714                           	opt stack 0
  3715                           
  3716                           ; 4 bytes @ 0x23
  3717  000024                     	ds	1
  3718  000025                     StoreIntInEeprom@address:
  3719                           	opt stack 0
  3720  000025                     __tdiv_to_l_@cntr:
  3721                           	opt stack 0
  3722                           
  3723                           ; 1 bytes @ 0x24
  3724  000025                     	ds	1
  3725  000026                     ?___wmul:
  3726                           	opt stack 0
  3727  000026                     ?_strtol:
  3728                           	opt stack 0
  3729  000026                     __tdiv_to_l_@exp1:
  3730                           	opt stack 0
  3731  000026                     StoreIntInEeprom@numOfByes:
  3732                           	opt stack 0
  3733  000026                     ___wmul@multiplier:
  3734                           	opt stack 0
  3735  000026                     strtol@s:
  3736                           	opt stack 0
  3737  000026                     ___ftdiv@f2:
  3738                           	opt stack 0
  3739                           
  3740                           ; 3 bytes @ 0x25
  3741  000026                     	ds	2
  3742  000028                     AdcSingleSample@cType:
  3743                           	opt stack 0
  3744  000028                     StoreIntInEeprom@val:
  3745                           	opt stack 0
  3746  000028                     ___lltoft@exp:
  3747                           	opt stack 0
  3748  000028                     ___wmul@multiplicand:
  3749                           	opt stack 0
  3750  000028                     strtol@endptr:
  3751                           	opt stack 0
  3752  000028                     SWSPI_send_word@data:
  3753                           	opt stack 0
  3754                           
  3755                           ; 4 bytes @ 0x27
  3756  000028                     	ds	1
  3757  000029                     ??___ftdiv:
  3758  000029                     StoreIntInEeprom@idx:
  3759                           	opt stack 0
  3760                           
  3761                           ; 1 bytes @ 0x28
  3762  000029                     	ds	1
  3763  00002A                     ___wmul@product:
  3764                           	opt stack 0
  3765  00002A                     strtol@base:
  3766                           	opt stack 0
  3767                           
  3768                           ; 2 bytes @ 0x29
  3769  00002A                     	ds	2
  3770  00002C                     ??_strtol:
  3771  00002C                     ??___ftmul:
  3772  00002C                     SWSPI_send_word@dataSize:
  3773                           	opt stack 0
  3774                           
  3775                           ; 1 bytes @ 0x2B
  3776  00002C                     	ds	1
  3777  00002D                     SWSPI_send_word@datac:
  3778                           	opt stack 0
  3779                           
  3780                           ; 1 bytes @ 0x2C
  3781  00002D                     	ds	1
  3782  00002E                     SWSPI_send_word@idx:
  3783                           	opt stack 0
  3784                           
  3785                           ; 2 bytes @ 0x2D
  3786  00002E                     	ds	1
  3787  00002F                     ??_eval_poly:
  3788  00002F                     ___altoft@exp:
  3789                           	opt stack 0
  3790                           
  3791                           ; 1 bytes @ 0x2E
  3792  00002F                     	ds	1
  3793  000030                     SWSPI_send_word@phrType:
  3794                           	opt stack 0
  3795  000030                     ___altoft@sign:
  3796                           	opt stack 0
  3797                           
  3798                           ; 1 bytes @ 0x2F
  3799  000030                     	ds	1
  3800  000031                     tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           postinc0	equ	0xFEE
  3805                           wreg	equ	0xFE8
  3806                           postdec1	equ	0xFE5
  3807                           fsr1l	equ	0xFE1
  3808                           
  3809                           ; 1 bytes @ 0x30
  3810 ;;
  3811 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3812 ;;
  3813 ;; *************** function _main *****************
  3814 ;; Defined at:
  3815 ;;		line 13 in file "main.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;		None
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;		None
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  1    wreg      void 
  3822 ;; Registers used:
  3823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3829 ;;      Params:         0       0       0       0       0       0       0
  3830 ;;      Locals:         0       0       0       0       0       0       0
  3831 ;;      Temps:          0       0       0       0       0       0       0
  3832 ;;      Totals:         0       0       0       0       0       0       0
  3833 ;;Total ram usage:        0 bytes
  3834 ;; Hardware stack levels required when called:   11
  3835 ;; This function calls:
  3836 ;;		_BlinkOkLeds
  3837 ;;		_InitSystemApplicationManagers
  3838 ;;		_ReadSystemStatusFromEprom
  3839 ;;		_SampleAllChannels
  3840 ;;		_SampleSingleChannel
  3841 ;;		_SendUartSystemInitMessage
  3842 ;;		_SetMcuRunTime
  3843 ;;		_SetMcuSystem
  3844 ;;		_keepAliveSignalLed
  3845 ;;		_readUartByte
  3846 ;; This function is called by:
  3847 ;;		Startup code after reset
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text0
  3852  003D74                     __ptext0:
  3853                           	opt stack 0
  3854  003D74                     _main:
  3855                           	opt stack 20
  3856                           
  3857                           ;main.c: 16: SetMcuSystem();
  3858                           
  3859                           ;incstack = 0
  3860  003D74  EC14  F024         	call	_SetMcuSystem	;wreg free
  3861                           
  3862                           ;main.c: 19: InitSystemApplicationManagers();
  3863  003D78  ECD7  F023         	call	_InitSystemApplicationManagers	;wreg free
  3864                           
  3865                           ;main.c: 22: SendUartSystemInitMessage();
  3866  003D7C  EC21  F017         	call	_SendUartSystemInitMessage	;wreg free
  3867                           
  3868                           ;main.c: 25: ReadSystemStatusFromEprom();
  3869  003D80  EC2F  F01C         	call	_ReadSystemStatusFromEprom	;wreg free
  3870                           
  3871                           ;main.c: 27: BlinkOkLeds(OK_START_SYSTEM);
  3872  003D84  0E03               	movlw	3
  3873  003D86  EC7B  F01F         	call	_BlinkOkLeds
  3874  003D8A                     
  3875                           ;main.c: 31: {
  3876                           ;main.c: 32: readUartByte();
  3877  003D8A  ECE9  F007         	call	_readUartByte	;wreg free
  3878                           
  3879                           ;main.c: 34: if (TimerOneSecFlag == 1)
  3880  003D8E  0101               	movlb	1	; () banked
  3881  003D90  05DB               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  3882  003D92  A4D8               	btfss	status,2,c
  3883  003D94  D006               	goto	l1564
  3884                           
  3885                           ; BSR set to: 1
  3886                           ;main.c: 35: {
  3887                           ;main.c: 37: SetMcuRunTime();
  3888  003D96  EC2C  F021         	call	_SetMcuRunTime	;wreg free
  3889                           
  3890                           ;main.c: 38: TimerOneSecFlag = 0;
  3891  003D9A  0E00               	movlw	0
  3892  003D9C  0101               	movlb	1	; () banked
  3893  003D9E  6FDB               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  3894                           
  3895                           ;main.c: 39: }
  3896  003DA0  D7F4               	goto	l1563
  3897  003DA2                     l1564:
  3898                           
  3899                           ; BSR set to: 1
  3900                           ;main.c: 40: else if (TimerKeepAliveFlag == 1)
  3901                           
  3902                           ; BSR set to: 1
  3903  003DA2  05D9               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  3904  003DA4  A4D8               	btfss	status,2,c
  3905  003DA6  D006               	goto	l1566
  3906                           
  3907                           ; BSR set to: 1
  3908                           ;main.c: 41: {
  3909                           ;main.c: 42: keepAliveSignalLed();
  3910  003DA8  ECC0  F023         	call	_keepAliveSignalLed	;wreg free
  3911                           
  3912                           ;main.c: 43: TimerKeepAliveFlag = 0;
  3913  003DAC  0E00               	movlw	0
  3914  003DAE  0101               	movlb	1	; () banked
  3915  003DB0  6FD9               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  3916                           
  3917                           ;main.c: 44: }
  3918  003DB2  D7EB               	goto	l1563
  3919  003DB4                     l1566:
  3920                           
  3921                           ; BSR set to: 1
  3922                           ;main.c: 45: else if (TimertenSecFlag == 1)
  3923                           
  3924                           ; BSR set to: 1
  3925  003DB4  05D8               	decf	_TimertenSecFlag& (0+255),w,b	;volatile
  3926  003DB6  A4D8               	btfss	status,2,c
  3927  003DB8  D006               	goto	l1568
  3928                           
  3929                           ; BSR set to: 1
  3930                           ;main.c: 46: {
  3931                           ;main.c: 47: SampleAllChannels();
  3932  003DBA  EC0C  F011         	call	_SampleAllChannels	;wreg free
  3933                           
  3934                           ;main.c: 48: TimertenSecFlag = 0;
  3935  003DBE  0E00               	movlw	0
  3936  003DC0  0101               	movlb	1	; () banked
  3937  003DC2  6FD8               	movwf	_TimertenSecFlag& (0+255),b	;volatile
  3938                           
  3939                           ;main.c: 49: }
  3940  003DC4  D7E2               	goto	l1563
  3941  003DC6                     l1568:
  3942                           
  3943                           ; BSR set to: 1
  3944                           ;main.c: 50: else if (TimerSamplingFlag == 1)
  3945                           
  3946                           ; BSR set to: 1
  3947  003DC6  05DA               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  3948  003DC8  A4D8               	btfss	status,2,c
  3949  003DCA  D7DF               	goto	l1563
  3950                           
  3951                           ; BSR set to: 1
  3952                           ;main.c: 51: {
  3953                           ;main.c: 52: if(1 == needToSample)
  3954  003DCC  05D7               	decf	_needToSample& (0+255),w,b	;volatile
  3955  003DCE  A4D8               	btfss	status,2,c
  3956  003DD0  D7DC               	goto	l1563
  3957                           
  3958                           ; BSR set to: 1
  3959                           ;main.c: 53: {
  3960                           ;main.c: 54: SampleSingleChannel();
  3961  003DD2  EC4C  F00D         	call	_SampleSingleChannel	;wreg free
  3962  003DD6  D7D9               	goto	l1563
  3963  003DD8                     __end_of_main:
  3964                           	opt stack 0
  3965                           tblptru	equ	0xFF8
  3966                           tblptrh	equ	0xFF7
  3967                           tblptrl	equ	0xFF6
  3968                           tablat	equ	0xFF5
  3969                           postinc0	equ	0xFEE
  3970                           wreg	equ	0xFE8
  3971                           postdec1	equ	0xFE5
  3972                           fsr1l	equ	0xFE1
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function _readUartByte *****************
  3976 ;; Defined at:
  3977 ;;		line 28 in file "EusartApp.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;		None
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  idx             2  132[BANK1 ] int 
  3982 ;;  dest           50   82[BANK1 ] unsigned char [50]
  3983 ;;  chRec           1  134[BANK1 ] unsigned char 
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  1    wreg      void 
  3986 ;; Registers used:
  3987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3993 ;;      Params:         0       0       0       0       0       0       0
  3994 ;;      Locals:         0       0      53       0       0       0       0
  3995 ;;      Temps:          0       3       0       0       0       0       0
  3996 ;;      Totals:         0       3      53       0       0       0       0
  3997 ;;Total ram usage:       56 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    9
  4000 ;; This function calls:
  4001 ;;		_EUSART1_Read
  4002 ;;		_GroupCommon
  4003 ;;		_GroupRx
  4004 ;;		_GroupTx
  4005 ;;		_InitRxMessageParams
  4006 ;;		_UART_Write_Text
  4007 ;;		_sprintf
  4008 ;;		_toupper
  4009 ;; This function is called by:
  4010 ;;		_main
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           	psect	text1
  4015  000FD2                     __ptext1:
  4016                           	opt stack 0
  4017  000FD2                     _readUartByte:
  4018                           	opt stack 21
  4019                           
  4020                           ;EusartApp.c: 31: uint8_t chRec = (0);
  4021                           
  4022                           ;incstack = 0
  4023  000FD2  0E00               	movlw	0
  4024  000FD4  0101               	movlb	1	; () banked
  4025  000FD6  6F86               	movwf	readUartByte@chRec& (0+255),b
  4026                           
  4027                           ;EusartApp.c: 32: char dest[50];
  4028                           ;EusartApp.c: 34: switch(cState)
  4029  000FD8  D159               	goto	l275
  4030  000FDA                     
  4031                           ; BSR set to: 1
  4032                           ;EusartApp.c: 38: InitRxMessageParams();
  4033                           
  4034                           ; BSR set to: 1
  4035  000FDA  EC4F  F021         	call	_InitRxMessageParams	;wreg free
  4036                           
  4037                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  4038  000FDE  0E01               	movlw	1
  4039  000FE0  0101               	movlb	1	; () banked
  4040  000FE2  6FD4               	movwf	_cState& (0+255),b
  4041                           
  4042                           ;EusartApp.c: 40: break;
  4043  000FE4  0012               	return	
  4044  000FE6                     
  4045                           ; BSR set to: 1
  4046                           ;EusartApp.c: 44: chRec = EUSART1_Read();
  4047                           
  4048                           ; BSR set to: 1
  4049  000FE6  EC71  F021         	call	_EUSART1_Read	;wreg free
  4050  000FEA  0101               	movlb	1	; () banked
  4051  000FEC  6F86               	movwf	readUartByte@chRec& (0+255),b
  4052                           
  4053                           ; BSR set to: 1
  4054                           ;EusartApp.c: 46: if(chRec == (0x24))
  4055  000FEE  0E24               	movlw	36
  4056  000FF0  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4057  000FF2  A4D8               	btfss	status,2,c
  4058  000FF4  0012               	return	
  4059                           
  4060                           ; BSR set to: 1
  4061                           ;EusartApp.c: 47: {
  4062                           ;EusartApp.c: 48: cState = READ_STREAM;
  4063  000FF6  0E02               	movlw	2
  4064  000FF8  6FD4               	movwf	_cState& (0+255),b
  4065                           
  4066                           ; BSR set to: 1
  4067                           ;EusartApp.c: 49: }
  4068                           ;EusartApp.c: 50: break;
  4069  000FFA  0012               	return	
  4070  000FFC                     
  4071                           ; BSR set to: 1
  4072                           ;EusartApp.c: 54: if(eusart1RxCount > 0)
  4073                           
  4074                           ; BSR set to: 1
  4075  000FFC  51D5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  4076  000FFE  B4D8               	btfsc	status,2,c
  4077  001000  0012               	return	
  4078                           
  4079                           ; BSR set to: 1
  4080                           ;EusartApp.c: 55: {
  4081                           ;EusartApp.c: 56: chRec = EUSART1_Read();
  4082  001002  EC71  F021         	call	_EUSART1_Read	;wreg free
  4083  001006  0101               	movlb	1	; () banked
  4084  001008  6F86               	movwf	readUartByte@chRec& (0+255),b
  4085                           
  4086                           ; BSR set to: 1
  4087                           ;EusartApp.c: 57: if(chRec == (0))
  4088  00100A  5186               	movf	readUartByte@chRec& (0+255),w,b
  4089  00100C  B4D8               	btfsc	status,2,c
  4090  00100E  0012               	return	
  4091                           
  4092                           ; BSR set to: 1
  4093                           ;EusartApp.c: 61: else if(chRec == (0xd))
  4094                           
  4095                           ; BSR set to: 1
  4096                           
  4097                           ; BSR set to: 1
  4098                           ;EusartApp.c: 60: }
  4099                           
  4100                           ; BSR set to: 1
  4101                           ;EusartApp.c: 58: {
  4102                           ;EusartApp.c: 59: return;
  4103  001010  0E0D               	movlw	13
  4104  001012  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4105  001014  A4D8               	btfss	status,2,c
  4106  001016  D003               	goto	l285
  4107                           
  4108                           ; BSR set to: 1
  4109                           ;EusartApp.c: 62: {
  4110                           ;EusartApp.c: 63: cState = READ_GROUP;
  4111  001018  0E03               	movlw	3
  4112  00101A  6FD4               	movwf	_cState& (0+255),b
  4113                           
  4114                           ;EusartApp.c: 64: }
  4115  00101C  0012               	return	
  4116  00101E                     l285:
  4117                           
  4118                           ; BSR set to: 1
  4119                           ;EusartApp.c: 65: else
  4120                           ;EusartApp.c: 66: {
  4121                           ;EusartApp.c: 67: if(chRec != ' ')
  4122                           
  4123                           ; BSR set to: 1
  4124  00101E  0E20               	movlw	32
  4125  001020  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4126  001022  B4D8               	btfsc	status,2,c
  4127  001024  0012               	return	
  4128                           
  4129                           ; BSR set to: 1
  4130                           ;EusartApp.c: 68: {
  4131                           ;EusartApp.c: 69: rxMsgQueue[msgCount++] = chRec;
  4132  001026  51CE               	movf	_msgCount& (0+255),w,b
  4133  001028  0D01               	mullw	1
  4134  00102A  0E82               	movlw	low _rxMsgQueue
  4135  00102C  24F3               	addwf	prodl,w,c
  4136  00102E  6ED9               	movwf	fsr2l,c
  4137  001030  0E02               	movlw	high _rxMsgQueue
  4138  001032  20F4               	addwfc	prodh,w,c
  4139  001034  6EDA               	movwf	fsr2h,c
  4140  001036  C186  FFDF         	movff	readUartByte@chRec,indf2
  4141                           
  4142                           ; BSR set to: 1
  4143  00103A  2BCE               	incf	_msgCount& (0+255),f,b
  4144                           
  4145                           ; BSR set to: 1
  4146                           ;EusartApp.c: 76: }
  4147                           ;EusartApp.c: 77: break;
  4148                           
  4149                           ; BSR set to: 1
  4150                           ;EusartApp.c: 73: else
  4151                           ;EusartApp.c: 74: {
  4152                           ;EusartApp.c: 75: return;
  4153                           
  4154                           ; BSR set to: 1
  4155                           ;EusartApp.c: 70: }
  4156                           ;EusartApp.c: 71: }
  4157                           ;EusartApp.c: 72: }
  4158                           
  4159                           ; BSR set to: 1
  4160                           
  4161                           ; BSR set to: 1
  4162  00103C  0012               	return	
  4163  00103E                     
  4164                           ; BSR set to: 1
  4165                           ;EusartApp.c: 81: chRec = toupper(rxMsgQueue[0]);
  4166                           
  4167                           ; BSR set to: 1
  4168  00103E  0102               	movlb	2	; () banked
  4169  001040  5182               	movf	_rxMsgQueue& (0+255),w,b
  4170  001042  ECE2  F023         	call	_toupper
  4171  001046  0101               	movlb	1	; () banked
  4172  001048  6F86               	movwf	readUartByte@chRec& (0+255),b
  4173                           
  4174                           ;EusartApp.c: 83: switch(chRec)
  4175  00104A  D024               	goto	l290
  4176  00104C                     
  4177                           ; BSR set to: 1
  4178                           ;EusartApp.c: 87: group = RX_GROUP;
  4179                           
  4180                           ; BSR set to: 1
  4181  00104C  0E00               	movlw	0
  4182  00104E  6FD3               	movwf	_group& (0+255),b
  4183                           
  4184                           ;EusartApp.c: 88: cState = READ_REQUEST;
  4185  001050  0E04               	movlw	4
  4186  001052  6FD4               	movwf	_cState& (0+255),b
  4187                           
  4188                           ;EusartApp.c: 89: break;
  4189  001054  0012               	return	
  4190  001056                     
  4191                           ; BSR set to: 1
  4192                           ;EusartApp.c: 93: group = TX_GROUP;
  4193                           
  4194                           ; BSR set to: 1
  4195  001056  0E01               	movlw	1
  4196  001058  6FD3               	movwf	_group& (0+255),b
  4197                           
  4198                           ;EusartApp.c: 94: cState = READ_REQUEST;
  4199  00105A  0E04               	movlw	4
  4200  00105C  6FD4               	movwf	_cState& (0+255),b
  4201                           
  4202                           ;EusartApp.c: 95: break;
  4203  00105E  0012               	return	
  4204  001060                     
  4205                           ; BSR set to: 1
  4206                           ;EusartApp.c: 99: group = COMMON_GROUP;
  4207                           
  4208                           ; BSR set to: 1
  4209  001060  0E02               	movlw	2
  4210  001062  6FD3               	movwf	_group& (0+255),b
  4211                           
  4212                           ;EusartApp.c: 100: cState = READ_REQUEST;
  4213  001064  0E04               	movlw	4
  4214  001066  6FD4               	movwf	_cState& (0+255),b
  4215                           
  4216                           ;EusartApp.c: 101: break;
  4217  001068  0012               	return	
  4218  00106A                     
  4219                           ; BSR set to: 1
  4220                           ;EusartApp.c: 104: sprintf(dest, "NOT O.K \n\r");
  4221                           
  4222                           ; BSR set to: 1
  4223  00106A  0E52               	movlw	low readUartByte@dest
  4224  00106C  0100               	movlb	0	; () banked
  4225  00106E  6FBC               	movwf	sprintf@sp& (0+255),b
  4226  001070  0E01               	movlw	high readUartByte@dest
  4227  001072  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  4228  001074  0EBB               	movlw	low STR_10
  4229  001076  6FBE               	movwf	sprintf@f& (0+255),b
  4230  001078  0E7F               	movlw	high STR_10
  4231  00107A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  4232  00107C  EC70  F000         	call	_sprintf	;wreg free
  4233                           
  4234                           ;EusartApp.c: 105: UART_Write_Text(dest);
  4235  001080  0E52               	movlw	low readUartByte@dest
  4236  001082  6E19               	movwf	UART_Write_Text@text,c
  4237  001084  0E01               	movlw	high readUartByte@dest
  4238  001086  6E1A               	movwf	UART_Write_Text@text+1,c
  4239  001088  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  4240                           
  4241                           ;EusartApp.c: 106: cState = START_RX_MESSAGE_READ;
  4242  00108C  0E00               	movlw	0
  4243  00108E  0101               	movlb	1	; () banked
  4244  001090  6FD4               	movwf	_cState& (0+255),b
  4245                           
  4246                           ; BSR set to: 1
  4247                           ;EusartApp.c: 108: }
  4248                           
  4249                           ;EusartApp.c: 107: break;
  4250  001092  0012               	return	
  4251  001094                     l290:
  4252                           
  4253                           ; BSR set to: 1
  4254                           
  4255                           ; BSR set to: 1
  4256  001094  5186               	movf	readUartByte@chRec& (0+255),w,b
  4257                           
  4258                           ; Switch size 1, requested type "space"
  4259                           ; Number of cases is 3, Range of values is 82 to 84
  4260                           ; switch strategies available:
  4261                           ; Name         Instructions Cycles
  4262                           ; simple_byte           10     6 (average)
  4263                           ;	Chosen strategy is simple_byte
  4264  001096  0A52               	xorlw	82	; case 82
  4265  001098  B4D8               	btfsc	status,2,c
  4266  00109A  D7D8               	goto	l291
  4267  00109C  0A01               	xorlw	1	; case 83
  4268  00109E  B4D8               	btfsc	status,2,c
  4269  0010A0  D7DF               	goto	l294
  4270  0010A2  0A07               	xorlw	7	; case 84
  4271  0010A4  B4D8               	btfsc	status,2,c
  4272  0010A6  D7D7               	goto	l293
  4273  0010A8  D7E0               	goto	l295
  4274  0010AA                     
  4275                           ; BSR set to: 1
  4276                           ;EusartApp.c: 113: chRec = toupper(rxMsgQueue[1]);
  4277                           
  4278                           ; BSR set to: 1
  4279  0010AA  0102               	movlb	2	; () banked
  4280  0010AC  5183               	movf	(_rxMsgQueue+1)& (0+255),w,b
  4281  0010AE  ECE2  F023         	call	_toupper
  4282  0010B2  0101               	movlb	1	; () banked
  4283  0010B4  6F86               	movwf	readUartByte@chRec& (0+255),b
  4284                           
  4285                           ;EusartApp.c: 115: switch(group)
  4286  0010B6  D07C               	goto	l297
  4287  0010B8                     
  4288                           ; BSR set to: 1
  4289                           ;EusartApp.c: 119: if( chRec == 'I' || chRec == 'F' || chRec == 'Q' ||
  4290                           ;EusartApp.c: 120: chRec == 'X' || chRec == 'S' || chRec == 'C')
  4291                           
  4292                           ; BSR set to: 1
  4293  0010B8  0E49               	movlw	73
  4294  0010BA  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4295  0010BC  B4D8               	btfsc	status,2,c
  4296  0010BE  D014               	goto	u9810
  4297                           
  4298                           ; BSR set to: 1
  4299  0010C0  0E46               	movlw	70
  4300  0010C2  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4301  0010C4  B4D8               	btfsc	status,2,c
  4302  0010C6  D010               	goto	u9810
  4303                           
  4304                           ; BSR set to: 1
  4305  0010C8  0E51               	movlw	81
  4306  0010CA  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4307  0010CC  B4D8               	btfsc	status,2,c
  4308  0010CE  D00C               	goto	u9810
  4309                           
  4310                           ; BSR set to: 1
  4311  0010D0  0E58               	movlw	88
  4312  0010D2  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4313  0010D4  B4D8               	btfsc	status,2,c
  4314  0010D6  D008               	goto	u9810
  4315                           
  4316                           ; BSR set to: 1
  4317  0010D8  0E53               	movlw	83
  4318  0010DA  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4319  0010DC  B4D8               	btfsc	status,2,c
  4320  0010DE  D004               	goto	u9810
  4321                           
  4322                           ; BSR set to: 1
  4323  0010E0  0E43               	movlw	67
  4324  0010E2  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4325  0010E4  A4D8               	btfss	status,2,c
  4326  0010E6  D006               	goto	l299
  4327  0010E8                     u9810:
  4328                           
  4329                           ; BSR set to: 1
  4330                           ;EusartApp.c: 121: {
  4331                           ;EusartApp.c: 123: request = chRec - '0';
  4332                           
  4333                           ; BSR set to: 1
  4334  0010E8  5186               	movf	readUartByte@chRec& (0+255),w,b
  4335  0010EA  0FD0               	addlw	208
  4336  0010EC  6FD2               	movwf	_request& (0+255),b
  4337                           
  4338                           ; BSR set to: 1
  4339                           ;EusartApp.c: 124: cState = READ_DATA_SIZE;
  4340  0010EE  0E05               	movlw	5
  4341  0010F0  6FD4               	movwf	_cState& (0+255),b
  4342                           
  4343                           ;EusartApp.c: 126: }
  4344  0010F2  0012               	return	
  4345  0010F4                     l299:
  4346                           
  4347                           ; BSR set to: 1
  4348                           ;EusartApp.c: 127: else
  4349                           ;EusartApp.c: 128: {
  4350                           ;EusartApp.c: 129: UART_Write_Text("NOT OK \n\r");
  4351                           
  4352                           ; BSR set to: 1
  4353  0010F4  0ED0               	movlw	low STR_1
  4354  0010F6  6E19               	movwf	UART_Write_Text@text,c
  4355  0010F8  0E7F               	movlw	high STR_1
  4356  0010FA  6E1A               	movwf	UART_Write_Text@text+1,c
  4357  0010FC  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  4358                           
  4359                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  4360  001100  0E00               	movlw	0
  4361  001102  0101               	movlb	1	; () banked
  4362  001104  6FD4               	movwf	_cState& (0+255),b
  4363                           
  4364                           ; BSR set to: 1
  4365                           ;EusartApp.c: 131: }
  4366                           ;EusartApp.c: 132: return;
  4367                           
  4368                           ; BSR set to: 1
  4369  001106  0012               	return	
  4370  001108                     
  4371                           ; BSR set to: 1
  4372                           ;EusartApp.c: 136: if(chRec == 'I' || chRec == 'F' || chRec == 'Q' || chRec == 'X' || ch
      +                          Rec == 'B'
  4373                           ;EusartApp.c: 137: || chRec == 'S')
  4374                           
  4375                           ; BSR set to: 1
  4376  001108  0E49               	movlw	73
  4377  00110A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4378  00110C  B4D8               	btfsc	status,2,c
  4379  00110E  D014               	goto	u9870
  4380                           
  4381                           ; BSR set to: 1
  4382  001110  0E46               	movlw	70
  4383  001112  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4384  001114  B4D8               	btfsc	status,2,c
  4385  001116  D010               	goto	u9870
  4386                           
  4387                           ; BSR set to: 1
  4388  001118  0E51               	movlw	81
  4389  00111A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4390  00111C  B4D8               	btfsc	status,2,c
  4391  00111E  D00C               	goto	u9870
  4392                           
  4393                           ; BSR set to: 1
  4394  001120  0E58               	movlw	88
  4395  001122  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4396  001124  B4D8               	btfsc	status,2,c
  4397  001126  D008               	goto	u9870
  4398                           
  4399                           ; BSR set to: 1
  4400  001128  0E42               	movlw	66
  4401  00112A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4402  00112C  B4D8               	btfsc	status,2,c
  4403  00112E  D004               	goto	u9870
  4404                           
  4405                           ; BSR set to: 1
  4406  001130  0E53               	movlw	83
  4407  001132  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4408  001134  A4D8               	btfss	status,2,c
  4409  001136  D006               	goto	l304
  4410  001138                     u9870:
  4411                           
  4412                           ; BSR set to: 1
  4413                           ;EusartApp.c: 138: {
  4414                           ;EusartApp.c: 139: request = (chRec - '0');
  4415                           
  4416                           ; BSR set to: 1
  4417  001138  5186               	movf	readUartByte@chRec& (0+255),w,b
  4418  00113A  0FD0               	addlw	208
  4419  00113C  6FD2               	movwf	_request& (0+255),b
  4420                           
  4421                           ; BSR set to: 1
  4422                           ;EusartApp.c: 140: cState = READ_DATA_SIZE;
  4423  00113E  0E05               	movlw	5
  4424  001140  6FD4               	movwf	_cState& (0+255),b
  4425                           
  4426                           ; BSR set to: 1
  4427                           ;EusartApp.c: 142: }
  4428                           
  4429                           ; BSR set to: 1
  4430                           ;EusartApp.c: 141: return;
  4431  001142  0012               	return	
  4432  001144                     l304:
  4433                           
  4434                           ; BSR set to: 1
  4435                           ;EusartApp.c: 143: else
  4436                           ;EusartApp.c: 144: {
  4437                           ;EusartApp.c: 145: UART_Write_Text("NOT OK \n\r");
  4438                           
  4439                           ; BSR set to: 1
  4440  001144  0ED0               	movlw	low STR_1
  4441  001146  6E19               	movwf	UART_Write_Text@text,c
  4442  001148  0E7F               	movlw	high STR_1
  4443  00114A  6E1A               	movwf	UART_Write_Text@text+1,c
  4444  00114C  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  4445                           
  4446                           ;EusartApp.c: 146: cState = START_RX_MESSAGE_READ;
  4447  001150  0E00               	movlw	0
  4448  001152  0101               	movlb	1	; () banked
  4449  001154  6FD4               	movwf	_cState& (0+255),b
  4450                           
  4451                           ; BSR set to: 1
  4452                           ;EusartApp.c: 147: }
  4453                           ;EusartApp.c: 148: break;
  4454  001156  0012               	return	
  4455  001158                     
  4456                           ; BSR set to: 1
  4457                           ;EusartApp.c: 152: if(chRec == 'H' || chRec == 'L' || chRec == 'T' || chRec == 'A' || ch
      +                          Rec == 'U'
  4458                           ;EusartApp.c: 153: || chRec == 'Q' || chRec == 'V')
  4459                           
  4460                           ; BSR set to: 1
  4461  001158  0E48               	movlw	72
  4462  00115A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4463  00115C  B4D8               	btfsc	status,2,c
  4464  00115E  D018               	goto	u9940
  4465                           
  4466                           ; BSR set to: 1
  4467  001160  0E4C               	movlw	76
  4468  001162  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4469  001164  B4D8               	btfsc	status,2,c
  4470  001166  D014               	goto	u9940
  4471                           
  4472                           ; BSR set to: 1
  4473  001168  0E54               	movlw	84
  4474  00116A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4475  00116C  B4D8               	btfsc	status,2,c
  4476  00116E  D010               	goto	u9940
  4477                           
  4478                           ; BSR set to: 1
  4479  001170  0E41               	movlw	65
  4480  001172  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4481  001174  B4D8               	btfsc	status,2,c
  4482  001176  D00C               	goto	u9940
  4483                           
  4484                           ; BSR set to: 1
  4485  001178  0E55               	movlw	85
  4486  00117A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4487  00117C  B4D8               	btfsc	status,2,c
  4488  00117E  D008               	goto	u9940
  4489                           
  4490                           ; BSR set to: 1
  4491  001180  0E51               	movlw	81
  4492  001182  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4493  001184  B4D8               	btfsc	status,2,c
  4494  001186  D004               	goto	u9940
  4495                           
  4496                           ; BSR set to: 1
  4497  001188  0E56               	movlw	86
  4498  00118A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4499  00118C  A4D8               	btfss	status,2,c
  4500  00118E  D006               	goto	l310
  4501  001190                     u9940:
  4502                           
  4503                           ; BSR set to: 1
  4504                           ;EusartApp.c: 154: {
  4505                           ;EusartApp.c: 155: request = (chRec - '0');
  4506                           
  4507                           ; BSR set to: 1
  4508  001190  5186               	movf	readUartByte@chRec& (0+255),w,b
  4509  001192  0FD0               	addlw	208
  4510  001194  6FD2               	movwf	_request& (0+255),b
  4511                           
  4512                           ; BSR set to: 1
  4513                           ;EusartApp.c: 156: cState = READ_DATA_SIZE;
  4514  001196  0E05               	movlw	5
  4515  001198  6FD4               	movwf	_cState& (0+255),b
  4516                           
  4517                           ;EusartApp.c: 157: }
  4518  00119A  0012               	return	
  4519  00119C                     l310:
  4520                           
  4521                           ; BSR set to: 1
  4522                           ;EusartApp.c: 158: else
  4523                           ;EusartApp.c: 159: {
  4524                           ;EusartApp.c: 160: UART_Write_Text("NOT OK \n\r");
  4525                           
  4526                           ; BSR set to: 1
  4527  00119C  0ED0               	movlw	low STR_1
  4528  00119E  6E19               	movwf	UART_Write_Text@text,c
  4529  0011A0  0E7F               	movlw	high STR_1
  4530  0011A2  6E1A               	movwf	UART_Write_Text@text+1,c
  4531  0011A4  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  4532                           
  4533                           ;EusartApp.c: 161: cState = START_RX_MESSAGE_READ;
  4534  0011A8  0E00               	movlw	0
  4535  0011AA  0101               	movlb	1	; () banked
  4536  0011AC  6FD4               	movwf	_cState& (0+255),b
  4537                           
  4538                           ; BSR set to: 1
  4539                           ;EusartApp.c: 162: }
  4540                           ;EusartApp.c: 163: }
  4541  0011AE  0012               	return	
  4542  0011B0                     l297:
  4543                           
  4544                           ; BSR set to: 1
  4545                           
  4546                           ; BSR set to: 1
  4547  0011B0  51D3               	movf	_group& (0+255),w,b
  4548                           
  4549                           ; Switch size 1, requested type "space"
  4550                           ; Number of cases is 3, Range of values is 0 to 2
  4551                           ; switch strategies available:
  4552                           ; Name         Instructions Cycles
  4553                           ; simple_byte           10     6 (average)
  4554                           ;	Chosen strategy is simple_byte
  4555  0011B2  0A00               	xorlw	0	; case 0
  4556  0011B4  B4D8               	btfsc	status,2,c
  4557  0011B6  D780               	goto	l298
  4558  0011B8  0A01               	xorlw	1	; case 1
  4559  0011BA  B4D8               	btfsc	status,2,c
  4560  0011BC  D7A5               	goto	l303
  4561  0011BE  0A03               	xorlw	3	; case 2
  4562  0011C0  A4D8               	btfss	status,2,c
  4563                           
  4564                           ; BSR set to: 1
  4565                           ;EusartApp.c: 164: return;
  4566  0011C2  0012               	return	
  4567  0011C4  D7C9               	goto	l309
  4568  0011C6                     
  4569                           ; BSR set to: 1
  4570                           ;EusartApp.c: 168: dataSize = msgCount - 2;
  4571                           
  4572                           ; BSR set to: 1
  4573  0011C6  51CE               	movf	_msgCount& (0+255),w,b
  4574  0011C8  0FFE               	addlw	254
  4575  0011CA  6FD1               	movwf	_dataSize& (0+255),b
  4576                           
  4577                           ; BSR set to: 1
  4578                           ;EusartApp.c: 169: rxMsgData[(0x0)] = dataSize;
  4579  0011CC  C1D1  F26E         	movff	_dataSize,_rxMsgData
  4580                           
  4581                           ; BSR set to: 1
  4582                           ;EusartApp.c: 170: if(dataSize == 0)
  4583  0011D0  51D1               	movf	_dataSize& (0+255),w,b
  4584  0011D2  A4D8               	btfss	status,2,c
  4585  0011D4  D003               	goto	l315
  4586                           
  4587                           ; BSR set to: 1
  4588                           ;EusartApp.c: 171: {
  4589                           ;EusartApp.c: 172: cState = JUMP_FUNCTION;
  4590  0011D6  0E08               	movlw	8
  4591  0011D8  6FD4               	movwf	_cState& (0+255),b
  4592                           
  4593                           ;EusartApp.c: 173: }
  4594  0011DA  0012               	return	
  4595  0011DC                     l315:
  4596                           
  4597                           ; BSR set to: 1
  4598                           ;EusartApp.c: 174: else
  4599                           ;EusartApp.c: 175: {
  4600                           ;EusartApp.c: 176: cState = READ_DATA;
  4601                           
  4602                           ; BSR set to: 1
  4603  0011DC  0E06               	movlw	6
  4604  0011DE  6FD4               	movwf	_cState& (0+255),b
  4605                           
  4606                           ; BSR set to: 1
  4607                           ;EusartApp.c: 177: }
  4608                           ;EusartApp.c: 179: break;
  4609  0011E0  0012               	return	
  4610  0011E2                     
  4611                           ; BSR set to: 1
  4612                           ;EusartApp.c: 183: for(int idx = 1; idx < dataSize + 1; idx++)
  4613                           
  4614                           ; BSR set to: 1
  4615  0011E2  0E00               	movlw	0
  4616  0011E4  6F85               	movwf	(readUartByte@idx+1)& (0+255),b
  4617  0011E6  0E01               	movlw	1
  4618  0011E8  6F84               	movwf	readUartByte@idx& (0+255),b
  4619  0011EA  D01B               	goto	l318
  4620  0011EC                     
  4621                           ;EusartApp.c: 184: {
  4622                           ;EusartApp.c: 185: rxMsgData[idx] = rxMsgQueue[(0x2) + idx - 1];
  4623                           
  4624                           ; BSR set to: 1
  4625  0011EC  0E01               	movlw	1
  4626  0011EE  0101               	movlb	1	; () banked
  4627  0011F0  2584               	addwf	readUartByte@idx& (0+255),w,b
  4628  0011F2  0100               	movlb	0	; () banked
  4629  0011F4  6FEB               	movwf	??_readUartByte& (0+255),b
  4630  0011F6  0E00               	movlw	0
  4631  0011F8  0101               	movlb	1	; () banked
  4632  0011FA  2185               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  4633  0011FC  0100               	movlb	0	; () banked
  4634  0011FE  6FEC               	movwf	(??_readUartByte+1)& (0+255),b
  4635  001200  0E82               	movlw	low _rxMsgQueue
  4636  001202  25EB               	addwf	??_readUartByte& (0+255),w,b
  4637  001204  6ED9               	movwf	fsr2l,c
  4638  001206  0E02               	movlw	high _rxMsgQueue
  4639  001208  21EC               	addwfc	(??_readUartByte+1)& (0+255),w,b
  4640  00120A  6EDA               	movwf	fsr2h,c
  4641  00120C  0E6E               	movlw	low _rxMsgData
  4642  00120E  0101               	movlb	1	; () banked
  4643  001210  2584               	addwf	readUartByte@idx& (0+255),w,b
  4644  001212  6EE1               	movwf	fsr1l,c
  4645  001214  0E02               	movlw	high _rxMsgData
  4646  001216  2185               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  4647  001218  6EE2               	movwf	fsr1h,c
  4648  00121A  CFDF FFE7          	movff	indf2,indf1
  4649                           
  4650                           ; BSR set to: 1
  4651  00121E  4B84               	infsnz	readUartByte@idx& (0+255),f,b
  4652  001220  2B85               	incf	(readUartByte@idx+1)& (0+255),f,b
  4653  001222                     l318:
  4654                           
  4655                           ; BSR set to: 1
  4656                           
  4657                           ; BSR set to: 1
  4658  001222  51D1               	movf	_dataSize& (0+255),w,b
  4659  001224  0100               	movlb	0	; () banked
  4660  001226  6FEB               	movwf	??_readUartByte& (0+255),b
  4661  001228  6BEC               	clrf	(??_readUartByte+1)& (0+255),b
  4662  00122A  0E01               	movlw	1
  4663  00122C  27EB               	addwf	??_readUartByte& (0+255),f,b
  4664  00122E  0E00               	movlw	0
  4665  001230  23EC               	addwfc	(??_readUartByte+1)& (0+255),f,b
  4666  001232  51EB               	movf	??_readUartByte& (0+255),w,b
  4667  001234  0101               	movlb	1	; () banked
  4668  001236  5D84               	subwf	readUartByte@idx& (0+255),w,b
  4669  001238  5185               	movf	(readUartByte@idx+1)& (0+255),w,b
  4670  00123A  0A80               	xorlw	128
  4671  00123C  0100               	movlb	0	; () banked
  4672  00123E  6FED               	movwf	(??_readUartByte+2)& (0+255),b
  4673  001240  51EC               	movf	(??_readUartByte+1)& (0+255),w,b
  4674  001242  0A80               	xorlw	128
  4675  001244  59ED               	subwfb	(??_readUartByte+2)& (0+255),w,b
  4676  001246  A0D8               	btfss	status,0,c
  4677  001248  D7D1               	goto	l319
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;EusartApp.c: 186: }
  4681                           ;EusartApp.c: 188: cState = JUMP_FUNCTION;
  4682                           
  4683                           ; BSR set to: 0
  4684  00124A  0E08               	movlw	8
  4685  00124C  0101               	movlb	1	; () banked
  4686  00124E  6FD4               	movwf	_cState& (0+255),b
  4687                           
  4688                           ;EusartApp.c: 189: break;
  4689  001250  0012               	return	
  4690  001252                     
  4691                           ; BSR set to: 1
  4692                           ;EusartApp.c: 193: groupsArray[group](request, rxMsgData);
  4693                           
  4694                           ; BSR set to: 1
  4695  001252  51D3               	movf	_group& (0+255),w,b
  4696  001254  0D02               	mullw	2
  4697  001256  0EDC               	movlw	low _groupsArray
  4698  001258  24F3               	addwf	prodl,w,c
  4699  00125A  6ED9               	movwf	fsr2l,c
  4700  00125C  0E01               	movlw	high _groupsArray
  4701  00125E  20F4               	addwfc	prodh,w,c
  4702  001260  6EDA               	movwf	fsr2h,c
  4703  001262  D801               	call	u9978
  4704  001264  D00F               	goto	u9979
  4705  001266                     u9978:
  4706  001266  0005               	push	
  4707  001268  6EFA               	movwf	pclath,c
  4708  00126A  50DE               	movf	postinc2,w,c
  4709  00126C  6EFD               	movwf	tosl,c
  4710  00126E  50DE               	movf	postinc2,w,c
  4711  001270  6EFE               	movwf	tosh,c
  4712  001272  50F8               	movf	tblptru,w,c
  4713  001274  6EFF               	movwf	tosu,c
  4714  001276  50FA               	movf	pclath,w,c
  4715  001278  0E6E               	movlw	low _rxMsgData
  4716  00127A  6F50               	movwf	GroupCommon@data& (0+255),b
  4717  00127C  0E02               	movlw	high _rxMsgData
  4718  00127E  6F51               	movwf	(GroupCommon@data+1)& (0+255),b
  4719  001280  51D2               	movf	_request& (0+255),w,b
  4720  001282  0012               	return		;indir
  4721  001284                     u9979:
  4722                           
  4723                           ;EusartApp.c: 194: cState = START_RX_MESSAGE_READ;
  4724  001284  0E00               	movlw	0
  4725  001286  0101               	movlb	1	; () banked
  4726  001288  6FD4               	movwf	_cState& (0+255),b
  4727                           
  4728                           ; BSR set to: 1
  4729                           ;EusartApp.c: 196: }
  4730                           
  4731                           ;EusartApp.c: 195: break;
  4732  00128A  0012               	return	
  4733  00128C                     l275:
  4734                           
  4735                           ; BSR set to: 1
  4736                           
  4737                           ; BSR set to: 1
  4738  00128C  51D4               	movf	_cState& (0+255),w,b
  4739                           
  4740                           ; Switch size 1, requested type "space"
  4741                           ; Number of cases is 8, Range of values is 0 to 8
  4742                           ; switch strategies available:
  4743                           ; Name         Instructions Cycles
  4744                           ; simple_byte           25    13 (average)
  4745                           ;	Chosen strategy is simple_byte
  4746  00128E  0A00               	xorlw	0	; case 0
  4747  001290  B4D8               	btfsc	status,2,c
  4748  001292  D6A3               	goto	l276
  4749  001294  0A01               	xorlw	1	; case 1
  4750  001296  B4D8               	btfsc	status,2,c
  4751  001298  D6A6               	goto	l278
  4752  00129A  0A03               	xorlw	3	; case 2
  4753  00129C  B4D8               	btfsc	status,2,c
  4754  00129E  D6AE               	goto	l280
  4755  0012A0  0A01               	xorlw	1	; case 3
  4756  0012A2  B4D8               	btfsc	status,2,c
  4757  0012A4  D6CC               	goto	l289
  4758  0012A6  0A07               	xorlw	7	; case 4
  4759  0012A8  B4D8               	btfsc	status,2,c
  4760  0012AA  D6FF               	goto	l296
  4761  0012AC  0A01               	xorlw	1	; case 5
  4762  0012AE  B4D8               	btfsc	status,2,c
  4763  0012B0  D78A               	goto	l314
  4764  0012B2  0A03               	xorlw	3	; case 6
  4765  0012B4  B4D8               	btfsc	status,2,c
  4766  0012B6  D795               	goto	l317
  4767  0012B8  0A0E               	xorlw	14	; case 8
  4768  0012BA  A4D8               	btfss	status,2,c
  4769  0012BC  0012               	return	
  4770  0012BE  D7C9               	goto	l321
  4771  0012C0                     __end_of_readUartByte:
  4772                           	opt stack 0
  4773                           tosu	equ	0xFFF
  4774                           tosh	equ	0xFFE
  4775                           tosl	equ	0xFFD
  4776                           pclath	equ	0xFFA
  4777                           tblptru	equ	0xFF8
  4778                           tblptrh	equ	0xFF7
  4779                           tblptrl	equ	0xFF6
  4780                           tablat	equ	0xFF5
  4781                           prodh	equ	0xFF4
  4782                           prodl	equ	0xFF3
  4783                           postinc0	equ	0xFEE
  4784                           wreg	equ	0xFE8
  4785                           indf1	equ	0xFE7
  4786                           postdec1	equ	0xFE5
  4787                           fsr1h	equ	0xFE2
  4788                           fsr1l	equ	0xFE1
  4789                           indf2	equ	0xFDF
  4790                           postinc2	equ	0xFDE
  4791                           fsr2h	equ	0xFDA
  4792                           fsr2l	equ	0xFD9
  4793                           status	equ	0xFD8
  4794                           
  4795 ;; *************** function _InitRxMessageParams *****************
  4796 ;; Defined at:
  4797 ;;		line 199 in file "EusartApp.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;		None
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;		None
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      void 
  4804 ;; Registers used:
  4805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4811 ;;      Params:         0       0       0       0       0       0       0
  4812 ;;      Locals:         0       0       0       0       0       0       0
  4813 ;;      Temps:          0       0       0       0       0       0       0
  4814 ;;      Totals:         0       0       0       0       0       0       0
  4815 ;;Total ram usage:        0 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    5
  4818 ;; This function calls:
  4819 ;;		_ZeroArray
  4820 ;; This function is called by:
  4821 ;;		_readUartByte
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           	psect	text2
  4826  00429E                     __ptext2:
  4827                           	opt stack 0
  4828  00429E                     _InitRxMessageParams:
  4829                           	opt stack 24
  4830                           
  4831                           ;EusartApp.c: 201: group = 0;
  4832                           
  4833                           ; BSR set to: 1
  4834                           ;incstack = 0
  4835  00429E  0E00               	movlw	0
  4836  0042A0  0101               	movlb	1	; () banked
  4837  0042A2  6FD3               	movwf	_group& (0+255),b
  4838                           
  4839                           ;EusartApp.c: 202: request = 0;
  4840  0042A4  0E00               	movlw	0
  4841  0042A6  6FD2               	movwf	_request& (0+255),b
  4842                           
  4843                           ;EusartApp.c: 203: msgCount = 0;
  4844  0042A8  0E00               	movlw	0
  4845  0042AA  6FCE               	movwf	_msgCount& (0+255),b
  4846                           
  4847                           ;EusartApp.c: 204: dataSize = 0;
  4848  0042AC  0E00               	movlw	0
  4849  0042AE  6FD1               	movwf	_dataSize& (0+255),b
  4850                           
  4851                           ;EusartApp.c: 205: crcCalc = 0;
  4852  0042B0  0E00               	movlw	0
  4853  0042B2  6FD0               	movwf	_crcCalc& (0+255),b
  4854                           
  4855                           ;EusartApp.c: 206: crcGiven = 0;
  4856  0042B4  0E00               	movlw	0
  4857  0042B6  6FCF               	movwf	_crcGiven& (0+255),b
  4858                           
  4859                           ; BSR set to: 1
  4860                           ;EusartApp.c: 207: ZeroArray(rxMsgQueue, (0x14));
  4861  0042B8  0E82               	movlw	low _rxMsgQueue
  4862  0042BA  6E20               	movwf	ZeroArray@array,c
  4863  0042BC  0E02               	movlw	high _rxMsgQueue
  4864  0042BE  6E21               	movwf	ZeroArray@array+1,c
  4865  0042C0  0E00               	movlw	0
  4866  0042C2  6E23               	movwf	ZeroArray@size+1,c
  4867  0042C4  0E14               	movlw	20
  4868  0042C6  6E22               	movwf	ZeroArray@size,c
  4869  0042C8  EC96  F023         	call	_ZeroArray
  4870                           
  4871                           ;EusartApp.c: 208: ZeroArray(rxMsgData, (0x14));
  4872  0042CC  0E6E               	movlw	low _rxMsgData
  4873  0042CE  6E20               	movwf	ZeroArray@array,c
  4874  0042D0  0E02               	movlw	high _rxMsgData
  4875  0042D2  6E21               	movwf	ZeroArray@array+1,c
  4876  0042D4  0E00               	movlw	0
  4877  0042D6  6E23               	movwf	ZeroArray@size+1,c
  4878  0042D8  0E14               	movlw	20
  4879  0042DA  6E22               	movwf	ZeroArray@size,c
  4880  0042DC  EC96  F023         	call	_ZeroArray	;wreg free
  4881  0042E0  0012               	return		;funcret
  4882  0042E2                     __end_of_InitRxMessageParams:
  4883                           	opt stack 0
  4884                           tosu	equ	0xFFF
  4885                           tosh	equ	0xFFE
  4886                           tosl	equ	0xFFD
  4887                           pclath	equ	0xFFA
  4888                           tblptru	equ	0xFF8
  4889                           tblptrh	equ	0xFF7
  4890                           tblptrl	equ	0xFF6
  4891                           tablat	equ	0xFF5
  4892                           prodh	equ	0xFF4
  4893                           prodl	equ	0xFF3
  4894                           postinc0	equ	0xFEE
  4895                           wreg	equ	0xFE8
  4896                           indf1	equ	0xFE7
  4897                           postdec1	equ	0xFE5
  4898                           fsr1h	equ	0xFE2
  4899                           fsr1l	equ	0xFE1
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8
  4905                           
  4906 ;; *************** function _GroupCommon *****************
  4907 ;; Defined at:
  4908 ;;		line 96 in file "MessageFunctions.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  request         1    wreg     enum E6
  4911 ;;  data            2   80[BANK1 ] PTR unsigned char 
  4912 ;;		 -> rxMsgData(20), 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  request         1  131[BANK0 ] enum E6
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      void 
  4917 ;; Registers used:
  4918 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4924 ;;      Params:         0       0       2       0       0       0       0
  4925 ;;      Locals:         0       1       0       0       0       0       0
  4926 ;;      Temps:          0       0       0       0       0       0       0
  4927 ;;      Totals:         0       1       2       0       0       0       0
  4928 ;;Total ram usage:        3 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:    8
  4931 ;; This function calls:
  4932 ;;		_PrintHelpScreen
  4933 ;;		_PrintSystemStatus
  4934 ;;		_SaveSystemStatus
  4935 ;;		_SetUartMode
  4936 ;;		_SetUartRefrashRate
  4937 ;;		_set_system_type
  4938 ;;		_testLeds
  4939 ;; This function is called by:
  4940 ;;		_readUartByte
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           	psect	text3
  4945  003AE4                     __ptext3:
  4946                           	opt stack 0
  4947  003AE4                     _GroupCommon:
  4948                           	opt stack 21
  4949                           
  4950                           ;incstack = 0
  4951                           ;GroupCommon@request stored from wreg
  4952  003AE4  0100               	movlb	0	; () banked
  4953  003AE6  6FE3               	movwf	GroupCommon@request& (0+255),b
  4954                           
  4955                           ;MessageFunctions.c: 98: switch (request)
  4956  003AE8  D021               	goto	l1236
  4957  003AEA                     
  4958                           ;MessageFunctions.c: 101: PrintHelpScreen();
  4959  003AEA  EC61  F006         	call	_PrintHelpScreen	;wreg free
  4960                           
  4961                           ;MessageFunctions.c: 102: break;
  4962  003AEE  0012               	return	
  4963  003AF0                     
  4964                           ;MessageFunctions.c: 105: testLeds();
  4965  003AF0  ECEC  F01E         	call	_testLeds	;wreg free
  4966                           
  4967                           ;MessageFunctions.c: 106: break;
  4968  003AF4  0012               	return	
  4969  003AF6                     
  4970                           ;MessageFunctions.c: 109: set_system_type(data);
  4971  003AF6  C150  F077         	movff	GroupCommon@data,set_system_type@data
  4972  003AFA  C151  F078         	movff	GroupCommon@data+1,set_system_type@data+1
  4973  003AFE  ECBB  F01A         	call	_set_system_type	;wreg free
  4974                           
  4975                           ;MessageFunctions.c: 111: break;
  4976  003B02  0012               	return	
  4977  003B04                     
  4978                           ;MessageFunctions.c: 114: PrintSystemStatus();
  4979  003B04  ECAA  F019         	call	_PrintSystemStatus	;wreg free
  4980                           
  4981                           ;MessageFunctions.c: 115: break;
  4982  003B08  0012               	return	
  4983  003B0A                     
  4984                           ;MessageFunctions.c: 118: SetUartRefrashRate(data);
  4985  003B0A  C150  F077         	movff	GroupCommon@data,SetUartRefrashRate@data
  4986  003B0E  C151  F078         	movff	GroupCommon@data+1,SetUartRefrashRate@data+1
  4987  003B12  EC1C  F01F         	call	_SetUartRefrashRate	;wreg free
  4988                           
  4989                           ;MessageFunctions.c: 119: break;
  4990  003B16  0012               	return	
  4991  003B18                     
  4992                           ;MessageFunctions.c: 122: SetUartMode(data);
  4993  003B18  C150  F077         	movff	GroupCommon@data,SetUartMode@data
  4994  003B1C  C151  F078         	movff	GroupCommon@data+1,SetUartMode@data+1
  4995  003B20  EC1F  F01E         	call	_SetUartMode	;wreg free
  4996                           
  4997                           ;MessageFunctions.c: 123: break;
  4998  003B24  0012               	return	
  4999  003B26                     
  5000                           ;MessageFunctions.c: 126: SaveSystemStatus();
  5001  003B26  ECF8  F01C         	call	_SaveSystemStatus	;wreg free
  5002                           
  5003                           ;MessageFunctions.c: 132: }
  5004                           
  5005                           ;MessageFunctions.c: 131: break;
  5006                           
  5007                           ;MessageFunctions.c: 130: default:
  5008                           
  5009                           ;MessageFunctions.c: 127: break;
  5010  003B2A  0012               	return	
  5011  003B2C                     l1236:
  5012  003B2C  0100               	movlb	0	; () banked
  5013  003B2E  51E3               	movf	GroupCommon@request& (0+255),w,b
  5014                           
  5015                           ; Switch size 1, requested type "space"
  5016                           ; Number of cases is 7, Range of values is 17 to 38
  5017                           ; switch strategies available:
  5018                           ; Name         Instructions Cycles
  5019                           ; simple_byte           22    12 (average)
  5020                           ;	Chosen strategy is simple_byte
  5021  003B30  0A11               	xorlw	17	; case 17
  5022  003B32  B4D8               	btfsc	status,2,c
  5023  003B34  D7F1               	goto	l1243
  5024  003B36  0A09               	xorlw	9	; case 24
  5025  003B38  B4D8               	btfsc	status,2,c
  5026  003B3A  D7D7               	goto	l1237
  5027  003B3C  0A04               	xorlw	4	; case 28
  5028  003B3E  B4D8               	btfsc	status,2,c
  5029  003B40  D7D7               	goto	l1239
  5030  003B42  0A3D               	xorlw	61	; case 33
  5031  003B44  B4D8               	btfsc	status,2,c
  5032  003B46  D7DE               	goto	l1241
  5033  003B48  0A05               	xorlw	5	; case 36
  5034  003B4A  B4D8               	btfsc	status,2,c
  5035  003B4C  D7D4               	goto	l1240
  5036  003B4E  0A01               	xorlw	1	; case 37
  5037  003B50  B4D8               	btfsc	status,2,c
  5038  003B52  D7DB               	goto	l1242
  5039  003B54  0A03               	xorlw	3	; case 38
  5040  003B56  A4D8               	btfss	status,2,c
  5041  003B58  0012               	return	
  5042  003B5A  D7E5               	goto	l1244
  5043  003B5C                     __end_of_GroupCommon:
  5044                           	opt stack 0
  5045                           tosu	equ	0xFFF
  5046                           tosh	equ	0xFFE
  5047                           tosl	equ	0xFFD
  5048                           pclath	equ	0xFFA
  5049                           tblptru	equ	0xFF8
  5050                           tblptrh	equ	0xFF7
  5051                           tblptrl	equ	0xFF6
  5052                           tablat	equ	0xFF5
  5053                           prodh	equ	0xFF4
  5054                           prodl	equ	0xFF3
  5055                           postinc0	equ	0xFEE
  5056                           wreg	equ	0xFE8
  5057                           indf1	equ	0xFE7
  5058                           postdec1	equ	0xFE5
  5059                           fsr1h	equ	0xFE2
  5060                           fsr1l	equ	0xFE1
  5061                           indf2	equ	0xFDF
  5062                           postinc2	equ	0xFDE
  5063                           fsr2h	equ	0xFDA
  5064                           fsr2l	equ	0xFD9
  5065                           status	equ	0xFD8
  5066                           
  5067 ;; *************** function _GroupRx *****************
  5068 ;; Defined at:
  5069 ;;		line 14 in file "MessageFunctions.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;  request         1    wreg     enum E6
  5072 ;;  data            2   80[BANK1 ] PTR unsigned char 
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;  request         1  138[BANK0 ] enum E6
  5075 ;; Return value:  Size  Location     Type
  5076 ;;                  1    wreg      void 
  5077 ;; Registers used:
  5078 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5084 ;;      Params:         0       0       2       0       0       0       0
  5085 ;;      Locals:         0       7       0       0       0       0       0
  5086 ;;      Temps:          0       1       0       0       0       0       0
  5087 ;;      Totals:         0       8       2       0       0       0       0
  5088 ;;Total ram usage:       10 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    8
  5091 ;; This function calls:
  5092 ;;		_AdcSingleSample
  5093 ;;		_CollectRxStatusParams
  5094 ;;		_GetIntFromUartData
  5095 ;;		_PrintRxStatus
  5096 ;;		___awtoft
  5097 ;;		___fttol
  5098 ;;		___llmod
  5099 ;;		_pow
  5100 ;; This function is called by:
  5101 ;;		_readUartByte
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	text4
  5106  002936                     __ptext4:
  5107                           	opt stack 0
  5108  002936                     _GroupRx:
  5109                           	opt stack 21
  5110                           
  5111                           ;incstack = 0
  5112                           ;GroupRx@request stored from wreg
  5113  002936  0100               	movlb	0	; () banked
  5114  002938  6FEA               	movwf	GroupRx@request& (0+255),b
  5115                           
  5116                           ;MessageFunctions.c: 16: switch (request)
  5117  00293A  D078               	goto	l1210
  5118  00293C                     
  5119                           ;MessageFunctions.c: 28: CollectRxStatusParams();
  5120  00293C  EC4C  F01F         	call	_CollectRxStatusParams	;wreg free
  5121                           
  5122                           ;MessageFunctions.c: 29: PrintRxStatus();
  5123  002940  EC52  F010         	call	_PrintRxStatus	;wreg free
  5124                           
  5125                           ;MessageFunctions.c: 36: break;
  5126                           
  5127                           ;MessageFunctions.c: 35: case TX_RX_SET_OPERATION_MODE:
  5128                           
  5129                           ;MessageFunctions.c: 33: break;
  5130                           
  5131                           ;MessageFunctions.c: 32: case TX_RX_SET_BIT_MODE:
  5132                           
  5133                           ;MessageFunctions.c: 30: break;
  5134  002944  0012               	return	
  5135  002946                     
  5136                           ;MessageFunctions.c: 39: retNum = GetIntFromUartData(data);
  5137  002946  C150  F066         	movff	GroupRx@data,GetIntFromUartData@data
  5138  00294A  C151  F067         	movff	GroupRx@data+1,GetIntFromUartData@data+1
  5139  00294E  EC55  F01B         	call	_GetIntFromUartData	;wreg free
  5140  002952  C066  F1C0         	movff	?_GetIntFromUartData,_retNum
  5141  002956  C067  F1C1         	movff	?_GetIntFromUartData+1,_retNum+1
  5142  00295A  C068  F1C2         	movff	?_GetIntFromUartData+2,_retNum+2
  5143  00295E  C069  F1C3         	movff	?_GetIntFromUartData+3,_retNum+3
  5144                           
  5145                           ;MessageFunctions.c: 40: channelNum = data[1] - '0';
  5146  002962  0101               	movlb	1	; () banked
  5147  002964  EE20 F001          	lfsr	2,1
  5148  002968  5150               	movf	GroupRx@data& (0+255),w,b
  5149  00296A  26D9               	addwf	fsr2l,f,c
  5150  00296C  5151               	movf	(GroupRx@data+1)& (0+255),w,b
  5151  00296E  22DA               	addwfc	fsr2h,f,c
  5152  002970  50DF               	movf	indf2,w,c
  5153  002972  0100               	movlb	0	; () banked
  5154  002974  6FE3               	movwf	??_GroupRx& (0+255),b
  5155  002976  0ED0               	movlw	208
  5156  002978  25E3               	addwf	??_GroupRx& (0+255),w,b
  5157  00297A  6E3B               	movwf	_channelNum,c
  5158  00297C  6A3C               	clrf	_channelNum+1,c
  5159  00297E  0EFF               	movlw	255
  5160  002980  223C               	addwfc	_channelNum+1,f,c
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5164  002982  C150  FFD9         	movff	GroupRx@data,fsr2l
  5165  002986  C151  FFDA         	movff	GroupRx@data+1,fsr2h
  5166  00298A  50DF               	movf	indf2,w,c
  5167  00298C  6FE3               	movwf	??_GroupRx& (0+255),b
  5168  00298E  0EFF               	movlw	255
  5169  002990  25E3               	addwf	??_GroupRx& (0+255),w,b
  5170  002992  6E20               	movwf	___awtoft@c,c
  5171  002994  6A21               	clrf	___awtoft@c+1,c
  5172  002996  0EFF               	movlw	255
  5173  002998  2221               	addwfc	___awtoft@c+1,f,c
  5174  00299A  EC4B  F022         	call	___awtoft	;wreg free
  5175  00299E  C020  F0E4         	movff	?___awtoft,_GroupRx$3970
  5176  0029A2  C021  F0E5         	movff	?___awtoft+1,_GroupRx$3970+1
  5177  0029A6  C022  F0E6         	movff	?___awtoft+2,_GroupRx$3970+2
  5178                           
  5179                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5180  0029AA  C0E4  F0A5         	movff	_GroupRx$3970,pow@y
  5181  0029AE  C0E5  F0A6         	movff	_GroupRx$3970+1,pow@y+1
  5182  0029B2  C0E6  F0A7         	movff	_GroupRx$3970+2,pow@y+2
  5183  0029B6  0E00               	movlw	0
  5184  0029B8  0100               	movlb	0	; () banked
  5185  0029BA  6FA2               	movwf	pow@x& (0+255),b
  5186  0029BC  0E20               	movlw	32
  5187  0029BE  6FA3               	movwf	(pow@x+1)& (0+255),b
  5188  0029C0  0E41               	movlw	65
  5189  0029C2  6FA4               	movwf	(pow@x+2)& (0+255),b
  5190  0029C4  ECD8  F00E         	call	_pow	;wreg free
  5191  0029C8  C0A2  F0E7         	movff	?_pow,_GroupRx$3971
  5192  0029CC  C0A3  F0E8         	movff	?_pow+1,_GroupRx$3971+1
  5193  0029D0  C0A4  F0E9         	movff	?_pow+2,_GroupRx$3971+2
  5194                           
  5195                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5196  0029D4  C1C0  F0B3         	movff	_retNum,___llmod@dividend
  5197  0029D8  C1C1  F0B4         	movff	_retNum+1,___llmod@dividend+1
  5198  0029DC  C1C2  F0B5         	movff	_retNum+2,___llmod@dividend+2
  5199  0029E0  C1C3  F0B6         	movff	_retNum+3,___llmod@dividend+3
  5200  0029E4  C0E7  F079         	movff	_GroupRx$3971,___fttol@f1
  5201  0029E8  C0E8  F07A         	movff	_GroupRx$3971+1,___fttol@f1+1
  5202  0029EC  C0E9  F07B         	movff	_GroupRx$3971+2,___fttol@f1+2
  5203  0029F0  ECB6  F015         	call	___fttol	;wreg free
  5204  0029F4  0100               	movlb	0	; () banked
  5205  0029F6  C079  F0B7         	movff	?___fttol,___llmod@divisor
  5206  0029FA  C07A  F0B8         	movff	?___fttol+1,___llmod@divisor+1
  5207  0029FE  0E00               	movlw	0
  5208  002A00  BFB8               	btfsc	(___llmod@divisor+1)& (0+255),7,b
  5209  002A02  0EFF               	movlw	-1
  5210  002A04  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  5211  002A06  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  5212  002A08  EC53  F01E         	call	___llmod	;wreg free
  5213  002A0C  C0B3  F1C6         	movff	?___llmod,_numSamples
  5214  002A10  C0B4  F1C7         	movff	?___llmod+1,_numSamples+1
  5215                           
  5216                           ;MessageFunctions.c: 42: AdcSingleSample(RX_TYPE, channelNum, numSamples);
  5217  002A14  C03B  F01F         	movff	_channelNum,AdcSingleSample@chType
  5218  002A18  C1C6  F020         	movff	_numSamples,AdcSingleSample@numSamples
  5219  002A1C  C1C7  F021         	movff	_numSamples+1,AdcSingleSample@numSamples+1
  5220  002A20  6A22               	clrf	AdcSingleSample@numSamples+2,c
  5221  002A22  6A23               	clrf	AdcSingleSample@numSamples+3,c
  5222  002A24  0E01               	movlw	1
  5223  002A26  EC29  F015         	call	_AdcSingleSample
  5224                           
  5225                           ;MessageFunctions.c: 51: }
  5226                           
  5227                           ;MessageFunctions.c: 50: break;
  5228                           
  5229                           ;MessageFunctions.c: 49: default:
  5230                           
  5231                           ;MessageFunctions.c: 47: break;
  5232  002A2A  0012               	return	
  5233  002A2C                     l1210:
  5234  002A2C  0100               	movlb	0	; () banked
  5235  002A2E  51EA               	movf	GroupRx@request& (0+255),w,b
  5236                           
  5237                           ; Switch size 1, requested type "space"
  5238                           ; Number of cases is 6, Range of values is 18 to 40
  5239                           ; switch strategies available:
  5240                           ; Name         Instructions Cycles
  5241                           ; simple_byte           19    10 (average)
  5242                           ;	Chosen strategy is simple_byte
  5243  002A30  0A12               	xorlw	18	; case 18
  5244  002A32  B4D8               	btfsc	status,2,c
  5245  002A34  0012               	return	
  5246  002A36  0A04               	xorlw	4	; case 22
  5247  002A38  B4D8               	btfsc	status,2,c
  5248  002A3A  0012               	return	
  5249  002A3C  0A0F               	xorlw	15	; case 25
  5250  002A3E  B4D8               	btfsc	status,2,c
  5251  002A40  0012               	return	
  5252  002A42  0A38               	xorlw	56	; case 33
  5253  002A44  B4D8               	btfsc	status,2,c
  5254  002A46  D77A               	goto	l1214
  5255  002A48  0A02               	xorlw	2	; case 35
  5256  002A4A  B4D8               	btfsc	status,2,c
  5257  002A4C  D77C               	goto	l1217
  5258  002A4E  0A0B               	xorlw	11	; case 40
  5259  002A50  0012               	return	
  5260  002A52                     __end_of_GroupRx:
  5261                           	opt stack 0
  5262                           tosu	equ	0xFFF
  5263                           tosh	equ	0xFFE
  5264                           tosl	equ	0xFFD
  5265                           pclath	equ	0xFFA
  5266                           tblptru	equ	0xFF8
  5267                           tblptrh	equ	0xFF7
  5268                           tblptrl	equ	0xFF6
  5269                           tablat	equ	0xFF5
  5270                           prodh	equ	0xFF4
  5271                           prodl	equ	0xFF3
  5272                           postinc0	equ	0xFEE
  5273                           wreg	equ	0xFE8
  5274                           indf1	equ	0xFE7
  5275                           postdec1	equ	0xFE5
  5276                           fsr1h	equ	0xFE2
  5277                           fsr1l	equ	0xFE1
  5278                           indf2	equ	0xFDF
  5279                           postinc2	equ	0xFDE
  5280                           fsr2h	equ	0xFDA
  5281                           fsr2l	equ	0xFD9
  5282                           status	equ	0xFD8
  5283                           
  5284 ;; *************** function _GroupTx *****************
  5285 ;; Defined at:
  5286 ;;		line 54 in file "MessageFunctions.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;  request         1    wreg     enum E6
  5289 ;;  data            2   80[BANK1 ] PTR unsigned char 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;  request         1  138[BANK0 ] enum E6
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  1    wreg      void 
  5294 ;; Registers used:
  5295 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5301 ;;      Params:         0       0       2       0       0       0       0
  5302 ;;      Locals:         0       7       0       0       0       0       0
  5303 ;;      Temps:          0       1       0       0       0       0       0
  5304 ;;      Totals:         0       8       2       0       0       0       0
  5305 ;;Total ram usage:       10 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    8
  5308 ;; This function calls:
  5309 ;;		_AdcSingleSample
  5310 ;;		_CollectTxStatusParams
  5311 ;;		_GetIntFromUartData
  5312 ;;		_PrintTxStatus
  5313 ;;		___awtoft
  5314 ;;		___fttol
  5315 ;;		___llmod
  5316 ;;		_pow
  5317 ;; This function is called by:
  5318 ;;		_readUartByte
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text5
  5323  0025C0                     __ptext5:
  5324                           	opt stack 0
  5325  0025C0                     _GroupTx:
  5326                           	opt stack 21
  5327                           
  5328                           ;incstack = 0
  5329                           ;GroupTx@request stored from wreg
  5330  0025C0  0100               	movlb	0	; () banked
  5331  0025C2  6FEA               	movwf	GroupTx@request& (0+255),b
  5332                           
  5333                           ;MessageFunctions.c: 56: switch (request)
  5334  0025C4  D078               	goto	l1222
  5335  0025C6                     
  5336                           ;MessageFunctions.c: 67: CollectTxStatusParams();
  5337  0025C6  EC87  F01E         	call	_CollectTxStatusParams	;wreg free
  5338                           
  5339                           ;MessageFunctions.c: 68: PrintTxStatus();
  5340  0025CA  EC98  F00F         	call	_PrintTxStatus	;wreg free
  5341                           
  5342                           ;MessageFunctions.c: 81: break;
  5343                           
  5344                           ;MessageFunctions.c: 80: case RX_SET_COMRESSION_RANGE:
  5345                           
  5346                           ;MessageFunctions.c: 78: break;
  5347                           
  5348                           ;MessageFunctions.c: 77: case RX_SET_COMRESSION_MODE:
  5349                           
  5350                           ;MessageFunctions.c: 75: break;
  5351                           
  5352                           ;MessageFunctions.c: 74: case TX_RX_SET_OPERATION_MODE:
  5353                           
  5354                           ;MessageFunctions.c: 72: break;
  5355                           
  5356                           ;MessageFunctions.c: 71: case TX_RX_SET_BIT_MODE:
  5357                           
  5358                           ;MessageFunctions.c: 69: break;
  5359  0025CE  0012               	return	
  5360  0025D0                     
  5361                           ;MessageFunctions.c: 84: retNum = GetIntFromUartData(data);
  5362  0025D0  C150  F066         	movff	GroupTx@data,GetIntFromUartData@data
  5363  0025D4  C151  F067         	movff	GroupTx@data+1,GetIntFromUartData@data+1
  5364  0025D8  EC55  F01B         	call	_GetIntFromUartData	;wreg free
  5365  0025DC  C066  F1C0         	movff	?_GetIntFromUartData,_retNum
  5366  0025E0  C067  F1C1         	movff	?_GetIntFromUartData+1,_retNum+1
  5367  0025E4  C068  F1C2         	movff	?_GetIntFromUartData+2,_retNum+2
  5368  0025E8  C069  F1C3         	movff	?_GetIntFromUartData+3,_retNum+3
  5369                           
  5370                           ;MessageFunctions.c: 85: channelNum = data[1] - '0';
  5371  0025EC  0101               	movlb	1	; () banked
  5372  0025EE  EE20 F001          	lfsr	2,1
  5373  0025F2  5150               	movf	GroupTx@data& (0+255),w,b
  5374  0025F4  26D9               	addwf	fsr2l,f,c
  5375  0025F6  5151               	movf	(GroupTx@data+1)& (0+255),w,b
  5376  0025F8  22DA               	addwfc	fsr2h,f,c
  5377  0025FA  50DF               	movf	indf2,w,c
  5378  0025FC  0100               	movlb	0	; () banked
  5379  0025FE  6FE3               	movwf	??_GroupTx& (0+255),b
  5380  002600  0ED0               	movlw	208
  5381  002602  25E3               	addwf	??_GroupTx& (0+255),w,b
  5382  002604  6E3B               	movwf	_channelNum,c
  5383  002606  6A3C               	clrf	_channelNum+1,c
  5384  002608  0EFF               	movlw	255
  5385  00260A  223C               	addwfc	_channelNum+1,f,c
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5389  00260C  C150  FFD9         	movff	GroupTx@data,fsr2l
  5390  002610  C151  FFDA         	movff	GroupTx@data+1,fsr2h
  5391  002614  50DF               	movf	indf2,w,c
  5392  002616  6FE3               	movwf	??_GroupTx& (0+255),b
  5393  002618  0EFF               	movlw	255
  5394  00261A  25E3               	addwf	??_GroupTx& (0+255),w,b
  5395  00261C  6E20               	movwf	___awtoft@c,c
  5396  00261E  6A21               	clrf	___awtoft@c+1,c
  5397  002620  0EFF               	movlw	255
  5398  002622  2221               	addwfc	___awtoft@c+1,f,c
  5399  002624  EC4B  F022         	call	___awtoft	;wreg free
  5400  002628  C020  F0E4         	movff	?___awtoft,_GroupTx$3972
  5401  00262C  C021  F0E5         	movff	?___awtoft+1,_GroupTx$3972+1
  5402  002630  C022  F0E6         	movff	?___awtoft+2,_GroupTx$3972+2
  5403                           
  5404                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5405  002634  C0E4  F0A5         	movff	_GroupTx$3972,pow@y
  5406  002638  C0E5  F0A6         	movff	_GroupTx$3972+1,pow@y+1
  5407  00263C  C0E6  F0A7         	movff	_GroupTx$3972+2,pow@y+2
  5408  002640  0E00               	movlw	0
  5409  002642  0100               	movlb	0	; () banked
  5410  002644  6FA2               	movwf	pow@x& (0+255),b
  5411  002646  0E20               	movlw	32
  5412  002648  6FA3               	movwf	(pow@x+1)& (0+255),b
  5413  00264A  0E41               	movlw	65
  5414  00264C  6FA4               	movwf	(pow@x+2)& (0+255),b
  5415  00264E  ECD8  F00E         	call	_pow	;wreg free
  5416  002652  C0A2  F0E7         	movff	?_pow,_GroupTx$3973
  5417  002656  C0A3  F0E8         	movff	?_pow+1,_GroupTx$3973+1
  5418  00265A  C0A4  F0E9         	movff	?_pow+2,_GroupTx$3973+2
  5419                           
  5420                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5421  00265E  C1C0  F0B3         	movff	_retNum,___llmod@dividend
  5422  002662  C1C1  F0B4         	movff	_retNum+1,___llmod@dividend+1
  5423  002666  C1C2  F0B5         	movff	_retNum+2,___llmod@dividend+2
  5424  00266A  C1C3  F0B6         	movff	_retNum+3,___llmod@dividend+3
  5425  00266E  C0E7  F079         	movff	_GroupTx$3973,___fttol@f1
  5426  002672  C0E8  F07A         	movff	_GroupTx$3973+1,___fttol@f1+1
  5427  002676  C0E9  F07B         	movff	_GroupTx$3973+2,___fttol@f1+2
  5428  00267A  ECB6  F015         	call	___fttol	;wreg free
  5429  00267E  0100               	movlb	0	; () banked
  5430  002680  C079  F0B7         	movff	?___fttol,___llmod@divisor
  5431  002684  C07A  F0B8         	movff	?___fttol+1,___llmod@divisor+1
  5432  002688  0E00               	movlw	0
  5433  00268A  BFB8               	btfsc	(___llmod@divisor+1)& (0+255),7,b
  5434  00268C  0EFF               	movlw	-1
  5435  00268E  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  5436  002690  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  5437  002692  EC53  F01E         	call	___llmod	;wreg free
  5438  002696  C0B3  F1C6         	movff	?___llmod,_numSamples
  5439  00269A  C0B4  F1C7         	movff	?___llmod+1,_numSamples+1
  5440                           
  5441                           ;MessageFunctions.c: 87: AdcSingleSample(TX_TYPE, channelNum, numSamples);
  5442  00269E  C03B  F01F         	movff	_channelNum,AdcSingleSample@chType
  5443  0026A2  C1C6  F020         	movff	_numSamples,AdcSingleSample@numSamples
  5444  0026A6  C1C7  F021         	movff	_numSamples+1,AdcSingleSample@numSamples+1
  5445  0026AA  6A22               	clrf	AdcSingleSample@numSamples+2,c
  5446  0026AC  6A23               	clrf	AdcSingleSample@numSamples+3,c
  5447  0026AE  0E00               	movlw	0
  5448  0026B0  EC29  F015         	call	_AdcSingleSample
  5449                           
  5450                           ;MessageFunctions.c: 93: }
  5451                           
  5452                           ;MessageFunctions.c: 92: break;
  5453                           
  5454                           ;MessageFunctions.c: 91: default:
  5455                           
  5456                           ;MessageFunctions.c: 89: break;
  5457  0026B4  0012               	return	
  5458  0026B6                     l1222:
  5459  0026B6  0100               	movlb	0	; () banked
  5460  0026B8  51EA               	movf	GroupTx@request& (0+255),w,b
  5461                           
  5462                           ; Switch size 1, requested type "space"
  5463                           ; Number of cases is 8, Range of values is 18 to 101
  5464                           ; switch strategies available:
  5465                           ; Name         Instructions Cycles
  5466                           ; simple_byte           25    13 (average)
  5467                           ;	Chosen strategy is simple_byte
  5468  0026BA  0A12               	xorlw	18	; case 18
  5469  0026BC  B4D8               	btfsc	status,2,c
  5470  0026BE  0012               	return	
  5471  0026C0  0A04               	xorlw	4	; case 22
  5472  0026C2  B4D8               	btfsc	status,2,c
  5473  0026C4  0012               	return	
  5474  0026C6  0A0F               	xorlw	15	; case 25
  5475  0026C8  B4D8               	btfsc	status,2,c
  5476  0026CA  0012               	return	
  5477  0026CC  0A38               	xorlw	56	; case 33
  5478  0026CE  B4D8               	btfsc	status,2,c
  5479  0026D0  D77A               	goto	l1226
  5480  0026D2  0A02               	xorlw	2	; case 35
  5481  0026D4  B4D8               	btfsc	status,2,c
  5482  0026D6  D77C               	goto	l1231
  5483  0026D8  0A0B               	xorlw	11	; case 40
  5484  0026DA  B4D8               	btfsc	status,2,c
  5485  0026DC  0012               	return	
  5486  0026DE  0A4B               	xorlw	75	; case 99
  5487  0026E0  B4D8               	btfsc	status,2,c
  5488  0026E2  0012               	return	
  5489  0026E4  0A06               	xorlw	6	; case 101
  5490  0026E6  0012               	return	
  5491  0026E8                     __end_of_GroupTx:
  5492                           	opt stack 0
  5493                           tosu	equ	0xFFF
  5494                           tosh	equ	0xFFE
  5495                           tosl	equ	0xFFD
  5496                           pclath	equ	0xFFA
  5497                           tblptru	equ	0xFF8
  5498                           tblptrh	equ	0xFF7
  5499                           tblptrl	equ	0xFF6
  5500                           tablat	equ	0xFF5
  5501                           prodh	equ	0xFF4
  5502                           prodl	equ	0xFF3
  5503                           postinc0	equ	0xFEE
  5504                           wreg	equ	0xFE8
  5505                           indf1	equ	0xFE7
  5506                           postdec1	equ	0xFE5
  5507                           fsr1h	equ	0xFE2
  5508                           fsr1l	equ	0xFE1
  5509                           indf2	equ	0xFDF
  5510                           postinc2	equ	0xFDE
  5511                           fsr2h	equ	0xFDA
  5512                           fsr2l	equ	0xFD9
  5513                           status	equ	0xFD8
  5514                           
  5515 ;; *************** function _PrintTxStatus *****************
  5516 ;; Defined at:
  5517 ;;		line 234 in file "SystemStatus.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;		None
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;  dest           80    0[BANK1 ] unsigned char [80]
  5522 ;; Return value:  Size  Location     Type
  5523 ;;                  1    wreg      void 
  5524 ;; Registers used:
  5525 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5526 ;; Tracked objects:
  5527 ;;		On entry : 0/0
  5528 ;;		On exit  : 0/0
  5529 ;;		Unchanged: 0/0
  5530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5531 ;;      Params:         0       0       0       0       0       0       0
  5532 ;;      Locals:         0       0      80       0       0       0       0
  5533 ;;      Temps:          0       0       0       0       0       0       0
  5534 ;;      Totals:         0       0      80       0       0       0       0
  5535 ;;Total ram usage:       80 bytes
  5536 ;; Hardware stack levels used:    1
  5537 ;; Hardware stack levels required when called:    7
  5538 ;; This function calls:
  5539 ;;		_UART_Write_Text
  5540 ;;		_sprintf
  5541 ;; This function is called by:
  5542 ;;		_GroupTx
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           	psect	text6
  5547  001F30                     __ptext6:
  5548                           	opt stack 0
  5549  001F30                     _PrintTxStatus:
  5550                           	opt stack 21
  5551                           
  5552                           ;SystemStatus.c: 236: char dest[80];
  5553                           ;SystemStatus.c: 237: sprintf(dest, "*******************\n\r");
  5554                           
  5555                           ;incstack = 0
  5556  001F30  0E00               	movlw	low PrintTxStatus@dest
  5557  001F32  0100               	movlb	0	; () banked
  5558  001F34  6FBC               	movwf	sprintf@sp& (0+255),b
  5559  001F36  0E01               	movlw	high PrintTxStatus@dest
  5560  001F38  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5561  001F3A  0EFA               	movlw	low STR_55
  5562  001F3C  6FBE               	movwf	sprintf@f& (0+255),b
  5563  001F3E  0E7E               	movlw	high STR_55
  5564  001F40  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5565  001F42  EC70  F000         	call	_sprintf	;wreg free
  5566                           
  5567                           ;SystemStatus.c: 238: UART_Write_Text(dest);
  5568  001F46  0E00               	movlw	low PrintTxStatus@dest
  5569  001F48  6E19               	movwf	UART_Write_Text@text,c
  5570  001F4A  0E01               	movlw	high PrintTxStatus@dest
  5571  001F4C  6E1A               	movwf	UART_Write_Text@text+1,c
  5572  001F4E  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5573                           
  5574                           ;SystemStatus.c: 239: sprintf(dest, "TX SYNTH (PLL) Lock indication %d\n\r",txStatistics
      +                          .Synt);
  5575  001F52  0E00               	movlw	low PrintTxStatus@dest
  5576  001F54  0100               	movlb	0	; () banked
  5577  001F56  6FBC               	movwf	sprintf@sp& (0+255),b
  5578  001F58  0E01               	movlw	high PrintTxStatus@dest
  5579  001F5A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5580  001F5C  0E45               	movlw	low STR_65
  5581  001F5E  6FBE               	movwf	sprintf@f& (0+255),b
  5582  001F60  0E7D               	movlw	high STR_65
  5583  001F62  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5584  001F64  C187  F0C0         	movff	_txStatistics,?_sprintf+4	;volatile
  5585  001F68  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5586  001F6A  EC70  F000         	call	_sprintf	;wreg free
  5587                           
  5588                           ;SystemStatus.c: 240: UART_Write_Text(dest);
  5589  001F6E  0E00               	movlw	low PrintTxStatus@dest
  5590  001F70  6E19               	movwf	UART_Write_Text@text,c
  5591  001F72  0E01               	movlw	high PrintTxStatus@dest
  5592  001F74  6E1A               	movwf	UART_Write_Text@text+1,c
  5593  001F76  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5594                           
  5595                           ;SystemStatus.c: 241: sprintf(dest, "Device Temperature %f\n\r",txStatistics.DeviceTempe
      +                          rature);
  5596  001F7A  0E00               	movlw	low PrintTxStatus@dest
  5597  001F7C  0100               	movlb	0	; () banked
  5598  001F7E  6FBC               	movwf	sprintf@sp& (0+255),b
  5599  001F80  0E01               	movlw	high PrintTxStatus@dest
  5600  001F82  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5601  001F84  0E84               	movlw	low STR_57
  5602  001F86  6FBE               	movwf	sprintf@f& (0+255),b
  5603  001F88  0E7E               	movlw	high STR_57
  5604  001F8A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5605  001F8C  C18D  F0C0         	movff	_txStatistics+6,?_sprintf+4	;volatile
  5606  001F90  C18E  F0C1         	movff	_txStatistics+7,?_sprintf+5	;volatile
  5607  001F94  C18F  F0C2         	movff	_txStatistics+8,?_sprintf+6	;volatile
  5608  001F98  EC70  F000         	call	_sprintf	;wreg free
  5609                           
  5610                           ;SystemStatus.c: 242: UART_Write_Text(dest);
  5611  001F9C  0E00               	movlw	low PrintTxStatus@dest
  5612  001F9E  6E19               	movwf	UART_Write_Text@text,c
  5613  001FA0  0E01               	movlw	high PrintTxStatus@dest
  5614  001FA2  6E1A               	movwf	UART_Write_Text@text+1,c
  5615  001FA4  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5616                           
  5617                           ;SystemStatus.c: 243: sprintf(dest, "Input power status 0: OFF 1: ON%d\n\r",txStatistics
      +                          .InputPowerStatus);
  5618  001FA8  0E00               	movlw	low PrintTxStatus@dest
  5619  001FAA  0100               	movlb	0	; () banked
  5620  001FAC  6FBC               	movwf	sprintf@sp& (0+255),b
  5621  001FAE  0E01               	movlw	high PrintTxStatus@dest
  5622  001FB0  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5623  001FB2  0E69               	movlw	low STR_58
  5624  001FB4  6FBE               	movwf	sprintf@f& (0+255),b
  5625  001FB6  0E7D               	movlw	high STR_58
  5626  001FB8  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5627  001FBA  C190  F0C0         	movff	_txStatistics+9,?_sprintf+4	;volatile
  5628  001FBE  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5629  001FC0  EC70  F000         	call	_sprintf	;wreg free
  5630                           
  5631                           ;SystemStatus.c: 244: UART_Write_Text(dest);
  5632  001FC4  0E00               	movlw	low PrintTxStatus@dest
  5633  001FC6  6E19               	movwf	UART_Write_Text@text,c
  5634  001FC8  0E01               	movlw	high PrintTxStatus@dest
  5635  001FCA  6E1A               	movwf	UART_Write_Text@text+1,c
  5636  001FCC  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5637                           
  5638                           ;SystemStatus.c: 245: sprintf(dest, "TX Frequency in MHz%f\n\r",txStatistics.Freq);
  5639  001FD0  0E00               	movlw	low PrintTxStatus@dest
  5640  001FD2  0100               	movlb	0	; () banked
  5641  001FD4  6FBC               	movwf	sprintf@sp& (0+255),b
  5642  001FD6  0E01               	movlw	high PrintTxStatus@dest
  5643  001FD8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5644  001FDA  0EB4               	movlw	low STR_68
  5645  001FDC  6FBE               	movwf	sprintf@f& (0+255),b
  5646  001FDE  0E7E               	movlw	high STR_68
  5647  001FE0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5648  001FE2  C191  F0C0         	movff	_txStatistics+10,?_sprintf+4	;volatile
  5649  001FE6  C192  F0C1         	movff	_txStatistics+11,?_sprintf+5	;volatile
  5650  001FEA  C193  F0C2         	movff	_txStatistics+12,?_sprintf+6	;volatile
  5651  001FEE  EC70  F000         	call	_sprintf	;wreg free
  5652                           
  5653                           ;SystemStatus.c: 246: UART_Write_Text(dest);
  5654  001FF2  0E00               	movlw	low PrintTxStatus@dest
  5655  001FF4  6E19               	movwf	UART_Write_Text@text,c
  5656  001FF6  0E01               	movlw	high PrintTxStatus@dest
  5657  001FF8  6E1A               	movwf	UART_Write_Text@text+1,c
  5658  001FFA  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5659                           
  5660                           ;SystemStatus.c: 247: sprintf(dest, "RSSI %d\n\r",txStatistics.RSSI);
  5661  001FFE  0E00               	movlw	low PrintTxStatus@dest
  5662  002000  0100               	movlb	0	; () banked
  5663  002002  6FBC               	movwf	sprintf@sp& (0+255),b
  5664  002004  0E01               	movlw	high PrintTxStatus@dest
  5665  002006  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5666  002008  0EC6               	movlw	low STR_60
  5667  00200A  6FBE               	movwf	sprintf@f& (0+255),b
  5668  00200C  0E7F               	movlw	high STR_60
  5669  00200E  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5670  002010  0101               	movlb	1	; () banked
  5671  002012  5194               	movf	(_txStatistics+13)& (0+255),w,b	;volatile
  5672  002014  0100               	movlb	0	; () banked
  5673  002016  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  5674  002018  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5675  00201A  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  5676  00201C  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  5677  00201E  EC70  F000         	call	_sprintf	;wreg free
  5678                           
  5679                           ;SystemStatus.c: 248: UART_Write_Text(dest);
  5680  002022  0E00               	movlw	low PrintTxStatus@dest
  5681  002024  6E19               	movwf	UART_Write_Text@text,c
  5682  002026  0E01               	movlw	high PrintTxStatus@dest
  5683  002028  6E1A               	movwf	UART_Write_Text@text+1,c
  5684  00202A  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5685                           
  5686                           ;SystemStatus.c: 249: sprintf(dest, "Light 0: OFF 1: ON%d\n\r",txStatistics.Light);
  5687  00202E  0E00               	movlw	low PrintTxStatus@dest
  5688  002030  0100               	movlb	0	; () banked
  5689  002032  6FBC               	movwf	sprintf@sp& (0+255),b
  5690  002034  0E01               	movlw	high PrintTxStatus@dest
  5691  002036  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5692  002038  0EE3               	movlw	low STR_61
  5693  00203A  6FBE               	movwf	sprintf@f& (0+255),b
  5694  00203C  0E7E               	movlw	high STR_61
  5695  00203E  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5696  002040  C198  F0C0         	movff	_txStatistics+17,?_sprintf+4	;volatile
  5697  002044  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5698  002046  EC70  F000         	call	_sprintf	;wreg free
  5699                           
  5700                           ;SystemStatus.c: 250: UART_Write_Text(dest);
  5701  00204A  0E00               	movlw	low PrintTxStatus@dest
  5702  00204C  6E19               	movwf	UART_Write_Text@text,c
  5703  00204E  0E01               	movlw	high PrintTxStatus@dest
  5704  002050  6E1A               	movwf	UART_Write_Text@text+1,c
  5705  002052  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5706                           
  5707                           ;SystemStatus.c: 253: sprintf(dest, "UNIT DC %d\n\r",txStatistics.UnitDc);
  5708  002056  0E00               	movlw	low PrintTxStatus@dest
  5709  002058  0100               	movlb	0	; () banked
  5710  00205A  6FBC               	movwf	sprintf@sp& (0+255),b
  5711  00205C  0E01               	movlw	high PrintTxStatus@dest
  5712  00205E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5713  002060  0E95               	movlw	low STR_62
  5714  002062  6FBE               	movwf	sprintf@f& (0+255),b
  5715  002064  0E7F               	movlw	high STR_62
  5716  002066  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5717  002068  C199  F0C0         	movff	_txStatistics+18,?_sprintf+4	;volatile
  5718  00206C  C19A  F0C1         	movff	_txStatistics+19,?_sprintf+5	;volatile
  5719  002070  EC70  F000         	call	_sprintf	;wreg free
  5720                           
  5721                           ;SystemStatus.c: 254: UART_Write_Text(dest);
  5722  002074  0E00               	movlw	low PrintTxStatus@dest
  5723  002076  6E19               	movwf	UART_Write_Text@text,c
  5724  002078  0E01               	movlw	high PrintTxStatus@dest
  5725  00207A  6E1A               	movwf	UART_Write_Text@text+1,c
  5726  00207C  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5727                           
  5728                           ;SystemStatus.c: 259: sprintf(dest, "*******************\n\r");
  5729  002080  0E00               	movlw	low PrintTxStatus@dest
  5730  002082  0100               	movlb	0	; () banked
  5731  002084  6FBC               	movwf	sprintf@sp& (0+255),b
  5732  002086  0E01               	movlw	high PrintTxStatus@dest
  5733  002088  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5734  00208A  0EFA               	movlw	low STR_55
  5735  00208C  6FBE               	movwf	sprintf@f& (0+255),b
  5736  00208E  0E7E               	movlw	high STR_55
  5737  002090  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5738  002092  EC70  F000         	call	_sprintf	;wreg free
  5739                           
  5740                           ;SystemStatus.c: 260: UART_Write_Text(dest);
  5741  002096  0E00               	movlw	low PrintTxStatus@dest
  5742  002098  6E19               	movwf	UART_Write_Text@text,c
  5743  00209A  0E01               	movlw	high PrintTxStatus@dest
  5744  00209C  6E1A               	movwf	UART_Write_Text@text+1,c
  5745  00209E  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5746  0020A2  0012               	return		;funcret
  5747  0020A4                     __end_of_PrintTxStatus:
  5748                           	opt stack 0
  5749                           tosu	equ	0xFFF
  5750                           tosh	equ	0xFFE
  5751                           tosl	equ	0xFFD
  5752                           pclath	equ	0xFFA
  5753                           tblptru	equ	0xFF8
  5754                           tblptrh	equ	0xFF7
  5755                           tblptrl	equ	0xFF6
  5756                           tablat	equ	0xFF5
  5757                           prodh	equ	0xFF4
  5758                           prodl	equ	0xFF3
  5759                           postinc0	equ	0xFEE
  5760                           wreg	equ	0xFE8
  5761                           indf1	equ	0xFE7
  5762                           postdec1	equ	0xFE5
  5763                           fsr1h	equ	0xFE2
  5764                           fsr1l	equ	0xFE1
  5765                           indf2	equ	0xFDF
  5766                           postinc2	equ	0xFDE
  5767                           fsr2h	equ	0xFDA
  5768                           fsr2l	equ	0xFD9
  5769                           status	equ	0xFD8
  5770                           
  5771 ;; *************** function _CollectTxStatusParams *****************
  5772 ;; Defined at:
  5773 ;;		line 189 in file "SystemStatus.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;		None
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		wreg, status,2, status,0, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5787 ;;      Params:         0       0       0       0       0       0       0
  5788 ;;      Locals:         0       0       0       0       0       0       0
  5789 ;;      Temps:          0       0       0       0       0       0       0
  5790 ;;      Totals:         0       0       0       0       0       0       0
  5791 ;;Total ram usage:        0 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    5
  5794 ;; This function calls:
  5795 ;;		___lltoft
  5796 ;;		___lwtoft
  5797 ;; This function is called by:
  5798 ;;		_GroupTx
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           	psect	text7
  5803  003D0E                     __ptext7:
  5804                           	opt stack 0
  5805  003D0E                     _CollectTxStatusParams:
  5806                           	opt stack 23
  5807                           
  5808                           ;SystemStatus.c: 191: txStatistics.Synt = txFreq;
  5809                           
  5810                           ;incstack = 0
  5811  003D0E  C031  F187         	movff	_txFreq,_txStatistics	;volatile
  5812                           
  5813                           ;SystemStatus.c: 192: txStatistics.DeviceTemperature = lastAdcTemp;
  5814  003D12  C03F  F020         	movff	_lastAdcTemp,___lwtoft@c	;volatile
  5815  003D16  C040  F021         	movff	_lastAdcTemp+1,___lwtoft@c+1	;volatile
  5816  003D1A  EC54  F023         	call	___lwtoft	;wreg free
  5817  003D1E  C020  F18D         	movff	?___lwtoft,_txStatistics+6	;volatile
  5818  003D22  C021  F18E         	movff	?___lwtoft+1,_txStatistics+7	;volatile
  5819  003D26  C022  F18F         	movff	?___lwtoft+2,_txStatistics+8	;volatile
  5820                           
  5821                           ;SystemStatus.c: 193: txStatistics.InputPowerStatus = PORTDbits.RD6;
  5822  003D2A  0E00               	movlw	0
  5823  003D2C  BC83               	btfsc	3971,6,c	;volatile
  5824  003D2E  0E01               	movlw	1
  5825  003D30  0101               	movlb	1	; () banked
  5826  003D32  6F90               	movwf	(_txStatistics+9)& (0+255),b	;volatile
  5827                           
  5828                           ; BSR set to: 1
  5829                           ;SystemStatus.c: 194: txStatistics.Freq = txFreq;
  5830  003D34  C031  F020         	movff	_txFreq,___lltoft@c	;volatile
  5831  003D38  C032  F021         	movff	_txFreq+1,___lltoft@c+1	;volatile
  5832  003D3C  C033  F022         	movff	_txFreq+2,___lltoft@c+2	;volatile
  5833  003D40  C034  F023         	movff	_txFreq+3,___lltoft@c+3	;volatile
  5834  003D44  ECD8  F01F         	call	___lltoft	;wreg free
  5835  003D48  C020  F191         	movff	?___lltoft,_txStatistics+10	;volatile
  5836  003D4C  C021  F192         	movff	?___lltoft+1,_txStatistics+11	;volatile
  5837  003D50  C022  F193         	movff	?___lltoft+2,_txStatistics+12	;volatile
  5838                           
  5839                           ;SystemStatus.c: 195: txStatistics.RSSI = lastAdcFfwrRSSI;
  5840  003D54  C03D  F194         	movff	_lastAdcFfwrRSSI,_txStatistics+13	;volatile
  5841                           
  5842                           ;SystemStatus.c: 196: txStatistics.Light = PORTBbits.RB3;
  5843  003D58  0E00               	movlw	0
  5844  003D5A  B681               	btfsc	3969,3,c	;volatile
  5845  003D5C  0E01               	movlw	1
  5846  003D5E  0101               	movlb	1	; () banked
  5847  003D60  6F98               	movwf	(_txStatistics+17)& (0+255),b	;volatile
  5848                           
  5849                           ; BSR set to: 1
  5850                           ;SystemStatus.c: 198: txStatistics.UnitDc = 1234;
  5851  003D62  0E04               	movlw	4
  5852  003D64  6F9A               	movwf	(_txStatistics+19)& (0+255),b	;volatile
  5853  003D66  0ED2               	movlw	210
  5854  003D68  6F99               	movwf	(_txStatistics+18)& (0+255),b	;volatile
  5855                           
  5856                           ; BSR set to: 1
  5857                           ;SystemStatus.c: 202: txStatistics.AdcValues.ADC0 = 0x7;
  5858  003D6A  0E00               	movlw	0
  5859  003D6C  6F8A               	movwf	(_txStatistics+3)& (0+255),b	;volatile
  5860  003D6E  0E07               	movlw	7
  5861  003D70  6F89               	movwf	(_txStatistics+2)& (0+255),b	;volatile
  5862                           
  5863                           ; BSR set to: 1
  5864  003D72  0012               	return		;funcret
  5865  003D74                     __end_of_CollectTxStatusParams:
  5866                           	opt stack 0
  5867                           tosu	equ	0xFFF
  5868                           tosh	equ	0xFFE
  5869                           tosl	equ	0xFFD
  5870                           pclath	equ	0xFFA
  5871                           tblptru	equ	0xFF8
  5872                           tblptrh	equ	0xFF7
  5873                           tblptrl	equ	0xFF6
  5874                           tablat	equ	0xFF5
  5875                           prodh	equ	0xFF4
  5876                           prodl	equ	0xFF3
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           indf1	equ	0xFE7
  5880                           postdec1	equ	0xFE5
  5881                           fsr1h	equ	0xFE2
  5882                           fsr1l	equ	0xFE1
  5883                           indf2	equ	0xFDF
  5884                           postinc2	equ	0xFDE
  5885                           fsr2h	equ	0xFDA
  5886                           fsr2l	equ	0xFD9
  5887                           status	equ	0xFD8
  5888                           
  5889 ;; *************** function _PrintRxStatus *****************
  5890 ;; Defined at:
  5891 ;;		line 205 in file "SystemStatus.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;		None
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;  dest           80    0[BANK1 ] unsigned char [80]
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  1    wreg      void 
  5898 ;; Registers used:
  5899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5905 ;;      Params:         0       0       0       0       0       0       0
  5906 ;;      Locals:         0       0      80       0       0       0       0
  5907 ;;      Temps:          0       0       0       0       0       0       0
  5908 ;;      Totals:         0       0      80       0       0       0       0
  5909 ;;Total ram usage:       80 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    7
  5912 ;; This function calls:
  5913 ;;		_UART_Write_Text
  5914 ;;		_sprintf
  5915 ;; This function is called by:
  5916 ;;		_GroupRx
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text8
  5921  0020A4                     __ptext8:
  5922                           	opt stack 0
  5923  0020A4                     _PrintRxStatus:
  5924                           	opt stack 21
  5925                           
  5926                           ;SystemStatus.c: 207: char dest[80];
  5927                           ;SystemStatus.c: 208: sprintf(dest, "*******************\n\r");
  5928                           
  5929                           ; BSR set to: 1
  5930                           ;incstack = 0
  5931  0020A4  0E00               	movlw	low PrintRxStatus@dest
  5932  0020A6  0100               	movlb	0	; () banked
  5933  0020A8  6FBC               	movwf	sprintf@sp& (0+255),b
  5934  0020AA  0E01               	movlw	high PrintRxStatus@dest
  5935  0020AC  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5936  0020AE  0EFA               	movlw	low STR_55
  5937  0020B0  6FBE               	movwf	sprintf@f& (0+255),b
  5938  0020B2  0E7E               	movlw	high STR_55
  5939  0020B4  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5940  0020B6  EC70  F000         	call	_sprintf	;wreg free
  5941                           
  5942                           ;SystemStatus.c: 209: UART_Write_Text(dest);
  5943  0020BA  0E00               	movlw	low PrintRxStatus@dest
  5944  0020BC  6E19               	movwf	UART_Write_Text@text,c
  5945  0020BE  0E01               	movlw	high PrintRxStatus@dest
  5946  0020C0  6E1A               	movwf	UART_Write_Text@text+1,c
  5947  0020C2  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5948                           
  5949                           ;SystemStatus.c: 210: sprintf(dest, "RX SYNTH (PLL) Lock indication 0: not locked 1: loc
      +                          ked%d\n\r",rxStatistics.Synt);
  5950  0020C6  0E00               	movlw	low PrintRxStatus@dest
  5951  0020C8  0100               	movlb	0	; () banked
  5952  0020CA  6FBC               	movwf	sprintf@sp& (0+255),b
  5953  0020CC  0E01               	movlw	high PrintRxStatus@dest
  5954  0020CE  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5955  0020D0  0EAA               	movlw	low STR_56
  5956  0020D2  6FBE               	movwf	sprintf@f& (0+255),b
  5957  0020D4  0E7B               	movlw	high STR_56
  5958  0020D6  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5959  0020D8  C19D  F0C0         	movff	_rxStatistics,?_sprintf+4	;volatile
  5960  0020DC  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5961  0020DE  EC70  F000         	call	_sprintf	;wreg free
  5962                           
  5963                           ;SystemStatus.c: 211: UART_Write_Text(dest);
  5964  0020E2  0E00               	movlw	low PrintRxStatus@dest
  5965  0020E4  6E19               	movwf	UART_Write_Text@text,c
  5966  0020E6  0E01               	movlw	high PrintRxStatus@dest
  5967  0020E8  6E1A               	movwf	UART_Write_Text@text+1,c
  5968  0020EA  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5969                           
  5970                           ;SystemStatus.c: 212: sprintf(dest, "Device Temperature %f\n\r",rxStatistics.DeviceTempe
      +                          rature);
  5971  0020EE  0E00               	movlw	low PrintRxStatus@dest
  5972  0020F0  0100               	movlb	0	; () banked
  5973  0020F2  6FBC               	movwf	sprintf@sp& (0+255),b
  5974  0020F4  0E01               	movlw	high PrintRxStatus@dest
  5975  0020F6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5976  0020F8  0E84               	movlw	low STR_57
  5977  0020FA  6FBE               	movwf	sprintf@f& (0+255),b
  5978  0020FC  0E7E               	movlw	high STR_57
  5979  0020FE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5980  002100  C1A3  F0C0         	movff	_rxStatistics+6,?_sprintf+4	;volatile
  5981  002104  C1A4  F0C1         	movff	_rxStatistics+7,?_sprintf+5	;volatile
  5982  002108  C1A5  F0C2         	movff	_rxStatistics+8,?_sprintf+6	;volatile
  5983  00210C  EC70  F000         	call	_sprintf	;wreg free
  5984                           
  5985                           ;SystemStatus.c: 213: UART_Write_Text(dest);
  5986  002110  0E00               	movlw	low PrintRxStatus@dest
  5987  002112  6E19               	movwf	UART_Write_Text@text,c
  5988  002114  0E01               	movlw	high PrintRxStatus@dest
  5989  002116  6E1A               	movwf	UART_Write_Text@text+1,c
  5990  002118  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  5991                           
  5992                           ;SystemStatus.c: 214: sprintf(dest, "Input power status 0: OFF 1: ON%d\n\r",rxStatistics
      +                          .InputPowerStatus);
  5993  00211C  0E00               	movlw	low PrintRxStatus@dest
  5994  00211E  0100               	movlb	0	; () banked
  5995  002120  6FBC               	movwf	sprintf@sp& (0+255),b
  5996  002122  0E01               	movlw	high PrintRxStatus@dest
  5997  002124  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5998  002126  0E69               	movlw	low STR_58
  5999  002128  6FBE               	movwf	sprintf@f& (0+255),b
  6000  00212A  0E7D               	movlw	high STR_58
  6001  00212C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6002  00212E  C1A6  F0C0         	movff	_rxStatistics+9,?_sprintf+4	;volatile
  6003  002132  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  6004  002134  EC70  F000         	call	_sprintf	;wreg free
  6005                           
  6006                           ;SystemStatus.c: 215: UART_Write_Text(dest);
  6007  002138  0E00               	movlw	low PrintRxStatus@dest
  6008  00213A  6E19               	movwf	UART_Write_Text@text,c
  6009  00213C  0E01               	movlw	high PrintRxStatus@dest
  6010  00213E  6E1A               	movwf	UART_Write_Text@text+1,c
  6011  002140  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6012                           
  6013                           ;SystemStatus.c: 216: sprintf(dest, "RX Frequency in MHz%f\n\r",rxStatistics.Freq);
  6014  002144  0E00               	movlw	low PrintRxStatus@dest
  6015  002146  0100               	movlb	0	; () banked
  6016  002148  6FBC               	movwf	sprintf@sp& (0+255),b
  6017  00214A  0E01               	movlw	high PrintRxStatus@dest
  6018  00214C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6019  00214E  0E9C               	movlw	low STR_59
  6020  002150  6FBE               	movwf	sprintf@f& (0+255),b
  6021  002152  0E7E               	movlw	high STR_59
  6022  002154  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6023  002156  C1A7  F0C0         	movff	_rxStatistics+10,?_sprintf+4	;volatile
  6024  00215A  C1A8  F0C1         	movff	_rxStatistics+11,?_sprintf+5	;volatile
  6025  00215E  C1A9  F0C2         	movff	_rxStatistics+12,?_sprintf+6	;volatile
  6026  002162  EC70  F000         	call	_sprintf	;wreg free
  6027                           
  6028                           ;SystemStatus.c: 217: UART_Write_Text(dest);
  6029  002166  0E00               	movlw	low PrintRxStatus@dest
  6030  002168  6E19               	movwf	UART_Write_Text@text,c
  6031  00216A  0E01               	movlw	high PrintRxStatus@dest
  6032  00216C  6E1A               	movwf	UART_Write_Text@text+1,c
  6033  00216E  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6034                           
  6035                           ;SystemStatus.c: 218: sprintf(dest, "RSSI %d\n\r",rxStatistics.RSSI);
  6036  002172  0E00               	movlw	low PrintRxStatus@dest
  6037  002174  0100               	movlb	0	; () banked
  6038  002176  6FBC               	movwf	sprintf@sp& (0+255),b
  6039  002178  0E01               	movlw	high PrintRxStatus@dest
  6040  00217A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6041  00217C  0EC6               	movlw	low STR_60
  6042  00217E  6FBE               	movwf	sprintf@f& (0+255),b
  6043  002180  0E7F               	movlw	high STR_60
  6044  002182  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6045  002184  0101               	movlb	1	; () banked
  6046  002186  51AA               	movf	(_rxStatistics+13)& (0+255),w,b	;volatile
  6047  002188  0100               	movlb	0	; () banked
  6048  00218A  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  6049  00218C  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  6050  00218E  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  6051  002190  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  6052  002192  EC70  F000         	call	_sprintf	;wreg free
  6053                           
  6054                           ;SystemStatus.c: 219: UART_Write_Text(dest);
  6055  002196  0E00               	movlw	low PrintRxStatus@dest
  6056  002198  6E19               	movwf	UART_Write_Text@text,c
  6057  00219A  0E01               	movlw	high PrintRxStatus@dest
  6058  00219C  6E1A               	movwf	UART_Write_Text@text+1,c
  6059  00219E  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6060                           
  6061                           ;SystemStatus.c: 220: sprintf(dest, "Light 0: OFF 1: ON%d\n\r",rxStatistics.Light);
  6062  0021A2  0E00               	movlw	low PrintRxStatus@dest
  6063  0021A4  0100               	movlb	0	; () banked
  6064  0021A6  6FBC               	movwf	sprintf@sp& (0+255),b
  6065  0021A8  0E01               	movlw	high PrintRxStatus@dest
  6066  0021AA  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6067  0021AC  0EE3               	movlw	low STR_61
  6068  0021AE  6FBE               	movwf	sprintf@f& (0+255),b
  6069  0021B0  0E7E               	movlw	high STR_61
  6070  0021B2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6071  0021B4  C1AE  F0C0         	movff	_rxStatistics+17,?_sprintf+4	;volatile
  6072  0021B8  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  6073  0021BA  EC70  F000         	call	_sprintf	;wreg free
  6074                           
  6075                           ;SystemStatus.c: 221: UART_Write_Text(dest);
  6076  0021BE  0E00               	movlw	low PrintRxStatus@dest
  6077  0021C0  6E19               	movwf	UART_Write_Text@text,c
  6078  0021C2  0E01               	movlw	high PrintRxStatus@dest
  6079  0021C4  6E1A               	movwf	UART_Write_Text@text+1,c
  6080  0021C6  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6081                           
  6082                           ;SystemStatus.c: 224: sprintf(dest, "UNIT DC %d\n\r",rxStatistics.UnitDc);
  6083  0021CA  0E00               	movlw	low PrintRxStatus@dest
  6084  0021CC  0100               	movlb	0	; () banked
  6085  0021CE  6FBC               	movwf	sprintf@sp& (0+255),b
  6086  0021D0  0E01               	movlw	high PrintRxStatus@dest
  6087  0021D2  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6088  0021D4  0E95               	movlw	low STR_62
  6089  0021D6  6FBE               	movwf	sprintf@f& (0+255),b
  6090  0021D8  0E7F               	movlw	high STR_62
  6091  0021DA  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6092  0021DC  C1AF  F0C0         	movff	_rxStatistics+18,?_sprintf+4	;volatile
  6093  0021E0  C1B0  F0C1         	movff	_rxStatistics+19,?_sprintf+5	;volatile
  6094  0021E4  EC70  F000         	call	_sprintf	;wreg free
  6095                           
  6096                           ;SystemStatus.c: 225: UART_Write_Text(dest);
  6097  0021E8  0E00               	movlw	low PrintRxStatus@dest
  6098  0021EA  6E19               	movwf	UART_Write_Text@text,c
  6099  0021EC  0E01               	movlw	high PrintRxStatus@dest
  6100  0021EE  6E1A               	movwf	UART_Write_Text@text+1,c
  6101  0021F0  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6102                           
  6103                           ;SystemStatus.c: 230: sprintf(dest, "*******************\n\r");
  6104  0021F4  0E00               	movlw	low PrintRxStatus@dest
  6105  0021F6  0100               	movlb	0	; () banked
  6106  0021F8  6FBC               	movwf	sprintf@sp& (0+255),b
  6107  0021FA  0E01               	movlw	high PrintRxStatus@dest
  6108  0021FC  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6109  0021FE  0EFA               	movlw	low STR_55
  6110  002200  6FBE               	movwf	sprintf@f& (0+255),b
  6111  002202  0E7E               	movlw	high STR_55
  6112  002204  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6113  002206  EC70  F000         	call	_sprintf	;wreg free
  6114                           
  6115                           ;SystemStatus.c: 231: UART_Write_Text(dest);
  6116  00220A  0E00               	movlw	low PrintRxStatus@dest
  6117  00220C  6E19               	movwf	UART_Write_Text@text,c
  6118  00220E  0E01               	movlw	high PrintRxStatus@dest
  6119  002210  6E1A               	movwf	UART_Write_Text@text+1,c
  6120  002212  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6121  002216  0012               	return		;funcret
  6122  002218                     __end_of_PrintRxStatus:
  6123                           	opt stack 0
  6124                           tosu	equ	0xFFF
  6125                           tosh	equ	0xFFE
  6126                           tosl	equ	0xFFD
  6127                           pclath	equ	0xFFA
  6128                           tblptru	equ	0xFF8
  6129                           tblptrh	equ	0xFF7
  6130                           tblptrl	equ	0xFF6
  6131                           tablat	equ	0xFF5
  6132                           prodh	equ	0xFF4
  6133                           prodl	equ	0xFF3
  6134                           postinc0	equ	0xFEE
  6135                           wreg	equ	0xFE8
  6136                           indf1	equ	0xFE7
  6137                           postdec1	equ	0xFE5
  6138                           fsr1h	equ	0xFE2
  6139                           fsr1l	equ	0xFE1
  6140                           indf2	equ	0xFDF
  6141                           postinc2	equ	0xFDE
  6142                           fsr2h	equ	0xFDA
  6143                           fsr2l	equ	0xFD9
  6144                           status	equ	0xFD8
  6145                           
  6146 ;; *************** function _CollectRxStatusParams *****************
  6147 ;; Defined at:
  6148 ;;		line 173 in file "SystemStatus.c"
  6149 ;; Parameters:    Size  Location     Type
  6150 ;;		None
  6151 ;; Auto vars:     Size  Location     Type
  6152 ;;		None
  6153 ;; Return value:  Size  Location     Type
  6154 ;;                  1    wreg      void 
  6155 ;; Registers used:
  6156 ;;		wreg, status,2, status,0, cstack
  6157 ;; Tracked objects:
  6158 ;;		On entry : 0/0
  6159 ;;		On exit  : 0/0
  6160 ;;		Unchanged: 0/0
  6161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6162 ;;      Params:         0       0       0       0       0       0       0
  6163 ;;      Locals:         0       0       0       0       0       0       0
  6164 ;;      Temps:          0       0       0       0       0       0       0
  6165 ;;      Totals:         0       0       0       0       0       0       0
  6166 ;;Total ram usage:        0 bytes
  6167 ;; Hardware stack levels used:    1
  6168 ;; Hardware stack levels required when called:    5
  6169 ;; This function calls:
  6170 ;;		___lltoft
  6171 ;;		___lwtoft
  6172 ;; This function is called by:
  6173 ;;		_GroupRx
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           	psect	text9
  6178  003E98                     __ptext9:
  6179                           	opt stack 0
  6180  003E98                     _CollectRxStatusParams:
  6181                           	opt stack 23
  6182                           
  6183                           ;SystemStatus.c: 175: rxStatistics.Synt = rxFreq;
  6184                           
  6185                           ;incstack = 0
  6186  003E98  C035  F19D         	movff	_rxFreq,_rxStatistics	;volatile
  6187                           
  6188                           ;SystemStatus.c: 176: rxStatistics.DeviceTemperature = lastAdcTemp;
  6189  003E9C  C03F  F020         	movff	_lastAdcTemp,___lwtoft@c	;volatile
  6190  003EA0  C040  F021         	movff	_lastAdcTemp+1,___lwtoft@c+1	;volatile
  6191  003EA4  EC54  F023         	call	___lwtoft	;wreg free
  6192  003EA8  C020  F1A3         	movff	?___lwtoft,_rxStatistics+6	;volatile
  6193  003EAC  C021  F1A4         	movff	?___lwtoft+1,_rxStatistics+7	;volatile
  6194  003EB0  C022  F1A5         	movff	?___lwtoft+2,_rxStatistics+8	;volatile
  6195                           
  6196                           ;SystemStatus.c: 177: rxStatistics.InputPowerStatus = PORTDbits.RD6;
  6197  003EB4  0E00               	movlw	0
  6198  003EB6  BC83               	btfsc	3971,6,c	;volatile
  6199  003EB8  0E01               	movlw	1
  6200  003EBA  0101               	movlb	1	; () banked
  6201  003EBC  6FA6               	movwf	(_rxStatistics+9)& (0+255),b	;volatile
  6202                           
  6203                           ; BSR set to: 1
  6204                           ;SystemStatus.c: 178: rxStatistics.Freq = rxFreq;
  6205  003EBE  C035  F020         	movff	_rxFreq,___lltoft@c	;volatile
  6206  003EC2  C036  F021         	movff	_rxFreq+1,___lltoft@c+1	;volatile
  6207  003EC6  C037  F022         	movff	_rxFreq+2,___lltoft@c+2	;volatile
  6208  003ECA  C038  F023         	movff	_rxFreq+3,___lltoft@c+3	;volatile
  6209  003ECE  ECD8  F01F         	call	___lltoft	;wreg free
  6210  003ED2  C020  F1A7         	movff	?___lltoft,_rxStatistics+10	;volatile
  6211  003ED6  C021  F1A8         	movff	?___lltoft+1,_rxStatistics+11	;volatile
  6212  003EDA  C022  F1A9         	movff	?___lltoft+2,_rxStatistics+12	;volatile
  6213                           
  6214                           ;SystemStatus.c: 179: rxStatistics.RSSI = lastAdcFfwrRSSI;
  6215  003EDE  C03D  F1AA         	movff	_lastAdcFfwrRSSI,_rxStatistics+13	;volatile
  6216                           
  6217                           ;SystemStatus.c: 180: rxStatistics.Light = PORTBbits.RB3;
  6218  003EE2  0E00               	movlw	0
  6219  003EE4  B681               	btfsc	3969,3,c	;volatile
  6220  003EE6  0E01               	movlw	1
  6221  003EE8  0101               	movlb	1	; () banked
  6222  003EEA  6FAE               	movwf	(_rxStatistics+17)& (0+255),b	;volatile
  6223                           
  6224                           ; BSR set to: 1
  6225                           ;SystemStatus.c: 182: rxStatistics.UnitDc = 1234;
  6226  003EEC  0E04               	movlw	4
  6227  003EEE  6FB0               	movwf	(_rxStatistics+19)& (0+255),b	;volatile
  6228  003EF0  0ED2               	movlw	210
  6229  003EF2  6FAF               	movwf	(_rxStatistics+18)& (0+255),b	;volatile
  6230                           
  6231                           ; BSR set to: 1
  6232  003EF4  0012               	return		;funcret
  6233  003EF6                     __end_of_CollectRxStatusParams:
  6234                           	opt stack 0
  6235                           tosu	equ	0xFFF
  6236                           tosh	equ	0xFFE
  6237                           tosl	equ	0xFFD
  6238                           pclath	equ	0xFFA
  6239                           tblptru	equ	0xFF8
  6240                           tblptrh	equ	0xFF7
  6241                           tblptrl	equ	0xFF6
  6242                           tablat	equ	0xFF5
  6243                           prodh	equ	0xFF4
  6244                           prodl	equ	0xFF3
  6245                           postinc0	equ	0xFEE
  6246                           wreg	equ	0xFE8
  6247                           indf1	equ	0xFE7
  6248                           postdec1	equ	0xFE5
  6249                           fsr1h	equ	0xFE2
  6250                           fsr1l	equ	0xFE1
  6251                           indf2	equ	0xFDF
  6252                           postinc2	equ	0xFDE
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function _AdcSingleSample *****************
  6258 ;; Defined at:
  6259 ;;		line 32 in file "AdcApp.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  cType           1    wreg     enum E177
  6262 ;;  chType          1   30[COMRAM] enum E7682
  6263 ;;  numSamples      4   31[COMRAM] long 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  cType           1   39[COMRAM] enum E177
  6266 ;;  retNum          4   35[COMRAM] unsigned long 
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      void 
  6269 ;; Registers used:
  6270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6276 ;;      Params:         5       0       0       0       0       0       0
  6277 ;;      Locals:         5       0       0       0       0       0       0
  6278 ;;      Temps:          0       0       0       0       0       0       0
  6279 ;;      Totals:        10       0       0       0       0       0       0
  6280 ;;Total ram usage:       10 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:    5
  6283 ;; This function calls:
  6284 ;;		_UART_Write_Text
  6285 ;; This function is called by:
  6286 ;;		_GroupRx
  6287 ;;		_GroupTx
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           	psect	text10
  6292  002A52                     __ptext10:
  6293                           	opt stack 0
  6294  002A52                     _AdcSingleSample:
  6295                           	opt stack 23
  6296                           
  6297                           ; BSR set to: 1
  6298                           ;incstack = 0
  6299                           ;AdcSingleSample@cType stored from wreg
  6300  002A52  6E28               	movwf	AdcSingleSample@cType,c
  6301                           
  6302                           ;AdcApp.c: 34: uint32_t retNum = 0x0;
  6303  002A54  0E00               	movlw	0
  6304  002A56  6E24               	movwf	AdcSingleSample@retNum,c
  6305  002A58  0E00               	movlw	0
  6306  002A5A  6E25               	movwf	AdcSingleSample@retNum+1,c
  6307  002A5C  0E00               	movlw	0
  6308  002A5E  6E26               	movwf	AdcSingleSample@retNum+2,c
  6309  002A60  0E00               	movlw	0
  6310  002A62  6E27               	movwf	AdcSingleSample@retNum+3,c
  6311                           
  6312                           ;AdcApp.c: 36: if(chType == ADC_OFF)
  6313  002A64  501F               	movf	AdcSingleSample@chType,w,c
  6314  002A66  A4D8               	btfss	status,2,c
  6315  002A68  D00B               	goto	l146
  6316                           
  6317                           ;AdcApp.c: 37: {
  6318                           ;AdcApp.c: 38: if(cType == TX_TYPE) txStatistics.AdcValues.OperState = 0;
  6319  002A6A  5028               	movf	AdcSingleSample@cType,w,c
  6320  002A6C  A4D8               	btfss	status,2,c
  6321  002A6E  D004               	goto	l147
  6322  002A70  0E00               	movlw	0
  6323  002A72  0101               	movlb	1	; () banked
  6324  002A74  6F88               	movwf	(_txStatistics+1)& (0+255),b	;volatile
  6325  002A76  0012               	return	
  6326  002A78                     l147:
  6327                           
  6328                           ;AdcApp.c: 39: else rxStatistics.AdcValues.OperState = 0;
  6329                           
  6330                           ; BSR set to: 1
  6331  002A78  0E00               	movlw	0
  6332  002A7A  0101               	movlb	1	; () banked
  6333  002A7C  6F9E               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  6334                           
  6335                           ; BSR set to: 1
  6336                           ;AdcApp.c: 40: }
  6337  002A7E  0012               	return	
  6338  002A80                     l146:
  6339                           
  6340                           ;AdcApp.c: 41: else
  6341                           ;AdcApp.c: 42: {
  6342                           ;AdcApp.c: 44: if(channelNum > (0x04))
  6343                           
  6344                           ; BSR set to: 1
  6345  002A80  503C               	movf	_channelNum+1,w,c
  6346  002A82  E104               	bnz	u9230
  6347  002A84  0E05               	movlw	5
  6348  002A86  5C3B               	subwf	_channelNum,w,c
  6349  002A88  A0D8               	btfss	status,0,c
  6350  002A8A  D007               	goto	l150
  6351  002A8C                     u9230:
  6352                           
  6353                           ;AdcApp.c: 45: {
  6354                           ;AdcApp.c: 46: UART_Write_Text("NOT OK \n\r");
  6355  002A8C  0ED0               	movlw	low STR_1
  6356  002A8E  6E19               	movwf	UART_Write_Text@text,c
  6357  002A90  0E7F               	movlw	high STR_1
  6358  002A92  6E1A               	movwf	UART_Write_Text@text+1,c
  6359  002A94  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6360                           
  6361                           ;AdcApp.c: 47: }
  6362  002A98  0012               	return	
  6363  002A9A                     l150:
  6364                           
  6365                           ;AdcApp.c: 48: else
  6366                           ;AdcApp.c: 49: {
  6367                           ;AdcApp.c: 50: if(cType == TX_TYPE)
  6368  002A9A  5028               	movf	AdcSingleSample@cType,w,c
  6369  002A9C  A4D8               	btfss	status,2,c
  6370  002A9E  D031               	goto	l162
  6371                           
  6372                           ;AdcApp.c: 51: {
  6373                           ;AdcApp.c: 52: if(channelNum == 0)
  6374  002AA0  503B               	movf	_channelNum,w,c
  6375  002AA2  103C               	iorwf	_channelNum+1,w,c
  6376  002AA4  A4D8               	btfss	status,2,c
  6377  002AA6  D004               	goto	l153
  6378                           
  6379                           ;AdcApp.c: 53: {
  6380                           ;AdcApp.c: 54: rxStatistics.AdcValues.OperState = 0;
  6381  002AA8  0E00               	movlw	0
  6382  002AAA  0101               	movlb	1	; () banked
  6383  002AAC  6F9E               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  6384                           
  6385                           ; BSR set to: 1
  6386                           ;AdcApp.c: 55: return;
  6387  002AAE  0012               	return	
  6388  002AB0                     l153:
  6389                           
  6390                           ;AdcApp.c: 57: else
  6391                           ;AdcApp.c: 58: {
  6392                           ;AdcApp.c: 59: if(channelNum == 1) UART_Write_Text("TX SAMPLE CHANNEL: TX-ADC_RREV\n\r")
      +                          ;
  6393                           
  6394                           ; BSR set to: 1
  6395  002AB0  043B               	decf	_channelNum,w,c
  6396  002AB2  103C               	iorwf	_channelNum+1,w,c
  6397  002AB4  A4D8               	btfss	status,2,c
  6398  002AB6  D007               	goto	l156
  6399  002AB8  0ED1               	movlw	low STR_2
  6400  002ABA  6E19               	movwf	UART_Write_Text@text,c
  6401  002ABC  0E7D               	movlw	high STR_2
  6402  002ABE  6E1A               	movwf	UART_Write_Text@text+1,c
  6403  002AC0  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6404  002AC4  D00B               	goto	l158
  6405  002AC6                     l156:
  6406                           
  6407                           ;AdcApp.c: 60: else if(channelNum == 2) UART_Write_Text("TX SAMPLE CHANNEL ADC_TEMP\n\r"
      +                          );
  6408  002AC6  0E02               	movlw	2
  6409  002AC8  183B               	xorwf	_channelNum,w,c
  6410  002ACA  103C               	iorwf	_channelNum+1,w,c
  6411  002ACC  A4D8               	btfss	status,2,c
  6412  002ACE  D006               	goto	l158
  6413  002AD0  0E4E               	movlw	low STR_3
  6414  002AD2  6E19               	movwf	UART_Write_Text@text,c
  6415  002AD4  0E7E               	movlw	high STR_3
  6416  002AD6  6E1A               	movwf	UART_Write_Text@text+1,c
  6417  002AD8  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6418  002ADC                     l158:
  6419                           
  6420                           ;AdcApp.c: 61: if(channelNum == 0x1 || channelNum == 0x2)
  6421  002ADC  043B               	decf	_channelNum,w,c
  6422  002ADE  103C               	iorwf	_channelNum+1,w,c
  6423  002AE0  B4D8               	btfsc	status,2,c
  6424  002AE2  D005               	goto	u9290
  6425  002AE4  0E02               	movlw	2
  6426  002AE6  183B               	xorwf	_channelNum,w,c
  6427  002AE8  103C               	iorwf	_channelNum+1,w,c
  6428  002AEA  A4D8               	btfss	status,2,c
  6429  002AEC  D004               	goto	l159
  6430  002AEE                     u9290:
  6431                           
  6432                           ;AdcApp.c: 62: {
  6433                           ;AdcApp.c: 63: needToSample = 1;
  6434  002AEE  0E01               	movlw	1
  6435  002AF0  0101               	movlb	1	; () banked
  6436  002AF2  6FD7               	movwf	_needToSample& (0+255),b	;volatile
  6437                           
  6438                           ;AdcApp.c: 64: }
  6439  002AF4  D006               	goto	l162
  6440  002AF6                     l159:
  6441                           
  6442                           ;AdcApp.c: 65: else
  6443                           ;AdcApp.c: 66: {
  6444                           ;AdcApp.c: 67: UART_Write_Text("NOT OK \n\r");
  6445                           
  6446                           ; BSR set to: 1
  6447  002AF6  0ED0               	movlw	low STR_1
  6448  002AF8  6E19               	movwf	UART_Write_Text@text,c
  6449  002AFA  0E7F               	movlw	high STR_1
  6450  002AFC  6E1A               	movwf	UART_Write_Text@text+1,c
  6451  002AFE  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6452  002B02                     l162:
  6453                           
  6454                           ;AdcApp.c: 68: }
  6455                           ;AdcApp.c: 69: }
  6456                           ;AdcApp.c: 70: }
  6457                           ;AdcApp.c: 72: if(cType == RX_TYPE)
  6458  002B02  0428               	decf	AdcSingleSample@cType,w,c
  6459  002B04  A4D8               	btfss	status,2,c
  6460  002B06  0012               	return	
  6461                           
  6462                           ;AdcApp.c: 73: {
  6463                           ;AdcApp.c: 74: if(channelNum == 0)
  6464  002B08  503B               	movf	_channelNum,w,c
  6465  002B0A  103C               	iorwf	_channelNum+1,w,c
  6466  002B0C  A4D8               	btfss	status,2,c
  6467  002B0E  D004               	goto	l164
  6468                           
  6469                           ;AdcApp.c: 75: {
  6470                           ;AdcApp.c: 76: rxStatistics.AdcValues.OperState = 0;
  6471  002B10  0E00               	movlw	0
  6472  002B12  0101               	movlb	1	; () banked
  6473  002B14  6F9E               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  6474                           
  6475                           ; BSR set to: 1
  6476                           ;AdcApp.c: 78: }
  6477                           
  6478                           ; BSR set to: 1
  6479                           ;AdcApp.c: 77: return;
  6480  002B16  0012               	return	
  6481  002B18                     l164:
  6482                           
  6483                           ;AdcApp.c: 79: else
  6484                           ;AdcApp.c: 80: {
  6485                           ;AdcApp.c: 81: if(channelNum == 1) UART_Write_Text("RX SAMPLE CHANNEL RX-ADC_FFWR\n\r");
  6486                           
  6487                           ; BSR set to: 1
  6488  002B18  043B               	decf	_channelNum,w,c
  6489  002B1A  103C               	iorwf	_channelNum+1,w,c
  6490  002B1C  A4D8               	btfss	status,2,c
  6491  002B1E  D007               	goto	l166
  6492  002B20  0EF2               	movlw	low STR_5
  6493  002B22  6E19               	movwf	UART_Write_Text@text,c
  6494  002B24  0E7D               	movlw	high STR_5
  6495  002B26  6E1A               	movwf	UART_Write_Text@text+1,c
  6496  002B28  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6497  002B2C  D00B               	goto	l168
  6498  002B2E                     l166:
  6499                           
  6500                           ;AdcApp.c: 82: else if(channelNum == 2) UART_Write_Text("RX SAMPLE CHANNEL RX-ADC_VG_MON
      +                          \n\r");
  6501  002B2E  0E02               	movlw	2
  6502  002B30  183B               	xorwf	_channelNum,w,c
  6503  002B32  103C               	iorwf	_channelNum+1,w,c
  6504  002B34  A4D8               	btfss	status,2,c
  6505  002B36  D006               	goto	l168
  6506  002B38  0EAF               	movlw	low STR_6
  6507  002B3A  6E19               	movwf	UART_Write_Text@text,c
  6508  002B3C  0E7D               	movlw	high STR_6
  6509  002B3E  6E1A               	movwf	UART_Write_Text@text+1,c
  6510  002B40  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6511  002B44                     l168:
  6512                           
  6513                           ;AdcApp.c: 83: if(channelNum == 0x1 || channelNum == 0x2)
  6514  002B44  043B               	decf	_channelNum,w,c
  6515  002B46  103C               	iorwf	_channelNum+1,w,c
  6516  002B48  B4D8               	btfsc	status,2,c
  6517  002B4A  D005               	goto	u9350
  6518  002B4C  0E02               	movlw	2
  6519  002B4E  183B               	xorwf	_channelNum,w,c
  6520  002B50  103C               	iorwf	_channelNum+1,w,c
  6521  002B52  A4D8               	btfss	status,2,c
  6522  002B54  D004               	goto	l169
  6523  002B56                     u9350:
  6524                           
  6525                           ;AdcApp.c: 84: {
  6526                           ;AdcApp.c: 85: needToSample = 1;
  6527  002B56  0E01               	movlw	1
  6528  002B58  0101               	movlb	1	; () banked
  6529  002B5A  6FD7               	movwf	_needToSample& (0+255),b	;volatile
  6530                           
  6531                           ;AdcApp.c: 86: }
  6532  002B5C  0012               	return	
  6533  002B5E                     l169:
  6534                           
  6535                           ;AdcApp.c: 87: else
  6536                           ;AdcApp.c: 88: {
  6537                           ;AdcApp.c: 89: UART_Write_Text("NOT OK \n\r");
  6538                           
  6539                           ; BSR set to: 1
  6540  002B5E  0ED0               	movlw	low STR_1
  6541  002B60  6E19               	movwf	UART_Write_Text@text,c
  6542  002B62  0E7F               	movlw	high STR_1
  6543  002B64  6E1A               	movwf	UART_Write_Text@text+1,c
  6544  002B66  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6545  002B6A  0012               	return	
  6546  002B6C                     __end_of_AdcSingleSample:
  6547                           	opt stack 0
  6548                           tosu	equ	0xFFF
  6549                           tosh	equ	0xFFE
  6550                           tosl	equ	0xFFD
  6551                           pclath	equ	0xFFA
  6552                           tblptru	equ	0xFF8
  6553                           tblptrh	equ	0xFF7
  6554                           tblptrl	equ	0xFF6
  6555                           tablat	equ	0xFF5
  6556                           prodh	equ	0xFF4
  6557                           prodl	equ	0xFF3
  6558                           postinc0	equ	0xFEE
  6559                           wreg	equ	0xFE8
  6560                           indf1	equ	0xFE7
  6561                           postdec1	equ	0xFE5
  6562                           fsr1h	equ	0xFE2
  6563                           fsr1l	equ	0xFE1
  6564                           indf2	equ	0xFDF
  6565                           postinc2	equ	0xFDE
  6566                           fsr2h	equ	0xFDA
  6567                           fsr2l	equ	0xFD9
  6568                           status	equ	0xFD8
  6569                           
  6570 ;; *************** function _testLeds *****************
  6571 ;; Defined at:
  6572 ;;		line 43 in file "LedsApp.c"
  6573 ;; Parameters:    Size  Location     Type
  6574 ;;		None
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;  idx             2   24[COMRAM] int 
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  1    wreg      void 
  6579 ;; Registers used:
  6580 ;;		wreg, status,2, status,0
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6586 ;;      Params:         0       0       0       0       0       0       0
  6587 ;;      Locals:         2       0       0       0       0       0       0
  6588 ;;      Temps:          1       0       0       0       0       0       0
  6589 ;;      Totals:         3       0       0       0       0       0       0
  6590 ;;Total ram usage:        3 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:    3
  6593 ;; This function calls:
  6594 ;;		Nothing
  6595 ;; This function is called by:
  6596 ;;		_GroupCommon
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           	psect	text11
  6601  003DD8                     __ptext11:
  6602                           	opt stack 0
  6603  003DD8                     _testLeds:
  6604                           	opt stack 25
  6605                           
  6606                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6607                           
  6608                           ;incstack = 0
  6609  003DD8  0E00               	movlw	0
  6610  003DDA  6E1A               	movwf	testLeds@idx+1,c
  6611  003DDC  0E00               	movlw	0
  6612  003DDE  6E19               	movwf	testLeds@idx,c
  6613  003DE0                     l6600:
  6614  003DE0  BE1A               	btfsc	testLeds@idx+1,7,c
  6615  003DE2  D006               	goto	l70
  6616  003DE4  501A               	movf	testLeds@idx+1,w,c
  6617  003DE6  E127               	bnz	l72
  6618  003DE8  0E0A               	movlw	10
  6619  003DEA  5C19               	subwf	testLeds@idx,w,c
  6620  003DEC  B0D8               	btfsc	status,0,c
  6621  003DEE  0012               	return	
  6622  003DF0                     l70:
  6623                           
  6624                           ;LedsApp.c: 47: {
  6625                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6626  003DF0  808B               	bsf	3979,0,c	;volatile
  6627                           
  6628                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6629  003DF2  0E82               	movlw	130
  6630  003DF4  6E18               	movwf	??_testLeds& (0+255),c
  6631  003DF6  0EDE               	movlw	222
  6632  003DF8                     u10047:
  6633  003DF8  2EE8               	decfsz	wreg,f,c
  6634  003DFA  D7FE               	bra	u10047
  6635  003DFC  2E18               	decfsz	??_testLeds& (0+255),f,c
  6636  003DFE  D7FC               	bra	u10047
  6637                           
  6638                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6639  003E00  888A               	bsf	3978,4,c	;volatile
  6640                           
  6641                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6642  003E02  0E82               	movlw	130
  6643  003E04  6E18               	movwf	??_testLeds& (0+255),c
  6644  003E06  0EDE               	movlw	222
  6645  003E08                     u10057:
  6646  003E08  2EE8               	decfsz	wreg,f,c
  6647  003E0A  D7FE               	bra	u10057
  6648  003E0C  2E18               	decfsz	??_testLeds& (0+255),f,c
  6649  003E0E  D7FC               	bra	u10057
  6650                           
  6651                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6652  003E10  908B               	bcf	3979,0,c	;volatile
  6653                           
  6654                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6655  003E12  0E82               	movlw	130
  6656  003E14  6E18               	movwf	??_testLeds& (0+255),c
  6657  003E16  0EDE               	movlw	222
  6658  003E18                     u10067:
  6659  003E18  2EE8               	decfsz	wreg,f,c
  6660  003E1A  D7FE               	bra	u10067
  6661  003E1C  2E18               	decfsz	??_testLeds& (0+255),f,c
  6662  003E1E  D7FC               	bra	u10067
  6663                           
  6664                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6665  003E20  988A               	bcf	3978,4,c	;volatile
  6666                           
  6667                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6668  003E22  0E82               	movlw	130
  6669  003E24  6E18               	movwf	??_testLeds& (0+255),c
  6670  003E26  0EDE               	movlw	222
  6671  003E28                     u10077:
  6672  003E28  2EE8               	decfsz	wreg,f,c
  6673  003E2A  D7FE               	bra	u10077
  6674  003E2C  2E18               	decfsz	??_testLeds& (0+255),f,c
  6675  003E2E  D7FC               	bra	u10077
  6676  003E30  4A19               	infsnz	testLeds@idx,f,c
  6677  003E32  2A1A               	incf	testLeds@idx+1,f,c
  6678  003E34  D7D5               	goto	l6600
  6679  003E36                     l72:
  6680  003E36  0012               	return		;funcret
  6681  003E38                     __end_of_testLeds:
  6682                           	opt stack 0
  6683                           tosu	equ	0xFFF
  6684                           tosh	equ	0xFFE
  6685                           tosl	equ	0xFFD
  6686                           pclath	equ	0xFFA
  6687                           tblptru	equ	0xFF8
  6688                           tblptrh	equ	0xFF7
  6689                           tblptrl	equ	0xFF6
  6690                           tablat	equ	0xFF5
  6691                           prodh	equ	0xFF4
  6692                           prodl	equ	0xFF3
  6693                           postinc0	equ	0xFEE
  6694                           wreg	equ	0xFE8
  6695                           indf1	equ	0xFE7
  6696                           postdec1	equ	0xFE5
  6697                           fsr1h	equ	0xFE2
  6698                           fsr1l	equ	0xFE1
  6699                           indf2	equ	0xFDF
  6700                           postinc2	equ	0xFDE
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _set_system_type *****************
  6706 ;; Defined at:
  6707 ;;		line 102 in file "SystemCommon.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  data            2   23[BANK0 ] PTR unsigned char 
  6710 ;;		 -> rxMsgData(20), 
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;  retNum          4   25[BANK0 ] unsigned long 
  6713 ;; Return value:  Size  Location     Type
  6714 ;;                  1    wreg      void 
  6715 ;; Registers used:
  6716 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6722 ;;      Params:         0       2       0       0       0       0       0
  6723 ;;      Locals:         0       4       0       0       0       0       0
  6724 ;;      Temps:          0       0       0       0       0       0       0
  6725 ;;      Totals:         0       6       0       0       0       0       0
  6726 ;;Total ram usage:        6 bytes
  6727 ;; Hardware stack levels used:    1
  6728 ;; Hardware stack levels required when called:    7
  6729 ;; This function calls:
  6730 ;;		_GetIntFromUartData
  6731 ;;		_UART_Write_Text
  6732 ;;		___lldiv
  6733 ;; This function is called by:
  6734 ;;		_GroupCommon
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           	psect	text12
  6739  003576                     __ptext12:
  6740                           	opt stack 0
  6741  003576                     _set_system_type:
  6742                           	opt stack 21
  6743                           
  6744                           ;SystemCommon.c: 104: uint32_t retNum =0;
  6745                           
  6746                           ;incstack = 0
  6747  003576  0E00               	movlw	0
  6748  003578  0100               	movlb	0	; () banked
  6749  00357A  6F79               	movwf	set_system_type@retNum& (0+255),b
  6750  00357C  0E00               	movlw	0
  6751  00357E  6F7A               	movwf	(set_system_type@retNum+1)& (0+255),b
  6752  003580  0E00               	movlw	0
  6753  003582  6F7B               	movwf	(set_system_type@retNum+2)& (0+255),b
  6754  003584  0E00               	movlw	0
  6755  003586  6F7C               	movwf	(set_system_type@retNum+3)& (0+255),b
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;SystemCommon.c: 105: retNum = GetIntFromUartData(data);
  6759  003588  C077  F066         	movff	set_system_type@data,GetIntFromUartData@data
  6760  00358C  C078  F067         	movff	set_system_type@data+1,GetIntFromUartData@data+1
  6761  003590  EC55  F01B         	call	_GetIntFromUartData	;wreg free
  6762  003594  C066  F079         	movff	?_GetIntFromUartData,set_system_type@retNum
  6763  003598  C067  F07A         	movff	?_GetIntFromUartData+1,set_system_type@retNum+1
  6764  00359C  C068  F07B         	movff	?_GetIntFromUartData+2,set_system_type@retNum+2
  6765  0035A0  C069  F07C         	movff	?_GetIntFromUartData+3,set_system_type@retNum+3
  6766                           
  6767                           ;SystemCommon.c: 106: if((retNum / 10) == (1234))
  6768  0035A4  C079  F018         	movff	set_system_type@retNum,___lldiv@dividend
  6769  0035A8  C07A  F019         	movff	set_system_type@retNum+1,___lldiv@dividend+1
  6770  0035AC  C07B  F01A         	movff	set_system_type@retNum+2,___lldiv@dividend+2
  6771  0035B0  C07C  F01B         	movff	set_system_type@retNum+3,___lldiv@dividend+3
  6772  0035B4  0E0A               	movlw	10
  6773  0035B6  6E1C               	movwf	___lldiv@divisor,c
  6774  0035B8  0E00               	movlw	0
  6775  0035BA  6E1D               	movwf	___lldiv@divisor+1,c
  6776  0035BC  0E00               	movlw	0
  6777  0035BE  6E1E               	movwf	___lldiv@divisor+2,c
  6778  0035C0  0E00               	movlw	0
  6779  0035C2  6E1F               	movwf	___lldiv@divisor+3,c
  6780  0035C4  ECB7  F01C         	call	___lldiv	;wreg free
  6781  0035C8  0ED2               	movlw	210
  6782  0035CA  1818               	xorwf	?___lldiv,w,c
  6783  0035CC  E11A               	bnz	l9354
  6784  0035CE  0E04               	movlw	4
  6785  0035D0  1819               	xorwf	?___lldiv+1,w,c
  6786  0035D2  101A               	iorwf	?___lldiv+2,w,c
  6787  0035D4  101B               	iorwf	?___lldiv+3,w,c
  6788  0035D6  A4D8               	btfss	status,2,c
  6789  0035D8  D014               	goto	l1354
  6790                           
  6791                           ;SystemCommon.c: 107: {
  6792                           ;SystemCommon.c: 108: if((retNum & 0x1) == 1)
  6793  0035DA  0100               	movlb	0	; () banked
  6794  0035DC  A179               	btfss	set_system_type@retNum& (0+255),0,b
  6795  0035DE  D004               	goto	l1355
  6796                           
  6797                           ; BSR set to: 0
  6798                           ;SystemCommon.c: 109: systemStatus.UnitType = 1;
  6799  0035E0  0E01               	movlw	1
  6800  0035E2  0101               	movlb	1	; () banked
  6801  0035E4  6FB5               	movwf	(_systemStatus+3)& (0+255),b	;volatile
  6802  0035E6  0012               	return	
  6803  0035E8                     l1355:
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;SystemCommon.c: 110: else if((retNum & 0x1) == 0)
  6807  0035E8  B179               	btfsc	set_system_type@retNum& (0+255),0,b
  6808  0035EA  D004               	goto	l1357
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;SystemCommon.c: 111: systemStatus.UnitType = 0;
  6812  0035EC  0E00               	movlw	0
  6813  0035EE  0101               	movlb	1	; () banked
  6814  0035F0  6FB5               	movwf	(_systemStatus+3)& (0+255),b	;volatile
  6815  0035F2  0012               	return	
  6816  0035F4                     l1357:
  6817                           
  6818                           ;SystemCommon.c: 112: else
  6819                           ;SystemCommon.c: 113: UART_Write_Text("NOT OK \n\r");
  6820                           
  6821                           ; BSR set to: 1
  6822  0035F4  0ED0               	movlw	low STR_1
  6823  0035F6  6E19               	movwf	UART_Write_Text@text,c
  6824  0035F8  0E7F               	movlw	high STR_1
  6825  0035FA  6E1A               	movwf	UART_Write_Text@text+1,c
  6826  0035FC  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6827                           
  6828                           ;SystemCommon.c: 114: }
  6829  003600  0012               	return	
  6830  003602                     l1354:
  6831  003602                     l9354:
  6832                           
  6833                           ;SystemCommon.c: 115: else
  6834                           ;SystemCommon.c: 116: UART_Write_Text("NOT OK \n\r");
  6835  003602  0ED0               	movlw	low STR_1
  6836  003604  6E19               	movwf	UART_Write_Text@text,c
  6837  003606  0E7F               	movlw	high STR_1
  6838  003608  6E1A               	movwf	UART_Write_Text@text+1,c
  6839  00360A  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6840  00360E  0012               	return	
  6841  003610                     __end_of_set_system_type:
  6842                           	opt stack 0
  6843                           tosu	equ	0xFFF
  6844                           tosh	equ	0xFFE
  6845                           tosl	equ	0xFFD
  6846                           pclath	equ	0xFFA
  6847                           tblptru	equ	0xFF8
  6848                           tblptrh	equ	0xFF7
  6849                           tblptrl	equ	0xFF6
  6850                           tablat	equ	0xFF5
  6851                           prodh	equ	0xFF4
  6852                           prodl	equ	0xFF3
  6853                           postinc0	equ	0xFEE
  6854                           wreg	equ	0xFE8
  6855                           indf1	equ	0xFE7
  6856                           postdec1	equ	0xFE5
  6857                           fsr1h	equ	0xFE2
  6858                           fsr1l	equ	0xFE1
  6859                           indf2	equ	0xFDF
  6860                           postinc2	equ	0xFDE
  6861                           fsr2h	equ	0xFDA
  6862                           fsr2l	equ	0xFD9
  6863                           status	equ	0xFD8
  6864                           
  6865 ;; *************** function _SetUartRefrashRate *****************
  6866 ;; Defined at:
  6867 ;;		line 119 in file "SystemCommon.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  data            2   23[BANK0 ] PTR unsigned char 
  6870 ;;		 -> rxMsgData(20), 
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;  retNum          4   25[BANK0 ] unsigned long 
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  1    wreg      void 
  6875 ;; Registers used:
  6876 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6882 ;;      Params:         0       2       0       0       0       0       0
  6883 ;;      Locals:         0       4       0       0       0       0       0
  6884 ;;      Temps:          0       0       0       0       0       0       0
  6885 ;;      Totals:         0       6       0       0       0       0       0
  6886 ;;Total ram usage:        6 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:    7
  6889 ;; This function calls:
  6890 ;;		_GetIntFromUartData
  6891 ;;		_UART_Write_Text
  6892 ;; This function is called by:
  6893 ;;		_GroupCommon
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           	psect	text13
  6898  003E38                     __ptext13:
  6899                           	opt stack 0
  6900  003E38                     _SetUartRefrashRate:
  6901                           	opt stack 21
  6902                           
  6903                           ;SystemCommon.c: 121: uint32_t retNum =0;
  6904                           
  6905                           ;incstack = 0
  6906  003E38  0E00               	movlw	0
  6907  003E3A  0100               	movlb	0	; () banked
  6908  003E3C  6F79               	movwf	SetUartRefrashRate@retNum& (0+255),b
  6909  003E3E  0E00               	movlw	0
  6910  003E40  6F7A               	movwf	(SetUartRefrashRate@retNum+1)& (0+255),b
  6911  003E42  0E00               	movlw	0
  6912  003E44  6F7B               	movwf	(SetUartRefrashRate@retNum+2)& (0+255),b
  6913  003E46  0E00               	movlw	0
  6914  003E48  6F7C               	movwf	(SetUartRefrashRate@retNum+3)& (0+255),b
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;SystemCommon.c: 122: retNum = GetIntFromUartData(data);
  6918  003E4A  C077  F066         	movff	SetUartRefrashRate@data,GetIntFromUartData@data
  6919  003E4E  C078  F067         	movff	SetUartRefrashRate@data+1,GetIntFromUartData@data+1
  6920  003E52  EC55  F01B         	call	_GetIntFromUartData	;wreg free
  6921  003E56  C066  F079         	movff	?_GetIntFromUartData,SetUartRefrashRate@retNum
  6922  003E5A  C067  F07A         	movff	?_GetIntFromUartData+1,SetUartRefrashRate@retNum+1
  6923  003E5E  C068  F07B         	movff	?_GetIntFromUartData+2,SetUartRefrashRate@retNum+2
  6924  003E62  C069  F07C         	movff	?_GetIntFromUartData+3,SetUartRefrashRate@retNum+3
  6925                           
  6926                           ;SystemCommon.c: 123: if(retNum > 0 || retNum < 21)
  6927  003E66  0100               	movlb	0	; () banked
  6928  003E68  5179               	movf	SetUartRefrashRate@retNum& (0+255),w,b
  6929  003E6A  117A               	iorwf	(SetUartRefrashRate@retNum+1)& (0+255),w,b
  6930  003E6C  117B               	iorwf	(SetUartRefrashRate@retNum+2)& (0+255),w,b
  6931  003E6E  117C               	iorwf	(SetUartRefrashRate@retNum+3)& (0+255),w,b
  6932  003E70  A4D8               	btfss	status,2,c
  6933  003E72  D008               	goto	u9500
  6934                           
  6935                           ; BSR set to: 0
  6936  003E74  517C               	movf	(SetUartRefrashRate@retNum+3)& (0+255),w,b
  6937  003E76  117B               	iorwf	(SetUartRefrashRate@retNum+2)& (0+255),w,b
  6938  003E78  117A               	iorwf	(SetUartRefrashRate@retNum+1)& (0+255),w,b
  6939  003E7A  E107               	bnz	l9382
  6940  003E7C  0E15               	movlw	21
  6941  003E7E  5D79               	subwf	SetUartRefrashRate@retNum& (0+255),w,b
  6942  003E80  B0D8               	btfsc	status,0,c
  6943  003E82  D003               	goto	l1363
  6944  003E84                     u9500:
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;SystemCommon.c: 124: {
  6948                           ;SystemCommon.c: 125: systemStatus.UartRefreshRate = retNum;
  6949  003E84  C079  F1BB         	movff	SetUartRefrashRate@retNum,_systemStatus+9	;volatile
  6950                           
  6951                           ;SystemCommon.c: 126: }
  6952  003E88  0012               	return	
  6953  003E8A                     l1363:
  6954  003E8A                     l9382:
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;SystemCommon.c: 127: else
  6958                           ;SystemCommon.c: 128: UART_Write_Text("NOT OK \n\r");
  6959  003E8A  0ED0               	movlw	low STR_1
  6960  003E8C  6E19               	movwf	UART_Write_Text@text,c
  6961  003E8E  0E7F               	movlw	high STR_1
  6962  003E90  6E1A               	movwf	UART_Write_Text@text+1,c
  6963  003E92  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  6964  003E96  0012               	return	
  6965  003E98                     __end_of_SetUartRefrashRate:
  6966                           	opt stack 0
  6967                           tosu	equ	0xFFF
  6968                           tosh	equ	0xFFE
  6969                           tosl	equ	0xFFD
  6970                           pclath	equ	0xFFA
  6971                           tblptru	equ	0xFF8
  6972                           tblptrh	equ	0xFF7
  6973                           tblptrl	equ	0xFF6
  6974                           tablat	equ	0xFF5
  6975                           prodh	equ	0xFF4
  6976                           prodl	equ	0xFF3
  6977                           postinc0	equ	0xFEE
  6978                           wreg	equ	0xFE8
  6979                           indf1	equ	0xFE7
  6980                           postdec1	equ	0xFE5
  6981                           fsr1h	equ	0xFE2
  6982                           fsr1l	equ	0xFE1
  6983                           indf2	equ	0xFDF
  6984                           postinc2	equ	0xFDE
  6985                           fsr2h	equ	0xFDA
  6986                           fsr2l	equ	0xFD9
  6987                           status	equ	0xFD8
  6988                           
  6989 ;; *************** function _SetUartMode *****************
  6990 ;; Defined at:
  6991 ;;		line 132 in file "SystemCommon.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  data            2   23[BANK0 ] PTR unsigned char 
  6994 ;;		 -> rxMsgData(20), 
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  retNum          4   25[BANK0 ] unsigned long 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;                  1    wreg      void 
  6999 ;; Registers used:
  7000 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7006 ;;      Params:         0       2       0       0       0       0       0
  7007 ;;      Locals:         0       4       0       0       0       0       0
  7008 ;;      Temps:          0       0       0       0       0       0       0
  7009 ;;      Totals:         0       6       0       0       0       0       0
  7010 ;;Total ram usage:        6 bytes
  7011 ;; Hardware stack levels used:    1
  7012 ;; Hardware stack levels required when called:    7
  7013 ;; This function calls:
  7014 ;;		_GetIntFromUartData
  7015 ;;		_UART_Write_Text
  7016 ;; This function is called by:
  7017 ;;		_GroupCommon
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           	psect	text14
  7022  003C3E                     __ptext14:
  7023                           	opt stack 0
  7024  003C3E                     _SetUartMode:
  7025                           	opt stack 21
  7026                           
  7027                           ;SystemCommon.c: 134: uint32_t retNum =0;
  7028                           
  7029                           ;incstack = 0
  7030  003C3E  0E00               	movlw	0
  7031  003C40  0100               	movlb	0	; () banked
  7032  003C42  6F79               	movwf	SetUartMode@retNum& (0+255),b
  7033  003C44  0E00               	movlw	0
  7034  003C46  6F7A               	movwf	(SetUartMode@retNum+1)& (0+255),b
  7035  003C48  0E00               	movlw	0
  7036  003C4A  6F7B               	movwf	(SetUartMode@retNum+2)& (0+255),b
  7037  003C4C  0E00               	movlw	0
  7038  003C4E  6F7C               	movwf	(SetUartMode@retNum+3)& (0+255),b
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;SystemCommon.c: 135: retNum = GetIntFromUartData(data);
  7042  003C50  C077  F066         	movff	SetUartMode@data,GetIntFromUartData@data
  7043  003C54  C078  F067         	movff	SetUartMode@data+1,GetIntFromUartData@data+1
  7044  003C58  EC55  F01B         	call	_GetIntFromUartData	;wreg free
  7045  003C5C  C066  F079         	movff	?_GetIntFromUartData,SetUartMode@retNum
  7046  003C60  C067  F07A         	movff	?_GetIntFromUartData+1,SetUartMode@retNum+1
  7047  003C64  C068  F07B         	movff	?_GetIntFromUartData+2,SetUartMode@retNum+2
  7048  003C68  C069  F07C         	movff	?_GetIntFromUartData+3,SetUartMode@retNum+3
  7049                           
  7050                           ;SystemCommon.c: 136: if(retNum == 0)
  7051  003C6C  0100               	movlb	0	; () banked
  7052  003C6E  5179               	movf	SetUartMode@retNum& (0+255),w,b
  7053  003C70  117A               	iorwf	(SetUartMode@retNum+1)& (0+255),w,b
  7054  003C72  117B               	iorwf	(SetUartMode@retNum+2)& (0+255),w,b
  7055  003C74  117C               	iorwf	(SetUartMode@retNum+3)& (0+255),w,b
  7056  003C76  A4D8               	btfss	status,2,c
  7057  003C78  D004               	goto	l1370
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;SystemCommon.c: 137: systemStatus.UartMode = 0;
  7061  003C7A  0E00               	movlw	0
  7062  003C7C  0101               	movlb	1	; () banked
  7063  003C7E  6FBA               	movwf	(_systemStatus+8)& (0+255),b	;volatile
  7064  003C80  0012               	return	
  7065  003C82                     l1370:
  7066                           
  7067                           ;SystemCommon.c: 138: else if(retNum == 1)
  7068                           
  7069                           ; BSR set to: 1
  7070  003C82  0100               	movlb	0	; () banked
  7071  003C84  0579               	decf	SetUartMode@retNum& (0+255),w,b
  7072  003C86  117A               	iorwf	(SetUartMode@retNum+1)& (0+255),w,b
  7073  003C88  117B               	iorwf	(SetUartMode@retNum+2)& (0+255),w,b
  7074  003C8A  117C               	iorwf	(SetUartMode@retNum+3)& (0+255),w,b
  7075  003C8C  A4D8               	btfss	status,2,c
  7076  003C8E  D004               	goto	l1372
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;SystemCommon.c: 139: systemStatus.UartMode = 1;
  7080  003C90  0E01               	movlw	1
  7081  003C92  0101               	movlb	1	; () banked
  7082  003C94  6FBA               	movwf	(_systemStatus+8)& (0+255),b	;volatile
  7083  003C96  0012               	return	
  7084  003C98                     l1372:
  7085                           
  7086                           ;SystemCommon.c: 140: else
  7087                           ;SystemCommon.c: 141: UART_Write_Text("NOT OK \n\r");
  7088                           
  7089                           ; BSR set to: 1
  7090  003C98  0ED0               	movlw	low STR_1
  7091  003C9A  6E19               	movwf	UART_Write_Text@text,c
  7092  003C9C  0E7F               	movlw	high STR_1
  7093  003C9E  6E1A               	movwf	UART_Write_Text@text+1,c
  7094  003CA0  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  7095  003CA4  0012               	return	
  7096  003CA6                     __end_of_SetUartMode:
  7097                           	opt stack 0
  7098                           tosu	equ	0xFFF
  7099                           tosh	equ	0xFFE
  7100                           tosl	equ	0xFFD
  7101                           pclath	equ	0xFFA
  7102                           tblptru	equ	0xFF8
  7103                           tblptrh	equ	0xFF7
  7104                           tblptrl	equ	0xFF6
  7105                           tablat	equ	0xFF5
  7106                           prodh	equ	0xFF4
  7107                           prodl	equ	0xFF3
  7108                           postinc0	equ	0xFEE
  7109                           wreg	equ	0xFE8
  7110                           indf1	equ	0xFE7
  7111                           postdec1	equ	0xFE5
  7112                           fsr1h	equ	0xFE2
  7113                           fsr1l	equ	0xFE1
  7114                           indf2	equ	0xFDF
  7115                           postinc2	equ	0xFDE
  7116                           fsr2h	equ	0xFDA
  7117                           fsr2l	equ	0xFD9
  7118                           status	equ	0xFD8
  7119                           
  7120 ;; *************** function _GetIntFromUartData *****************
  7121 ;; Defined at:
  7122 ;;		line 60 in file "SystemCommon.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;  data            2    6[BANK0 ] PTR unsigned char 
  7125 ;;		 -> rxMsgData(20), 
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;  c               1   20[BANK0 ] unsigned char 
  7128 ;;  idx             2   21[BANK0 ] int 
  7129 ;;  dataRegArr      8   12[BANK0 ] unsigned char [8]
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  4    6[BANK0 ] unsigned long 
  7132 ;; Registers used:
  7133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7139 ;;      Params:         0       4       0       0       0       0       0
  7140 ;;      Locals:         0      11       0       0       0       0       0
  7141 ;;      Temps:          0       2       0       0       0       0       0
  7142 ;;      Totals:         0      17       0       0       0       0       0
  7143 ;;Total ram usage:       17 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:    6
  7146 ;; This function calls:
  7147 ;;		_ZeroArray
  7148 ;;		_strtol
  7149 ;; This function is called by:
  7150 ;;		_GroupRx
  7151 ;;		_GroupTx
  7152 ;;		_set_system_type
  7153 ;;		_SetUartRefrashRate
  7154 ;;		_SetUartMode
  7155 ;;		_DacSetValue
  7156 ;;		_UpdateTxFreq
  7157 ;;		_UpdateRxFreq
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           	psect	text15
  7162  0036AA                     __ptext15:
  7163                           	opt stack 0
  7164  0036AA                     _GetIntFromUartData:
  7165                           	opt stack 22
  7166                           
  7167                           ;SystemCommon.c: 62: char dataRegArr[8];
  7168                           ;SystemCommon.c: 63: ZeroArray(dataRegArr, 8);
  7169                           
  7170                           ;incstack = 0
  7171  0036AA  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  7172  0036AC  6E20               	movwf	ZeroArray@array,c
  7173  0036AE  0E00               	movlw	high GetIntFromUartData@dataRegArr
  7174  0036B0  6E21               	movwf	ZeroArray@array+1,c
  7175  0036B2  0E00               	movlw	0
  7176  0036B4  6E23               	movwf	ZeroArray@size+1,c
  7177  0036B6  0E08               	movlw	8
  7178  0036B8  6E22               	movwf	ZeroArray@size,c
  7179  0036BA  EC96  F023         	call	_ZeroArray	;wreg free
  7180                           
  7181                           ;SystemCommon.c: 65: for(int idx = 0; idx < 8; idx++)
  7182  0036BE  0E00               	movlw	0
  7183  0036C0  0100               	movlb	0	; () banked
  7184  0036C2  6F76               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  7185  0036C4  0E00               	movlw	0
  7186  0036C6  6F75               	movwf	GetIntFromUartData@idx& (0+255),b
  7187  0036C8                     l8976:
  7188                           
  7189                           ; BSR set to: 0
  7190  0036C8  BF76               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  7191  0036CA  D006               	goto	l1337
  7192  0036CC  5176               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  7193  0036CE  E120               	bnz	l8994
  7194  0036D0  0E08               	movlw	8
  7195  0036D2  5D75               	subwf	GetIntFromUartData@idx& (0+255),w,b
  7196  0036D4  B0D8               	btfsc	status,0,c
  7197  0036D6  D01C               	goto	u9110
  7198  0036D8                     l1337:
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;SystemCommon.c: 66: {
  7202                           ;SystemCommon.c: 67: char c = data[idx + 1];
  7203                           
  7204                           ; BSR set to: 0
  7205  0036D8  0E01               	movlw	1
  7206  0036DA  2575               	addwf	GetIntFromUartData@idx& (0+255),w,b
  7207  0036DC  6F6A               	movwf	??_GetIntFromUartData& (0+255),b
  7208  0036DE  0E00               	movlw	0
  7209  0036E0  2176               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  7210  0036E2  6F6B               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  7211  0036E4  516A               	movf	??_GetIntFromUartData& (0+255),w,b
  7212  0036E6  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  7213  0036E8  6ED9               	movwf	fsr2l,c
  7214  0036EA  516B               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  7215  0036EC  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  7216  0036EE  6EDA               	movwf	fsr2h,c
  7217  0036F0  50DF               	movf	indf2,w,c
  7218  0036F2  6F74               	movwf	GetIntFromUartData@c& (0+255),b
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;SystemCommon.c: 68: if(c == (0))
  7222  0036F4  5174               	movf	GetIntFromUartData@c& (0+255),w,b
  7223  0036F6  B4D8               	btfsc	status,2,c
  7224  0036F8  D00B               	goto	u9110
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;SystemCommon.c: 72: else
  7228                           ;SystemCommon.c: 73: {
  7229                           ;SystemCommon.c: 74: dataRegArr[idx] = c;
  7230                           
  7231                           ; BSR set to: 0
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;SystemCommon.c: 71: }
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;SystemCommon.c: 69: {
  7238                           ;SystemCommon.c: 70: break;
  7239  0036FA  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  7240  0036FC  2575               	addwf	GetIntFromUartData@idx& (0+255),w,b
  7241  0036FE  6ED9               	movwf	fsr2l,c
  7242  003700  0E00               	movlw	high GetIntFromUartData@dataRegArr
  7243  003702  2176               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  7244  003704  6EDA               	movwf	fsr2h,c
  7245  003706  C074  FFDF         	movff	GetIntFromUartData@c,indf2
  7246                           
  7247                           ; BSR set to: 0
  7248                           
  7249                           ; BSR set to: 0
  7250  00370A  4B75               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  7251  00370C  2B76               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  7252  00370E  D7DC               	goto	l8976
  7253  003710                     u9110:
  7254  003710                     l8994:
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;SystemCommon.c: 75: }
  7258                           ;SystemCommon.c: 76: }
  7259                           ;SystemCommon.c: 78: return strtol(dataRegArr, (0), 10);
  7260  003710  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  7261  003712  6E26               	movwf	strtol@s,c
  7262  003714  0E00               	movlw	high GetIntFromUartData@dataRegArr
  7263  003716  6E27               	movwf	strtol@s+1,c
  7264  003718  0E00               	movlw	0
  7265  00371A  6E28               	movwf	strtol@endptr,c
  7266  00371C  0E00               	movlw	0
  7267  00371E  6E29               	movwf	strtol@endptr+1,c
  7268  003720  0E00               	movlw	0
  7269  003722  6E2B               	movwf	strtol@base+1,c
  7270  003724  0E0A               	movlw	10
  7271  003726  6E2A               	movwf	strtol@base,c
  7272  003728  EC8A  F00B         	call	_strtol	;wreg free
  7273  00372C  C026  F066         	movff	?_strtol,?_GetIntFromUartData
  7274  003730  C027  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  7275  003734  C028  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  7276  003738  C029  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  7277  00373C  0012               	return	
  7278  00373E                     __end_of_GetIntFromUartData:
  7279                           	opt stack 0
  7280                           tosu	equ	0xFFF
  7281                           tosh	equ	0xFFE
  7282                           tosl	equ	0xFFD
  7283                           pclath	equ	0xFFA
  7284                           tblptru	equ	0xFF8
  7285                           tblptrh	equ	0xFF7
  7286                           tblptrl	equ	0xFF6
  7287                           tablat	equ	0xFF5
  7288                           prodh	equ	0xFF4
  7289                           prodl	equ	0xFF3
  7290                           postinc0	equ	0xFEE
  7291                           wreg	equ	0xFE8
  7292                           indf1	equ	0xFE7
  7293                           postdec1	equ	0xFE5
  7294                           fsr1h	equ	0xFE2
  7295                           fsr1l	equ	0xFE1
  7296                           indf2	equ	0xFDF
  7297                           postinc2	equ	0xFDE
  7298                           fsr2h	equ	0xFDA
  7299                           fsr2l	equ	0xFD9
  7300                           status	equ	0xFD8
  7301                           
  7302 ;; *************** function _strtol *****************
  7303 ;; Defined at:
  7304 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  s               2   37[COMRAM] PTR const unsigned char 
  7307 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  7308 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  7309 ;;		 -> NULL(0), 
  7310 ;;  base            2   41[COMRAM] int 
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;  a               4    1[BANK0 ] long 
  7313 ;;  c               1    5[BANK0 ] unsigned char 
  7314 ;;  sign            1    0[BANK0 ] unsigned char 
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  4   37[COMRAM] long 
  7317 ;; Registers used:
  7318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7324 ;;      Params:         6       0       0       0       0       0       0
  7325 ;;      Locals:         0       6       0       0       0       0       0
  7326 ;;      Temps:          4       0       0       0       0       0       0
  7327 ;;      Totals:        10       6       0       0       0       0       0
  7328 ;;Total ram usage:       16 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    5
  7331 ;; This function calls:
  7332 ;;		___lmul
  7333 ;;		_isalpha
  7334 ;;		_isdigit
  7335 ;;		_isspace
  7336 ;;		_toupper
  7337 ;; This function is called by:
  7338 ;;		_GetIntFromUartData
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	text16
  7343  001714                     __ptext16:
  7344                           	opt stack 0
  7345  001714                     _strtol:
  7346                           	opt stack 22
  7347                           
  7348                           ;incstack = 0
  7349  001714  C026  FFD9         	movff	strtol@s,fsr2l
  7350  001718  C027  FFDA         	movff	strtol@s+1,fsr2h
  7351  00171C  50DF               	movf	indf2,w,c
  7352  00171E  0100               	movlb	0	; () banked
  7353  001720  6F65               	movwf	strtol@c& (0+255),b
  7354                           
  7355                           ; BSR set to: 0
  7356  001722  4A26               	infsnz	strtol@s,f,c
  7357  001724  2A27               	incf	strtol@s+1,f,c
  7358                           
  7359                           ; BSR set to: 0
  7360  001726  5165               	movf	strtol@c& (0+255),w,b
  7361  001728  EC2E  F023         	call	_isspace
  7362  00172C  B0D8               	btfsc	status,0,c
  7363  00172E  D7F2               	goto	_strtol
  7364  001730  0E00               	movlw	0
  7365  001732  0100               	movlb	0	; () banked
  7366  001734  6F61               	movwf	strtol@a& (0+255),b
  7367  001736  0E00               	movlw	0
  7368  001738  6F62               	movwf	(strtol@a+1)& (0+255),b
  7369  00173A  0E00               	movlw	0
  7370  00173C  6F63               	movwf	(strtol@a+2)& (0+255),b
  7371  00173E  0E00               	movlw	0
  7372  001740  6F64               	movwf	(strtol@a+3)& (0+255),b
  7373  001742  0E00               	movlw	0
  7374  001744  6F60               	movwf	strtol@sign& (0+255),b
  7375                           
  7376                           ; BSR set to: 0
  7377  001746  0E2D               	movlw	45
  7378  001748  1965               	xorwf	strtol@c& (0+255),w,b
  7379  00174A  A4D8               	btfss	status,2,c
  7380  00174C  D003               	goto	l2344
  7381                           
  7382                           ; BSR set to: 0
  7383  00174E  0E01               	movlw	1
  7384  001750  6F60               	movwf	strtol@sign& (0+255),b
  7385  001752  D004               	goto	u8130
  7386  001754                     l2344:
  7387                           
  7388                           ; BSR set to: 0
  7389                           
  7390                           ; BSR set to: 0
  7391  001754  0E2B               	movlw	43
  7392  001756  1965               	xorwf	strtol@c& (0+255),w,b
  7393  001758  A4D8               	btfss	status,2,c
  7394  00175A  D008               	goto	l2346
  7395  00175C                     u8130:
  7396                           
  7397                           ; BSR set to: 0
  7398  00175C  C026  FFD9         	movff	strtol@s,fsr2l
  7399  001760  C027  FFDA         	movff	strtol@s+1,fsr2h
  7400  001764  50DF               	movf	indf2,w,c
  7401  001766  6F65               	movwf	strtol@c& (0+255),b
  7402                           
  7403                           ; BSR set to: 0
  7404  001768  4A26               	infsnz	strtol@s,f,c
  7405  00176A  2A27               	incf	strtol@s+1,f,c
  7406  00176C                     l2346:
  7407                           
  7408                           ; BSR set to: 0
  7409                           
  7410                           ; BSR set to: 0
  7411                           
  7412                           ; BSR set to: 0
  7413  00176C  0E30               	movlw	48
  7414  00176E  1965               	xorwf	strtol@c& (0+255),w,b
  7415  001770  A4D8               	btfss	status,2,c
  7416  001772  D02E               	goto	l2354
  7417                           
  7418                           ; BSR set to: 0
  7419  001774  C026  FFD9         	movff	strtol@s,fsr2l
  7420  001778  C027  FFDA         	movff	strtol@s+1,fsr2h
  7421  00177C  50DF               	movf	indf2,w,c
  7422  00177E  6F65               	movwf	strtol@c& (0+255),b
  7423                           
  7424                           ; BSR set to: 0
  7425  001780  4A26               	infsnz	strtol@s,f,c
  7426  001782  2A27               	incf	strtol@s+1,f,c
  7427                           
  7428                           ; BSR set to: 0
  7429  001784  502A               	movf	strtol@base,w,c
  7430  001786  102B               	iorwf	strtol@base+1,w,c
  7431  001788  B4D8               	btfsc	status,2,c
  7432  00178A  D005               	goto	u8160
  7433                           
  7434                           ; BSR set to: 0
  7435  00178C  0E10               	movlw	16
  7436  00178E  182A               	xorwf	strtol@base,w,c
  7437  001790  102B               	iorwf	strtol@base+1,w,c
  7438  001792  A4D8               	btfss	status,2,c
  7439  001794  D015               	goto	l2348
  7440  001796                     u8160:
  7441                           
  7442                           ; BSR set to: 0
  7443                           
  7444                           ; BSR set to: 0
  7445  001796  0E78               	movlw	120
  7446  001798  1965               	xorwf	strtol@c& (0+255),w,b
  7447  00179A  B4D8               	btfsc	status,2,c
  7448  00179C  D004               	goto	u8180
  7449                           
  7450                           ; BSR set to: 0
  7451  00179E  0E58               	movlw	88
  7452  0017A0  1965               	xorwf	strtol@c& (0+255),w,b
  7453  0017A2  A4D8               	btfss	status,2,c
  7454  0017A4  D00D               	goto	l2348
  7455  0017A6                     u8180:
  7456                           
  7457                           ; BSR set to: 0
  7458                           
  7459                           ; BSR set to: 0
  7460  0017A6  0E00               	movlw	0
  7461  0017A8  6E2B               	movwf	strtol@base+1,c
  7462  0017AA  0E10               	movlw	16
  7463  0017AC  6E2A               	movwf	strtol@base,c
  7464                           
  7465                           ; BSR set to: 0
  7466  0017AE  C026  FFD9         	movff	strtol@s,fsr2l
  7467  0017B2  C027  FFDA         	movff	strtol@s+1,fsr2h
  7468  0017B6  50DF               	movf	indf2,w,c
  7469  0017B8  6F65               	movwf	strtol@c& (0+255),b
  7470                           
  7471                           ; BSR set to: 0
  7472  0017BA  4A26               	infsnz	strtol@s,f,c
  7473  0017BC  2A27               	incf	strtol@s+1,f,c
  7474  0017BE  D008               	goto	l2354
  7475  0017C0                     l2348:
  7476                           
  7477                           ; BSR set to: 0
  7478                           
  7479                           ; BSR set to: 0
  7480  0017C0  502A               	movf	strtol@base,w,c
  7481  0017C2  102B               	iorwf	strtol@base+1,w,c
  7482  0017C4  A4D8               	btfss	status,2,c
  7483  0017C6  D004               	goto	l2354
  7484                           
  7485                           ; BSR set to: 0
  7486  0017C8  0E00               	movlw	0
  7487  0017CA  6E2B               	movwf	strtol@base+1,c
  7488  0017CC  0E08               	movlw	8
  7489  0017CE  6E2A               	movwf	strtol@base,c
  7490  0017D0                     l2354:
  7491                           
  7492                           ; BSR set to: 0
  7493                           
  7494                           ; BSR set to: 0
  7495                           
  7496                           ; BSR set to: 0
  7497                           
  7498                           ; BSR set to: 0
  7499  0017D0  502A               	movf	strtol@base,w,c
  7500  0017D2  102B               	iorwf	strtol@base+1,w,c
  7501  0017D4  A4D8               	btfss	status,2,c
  7502  0017D6  D004               	goto	l2355
  7503                           
  7504                           ; BSR set to: 0
  7505  0017D8  0E00               	movlw	0
  7506  0017DA  6E2B               	movwf	strtol@base+1,c
  7507  0017DC  0E0A               	movlw	10
  7508  0017DE  6E2A               	movwf	strtol@base,c
  7509  0017E0                     l2355:
  7510                           
  7511                           ; BSR set to: 0
  7512                           
  7513                           ; BSR set to: 0
  7514                           
  7515                           ; BSR set to: 0
  7516  0017E0  5165               	movf	strtol@c& (0+255),w,b
  7517  0017E2  EC1A  F023         	call	_isalpha
  7518  0017E6  A0D8               	btfss	status,0,c
  7519  0017E8  D008               	goto	l2357
  7520  0017EA  0100               	movlb	0	; () banked
  7521  0017EC  5165               	movf	strtol@c& (0+255),w,b
  7522  0017EE  ECE2  F023         	call	_toupper
  7523  0017F2  0FC9               	addlw	201
  7524  0017F4  0100               	movlb	0	; () banked
  7525  0017F6  6F65               	movwf	strtol@c& (0+255),b
  7526  0017F8  D009               	goto	l2360
  7527  0017FA                     l2357:
  7528                           
  7529                           ; BSR set to: 0
  7530  0017FA  0100               	movlb	0	; () banked
  7531  0017FC  5165               	movf	strtol@c& (0+255),w,b
  7532  0017FE  EC78  F023         	call	_isdigit
  7533  001802  A0D8               	btfss	status,0,c
  7534  001804  D039               	goto	l2361
  7535  001806  0E30               	movlw	48
  7536  001808  0100               	movlb	0	; () banked
  7537  00180A  5F65               	subwf	strtol@c& (0+255),f,b
  7538  00180C                     l2360:
  7539                           
  7540                           ; BSR set to: 0
  7541                           
  7542                           ; BSR set to: 0
  7543                           
  7544                           ; BSR set to: 0
  7545  00180C  5165               	movf	strtol@c& (0+255),w,b
  7546  00180E  6E2C               	movwf	??_strtol& (0+255),c
  7547  001810  6A2D               	clrf	(??_strtol+1)& (0+255),c
  7548  001812  502A               	movf	strtol@base,w,c
  7549  001814  5C2C               	subwf	??_strtol,w,c
  7550  001816  502D               	movf	??_strtol+1,w,c
  7551  001818  0A80               	xorlw	128
  7552  00181A  6E2E               	movwf	(??_strtol+2)& (0+255),c
  7553  00181C  502B               	movf	strtol@base+1,w,c
  7554  00181E  0A80               	xorlw	128
  7555  001820  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  7556  001822  B0D8               	btfsc	status,0,c
  7557  001824  D029               	goto	l2361
  7558                           
  7559                           ; BSR set to: 0
  7560                           
  7561                           ; BSR set to: 0
  7562                           
  7563                           ; BSR set to: 0
  7564  001826  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  7565  00182A  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  7566  00182E  0E00               	movlw	0
  7567  001830  BE1B               	btfsc	___lmul@multiplier+1,7,c
  7568  001832  0EFF               	movlw	-1
  7569  001834  6E1C               	movwf	___lmul@multiplier+2,c
  7570  001836  6E1D               	movwf	___lmul@multiplier+3,c
  7571  001838  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  7572  00183C  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  7573  001840  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  7574  001844  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  7575  001848  ECB4  F020         	call	___lmul	;wreg free
  7576  00184C  0100               	movlb	0	; () banked
  7577  00184E  5165               	movf	strtol@c& (0+255),w,b
  7578  001850  241A               	addwf	?___lmul,w,c
  7579  001852  6F61               	movwf	strtol@a& (0+255),b
  7580  001854  0E00               	movlw	0
  7581  001856  201B               	addwfc	?___lmul+1,w,c
  7582  001858  6F62               	movwf	(strtol@a+1)& (0+255),b
  7583  00185A  0E00               	movlw	0
  7584  00185C  201C               	addwfc	?___lmul+2,w,c
  7585  00185E  6F63               	movwf	(strtol@a+2)& (0+255),b
  7586  001860  0E00               	movlw	0
  7587  001862  201D               	addwfc	?___lmul+3,w,c
  7588  001864  6F64               	movwf	(strtol@a+3)& (0+255),b
  7589                           
  7590                           ; BSR set to: 0
  7591  001866  C026  FFD9         	movff	strtol@s,fsr2l
  7592  00186A  C027  FFDA         	movff	strtol@s+1,fsr2h
  7593  00186E  50DF               	movf	indf2,w,c
  7594  001870  6F65               	movwf	strtol@c& (0+255),b
  7595                           
  7596                           ; BSR set to: 0
  7597  001872  4A26               	infsnz	strtol@s,f,c
  7598  001874  2A27               	incf	strtol@s+1,f,c
  7599  001876  D7B4               	goto	l2355
  7600  001878                     l2361:
  7601                           
  7602                           ; BSR set to: 0
  7603  001878  5028               	movf	strtol@endptr,w,c
  7604  00187A  1029               	iorwf	strtol@endptr+1,w,c
  7605  00187C  B4D8               	btfsc	status,2,c
  7606  00187E  D00E               	goto	l2363
  7607  001880  0EFF               	movlw	255
  7608  001882  2426               	addwf	strtol@s,w,c
  7609  001884  6E2C               	movwf	??_strtol& (0+255),c
  7610  001886  0EFF               	movlw	255
  7611  001888  2027               	addwfc	strtol@s+1,w,c
  7612  00188A  6E2D               	movwf	(??_strtol+1)& (0+255),c
  7613  00188C  C028  FFD9         	movff	strtol@endptr,fsr2l
  7614  001890  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  7615  001894  C02C  FFDE         	movff	??_strtol,postinc2
  7616  001898  C02D  FFDD         	movff	??_strtol+1,postdec2
  7617  00189C                     l2363:
  7618  00189C  0100               	movlb	0	; () banked
  7619  00189E  5160               	movf	strtol@sign& (0+255),w,b
  7620  0018A0  B4D8               	btfsc	status,2,c
  7621  0018A2  D01A               	goto	l2364
  7622                           
  7623                           ; BSR set to: 0
  7624  0018A4  C061  F02C         	movff	strtol@a,??_strtol
  7625  0018A8  C062  F02D         	movff	strtol@a+1,??_strtol+1
  7626  0018AC  C063  F02E         	movff	strtol@a+2,??_strtol+2
  7627  0018B0  C064  F02F         	movff	strtol@a+3,??_strtol+3
  7628  0018B4  1E2C               	comf	??_strtol,f,c
  7629  0018B6  1E2D               	comf	??_strtol+1,f,c
  7630  0018B8  1E2E               	comf	??_strtol+2,f,c
  7631  0018BA  1E2F               	comf	??_strtol+3,f,c
  7632  0018BC  2A2C               	incf	??_strtol,f,c
  7633  0018BE  0E00               	movlw	0
  7634  0018C0  222D               	addwfc	??_strtol+1,f,c
  7635  0018C2  222E               	addwfc	??_strtol+2,f,c
  7636  0018C4  222F               	addwfc	??_strtol+3,f,c
  7637  0018C6  C02C  F026         	movff	??_strtol,?_strtol
  7638  0018CA  C02D  F027         	movff	??_strtol+1,?_strtol+1
  7639  0018CE  C02E  F028         	movff	??_strtol+2,?_strtol+2
  7640  0018D2  C02F  F029         	movff	??_strtol+3,?_strtol+3
  7641                           
  7642                           ; BSR set to: 0
  7643  0018D6  0012               	return	
  7644  0018D8                     l2364:
  7645                           
  7646                           ; BSR set to: 0
  7647  0018D8  C061  F026         	movff	strtol@a,?_strtol
  7648  0018DC  C062  F027         	movff	strtol@a+1,?_strtol+1
  7649  0018E0  C063  F028         	movff	strtol@a+2,?_strtol+2
  7650  0018E4  C064  F029         	movff	strtol@a+3,?_strtol+3
  7651                           
  7652                           ; BSR set to: 0
  7653  0018E8  0012               	return		;funcret
  7654  0018EA                     __end_of_strtol:
  7655                           	opt stack 0
  7656                           tosu	equ	0xFFF
  7657                           tosh	equ	0xFFE
  7658                           tosl	equ	0xFFD
  7659                           pclath	equ	0xFFA
  7660                           tblptru	equ	0xFF8
  7661                           tblptrh	equ	0xFF7
  7662                           tblptrl	equ	0xFF6
  7663                           tablat	equ	0xFF5
  7664                           prodh	equ	0xFF4
  7665                           prodl	equ	0xFF3
  7666                           postinc0	equ	0xFEE
  7667                           wreg	equ	0xFE8
  7668                           indf1	equ	0xFE7
  7669                           postdec1	equ	0xFE5
  7670                           fsr1h	equ	0xFE2
  7671                           fsr1l	equ	0xFE1
  7672                           indf2	equ	0xFDF
  7673                           postinc2	equ	0xFDE
  7674                           postdec2	equ	0xFDD
  7675                           fsr2h	equ	0xFDA
  7676                           fsr2l	equ	0xFD9
  7677                           status	equ	0xFD8
  7678                           
  7679 ;; *************** function _toupper *****************
  7680 ;; Defined at:
  7681 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;  c               1    wreg     unsigned char 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  c               1   23[COMRAM] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      unsigned char 
  7688 ;; Registers used:
  7689 ;;		wreg, status,2, status,0
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7695 ;;      Params:         0       0       0       0       0       0       0
  7696 ;;      Locals:         1       0       0       0       0       0       0
  7697 ;;      Temps:          0       0       0       0       0       0       0
  7698 ;;      Totals:         1       0       0       0       0       0       0
  7699 ;;Total ram usage:        1 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:    3
  7702 ;; This function calls:
  7703 ;;		Nothing
  7704 ;; This function is called by:
  7705 ;;		_readUartByte
  7706 ;;		_strtol
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           	psect	text17
  7711  0047C4                     __ptext17:
  7712                           	opt stack 0
  7713  0047C4                     _toupper:
  7714                           	opt stack 26
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;incstack = 0
  7718                           ;toupper@c stored from wreg
  7719  0047C4  6E18               	movwf	toupper@c,c
  7720  0047C6  0E7B               	movlw	123
  7721  0047C8  6018               	cpfslt	toupper@c,c
  7722  0047CA  D004               	goto	l2368
  7723  0047CC  0E60               	movlw	96
  7724  0047CE  6418               	cpfsgt	toupper@c,c
  7725  0047D0  D001               	goto	l2368
  7726  0047D2  9A18               	bcf	toupper@c,5,c
  7727  0047D4                     l2368:
  7728  0047D4  5018               	movf	toupper@c,w,c
  7729  0047D6  0012               	return	
  7730  0047D8                     __end_of_toupper:
  7731                           	opt stack 0
  7732                           tosu	equ	0xFFF
  7733                           tosh	equ	0xFFE
  7734                           tosl	equ	0xFFD
  7735                           pclath	equ	0xFFA
  7736                           tblptru	equ	0xFF8
  7737                           tblptrh	equ	0xFF7
  7738                           tblptrl	equ	0xFF6
  7739                           tablat	equ	0xFF5
  7740                           prodh	equ	0xFF4
  7741                           prodl	equ	0xFF3
  7742                           postinc0	equ	0xFEE
  7743                           wreg	equ	0xFE8
  7744                           indf1	equ	0xFE7
  7745                           postdec1	equ	0xFE5
  7746                           fsr1h	equ	0xFE2
  7747                           fsr1l	equ	0xFE1
  7748                           indf2	equ	0xFDF
  7749                           postinc2	equ	0xFDE
  7750                           postdec2	equ	0xFDD
  7751                           fsr2h	equ	0xFDA
  7752                           fsr2l	equ	0xFD9
  7753                           status	equ	0xFD8
  7754                           
  7755 ;; *************** function _isspace *****************
  7756 ;; Defined at:
  7757 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  c               1    wreg     unsigned char 
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;  c               1   25[COMRAM] unsigned char 
  7762 ;; Return value:  Size  Location     Type
  7763 ;;		None               void
  7764 ;; Registers used:
  7765 ;;		wreg, status,2, status,0
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7771 ;;      Params:         0       0       0       0       0       0       0
  7772 ;;      Locals:         2       0       0       0       0       0       0
  7773 ;;      Temps:          1       0       0       0       0       0       0
  7774 ;;      Totals:         3       0       0       0       0       0       0
  7775 ;;Total ram usage:        3 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:    3
  7778 ;; This function calls:
  7779 ;;		Nothing
  7780 ;; This function is called by:
  7781 ;;		_strtol
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           	psect	text18
  7786  00465C                     __ptext18:
  7787                           	opt stack 0
  7788  00465C                     _isspace:
  7789                           	opt stack 23
  7790                           
  7791                           ;incstack = 0
  7792                           ;isspace@c stored from wreg
  7793  00465C  6E1A               	movwf	isspace@c,c
  7794  00465E  0E01               	movlw	1
  7795  004660  6E19               	movwf	_isspace$3662,c
  7796  004662  0E20               	movlw	32
  7797  004664  181A               	xorwf	isspace@c,w,c
  7798  004666  B4D8               	btfsc	status,2,c
  7799  004668  D008               	goto	l2450
  7800  00466A  0E0E               	movlw	14
  7801  00466C  601A               	cpfslt	isspace@c,c
  7802  00466E  D003               	goto	u7770
  7803  004670  0E09               	movlw	9
  7804  004672  601A               	cpfslt	isspace@c,c
  7805  004674  D002               	goto	l2450
  7806  004676                     u7770:
  7807  004676  0E00               	movlw	0
  7808  004678  6E19               	movwf	_isspace$3662,c
  7809  00467A                     l2450:
  7810  00467A  C019  F018         	movff	_isspace$3662,??_isspace
  7811  00467E  3018               	rrcf	??_isspace,w,c
  7812  004680  0012               	return	
  7813  004682                     __end_of_isspace:
  7814                           	opt stack 0
  7815                           tosu	equ	0xFFF
  7816                           tosh	equ	0xFFE
  7817                           tosl	equ	0xFFD
  7818                           pclath	equ	0xFFA
  7819                           tblptru	equ	0xFF8
  7820                           tblptrh	equ	0xFF7
  7821                           tblptrl	equ	0xFF6
  7822                           tablat	equ	0xFF5
  7823                           prodh	equ	0xFF4
  7824                           prodl	equ	0xFF3
  7825                           postinc0	equ	0xFEE
  7826                           wreg	equ	0xFE8
  7827                           indf1	equ	0xFE7
  7828                           postdec1	equ	0xFE5
  7829                           fsr1h	equ	0xFE2
  7830                           fsr1l	equ	0xFE1
  7831                           indf2	equ	0xFDF
  7832                           postinc2	equ	0xFDE
  7833                           postdec2	equ	0xFDD
  7834                           fsr2h	equ	0xFDA
  7835                           fsr2l	equ	0xFD9
  7836                           status	equ	0xFD8
  7837                           
  7838 ;; *************** function _isdigit *****************
  7839 ;; Defined at:
  7840 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;  c               1    wreg     unsigned char 
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;  c               1   25[COMRAM] unsigned char 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;		None               void
  7847 ;; Registers used:
  7848 ;;		wreg, status,2, status,0
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7854 ;;      Params:         0       0       0       0       0       0       0
  7855 ;;      Locals:         2       0       0       0       0       0       0
  7856 ;;      Temps:          1       0       0       0       0       0       0
  7857 ;;      Totals:         3       0       0       0       0       0       0
  7858 ;;Total ram usage:        3 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    3
  7861 ;; This function calls:
  7862 ;;		Nothing
  7863 ;; This function is called by:
  7864 ;;		_strtol
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           	psect	text19
  7869  0046F0                     __ptext19:
  7870                           	opt stack 0
  7871  0046F0                     _isdigit:
  7872                           	opt stack 23
  7873                           
  7874                           ;incstack = 0
  7875                           ;isdigit@c stored from wreg
  7876  0046F0  6E1A               	movwf	isdigit@c,c
  7877  0046F2  0E00               	movlw	0
  7878  0046F4  6E19               	movwf	_isdigit$3659,c
  7879  0046F6  0E3A               	movlw	58
  7880  0046F8  601A               	cpfslt	isdigit@c,c
  7881  0046FA  D005               	goto	l2445
  7882  0046FC  0E2F               	movlw	47
  7883  0046FE  641A               	cpfsgt	isdigit@c,c
  7884  004700  D002               	goto	l2445
  7885  004702  0E01               	movlw	1
  7886  004704  6E19               	movwf	_isdigit$3659,c
  7887  004706                     l2445:
  7888  004706  C019  F018         	movff	_isdigit$3659,??_isdigit
  7889  00470A  3018               	rrcf	??_isdigit,w,c
  7890  00470C  0012               	return	
  7891  00470E                     __end_of_isdigit:
  7892                           	opt stack 0
  7893                           tosu	equ	0xFFF
  7894                           tosh	equ	0xFFE
  7895                           tosl	equ	0xFFD
  7896                           pclath	equ	0xFFA
  7897                           tblptru	equ	0xFF8
  7898                           tblptrh	equ	0xFF7
  7899                           tblptrl	equ	0xFF6
  7900                           tablat	equ	0xFF5
  7901                           prodh	equ	0xFF4
  7902                           prodl	equ	0xFF3
  7903                           postinc0	equ	0xFEE
  7904                           wreg	equ	0xFE8
  7905                           indf1	equ	0xFE7
  7906                           postdec1	equ	0xFE5
  7907                           fsr1h	equ	0xFE2
  7908                           fsr1l	equ	0xFE1
  7909                           indf2	equ	0xFDF
  7910                           postinc2	equ	0xFDE
  7911                           postdec2	equ	0xFDD
  7912                           fsr2h	equ	0xFDA
  7913                           fsr2l	equ	0xFD9
  7914                           status	equ	0xFD8
  7915                           
  7916 ;; *************** function _isalpha *****************
  7917 ;; Defined at:
  7918 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7919 ;; Parameters:    Size  Location     Type
  7920 ;;  c               1    wreg     unsigned char 
  7921 ;; Auto vars:     Size  Location     Type
  7922 ;;  c               1   28[COMRAM] unsigned char 
  7923 ;; Return value:  Size  Location     Type
  7924 ;;		None               void
  7925 ;; Registers used:
  7926 ;;		wreg, status,2, status,0, cstack
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7932 ;;      Params:         0       0       0       0       0       0       0
  7933 ;;      Locals:         2       0       0       0       0       0       0
  7934 ;;      Temps:          1       0       0       0       0       0       0
  7935 ;;      Totals:         3       0       0       0       0       0       0
  7936 ;;Total ram usage:        3 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    4
  7939 ;; This function calls:
  7940 ;;		_isupper
  7941 ;; This function is called by:
  7942 ;;		_strtol
  7943 ;; This function uses a non-reentrant model
  7944 ;;
  7945                           
  7946                           	psect	text20
  7947  004634                     __ptext20:
  7948                           	opt stack 0
  7949  004634                     _isalpha:
  7950                           	opt stack 22
  7951                           
  7952                           ;incstack = 0
  7953                           ;isalpha@c stored from wreg
  7954  004634  6E1D               	movwf	isalpha@c,c
  7955  004636  0E01               	movlw	1
  7956  004638  6E1C               	movwf	_isalpha$3656,c
  7957  00463A  0E7B               	movlw	123
  7958  00463C  601D               	cpfslt	isalpha@c,c
  7959  00463E  D003               	goto	u7790
  7960  004640  0E61               	movlw	97
  7961  004642  601D               	cpfslt	isalpha@c,c
  7962  004644  D007               	goto	l2440
  7963  004646                     u7790:
  7964  004646  501D               	movf	isalpha@c,w,c
  7965  004648  EC87  F023         	call	_isupper
  7966  00464C  B0D8               	btfsc	status,0,c
  7967  00464E  D002               	goto	l2440
  7968  004650  0E00               	movlw	0
  7969  004652  6E1C               	movwf	_isalpha$3656,c
  7970  004654                     l2440:
  7971  004654  C01C  F01B         	movff	_isalpha$3656,??_isalpha
  7972  004658  301B               	rrcf	??_isalpha,w,c
  7973  00465A  0012               	return	
  7974  00465C                     __end_of_isalpha:
  7975                           	opt stack 0
  7976                           tosu	equ	0xFFF
  7977                           tosh	equ	0xFFE
  7978                           tosl	equ	0xFFD
  7979                           pclath	equ	0xFFA
  7980                           tblptru	equ	0xFF8
  7981                           tblptrh	equ	0xFF7
  7982                           tblptrl	equ	0xFF6
  7983                           tablat	equ	0xFF5
  7984                           prodh	equ	0xFF4
  7985                           prodl	equ	0xFF3
  7986                           postinc0	equ	0xFEE
  7987                           wreg	equ	0xFE8
  7988                           indf1	equ	0xFE7
  7989                           postdec1	equ	0xFE5
  7990                           fsr1h	equ	0xFE2
  7991                           fsr1l	equ	0xFE1
  7992                           indf2	equ	0xFDF
  7993                           postinc2	equ	0xFDE
  7994                           postdec2	equ	0xFDD
  7995                           fsr2h	equ	0xFDA
  7996                           fsr2l	equ	0xFD9
  7997                           status	equ	0xFD8
  7998                           
  7999 ;; *************** function _isupper *****************
  8000 ;; Defined at:
  8001 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;  c               1    wreg     unsigned char 
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;  c               1   25[COMRAM] unsigned char 
  8006 ;; Return value:  Size  Location     Type
  8007 ;;		None               void
  8008 ;; Registers used:
  8009 ;;		wreg, status,2, status,0
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8015 ;;      Params:         0       0       0       0       0       0       0
  8016 ;;      Locals:         2       0       0       0       0       0       0
  8017 ;;      Temps:          1       0       0       0       0       0       0
  8018 ;;      Totals:         3       0       0       0       0       0       0
  8019 ;;Total ram usage:        3 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    3
  8022 ;; This function calls:
  8023 ;;		Nothing
  8024 ;; This function is called by:
  8025 ;;		_isalpha
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text21
  8030  00470E                     __ptext21:
  8031                           	opt stack 0
  8032  00470E                     _isupper:
  8033                           	opt stack 22
  8034                           
  8035                           ;incstack = 0
  8036                           ;isupper@c stored from wreg
  8037  00470E  6E1A               	movwf	isupper@c,c
  8038  004710  0E00               	movlw	0
  8039  004712  6E19               	movwf	_isupper$3665,c
  8040  004714  0E5B               	movlw	91
  8041  004716  601A               	cpfslt	isupper@c,c
  8042  004718  D005               	goto	l2455
  8043  00471A  0E40               	movlw	64
  8044  00471C  641A               	cpfsgt	isupper@c,c
  8045  00471E  D002               	goto	l2455
  8046  004720  0E01               	movlw	1
  8047  004722  6E19               	movwf	_isupper$3665,c
  8048  004724                     l2455:
  8049  004724  C019  F018         	movff	_isupper$3665,??_isupper
  8050  004728  3018               	rrcf	??_isupper,w,c
  8051  00472A  0012               	return	
  8052  00472C                     __end_of_isupper:
  8053                           	opt stack 0
  8054                           tosu	equ	0xFFF
  8055                           tosh	equ	0xFFE
  8056                           tosl	equ	0xFFD
  8057                           pclath	equ	0xFFA
  8058                           tblptru	equ	0xFF8
  8059                           tblptrh	equ	0xFF7
  8060                           tblptrl	equ	0xFF6
  8061                           tablat	equ	0xFF5
  8062                           prodh	equ	0xFF4
  8063                           prodl	equ	0xFF3
  8064                           postinc0	equ	0xFEE
  8065                           wreg	equ	0xFE8
  8066                           indf1	equ	0xFE7
  8067                           postdec1	equ	0xFE5
  8068                           fsr1h	equ	0xFE2
  8069                           fsr1l	equ	0xFE1
  8070                           indf2	equ	0xFDF
  8071                           postinc2	equ	0xFDE
  8072                           postdec2	equ	0xFDD
  8073                           fsr2h	equ	0xFDA
  8074                           fsr2l	equ	0xFD9
  8075                           status	equ	0xFD8
  8076                           
  8077 ;; *************** function _SaveSystemStatus *****************
  8078 ;; Defined at:
  8079 ;;		line 28 in file "SystemStatus.c"
  8080 ;; Parameters:    Size  Location     Type
  8081 ;;		None
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;		None
  8084 ;; Return value:  Size  Location     Type
  8085 ;;                  1    wreg      void 
  8086 ;; Registers used:
  8087 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8093 ;;      Params:         0       0       0       0       0       0       0
  8094 ;;      Locals:         0       0       0       0       0       0       0
  8095 ;;      Temps:          0       0       0       0       0       0       0
  8096 ;;      Totals:         0       0       0       0       0       0       0
  8097 ;;Total ram usage:        0 bytes
  8098 ;; Hardware stack levels used:    1
  8099 ;; Hardware stack levels required when called:    6
  8100 ;; This function calls:
  8101 ;;		_StoreIntInEeprom
  8102 ;; This function is called by:
  8103 ;;		_GroupCommon
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           	psect	text22
  8108  0039F0                     __ptext22:
  8109                           	opt stack 0
  8110  0039F0                     _SaveSystemStatus:
  8111                           	opt stack 22
  8112                           
  8113                           ;SystemStatus.c: 30: StoreIntInEeprom(systemStatus.UnitType,(0x50) | SYSTEM_INFO_ADDRES[
      +                          0], 1);
  8114                           
  8115                           ;incstack = 0
  8116  0039F0  0101               	movlb	1	; () banked
  8117  0039F2  51B5               	movf	(_systemStatus+3)& (0+255),w,b	;volatile
  8118  0039F4  6E21               	movwf	StoreIntInEeprom@data,c
  8119  0039F6  6A22               	clrf	StoreIntInEeprom@data+1,c
  8120  0039F8  6A23               	clrf	StoreIntInEeprom@data+2,c
  8121  0039FA  6A24               	clrf	StoreIntInEeprom@data+3,c
  8122  0039FC  0E37               	movlw	low _SYSTEM_INFO_ADDRES
  8123  0039FE  6EF6               	movwf	tblptrl,c
  8124  003A00                     	if	1	;There is more than 1 active tblptr byte
  8125  003A00  0E78               	movlw	high _SYSTEM_INFO_ADDRES
  8126  003A02  6EF7               	movwf	tblptrh,c
  8127  003A04                     	endif
  8128  003A04                     	if	0	;There are less than 3 active tblptr bytes
  8129  003A04                     	endif
  8130  003A04  0008               	tblrd		*
  8131  003A06  50F5               	movf	tablat,w,c
  8132  003A08  0950               	iorlw	80
  8133  003A0A  6E25               	movwf	StoreIntInEeprom@address,c
  8134  003A0C  0E00               	movlw	0
  8135  003A0E  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  8136  003A10  0E01               	movlw	1
  8137  003A12  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  8138  003A14  EC2F  F022         	call	_StoreIntInEeprom	;wreg free
  8139                           
  8140                           ;SystemStatus.c: 31: StoreIntInEeprom(systemStatus.UartMode,(0x50) | SYSTEM_INFO_ADDRES[
      +                          1], 1);
  8141  003A18  0101               	movlb	1	; () banked
  8142  003A1A  51BA               	movf	(_systemStatus+8)& (0+255),w,b	;volatile
  8143  003A1C  6E21               	movwf	StoreIntInEeprom@data,c
  8144  003A1E  6A22               	clrf	StoreIntInEeprom@data+1,c
  8145  003A20  6A23               	clrf	StoreIntInEeprom@data+2,c
  8146  003A22  6A24               	clrf	StoreIntInEeprom@data+3,c
  8147  003A24  0E38               	movlw	low (_SYSTEM_INFO_ADDRES+1)
  8148  003A26  6EF6               	movwf	tblptrl,c
  8149  003A28  0E78               	movlw	high (_SYSTEM_INFO_ADDRES+1)
  8150  003A2A  6EF7               	movwf	tblptrh,c
  8151  003A2C                     	if	0	;tblptru may be non-zero
  8152  003A2C                     	endif
  8153  003A2C                     	if	0	;tblptru may be non-zero
  8154  003A2C                     	endif
  8155  003A2C  0008               	tblrd		*
  8156  003A2E  50F5               	movf	tablat,w,c
  8157  003A30  0950               	iorlw	80
  8158  003A32  6E25               	movwf	StoreIntInEeprom@address,c
  8159  003A34  0E00               	movlw	0
  8160  003A36  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  8161  003A38  0E01               	movlw	1
  8162  003A3A  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  8163  003A3C  EC2F  F022         	call	_StoreIntInEeprom	;wreg free
  8164                           
  8165                           ;SystemStatus.c: 32: StoreIntInEeprom(systemStatus.UartRefreshRate,(0x50) | SYSTEM_INFO_
      +                          ADDRES[2], 2);
  8166  003A40  0101               	movlb	1	; () banked
  8167  003A42  51BB               	movf	(_systemStatus+9)& (0+255),w,b	;volatile
  8168  003A44  6E21               	movwf	StoreIntInEeprom@data,c
  8169  003A46  6A22               	clrf	StoreIntInEeprom@data+1,c
  8170  003A48  6A23               	clrf	StoreIntInEeprom@data+2,c
  8171  003A4A  6A24               	clrf	StoreIntInEeprom@data+3,c
  8172  003A4C  0E39               	movlw	low (_SYSTEM_INFO_ADDRES+2)
  8173  003A4E  6EF6               	movwf	tblptrl,c
  8174  003A50  0E78               	movlw	high (_SYSTEM_INFO_ADDRES+2)
  8175  003A52  6EF7               	movwf	tblptrh,c
  8176  003A54                     	if	0	;tblptru may be non-zero
  8177  003A54                     	endif
  8178  003A54                     	if	0	;tblptru may be non-zero
  8179  003A54                     	endif
  8180  003A54  0008               	tblrd		*
  8181  003A56  50F5               	movf	tablat,w,c
  8182  003A58  0950               	iorlw	80
  8183  003A5A  6E25               	movwf	StoreIntInEeprom@address,c
  8184  003A5C  0E00               	movlw	0
  8185  003A5E  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  8186  003A60  0E02               	movlw	2
  8187  003A62  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  8188  003A64  EC2F  F022         	call	_StoreIntInEeprom	;wreg free
  8189  003A68  0012               	return		;funcret
  8190  003A6A                     __end_of_SaveSystemStatus:
  8191                           	opt stack 0
  8192                           tosu	equ	0xFFF
  8193                           tosh	equ	0xFFE
  8194                           tosl	equ	0xFFD
  8195                           pclath	equ	0xFFA
  8196                           tblptru	equ	0xFF8
  8197                           tblptrh	equ	0xFF7
  8198                           tblptrl	equ	0xFF6
  8199                           tablat	equ	0xFF5
  8200                           prodh	equ	0xFF4
  8201                           prodl	equ	0xFF3
  8202                           postinc0	equ	0xFEE
  8203                           wreg	equ	0xFE8
  8204                           indf1	equ	0xFE7
  8205                           postdec1	equ	0xFE5
  8206                           fsr1h	equ	0xFE2
  8207                           fsr1l	equ	0xFE1
  8208                           indf2	equ	0xFDF
  8209                           postinc2	equ	0xFDE
  8210                           postdec2	equ	0xFDD
  8211                           fsr2h	equ	0xFDA
  8212                           fsr2l	equ	0xFD9
  8213                           status	equ	0xFD8
  8214                           
  8215 ;; *************** function _PrintSystemStatus *****************
  8216 ;; Defined at:
  8217 ;;		line 157 in file "SystemStatus.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;		None
  8220 ;; Auto vars:     Size  Location     Type
  8221 ;;  dest           80    0[BANK1 ] unsigned char [80]
  8222 ;; Return value:  Size  Location     Type
  8223 ;;                  1    wreg      void 
  8224 ;; Registers used:
  8225 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8226 ;; Tracked objects:
  8227 ;;		On entry : 0/0
  8228 ;;		On exit  : 0/0
  8229 ;;		Unchanged: 0/0
  8230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8231 ;;      Params:         0       0       0       0       0       0       0
  8232 ;;      Locals:         0       0      80       0       0       0       0
  8233 ;;      Temps:          0       0       0       0       0       0       0
  8234 ;;      Totals:         0       0      80       0       0       0       0
  8235 ;;Total ram usage:       80 bytes
  8236 ;; Hardware stack levels used:    1
  8237 ;; Hardware stack levels required when called:    7
  8238 ;; This function calls:
  8239 ;;		_UART_Write_Text
  8240 ;;		_sprintf
  8241 ;; This function is called by:
  8242 ;;		_GroupCommon
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           	psect	text23
  8247  003354                     __ptext23:
  8248                           	opt stack 0
  8249  003354                     _PrintSystemStatus:
  8250                           	opt stack 21
  8251                           
  8252                           ;SystemStatus.c: 159: char dest[80];
  8253                           ;SystemStatus.c: 160: systemStatus.SwVersion = "1_002";
  8254                           
  8255                           ;incstack = 0
  8256  003354  0EF3               	movlw	low STR_21
  8257  003356  0101               	movlb	1	; () banked
  8258  003358  6FB3               	movwf	(_systemStatus+1)& (0+255),b	;volatile
  8259  00335A  0E7F               	movlw	high STR_21
  8260  00335C  6FB4               	movwf	(_systemStatus+2)& (0+255),b	;volatile
  8261                           
  8262                           ; BSR set to: 1
  8263                           ;SystemStatus.c: 163: sprintf(dest, "UNIT ID %d\n\r",systemStatus.UnitId);
  8264  00335E  0E00               	movlw	low PrintSystemStatus@dest
  8265  003360  0100               	movlb	0	; () banked
  8266  003362  6FBC               	movwf	sprintf@sp& (0+255),b
  8267  003364  0E01               	movlw	high PrintSystemStatus@dest
  8268  003366  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8269  003368  0EA2               	movlw	low STR_51
  8270  00336A  6FBE               	movwf	sprintf@f& (0+255),b
  8271  00336C  0E7F               	movlw	high STR_51
  8272  00336E  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8273  003370  0101               	movlb	1	; () banked
  8274  003372  51B2               	movf	_systemStatus& (0+255),w,b	;volatile
  8275  003374  0100               	movlb	0	; () banked
  8276  003376  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  8277  003378  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  8278  00337A  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  8279  00337C  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  8280  00337E  EC70  F000         	call	_sprintf	;wreg free
  8281                           
  8282                           ;SystemStatus.c: 164: UART_Write_Text(dest);
  8283  003382  0E00               	movlw	low PrintSystemStatus@dest
  8284  003384  6E19               	movwf	UART_Write_Text@text,c
  8285  003386  0E01               	movlw	high PrintSystemStatus@dest
  8286  003388  6E1A               	movwf	UART_Write_Text@text+1,c
  8287  00338A  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8288                           
  8289                           ;SystemStatus.c: 165: sprintf(dest, "SOFTWARE VERSION %s\n\r",systemStatus.SwVersion);
  8290  00338E  0E00               	movlw	low PrintSystemStatus@dest
  8291  003390  0100               	movlb	0	; () banked
  8292  003392  6FBC               	movwf	sprintf@sp& (0+255),b
  8293  003394  0E01               	movlw	high PrintSystemStatus@dest
  8294  003396  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8295  003398  0E10               	movlw	low STR_52
  8296  00339A  6FBE               	movwf	sprintf@f& (0+255),b
  8297  00339C  0E7F               	movlw	high STR_52
  8298  00339E  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8299  0033A0  C1B3  F0C0         	movff	_systemStatus+1,?_sprintf+4	;volatile
  8300  0033A4  C1B4  F0C1         	movff	_systemStatus+2,?_sprintf+5	;volatile
  8301  0033A8  EC70  F000         	call	_sprintf	;wreg free
  8302                           
  8303                           ;SystemStatus.c: 166: UART_Write_Text(dest);
  8304  0033AC  0E00               	movlw	low PrintSystemStatus@dest
  8305  0033AE  6E19               	movwf	UART_Write_Text@text,c
  8306  0033B0  0E01               	movlw	high PrintSystemStatus@dest
  8307  0033B2  6E1A               	movwf	UART_Write_Text@text+1,c
  8308  0033B4  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8309                           
  8310                           ;SystemStatus.c: 167: sprintf(dest, "UNIT TYPE %d\n\r",systemStatus.UnitType);
  8311  0033B8  0E00               	movlw	low PrintSystemStatus@dest
  8312  0033BA  0100               	movlb	0	; () banked
  8313  0033BC  6FBC               	movwf	sprintf@sp& (0+255),b
  8314  0033BE  0E01               	movlw	high PrintSystemStatus@dest
  8315  0033C0  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8316  0033C2  0E86               	movlw	low STR_53
  8317  0033C4  6FBE               	movwf	sprintf@f& (0+255),b
  8318  0033C6  0E7F               	movlw	high STR_53
  8319  0033C8  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8320  0033CA  C1B5  F0C0         	movff	_systemStatus+3,?_sprintf+4	;volatile
  8321  0033CE  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  8322  0033D0  EC70  F000         	call	_sprintf	;wreg free
  8323                           
  8324                           ;SystemStatus.c: 168: UART_Write_Text(dest);
  8325  0033D4  0E00               	movlw	low PrintSystemStatus@dest
  8326  0033D6  6E19               	movwf	UART_Write_Text@text,c
  8327  0033D8  0E01               	movlw	high PrintSystemStatus@dest
  8328  0033DA  6E1A               	movwf	UART_Write_Text@text+1,c
  8329  0033DC  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8330                           
  8331                           ;SystemStatus.c: 169: sprintf(dest, "PASS COUNTER %d\n\r",systemStatus.PassCounter);
  8332  0033E0  0E00               	movlw	low PrintSystemStatus@dest
  8333  0033E2  0100               	movlb	0	; () banked
  8334  0033E4  6FBC               	movwf	sprintf@sp& (0+255),b
  8335  0033E6  0E01               	movlw	high PrintSystemStatus@dest
  8336  0033E8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8337  0033EA  0E74               	movlw	low STR_54
  8338  0033EC  6FBE               	movwf	sprintf@f& (0+255),b
  8339  0033EE  0E7F               	movlw	high STR_54
  8340  0033F0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8341  0033F2  C1B6  F0C0         	movff	_systemStatus+4,?_sprintf+4	;volatile
  8342  0033F6  C1B7  F0C1         	movff	_systemStatus+5,?_sprintf+5	;volatile
  8343  0033FA  C1B8  F0C2         	movff	_systemStatus+6,?_sprintf+6	;volatile
  8344  0033FE  C1B9  F0C3         	movff	_systemStatus+7,?_sprintf+7	;volatile
  8345  003402  EC70  F000         	call	_sprintf	;wreg free
  8346                           
  8347                           ;SystemStatus.c: 170: UART_Write_Text(dest);
  8348  003406  0E00               	movlw	low PrintSystemStatus@dest
  8349  003408  6E19               	movwf	UART_Write_Text@text,c
  8350  00340A  0E01               	movlw	high PrintSystemStatus@dest
  8351  00340C  6E1A               	movwf	UART_Write_Text@text+1,c
  8352  00340E  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8353  003412  0012               	return		;funcret
  8354  003414                     __end_of_PrintSystemStatus:
  8355                           	opt stack 0
  8356                           tosu	equ	0xFFF
  8357                           tosh	equ	0xFFE
  8358                           tosl	equ	0xFFD
  8359                           pclath	equ	0xFFA
  8360                           tblptru	equ	0xFF8
  8361                           tblptrh	equ	0xFF7
  8362                           tblptrl	equ	0xFF6
  8363                           tablat	equ	0xFF5
  8364                           prodh	equ	0xFF4
  8365                           prodl	equ	0xFF3
  8366                           postinc0	equ	0xFEE
  8367                           wreg	equ	0xFE8
  8368                           indf1	equ	0xFE7
  8369                           postdec1	equ	0xFE5
  8370                           fsr1h	equ	0xFE2
  8371                           fsr1l	equ	0xFE1
  8372                           indf2	equ	0xFDF
  8373                           postinc2	equ	0xFDE
  8374                           postdec2	equ	0xFDD
  8375                           fsr2h	equ	0xFDA
  8376                           fsr2l	equ	0xFD9
  8377                           status	equ	0xFD8
  8378                           
  8379 ;; *************** function _PrintHelpScreen *****************
  8380 ;; Defined at:
  8381 ;;		line 91 in file "SystemStatus.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;		None
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;  dest           50    0[BANK1 ] unsigned char [50]
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      void 
  8388 ;; Registers used:
  8389 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8395 ;;      Params:         0       0       0       0       0       0       0
  8396 ;;      Locals:         0       0      50       0       0       0       0
  8397 ;;      Temps:          0       0       0       0       0       0       0
  8398 ;;      Totals:         0       0      50       0       0       0       0
  8399 ;;Total ram usage:       50 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    7
  8402 ;; This function calls:
  8403 ;;		_UART_Write_Text
  8404 ;;		_sprintf
  8405 ;; This function is called by:
  8406 ;;		_GroupCommon
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           	psect	text24
  8411  000CC2                     __ptext24:
  8412                           	opt stack 0
  8413  000CC2                     _PrintHelpScreen:
  8414                           	opt stack 21
  8415                           
  8416                           ;SystemStatus.c: 93: char dest[50];
  8417                           ;SystemStatus.c: 96: sprintf(dest, "<TX system commands>\n\r");
  8418                           
  8419                           ;incstack = 0
  8420  000CC2  0E00               	movlw	low PrintHelpScreen@dest
  8421  000CC4  0100               	movlb	0	; () banked
  8422  000CC6  6FBC               	movwf	sprintf@sp& (0+255),b
  8423  000CC8  0E01               	movlw	high PrintHelpScreen@dest
  8424  000CCA  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8425  000CCC  0ECC               	movlw	low STR_27
  8426  000CCE  6FBE               	movwf	sprintf@f& (0+255),b
  8427  000CD0  0E7E               	movlw	high STR_27
  8428  000CD2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8429  000CD4  EC70  F000         	call	_sprintf	;wreg free
  8430                           
  8431                           ;SystemStatus.c: 97: UART_Write_Text(dest);
  8432  000CD8  0E00               	movlw	low PrintHelpScreen@dest
  8433  000CDA  6E19               	movwf	UART_Write_Text@text,c
  8434  000CDC  0E01               	movlw	high PrintHelpScreen@dest
  8435  000CDE  6E1A               	movwf	UART_Write_Text@text+1,c
  8436  000CE0  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8437                           
  8438                           ;SystemStatus.c: 99: sprintf(dest, "$TI <XXXX><cr>   Init TX system and set frequency (0
      +                          -9999)[MHz]\r\n");
  8439  000CE4  0E00               	movlw	low PrintHelpScreen@dest
  8440  000CE6  0100               	movlb	0	; () banked
  8441  000CE8  6FBC               	movwf	sprintf@sp& (0+255),b
  8442  000CEA  0E01               	movlw	high PrintHelpScreen@dest
  8443  000CEC  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8444  000CEE  0EB0               	movlw	low STR_28
  8445  000CF0  6FBE               	movwf	sprintf@f& (0+255),b
  8446  000CF2  0E7A               	movlw	high STR_28
  8447  000CF4  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8448  000CF6  EC70  F000         	call	_sprintf	;wreg free
  8449                           
  8450                           ;SystemStatus.c: 100: UART_Write_Text(dest);
  8451  000CFA  0E00               	movlw	low PrintHelpScreen@dest
  8452  000CFC  6E19               	movwf	UART_Write_Text@text,c
  8453  000CFE  0E01               	movlw	high PrintHelpScreen@dest
  8454  000D00  6E1A               	movwf	UART_Write_Text@text+1,c
  8455  000D02  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8456                           
  8457                           ;SystemStatus.c: 101: sprintf(dest, "$TF <XXXX><cr>   Set TX system frequency at (0-9999
      +                          )[MHz].\r\n");
  8458  000D06  0E00               	movlw	low PrintHelpScreen@dest
  8459  000D08  0100               	movlb	0	; () banked
  8460  000D0A  6FBC               	movwf	sprintf@sp& (0+255),b
  8461  000D0C  0E01               	movlw	high PrintHelpScreen@dest
  8462  000D0E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8463  000D10  0E30               	movlw	low STR_29
  8464  000D12  6FBE               	movwf	sprintf@f& (0+255),b
  8465  000D14  0E7B               	movlw	high STR_29
  8466  000D16  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8467  000D18  EC70  F000         	call	_sprintf	;wreg free
  8468                           
  8469                           ;SystemStatus.c: 102: UART_Write_Text(dest);
  8470  000D1C  0E00               	movlw	low PrintHelpScreen@dest
  8471  000D1E  6E19               	movwf	UART_Write_Text@text,c
  8472  000D20  0E01               	movlw	high PrintHelpScreen@dest
  8473  000D22  6E1A               	movwf	UART_Write_Text@text+1,c
  8474  000D24  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8475                           
  8476                           ;SystemStatus.c: 103: sprintf(dest, "$TQ <cr>         Get status from TX system.\r\n");
  8477  000D28  0E00               	movlw	low PrintHelpScreen@dest
  8478  000D2A  0100               	movlb	0	; () banked
  8479  000D2C  6FBC               	movwf	sprintf@sp& (0+255),b
  8480  000D2E  0E01               	movlw	high PrintHelpScreen@dest
  8481  000D30  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8482  000D32  0E78               	movlw	low STR_30
  8483  000D34  6FBE               	movwf	sprintf@f& (0+255),b
  8484  000D36  0E7C               	movlw	high STR_30
  8485  000D38  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8486  000D3A  EC70  F000         	call	_sprintf	;wreg free
  8487                           
  8488                           ;SystemStatus.c: 104: UART_Write_Text(dest);
  8489  000D3E  0E00               	movlw	low PrintHelpScreen@dest
  8490  000D40  6E19               	movwf	UART_Write_Text@text,c
  8491  000D42  0E01               	movlw	high PrintHelpScreen@dest
  8492  000D44  6E1A               	movwf	UART_Write_Text@text+1,c
  8493  000D46  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8494                           
  8495                           ;SystemStatus.c: 105: sprintf(dest, "$TB <X><cr>      Turn on[1] / off[0] BIT mode at TX
      +                           system [Default = 0]\r\n");
  8496  000D4A  0E00               	movlw	low PrintHelpScreen@dest
  8497  000D4C  0100               	movlb	0	; () banked
  8498  000D4E  6FBC               	movwf	sprintf@sp& (0+255),b
  8499  000D50  0E01               	movlw	high PrintHelpScreen@dest
  8500  000D52  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8501  000D54  0ED2               	movlw	low STR_31
  8502  000D56  6FBE               	movwf	sprintf@f& (0+255),b
  8503  000D58  0E79               	movlw	high STR_31
  8504  000D5A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8505  000D5C  EC70  F000         	call	_sprintf	;wreg free
  8506                           
  8507                           ;SystemStatus.c: 106: UART_Write_Text(dest);
  8508  000D60  0E00               	movlw	low PrintHelpScreen@dest
  8509  000D62  6E19               	movwf	UART_Write_Text@text,c
  8510  000D64  0E01               	movlw	high PrintHelpScreen@dest
  8511  000D66  6E1A               	movwf	UART_Write_Text@text+1,c
  8512  000D68  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8513                           
  8514                           ;SystemStatus.c: 107: sprintf(dest, "$TX <X><cr>      Turn on[1] / off[0] transmission a
      +                          t TX system [Default = 0]\r\n");
  8515  000D6C  0E00               	movlw	low PrintHelpScreen@dest
  8516  000D6E  0100               	movlb	0	; () banked
  8517  000D70  6FBC               	movwf	sprintf@sp& (0+255),b
  8518  000D72  0E01               	movlw	high PrintHelpScreen@dest
  8519  000D74  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8520  000D76  0E83               	movlw	low STR_32
  8521  000D78  6FBE               	movwf	sprintf@f& (0+255),b
  8522  000D7A  0E79               	movlw	high STR_32
  8523  000D7C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8524  000D7E  EC70  F000         	call	_sprintf	;wreg free
  8525                           
  8526                           ;SystemStatus.c: 108: UART_Write_Text(dest);
  8527  000D82  0E00               	movlw	low PrintHelpScreen@dest
  8528  000D84  6E19               	movwf	UART_Write_Text@text,c
  8529  000D86  0E01               	movlw	high PrintHelpScreen@dest
  8530  000D88  6E1A               	movwf	UART_Write_Text@text+1,c
  8531  000D8A  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8532                           
  8533                           ;SystemStatus.c: 111: sprintf(dest, "\n\r<RX system commands>\n\r");
  8534  000D8E  0E00               	movlw	low PrintHelpScreen@dest
  8535  000D90  0100               	movlb	0	; () banked
  8536  000D92  6FBC               	movwf	sprintf@sp& (0+255),b
  8537  000D94  0E01               	movlw	high PrintHelpScreen@dest
  8538  000D96  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8539  000D98  0E6B               	movlw	low STR_33
  8540  000D9A  6FBE               	movwf	sprintf@f& (0+255),b
  8541  000D9C  0E7E               	movlw	high STR_33
  8542  000D9E  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8543  000DA0  EC70  F000         	call	_sprintf	;wreg free
  8544                           
  8545                           ;SystemStatus.c: 112: UART_Write_Text(dest);
  8546  000DA4  0E00               	movlw	low PrintHelpScreen@dest
  8547  000DA6  6E19               	movwf	UART_Write_Text@text,c
  8548  000DA8  0E01               	movlw	high PrintHelpScreen@dest
  8549  000DAA  6E1A               	movwf	UART_Write_Text@text+1,c
  8550  000DAC  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8551                           
  8552                           ;SystemStatus.c: 113: sprintf(dest, "$RI <XXXX><cr>   Init RX system and set frequency a
      +                          t XXXX (0-9999)[MHz]\r\n");
  8553  000DB0  0E00               	movlw	low PrintHelpScreen@dest
  8554  000DB2  0100               	movlb	0	; () banked
  8555  000DB4  6FBC               	movwf	sprintf@sp& (0+255),b
  8556  000DB6  0E01               	movlw	high PrintHelpScreen@dest
  8557  000DB8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8558  000DBA  0E1D               	movlw	low STR_34
  8559  000DBC  6FBE               	movwf	sprintf@f& (0+255),b
  8560  000DBE  0E7A               	movlw	high STR_34
  8561  000DC0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8562  000DC2  EC70  F000         	call	_sprintf	;wreg free
  8563                           
  8564                           ;SystemStatus.c: 114: UART_Write_Text(dest);
  8565  000DC6  0E00               	movlw	low PrintHelpScreen@dest
  8566  000DC8  6E19               	movwf	UART_Write_Text@text,c
  8567  000DCA  0E01               	movlw	high PrintHelpScreen@dest
  8568  000DCC  6E1A               	movwf	UART_Write_Text@text+1,c
  8569  000DCE  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8570                           
  8571                           ;SystemStatus.c: 115: sprintf(dest, "$RQ <cr>         Get status from RX system\r\n");
  8572  000DD2  0E00               	movlw	low PrintHelpScreen@dest
  8573  000DD4  0100               	movlb	0	; () banked
  8574  000DD6  6FBC               	movwf	sprintf@sp& (0+255),b
  8575  000DD8  0E01               	movlw	high PrintHelpScreen@dest
  8576  000DDA  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8577  000DDC  0EA6               	movlw	low STR_35
  8578  000DDE  6FBE               	movwf	sprintf@f& (0+255),b
  8579  000DE0  0E7C               	movlw	high STR_35
  8580  000DE2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8581  000DE4  EC70  F000         	call	_sprintf	;wreg free
  8582                           
  8583                           ;SystemStatus.c: 116: UART_Write_Text(dest);
  8584  000DE8  0E00               	movlw	low PrintHelpScreen@dest
  8585  000DEA  6E19               	movwf	UART_Write_Text@text,c
  8586  000DEC  0E01               	movlw	high PrintHelpScreen@dest
  8587  000DEE  6E1A               	movwf	UART_Write_Text@text+1,c
  8588  000DF0  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8589                           
  8590                           ;SystemStatus.c: 117: sprintf(dest, "$RB <X><cr>      Turn on[1] / off[0] BIT mode at RX
      +                           system.\r\n");
  8591  000DF4  0E00               	movlw	low PrintHelpScreen@dest
  8592  000DF6  0100               	movlb	0	; () banked
  8593  000DF8  6FBC               	movwf	sprintf@sp& (0+255),b
  8594  000DFA  0E01               	movlw	high PrintHelpScreen@dest
  8595  000DFC  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8596  000DFE  0EF2               	movlw	low STR_36
  8597  000E00  6FBE               	movwf	sprintf@f& (0+255),b
  8598  000E02  0E7A               	movlw	high STR_36
  8599  000E04  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8600  000E06  EC70  F000         	call	_sprintf	;wreg free
  8601                           
  8602                           ;SystemStatus.c: 118: UART_Write_Text(dest);
  8603  000E0A  0E00               	movlw	low PrintHelpScreen@dest
  8604  000E0C  6E19               	movwf	UART_Write_Text@text,c
  8605  000E0E  0E01               	movlw	high PrintHelpScreen@dest
  8606  000E10  6E1A               	movwf	UART_Write_Text@text+1,c
  8607  000E12  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8608                           
  8609                           ;SystemStatus.c: 119: sprintf(dest, "$RX <X><cr>      Turn on[1] / off[0] receive at RX 
      +                          system.\r\n");
  8610  000E16  0E00               	movlw	low PrintHelpScreen@dest
  8611  000E18  0100               	movlb	0	; () banked
  8612  000E1A  6FBC               	movwf	sprintf@sp& (0+255),b
  8613  000E1C  0E01               	movlw	high PrintHelpScreen@dest
  8614  000E1E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8615  000E20  0E6D               	movlw	low STR_37
  8616  000E22  6FBE               	movwf	sprintf@f& (0+255),b
  8617  000E24  0E7B               	movlw	high STR_37
  8618  000E26  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8619  000E28  EC70  F000         	call	_sprintf	;wreg free
  8620                           
  8621                           ;SystemStatus.c: 120: UART_Write_Text(dest);
  8622  000E2C  0E00               	movlw	low PrintHelpScreen@dest
  8623  000E2E  6E19               	movwf	UART_Write_Text@text,c
  8624  000E30  0E01               	movlw	high PrintHelpScreen@dest
  8625  000E32  6E1A               	movwf	UART_Write_Text@text+1,c
  8626  000E34  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8627                           
  8628                           ;SystemStatus.c: 121: sprintf(dest, "$RCR <X><cr>     Set Compression range at RX system
      +                          . High [1] Low [0] [Default = 0]\r\n");
  8629  000E38  0E00               	movlw	low PrintHelpScreen@dest
  8630  000E3A  0100               	movlb	0	; () banked
  8631  000E3C  6FBC               	movwf	sprintf@sp& (0+255),b
  8632  000E3E  0E01               	movlw	high PrintHelpScreen@dest
  8633  000E40  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8634  000E42  0ED8               	movlw	low STR_38
  8635  000E44  6FBE               	movwf	sprintf@f& (0+255),b
  8636  000E46  0E78               	movlw	high STR_38
  8637  000E48  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8638  000E4A  EC70  F000         	call	_sprintf	;wreg free
  8639                           
  8640                           ;SystemStatus.c: 122: UART_Write_Text(dest);
  8641  000E4E  0E00               	movlw	low PrintHelpScreen@dest
  8642  000E50  6E19               	movwf	UART_Write_Text@text,c
  8643  000E52  0E01               	movlw	high PrintHelpScreen@dest
  8644  000E54  6E1A               	movwf	UART_Write_Text@text+1,c
  8645  000E56  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8646                           
  8647                           ;SystemStatus.c: 123: sprintf(dest, "$RCP <X><cr>     Set Compression operation mode at 
      +                          RX system: Automatic[1] Manual[0] [Default = 0]\r\n");
  8648  000E5A  0E00               	movlw	low PrintHelpScreen@dest
  8649  000E5C  0100               	movlb	0	; () banked
  8650  000E5E  6FBC               	movwf	sprintf@sp& (0+255),b
  8651  000E60  0E01               	movlw	high PrintHelpScreen@dest
  8652  000E62  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8653  000E64  0E73               	movlw	low STR_39
  8654  000E66  6FBE               	movwf	sprintf@f& (0+255),b
  8655  000E68  0E78               	movlw	high STR_39
  8656  000E6A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8657  000E6C  EC70  F000         	call	_sprintf	;wreg free
  8658                           
  8659                           ;SystemStatus.c: 124: UART_Write_Text(dest);
  8660  000E70  0E00               	movlw	low PrintHelpScreen@dest
  8661  000E72  6E19               	movwf	UART_Write_Text@text,c
  8662  000E74  0E01               	movlw	high PrintHelpScreen@dest
  8663  000E76  6E1A               	movwf	UART_Write_Text@text+1,c
  8664  000E78  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8665                           
  8666                           ;SystemStatus.c: 127: sprintf(dest, "\n\r<Common system commands>\n\r");
  8667  000E7C  0E00               	movlw	low PrintHelpScreen@dest
  8668  000E7E  0100               	movlb	0	; () banked
  8669  000E80  6FBC               	movwf	sprintf@sp& (0+255),b
  8670  000E82  0E01               	movlw	high PrintHelpScreen@dest
  8671  000E84  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8672  000E86  0E31               	movlw	low STR_40
  8673  000E88  6FBE               	movwf	sprintf@f& (0+255),b
  8674  000E8A  0E7E               	movlw	high STR_40
  8675  000E8C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8676  000E8E  EC70  F000         	call	_sprintf	;wreg free
  8677                           
  8678                           ;SystemStatus.c: 128: UART_Write_Text(dest);
  8679  000E92  0E00               	movlw	low PrintHelpScreen@dest
  8680  000E94  6E19               	movwf	UART_Write_Text@text,c
  8681  000E96  0E01               	movlw	high PrintHelpScreen@dest
  8682  000E98  6E1A               	movwf	UART_Write_Text@text+1,c
  8683  000E9A  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8684                           
  8685                           ;SystemStatus.c: 129: sprintf(dest, "$SH <cr>         Print system help message.\r\n");
  8686  000E9E  0E00               	movlw	low PrintHelpScreen@dest
  8687  000EA0  0100               	movlb	0	; () banked
  8688  000EA2  6FBC               	movwf	sprintf@sp& (0+255),b
  8689  000EA4  0E01               	movlw	high PrintHelpScreen@dest
  8690  000EA6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8691  000EA8  0E4A               	movlw	low STR_41
  8692  000EAA  6FBE               	movwf	sprintf@f& (0+255),b
  8693  000EAC  0E7C               	movlw	high STR_41
  8694  000EAE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8695  000EB0  EC70  F000         	call	_sprintf	;wreg free
  8696                           
  8697                           ;SystemStatus.c: 130: UART_Write_Text(dest);
  8698  000EB4  0E00               	movlw	low PrintHelpScreen@dest
  8699  000EB6  6E19               	movwf	UART_Write_Text@text,c
  8700  000EB8  0E01               	movlw	high PrintHelpScreen@dest
  8701  000EBA  6E1A               	movwf	UART_Write_Text@text+1,c
  8702  000EBC  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8703                           
  8704                           ;SystemStatus.c: 131: sprintf(dest, "$SU <XX><cr>    Set UART refresh rate (1-20)[Hz].\r
      +                          \n");
  8705  000EC0  0E00               	movlw	low PrintHelpScreen@dest
  8706  000EC2  0100               	movlb	0	; () banked
  8707  000EC4  6FBC               	movwf	sprintf@sp& (0+255),b
  8708  000EC6  0E01               	movlw	high PrintHelpScreen@dest
  8709  000EC8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8710  000ECA  0EE5               	movlw	low STR_42
  8711  000ECC  6FBE               	movwf	sprintf@f& (0+255),b
  8712  000ECE  0E7B               	movlw	high STR_42
  8713  000ED0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8714  000ED2  EC70  F000         	call	_sprintf	;wreg free
  8715                           
  8716                           ;SystemStatus.c: 132: UART_Write_Text(dest);
  8717  000ED6  0E00               	movlw	low PrintHelpScreen@dest
  8718  000ED8  6E19               	movwf	UART_Write_Text@text,c
  8719  000EDA  0E01               	movlw	high PrintHelpScreen@dest
  8720  000EDC  6E1A               	movwf	UART_Write_Text@text+1,c
  8721  000EDE  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8722                           
  8723                           ;SystemStatus.c: 133: sprintf(dest, "$SA <X><cr>     Set UART automatic operation: Autom
      +                          atic[1] Manual[0] [Default = 0]\r\n");
  8724  000EE2  0E00               	movlw	low PrintHelpScreen@dest
  8725  000EE4  0100               	movlb	0	; () banked
  8726  000EE6  6FBC               	movwf	sprintf@sp& (0+255),b
  8727  000EE8  0E01               	movlw	high PrintHelpScreen@dest
  8728  000EEA  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8729  000EEC  0E2E               	movlw	low STR_43
  8730  000EEE  6FBE               	movwf	sprintf@f& (0+255),b
  8731  000EF0  0E79               	movlw	high STR_43
  8732  000EF2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8733  000EF4  EC70  F000         	call	_sprintf	;wreg free
  8734                           
  8735                           ;SystemStatus.c: 134: UART_Write_Text(dest);
  8736  000EF8  0E00               	movlw	low PrintHelpScreen@dest
  8737  000EFA  6E19               	movwf	UART_Write_Text@text,c
  8738  000EFC  0E01               	movlw	high PrintHelpScreen@dest
  8739  000EFE  6E1A               	movwf	UART_Write_Text@text+1,c
  8740  000F00  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8741                           
  8742                           ;SystemStatus.c: 135: sprintf(dest, "$SQ <X><cr>      Get system status.\r\n");
  8743  000F04  0E00               	movlw	low PrintHelpScreen@dest
  8744  000F06  0100               	movlb	0	; () banked
  8745  000F08  6FBC               	movwf	sprintf@sp& (0+255),b
  8746  000F0A  0E01               	movlw	high PrintHelpScreen@dest
  8747  000F0C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8748  000F0E  0EFA               	movlw	low STR_44
  8749  000F10  6FBE               	movwf	sprintf@f& (0+255),b
  8750  000F12  0E7C               	movlw	high STR_44
  8751  000F14  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8752  000F16  EC70  F000         	call	_sprintf	;wreg free
  8753                           
  8754                           ;SystemStatus.c: 136: UART_Write_Text(dest);
  8755  000F1A  0E00               	movlw	low PrintHelpScreen@dest
  8756  000F1C  6E19               	movwf	UART_Write_Text@text,c
  8757  000F1E  0E01               	movlw	high PrintHelpScreen@dest
  8758  000F20  6E1A               	movwf	UART_Write_Text@text+1,c
  8759  000F22  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8760                           
  8761                           ;SystemStatus.c: 137: sprintf(dest, "$SL <cr>         Test system LEDs.\r\n");
  8762  000F26  0E00               	movlw	low PrintHelpScreen@dest
  8763  000F28  0100               	movlb	0	; () banked
  8764  000F2A  6FBC               	movwf	sprintf@sp& (0+255),b
  8765  000F2C  0E01               	movlw	high PrintHelpScreen@dest
  8766  000F2E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8767  000F30  0E20               	movlw	low STR_45
  8768  000F32  6FBE               	movwf	sprintf@f& (0+255),b
  8769  000F34  0E7D               	movlw	high STR_45
  8770  000F36  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8771  000F38  EC70  F000         	call	_sprintf	;wreg free
  8772                           
  8773                           ;SystemStatus.c: 138: UART_Write_Text(dest);
  8774  000F3C  0E00               	movlw	low PrintHelpScreen@dest
  8775  000F3E  6E19               	movwf	UART_Write_Text@text,c
  8776  000F40  0E01               	movlw	high PrintHelpScreen@dest
  8777  000F42  6E1A               	movwf	UART_Write_Text@text+1,c
  8778  000F44  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8779                           
  8780                           ;SystemStatus.c: 139: sprintf(dest, "$TD <DAC NUM><DAC VALUE><cr>         Set TX DAC <0-
      +                          3> <0-Vref[4 dig]> \r\n");
  8781  000F48  0E00               	movlw	low PrintHelpScreen@dest
  8782  000F4A  0100               	movlb	0	; () banked
  8783  000F4C  6FBC               	movwf	sprintf@sp& (0+255),b
  8784  000F4E  0E01               	movlw	high PrintHelpScreen@dest
  8785  000F50  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8786  000F52  0E67               	movlw	low STR_46
  8787  000F54  6FBE               	movwf	sprintf@f& (0+255),b
  8788  000F56  0E7A               	movlw	high STR_46
  8789  000F58  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8790  000F5A  EC70  F000         	call	_sprintf	;wreg free
  8791                           
  8792                           ;SystemStatus.c: 140: UART_Write_Text(dest);
  8793  000F5E  0E00               	movlw	low PrintHelpScreen@dest
  8794  000F60  6E19               	movwf	UART_Write_Text@text,c
  8795  000F62  0E01               	movlw	high PrintHelpScreen@dest
  8796  000F64  6E1A               	movwf	UART_Write_Text@text+1,c
  8797  000F66  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8798                           
  8799                           ;SystemStatus.c: 141: sprintf(dest, "$SQ <cr>         Read System Status \r\n");
  8800  000F6A  0E00               	movlw	low PrintHelpScreen@dest
  8801  000F6C  0100               	movlb	0	; () banked
  8802  000F6E  6FBC               	movwf	sprintf@sp& (0+255),b
  8803  000F70  0E01               	movlw	high PrintHelpScreen@dest
  8804  000F72  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8805  000F74  0ED3               	movlw	low STR_47
  8806  000F76  6FBE               	movwf	sprintf@f& (0+255),b
  8807  000F78  0E7C               	movlw	high STR_47
  8808  000F7A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8809  000F7C  EC70  F000         	call	_sprintf	;wreg free
  8810                           
  8811                           ;SystemStatus.c: 142: UART_Write_Text(dest);
  8812  000F80  0E00               	movlw	low PrintHelpScreen@dest
  8813  000F82  6E19               	movwf	UART_Write_Text@text,c
  8814  000F84  0E01               	movlw	high PrintHelpScreen@dest
  8815  000F86  6E1A               	movwf	UART_Write_Text@text+1,c
  8816  000F88  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8817                           
  8818                           ;SystemStatus.c: 143: sprintf(dest, "$ST <cr>         Set Unit Type \r\n");
  8819  000F8C  0E00               	movlw	low PrintHelpScreen@dest
  8820  000F8E  0100               	movlb	0	; () banked
  8821  000F90  6FBC               	movwf	sprintf@sp& (0+255),b
  8822  000F92  0E01               	movlw	high PrintHelpScreen@dest
  8823  000F94  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8824  000F96  0E8D               	movlw	low STR_48
  8825  000F98  6FBE               	movwf	sprintf@f& (0+255),b
  8826  000F9A  0E7D               	movlw	high STR_48
  8827  000F9C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8828  000F9E  EC70  F000         	call	_sprintf	;wreg free
  8829                           
  8830                           ;SystemStatus.c: 144: UART_Write_Text(dest);
  8831  000FA2  0E00               	movlw	low PrintHelpScreen@dest
  8832  000FA4  6E19               	movwf	UART_Write_Text@text,c
  8833  000FA6  0E01               	movlw	high PrintHelpScreen@dest
  8834  000FA8  6E1A               	movwf	UART_Write_Text@text+1,c
  8835  000FAA  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8836                           
  8837                           ;SystemStatus.c: 145: sprintf(dest, "$SV <cr>         Save System status To EEPROM \r\n"
      +                          );
  8838  000FAE  0E00               	movlw	low PrintHelpScreen@dest
  8839  000FB0  0100               	movlb	0	; () banked
  8840  000FB2  6FBC               	movwf	sprintf@sp& (0+255),b
  8841  000FB4  0E01               	movlw	high PrintHelpScreen@dest
  8842  000FB6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8843  000FB8  0E19               	movlw	low STR_49
  8844  000FBA  6FBE               	movwf	sprintf@f& (0+255),b
  8845  000FBC  0E7C               	movlw	high STR_49
  8846  000FBE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8847  000FC0  EC70  F000         	call	_sprintf	;wreg free
  8848                           
  8849                           ;SystemStatus.c: 146: UART_Write_Text(dest);
  8850  000FC4  0E00               	movlw	low PrintHelpScreen@dest
  8851  000FC6  6E19               	movwf	UART_Write_Text@text,c
  8852  000FC8  0E01               	movlw	high PrintHelpScreen@dest
  8853  000FCA  6E1A               	movwf	UART_Write_Text@text+1,c
  8854  000FCC  ECAE  F01D         	call	_UART_Write_Text	;wreg free
  8855  000FD0  0012               	return		;funcret
  8856  000FD2                     __end_of_PrintHelpScreen:
  8857                           	opt stack 0
  8858                           tosu	equ	0xFFF
  8859                           tosh	equ	0xFFE
  8860                           tosl	equ	0xFFD
  8861                           pclath	equ	0xFFA
  8862                           tblptru	equ	0xFF8
  8863                           tblptrh	equ	0xFF7
  8864                           tblptrl	equ	0xFF6
  8865                           tablat	equ	0xFF5
  8866                           prodh	equ	0xFF4
  8867                           prodl	equ	0xFF3
  8868                           postinc0	equ	0xFEE
  8869                           wreg	equ	0xFE8
  8870                           indf1	equ	0xFE7
  8871                           postdec1	equ	0xFE5
  8872                           fsr1h	equ	0xFE2
  8873                           fsr1l	equ	0xFE1
  8874                           indf2	equ	0xFDF
  8875                           postinc2	equ	0xFDE
  8876                           postdec2	equ	0xFDD
  8877                           fsr2h	equ	0xFDA
  8878                           fsr2l	equ	0xFD9
  8879                           status	equ	0xFD8
  8880                           
  8881 ;; *************** function _EUSART1_Read *****************
  8882 ;; Defined at:
  8883 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;		None
  8886 ;; Auto vars:     Size  Location     Type
  8887 ;;  readValue       2   24[COMRAM] unsigned int 
  8888 ;; Return value:  Size  Location     Type
  8889 ;;                  1    wreg      unsigned char 
  8890 ;; Registers used:
  8891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8892 ;; Tracked objects:
  8893 ;;		On entry : 0/0
  8894 ;;		On exit  : 0/0
  8895 ;;		Unchanged: 0/0
  8896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8897 ;;      Params:         0       0       0       0       0       0       0
  8898 ;;      Locals:         2       0       0       0       0       0       0
  8899 ;;      Temps:          1       0       0       0       0       0       0
  8900 ;;      Totals:         3       0       0       0       0       0       0
  8901 ;;Total ram usage:        3 bytes
  8902 ;; Hardware stack levels used:    1
  8903 ;; Hardware stack levels required when called:    3
  8904 ;; This function calls:
  8905 ;;		Nothing
  8906 ;; This function is called by:
  8907 ;;		_readUartByte
  8908 ;; This function uses a non-reentrant model
  8909 ;;
  8910                           
  8911                           	psect	text25
  8912  0042E2                     __ptext25:
  8913                           	opt stack 0
  8914  0042E2                     _EUSART1_Read:
  8915                           	opt stack 26
  8916                           
  8917                           ;eusart1.c: 112: uint16_t readValue = 0;
  8918                           
  8919                           ;incstack = 0
  8920  0042E2  0E00               	movlw	0
  8921  0042E4  6E1A               	movwf	EUSART1_Read@readValue+1,c
  8922  0042E6  0E00               	movlw	0
  8923  0042E8  6E19               	movwf	EUSART1_Read@readValue,c
  8924                           
  8925                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  8926  0042EA  0101               	movlb	1	; () banked
  8927  0042EC  51D5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  8928  0042EE  A4D8               	btfss	status,2,c
  8929  0042F0  D002               	goto	l829
  8930                           
  8931                           ; BSR set to: 1
  8932                           ;eusart1.c: 120: {
  8933                           ;eusart1.c: 121: return readValue;
  8934  0042F2  5019               	movf	EUSART1_Read@readValue,w,c
  8935                           
  8936                           ; BSR set to: 1
  8937  0042F4  0012               	return	
  8938  0042F6                     l829:
  8939                           
  8940                           ; BSR set to: 1
  8941                           ;eusart1.c: 122: }
  8942                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  8943                           
  8944                           ; BSR set to: 1
  8945  0042F6  5041               	movf	_eusart1RxTail,w,c	;volatile
  8946  0042F8  0D01               	mullw	1
  8947  0042FA  0E46               	movlw	low _eusart1RxBuffer
  8948  0042FC  24F3               	addwf	prodl,w,c
  8949  0042FE  6ED9               	movwf	fsr2l,c
  8950  004300  0E02               	movlw	high _eusart1RxBuffer
  8951  004302  20F4               	addwfc	prodh,w,c
  8952  004304  6EDA               	movwf	fsr2h,c
  8953  004306  50DF               	movf	indf2,w,c
  8954  004308  6E18               	movwf	??_EUSART1_Read& (0+255),c
  8955  00430A  5018               	movf	??_EUSART1_Read,w,c
  8956  00430C  6E19               	movwf	EUSART1_Read@readValue,c
  8957  00430E  6A1A               	clrf	EUSART1_Read@readValue+1,c
  8958                           
  8959                           ; BSR set to: 1
  8960  004310  2A41               	incf	_eusart1RxTail,f,c	;volatile
  8961                           
  8962                           ; BSR set to: 1
  8963                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  8964  004312  0E27               	movlw	39
  8965  004314  6441               	cpfsgt	_eusart1RxTail,c	;volatile
  8966  004316  D002               	goto	l831
  8967                           
  8968                           ; BSR set to: 1
  8969                           ;eusart1.c: 126: {
  8970                           ;eusart1.c: 127: eusart1RxTail = 0;
  8971  004318  0E00               	movlw	0
  8972  00431A  6E41               	movwf	_eusart1RxTail,c	;volatile
  8973  00431C                     l831:
  8974                           
  8975                           ; BSR set to: 1
  8976                           ;eusart1.c: 128: }
  8977                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  8978                           
  8979                           ; BSR set to: 1
  8980  00431C  9A9D               	bcf	3997,5,c	;volatile
  8981                           
  8982                           ; BSR set to: 1
  8983                           ;eusart1.c: 130: eusart1RxCount--;
  8984  00431E  07D5               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  8985                           
  8986                           ; BSR set to: 1
  8987                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  8988  004320  8A9D               	bsf	3997,5,c	;volatile
  8989                           
  8990                           ; BSR set to: 1
  8991                           ;eusart1.c: 133: return readValue;
  8992  004322  5019               	movf	EUSART1_Read@readValue,w,c
  8993  004324  0012               	return	
  8994  004326                     __end_of_EUSART1_Read:
  8995                           	opt stack 0
  8996                           tosu	equ	0xFFF
  8997                           tosh	equ	0xFFE
  8998                           tosl	equ	0xFFD
  8999                           pclath	equ	0xFFA
  9000                           tblptru	equ	0xFF8
  9001                           tblptrh	equ	0xFF7
  9002                           tblptrl	equ	0xFF6
  9003                           tablat	equ	0xFF5
  9004                           prodh	equ	0xFF4
  9005                           prodl	equ	0xFF3
  9006                           postinc0	equ	0xFEE
  9007                           wreg	equ	0xFE8
  9008                           indf1	equ	0xFE7
  9009                           postdec1	equ	0xFE5
  9010                           fsr1h	equ	0xFE2
  9011                           fsr1l	equ	0xFE1
  9012                           indf2	equ	0xFDF
  9013                           postinc2	equ	0xFDE
  9014                           postdec2	equ	0xFDD
  9015                           fsr2h	equ	0xFDA
  9016                           fsr2l	equ	0xFD9
  9017                           status	equ	0xFD8
  9018                           
  9019 ;; *************** function _keepAliveSignalLed *****************
  9020 ;; Defined at:
  9021 ;;		line 35 in file "LedsApp.c"
  9022 ;; Parameters:    Size  Location     Type
  9023 ;;		None
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;		None
  9026 ;; Return value:  Size  Location     Type
  9027 ;;                  1    wreg      void 
  9028 ;; Registers used:
  9029 ;;		wreg, status,2, status,0
  9030 ;; Tracked objects:
  9031 ;;		On entry : 0/0
  9032 ;;		On exit  : 0/0
  9033 ;;		Unchanged: 0/0
  9034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9035 ;;      Params:         0       0       0       0       0       0       0
  9036 ;;      Locals:         0       0       0       0       0       0       0
  9037 ;;      Temps:          1       0       0       0       0       0       0
  9038 ;;      Totals:         1       0       0       0       0       0       0
  9039 ;;Total ram usage:        1 bytes
  9040 ;; Hardware stack levels used:    1
  9041 ;; Hardware stack levels required when called:    3
  9042 ;; This function calls:
  9043 ;;		Nothing
  9044 ;; This function is called by:
  9045 ;;		_main
  9046 ;; This function uses a non-reentrant model
  9047 ;;
  9048                           
  9049                           	psect	text26
  9050  004780                     __ptext26:
  9051                           	opt stack 0
  9052  004780                     _keepAliveSignalLed:
  9053                           	opt stack 27
  9054                           
  9055                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  9056                           
  9057                           ; BSR set to: 1
  9058                           ;incstack = 0
  9059  004780  B08B               	btfsc	3979,0,c	;volatile
  9060  004782  D003               	goto	u6290
  9061  004784  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  9062  004786  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  9063  004788  D001               	goto	u6308
  9064  00478A                     u6290:
  9065  00478A  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  9066  00478C                     u6308:
  9067  00478C  508B               	movf	3979,w,c	;volatile
  9068  00478E  1818               	xorwf	??_keepAliveSignalLed,w,c
  9069  004790  0BFE               	andlw	-2
  9070  004792  1818               	xorwf	??_keepAliveSignalLed,w,c
  9071  004794  6E8B               	movwf	3979,c	;volatile
  9072  004796  0012               	return		;funcret
  9073  004798                     __end_of_keepAliveSignalLed:
  9074                           	opt stack 0
  9075                           tosu	equ	0xFFF
  9076                           tosh	equ	0xFFE
  9077                           tosl	equ	0xFFD
  9078                           pclath	equ	0xFFA
  9079                           tblptru	equ	0xFF8
  9080                           tblptrh	equ	0xFF7
  9081                           tblptrl	equ	0xFF6
  9082                           tablat	equ	0xFF5
  9083                           prodh	equ	0xFF4
  9084                           prodl	equ	0xFF3
  9085                           postinc0	equ	0xFEE
  9086                           wreg	equ	0xFE8
  9087                           indf1	equ	0xFE7
  9088                           postdec1	equ	0xFE5
  9089                           fsr1h	equ	0xFE2
  9090                           fsr1l	equ	0xFE1
  9091                           indf2	equ	0xFDF
  9092                           postinc2	equ	0xFDE
  9093                           postdec2	equ	0xFDD
  9094                           fsr2h	equ	0xFDA
  9095                           fsr2l	equ	0xFD9
  9096                           status	equ	0xFD8
  9097                           
  9098 ;; *************** function _SetMcuSystem *****************
  9099 ;; Defined at:
  9100 ;;		line 11 in file "SystemSettings.c"
  9101 ;; Parameters:    Size  Location     Type
  9102 ;;		None
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;		None
  9105 ;; Return value:  Size  Location     Type
  9106 ;;                  1    wreg      void 
  9107 ;; Registers used:
  9108 ;;		wreg, status,2, status,0, cstack
  9109 ;; Tracked objects:
  9110 ;;		On entry : 0/0
  9111 ;;		On exit  : 0/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9114 ;;      Params:         0       0       0       0       0       0       0
  9115 ;;      Locals:         0       0       0       0       0       0       0
  9116 ;;      Temps:          0       0       0       0       0       0       0
  9117 ;;      Totals:         0       0       0       0       0       0       0
  9118 ;;Total ram usage:        0 bytes
  9119 ;; Hardware stack levels used:    1
  9120 ;; Hardware stack levels required when called:    6
  9121 ;; This function calls:
  9122 ;;		_SYSTEM_Initialize
  9123 ;; This function is called by:
  9124 ;;		_main
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           	psect	text27
  9129  004828                     __ptext27:
  9130                           	opt stack 0
  9131  004828                     _SetMcuSystem:
  9132                           	opt stack 24
  9133                           
  9134                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  9135                           
  9136                           ;incstack = 0
  9137  004828  ECB3  F023         	call	_SYSTEM_Initialize	;wreg free
  9138                           
  9139                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  9140  00482C  8EF2               	bsf	intcon,7,c	;volatile
  9141                           
  9142                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  9143  00482E  8CF2               	bsf	intcon,6,c	;volatile
  9144  004830  0012               	return		;funcret
  9145  004832                     __end_of_SetMcuSystem:
  9146                           	opt stack 0
  9147                           tosu	equ	0xFFF
  9148                           tosh	equ	0xFFE
  9149                           tosl	equ	0xFFD
  9150                           pclath	equ	0xFFA
  9151                           tblptru	equ	0xFF8
  9152                           tblptrh	equ	0xFF7
  9153                           tblptrl	equ	0xFF6
  9154                           tablat	equ	0xFF5
  9155                           prodh	equ	0xFF4
  9156                           prodl	equ	0xFF3
  9157                           intcon	equ	0xFF2
  9158                           postinc0	equ	0xFEE
  9159                           wreg	equ	0xFE8
  9160                           indf1	equ	0xFE7
  9161                           postdec1	equ	0xFE5
  9162                           fsr1h	equ	0xFE2
  9163                           fsr1l	equ	0xFE1
  9164                           indf2	equ	0xFDF
  9165                           postinc2	equ	0xFDE
  9166                           postdec2	equ	0xFDD
  9167                           fsr2h	equ	0xFDA
  9168                           fsr2l	equ	0xFD9
  9169                           status	equ	0xFD8
  9170                           
  9171 ;; *************** function _SYSTEM_Initialize *****************
  9172 ;; Defined at:
  9173 ;;		line 112 in file "mcc_generated_files/mcc.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;		None
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;		None
  9178 ;; Return value:  Size  Location     Type
  9179 ;;                  1    wreg      void 
  9180 ;; Registers used:
  9181 ;;		wreg, status,2, status,0, cstack
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9187 ;;      Params:         0       0       0       0       0       0       0
  9188 ;;      Locals:         0       0       0       0       0       0       0
  9189 ;;      Temps:          0       0       0       0       0       0       0
  9190 ;;      Totals:         0       0       0       0       0       0       0
  9191 ;;Total ram usage:        0 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:    5
  9194 ;; This function calls:
  9195 ;;		_ADC_Initialize
  9196 ;;		_EUSART1_Initialize
  9197 ;;		_INTERRUPT_Initialize
  9198 ;;		_OSCILLATOR_Initialize
  9199 ;;		_PIN_MANAGER_Initialize
  9200 ;;		_TMR0_Initialize
  9201 ;; This function is called by:
  9202 ;;		_SetMcuSystem
  9203 ;; This function uses a non-reentrant model
  9204 ;;
  9205                           
  9206                           	psect	text28
  9207  004766                     __ptext28:
  9208                           	opt stack 0
  9209  004766                     _SYSTEM_Initialize:
  9210                           	opt stack 24
  9211                           
  9212                           ;mcc.c: 114: INTERRUPT_Initialize();
  9213                           
  9214                           ;incstack = 0
  9215  004766  EC26  F024         	call	_INTERRUPT_Initialize	;wreg free
  9216                           
  9217                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  9218  00476A  EC08  F021         	call	_PIN_MANAGER_Initialize	;wreg free
  9219                           
  9220                           ;mcc.c: 116: OSCILLATOR_Initialize();
  9221  00476E  EC00  F024         	call	_OSCILLATOR_Initialize	;wreg free
  9222                           
  9223                           ;mcc.c: 117: ADC_Initialize();
  9224  004772  ECCC  F023         	call	_ADC_Initialize	;wreg free
  9225                           
  9226                           ;mcc.c: 118: TMR0_Initialize();
  9227  004776  ECB9  F022         	call	_TMR0_Initialize	;wreg free
  9228                           
  9229                           ;mcc.c: 119: EUSART1_Initialize();
  9230  00477A  EC83  F022         	call	_EUSART1_Initialize	;wreg free
  9231  00477E  0012               	return		;funcret
  9232  004780                     __end_of_SYSTEM_Initialize:
  9233                           	opt stack 0
  9234                           tosu	equ	0xFFF
  9235                           tosh	equ	0xFFE
  9236                           tosl	equ	0xFFD
  9237                           pclath	equ	0xFFA
  9238                           tblptru	equ	0xFF8
  9239                           tblptrh	equ	0xFF7
  9240                           tblptrl	equ	0xFF6
  9241                           tablat	equ	0xFF5
  9242                           prodh	equ	0xFF4
  9243                           prodl	equ	0xFF3
  9244                           intcon	equ	0xFF2
  9245                           postinc0	equ	0xFEE
  9246                           wreg	equ	0xFE8
  9247                           indf1	equ	0xFE7
  9248                           postdec1	equ	0xFE5
  9249                           fsr1h	equ	0xFE2
  9250                           fsr1l	equ	0xFE1
  9251                           indf2	equ	0xFDF
  9252                           postinc2	equ	0xFDE
  9253                           postdec2	equ	0xFDD
  9254                           fsr2h	equ	0xFDA
  9255                           fsr2l	equ	0xFD9
  9256                           status	equ	0xFD8
  9257                           
  9258 ;; *************** function _TMR0_Initialize *****************
  9259 ;; Defined at:
  9260 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  9261 ;; Parameters:    Size  Location     Type
  9262 ;;		None
  9263 ;; Auto vars:     Size  Location     Type
  9264 ;;		None
  9265 ;; Return value:  Size  Location     Type
  9266 ;;                  1    wreg      void 
  9267 ;; Registers used:
  9268 ;;		wreg, status,2, status,0, cstack
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9274 ;;      Params:         0       0       0       0       0       0       0
  9275 ;;      Locals:         0       0       0       0       0       0       0
  9276 ;;      Temps:          2       0       0       0       0       0       0
  9277 ;;      Totals:         2       0       0       0       0       0       0
  9278 ;;Total ram usage:        2 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; Hardware stack levels required when called:    4
  9281 ;; This function calls:
  9282 ;;		_TMR0_SetInterruptHandler
  9283 ;; This function is called by:
  9284 ;;		_SYSTEM_Initialize
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288                           	psect	text29
  9289  004572                     __ptext29:
  9290                           	opt stack 0
  9291  004572                     _TMR0_Initialize:
  9292                           	opt stack 24
  9293                           
  9294                           ;tmr0.c: 71: TMR0H = 0x3C;
  9295                           
  9296                           ;incstack = 0
  9297  004572  0E3C               	movlw	60
  9298  004574  6ED7               	movwf	4055,c	;volatile
  9299                           
  9300                           ;tmr0.c: 74: TMR0L = 0xAF;
  9301  004576  0EAF               	movlw	175
  9302  004578  6ED6               	movwf	4054,c	;volatile
  9303                           
  9304                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  9305  00457A  50D6               	movf	4054,w,c	;volatile
  9306  00457C  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  9307  004580  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  9308  004582  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  9309  004586  6A1A               	clrf	??_TMR0_Initialize,c
  9310  004588  101A               	iorwf	??_TMR0_Initialize,w,c
  9311  00458A  6E46               	movwf	_timer0ReloadVal,c	;volatile
  9312  00458C  501B               	movf	??_TMR0_Initialize+1,w,c
  9313  00458E  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  9314                           
  9315                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  9316  004590  94F2               	bcf	intcon,2,c	;volatile
  9317                           
  9318                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  9319  004592  8AF2               	bsf	intcon,5,c	;volatile
  9320                           
  9321                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  9322  004594  0E00               	movlw	0
  9323  004596  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  9324  004598  0E00               	movlw	0
  9325  00459A  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  9326  00459C  EC19  F024         	call	_TMR0_SetInterruptHandler	;wreg free
  9327                           
  9328                           ;tmr0.c: 90: T0CON = 0x90;
  9329  0045A0  0E90               	movlw	144
  9330  0045A2  6ED5               	movwf	4053,c	;volatile
  9331  0045A4  0012               	return		;funcret
  9332  0045A6                     __end_of_TMR0_Initialize:
  9333                           	opt stack 0
  9334                           tosu	equ	0xFFF
  9335                           tosh	equ	0xFFE
  9336                           tosl	equ	0xFFD
  9337                           pclath	equ	0xFFA
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           postinc0	equ	0xFEE
  9346                           wreg	equ	0xFE8
  9347                           indf1	equ	0xFE7
  9348                           postdec1	equ	0xFE5
  9349                           fsr1h	equ	0xFE2
  9350                           fsr1l	equ	0xFE1
  9351                           indf2	equ	0xFDF
  9352                           postinc2	equ	0xFDE
  9353                           postdec2	equ	0xFDD
  9354                           fsr2h	equ	0xFDA
  9355                           fsr2l	equ	0xFD9
  9356                           status	equ	0xFD8
  9357                           
  9358 ;; *************** function _TMR0_SetInterruptHandler *****************
  9359 ;; Defined at:
  9360 ;;		line 181 in file "mcc_generated_files/tmr0.c"
  9361 ;; Parameters:    Size  Location     Type
  9362 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9363 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  9364 ;; Auto vars:     Size  Location     Type
  9365 ;;		None
  9366 ;; Return value:  Size  Location     Type
  9367 ;;                  1    wreg      void 
  9368 ;; Registers used:
  9369 ;;		wreg, status,2, status,0
  9370 ;; Tracked objects:
  9371 ;;		On entry : 0/0
  9372 ;;		On exit  : 0/0
  9373 ;;		Unchanged: 0/0
  9374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9375 ;;      Params:         2       0       0       0       0       0       0
  9376 ;;      Locals:         0       0       0       0       0       0       0
  9377 ;;      Temps:          0       0       0       0       0       0       0
  9378 ;;      Totals:         2       0       0       0       0       0       0
  9379 ;;Total ram usage:        2 bytes
  9380 ;; Hardware stack levels used:    1
  9381 ;; Hardware stack levels required when called:    3
  9382 ;; This function calls:
  9383 ;;		Nothing
  9384 ;; This function is called by:
  9385 ;;		_TMR0_Initialize
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           	psect	text30
  9390  004832                     __ptext30:
  9391                           	opt stack 0
  9392  004832                     _TMR0_SetInterruptHandler:
  9393                           	opt stack 24
  9394                           
  9395                           ;tmr0.c: 182: TMR0_InterruptHandler = InterruptHandler;
  9396                           
  9397                           ;incstack = 0
  9398  004832  C018  F1E8         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  9399  004836  C019  F1E9         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  9400  00483A  0012               	return		;funcret
  9401  00483C                     __end_of_TMR0_SetInterruptHandler:
  9402                           	opt stack 0
  9403                           tosu	equ	0xFFF
  9404                           tosh	equ	0xFFE
  9405                           tosl	equ	0xFFD
  9406                           pclath	equ	0xFFA
  9407                           tblptru	equ	0xFF8
  9408                           tblptrh	equ	0xFF7
  9409                           tblptrl	equ	0xFF6
  9410                           tablat	equ	0xFF5
  9411                           prodh	equ	0xFF4
  9412                           prodl	equ	0xFF3
  9413                           intcon	equ	0xFF2
  9414                           postinc0	equ	0xFEE
  9415                           wreg	equ	0xFE8
  9416                           indf1	equ	0xFE7
  9417                           postdec1	equ	0xFE5
  9418                           fsr1h	equ	0xFE2
  9419                           fsr1l	equ	0xFE1
  9420                           indf2	equ	0xFDF
  9421                           postinc2	equ	0xFDE
  9422                           postdec2	equ	0xFDD
  9423                           fsr2h	equ	0xFDA
  9424                           fsr2l	equ	0xFD9
  9425                           status	equ	0xFD8
  9426                           
  9427 ;; *************** function _PIN_MANAGER_Initialize *****************
  9428 ;; Defined at:
  9429 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;		None
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;		None
  9434 ;; Return value:  Size  Location     Type
  9435 ;;                  1    wreg      void 
  9436 ;; Registers used:
  9437 ;;		wreg, status,2
  9438 ;; Tracked objects:
  9439 ;;		On entry : 0/0
  9440 ;;		On exit  : 0/0
  9441 ;;		Unchanged: 0/0
  9442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9443 ;;      Params:         0       0       0       0       0       0       0
  9444 ;;      Locals:         0       0       0       0       0       0       0
  9445 ;;      Temps:          0       0       0       0       0       0       0
  9446 ;;      Totals:         0       0       0       0       0       0       0
  9447 ;;Total ram usage:        0 bytes
  9448 ;; Hardware stack levels used:    1
  9449 ;; Hardware stack levels required when called:    3
  9450 ;; This function calls:
  9451 ;;		Nothing
  9452 ;; This function is called by:
  9453 ;;		_SYSTEM_Initialize
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           	psect	text31
  9458  004210                     __ptext31:
  9459                           	opt stack 0
  9460  004210                     _PIN_MANAGER_Initialize:
  9461                           	opt stack 25
  9462                           
  9463                           ;pin_manager.c: 57: LATE = 0x00;
  9464                           
  9465                           ;incstack = 0
  9466  004210  0E00               	movlw	0
  9467  004212  6E8D               	movwf	3981,c	;volatile
  9468                           
  9469                           ;pin_manager.c: 58: LATD = 0x40;
  9470  004214  0E40               	movlw	64
  9471  004216  6E8C               	movwf	3980,c	;volatile
  9472                           
  9473                           ;pin_manager.c: 59: LATA = 0x06;
  9474  004218  0E06               	movlw	6
  9475  00421A  6E89               	movwf	3977,c	;volatile
  9476                           
  9477                           ;pin_manager.c: 60: LATB = 0x00;
  9478  00421C  0E00               	movlw	0
  9479  00421E  6E8A               	movwf	3978,c	;volatile
  9480                           
  9481                           ;pin_manager.c: 61: LATC = 0x00;
  9482  004220  0E00               	movlw	0
  9483  004222  6E8B               	movwf	3979,c	;volatile
  9484                           
  9485                           ;pin_manager.c: 66: TRISE = 0x07;
  9486  004224  0E07               	movlw	7
  9487  004226  6E96               	movwf	3990,c	;volatile
  9488                           
  9489                           ;pin_manager.c: 67: TRISA = 0xE1;
  9490  004228  0EE1               	movlw	225
  9491  00422A  6E92               	movwf	3986,c	;volatile
  9492                           
  9493                           ;pin_manager.c: 68: TRISB = 0xEE;
  9494  00422C  0EEE               	movlw	238
  9495  00422E  6E93               	movwf	3987,c	;volatile
  9496                           
  9497                           ;pin_manager.c: 69: TRISC = 0x80;
  9498  004230  0E80               	movlw	128
  9499  004232  6E94               	movwf	3988,c	;volatile
  9500                           
  9501                           ;pin_manager.c: 70: TRISD = 0xB2;
  9502  004234  0EB2               	movlw	178
  9503  004236  6E95               	movwf	3989,c	;volatile
  9504                           
  9505                           ;pin_manager.c: 75: ANSELC = 0x30;
  9506  004238  0E30               	movlw	48
  9507  00423A  010F               	movlb	15	; () banked
  9508  00423C  6F3A               	movwf	58,b	;volatile
  9509                           
  9510                           ;pin_manager.c: 76: ANSELB = 0x32;
  9511  00423E  0E32               	movlw	50
  9512  004240  6F39               	movwf	57,b	;volatile
  9513                           
  9514                           ;pin_manager.c: 77: ANSELD = 0xA4;
  9515  004242  0EA4               	movlw	164
  9516  004244  6F3B               	movwf	59,b	;volatile
  9517                           
  9518                           ;pin_manager.c: 78: ANSELE = 0x07;
  9519  004246  0E07               	movlw	7
  9520  004248  6F3C               	movwf	60,b	;volatile
  9521                           
  9522                           ;pin_manager.c: 79: ANSELA = 0x2F;
  9523  00424A  0E2F               	movlw	47
  9524  00424C  6F38               	movwf	56,b	;volatile
  9525                           
  9526                           ;pin_manager.c: 84: WPUB = 0xC2;
  9527  00424E  0EC2               	movlw	194
  9528  004250  6E61               	movwf	3937,c	;volatile
  9529                           
  9530                           ; BSR set to: 15
  9531                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 1;
  9532  004252  8EF1               	bsf	intcon2,7,c	;volatile
  9533                           
  9534                           ; BSR set to: 15
  9535                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  9536  004254  86F2               	bsf	intcon,3,c	;volatile
  9537                           
  9538                           ; BSR set to: 15
  9539  004256  0012               	return		;funcret
  9540  004258                     __end_of_PIN_MANAGER_Initialize:
  9541                           	opt stack 0
  9542                           tosu	equ	0xFFF
  9543                           tosh	equ	0xFFE
  9544                           tosl	equ	0xFFD
  9545                           pclath	equ	0xFFA
  9546                           tblptru	equ	0xFF8
  9547                           tblptrh	equ	0xFF7
  9548                           tblptrl	equ	0xFF6
  9549                           tablat	equ	0xFF5
  9550                           prodh	equ	0xFF4
  9551                           prodl	equ	0xFF3
  9552                           intcon	equ	0xFF2
  9553                           intcon2	equ	0xFF1
  9554                           postinc0	equ	0xFEE
  9555                           wreg	equ	0xFE8
  9556                           indf1	equ	0xFE7
  9557                           postdec1	equ	0xFE5
  9558                           fsr1h	equ	0xFE2
  9559                           fsr1l	equ	0xFE1
  9560                           indf2	equ	0xFDF
  9561                           postinc2	equ	0xFDE
  9562                           postdec2	equ	0xFDD
  9563                           fsr2h	equ	0xFDA
  9564                           fsr2l	equ	0xFD9
  9565                           status	equ	0xFD8
  9566                           
  9567 ;; *************** function _OSCILLATOR_Initialize *****************
  9568 ;; Defined at:
  9569 ;;		line 122 in file "mcc_generated_files/mcc.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;		None
  9572 ;; Auto vars:     Size  Location     Type
  9573 ;;		None
  9574 ;; Return value:  Size  Location     Type
  9575 ;;                  1    wreg      void 
  9576 ;; Registers used:
  9577 ;;		wreg, status,2
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/0
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9583 ;;      Params:         0       0       0       0       0       0       0
  9584 ;;      Locals:         0       0       0       0       0       0       0
  9585 ;;      Temps:          0       0       0       0       0       0       0
  9586 ;;      Totals:         0       0       0       0       0       0       0
  9587 ;;Total ram usage:        0 bytes
  9588 ;; Hardware stack levels used:    1
  9589 ;; Hardware stack levels required when called:    3
  9590 ;; This function calls:
  9591 ;;		Nothing
  9592 ;; This function is called by:
  9593 ;;		_SYSTEM_Initialize
  9594 ;; This function uses a non-reentrant model
  9595 ;;
  9596                           
  9597                           	psect	text32
  9598  004800                     __ptext32:
  9599                           	opt stack 0
  9600  004800                     _OSCILLATOR_Initialize:
  9601                           	opt stack 25
  9602                           
  9603                           ;mcc.c: 125: OSCCON = 0x60;
  9604                           
  9605                           ; BSR set to: 15
  9606                           ;incstack = 0
  9607  004800  0E60               	movlw	96
  9608  004802  6ED3               	movwf	4051,c	;volatile
  9609                           
  9610                           ;mcc.c: 127: OSCCON2 = 0x04;
  9611  004804  0E04               	movlw	4
  9612  004806  6ED2               	movwf	4050,c	;volatile
  9613                           
  9614                           ;mcc.c: 129: OSCTUNE = 0x00;
  9615  004808  0E00               	movlw	0
  9616  00480A  6E9B               	movwf	3995,c	;volatile
  9617  00480C  0012               	return		;funcret
  9618  00480E                     __end_of_OSCILLATOR_Initialize:
  9619                           	opt stack 0
  9620                           tosu	equ	0xFFF
  9621                           tosh	equ	0xFFE
  9622                           tosl	equ	0xFFD
  9623                           pclath	equ	0xFFA
  9624                           tblptru	equ	0xFF8
  9625                           tblptrh	equ	0xFF7
  9626                           tblptrl	equ	0xFF6
  9627                           tablat	equ	0xFF5
  9628                           prodh	equ	0xFF4
  9629                           prodl	equ	0xFF3
  9630                           intcon	equ	0xFF2
  9631                           intcon2	equ	0xFF1
  9632                           postinc0	equ	0xFEE
  9633                           wreg	equ	0xFE8
  9634                           indf1	equ	0xFE7
  9635                           postdec1	equ	0xFE5
  9636                           fsr1h	equ	0xFE2
  9637                           fsr1l	equ	0xFE1
  9638                           indf2	equ	0xFDF
  9639                           postinc2	equ	0xFDE
  9640                           postdec2	equ	0xFDD
  9641                           fsr2h	equ	0xFDA
  9642                           fsr2l	equ	0xFD9
  9643                           status	equ	0xFD8
  9644                           
  9645 ;; *************** function _INTERRUPT_Initialize *****************
  9646 ;; Defined at:
  9647 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;		None
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;		None
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      void 
  9654 ;; Registers used:
  9655 ;;		None
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9661 ;;      Params:         0       0       0       0       0       0       0
  9662 ;;      Locals:         0       0       0       0       0       0       0
  9663 ;;      Temps:          0       0       0       0       0       0       0
  9664 ;;      Totals:         0       0       0       0       0       0       0
  9665 ;;Total ram usage:        0 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    3
  9668 ;; This function calls:
  9669 ;;		Nothing
  9670 ;; This function is called by:
  9671 ;;		_SYSTEM_Initialize
  9672 ;; This function uses a non-reentrant model
  9673 ;;
  9674                           
  9675                           	psect	text33
  9676  00484C                     __ptext33:
  9677                           	opt stack 0
  9678  00484C                     _INTERRUPT_Initialize:
  9679                           	opt stack 25
  9680                           
  9681                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  9682                           
  9683                           ;incstack = 0
  9684  00484C  9ED0               	bcf	4048,7,c	;volatile
  9685  00484E  0012               	return		;funcret
  9686  004850                     __end_of_INTERRUPT_Initialize:
  9687                           	opt stack 0
  9688                           tosu	equ	0xFFF
  9689                           tosh	equ	0xFFE
  9690                           tosl	equ	0xFFD
  9691                           pclath	equ	0xFFA
  9692                           tblptru	equ	0xFF8
  9693                           tblptrh	equ	0xFF7
  9694                           tblptrl	equ	0xFF6
  9695                           tablat	equ	0xFF5
  9696                           prodh	equ	0xFF4
  9697                           prodl	equ	0xFF3
  9698                           intcon	equ	0xFF2
  9699                           intcon2	equ	0xFF1
  9700                           postinc0	equ	0xFEE
  9701                           wreg	equ	0xFE8
  9702                           indf1	equ	0xFE7
  9703                           postdec1	equ	0xFE5
  9704                           fsr1h	equ	0xFE2
  9705                           fsr1l	equ	0xFE1
  9706                           indf2	equ	0xFDF
  9707                           postinc2	equ	0xFDE
  9708                           postdec2	equ	0xFDD
  9709                           fsr2h	equ	0xFDA
  9710                           fsr2l	equ	0xFD9
  9711                           status	equ	0xFD8
  9712                           
  9713 ;; *************** function _EUSART1_Initialize *****************
  9714 ;; Defined at:
  9715 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;		None
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  1    wreg      void 
  9722 ;; Registers used:
  9723 ;;		wreg, status,2
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9729 ;;      Params:         0       0       0       0       0       0       0
  9730 ;;      Locals:         0       0       0       0       0       0       0
  9731 ;;      Temps:          0       0       0       0       0       0       0
  9732 ;;      Totals:         0       0       0       0       0       0       0
  9733 ;;Total ram usage:        0 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    3
  9736 ;; This function calls:
  9737 ;;		Nothing
  9738 ;; This function is called by:
  9739 ;;		_SYSTEM_Initialize
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           	psect	text34
  9744  004506                     __ptext34:
  9745                           	opt stack 0
  9746  004506                     _EUSART1_Initialize:
  9747                           	opt stack 25
  9748                           
  9749                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  9750                           
  9751                           ;incstack = 0
  9752  004506  9A9D               	bcf	3997,5,c	;volatile
  9753                           
  9754                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  9755  004508  989D               	bcf	3997,4,c	;volatile
  9756                           
  9757                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  9758  00450A  0E08               	movlw	8
  9759  00450C  6EB8               	movwf	4024,c	;volatile
  9760                           
  9761                           ;eusart1.c: 85: RCSTA1 = 0x90;
  9762  00450E  0E90               	movlw	144
  9763  004510  6EAB               	movwf	4011,c	;volatile
  9764                           
  9765                           ;eusart1.c: 88: TXSTA1 = 0x24;
  9766  004512  0E24               	movlw	36
  9767  004514  6EAC               	movwf	4012,c	;volatile
  9768                           
  9769                           ;eusart1.c: 91: SPBRG1 = 0x10;
  9770  004516  0E10               	movlw	16
  9771  004518  6EAF               	movwf	4015,c	;volatile
  9772                           
  9773                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  9774  00451A  0E00               	movlw	0
  9775  00451C  6EB0               	movwf	4016,c	;volatile
  9776                           
  9777                           ;eusart1.c: 98: eusart1TxHead = 0;
  9778  00451E  0E00               	movlw	0
  9779  004520  6E44               	movwf	_eusart1TxHead,c	;volatile
  9780                           
  9781                           ;eusart1.c: 99: eusart1TxTail = 0;
  9782  004522  0E00               	movlw	0
  9783  004524  6E43               	movwf	_eusart1TxTail,c	;volatile
  9784                           
  9785                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9786  004526  0E46               	movlw	70
  9787  004528  0101               	movlb	1	; () banked
  9788  00452A  6FEA               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9789                           
  9790                           ;eusart1.c: 102: eusart1RxHead = 0;
  9791  00452C  0E00               	movlw	0
  9792  00452E  6E42               	movwf	_eusart1RxHead,c	;volatile
  9793                           
  9794                           ;eusart1.c: 103: eusart1RxTail = 0;
  9795  004530  0E00               	movlw	0
  9796  004532  6E41               	movwf	_eusart1RxTail,c	;volatile
  9797                           
  9798                           ;eusart1.c: 104: eusart1RxCount = 0;
  9799  004534  0E00               	movlw	0
  9800  004536  6FD5               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9801                           
  9802                           ; BSR set to: 1
  9803                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9804  004538  8A9D               	bsf	3997,5,c	;volatile
  9805                           
  9806                           ; BSR set to: 1
  9807  00453A  0012               	return		;funcret
  9808  00453C                     __end_of_EUSART1_Initialize:
  9809                           	opt stack 0
  9810                           tosu	equ	0xFFF
  9811                           tosh	equ	0xFFE
  9812                           tosl	equ	0xFFD
  9813                           pclath	equ	0xFFA
  9814                           tblptru	equ	0xFF8
  9815                           tblptrh	equ	0xFF7
  9816                           tblptrl	equ	0xFF6
  9817                           tablat	equ	0xFF5
  9818                           prodh	equ	0xFF4
  9819                           prodl	equ	0xFF3
  9820                           intcon	equ	0xFF2
  9821                           intcon2	equ	0xFF1
  9822                           postinc0	equ	0xFEE
  9823                           wreg	equ	0xFE8
  9824                           indf1	equ	0xFE7
  9825                           postdec1	equ	0xFE5
  9826                           fsr1h	equ	0xFE2
  9827                           fsr1l	equ	0xFE1
  9828                           indf2	equ	0xFDF
  9829                           postinc2	equ	0xFDE
  9830                           postdec2	equ	0xFDD
  9831                           fsr2h	equ	0xFDA
  9832                           fsr2l	equ	0xFD9
  9833                           status	equ	0xFD8
  9834                           
  9835 ;; *************** function _ADC_Initialize *****************
  9836 ;; Defined at:
  9837 ;;		line 58 in file "mcc_generated_files/adc.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;		None
  9840 ;; Auto vars:     Size  Location     Type
  9841 ;;		None
  9842 ;; Return value:  Size  Location     Type
  9843 ;;                  1    wreg      void 
  9844 ;; Registers used:
  9845 ;;		wreg, status,2
  9846 ;; Tracked objects:
  9847 ;;		On entry : 0/0
  9848 ;;		On exit  : 0/0
  9849 ;;		Unchanged: 0/0
  9850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9851 ;;      Params:         0       0       0       0       0       0       0
  9852 ;;      Locals:         0       0       0       0       0       0       0
  9853 ;;      Temps:          0       0       0       0       0       0       0
  9854 ;;      Totals:         0       0       0       0       0       0       0
  9855 ;;Total ram usage:        0 bytes
  9856 ;; Hardware stack levels used:    1
  9857 ;; Hardware stack levels required when called:    3
  9858 ;; This function calls:
  9859 ;;		Nothing
  9860 ;; This function is called by:
  9861 ;;		_SYSTEM_Initialize
  9862 ;; This function uses a non-reentrant model
  9863 ;;
  9864                           
  9865                           	psect	text35
  9866  004798                     __ptext35:
  9867                           	opt stack 0
  9868  004798                     _ADC_Initialize:
  9869                           	opt stack 25
  9870                           
  9871                           ;adc.c: 63: ADCON0 = 0x05;
  9872                           
  9873                           ; BSR set to: 1
  9874                           ;incstack = 0
  9875  004798  0E05               	movlw	5
  9876  00479A  6EC2               	movwf	4034,c	;volatile
  9877                           
  9878                           ;adc.c: 66: ADCON1 = 0x00;
  9879  00479C  0E00               	movlw	0
  9880  00479E  6EC1               	movwf	4033,c	;volatile
  9881                           
  9882                           ;adc.c: 69: ADCON2 = 0x87;
  9883  0047A0  0E87               	movlw	135
  9884  0047A2  6EC0               	movwf	4032,c	;volatile
  9885                           
  9886                           ;adc.c: 72: ADRESL = 0x00;
  9887  0047A4  0E00               	movlw	0
  9888  0047A6  6EC3               	movwf	4035,c	;volatile
  9889                           
  9890                           ;adc.c: 75: ADRESH = 0x00;
  9891  0047A8  0E00               	movlw	0
  9892  0047AA  6EC4               	movwf	4036,c	;volatile
  9893  0047AC  0012               	return		;funcret
  9894  0047AE                     __end_of_ADC_Initialize:
  9895                           	opt stack 0
  9896                           tosu	equ	0xFFF
  9897                           tosh	equ	0xFFE
  9898                           tosl	equ	0xFFD
  9899                           pclath	equ	0xFFA
  9900                           tblptru	equ	0xFF8
  9901                           tblptrh	equ	0xFF7
  9902                           tblptrl	equ	0xFF6
  9903                           tablat	equ	0xFF5
  9904                           prodh	equ	0xFF4
  9905                           prodl	equ	0xFF3
  9906                           intcon	equ	0xFF2
  9907                           intcon2	equ	0xFF1
  9908                           postinc0	equ	0xFEE
  9909                           wreg	equ	0xFE8
  9910                           indf1	equ	0xFE7
  9911                           postdec1	equ	0xFE5
  9912                           fsr1h	equ	0xFE2
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           postdec2	equ	0xFDD
  9917                           fsr2h	equ	0xFDA
  9918                           fsr2l	equ	0xFD9
  9919                           status	equ	0xFD8
  9920                           
  9921 ;; *************** function _SetMcuRunTime *****************
  9922 ;; Defined at:
  9923 ;;		line 47 in file "SystemStatus.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;		None
  9926 ;; Auto vars:     Size  Location     Type
  9927 ;;		None
  9928 ;; Return value:  Size  Location     Type
  9929 ;;                  1    wreg      void 
  9930 ;; Registers used:
  9931 ;;		wreg, status,2, status,0, cstack
  9932 ;; Tracked objects:
  9933 ;;		On entry : 0/0
  9934 ;;		On exit  : 0/0
  9935 ;;		Unchanged: 0/0
  9936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9937 ;;      Params:         0       0       0       0       0       0       0
  9938 ;;      Locals:         0       0       0       0       0       0       0
  9939 ;;      Temps:          0       0       0       0       0       0       0
  9940 ;;      Totals:         0       0       0       0       0       0       0
  9941 ;;Total ram usage:        0 bytes
  9942 ;; Hardware stack levels used:    1
  9943 ;; Hardware stack levels required when called:    4
  9944 ;; This function calls:
  9945 ;;		___llmod
  9946 ;; This function is called by:
  9947 ;;		_main
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           	psect	text36
  9952  004258                     __ptext36:
  9953                           	opt stack 0
  9954  004258                     _SetMcuRunTime:
  9955                           	opt stack 26
  9956                           
  9957                           ;SystemStatus.c: 49: mcuRunTimeIn5SecTicks++;
  9958                           
  9959                           ;incstack = 0
  9960  004258  0E01               	movlw	1
  9961  00425A  0101               	movlb	1	; () banked
  9962  00425C  27BC               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9963  00425E  0E00               	movlw	0
  9964  004260  23BD               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9965  004262  23BE               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9966  004264  23BF               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9967                           
  9968                           ; BSR set to: 1
  9969                           ;SystemStatus.c: 50: mcuRunTimeIn5SecTicks %= (17280);
  9970  004266  C1BC  F0B3         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9971  00426A  C1BD  F0B4         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9972  00426E  C1BE  F0B5         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9973  004272  C1BF  F0B6         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9974  004276  0E80               	movlw	128
  9975  004278  0100               	movlb	0	; () banked
  9976  00427A  6FB7               	movwf	___llmod@divisor& (0+255),b
  9977  00427C  0E43               	movlw	67
  9978  00427E  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
  9979  004280  0E00               	movlw	0
  9980  004282  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  9981  004284  0E00               	movlw	0
  9982  004286  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  9983  004288  EC53  F01E         	call	___llmod	;wreg free
  9984  00428C  C0B3  F1BC         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9985  004290  C0B4  F1BD         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9986  004294  C0B5  F1BE         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9987  004298  C0B6  F1BF         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9988  00429C  0012               	return		;funcret
  9989  00429E                     __end_of_SetMcuRunTime:
  9990                           	opt stack 0
  9991                           tosu	equ	0xFFF
  9992                           tosh	equ	0xFFE
  9993                           tosl	equ	0xFFD
  9994                           pclath	equ	0xFFA
  9995                           tblptru	equ	0xFF8
  9996                           tblptrh	equ	0xFF7
  9997                           tblptrl	equ	0xFF6
  9998                           tablat	equ	0xFF5
  9999                           prodh	equ	0xFF4
 10000                           prodl	equ	0xFF3
 10001                           intcon	equ	0xFF2
 10002                           intcon2	equ	0xFF1
 10003                           postinc0	equ	0xFEE
 10004                           wreg	equ	0xFE8
 10005                           indf1	equ	0xFE7
 10006                           postdec1	equ	0xFE5
 10007                           fsr1h	equ	0xFE2
 10008                           fsr1l	equ	0xFE1
 10009                           indf2	equ	0xFDF
 10010                           postinc2	equ	0xFDE
 10011                           postdec2	equ	0xFDD
 10012                           fsr2h	equ	0xFDA
 10013                           fsr2l	equ	0xFD9
 10014                           status	equ	0xFD8
 10015                           
 10016 ;; *************** function _SendUartSystemInitMessage *****************
 10017 ;; Defined at:
 10018 ;;		line 68 in file "SystemStatus.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;		None
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  dest           50    0[BANK1 ] unsigned char [50]
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      void 
 10025 ;; Registers used:
 10026 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10032 ;;      Params:         0       0       0       0       0       0       0
 10033 ;;      Locals:         0       0      50       0       0       0       0
 10034 ;;      Temps:          0       0       0       0       0       0       0
 10035 ;;      Totals:         0       0      50       0       0       0       0
 10036 ;;Total ram usage:       50 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; Hardware stack levels required when called:    7
 10039 ;; This function calls:
 10040 ;;		_UART_Write_Text
 10041 ;;		_sprintf
 10042 ;; This function is called by:
 10043 ;;		_main
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           	psect	text37
 10048  002E42                     __ptext37:
 10049                           	opt stack 0
 10050  002E42                     _SendUartSystemInitMessage:
 10051                           	opt stack 23
 10052                           
 10053                           ;SystemStatus.c: 70: char dest[50];
 10054                           ;SystemStatus.c: 72: sprintf(dest, "*************************** \n\r");
 10055                           
 10056                           ;incstack = 0
 10057  002E42  0E00               	movlw	low SendUartSystemInitMessage@dest
 10058  002E44  0100               	movlb	0	; () banked
 10059  002E46  6FBC               	movwf	sprintf@sp& (0+255),b
 10060  002E48  0E01               	movlw	high SendUartSystemInitMessage@dest
 10061  002E4A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10062  002E4C  0E12               	movlw	low STR_18
 10063  002E4E  6FBE               	movwf	sprintf@f& (0+255),b
 10064  002E50  0E7E               	movlw	high STR_18
 10065  002E52  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10066  002E54  EC70  F000         	call	_sprintf	;wreg free
 10067                           
 10068                           ;SystemStatus.c: 73: UART_Write_Text(dest);
 10069  002E58  0E00               	movlw	low SendUartSystemInitMessage@dest
 10070  002E5A  6E19               	movwf	UART_Write_Text@text,c
 10071  002E5C  0E01               	movlw	high SendUartSystemInitMessage@dest
 10072  002E5E  6E1A               	movwf	UART_Write_Text@text+1,c
 10073  002E60  ECAE  F01D         	call	_UART_Write_Text	;wreg free
 10074                           
 10075                           ;SystemStatus.c: 75: sprintf(dest, "FAST LINK SYSTEM \n\r");
 10076  002E64  0E00               	movlw	low SendUartSystemInitMessage@dest
 10077  002E66  0100               	movlb	0	; () banked
 10078  002E68  6FBC               	movwf	sprintf@sp& (0+255),b
 10079  002E6A  0E01               	movlw	high SendUartSystemInitMessage@dest
 10080  002E6C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10081  002E6E  0E26               	movlw	low STR_19
 10082  002E70  6FBE               	movwf	sprintf@f& (0+255),b
 10083  002E72  0E7F               	movlw	high STR_19
 10084  002E74  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10085  002E76  EC70  F000         	call	_sprintf	;wreg free
 10086                           
 10087                           ;SystemStatus.c: 76: UART_Write_Text(dest);
 10088  002E7A  0E00               	movlw	low SendUartSystemInitMessage@dest
 10089  002E7C  6E19               	movwf	UART_Write_Text@text,c
 10090  002E7E  0E01               	movlw	high SendUartSystemInitMessage@dest
 10091  002E80  6E1A               	movwf	UART_Write_Text@text+1,c
 10092  002E82  ECAE  F01D         	call	_UART_Write_Text	;wreg free
 10093                           
 10094                           ;SystemStatus.c: 78: sprintf(dest, "SW VESRION: %s \n\r", "1_002");
 10095  002E86  0E00               	movlw	low SendUartSystemInitMessage@dest
 10096  002E88  0100               	movlb	0	; () banked
 10097  002E8A  6FBC               	movwf	sprintf@sp& (0+255),b
 10098  002E8C  0E01               	movlw	high SendUartSystemInitMessage@dest
 10099  002E8E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10100  002E90  0E62               	movlw	low STR_20
 10101  002E92  6FBE               	movwf	sprintf@f& (0+255),b
 10102  002E94  0E7F               	movlw	high STR_20
 10103  002E96  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10104  002E98  0EF3               	movlw	low STR_21
 10105  002E9A  6FC0               	movwf	(?_sprintf+4)& (0+255),b
 10106  002E9C  0E7F               	movlw	high STR_21
 10107  002E9E  6FC1               	movwf	(?_sprintf+5)& (0+255),b
 10108  002EA0  EC70  F000         	call	_sprintf	;wreg free
 10109                           
 10110                           ;SystemStatus.c: 79: UART_Write_Text(dest);
 10111  002EA4  0E00               	movlw	low SendUartSystemInitMessage@dest
 10112  002EA6  6E19               	movwf	UART_Write_Text@text,c
 10113  002EA8  0E01               	movlw	high SendUartSystemInitMessage@dest
 10114  002EAA  6E1A               	movwf	UART_Write_Text@text+1,c
 10115  002EAC  ECAE  F01D         	call	_UART_Write_Text	;wreg free
 10116                           
 10117                           ;SystemStatus.c: 81: sprintf(dest, "Compile date: %s \n\r", "Mar 29 2018");
 10118  002EB0  0E00               	movlw	low SendUartSystemInitMessage@dest
 10119  002EB2  0100               	movlb	0	; () banked
 10120  002EB4  6FBC               	movwf	sprintf@sp& (0+255),b
 10121  002EB6  0E01               	movlw	high SendUartSystemInitMessage@dest
 10122  002EB8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10123  002EBA  0E4E               	movlw	low STR_22
 10124  002EBC  6FBE               	movwf	sprintf@f& (0+255),b
 10125  002EBE  0E7F               	movlw	high STR_22
 10126  002EC0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10127  002EC2  0EAF               	movlw	low STR_23
 10128  002EC4  6FC0               	movwf	(?_sprintf+4)& (0+255),b
 10129  002EC6  0E7F               	movlw	high STR_23
 10130  002EC8  6FC1               	movwf	(?_sprintf+5)& (0+255),b
 10131  002ECA  EC70  F000         	call	_sprintf	;wreg free
 10132                           
 10133                           ;SystemStatus.c: 82: UART_Write_Text(dest);
 10134  002ECE  0E00               	movlw	low SendUartSystemInitMessage@dest
 10135  002ED0  6E19               	movwf	UART_Write_Text@text,c
 10136  002ED2  0E01               	movlw	high SendUartSystemInitMessage@dest
 10137  002ED4  6E1A               	movwf	UART_Write_Text@text+1,c
 10138  002ED6  ECAE  F01D         	call	_UART_Write_Text	;wreg free
 10139                           
 10140                           ;SystemStatus.c: 84: sprintf(dest, "Compile time: %s \n\r", "13:38:04");
 10141  002EDA  0E00               	movlw	low SendUartSystemInitMessage@dest
 10142  002EDC  0100               	movlb	0	; () banked
 10143  002EDE  6FBC               	movwf	sprintf@sp& (0+255),b
 10144  002EE0  0E01               	movlw	high SendUartSystemInitMessage@dest
 10145  002EE2  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10146  002EE4  0E3A               	movlw	low STR_24
 10147  002EE6  6FBE               	movwf	sprintf@f& (0+255),b
 10148  002EE8  0E7F               	movlw	high STR_24
 10149  002EEA  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10150  002EEC  0EDA               	movlw	low STR_25
 10151  002EEE  6FC0               	movwf	(?_sprintf+4)& (0+255),b
 10152  002EF0  0E7F               	movlw	high STR_25
 10153  002EF2  6FC1               	movwf	(?_sprintf+5)& (0+255),b
 10154  002EF4  EC70  F000         	call	_sprintf	;wreg free
 10155                           
 10156                           ;SystemStatus.c: 85: UART_Write_Text(dest);
 10157  002EF8  0E00               	movlw	low SendUartSystemInitMessage@dest
 10158  002EFA  6E19               	movwf	UART_Write_Text@text,c
 10159  002EFC  0E01               	movlw	high SendUartSystemInitMessage@dest
 10160  002EFE  6E1A               	movwf	UART_Write_Text@text+1,c
 10161  002F00  ECAE  F01D         	call	_UART_Write_Text	;wreg free
 10162                           
 10163                           ;SystemStatus.c: 87: sprintf(dest, "*************************** \n\r");
 10164  002F04  0E00               	movlw	low SendUartSystemInitMessage@dest
 10165  002F06  0100               	movlb	0	; () banked
 10166  002F08  6FBC               	movwf	sprintf@sp& (0+255),b
 10167  002F0A  0E01               	movlw	high SendUartSystemInitMessage@dest
 10168  002F0C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10169  002F0E  0E12               	movlw	low STR_18
 10170  002F10  6FBE               	movwf	sprintf@f& (0+255),b
 10171  002F12  0E7E               	movlw	high STR_18
 10172  002F14  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10173  002F16  EC70  F000         	call	_sprintf	;wreg free
 10174                           
 10175                           ;SystemStatus.c: 88: UART_Write_Text(dest);
 10176  002F1A  0E00               	movlw	low SendUartSystemInitMessage@dest
 10177  002F1C  6E19               	movwf	UART_Write_Text@text,c
 10178  002F1E  0E01               	movlw	high SendUartSystemInitMessage@dest
 10179  002F20  6E1A               	movwf	UART_Write_Text@text+1,c
 10180  002F22  ECAE  F01D         	call	_UART_Write_Text	;wreg free
 10181  002F26  0012               	return		;funcret
 10182  002F28                     __end_of_SendUartSystemInitMessage:
 10183                           	opt stack 0
 10184                           tosu	equ	0xFFF
 10185                           tosh	equ	0xFFE
 10186                           tosl	equ	0xFFD
 10187                           pclath	equ	0xFFA
 10188                           tblptru	equ	0xFF8
 10189                           tblptrh	equ	0xFF7
 10190                           tblptrl	equ	0xFF6
 10191                           tablat	equ	0xFF5
 10192                           prodh	equ	0xFF4
 10193                           prodl	equ	0xFF3
 10194                           intcon	equ	0xFF2
 10195                           intcon2	equ	0xFF1
 10196                           postinc0	equ	0xFEE
 10197                           wreg	equ	0xFE8
 10198                           indf1	equ	0xFE7
 10199                           postdec1	equ	0xFE5
 10200                           fsr1h	equ	0xFE2
 10201                           fsr1l	equ	0xFE1
 10202                           indf2	equ	0xFDF
 10203                           postinc2	equ	0xFDE
 10204                           postdec2	equ	0xFDD
 10205                           fsr2h	equ	0xFDA
 10206                           fsr2l	equ	0xFD9
 10207                           status	equ	0xFD8
 10208                           
 10209 ;; *************** function _SampleSingleChannel *****************
 10210 ;; Defined at:
 10211 ;;		line 98 in file "AdcApp.c"
 10212 ;; Parameters:    Size  Location     Type
 10213 ;;		None
 10214 ;; Auto vars:     Size  Location     Type
 10215 ;;  _adcResult      2   53[BANK1 ] unsigned int 
 10216 ;;  dest           50    0[BANK1 ] unsigned char [50]
 10217 ;;  adcRes          2   55[BANK1 ] unsigned int 
 10218 ;; Return value:  Size  Location     Type
 10219 ;;                  1    wreg      unsigned char 
 10220 ;; Registers used:
 10221 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10222 ;; Tracked objects:
 10223 ;;		On entry : 0/0
 10224 ;;		On exit  : 0/0
 10225 ;;		Unchanged: 0/0
 10226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10227 ;;      Params:         0       0       0       0       0       0       0
 10228 ;;      Locals:         0       0      57       0       0       0       0
 10229 ;;      Temps:          0       2       0       0       0       0       0
 10230 ;;      Totals:         0       2      57       0       0       0       0
 10231 ;;Total ram usage:       59 bytes
 10232 ;; Hardware stack levels used:    1
 10233 ;; Hardware stack levels required when called:    8
 10234 ;; This function calls:
 10235 ;;		_ADC_GetConversion
 10236 ;;		_UART_Write_Text
 10237 ;;		___ftdiv
 10238 ;;		___ftmul
 10239 ;;		___fttol
 10240 ;;		___lwtoft
 10241 ;;		_pow
 10242 ;;		_sprintf
 10243 ;; This function is called by:
 10244 ;;		_main
 10245 ;; This function uses a non-reentrant model
 10246 ;;
 10247                           
 10248                           	psect	text38
 10249  001A98                     __ptext38:
 10250                           	opt stack 0
 10251  001A98                     _SampleSingleChannel:
 10252                           	opt stack 22
 10253                           
 10254                           ;AdcApp.c: 100: char dest[50];
 10255                           ;AdcApp.c: 101: uint16_t adcRes = 0x0;
 10256                           
 10257                           ;incstack = 0
 10258  001A98  0E00               	movlw	0
 10259  001A9A  0101               	movlb	1	; () banked
 10260  001A9C  6F38               	movwf	(SampleSingleChannel@adcRes+1)& (0+255),b
 10261  001A9E  0E00               	movlw	0
 10262  001AA0  6F37               	movwf	SampleSingleChannel@adcRes& (0+255),b
 10263                           
 10264                           ; BSR set to: 1
 10265                           ;AdcApp.c: 102: if(numSamples > 0)
 10266  001AA2  51C6               	movf	_numSamples& (0+255),w,b
 10267  001AA4  11C7               	iorwf	(_numSamples+1)& (0+255),w,b
 10268  001AA6  B4D8               	btfsc	status,2,c
 10269  001AA8  D0B5               	goto	l175
 10270                           
 10271                           ; BSR set to: 1
 10272                           ;AdcApp.c: 103: {
 10273                           ;AdcApp.c: 104: adc_result_t _adcResult = ADC_GetConversion(channelArr[channelNum]);
 10274  001AAA  0E33               	movlw	low _channelArr
 10275  001AAC  243B               	addwf	_channelNum,w,c
 10276  001AAE  6EF6               	movwf	tblptrl,c
 10277  001AB0  0E78               	movlw	high _channelArr
 10278  001AB2  203C               	addwfc	_channelNum+1,w,c
 10279  001AB4  6EF7               	movwf	tblptrh,c
 10280  001AB6                     	if	0	;There are less than 3 active tblptr bytes
 10281  001AB6                     	endif
 10282  001AB6  0008               	tblrd		*
 10283  001AB8  50F5               	movf	tablat,w,c
 10284  001ABA  ECEC  F022         	call	_ADC_GetConversion
 10285  001ABE  C018  F135         	movff	?_ADC_GetConversion,SampleSingleChannel@_adcResult
 10286  001AC2  C019  F136         	movff	?_ADC_GetConversion+1,SampleSingleChannel@_adcResult+1
 10287                           
 10288                           ;AdcApp.c: 105: adcRes = (_adcResult/pow(2,(10)))*(3340);
 10289  001AC6  0E00               	movlw	0
 10290  001AC8  0100               	movlb	0	; () banked
 10291  001ACA  6FA5               	movwf	pow@y& (0+255),b
 10292  001ACC  0E20               	movlw	32
 10293  001ACE  6FA6               	movwf	(pow@y+1)& (0+255),b
 10294  001AD0  0E41               	movlw	65
 10295  001AD2  6FA7               	movwf	(pow@y+2)& (0+255),b
 10296  001AD4  0E00               	movlw	0
 10297  001AD6  6FA2               	movwf	pow@x& (0+255),b
 10298  001AD8  0E00               	movlw	0
 10299  001ADA  6FA3               	movwf	(pow@x+1)& (0+255),b
 10300  001ADC  0E40               	movlw	64
 10301  001ADE  6FA4               	movwf	(pow@x+2)& (0+255),b
 10302  001AE0  ECD8  F00E         	call	_pow	;wreg free
 10303  001AE4  C0A2  F132         	movff	?_pow,_SampleSingleChannel$3962
 10304  001AE8  C0A3  F133         	movff	?_pow+1,_SampleSingleChannel$3962+1
 10305  001AEC  C0A4  F134         	movff	?_pow+2,_SampleSingleChannel$3962+2
 10306                           
 10307                           ;AdcApp.c: 105: adcRes = (_adcResult/pow(2,(10)))*(3340);
 10308  001AF0  0EC0               	movlw	192
 10309  001AF2  0100               	movlb	0	; () banked
 10310  001AF4  6F69               	movwf	___ftmul@f2& (0+255),b
 10311  001AF6  0E50               	movlw	80
 10312  001AF8  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 10313  001AFA  0E45               	movlw	69
 10314  001AFC  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 10315  001AFE  C132  F026         	movff	_SampleSingleChannel$3962,___ftdiv@f2
 10316  001B02  C133  F027         	movff	_SampleSingleChannel$3962+1,___ftdiv@f2+1
 10317  001B06  C134  F028         	movff	_SampleSingleChannel$3962+2,___ftdiv@f2+2
 10318  001B0A  C135  F020         	movff	SampleSingleChannel@_adcResult,___lwtoft@c
 10319  001B0E  C136  F021         	movff	SampleSingleChannel@_adcResult+1,___lwtoft@c+1
 10320  001B12  EC54  F023         	call	___lwtoft	;wreg free
 10321  001B16  C020  F023         	movff	?___lwtoft,___ftdiv@f1
 10322  001B1A  C021  F024         	movff	?___lwtoft+1,___ftdiv@f1+1
 10323  001B1E  C022  F025         	movff	?___lwtoft+2,___ftdiv@f1+2
 10324  001B22  ECAD  F016         	call	___ftdiv	;wreg free
 10325  001B26  C023  F066         	movff	?___ftdiv,___ftmul@f1
 10326  001B2A  C024  F067         	movff	?___ftdiv+1,___ftmul@f1+1
 10327  001B2E  C025  F068         	movff	?___ftdiv+2,___ftmul@f1+2
 10328  001B32  EC32  F016         	call	___ftmul	;wreg free
 10329  001B36  C066  F079         	movff	?___ftmul,___fttol@f1
 10330  001B3A  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
 10331  001B3E  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
 10332  001B42  ECB6  F015         	call	___fttol	;wreg free
 10333  001B46  C079  F137         	movff	?___fttol,SampleSingleChannel@adcRes
 10334  001B4A  C07A  F138         	movff	?___fttol+1,SampleSingleChannel@adcRes+1
 10335                           
 10336                           ;AdcApp.c: 106: if(channelArr[channelNum] == 0x6) lastAdcTemp = adcRes;
 10337  001B4E  0E33               	movlw	low _channelArr
 10338  001B50  243B               	addwf	_channelNum,w,c
 10339  001B52  6EF6               	movwf	tblptrl,c
 10340  001B54  0E78               	movlw	high _channelArr
 10341  001B56  203C               	addwfc	_channelNum+1,w,c
 10342  001B58  6EF7               	movwf	tblptrh,c
 10343  001B5A                     	if	0	;There are less than 3 active tblptr bytes
 10344  001B5A                     	endif
 10345  001B5A  0008               	tblrd		*
 10346  001B5C  50F5               	movf	tablat,w,c
 10347  001B5E  0A06               	xorlw	6
 10348  001B60  A4D8               	btfss	status,2,c
 10349  001B62  D004               	goto	l176
 10350  001B64  C137  F03F         	movff	SampleSingleChannel@adcRes,_lastAdcTemp	;volatile
 10351  001B68  C138  F040         	movff	SampleSingleChannel@adcRes+1,_lastAdcTemp+1	;volatile
 10352  001B6C                     l176:
 10353                           
 10354                           ;AdcApp.c: 107: if(channelArr[channelNum] == 0x5) lastAdcFfwrRSSI = adcRes;
 10355  001B6C  0E33               	movlw	low _channelArr
 10356  001B6E  243B               	addwf	_channelNum,w,c
 10357  001B70  6EF6               	movwf	tblptrl,c
 10358  001B72  0E78               	movlw	high _channelArr
 10359  001B74  203C               	addwfc	_channelNum+1,w,c
 10360  001B76  6EF7               	movwf	tblptrh,c
 10361  001B78                     	if	0	;There are less than 3 active tblptr bytes
 10362  001B78                     	endif
 10363  001B78  0008               	tblrd		*
 10364  001B7A  50F5               	movf	tablat,w,c
 10365  001B7C  0A05               	xorlw	5
 10366  001B7E  A4D8               	btfss	status,2,c
 10367  001B80  D004               	goto	l177
 10368  001B82  C137  F03D         	movff	SampleSingleChannel@adcRes,_lastAdcFfwrRSSI	;volatile
 10369  001B86  C138  F03E         	movff	SampleSingleChannel@adcRes+1,_lastAdcFfwrRSSI+1	;volatile
 10370  001B8A                     l177:
 10371                           
 10372                           ;AdcApp.c: 108: if(channelArr[channelNum] == 0x4) lastAdcRREV = adcRes;
 10373  001B8A  0E33               	movlw	low _channelArr
 10374  001B8C  243B               	addwf	_channelNum,w,c
 10375  001B8E  6EF6               	movwf	tblptrl,c
 10376  001B90  0E78               	movlw	high _channelArr
 10377  001B92  203C               	addwfc	_channelNum+1,w,c
 10378  001B94  6EF7               	movwf	tblptrh,c
 10379  001B96                     	if	0	;There are less than 3 active tblptr bytes
 10380  001B96                     	endif
 10381  001B96  0008               	tblrd		*
 10382  001B98  50F5               	movf	tablat,w,c
 10383  001B9A  0A04               	xorlw	4
 10384  001B9C  A4D8               	btfss	status,2,c
 10385  001B9E  D004               	goto	l178
 10386  001BA0  C137  F1CC         	movff	SampleSingleChannel@adcRes,_lastAdcRREV	;volatile
 10387  001BA4  C138  F1CD         	movff	SampleSingleChannel@adcRes+1,_lastAdcRREV+1	;volatile
 10388  001BA8                     l178:
 10389                           
 10390                           ;AdcApp.c: 109: if(channelArr[channelNum] == 0x7) lastAdcVgMon = adcRes;
 10391  001BA8  0E33               	movlw	low _channelArr
 10392  001BAA  243B               	addwf	_channelNum,w,c
 10393  001BAC  6EF6               	movwf	tblptrl,c
 10394  001BAE  0E78               	movlw	high _channelArr
 10395  001BB0  203C               	addwfc	_channelNum+1,w,c
 10396  001BB2  6EF7               	movwf	tblptrh,c
 10397  001BB4                     	if	0	;There are less than 3 active tblptr bytes
 10398  001BB4                     	endif
 10399  001BB4  0008               	tblrd		*
 10400  001BB6  50F5               	movf	tablat,w,c
 10401  001BB8  0A07               	xorlw	7
 10402  001BBA  A4D8               	btfss	status,2,c
 10403  001BBC  D004               	goto	l179
 10404  001BBE  C137  F1CA         	movff	SampleSingleChannel@adcRes,_lastAdcVgMon	;volatile
 10405  001BC2  C138  F1CB         	movff	SampleSingleChannel@adcRes+1,_lastAdcVgMon+1	;volatile
 10406  001BC6                     l179:
 10407                           
 10408                           ;AdcApp.c: 110: sprintf(dest, "%d \t", adcRes);
 10409  001BC6  0E00               	movlw	low SampleSingleChannel@dest
 10410  001BC8  0100               	movlb	0	; () banked
 10411  001BCA  6FBC               	movwf	sprintf@sp& (0+255),b
 10412  001BCC  0E01               	movlw	high SampleSingleChannel@dest
 10413  001BCE  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10414  001BD0  0EF9               	movlw	low STR_8
 10415  001BD2  6FBE               	movwf	sprintf@f& (0+255),b
 10416  001BD4  0E7F               	movlw	high STR_8
 10417  001BD6  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10418  001BD8  C137  F0C0         	movff	SampleSingleChannel@adcRes,?_sprintf+4
 10419  001BDC  C138  F0C1         	movff	SampleSingleChannel@adcRes+1,?_sprintf+5
 10420  001BE0  EC70  F000         	call	_sprintf	;wreg free
 10421                           
 10422                           ;AdcApp.c: 111: UART_Write_Text(dest);
 10423  001BE4  0E00               	movlw	low SampleSingleChannel@dest
 10424  001BE6  6E19               	movwf	UART_Write_Text@text,c
 10425  001BE8  0E01               	movlw	high SampleSingleChannel@dest
 10426  001BEA  6E1A               	movwf	UART_Write_Text@text+1,c
 10427  001BEC  ECAE  F01D         	call	_UART_Write_Text	;wreg free
 10428                           
 10429                           ;AdcApp.c: 112: _delay((unsigned long)((100)*(8000000/4000.0)));
 10430  001BF0  0E02               	movlw	2
 10431  001BF2  0100               	movlb	0	; () banked
 10432  001BF4  6FE4               	movwf	(??_SampleSingleChannel+1)& (0+255),b
 10433  001BF6  0E04               	movlw	4
 10434  001BF8  6FE3               	movwf	??_SampleSingleChannel& (0+255),b
 10435  001BFA  0EBA               	movlw	186
 10436  001BFC                     u10087:
 10437  001BFC  2EE8               	decfsz	wreg,f,c
 10438  001BFE  D7FE               	bra	u10087
 10439  001C00  2FE3               	decfsz	??_SampleSingleChannel& (0+255),f,b
 10440  001C02  D7FC               	bra	u10087
 10441  001C04  2FE4               	decfsz	(??_SampleSingleChannel+1)& (0+255),f,b
 10442  001C06  D7FA               	bra	u10087
 10443  001C08  F000               	nop	
 10444                           
 10445                           ;AdcApp.c: 113: numSamples--;
 10446  001C0A  0101               	movlb	1	; () banked
 10447  001C0C  07C6               	decf	_numSamples& (0+255),f,b
 10448  001C0E  A0D8               	btfss	status,0,c
 10449  001C10  07C7               	decf	(_numSamples+1)& (0+255),f,b
 10450                           
 10451                           ;AdcApp.c: 114: }
 10452  001C12  0012               	return	
 10453  001C14                     l175:
 10454                           
 10455                           ; BSR set to: 1
 10456                           ;AdcApp.c: 115: else
 10457                           ;AdcApp.c: 116: {
 10458                           ;AdcApp.c: 117: needToSample = 0;
 10459                           
 10460                           ; BSR set to: 1
 10461  001C14  0E00               	movlw	0
 10462  001C16  6FD7               	movwf	_needToSample& (0+255),b	;volatile
 10463                           
 10464                           ; BSR set to: 1
 10465                           ;AdcApp.c: 118: UART_Write_Text("\n\r OK \n\r");
 10466  001C18  0EE3               	movlw	low STR_9
 10467  001C1A  6E19               	movwf	UART_Write_Text@text,c
 10468  001C1C  0E7F               	movlw	high STR_9
 10469  001C1E  6E1A               	movwf	UART_Write_Text@text+1,c
 10470  001C20  ECAE  F01D         	call	_UART_Write_Text	;wreg free
 10471  001C24  0012               	return	
 10472  001C26                     __end_of_SampleSingleChannel:
 10473                           	opt stack 0
 10474                           tosu	equ	0xFFF
 10475                           tosh	equ	0xFFE
 10476                           tosl	equ	0xFFD
 10477                           pclath	equ	0xFFA
 10478                           tblptru	equ	0xFF8
 10479                           tblptrh	equ	0xFF7
 10480                           tblptrl	equ	0xFF6
 10481                           tablat	equ	0xFF5
 10482                           prodh	equ	0xFF4
 10483                           prodl	equ	0xFF3
 10484                           intcon	equ	0xFF2
 10485                           intcon2	equ	0xFF1
 10486                           postinc0	equ	0xFEE
 10487                           wreg	equ	0xFE8
 10488                           indf1	equ	0xFE7
 10489                           postdec1	equ	0xFE5
 10490                           fsr1h	equ	0xFE2
 10491                           fsr1l	equ	0xFE1
 10492                           indf2	equ	0xFDF
 10493                           postinc2	equ	0xFDE
 10494                           postdec2	equ	0xFDD
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8
 10498                           
 10499 ;; *************** function _sprintf *****************
 10500 ;; Defined at:
 10501 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;  sp              2   92[BANK0 ] PTR unsigned char 
 10504 ;;		 -> PrintTxStatus@dest(80), PrintRxStatus@dest(80), PrintSystemStatus@dest(80), PrintHelpScreen@dest(50), 
 10505 ;;		 -> SendUartSystemInitMessage@dest(50), readUartByte@dest(50), SampleSingleChannel@dest(50), 
 10506 ;;  f               2   94[BANK0 ] PTR const unsigned char 
 10507 ;;		 -> STR_72(22), STR_71(13), STR_70(23), STR_69(10), 
 10508 ;;		 -> STR_68(24), STR_67(36), STR_66(24), STR_65(36), 
 10509 ;;		 -> STR_64(22), STR_63(22), STR_62(13), STR_61(23), 
 10510 ;;		 -> STR_60(10), STR_59(24), STR_58(36), STR_57(24), 
 10511 ;;		 -> STR_56(59), STR_55(22), STR_54(18), STR_53(15), 
 10512 ;;		 -> STR_52(22), STR_51(13), STR_49(49), STR_48(34), 
 10513 ;;		 -> STR_47(39), STR_46(73), STR_45(37), STR_44(38), 
 10514 ;;		 -> STR_43(85), STR_42(52), STR_41(46), STR_40(29), 
 10515 ;;		 -> STR_39(101), STR_38(86), STR_37(61), STR_36(62), 
 10516 ;;		 -> STR_35(45), STR_34(74), STR_33(25), STR_32(79), 
 10517 ;;		 -> STR_31(75), STR_30(46), STR_29(61), STR_28(66), 
 10518 ;;		 -> STR_27(23), STR_26(31), STR_24(20), STR_22(20), 
 10519 ;;		 -> STR_20(18), STR_19(20), STR_18(31), STR_10(11), 
 10520 ;;		 -> STR_8(5), 
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;  tmpval          4  123[BANK0 ] struct .
 10523 ;;  val             4  117[BANK0 ] unsigned long 
 10524 ;;  fval            3  127[BANK0 ] unsigned long 
 10525 ;;  exp             2  121[BANK0 ] int 
 10526 ;;  prec            2  115[BANK0 ] int 
 10527 ;;  flag            2  113[BANK0 ] unsigned short 
 10528 ;;  ap              2  111[BANK0 ] PTR void [1]
 10529 ;;		 -> ?_sprintf(2), 
 10530 ;;  cp              2  109[BANK0 ] PTR const unsigned char 
 10531 ;;		 -> STR_73(7), STR_50(6), STR_25(9), STR_23(12), 
 10532 ;;		 -> STR_21(6), 
 10533 ;;  len             2    0        unsigned int 
 10534 ;;  width           2    0        int 
 10535 ;;  c               1  130[BANK0 ] char 
 10536 ;;  d               1    0        unsigned char 
 10537 ;; Return value:  Size  Location     Type
 10538 ;;                  2   92[BANK0 ] int 
 10539 ;; Registers used:
 10540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10541 ;; Tracked objects:
 10542 ;;		On entry : 0/0
 10543 ;;		On exit  : 0/0
 10544 ;;		Unchanged: 0/0
 10545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10546 ;;      Params:         0       8       0       0       0       0       0
 10547 ;;      Locals:         0      25       0       0       0       0       0
 10548 ;;      Temps:          0       6       0       0       0       0       0
 10549 ;;      Totals:         0      39       0       0       0       0       0
 10550 ;;Total ram usage:       39 bytes
 10551 ;; Hardware stack levels used:    1
 10552 ;; Hardware stack levels required when called:    6
 10553 ;; This function calls:
 10554 ;;		___awdiv
 10555 ;;		___ftadd
 10556 ;;		___ftge
 10557 ;;		___ftmul
 10558 ;;		___ftneg
 10559 ;;		___ftsub
 10560 ;;		___fttol
 10561 ;;		___lldiv
 10562 ;;		___llmod
 10563 ;;		___lltoft
 10564 ;;		___wmul
 10565 ;;		__div_to_l_
 10566 ;;		__tdiv_to_l_
 10567 ;;		_fround
 10568 ;;		_scale
 10569 ;; This function is called by:
 10570 ;;		_SampleSingleChannel
 10571 ;;		_readUartByte
 10572 ;;		_SendUartSystemInitMessage
 10573 ;;		_PrintHelpScreen
 10574 ;;		_PrintSystemStatus
 10575 ;;		_PrintRxStatus
 10576 ;;		_PrintTxStatus
 10577 ;; This function uses a non-reentrant model
 10578 ;;
 10579                           
 10580                           	psect	text39
 10581  0000E0                     __ptext39:
 10582                           	opt stack 0
 10583  0000E0                     _sprintf:
 10584                           	opt stack 23
 10585                           
 10586                           ;doprnt.c: 494: va_list ap;
 10587                           ;doprnt.c: 499: signed char c;
 10588                           ;doprnt.c: 501: int width;
 10589                           ;doprnt.c: 504: int prec;
 10590                           ;doprnt.c: 508: unsigned short flag;
 10591                           ;doprnt.c: 515: char d;
 10592                           ;doprnt.c: 516: double fval;
 10593                           ;doprnt.c: 517: int exp;
 10594                           ;doprnt.c: 523: union {
 10595                           ;doprnt.c: 524: unsigned long vd;
 10596                           ;doprnt.c: 525: double integ;
 10597                           ;doprnt.c: 526: } tmpval;
 10598                           ;doprnt.c: 528: unsigned long val;
 10599                           ;doprnt.c: 529: unsigned len;
 10600                           ;doprnt.c: 530: const char * cp;
 10601                           ;doprnt.c: 533: *ap = __va_start();
 10602                           
 10603                           ;incstack = 0
 10604  0000E0  0EC0               	movlw	low (?_sprintf+4)
 10605  0000E2  0100               	movlb	0	; () banked
 10606  0000E4  6FCF               	movwf	sprintf@ap& (0+255),b
 10607  0000E6  0E00               	movlw	high (?_sprintf+4)
 10608  0000E8  6FD0               	movwf	(sprintf@ap+1)& (0+255),b
 10609                           
 10610                           ;doprnt.c: 536: while(c = *f++) {
 10611  0000EA  D3C8               	goto	u9060
 10612  0000EC                     
 10613                           ; BSR set to: 0
 10614                           ;doprnt.c: 538: if(c != '%')
 10615                           
 10616                           ; BSR set to: 0
 10617  0000EC  0E25               	movlw	37
 10618  0000EE  19E2               	xorwf	sprintf@c& (0+255),w,b
 10619  0000F0  B4D8               	btfsc	status,2,c
 10620  0000F2  D009               	goto	l1667
 10621                           
 10622                           ; BSR set to: 0
 10623                           ;doprnt.c: 540: {
 10624                           ;doprnt.c: 541: ((*sp++ = (c)));
 10625  0000F4  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10626  0000F8  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10627  0000FC  C0E2  FFDF         	movff	sprintf@c,indf2
 10628                           
 10629                           ; BSR set to: 0
 10630  000100  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10631  000102  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10632                           
 10633                           ;doprnt.c: 542: continue;
 10634  000104  D3BB               	goto	u9060
 10635  000106                     l1667:
 10636                           
 10637                           ; BSR set to: 0
 10638                           ;doprnt.c: 543: }
 10639                           ;doprnt.c: 548: flag = 0;
 10640                           
 10641                           ; BSR set to: 0
 10642  000106  0E00               	movlw	0
 10643  000108  6FD2               	movwf	(sprintf@flag+1)& (0+255),b
 10644  00010A  0E00               	movlw	0
 10645  00010C  6FD1               	movwf	sprintf@flag& (0+255),b
 10646                           
 10647                           ;doprnt.c: 635: switch(c = *f++) {
 10648  00010E  D030               	goto	l1668
 10649  000110                     
 10650                           ; BSR set to: 0
 10651                           ;doprnt.c: 663: flag |= 0x400;
 10652                           
 10653                           ; BSR set to: 0
 10654  000110  85D2               	bsf	(sprintf@flag+1)& (0+255),2,b
 10655                           
 10656                           ; BSR set to: 0
 10657                           ;doprnt.c: 698: case 'i':
 10658                           ;doprnt.c: 699: break;
 10659                           
 10660                           ; BSR set to: 0
 10661                           
 10662                           ;doprnt.c: 697: case 'd':
 10663                           
 10664                           ;doprnt.c: 664: break;
 10665  000112  D048               	goto	l1672
 10666  000114                     
 10667                           ; BSR set to: 0
 10668                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10669                           
 10670                           ; BSR set to: 0
 10671  000114  C0CF  FFD9         	movff	sprintf@ap,fsr2l
 10672  000118  C0D0  FFDA         	movff	sprintf@ap+1,fsr2h
 10673  00011C  CFDE F0CD          	movff	postinc2,sprintf@cp
 10674  000120  CFDD F0CE          	movff	postdec2,sprintf@cp+1
 10675                           
 10676                           ; BSR set to: 0
 10677  000124  0E02               	movlw	2
 10678  000126  27CF               	addwf	sprintf@ap& (0+255),f,b
 10679  000128  0E00               	movlw	0
 10680  00012A  23D0               	addwfc	(sprintf@ap+1)& (0+255),f,b
 10681                           
 10682                           ; BSR set to: 0
 10683                           ;doprnt.c: 740: if(!cp)
 10684  00012C  51CD               	movf	sprintf@cp& (0+255),w,b
 10685  00012E  11CE               	iorwf	(sprintf@cp+1)& (0+255),w,b
 10686  000130  A4D8               	btfss	status,2,c
 10687  000132  D014               	goto	l1677
 10688                           
 10689                           ; BSR set to: 0
 10690                           ;doprnt.c: 741: cp = "(null)";
 10691  000134  0EEC               	movlw	low STR_73
 10692  000136  6FCD               	movwf	sprintf@cp& (0+255),b
 10693  000138  0E7F               	movlw	high STR_73
 10694  00013A  6FCE               	movwf	(sprintf@cp+1)& (0+255),b
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;doprnt.c: 777: while(*cp)
 10698  00013C  D00F               	goto	l1677
 10699  00013E                     
 10700                           ; BSR set to: 0
 10701                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
 10702                           
 10703                           ; BSR set to: 0
 10704  00013E  C0CD  FFF6         	movff	sprintf@cp,tblptrl
 10705  000142  C0CE  FFF7         	movff	sprintf@cp+1,tblptrh
 10706  000146                     	if	0	;tblptru may be non-zero
 10707  000146                     	endif
 10708  000146                     	if	0	;tblptru may be non-zero
 10709  000146                     	endif
 10710  000146  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10711  00014A  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10712  00014E  0008               	tblrd		*
 10713  000150  CFF5 FFDF          	movff	tablat,indf2
 10714                           
 10715                           ; BSR set to: 0
 10716  000154  4BCD               	infsnz	sprintf@cp& (0+255),f,b
 10717  000156  2BCE               	incf	(sprintf@cp+1)& (0+255),f,b
 10718                           
 10719                           ; BSR set to: 0
 10720  000158  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10721  00015A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10722  00015C                     l1677:
 10723                           
 10724                           ; BSR set to: 0
 10725                           
 10726                           ; BSR set to: 0
 10727  00015C  C0CD  FFF6         	movff	sprintf@cp,tblptrl
 10728  000160  C0CE  FFF7         	movff	sprintf@cp+1,tblptrh
 10729  000164                     	if	0	;tblptru may be non-zero
 10730  000164                     	endif
 10731  000164                     	if	0	;tblptru may be non-zero
 10732  000164                     	endif
 10733  000164  0008               	tblrd		*
 10734  000166  50F5               	movf	tablat,w,c
 10735  000168  0900               	iorlw	0
 10736  00016A  B4D8               	btfsc	status,2,c
 10737  00016C  D387               	goto	u9060
 10738  00016E  D7E7               	goto	l1678
 10739  000170                     l1668:
 10740                           
 10741                           ; BSR set to: 0
 10742                           
 10743                           ; BSR set to: 0
 10744  000170  C0BE  FFF6         	movff	sprintf@f,tblptrl
 10745  000174  C0BF  FFF7         	movff	sprintf@f+1,tblptrh
 10746  000178  4BBE               	infsnz	sprintf@f& (0+255),f,b
 10747  00017A  2BBF               	incf	(sprintf@f+1)& (0+255),f,b
 10748  00017C                     	if	0	;tblptru may be non-zero
 10749  00017C                     	endif
 10750  00017C                     	if	0	;tblptru may be non-zero
 10751  00017C                     	endif
 10752  00017C  0008               	tblrd		*
 10753  00017E  CFF5 F0E2          	movff	tablat,sprintf@c
 10754  000182  51E2               	movf	sprintf@c& (0+255),w,b
 10755                           
 10756                           ; Switch size 1, requested type "space"
 10757                           ; Number of cases is 5, Range of values is 0 to 115
 10758                           ; switch strategies available:
 10759                           ; Name         Instructions Cycles
 10760                           ; simple_byte           16     9 (average)
 10761                           ;	Chosen strategy is simple_byte
 10762  000184  0A00               	xorlw	0	; case 0
 10763  000186  B4D8               	btfsc	status,2,c
 10764  000188  D385               	goto	u9070
 10765  00018A  0A64               	xorlw	100	; case 100
 10766  00018C  B4D8               	btfsc	status,2,c
 10767  00018E  D00A               	goto	l1672
 10768  000190  0A02               	xorlw	2	; case 102
 10769  000192  B4D8               	btfsc	status,2,c
 10770  000194  D7BD               	goto	l1671
 10771  000196  0A0F               	xorlw	15	; case 105
 10772  000198  B4D8               	btfsc	status,2,c
 10773  00019A  D004               	goto	l1672
 10774  00019C  0A1A               	xorlw	26	; case 115
 10775  00019E  B4D8               	btfsc	status,2,c
 10776  0001A0  D7B9               	goto	l1675
 10777  0001A2  D36C               	goto	u9060
 10778  0001A4                     l1672:
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;doprnt.c: 825: if(flag & (0x700)) {
 10782                           
 10783                           ; BSR set to: 0
 10784  0001A4  0E07               	movlw	7
 10785  0001A6  15D2               	andwf	(sprintf@flag+1)& (0+255),w,b
 10786  0001A8  B4D8               	btfsc	status,2,c
 10787  0001AA  D2C8               	goto	l1681
 10788                           
 10789                           ; BSR set to: 0
 10790                           ;doprnt.c: 829: prec = 6;
 10791  0001AC  0E00               	movlw	0
 10792  0001AE  6FD4               	movwf	(sprintf@prec+1)& (0+255),b
 10793  0001B0  0E06               	movlw	6
 10794  0001B2  6FD3               	movwf	sprintf@prec& (0+255),b
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 10798  0001B4  C0CF  FFD9         	movff	sprintf@ap,fsr2l
 10799  0001B8  C0D0  FFDA         	movff	sprintf@ap+1,fsr2h
 10800  0001BC  CFDE F0DF          	movff	postinc2,sprintf@fval
 10801  0001C0  CFDE F0E0          	movff	postinc2,sprintf@fval+1
 10802  0001C4  CFDD F0E1          	movff	postdec2,sprintf@fval+2
 10803                           
 10804                           ; BSR set to: 0
 10805  0001C8  0E03               	movlw	3
 10806  0001CA  27CF               	addwf	sprintf@ap& (0+255),f,b
 10807  0001CC  0E00               	movlw	0
 10808  0001CE  23D0               	addwfc	(sprintf@ap+1)& (0+255),f,b
 10809                           
 10810                           ; BSR set to: 0
 10811                           ;doprnt.c: 831: if(fval < 0.0) {
 10812  0001D0  AFE1               	btfss	(sprintf@fval+2)& (0+255),7,b
 10813  0001D2  D011               	goto	l1682
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;doprnt.c: 832: fval = -fval;
 10817  0001D4  C0DF  F018         	movff	sprintf@fval,___ftneg@f1
 10818  0001D8  C0E0  F019         	movff	sprintf@fval+1,___ftneg@f1+1
 10819  0001DC  C0E1  F01A         	movff	sprintf@fval+2,___ftneg@f1+2
 10820  0001E0  EC66  F023         	call	___ftneg	;wreg free
 10821  0001E4  C018  F0DF         	movff	?___ftneg,sprintf@fval
 10822  0001E8  C019  F0E0         	movff	?___ftneg+1,sprintf@fval+1
 10823  0001EC  C01A  F0E1         	movff	?___ftneg+2,sprintf@fval+2
 10824                           
 10825                           ;doprnt.c: 833: flag |= 0x03;
 10826  0001F0  0E03               	movlw	3
 10827  0001F2  0100               	movlb	0	; () banked
 10828  0001F4  13D1               	iorwf	sprintf@flag& (0+255),f,b
 10829  0001F6                     l1682:
 10830                           
 10831                           ; BSR set to: 0
 10832                           ;doprnt.c: 834: }
 10833                           ;doprnt.c: 835: exp = 0;
 10834                           
 10835                           ; BSR set to: 0
 10836  0001F6  0E00               	movlw	0
 10837  0001F8  6FDA               	movwf	(sprintf@exp+1)& (0+255),b
 10838  0001FA  0E00               	movlw	0
 10839  0001FC  6FD9               	movwf	sprintf@exp& (0+255),b
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;doprnt.c: 836: if( fval!=0) {
 10843  0001FE  51DF               	movf	sprintf@fval& (0+255),w,b
 10844  000200  11E0               	iorwf	(sprintf@fval+1)& (0+255),w,b
 10845  000202  11E1               	iorwf	(sprintf@fval+2)& (0+255),w,b
 10846  000204  B4D8               	btfsc	status,2,c
 10847  000206  D086               	goto	l1687
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 10851  000208  0E82               	movlw	130
 10852  00020A  6FC4               	movwf	??_sprintf& (0+255),b
 10853  00020C  0EFF               	movlw	255
 10854  00020E  6FC5               	movwf	(??_sprintf+1)& (0+255),b
 10855  000210  C0DF  F0C6         	movff	sprintf@fval,??_sprintf+2
 10856  000214  C0E0  F0C7         	movff	sprintf@fval+1,??_sprintf+3
 10857  000218  C0E1  F0C8         	movff	sprintf@fval+2,??_sprintf+4
 10858  00021C  C0E2  F0C9         	movff	sprintf@fval+3,??_sprintf+5
 10859  000220  0E10               	movlw	16
 10860  000222  D005               	goto	u8810
 10861  000224                     u8815:
 10862  000224  90D8               	bcf	status,0,c
 10863  000226  33C9               	rrcf	(??_sprintf+5)& (0+255),f,b
 10864  000228  33C8               	rrcf	(??_sprintf+4)& (0+255),f,b
 10865  00022A  33C7               	rrcf	(??_sprintf+3)& (0+255),f,b
 10866  00022C  33C6               	rrcf	(??_sprintf+2)& (0+255),f,b
 10867  00022E                     u8810:
 10868  00022E  2EE8               	decfsz	wreg,f,c
 10869  000230  D7F9               	goto	u8815
 10870  000232  51C6               	movf	(??_sprintf+2)& (0+255),w,b
 10871  000234  25C4               	addwf	??_sprintf& (0+255),w,b
 10872  000236  6FD9               	movwf	sprintf@exp& (0+255),b
 10873  000238  0E00               	movlw	0
 10874  00023A  21C5               	addwfc	(??_sprintf+1)& (0+255),w,b
 10875  00023C  6FDA               	movwf	(sprintf@exp+1)& (0+255),b
 10876                           
 10877                           ; BSR set to: 0
 10878                           ;doprnt.c: 838: exp--;
 10879  00023E  07D9               	decf	sprintf@exp& (0+255),f,b
 10880  000240  A0D8               	btfss	status,0,c
 10881  000242  07DA               	decf	(sprintf@exp+1)& (0+255),f,b
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;doprnt.c: 839: exp *= 3;
 10885  000244  C0D9  F026         	movff	sprintf@exp,___wmul@multiplier
 10886  000248  C0DA  F027         	movff	sprintf@exp+1,___wmul@multiplier+1
 10887  00024C  0E00               	movlw	0
 10888  00024E  6E29               	movwf	___wmul@multiplicand+1,c
 10889  000250  0E03               	movlw	3
 10890  000252  6E28               	movwf	___wmul@multiplicand,c
 10891  000254  EC41  F023         	call	___wmul	;wreg free
 10892  000258  C026  F0D9         	movff	?___wmul,sprintf@exp
 10893  00025C  C027  F0DA         	movff	?___wmul+1,sprintf@exp+1
 10894                           
 10895                           ;doprnt.c: 840: exp /= 10;
 10896  000260  C0D9  F01E         	movff	sprintf@exp,___awdiv@dividend
 10897  000264  C0DA  F01F         	movff	sprintf@exp+1,___awdiv@dividend+1
 10898  000268  0E00               	movlw	0
 10899  00026A  6E21               	movwf	___awdiv@divisor+1,c
 10900  00026C  0E0A               	movlw	10
 10901  00026E  6E20               	movwf	___awdiv@divisor,c
 10902  000270  EC75  F01C         	call	___awdiv	;wreg free
 10903  000274  C01E  F0D9         	movff	?___awdiv,sprintf@exp
 10904  000278  C01F  F0DA         	movff	?___awdiv+1,sprintf@exp+1
 10905                           
 10906                           ;doprnt.c: 841: if(exp < 0)
 10907  00027C  0100               	movlb	0	; () banked
 10908  00027E  AFDA               	btfss	(sprintf@exp+1)& (0+255),7,b
 10909  000280  D003               	goto	l1684
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;doprnt.c: 842: exp--;
 10913  000282  07D9               	decf	sprintf@exp& (0+255),f,b
 10914  000284  A0D8               	btfss	status,0,c
 10915  000286  07DA               	decf	(sprintf@exp+1)& (0+255),f,b
 10916  000288                     l1684:
 10917                           
 10918                           ; BSR set to: 0
 10919                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 10920                           
 10921                           ; BSR set to: 0
 10922  000288  51D9               	movf	sprintf@exp& (0+255),w,b
 10923  00028A  0800               	sublw	0
 10924  00028C  EC51  F004         	call	_scale
 10925  000290  C072  F0DB         	movff	?_scale,sprintf@tmpval
 10926  000294  C073  F0DC         	movff	?_scale+1,sprintf@tmpval+1
 10927  000298  C074  F0DD         	movff	?_scale+2,sprintf@tmpval+2
 10928                           
 10929                           ;doprnt.c: 847: tmpval.integ *= fval;
 10930  00029C  C0DB  F066         	movff	sprintf@tmpval,___ftmul@f1
 10931  0002A0  C0DC  F067         	movff	sprintf@tmpval+1,___ftmul@f1+1
 10932  0002A4  C0DD  F068         	movff	sprintf@tmpval+2,___ftmul@f1+2
 10933  0002A8  C0DF  F069         	movff	sprintf@fval,___ftmul@f2
 10934  0002AC  C0E0  F06A         	movff	sprintf@fval+1,___ftmul@f2+1
 10935  0002B0  C0E1  F06B         	movff	sprintf@fval+2,___ftmul@f2+2
 10936  0002B4  EC32  F016         	call	___ftmul	;wreg free
 10937  0002B8  C066  F0DB         	movff	?___ftmul,sprintf@tmpval
 10938  0002BC  C067  F0DC         	movff	?___ftmul+1,sprintf@tmpval+1
 10939  0002C0  C068  F0DD         	movff	?___ftmul+2,sprintf@tmpval+2
 10940                           
 10941                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 10942  0002C4  C0DB  F018         	movff	sprintf@tmpval,___ftge@ff1
 10943  0002C8  C0DC  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 10944  0002CC  C0DD  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 10945  0002D0  0E00               	movlw	0
 10946  0002D2  6E1B               	movwf	___ftge@ff2,c
 10947  0002D4  0E80               	movlw	128
 10948  0002D6  6E1C               	movwf	___ftge@ff2+1,c
 10949  0002D8  0E3F               	movlw	63
 10950  0002DA  6E1D               	movwf	___ftge@ff2+2,c
 10951  0002DC  ECE7  F01B         	call	___ftge	;wreg free
 10952  0002E0  B0D8               	btfsc	status,0,c
 10953  0002E2  D005               	goto	l1685
 10954                           
 10955                           ;doprnt.c: 849: exp--;
 10956  0002E4  0100               	movlb	0	; () banked
 10957  0002E6  07D9               	decf	sprintf@exp& (0+255),f,b
 10958  0002E8  A0D8               	btfss	status,0,c
 10959  0002EA  07DA               	decf	(sprintf@exp+1)& (0+255),f,b
 10960  0002EC  D013               	goto	l1687
 10961  0002EE                     l1685:
 10962                           
 10963                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 10964                           
 10965                           ; BSR set to: 0
 10966  0002EE  C0DB  F018         	movff	sprintf@tmpval,___ftge@ff1
 10967  0002F2  C0DC  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 10968  0002F6  C0DD  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 10969  0002FA  0E00               	movlw	0
 10970  0002FC  6E1B               	movwf	___ftge@ff2,c
 10971  0002FE  0E20               	movlw	32
 10972  000300  6E1C               	movwf	___ftge@ff2+1,c
 10973  000302  0E41               	movlw	65
 10974  000304  6E1D               	movwf	___ftge@ff2+2,c
 10975  000306  ECE7  F01B         	call	___ftge	;wreg free
 10976  00030A  A0D8               	btfss	status,0,c
 10977  00030C  D003               	goto	l1687
 10978                           
 10979                           ;doprnt.c: 851: exp++;
 10980  00030E  0100               	movlb	0	; () banked
 10981  000310  4BD9               	infsnz	sprintf@exp& (0+255),f,b
 10982  000312  2BDA               	incf	(sprintf@exp+1)& (0+255),f,b
 10983  000314                     l1687:
 10984                           
 10985                           ;doprnt.c: 852: }
 10986                           ;doprnt.c: 1112: if(prec <= 12)
 10987                           
 10988                           ; BSR set to: 0
 10989                           
 10990                           ; BSR set to: 0
 10991                           
 10992                           ; BSR set to: 0
 10993  000314  0100               	movlb	0	; () banked
 10994  000316  BFD4               	btfsc	(sprintf@prec+1)& (0+255),7,b
 10995  000318  D006               	goto	u8850
 10996  00031A  51D4               	movf	(sprintf@prec+1)& (0+255),w,b
 10997  00031C  E11B               	bnz	l8818
 10998  00031E  0E0D               	movlw	13
 10999  000320  5DD3               	subwf	sprintf@prec& (0+255),w,b
 11000  000322  B0D8               	btfsc	status,0,c
 11001  000324  D017               	goto	l1688
 11002  000326                     u8850:
 11003                           
 11004                           ; BSR set to: 0
 11005                           ;doprnt.c: 1113: fval += fround(prec);
 11006  000326  C0DF  F07C         	movff	sprintf@fval,___ftadd@f1
 11007  00032A  C0E0  F07D         	movff	sprintf@fval+1,___ftadd@f1+1
 11008  00032E  C0E1  F07E         	movff	sprintf@fval+2,___ftadd@f1+2
 11009  000332  51D3               	movf	sprintf@prec& (0+255),w,b
 11010  000334  EC60  F009         	call	_fround
 11011  000338  C072  F07F         	movff	?_fround,___ftadd@f2
 11012  00033C  C073  F080         	movff	?_fround+1,___ftadd@f2+1
 11013  000340  C074  F081         	movff	?_fround+2,___ftadd@f2+2
 11014  000344  EC75  F00C         	call	___ftadd	;wreg free
 11015  000348  C07C  F0DF         	movff	?___ftadd,sprintf@fval
 11016  00034C  C07D  F0E0         	movff	?___ftadd+1,sprintf@fval+1
 11017  000350  C07E  F0E1         	movff	?___ftadd+2,sprintf@fval+2
 11018  000354                     l1688:
 11019  000354                     l8818:
 11020                           
 11021                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 11022  000354  0100               	movlb	0	; () banked
 11023  000356  BFDA               	btfsc	(sprintf@exp+1)& (0+255),7,b
 11024  000358  D006               	goto	u8860
 11025  00035A  51DA               	movf	(sprintf@exp+1)& (0+255),w,b
 11026  00035C  E11F               	bnz	l8826
 11027  00035E  0E0A               	movlw	10
 11028  000360  5DD9               	subwf	sprintf@exp& (0+255),w,b
 11029  000362  B0D8               	btfsc	status,0,c
 11030  000364  D01B               	goto	u8890
 11031  000366                     u8860:
 11032                           
 11033                           ; BSR set to: 0
 11034  000366  51DF               	movf	sprintf@fval& (0+255),w,b
 11035  000368  11E0               	iorwf	(sprintf@fval+1)& (0+255),w,b
 11036  00036A  11E1               	iorwf	(sprintf@fval+2)& (0+255),w,b
 11037  00036C  B4D8               	btfsc	status,2,c
 11038  00036E  D055               	goto	l1689
 11039                           
 11040                           ; BSR set to: 0
 11041  000370  C0DF  F079         	movff	sprintf@fval,___fttol@f1
 11042  000374  C0E0  F07A         	movff	sprintf@fval+1,___fttol@f1+1
 11043  000378  C0E1  F07B         	movff	sprintf@fval+2,___fttol@f1+2
 11044  00037C  ECB6  F015         	call	___fttol	;wreg free
 11045  000380  0100               	movlb	0	; () banked
 11046  000382  5179               	movf	?___fttol& (0+255),w,b
 11047  000384  117A               	iorwf	(?___fttol+1)& (0+255),w,b
 11048  000386  117B               	iorwf	(?___fttol+2)& (0+255),w,b
 11049  000388  117C               	iorwf	(?___fttol+3)& (0+255),w,b
 11050  00038A  B4D8               	btfsc	status,2,c
 11051                           
 11052                           ; BSR set to: 0
 11053  00038C  BFDA               	btfsc	(sprintf@exp+1)& (0+255),7,b
 11054  00038E  D045               	goto	l1689
 11055  000390  51DA               	movf	(sprintf@exp+1)& (0+255),w,b
 11056  000392  E104               	bnz	l8826
 11057  000394  0E02               	movlw	2
 11058  000396  5DD9               	subwf	sprintf@exp& (0+255),w,b
 11059  000398  A0D8               	btfss	status,0,c
 11060  00039A  D03F               	goto	l1689
 11061  00039C                     u8890:
 11062  00039C                     l8826:
 11063                           
 11064                           ; BSR set to: 0
 11065                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 11066  00039C  C0DB  F018         	movff	sprintf@tmpval,___ftge@ff1
 11067  0003A0  C0DC  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 11068  0003A4  C0DD  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 11069  0003A8  0E70               	movlw	112
 11070  0003AA  6E1B               	movwf	___ftge@ff2,c
 11071  0003AC  0E89               	movlw	137
 11072  0003AE  6E1C               	movwf	___ftge@ff2+1,c
 11073  0003B0  0E40               	movlw	64
 11074  0003B2  6E1D               	movwf	___ftge@ff2+2,c
 11075  0003B4  ECE7  F01B         	call	___ftge	;wreg free
 11076  0003B8  B0D8               	btfsc	status,0,c
 11077  0003BA  D003               	goto	l1692
 11078                           
 11079                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 11080  0003BC  0100               	movlb	0	; () banked
 11081  0003BE  0EF7               	movlw	247
 11082  0003C0  D002               	goto	L1
 11083  0003C2                     l1692:
 11084                           
 11085                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 11086                           
 11087                           ; BSR set to: 0
 11088  0003C2  0100               	movlb	0	; () banked
 11089  0003C4  0EF8               	movlw	248
 11090  0003C6                     L1:
 11091  0003C6  27D9               	addwf	sprintf@exp& (0+255),f,b
 11092  0003C8  0EFF               	movlw	255
 11093  0003CA  23DA               	addwfc	(sprintf@exp+1)& (0+255),f,b
 11094                           
 11095                           ; BSR set to: 0
 11096                           ;doprnt.c: 1124: }
 11097                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 11098                           
 11099                           ; BSR set to: 0
 11100  0003CC  51D9               	movf	sprintf@exp& (0+255),w,b
 11101  0003CE  EC51  F004         	call	_scale
 11102  0003D2  C072  F0DB         	movff	?_scale,sprintf@tmpval
 11103  0003D6  C073  F0DC         	movff	?_scale+1,sprintf@tmpval+1
 11104  0003DA  C074  F0DD         	movff	?_scale+2,sprintf@tmpval+2
 11105                           
 11106                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 11107  0003DE  C0DF  F018         	movff	sprintf@fval,__tdiv_to_l_@f1
 11108  0003E2  C0E0  F019         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
 11109  0003E6  C0E1  F01A         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
 11110  0003EA  C0DB  F01B         	movff	sprintf@tmpval,__tdiv_to_l_@f2
 11111  0003EE  C0DC  F01C         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
 11112  0003F2  C0DD  F01D         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
 11113  0003F6  ECB2  F011         	call	__tdiv_to_l_	;wreg free
 11114  0003FA  C018  F0D5         	movff	?__tdiv_to_l_,sprintf@val
 11115  0003FE  C019  F0D6         	movff	?__tdiv_to_l_+1,sprintf@val+1
 11116  000402  C01A  F0D7         	movff	?__tdiv_to_l_+2,sprintf@val+2
 11117  000406  C01B  F0D8         	movff	?__tdiv_to_l_+3,sprintf@val+3
 11118                           
 11119                           ;doprnt.c: 1129: fval = 0.0;
 11120  00040A  0E00               	movlw	0
 11121  00040C  0100               	movlb	0	; () banked
 11122  00040E  6FDF               	movwf	sprintf@fval& (0+255),b
 11123  000410  0E00               	movlw	0
 11124  000412  6FE0               	movwf	(sprintf@fval+1)& (0+255),b
 11125  000414  0E00               	movlw	0
 11126  000416  6FE1               	movwf	(sprintf@fval+2)& (0+255),b
 11127                           
 11128                           ;doprnt.c: 1130: } else {
 11129  000418  D033               	goto	l1698
 11130  00041A                     l1689:
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;doprnt.c: 1131: val = (unsigned long)fval;
 11134                           
 11135                           ; BSR set to: 0
 11136  00041A  C0DF  F079         	movff	sprintf@fval,___fttol@f1
 11137  00041E  C0E0  F07A         	movff	sprintf@fval+1,___fttol@f1+1
 11138  000422  C0E1  F07B         	movff	sprintf@fval+2,___fttol@f1+2
 11139  000426  ECB6  F015         	call	___fttol	;wreg free
 11140  00042A  C079  F0D5         	movff	?___fttol,sprintf@val
 11141  00042E  C07A  F0D6         	movff	?___fttol+1,sprintf@val+1
 11142  000432  C07B  F0D7         	movff	?___fttol+2,sprintf@val+2
 11143  000436  C07C  F0D8         	movff	?___fttol+3,sprintf@val+3
 11144                           
 11145                           ;doprnt.c: 1132: fval -= (double)val;
 11146  00043A  C0DF  F088         	movff	sprintf@fval,___ftsub@f1
 11147  00043E  C0E0  F089         	movff	sprintf@fval+1,___ftsub@f1+1
 11148  000442  C0E1  F08A         	movff	sprintf@fval+2,___ftsub@f1+2
 11149  000446  C0D5  F020         	movff	sprintf@val,___lltoft@c
 11150  00044A  C0D6  F021         	movff	sprintf@val+1,___lltoft@c+1
 11151  00044E  C0D7  F022         	movff	sprintf@val+2,___lltoft@c+2
 11152  000452  C0D8  F023         	movff	sprintf@val+3,___lltoft@c+3
 11153  000456  ECD8  F01F         	call	___lltoft	;wreg free
 11154  00045A  C020  F08B         	movff	?___lltoft,___ftsub@f2
 11155  00045E  C021  F08C         	movff	?___lltoft+1,___ftsub@f2+1
 11156  000462  C022  F08D         	movff	?___lltoft+2,___ftsub@f2+2
 11157  000466  EC93  F021         	call	___ftsub	;wreg free
 11158  00046A  C088  F0DF         	movff	?___ftsub,sprintf@fval
 11159  00046E  C089  F0E0         	movff	?___ftsub+1,sprintf@fval+1
 11160  000472  C08A  F0E1         	movff	?___ftsub+2,sprintf@fval+2
 11161                           
 11162                           ;doprnt.c: 1133: exp = 0;
 11163  000476  0E00               	movlw	0
 11164  000478  0100               	movlb	0	; () banked
 11165  00047A  6FDA               	movwf	(sprintf@exp+1)& (0+255),b
 11166  00047C  0E00               	movlw	0
 11167  00047E  6FD9               	movwf	sprintf@exp& (0+255),b
 11168  000480                     l1698:
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;doprnt.c: 1134: }
 11172                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 11173                           
 11174                           ; BSR set to: 0
 11175  000480  0E01               	movlw	1
 11176  000482  6FE2               	movwf	sprintf@c& (0+255),b
 11177  000484                     l8846:
 11178                           
 11179                           ; BSR set to: 0
 11180  000484  0E0A               	movlw	10
 11181  000486  19E2               	xorwf	sprintf@c& (0+255),w,b
 11182  000488  B4D8               	btfsc	status,2,c
 11183  00048A  D018               	goto	u8930
 11184                           
 11185                           ; BSR set to: 0
 11186                           ;doprnt.c: 1137: if(val < dpowers[c])
 11187                           
 11188                           ; BSR set to: 0
 11189                           
 11190                           ; BSR set to: 0
 11191  00048C  51E2               	movf	sprintf@c& (0+255),w,b
 11192  00048E  0D04               	mullw	4
 11193  000490  0EB1               	movlw	low _dpowers
 11194  000492  24F3               	addwf	prodl,w,c
 11195  000494  6EF6               	movwf	tblptrl,c
 11196  000496  0E77               	movlw	high _dpowers
 11197  000498  20F4               	addwfc	prodh,w,c
 11198  00049A  6EF7               	movwf	tblptrh,c
 11199  00049C                     	if	0	;There are less than 3 active tblptr bytes
 11200  00049C                     	endif
 11201  00049C  0009               	tblrd		*+
 11202  00049E  50F5               	movf	tablat,w,c
 11203  0004A0  5DD5               	subwf	sprintf@val& (0+255),w,b
 11204  0004A2  0009               	tblrd		*+
 11205  0004A4  50F5               	movf	tablat,w,c
 11206  0004A6  59D6               	subwfb	(sprintf@val+1)& (0+255),w,b
 11207  0004A8  0009               	tblrd		*+
 11208  0004AA  50F5               	movf	tablat,w,c
 11209  0004AC  59D7               	subwfb	(sprintf@val+2)& (0+255),w,b
 11210  0004AE  0009               	tblrd		*+
 11211  0004B0  50F5               	movf	tablat,w,c
 11212  0004B2  59D8               	subwfb	(sprintf@val+3)& (0+255),w,b
 11213  0004B4  A0D8               	btfss	status,0,c
 11214  0004B6  D002               	goto	u8930
 11215                           
 11216                           ; BSR set to: 0
 11217                           
 11218                           ; BSR set to: 0
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;doprnt.c: 1138: break;
 11222  0004B8  2BE2               	incf	sprintf@c& (0+255),f,b
 11223  0004BA  D7E4               	goto	l8846
 11224  0004BC                     u8930:
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;doprnt.c: 1175: {
 11228                           ;doprnt.c: 1188: if(flag & 0x03)
 11229                           
 11230                           ; BSR set to: 0
 11231  0004BC  0E03               	movlw	3
 11232  0004BE  15D1               	andwf	sprintf@flag& (0+255),w,b
 11233  0004C0  6FC4               	movwf	??_sprintf& (0+255),b
 11234  0004C2  0E00               	movlw	0
 11235  0004C4  15D2               	andwf	(sprintf@flag+1)& (0+255),w,b
 11236  0004C6  6FC5               	movwf	(??_sprintf+1)& (0+255),b
 11237  0004C8  51C4               	movf	??_sprintf& (0+255),w,b
 11238  0004CA  11C5               	iorwf	(??_sprintf+1)& (0+255),w,b
 11239  0004CC  B4D8               	btfsc	status,2,c
 11240  0004CE  D051               	goto	l1703
 11241                           
 11242                           ; BSR set to: 0
 11243                           ;doprnt.c: 1190: ((*sp++ = ('-')));
 11244  0004D0  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11245  0004D4  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11246  0004D8  0E2D               	movlw	45
 11247  0004DA  D048               	goto	L2
 11248  0004DC                     
 11249                           ; BSR set to: 0
 11250                           ;doprnt.c: 1200: {
 11251                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 11252                           
 11253                           ; BSR set to: 0
 11254  0004DC  C0D5  F018         	movff	sprintf@val,___lldiv@dividend
 11255  0004E0  C0D6  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 11256  0004E4  C0D7  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 11257  0004E8  C0D8  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 11258  0004EC  51E2               	movf	sprintf@c& (0+255),w,b
 11259  0004EE  0D04               	mullw	4
 11260  0004F0  0EB1               	movlw	low _dpowers
 11261  0004F2  24F3               	addwf	prodl,w,c
 11262  0004F4  6EF6               	movwf	tblptrl,c
 11263  0004F6  0E77               	movlw	high _dpowers
 11264  0004F8  20F4               	addwfc	prodh,w,c
 11265  0004FA  6EF7               	movwf	tblptrh,c
 11266  0004FC                     	if	0	;There are less than 3 active tblptr bytes
 11267  0004FC                     	endif
 11268  0004FC  0009               	tblrd		*+
 11269  0004FE  CFF5 F01C          	movff	tablat,___lldiv@divisor
 11270  000502  0009               	tblrd		*+
 11271  000504  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 11272  000508  0009               	tblrd		*+
 11273  00050A  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 11274  00050E  000A               	tblrd		*-
 11275  000510  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 11276  000514  ECB7  F01C         	call	___lldiv	;wreg free
 11277  000518  C018  F0DB         	movff	?___lldiv,sprintf@tmpval
 11278  00051C  C019  F0DC         	movff	?___lldiv+1,sprintf@tmpval+1
 11279  000520  C01A  F0DD         	movff	?___lldiv+2,sprintf@tmpval+2
 11280  000524  C01B  F0DE         	movff	?___lldiv+3,sprintf@tmpval+3
 11281                           
 11282                           ;doprnt.c: 1202: tmpval.vd %= 10;
 11283  000528  C0DB  F0B3         	movff	sprintf@tmpval,___llmod@dividend
 11284  00052C  C0DC  F0B4         	movff	sprintf@tmpval+1,___llmod@dividend+1
 11285  000530  C0DD  F0B5         	movff	sprintf@tmpval+2,___llmod@dividend+2
 11286  000534  C0DE  F0B6         	movff	sprintf@tmpval+3,___llmod@dividend+3
 11287  000538  0E0A               	movlw	10
 11288  00053A  0100               	movlb	0	; () banked
 11289  00053C  6FB7               	movwf	___llmod@divisor& (0+255),b
 11290  00053E  0E00               	movlw	0
 11291  000540  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 11292  000542  0E00               	movlw	0
 11293  000544  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 11294  000546  0E00               	movlw	0
 11295  000548  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 11296  00054A  EC53  F01E         	call	___llmod	;wreg free
 11297  00054E  C0B3  F0DB         	movff	?___llmod,sprintf@tmpval
 11298  000552  C0B4  F0DC         	movff	?___llmod+1,sprintf@tmpval+1
 11299  000556  C0B5  F0DD         	movff	?___llmod+2,sprintf@tmpval+2
 11300  00055A  C0B6  F0DE         	movff	?___llmod+3,sprintf@tmpval+3
 11301                           
 11302                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
 11303  00055E  0100               	movlb	0	; () banked
 11304  000560  51DB               	movf	sprintf@tmpval& (0+255),w,b
 11305  000562  0F30               	addlw	48
 11306  000564  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11307  000568  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11308  00056C                     L2:
 11309  00056C  6EDF               	movwf	indf2,c
 11310                           
 11311                           ; BSR set to: 0
 11312  00056E  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11313  000570  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11314  000572                     l1703:
 11315                           
 11316                           ; BSR set to: 0
 11317                           
 11318                           ; BSR set to: 0
 11319  000572  07E2               	decf	sprintf@c& (0+255),f,b
 11320  000574  29E2               	incf	sprintf@c& (0+255),w,b
 11321  000576  B4D8               	btfsc	status,2,c
 11322  000578  D00C               	goto	l1706
 11323  00057A  D7B0               	goto	l1704
 11324  00057C                     l8874:
 11325                           
 11326                           ; BSR set to: 0
 11327                           ;doprnt.c: 1208: ((*sp++ = ('0')));
 11328  00057C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11329  000580  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11330  000584  0E30               	movlw	48
 11331  000586  6EDF               	movwf	indf2,c
 11332                           
 11333                           ; BSR set to: 0
 11334  000588  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11335  00058A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11336                           
 11337                           ; BSR set to: 0
 11338                           ;doprnt.c: 1209: exp--;
 11339  00058C  07D9               	decf	sprintf@exp& (0+255),f,b
 11340  00058E  A0D8               	btfss	status,0,c
 11341  000590  07DA               	decf	(sprintf@exp+1)& (0+255),f,b
 11342  000592                     l1706:
 11343                           
 11344                           ; BSR set to: 0
 11345                           
 11346                           ; BSR set to: 0
 11347  000592  BFDA               	btfsc	(sprintf@exp+1)& (0+255),7,b
 11348  000594  D005               	goto	u8960
 11349  000596  51DA               	movf	(sprintf@exp+1)& (0+255),w,b
 11350  000598  E1F1               	bnz	l8874
 11351  00059A  05D9               	decf	sprintf@exp& (0+255),w,b
 11352  00059C  B0D8               	btfsc	status,0,c
 11353  00059E  D7EE               	goto	l1707
 11354  0005A0                     u8960:
 11355                           
 11356                           ; BSR set to: 0
 11357                           ;doprnt.c: 1210: }
 11358                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 11359                           
 11360                           ; BSR set to: 0
 11361  0005A0  BFD4               	btfsc	(sprintf@prec+1)& (0+255),7,b
 11362  0005A2  D009               	goto	l1709
 11363  0005A4  51D4               	movf	(sprintf@prec+1)& (0+255),w,b
 11364  0005A6  E104               	bnz	u8970
 11365  0005A8  0E09               	movlw	9
 11366  0005AA  5DD3               	subwf	sprintf@prec& (0+255),w,b
 11367  0005AC  A0D8               	btfss	status,0,c
 11368  0005AE  D003               	goto	l1709
 11369  0005B0                     u8970:
 11370                           
 11371                           ; BSR set to: 0
 11372                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 11373  0005B0  0E08               	movlw	8
 11374  0005B2  6FE2               	movwf	sprintf@c& (0+255),b
 11375  0005B4  D002               	goto	l1710
 11376  0005B6                     l1709:
 11377                           
 11378                           ; BSR set to: 0
 11379                           ;doprnt.c: 1213: else
 11380                           ;doprnt.c: 1214: c = prec;
 11381  0005B6  C0D3  F0E2         	movff	sprintf@prec,sprintf@c
 11382  0005BA                     l1710:
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;doprnt.c: 1215: prec -= c;
 11386                           
 11387                           ; BSR set to: 0
 11388  0005BA  51E2               	movf	sprintf@c& (0+255),w,b
 11389  0005BC  5FD3               	subwf	sprintf@prec& (0+255),f,b
 11390  0005BE  0E00               	movlw	0
 11391  0005C0  BFE2               	btfsc	sprintf@c& (0+255),7,b
 11392  0005C2  0EFF               	movlw	255
 11393  0005C4  5BD4               	subwfb	(sprintf@prec+1)& (0+255),f,b
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;doprnt.c: 1219: if(c)
 11397  0005C6  51E2               	movf	sprintf@c& (0+255),w,b
 11398  0005C8  B4D8               	btfsc	status,2,c
 11399  0005CA  D008               	goto	l1711
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;doprnt.c: 1221: ((*sp++ = ('.')));
 11403  0005CC  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11404  0005D0  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11405  0005D4  0E2E               	movlw	46
 11406  0005D6  6EDF               	movwf	indf2,c
 11407                           
 11408                           ; BSR set to: 0
 11409  0005D8  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11410  0005DA  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11411  0005DC                     l1711:
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 11415                           
 11416                           ; BSR set to: 0
 11417  0005DC  51E2               	movf	sprintf@c& (0+255),w,b
 11418  0005DE  EC51  F004         	call	_scale
 11419  0005E2  C072  F0CA         	movff	?_scale,_sprintf$3979
 11420  0005E6  C073  F0CB         	movff	?_scale+1,_sprintf$3979+1
 11421  0005EA  C074  F0CC         	movff	?_scale+2,_sprintf$3979+2
 11422                           
 11423                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 11424  0005EE  C0DF  F069         	movff	sprintf@fval,___ftmul@f2
 11425  0005F2  C0E0  F06A         	movff	sprintf@fval+1,___ftmul@f2+1
 11426  0005F6  C0E1  F06B         	movff	sprintf@fval+2,___ftmul@f2+2
 11427  0005FA  C0CA  F066         	movff	_sprintf$3979,___ftmul@f1
 11428  0005FE  C0CB  F067         	movff	_sprintf$3979+1,___ftmul@f1+1
 11429  000602  C0CC  F068         	movff	_sprintf$3979+2,___ftmul@f1+2
 11430  000606  EC32  F016         	call	___ftmul	;wreg free
 11431  00060A  C066  F079         	movff	?___ftmul,___fttol@f1
 11432  00060E  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
 11433  000612  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
 11434  000616  ECB6  F015         	call	___fttol	;wreg free
 11435  00061A  C079  F0D5         	movff	?___fttol,sprintf@val
 11436  00061E  C07A  F0D6         	movff	?___fttol+1,sprintf@val+1
 11437  000622  C07B  F0D7         	movff	?___fttol+2,sprintf@val+2
 11438  000626  C07C  F0D8         	movff	?___fttol+3,sprintf@val+3
 11439                           
 11440                           ;doprnt.c: 1228: while(c--) {
 11441  00062A  D072               	goto	l1712
 11442  00062C                     
 11443                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 11444  00062C  C0D5  F018         	movff	sprintf@val,___lldiv@dividend
 11445  000630  C0D6  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 11446  000634  C0D7  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 11447  000638  C0D8  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 11448  00063C  0100               	movlb	0	; () banked
 11449  00063E  51E2               	movf	sprintf@c& (0+255),w,b
 11450  000640  0D04               	mullw	4
 11451  000642  0EB1               	movlw	low _dpowers
 11452  000644  24F3               	addwf	prodl,w,c
 11453  000646  6EF6               	movwf	tblptrl,c
 11454  000648  0E77               	movlw	high _dpowers
 11455  00064A  20F4               	addwfc	prodh,w,c
 11456  00064C  6EF7               	movwf	tblptrh,c
 11457  00064E                     	if	0	;There are less than 3 active tblptr bytes
 11458  00064E                     	endif
 11459  00064E  0009               	tblrd		*+
 11460  000650  CFF5 F01C          	movff	tablat,___lldiv@divisor
 11461  000654  0009               	tblrd		*+
 11462  000656  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 11463  00065A  0009               	tblrd		*+
 11464  00065C  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 11465  000660  000A               	tblrd		*-
 11466  000662  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 11467  000666  ECB7  F01C         	call	___lldiv	;wreg free
 11468  00066A  C018  F0DB         	movff	?___lldiv,sprintf@tmpval
 11469  00066E  C019  F0DC         	movff	?___lldiv+1,sprintf@tmpval+1
 11470  000672  C01A  F0DD         	movff	?___lldiv+2,sprintf@tmpval+2
 11471  000676  C01B  F0DE         	movff	?___lldiv+3,sprintf@tmpval+3
 11472                           
 11473                           ;doprnt.c: 1230: tmpval.vd %= 10;
 11474  00067A  C0DB  F0B3         	movff	sprintf@tmpval,___llmod@dividend
 11475  00067E  C0DC  F0B4         	movff	sprintf@tmpval+1,___llmod@dividend+1
 11476  000682  C0DD  F0B5         	movff	sprintf@tmpval+2,___llmod@dividend+2
 11477  000686  C0DE  F0B6         	movff	sprintf@tmpval+3,___llmod@dividend+3
 11478  00068A  0E0A               	movlw	10
 11479  00068C  0100               	movlb	0	; () banked
 11480  00068E  6FB7               	movwf	___llmod@divisor& (0+255),b
 11481  000690  0E00               	movlw	0
 11482  000692  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 11483  000694  0E00               	movlw	0
 11484  000696  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 11485  000698  0E00               	movlw	0
 11486  00069A  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 11487  00069C  EC53  F01E         	call	___llmod	;wreg free
 11488  0006A0  C0B3  F0DB         	movff	?___llmod,sprintf@tmpval
 11489  0006A4  C0B4  F0DC         	movff	?___llmod+1,sprintf@tmpval+1
 11490  0006A8  C0B5  F0DD         	movff	?___llmod+2,sprintf@tmpval+2
 11491  0006AC  C0B6  F0DE         	movff	?___llmod+3,sprintf@tmpval+3
 11492                           
 11493                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
 11494  0006B0  0100               	movlb	0	; () banked
 11495  0006B2  51DB               	movf	sprintf@tmpval& (0+255),w,b
 11496  0006B4  0F30               	addlw	48
 11497  0006B6  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11498  0006BA  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11499  0006BE  6EDF               	movwf	indf2,c
 11500                           
 11501                           ; BSR set to: 0
 11502  0006C0  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11503  0006C2  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;doprnt.c: 1232: val %= dpowers[c];
 11507  0006C4  C0D5  F0B3         	movff	sprintf@val,___llmod@dividend
 11508  0006C8  C0D6  F0B4         	movff	sprintf@val+1,___llmod@dividend+1
 11509  0006CC  C0D7  F0B5         	movff	sprintf@val+2,___llmod@dividend+2
 11510  0006D0  C0D8  F0B6         	movff	sprintf@val+3,___llmod@dividend+3
 11511  0006D4  51E2               	movf	sprintf@c& (0+255),w,b
 11512  0006D6  0D04               	mullw	4
 11513  0006D8  0EB1               	movlw	low _dpowers
 11514  0006DA  24F3               	addwf	prodl,w,c
 11515  0006DC  6EF6               	movwf	tblptrl,c
 11516  0006DE  0E77               	movlw	high _dpowers
 11517  0006E0  20F4               	addwfc	prodh,w,c
 11518  0006E2  6EF7               	movwf	tblptrh,c
 11519  0006E4                     	if	0	;There are less than 3 active tblptr bytes
 11520  0006E4                     	endif
 11521  0006E4  0009               	tblrd		*+
 11522  0006E6  CFF5 F0B7          	movff	tablat,___llmod@divisor
 11523  0006EA  0009               	tblrd		*+
 11524  0006EC  CFF5 F0B8          	movff	tablat,___llmod@divisor+1
 11525  0006F0  0009               	tblrd		*+
 11526  0006F2  CFF5 F0B9          	movff	tablat,___llmod@divisor+2
 11527  0006F6  000A               	tblrd		*-
 11528  0006F8  CFF5 F0BA          	movff	tablat,___llmod@divisor+3
 11529  0006FC  EC53  F01E         	call	___llmod	;wreg free
 11530  000700  C0B3  F0D5         	movff	?___llmod,sprintf@val
 11531  000704  C0B4  F0D6         	movff	?___llmod+1,sprintf@val+1
 11532  000708  C0B5  F0D7         	movff	?___llmod+2,sprintf@val+2
 11533  00070C  C0B6  F0D8         	movff	?___llmod+3,sprintf@val+3
 11534  000710                     l1712:
 11535  000710  0100               	movlb	0	; () banked
 11536  000712  07E2               	decf	sprintf@c& (0+255),f,b
 11537  000714  29E2               	incf	sprintf@c& (0+255),w,b
 11538  000716  B4D8               	btfsc	status,2,c
 11539  000718  D00C               	goto	l1715
 11540  00071A  D788               	goto	l1713
 11541  00071C                     
 11542                           ; BSR set to: 0
 11543                           ;doprnt.c: 1236: ((*sp++ = ('0')));
 11544                           
 11545                           ; BSR set to: 0
 11546  00071C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11547  000720  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11548  000724  0E30               	movlw	48
 11549  000726  6EDF               	movwf	indf2,c
 11550                           
 11551                           ; BSR set to: 0
 11552  000728  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11553  00072A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11554                           
 11555                           ; BSR set to: 0
 11556                           ;doprnt.c: 1237: prec--;
 11557  00072C  07D3               	decf	sprintf@prec& (0+255),f,b
 11558  00072E  A0D8               	btfss	status,0,c
 11559  000730  07D4               	decf	(sprintf@prec+1)& (0+255),f,b
 11560  000732                     l1715:
 11561                           
 11562                           ; BSR set to: 0
 11563                           
 11564                           ; BSR set to: 0
 11565  000732  51D3               	movf	sprintf@prec& (0+255),w,b
 11566  000734  11D4               	iorwf	(sprintf@prec+1)& (0+255),w,b
 11567  000736  B4D8               	btfsc	status,2,c
 11568  000738  D0A1               	goto	u9060
 11569  00073A  D7F0               	goto	l1716
 11570  00073C                     l1681:
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;doprnt.c: 1246: }
 11574                           ;doprnt.c: 1253: {
 11575                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 11576                           
 11577                           ; BSR set to: 0
 11578  00073C  C0CF  FFD9         	movff	sprintf@ap,fsr2l
 11579  000740  C0D0  FFDA         	movff	sprintf@ap+1,fsr2h
 11580  000744  CFDE F0D5          	movff	postinc2,sprintf@val
 11581  000748  CFDD F0D6          	movff	postdec2,sprintf@val+1
 11582  00074C  0E00               	movlw	0
 11583  00074E  BFD6               	btfsc	(sprintf@val+1)& (0+255),7,b
 11584  000750  0EFF               	movlw	-1
 11585  000752  6FD7               	movwf	(sprintf@val+2)& (0+255),b
 11586  000754  6FD8               	movwf	(sprintf@val+3)& (0+255),b
 11587                           
 11588                           ; BSR set to: 0
 11589  000756  0E02               	movlw	2
 11590  000758  27CF               	addwf	sprintf@ap& (0+255),f,b
 11591  00075A  0E00               	movlw	0
 11592  00075C  23D0               	addwfc	(sprintf@ap+1)& (0+255),f,b
 11593                           
 11594                           ; BSR set to: 0
 11595                           ;doprnt.c: 1261: if((long)val < 0) {
 11596  00075E  AFD8               	btfss	(sprintf@val+3)& (0+255),7,b
 11597  000760  D00A               	goto	l1718
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;doprnt.c: 1262: flag |= 0x03;
 11601  000762  0E03               	movlw	3
 11602  000764  13D1               	iorwf	sprintf@flag& (0+255),f,b
 11603                           
 11604                           ; BSR set to: 0
 11605                           ;doprnt.c: 1263: val = -val;
 11606  000766  1FD8               	comf	(sprintf@val+3)& (0+255),f,b
 11607  000768  1FD7               	comf	(sprintf@val+2)& (0+255),f,b
 11608  00076A  1FD6               	comf	(sprintf@val+1)& (0+255),f,b
 11609  00076C  6DD5               	negf	sprintf@val& (0+255),b
 11610  00076E  0E00               	movlw	0
 11611  000770  23D6               	addwfc	(sprintf@val+1)& (0+255),f,b
 11612  000772  23D7               	addwfc	(sprintf@val+2)& (0+255),f,b
 11613  000774  23D8               	addwfc	(sprintf@val+3)& (0+255),f,b
 11614  000776                     l1718:
 11615                           
 11616                           ; BSR set to: 0
 11617                           ;doprnt.c: 1264: }
 11618                           ;doprnt.c: 1266: }
 11619                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11620                           
 11621                           ; BSR set to: 0
 11622  000776  0E01               	movlw	1
 11623  000778  6FE2               	movwf	sprintf@c& (0+255),b
 11624  00077A                     l8930:
 11625                           
 11626                           ; BSR set to: 0
 11627  00077A  0E0A               	movlw	10
 11628  00077C  19E2               	xorwf	sprintf@c& (0+255),w,b
 11629  00077E  B4D8               	btfsc	status,2,c
 11630  000780  D018               	goto	u9040
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;doprnt.c: 1306: if(val < dpowers[c])
 11634                           
 11635                           ; BSR set to: 0
 11636                           
 11637                           ; BSR set to: 0
 11638  000782  51E2               	movf	sprintf@c& (0+255),w,b
 11639  000784  0D04               	mullw	4
 11640  000786  0EB1               	movlw	low _dpowers
 11641  000788  24F3               	addwf	prodl,w,c
 11642  00078A  6EF6               	movwf	tblptrl,c
 11643  00078C  0E77               	movlw	high _dpowers
 11644  00078E  20F4               	addwfc	prodh,w,c
 11645  000790  6EF7               	movwf	tblptrh,c
 11646  000792                     	if	0	;There are less than 3 active tblptr bytes
 11647  000792                     	endif
 11648  000792  0009               	tblrd		*+
 11649  000794  50F5               	movf	tablat,w,c
 11650  000796  5DD5               	subwf	sprintf@val& (0+255),w,b
 11651  000798  0009               	tblrd		*+
 11652  00079A  50F5               	movf	tablat,w,c
 11653  00079C  59D6               	subwfb	(sprintf@val+1)& (0+255),w,b
 11654  00079E  0009               	tblrd		*+
 11655  0007A0  50F5               	movf	tablat,w,c
 11656  0007A2  59D7               	subwfb	(sprintf@val+2)& (0+255),w,b
 11657  0007A4  0009               	tblrd		*+
 11658  0007A6  50F5               	movf	tablat,w,c
 11659  0007A8  59D8               	subwfb	(sprintf@val+3)& (0+255),w,b
 11660  0007AA  A0D8               	btfss	status,0,c
 11661  0007AC  D002               	goto	u9040
 11662                           
 11663                           ; BSR set to: 0
 11664                           
 11665                           ; BSR set to: 0
 11666                           
 11667                           ; BSR set to: 0
 11668                           ;doprnt.c: 1307: break;
 11669  0007AE  2BE2               	incf	sprintf@c& (0+255),f,b
 11670  0007B0  D7E4               	goto	l8930
 11671  0007B2                     u9040:
 11672                           
 11673                           ; BSR set to: 0
 11674                           ;doprnt.c: 1422: {
 11675                           ;doprnt.c: 1438: if(flag & 0x03)
 11676                           
 11677                           ; BSR set to: 0
 11678  0007B2  0E03               	movlw	3
 11679  0007B4  15D1               	andwf	sprintf@flag& (0+255),w,b
 11680  0007B6  6FC4               	movwf	??_sprintf& (0+255),b
 11681  0007B8  0E00               	movlw	0
 11682  0007BA  15D2               	andwf	(sprintf@flag+1)& (0+255),w,b
 11683  0007BC  6FC5               	movwf	(??_sprintf+1)& (0+255),b
 11684  0007BE  51C4               	movf	??_sprintf& (0+255),w,b
 11685  0007C0  11C5               	iorwf	(??_sprintf+1)& (0+255),w,b
 11686  0007C2  B4D8               	btfsc	status,2,c
 11687  0007C4  D008               	goto	l1722
 11688                           
 11689                           ; BSR set to: 0
 11690                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 11691  0007C6  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11692  0007CA  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11693  0007CE  0E2D               	movlw	45
 11694  0007D0  6EDF               	movwf	indf2,c
 11695                           
 11696                           ; BSR set to: 0
 11697  0007D2  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11698  0007D4  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11699  0007D6                     l1722:
 11700                           
 11701                           ; BSR set to: 0
 11702                           ;doprnt.c: 1469: }
 11703                           ;doprnt.c: 1472: prec = c;
 11704                           
 11705                           ; BSR set to: 0
 11706  0007D6  51E2               	movf	sprintf@c& (0+255),w,b
 11707  0007D8  6FD3               	movwf	sprintf@prec& (0+255),b
 11708  0007DA  6BD4               	clrf	(sprintf@prec+1)& (0+255),b
 11709  0007DC  BFD3               	btfsc	sprintf@prec& (0+255),7,b
 11710  0007DE  07D4               	decf	(sprintf@prec+1)& (0+255),f,b
 11711                           
 11712                           ;doprnt.c: 1474: while(prec--) {
 11713  0007E0  D045               	goto	l1723
 11714  0007E2                     l8950:
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;doprnt.c: 1478: {
 11718                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11719  0007E2  C0D3  F0C4         	movff	sprintf@prec,??_sprintf
 11720  0007E6  C0D4  F0C5         	movff	sprintf@prec+1,??_sprintf+1
 11721  0007EA  90D8               	bcf	status,0,c
 11722  0007EC  37C4               	rlcf	??_sprintf& (0+255),f,b
 11723  0007EE  37C5               	rlcf	(??_sprintf+1)& (0+255),f,b
 11724  0007F0  90D8               	bcf	status,0,c
 11725  0007F2  37C4               	rlcf	??_sprintf& (0+255),f,b
 11726  0007F4  37C5               	rlcf	(??_sprintf+1)& (0+255),f,b
 11727  0007F6  0EB1               	movlw	low _dpowers
 11728  0007F8  25C4               	addwf	??_sprintf& (0+255),w,b
 11729  0007FA  6EF6               	movwf	tblptrl,c
 11730  0007FC  0E77               	movlw	high _dpowers
 11731  0007FE  21C5               	addwfc	(??_sprintf+1)& (0+255),w,b
 11732  000800  6EF7               	movwf	tblptrh,c
 11733  000802                     	if	0	;There are less than 3 active tblptr bytes
 11734  000802                     	endif
 11735  000802  0009               	tblrd		*+
 11736  000804  CFF5 F01C          	movff	tablat,___lldiv@divisor
 11737  000808  0009               	tblrd		*+
 11738  00080A  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 11739  00080E  0009               	tblrd		*+
 11740  000810  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 11741  000814  000A               	tblrd		*-
 11742  000816  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 11743  00081A  C0D5  F018         	movff	sprintf@val,___lldiv@dividend
 11744  00081E  C0D6  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 11745  000822  C0D7  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 11746  000826  C0D8  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 11747  00082A  ECB7  F01C         	call	___lldiv	;wreg free
 11748  00082E  C018  F0B3         	movff	?___lldiv,___llmod@dividend
 11749  000832  C019  F0B4         	movff	?___lldiv+1,___llmod@dividend+1
 11750  000836  C01A  F0B5         	movff	?___lldiv+2,___llmod@dividend+2
 11751  00083A  C01B  F0B6         	movff	?___lldiv+3,___llmod@dividend+3
 11752  00083E  0E0A               	movlw	10
 11753  000840  0100               	movlb	0	; () banked
 11754  000842  6FB7               	movwf	___llmod@divisor& (0+255),b
 11755  000844  0E00               	movlw	0
 11756  000846  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 11757  000848  0E00               	movlw	0
 11758  00084A  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 11759  00084C  0E00               	movlw	0
 11760  00084E  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 11761  000850  EC53  F01E         	call	___llmod	;wreg free
 11762  000854  0100               	movlb	0	; () banked
 11763  000856  51B3               	movf	?___llmod& (0+255),w,b
 11764  000858  0F30               	addlw	48
 11765  00085A  6FE2               	movwf	sprintf@c& (0+255),b
 11766                           
 11767                           ; BSR set to: 0
 11768                           ;doprnt.c: 1523: }
 11769                           ;doprnt.c: 1524: ((*sp++ = (c)));
 11770  00085C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11771  000860  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11772  000864  C0E2  FFDF         	movff	sprintf@c,indf2
 11773                           
 11774                           ; BSR set to: 0
 11775  000868  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11776  00086A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11777  00086C                     l1723:
 11778                           
 11779                           ; BSR set to: 0
 11780                           
 11781                           ; BSR set to: 0
 11782  00086C  07D3               	decf	sprintf@prec& (0+255),f,b
 11783  00086E  A0D8               	btfss	status,0,c
 11784  000870  07D4               	decf	(sprintf@prec+1)& (0+255),f,b
 11785  000872  29D3               	incf	sprintf@prec& (0+255),w,b
 11786  000874  E1B6               	bnz	l8950
 11787  000876  29D4               	incf	(sprintf@prec+1)& (0+255),w,b
 11788  000878  A4D8               	btfss	status,2,c
 11789  00087A  D7B3               	goto	l1724
 11790  00087C                     u9060:
 11791                           
 11792                           ; BSR set to: 0
 11793                           
 11794                           ; BSR set to: 0
 11795                           
 11796                           ; BSR set to: 0
 11797  00087C  C0BE  FFF6         	movff	sprintf@f,tblptrl
 11798  000880  C0BF  FFF7         	movff	sprintf@f+1,tblptrh
 11799  000884  4BBE               	infsnz	sprintf@f& (0+255),f,b
 11800  000886  2BBF               	incf	(sprintf@f+1)& (0+255),f,b
 11801  000888                     	if	0	;tblptru may be non-zero
 11802  000888                     	endif
 11803  000888                     	if	0	;tblptru may be non-zero
 11804  000888                     	endif
 11805  000888  0008               	tblrd		*
 11806  00088A  CFF5 F0E2          	movff	tablat,sprintf@c
 11807  00088E  51E2               	movf	sprintf@c& (0+255),w,b
 11808  000890  A4D8               	btfss	status,2,c
 11809  000892  D42C               	goto	l1666
 11810  000894                     u9070:
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;doprnt.c: 1538: *sp = 0;
 11814                           
 11815                           ; BSR set to: 0
 11816                           
 11817                           ;doprnt.c: 1525: }
 11818                           ;doprnt.c: 1533: }
 11819                           ;doprnt.c: 1535: alldone:
 11820                           
 11821                           ; BSR set to: 0
 11822  000894  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11823  000898  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11824  00089C  0E00               	movlw	0
 11825  00089E  6EDF               	movwf	indf2,c
 11826  0008A0  0012               	return	
 11827  0008A2                     __end_of_sprintf:
 11828                           	opt stack 0
 11829                           tosu	equ	0xFFF
 11830                           tosh	equ	0xFFE
 11831                           tosl	equ	0xFFD
 11832                           pclath	equ	0xFFA
 11833                           tblptru	equ	0xFF8
 11834                           tblptrh	equ	0xFF7
 11835                           tblptrl	equ	0xFF6
 11836                           tablat	equ	0xFF5
 11837                           prodh	equ	0xFF4
 11838                           prodl	equ	0xFF3
 11839                           intcon	equ	0xFF2
 11840                           intcon2	equ	0xFF1
 11841                           postinc0	equ	0xFEE
 11842                           wreg	equ	0xFE8
 11843                           indf1	equ	0xFE7
 11844                           postdec1	equ	0xFE5
 11845                           fsr1h	equ	0xFE2
 11846                           fsr1l	equ	0xFE1
 11847                           indf2	equ	0xFDF
 11848                           postinc2	equ	0xFDE
 11849                           postdec2	equ	0xFDD
 11850                           fsr2h	equ	0xFDA
 11851                           fsr2l	equ	0xFD9
 11852                           status	equ	0xFD8
 11853                           
 11854 ;; *************** function _scale *****************
 11855 ;; Defined at:
 11856 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;  scl             1    wreg     char 
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;  scl             1   24[BANK0 ] char 
 11861 ;; Return value:  Size  Location     Type
 11862 ;;                  3   18[BANK0 ] char 
 11863 ;; Registers used:
 11864 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11865 ;; Tracked objects:
 11866 ;;		On entry : 0/0
 11867 ;;		On exit  : 0/0
 11868 ;;		Unchanged: 0/0
 11869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11870 ;;      Params:         0       3       0       0       0       0       0
 11871 ;;      Locals:         0       4       0       0       0       0       0
 11872 ;;      Temps:          0       0       0       0       0       0       0
 11873 ;;      Totals:         0       7       0       0       0       0       0
 11874 ;;Total ram usage:        7 bytes
 11875 ;; Hardware stack levels used:    1
 11876 ;; Hardware stack levels required when called:    5
 11877 ;; This function calls:
 11878 ;;		___awdiv
 11879 ;;		___awmod
 11880 ;;		___ftmul
 11881 ;;		___wmul
 11882 ;; This function is called by:
 11883 ;;		_sprintf
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           	psect	text40
 11888  0008A2                     __ptext40:
 11889                           	opt stack 0
 11890  0008A2                     _scale:
 11891                           	opt stack 23
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;incstack = 0
 11895                           ;scale@scl stored from wreg
 11896  0008A2  0100               	movlb	0	; () banked
 11897  0008A4  6F78               	movwf	scale@scl& (0+255),b
 11898                           
 11899                           ;doprnt.c: 428: if(scl < 0) {
 11900  0008A6  0100               	movlb	0	; () banked
 11901  0008A8  AF78               	btfss	scale@scl& (0+255),7,b
 11902  0008AA  D106               	goto	l1655
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;doprnt.c: 429: scl = -scl;
 11906  0008AC  6D78               	negf	scale@scl& (0+255),b
 11907                           
 11908                           ;doprnt.c: 430: if(scl>=110)
 11909  0008AE  5178               	movf	scale@scl& (0+255),w,b
 11910  0008B0  0A80               	xorlw	128
 11911  0008B2  0F12               	addlw	-238
 11912  0008B4  A0D8               	btfss	status,0,c
 11913  0008B6  D093               	goto	l1656
 11914                           
 11915                           ; BSR set to: 0
 11916                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 11917  0008B8  0E00               	movlw	0
 11918  0008BA  6E29               	movwf	___wmul@multiplicand+1,c
 11919  0008BC  0E03               	movlw	3
 11920  0008BE  6E28               	movwf	___wmul@multiplicand,c
 11921  0008C0  0E00               	movlw	0
 11922  0008C2  6E21               	movwf	___awdiv@divisor+1,c
 11923  0008C4  0E0A               	movlw	10
 11924  0008C6  6E20               	movwf	___awdiv@divisor,c
 11925  0008C8  0E00               	movlw	0
 11926  0008CA  6E1B               	movwf	___awmod@divisor+1,c
 11927  0008CC  0E64               	movlw	100
 11928  0008CE  6E1A               	movwf	___awmod@divisor,c
 11929  0008D0  5178               	movf	scale@scl& (0+255),w,b
 11930  0008D2  6E18               	movwf	___awmod@dividend,c
 11931  0008D4  6A19               	clrf	___awmod@dividend+1,c
 11932  0008D6  BE18               	btfsc	___awmod@dividend,7,c
 11933  0008D8  0619               	decf	___awmod@dividend+1,f,c
 11934  0008DA  ECE7  F01D         	call	___awmod	;wreg free
 11935  0008DE  C018  F01E         	movff	?___awmod,___awdiv@dividend
 11936  0008E2  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 11937  0008E6  EC75  F01C         	call	___awdiv	;wreg free
 11938  0008EA  0E09               	movlw	9
 11939  0008EC  241E               	addwf	?___awdiv,w,c
 11940  0008EE  6E26               	movwf	___wmul@multiplier,c
 11941  0008F0  0E00               	movlw	0
 11942  0008F2  201F               	addwfc	?___awdiv+1,w,c
 11943  0008F4  6E27               	movwf	___wmul@multiplier+1,c
 11944  0008F6  EC41  F023         	call	___wmul	;wreg free
 11945  0008FA  0E00               	movlw	low __npowers_
 11946  0008FC  2426               	addwf	?___wmul,w,c
 11947  0008FE  6EF6               	movwf	tblptrl,c
 11948  000900  0E78               	movlw	high __npowers_
 11949  000902  2027               	addwfc	?___wmul+1,w,c
 11950  000904  6EF7               	movwf	tblptrh,c
 11951  000906                     	if	0	;There are less than 3 active tblptr bytes
 11952  000906                     	endif
 11953  000906  0009               	tblrd		*+
 11954  000908  CFF5 F069          	movff	tablat,___ftmul@f2
 11955  00090C  0009               	tblrd		*+
 11956  00090E  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11957  000912  000A               	tblrd		*-
 11958  000914  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11959  000918  0E00               	movlw	0
 11960  00091A  6E21               	movwf	___awdiv@divisor+1,c
 11961  00091C  0E64               	movlw	100
 11962  00091E  6E20               	movwf	___awdiv@divisor,c
 11963  000920  0100               	movlb	0	; () banked
 11964  000922  5178               	movf	scale@scl& (0+255),w,b
 11965  000924  6E1E               	movwf	___awdiv@dividend,c
 11966  000926  6A1F               	clrf	___awdiv@dividend+1,c
 11967  000928  BE1E               	btfsc	___awdiv@dividend,7,c
 11968  00092A  061F               	decf	___awdiv@dividend+1,f,c
 11969  00092C  EC75  F01C         	call	___awdiv	;wreg free
 11970  000930  0E12               	movlw	18
 11971  000932  241E               	addwf	?___awdiv,w,c
 11972  000934  6E26               	movwf	___wmul@multiplier,c
 11973  000936  0E00               	movlw	0
 11974  000938  201F               	addwfc	?___awdiv+1,w,c
 11975  00093A  6E27               	movwf	___wmul@multiplier+1,c
 11976  00093C  0E00               	movlw	0
 11977  00093E  6E29               	movwf	___wmul@multiplicand+1,c
 11978  000940  0E03               	movlw	3
 11979  000942  6E28               	movwf	___wmul@multiplicand,c
 11980  000944  EC41  F023         	call	___wmul	;wreg free
 11981  000948  0E00               	movlw	low __npowers_
 11982  00094A  2426               	addwf	?___wmul,w,c
 11983  00094C  6EF6               	movwf	tblptrl,c
 11984  00094E  0E78               	movlw	high __npowers_
 11985  000950  2027               	addwfc	?___wmul+1,w,c
 11986  000952  6EF7               	movwf	tblptrh,c
 11987  000954                     	if	0	;There are less than 3 active tblptr bytes
 11988  000954                     	endif
 11989  000954  0009               	tblrd		*+
 11990  000956  CFF5 F066          	movff	tablat,___ftmul@f1
 11991  00095A  0009               	tblrd		*+
 11992  00095C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11993  000960  000A               	tblrd		*-
 11994  000962  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11995  000966  EC32  F016         	call	___ftmul	;wreg free
 11996  00096A  C066  F075         	movff	?___ftmul,_scale$3978
 11997  00096E  C067  F076         	movff	?___ftmul+1,_scale$3978+1
 11998  000972  C068  F077         	movff	?___ftmul+2,_scale$3978+2
 11999                           
 12000                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 12001  000976  C075  F066         	movff	_scale$3978,___ftmul@f1
 12002  00097A  C076  F067         	movff	_scale$3978+1,___ftmul@f1+1
 12003  00097E  C077  F068         	movff	_scale$3978+2,___ftmul@f1+2
 12004  000982  0E00               	movlw	0
 12005  000984  6E29               	movwf	___wmul@multiplicand+1,c
 12006  000986  0E03               	movlw	3
 12007  000988  6E28               	movwf	___wmul@multiplicand,c
 12008  00098A  0E00               	movlw	0
 12009  00098C  6E1B               	movwf	___awmod@divisor+1,c
 12010  00098E  0E0A               	movlw	10
 12011  000990  6E1A               	movwf	___awmod@divisor,c
 12012  000992  0100               	movlb	0	; () banked
 12013  000994  5178               	movf	scale@scl& (0+255),w,b
 12014  000996  6E18               	movwf	___awmod@dividend,c
 12015  000998  6A19               	clrf	___awmod@dividend+1,c
 12016  00099A  BE18               	btfsc	___awmod@dividend,7,c
 12017  00099C  0619               	decf	___awmod@dividend+1,f,c
 12018  00099E  ECE7  F01D         	call	___awmod	;wreg free
 12019  0009A2  C018  F026         	movff	?___awmod,___wmul@multiplier
 12020  0009A6  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12021  0009AA  EC41  F023         	call	___wmul	;wreg free
 12022  0009AE  0E00               	movlw	low __npowers_
 12023  0009B0  2426               	addwf	?___wmul,w,c
 12024  0009B2  6EF6               	movwf	tblptrl,c
 12025  0009B4  0E78               	movlw	high __npowers_
 12026  0009B6  2027               	addwfc	?___wmul+1,w,c
 12027  0009B8  6EF7               	movwf	tblptrh,c
 12028  0009BA                     	if	0	;There are less than 3 active tblptr bytes
 12029  0009BA                     	endif
 12030  0009BA  0009               	tblrd		*+
 12031  0009BC  CFF5 F069          	movff	tablat,___ftmul@f2
 12032  0009C0  0009               	tblrd		*+
 12033  0009C2  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12034  0009C6  000A               	tblrd		*-
 12035  0009C8  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12036  0009CC  EC32  F016         	call	___ftmul	;wreg free
 12037  0009D0  C066  F072         	movff	?___ftmul,?_scale
 12038  0009D4  C067  F073         	movff	?___ftmul+1,?_scale+1
 12039  0009D8  C068  F074         	movff	?___ftmul+2,?_scale+2
 12040  0009DC  0012               	return	
 12041  0009DE                     l1656:
 12042                           
 12043                           ;doprnt.c: 432: else if(scl > 10)
 12044  0009DE  0100               	movlb	0	; () banked
 12045  0009E0  5178               	movf	scale@scl& (0+255),w,b
 12046  0009E2  0A80               	xorlw	128
 12047  0009E4  0F75               	addlw	-139
 12048  0009E6  A0D8               	btfss	status,0,c
 12049  0009E8  D054               	goto	l1659
 12050                           
 12051                           ; BSR set to: 0
 12052                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 12053  0009EA  0E00               	movlw	0
 12054  0009EC  6E21               	movwf	___awdiv@divisor+1,c
 12055  0009EE  0E0A               	movlw	10
 12056  0009F0  6E20               	movwf	___awdiv@divisor,c
 12057  0009F2  5178               	movf	scale@scl& (0+255),w,b
 12058  0009F4  6E1E               	movwf	___awdiv@dividend,c
 12059  0009F6  6A1F               	clrf	___awdiv@dividend+1,c
 12060  0009F8  BE1E               	btfsc	___awdiv@dividend,7,c
 12061  0009FA  061F               	decf	___awdiv@dividend+1,f,c
 12062  0009FC  EC75  F01C         	call	___awdiv	;wreg free
 12063  000A00  0E09               	movlw	9
 12064  000A02  241E               	addwf	?___awdiv,w,c
 12065  000A04  6E26               	movwf	___wmul@multiplier,c
 12066  000A06  0E00               	movlw	0
 12067  000A08  201F               	addwfc	?___awdiv+1,w,c
 12068  000A0A  6E27               	movwf	___wmul@multiplier+1,c
 12069  000A0C  0E00               	movlw	0
 12070  000A0E  6E29               	movwf	___wmul@multiplicand+1,c
 12071  000A10  0E03               	movlw	3
 12072  000A12  6E28               	movwf	___wmul@multiplicand,c
 12073  000A14  EC41  F023         	call	___wmul	;wreg free
 12074  000A18  0E00               	movlw	low __npowers_
 12075  000A1A  2426               	addwf	?___wmul,w,c
 12076  000A1C  6EF6               	movwf	tblptrl,c
 12077  000A1E  0E78               	movlw	high __npowers_
 12078  000A20  2027               	addwfc	?___wmul+1,w,c
 12079  000A22  6EF7               	movwf	tblptrh,c
 12080  000A24                     	if	0	;There are less than 3 active tblptr bytes
 12081  000A24                     	endif
 12082  000A24  0009               	tblrd		*+
 12083  000A26  CFF5 F066          	movff	tablat,___ftmul@f1
 12084  000A2A  0009               	tblrd		*+
 12085  000A2C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12086  000A30  000A               	tblrd		*-
 12087  000A32  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12088  000A36  0E00               	movlw	0
 12089  000A38  6E29               	movwf	___wmul@multiplicand+1,c
 12090  000A3A  0E03               	movlw	3
 12091  000A3C  6E28               	movwf	___wmul@multiplicand,c
 12092  000A3E  0E00               	movlw	0
 12093  000A40  6E1B               	movwf	___awmod@divisor+1,c
 12094  000A42  0E0A               	movlw	10
 12095  000A44  6E1A               	movwf	___awmod@divisor,c
 12096  000A46  0100               	movlb	0	; () banked
 12097  000A48  5178               	movf	scale@scl& (0+255),w,b
 12098  000A4A  6E18               	movwf	___awmod@dividend,c
 12099  000A4C  6A19               	clrf	___awmod@dividend+1,c
 12100  000A4E  BE18               	btfsc	___awmod@dividend,7,c
 12101  000A50  0619               	decf	___awmod@dividend+1,f,c
 12102  000A52  ECE7  F01D         	call	___awmod	;wreg free
 12103  000A56  C018  F026         	movff	?___awmod,___wmul@multiplier
 12104  000A5A  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12105  000A5E  EC41  F023         	call	___wmul	;wreg free
 12106  000A62  0E00               	movlw	low __npowers_
 12107  000A64  2426               	addwf	?___wmul,w,c
 12108  000A66  6EF6               	movwf	tblptrl,c
 12109  000A68  0E78               	movlw	high __npowers_
 12110  000A6A  2027               	addwfc	?___wmul+1,w,c
 12111  000A6C  6EF7               	movwf	tblptrh,c
 12112  000A6E                     	if	0	;There are less than 3 active tblptr bytes
 12113  000A6E                     	endif
 12114  000A6E  0009               	tblrd		*+
 12115  000A70  CFF5 F069          	movff	tablat,___ftmul@f2
 12116  000A74  0009               	tblrd		*+
 12117  000A76  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12118  000A7A  000A               	tblrd		*-
 12119  000A7C  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12120  000A80  EC32  F016         	call	___ftmul	;wreg free
 12121  000A84  C066  F072         	movff	?___ftmul,?_scale
 12122  000A88  C067  F073         	movff	?___ftmul+1,?_scale+1
 12123  000A8C  C068  F074         	movff	?___ftmul+2,?_scale+2
 12124  000A90  0012               	return	
 12125  000A92                     l1659:
 12126                           
 12127                           ;doprnt.c: 434: return _npowers_[scl];
 12128  000A92  0100               	movlb	0	; () banked
 12129  000A94  5178               	movf	scale@scl& (0+255),w,b
 12130  000A96  0D03               	mullw	3
 12131  000A98  0E00               	movlw	low __npowers_
 12132  000A9A  24F3               	addwf	prodl,w,c
 12133  000A9C  6EF6               	movwf	tblptrl,c
 12134  000A9E  0E78               	movlw	high __npowers_
 12135  000AA0  20F4               	addwfc	prodh,w,c
 12136  000AA2  6EF7               	movwf	tblptrh,c
 12137  000AA4                     	if	0	;There are less than 3 active tblptr bytes
 12138  000AA4                     	endif
 12139  000AA4  0009               	tblrd		*+
 12140  000AA6  CFF5 F072          	movff	tablat,?_scale
 12141  000AAA  0009               	tblrd		*+
 12142  000AAC  CFF5 F073          	movff	tablat,?_scale+1
 12143  000AB0  000A               	tblrd		*-
 12144  000AB2  CFF5 F074          	movff	tablat,?_scale+2
 12145                           
 12146                           ; BSR set to: 0
 12147  000AB6  0012               	return	
 12148  000AB8                     l1655:
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;doprnt.c: 435: }
 12152                           ;doprnt.c: 436: if(scl>=110)
 12153                           
 12154                           ; BSR set to: 0
 12155  000AB8  5178               	movf	scale@scl& (0+255),w,b
 12156  000ABA  0A80               	xorlw	128
 12157  000ABC  0F12               	addlw	-238
 12158  000ABE  A0D8               	btfss	status,0,c
 12159  000AC0  D093               	goto	l1660
 12160                           
 12161                           ; BSR set to: 0
 12162                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 12163  000AC2  0E00               	movlw	0
 12164  000AC4  6E29               	movwf	___wmul@multiplicand+1,c
 12165  000AC6  0E03               	movlw	3
 12166  000AC8  6E28               	movwf	___wmul@multiplicand,c
 12167  000ACA  0E00               	movlw	0
 12168  000ACC  6E21               	movwf	___awdiv@divisor+1,c
 12169  000ACE  0E0A               	movlw	10
 12170  000AD0  6E20               	movwf	___awdiv@divisor,c
 12171  000AD2  0E00               	movlw	0
 12172  000AD4  6E1B               	movwf	___awmod@divisor+1,c
 12173  000AD6  0E64               	movlw	100
 12174  000AD8  6E1A               	movwf	___awmod@divisor,c
 12175  000ADA  5178               	movf	scale@scl& (0+255),w,b
 12176  000ADC  6E18               	movwf	___awmod@dividend,c
 12177  000ADE  6A19               	clrf	___awmod@dividend+1,c
 12178  000AE0  BE18               	btfsc	___awmod@dividend,7,c
 12179  000AE2  0619               	decf	___awmod@dividend+1,f,c
 12180  000AE4  ECE7  F01D         	call	___awmod	;wreg free
 12181  000AE8  C018  F01E         	movff	?___awmod,___awdiv@dividend
 12182  000AEC  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 12183  000AF0  EC75  F01C         	call	___awdiv	;wreg free
 12184  000AF4  0E09               	movlw	9
 12185  000AF6  241E               	addwf	?___awdiv,w,c
 12186  000AF8  6E26               	movwf	___wmul@multiplier,c
 12187  000AFA  0E00               	movlw	0
 12188  000AFC  201F               	addwfc	?___awdiv+1,w,c
 12189  000AFE  6E27               	movwf	___wmul@multiplier+1,c
 12190  000B00  EC41  F023         	call	___wmul	;wreg free
 12191  000B04  0ED9               	movlw	low __powers_
 12192  000B06  2426               	addwf	?___wmul,w,c
 12193  000B08  6EF6               	movwf	tblptrl,c
 12194  000B0A  0E77               	movlw	high __powers_
 12195  000B0C  2027               	addwfc	?___wmul+1,w,c
 12196  000B0E  6EF7               	movwf	tblptrh,c
 12197  000B10                     	if	0	;There are less than 3 active tblptr bytes
 12198  000B10                     	endif
 12199  000B10  0009               	tblrd		*+
 12200  000B12  CFF5 F069          	movff	tablat,___ftmul@f2
 12201  000B16  0009               	tblrd		*+
 12202  000B18  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12203  000B1C  000A               	tblrd		*-
 12204  000B1E  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12205  000B22  0E00               	movlw	0
 12206  000B24  6E21               	movwf	___awdiv@divisor+1,c
 12207  000B26  0E64               	movlw	100
 12208  000B28  6E20               	movwf	___awdiv@divisor,c
 12209  000B2A  0100               	movlb	0	; () banked
 12210  000B2C  5178               	movf	scale@scl& (0+255),w,b
 12211  000B2E  6E1E               	movwf	___awdiv@dividend,c
 12212  000B30  6A1F               	clrf	___awdiv@dividend+1,c
 12213  000B32  BE1E               	btfsc	___awdiv@dividend,7,c
 12214  000B34  061F               	decf	___awdiv@dividend+1,f,c
 12215  000B36  EC75  F01C         	call	___awdiv	;wreg free
 12216  000B3A  0E12               	movlw	18
 12217  000B3C  241E               	addwf	?___awdiv,w,c
 12218  000B3E  6E26               	movwf	___wmul@multiplier,c
 12219  000B40  0E00               	movlw	0
 12220  000B42  201F               	addwfc	?___awdiv+1,w,c
 12221  000B44  6E27               	movwf	___wmul@multiplier+1,c
 12222  000B46  0E00               	movlw	0
 12223  000B48  6E29               	movwf	___wmul@multiplicand+1,c
 12224  000B4A  0E03               	movlw	3
 12225  000B4C  6E28               	movwf	___wmul@multiplicand,c
 12226  000B4E  EC41  F023         	call	___wmul	;wreg free
 12227  000B52  0ED9               	movlw	low __powers_
 12228  000B54  2426               	addwf	?___wmul,w,c
 12229  000B56  6EF6               	movwf	tblptrl,c
 12230  000B58  0E77               	movlw	high __powers_
 12231  000B5A  2027               	addwfc	?___wmul+1,w,c
 12232  000B5C  6EF7               	movwf	tblptrh,c
 12233  000B5E                     	if	0	;There are less than 3 active tblptr bytes
 12234  000B5E                     	endif
 12235  000B5E  0009               	tblrd		*+
 12236  000B60  CFF5 F066          	movff	tablat,___ftmul@f1
 12237  000B64  0009               	tblrd		*+
 12238  000B66  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12239  000B6A  000A               	tblrd		*-
 12240  000B6C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12241  000B70  EC32  F016         	call	___ftmul	;wreg free
 12242  000B74  C066  F075         	movff	?___ftmul,_scale$3978
 12243  000B78  C067  F076         	movff	?___ftmul+1,_scale$3978+1
 12244  000B7C  C068  F077         	movff	?___ftmul+2,_scale$3978+2
 12245                           
 12246                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 12247  000B80  C075  F066         	movff	_scale$3978,___ftmul@f1
 12248  000B84  C076  F067         	movff	_scale$3978+1,___ftmul@f1+1
 12249  000B88  C077  F068         	movff	_scale$3978+2,___ftmul@f1+2
 12250  000B8C  0E00               	movlw	0
 12251  000B8E  6E29               	movwf	___wmul@multiplicand+1,c
 12252  000B90  0E03               	movlw	3
 12253  000B92  6E28               	movwf	___wmul@multiplicand,c
 12254  000B94  0E00               	movlw	0
 12255  000B96  6E1B               	movwf	___awmod@divisor+1,c
 12256  000B98  0E0A               	movlw	10
 12257  000B9A  6E1A               	movwf	___awmod@divisor,c
 12258  000B9C  0100               	movlb	0	; () banked
 12259  000B9E  5178               	movf	scale@scl& (0+255),w,b
 12260  000BA0  6E18               	movwf	___awmod@dividend,c
 12261  000BA2  6A19               	clrf	___awmod@dividend+1,c
 12262  000BA4  BE18               	btfsc	___awmod@dividend,7,c
 12263  000BA6  0619               	decf	___awmod@dividend+1,f,c
 12264  000BA8  ECE7  F01D         	call	___awmod	;wreg free
 12265  000BAC  C018  F026         	movff	?___awmod,___wmul@multiplier
 12266  000BB0  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12267  000BB4  EC41  F023         	call	___wmul	;wreg free
 12268  000BB8  0ED9               	movlw	low __powers_
 12269  000BBA  2426               	addwf	?___wmul,w,c
 12270  000BBC  6EF6               	movwf	tblptrl,c
 12271  000BBE  0E77               	movlw	high __powers_
 12272  000BC0  2027               	addwfc	?___wmul+1,w,c
 12273  000BC2  6EF7               	movwf	tblptrh,c
 12274  000BC4                     	if	0	;There are less than 3 active tblptr bytes
 12275  000BC4                     	endif
 12276  000BC4  0009               	tblrd		*+
 12277  000BC6  CFF5 F069          	movff	tablat,___ftmul@f2
 12278  000BCA  0009               	tblrd		*+
 12279  000BCC  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12280  000BD0  000A               	tblrd		*-
 12281  000BD2  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12282  000BD6  EC32  F016         	call	___ftmul	;wreg free
 12283  000BDA  C066  F072         	movff	?___ftmul,?_scale
 12284  000BDE  C067  F073         	movff	?___ftmul+1,?_scale+1
 12285  000BE2  C068  F074         	movff	?___ftmul+2,?_scale+2
 12286  000BE6  0012               	return	
 12287  000BE8                     l1660:
 12288                           
 12289                           ;doprnt.c: 438: else if(scl > 10)
 12290  000BE8  0100               	movlb	0	; () banked
 12291  000BEA  5178               	movf	scale@scl& (0+255),w,b
 12292  000BEC  0A80               	xorlw	128
 12293  000BEE  0F75               	addlw	-139
 12294  000BF0  A0D8               	btfss	status,0,c
 12295  000BF2  D054               	goto	l1662
 12296                           
 12297                           ; BSR set to: 0
 12298                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 12299  000BF4  0E00               	movlw	0
 12300  000BF6  6E21               	movwf	___awdiv@divisor+1,c
 12301  000BF8  0E0A               	movlw	10
 12302  000BFA  6E20               	movwf	___awdiv@divisor,c
 12303  000BFC  5178               	movf	scale@scl& (0+255),w,b
 12304  000BFE  6E1E               	movwf	___awdiv@dividend,c
 12305  000C00  6A1F               	clrf	___awdiv@dividend+1,c
 12306  000C02  BE1E               	btfsc	___awdiv@dividend,7,c
 12307  000C04  061F               	decf	___awdiv@dividend+1,f,c
 12308  000C06  EC75  F01C         	call	___awdiv	;wreg free
 12309  000C0A  0E09               	movlw	9
 12310  000C0C  241E               	addwf	?___awdiv,w,c
 12311  000C0E  6E26               	movwf	___wmul@multiplier,c
 12312  000C10  0E00               	movlw	0
 12313  000C12  201F               	addwfc	?___awdiv+1,w,c
 12314  000C14  6E27               	movwf	___wmul@multiplier+1,c
 12315  000C16  0E00               	movlw	0
 12316  000C18  6E29               	movwf	___wmul@multiplicand+1,c
 12317  000C1A  0E03               	movlw	3
 12318  000C1C  6E28               	movwf	___wmul@multiplicand,c
 12319  000C1E  EC41  F023         	call	___wmul	;wreg free
 12320  000C22  0ED9               	movlw	low __powers_
 12321  000C24  2426               	addwf	?___wmul,w,c
 12322  000C26  6EF6               	movwf	tblptrl,c
 12323  000C28  0E77               	movlw	high __powers_
 12324  000C2A  2027               	addwfc	?___wmul+1,w,c
 12325  000C2C  6EF7               	movwf	tblptrh,c
 12326  000C2E                     	if	0	;There are less than 3 active tblptr bytes
 12327  000C2E                     	endif
 12328  000C2E  0009               	tblrd		*+
 12329  000C30  CFF5 F066          	movff	tablat,___ftmul@f1
 12330  000C34  0009               	tblrd		*+
 12331  000C36  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12332  000C3A  000A               	tblrd		*-
 12333  000C3C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12334  000C40  0E00               	movlw	0
 12335  000C42  6E29               	movwf	___wmul@multiplicand+1,c
 12336  000C44  0E03               	movlw	3
 12337  000C46  6E28               	movwf	___wmul@multiplicand,c
 12338  000C48  0E00               	movlw	0
 12339  000C4A  6E1B               	movwf	___awmod@divisor+1,c
 12340  000C4C  0E0A               	movlw	10
 12341  000C4E  6E1A               	movwf	___awmod@divisor,c
 12342  000C50  0100               	movlb	0	; () banked
 12343  000C52  5178               	movf	scale@scl& (0+255),w,b
 12344  000C54  6E18               	movwf	___awmod@dividend,c
 12345  000C56  6A19               	clrf	___awmod@dividend+1,c
 12346  000C58  BE18               	btfsc	___awmod@dividend,7,c
 12347  000C5A  0619               	decf	___awmod@dividend+1,f,c
 12348  000C5C  ECE7  F01D         	call	___awmod	;wreg free
 12349  000C60  C018  F026         	movff	?___awmod,___wmul@multiplier
 12350  000C64  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12351  000C68  EC41  F023         	call	___wmul	;wreg free
 12352  000C6C  0ED9               	movlw	low __powers_
 12353  000C6E  2426               	addwf	?___wmul,w,c
 12354  000C70  6EF6               	movwf	tblptrl,c
 12355  000C72  0E77               	movlw	high __powers_
 12356  000C74  2027               	addwfc	?___wmul+1,w,c
 12357  000C76  6EF7               	movwf	tblptrh,c
 12358  000C78                     	if	0	;There are less than 3 active tblptr bytes
 12359  000C78                     	endif
 12360  000C78  0009               	tblrd		*+
 12361  000C7A  CFF5 F069          	movff	tablat,___ftmul@f2
 12362  000C7E  0009               	tblrd		*+
 12363  000C80  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12364  000C84  000A               	tblrd		*-
 12365  000C86  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12366  000C8A  EC32  F016         	call	___ftmul	;wreg free
 12367  000C8E  C066  F072         	movff	?___ftmul,?_scale
 12368  000C92  C067  F073         	movff	?___ftmul+1,?_scale+1
 12369  000C96  C068  F074         	movff	?___ftmul+2,?_scale+2
 12370  000C9A  0012               	return	
 12371  000C9C                     l1662:
 12372                           
 12373                           ;doprnt.c: 440: return _powers_[scl];
 12374  000C9C  0100               	movlb	0	; () banked
 12375  000C9E  5178               	movf	scale@scl& (0+255),w,b
 12376  000CA0  0D03               	mullw	3
 12377  000CA2  0ED9               	movlw	low __powers_
 12378  000CA4  24F3               	addwf	prodl,w,c
 12379  000CA6  6EF6               	movwf	tblptrl,c
 12380  000CA8  0E77               	movlw	high __powers_
 12381  000CAA  20F4               	addwfc	prodh,w,c
 12382  000CAC  6EF7               	movwf	tblptrh,c
 12383  000CAE                     	if	0	;There are less than 3 active tblptr bytes
 12384  000CAE                     	endif
 12385  000CAE  0009               	tblrd		*+
 12386  000CB0  CFF5 F072          	movff	tablat,?_scale
 12387  000CB4  0009               	tblrd		*+
 12388  000CB6  CFF5 F073          	movff	tablat,?_scale+1
 12389  000CBA  000A               	tblrd		*-
 12390  000CBC  CFF5 F074          	movff	tablat,?_scale+2
 12391  000CC0  0012               	return	
 12392  000CC2                     __end_of_scale:
 12393                           	opt stack 0
 12394                           tosu	equ	0xFFF
 12395                           tosh	equ	0xFFE
 12396                           tosl	equ	0xFFD
 12397                           pclath	equ	0xFFA
 12398                           tblptru	equ	0xFF8
 12399                           tblptrh	equ	0xFF7
 12400                           tblptrl	equ	0xFF6
 12401                           tablat	equ	0xFF5
 12402                           prodh	equ	0xFF4
 12403                           prodl	equ	0xFF3
 12404                           intcon	equ	0xFF2
 12405                           intcon2	equ	0xFF1
 12406                           postinc0	equ	0xFEE
 12407                           wreg	equ	0xFE8
 12408                           indf1	equ	0xFE7
 12409                           postdec1	equ	0xFE5
 12410                           fsr1h	equ	0xFE2
 12411                           fsr1l	equ	0xFE1
 12412                           indf2	equ	0xFDF
 12413                           postinc2	equ	0xFDE
 12414                           postdec2	equ	0xFDD
 12415                           fsr2h	equ	0xFDA
 12416                           fsr2l	equ	0xFD9
 12417                           status	equ	0xFD8
 12418                           
 12419 ;; *************** function _fround *****************
 12420 ;; Defined at:
 12421 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 12422 ;; Parameters:    Size  Location     Type
 12423 ;;  prec            1    wreg     unsigned char 
 12424 ;; Auto vars:     Size  Location     Type
 12425 ;;  prec            1   27[BANK0 ] unsigned char 
 12426 ;; Return value:  Size  Location     Type
 12427 ;;                  3   18[BANK0 ] unsigned char 
 12428 ;; Registers used:
 12429 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12430 ;; Tracked objects:
 12431 ;;		On entry : 0/0
 12432 ;;		On exit  : 0/0
 12433 ;;		Unchanged: 0/0
 12434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12435 ;;      Params:         0       3       0       0       0       0       0
 12436 ;;      Locals:         0       7       0       0       0       0       0
 12437 ;;      Temps:          0       0       0       0       0       0       0
 12438 ;;      Totals:         0      10       0       0       0       0       0
 12439 ;;Total ram usage:       10 bytes
 12440 ;; Hardware stack levels used:    1
 12441 ;; Hardware stack levels required when called:    5
 12442 ;; This function calls:
 12443 ;;		___awdiv
 12444 ;;		___awmod
 12445 ;;		___ftmul
 12446 ;;		___wmul
 12447 ;; This function is called by:
 12448 ;;		_sprintf
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           	psect	text41
 12453  0012C0                     __ptext41:
 12454                           	opt stack 0
 12455  0012C0                     _fround:
 12456                           	opt stack 23
 12457                           
 12458                           ;incstack = 0
 12459                           ;fround@prec stored from wreg
 12460  0012C0  0100               	movlb	0	; () banked
 12461  0012C2  6F7B               	movwf	fround@prec& (0+255),b
 12462                           
 12463                           ;doprnt.c: 413: if(prec>=110)
 12464  0012C4  0E6D               	movlw	109
 12465  0012C6  0100               	movlb	0	; () banked
 12466  0012C8  657B               	cpfsgt	fround@prec& (0+255),b
 12467  0012CA  D0A0               	goto	l1649
 12468                           
 12469                           ; BSR set to: 0
 12470                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 12471  0012CC  0E00               	movlw	0
 12472  0012CE  6E29               	movwf	___wmul@multiplicand+1,c
 12473  0012D0  0E03               	movlw	3
 12474  0012D2  6E28               	movwf	___wmul@multiplicand,c
 12475  0012D4  0E00               	movlw	0
 12476  0012D6  6E21               	movwf	___awdiv@divisor+1,c
 12477  0012D8  0E0A               	movlw	10
 12478  0012DA  6E20               	movwf	___awdiv@divisor,c
 12479  0012DC  0E00               	movlw	0
 12480  0012DE  6E1B               	movwf	___awmod@divisor+1,c
 12481  0012E0  0E64               	movlw	100
 12482  0012E2  6E1A               	movwf	___awmod@divisor,c
 12483  0012E4  C07B  F018         	movff	fround@prec,___awmod@dividend
 12484  0012E8  6A19               	clrf	___awmod@dividend+1,c
 12485  0012EA  ECE7  F01D         	call	___awmod	;wreg free
 12486  0012EE  C018  F01E         	movff	?___awmod,___awdiv@dividend
 12487  0012F2  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 12488  0012F6  EC75  F01C         	call	___awdiv	;wreg free
 12489  0012FA  0E09               	movlw	9
 12490  0012FC  241E               	addwf	?___awdiv,w,c
 12491  0012FE  6E26               	movwf	___wmul@multiplier,c
 12492  001300  0E00               	movlw	0
 12493  001302  201F               	addwfc	?___awdiv+1,w,c
 12494  001304  6E27               	movwf	___wmul@multiplier+1,c
 12495  001306  EC41  F023         	call	___wmul	;wreg free
 12496  00130A  0E00               	movlw	low __npowers_
 12497  00130C  2426               	addwf	?___wmul,w,c
 12498  00130E  6EF6               	movwf	tblptrl,c
 12499  001310  0E78               	movlw	high __npowers_
 12500  001312  2027               	addwfc	?___wmul+1,w,c
 12501  001314  6EF7               	movwf	tblptrh,c
 12502  001316                     	if	0	;There are less than 3 active tblptr bytes
 12503  001316                     	endif
 12504  001316  0009               	tblrd		*+
 12505  001318  CFF5 F069          	movff	tablat,___ftmul@f2
 12506  00131C  0009               	tblrd		*+
 12507  00131E  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12508  001322  000A               	tblrd		*-
 12509  001324  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12510  001328  0E00               	movlw	0
 12511  00132A  6E21               	movwf	___awdiv@divisor+1,c
 12512  00132C  0E64               	movlw	100
 12513  00132E  6E20               	movwf	___awdiv@divisor,c
 12514  001330  C07B  F01E         	movff	fround@prec,___awdiv@dividend
 12515  001334  6A1F               	clrf	___awdiv@dividend+1,c
 12516  001336  EC75  F01C         	call	___awdiv	;wreg free
 12517  00133A  0E12               	movlw	18
 12518  00133C  241E               	addwf	?___awdiv,w,c
 12519  00133E  6E26               	movwf	___wmul@multiplier,c
 12520  001340  0E00               	movlw	0
 12521  001342  201F               	addwfc	?___awdiv+1,w,c
 12522  001344  6E27               	movwf	___wmul@multiplier+1,c
 12523  001346  0E00               	movlw	0
 12524  001348  6E29               	movwf	___wmul@multiplicand+1,c
 12525  00134A  0E03               	movlw	3
 12526  00134C  6E28               	movwf	___wmul@multiplicand,c
 12527  00134E  EC41  F023         	call	___wmul	;wreg free
 12528  001352  0E00               	movlw	low __npowers_
 12529  001354  2426               	addwf	?___wmul,w,c
 12530  001356  6EF6               	movwf	tblptrl,c
 12531  001358  0E78               	movlw	high __npowers_
 12532  00135A  2027               	addwfc	?___wmul+1,w,c
 12533  00135C  6EF7               	movwf	tblptrh,c
 12534  00135E                     	if	0	;There are less than 3 active tblptr bytes
 12535  00135E                     	endif
 12536  00135E  0009               	tblrd		*+
 12537  001360  CFF5 F066          	movff	tablat,___ftmul@f1
 12538  001364  0009               	tblrd		*+
 12539  001366  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12540  00136A  000A               	tblrd		*-
 12541  00136C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12542  001370  EC32  F016         	call	___ftmul	;wreg free
 12543  001374  C066  F078         	movff	?___ftmul,_fround$3976
 12544  001378  C067  F079         	movff	?___ftmul+1,_fround$3976+1
 12545  00137C  C068  F07A         	movff	?___ftmul+2,_fround$3976+2
 12546                           
 12547                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 12548  001380  0E00               	movlw	0
 12549  001382  6E29               	movwf	___wmul@multiplicand+1,c
 12550  001384  0E03               	movlw	3
 12551  001386  6E28               	movwf	___wmul@multiplicand,c
 12552  001388  0E00               	movlw	0
 12553  00138A  6E1B               	movwf	___awmod@divisor+1,c
 12554  00138C  0E0A               	movlw	10
 12555  00138E  6E1A               	movwf	___awmod@divisor,c
 12556  001390  C07B  F018         	movff	fround@prec,___awmod@dividend
 12557  001394  6A19               	clrf	___awmod@dividend+1,c
 12558  001396  ECE7  F01D         	call	___awmod	;wreg free
 12559  00139A  C018  F026         	movff	?___awmod,___wmul@multiplier
 12560  00139E  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12561  0013A2  EC41  F023         	call	___wmul	;wreg free
 12562  0013A6  0E00               	movlw	low __npowers_
 12563  0013A8  2426               	addwf	?___wmul,w,c
 12564  0013AA  6EF6               	movwf	tblptrl,c
 12565  0013AC  0E78               	movlw	high __npowers_
 12566  0013AE  2027               	addwfc	?___wmul+1,w,c
 12567  0013B0  6EF7               	movwf	tblptrh,c
 12568  0013B2                     	if	0	;There are less than 3 active tblptr bytes
 12569  0013B2                     	endif
 12570  0013B2  0009               	tblrd		*+
 12571  0013B4  CFF5 F069          	movff	tablat,___ftmul@f2
 12572  0013B8  0009               	tblrd		*+
 12573  0013BA  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12574  0013BE  000A               	tblrd		*-
 12575  0013C0  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12576  0013C4  C078  F066         	movff	_fround$3976,___ftmul@f1
 12577  0013C8  C079  F067         	movff	_fround$3976+1,___ftmul@f1+1
 12578  0013CC  C07A  F068         	movff	_fround$3976+2,___ftmul@f1+2
 12579  0013D0  EC32  F016         	call	___ftmul	;wreg free
 12580  0013D4  C066  F075         	movff	?___ftmul,_fround$3977
 12581  0013D8  C067  F076         	movff	?___ftmul+1,_fround$3977+1
 12582  0013DC  C068  F077         	movff	?___ftmul+2,_fround$3977+2
 12583                           
 12584                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 12585  0013E0  C075  F066         	movff	_fround$3977,___ftmul@f1
 12586  0013E4  C076  F067         	movff	_fround$3977+1,___ftmul@f1+1
 12587  0013E8  C077  F068         	movff	_fround$3977+2,___ftmul@f1+2
 12588  0013EC  0E00               	movlw	0
 12589  0013EE  0100               	movlb	0	; () banked
 12590  0013F0  6F69               	movwf	___ftmul@f2& (0+255),b
 12591  0013F2  0E00               	movlw	0
 12592  0013F4  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 12593  0013F6  0E3F               	movlw	63
 12594  0013F8  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 12595  0013FA  EC32  F016         	call	___ftmul	;wreg free
 12596  0013FE  C066  F072         	movff	?___ftmul,?_fround
 12597  001402  C067  F073         	movff	?___ftmul+1,?_fround+1
 12598  001406  C068  F074         	movff	?___ftmul+2,?_fround+2
 12599  00140A  0012               	return	
 12600  00140C                     l1649:
 12601                           
 12602                           ;doprnt.c: 415: else if(prec > 10)
 12603  00140C  0E0A               	movlw	10
 12604  00140E  0100               	movlb	0	; () banked
 12605  001410  657B               	cpfsgt	fround@prec& (0+255),b
 12606  001412  D064               	goto	l1652
 12607                           
 12608                           ; BSR set to: 0
 12609                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 12610  001414  0E00               	movlw	0
 12611  001416  6E29               	movwf	___wmul@multiplicand+1,c
 12612  001418  0E03               	movlw	3
 12613  00141A  6E28               	movwf	___wmul@multiplicand,c
 12614  00141C  0E00               	movlw	0
 12615  00141E  6E1B               	movwf	___awmod@divisor+1,c
 12616  001420  0E0A               	movlw	10
 12617  001422  6E1A               	movwf	___awmod@divisor,c
 12618  001424  C07B  F018         	movff	fround@prec,___awmod@dividend
 12619  001428  6A19               	clrf	___awmod@dividend+1,c
 12620  00142A  ECE7  F01D         	call	___awmod	;wreg free
 12621  00142E  C018  F026         	movff	?___awmod,___wmul@multiplier
 12622  001432  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12623  001436  EC41  F023         	call	___wmul	;wreg free
 12624  00143A  0E00               	movlw	low __npowers_
 12625  00143C  2426               	addwf	?___wmul,w,c
 12626  00143E  6EF6               	movwf	tblptrl,c
 12627  001440  0E78               	movlw	high __npowers_
 12628  001442  2027               	addwfc	?___wmul+1,w,c
 12629  001444  6EF7               	movwf	tblptrh,c
 12630  001446                     	if	0	;There are less than 3 active tblptr bytes
 12631  001446                     	endif
 12632  001446  0009               	tblrd		*+
 12633  001448  CFF5 F069          	movff	tablat,___ftmul@f2
 12634  00144C  0009               	tblrd		*+
 12635  00144E  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12636  001452  000A               	tblrd		*-
 12637  001454  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12638  001458  0E00               	movlw	0
 12639  00145A  6E21               	movwf	___awdiv@divisor+1,c
 12640  00145C  0E0A               	movlw	10
 12641  00145E  6E20               	movwf	___awdiv@divisor,c
 12642  001460  C07B  F01E         	movff	fround@prec,___awdiv@dividend
 12643  001464  6A1F               	clrf	___awdiv@dividend+1,c
 12644  001466  EC75  F01C         	call	___awdiv	;wreg free
 12645  00146A  0E09               	movlw	9
 12646  00146C  241E               	addwf	?___awdiv,w,c
 12647  00146E  6E26               	movwf	___wmul@multiplier,c
 12648  001470  0E00               	movlw	0
 12649  001472  201F               	addwfc	?___awdiv+1,w,c
 12650  001474  6E27               	movwf	___wmul@multiplier+1,c
 12651  001476  0E00               	movlw	0
 12652  001478  6E29               	movwf	___wmul@multiplicand+1,c
 12653  00147A  0E03               	movlw	3
 12654  00147C  6E28               	movwf	___wmul@multiplicand,c
 12655  00147E  EC41  F023         	call	___wmul	;wreg free
 12656  001482  0E00               	movlw	low __npowers_
 12657  001484  2426               	addwf	?___wmul,w,c
 12658  001486  6EF6               	movwf	tblptrl,c
 12659  001488  0E78               	movlw	high __npowers_
 12660  00148A  2027               	addwfc	?___wmul+1,w,c
 12661  00148C  6EF7               	movwf	tblptrh,c
 12662  00148E                     	if	0	;There are less than 3 active tblptr bytes
 12663  00148E                     	endif
 12664  00148E  0009               	tblrd		*+
 12665  001490  CFF5 F066          	movff	tablat,___ftmul@f1
 12666  001494  0009               	tblrd		*+
 12667  001496  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12668  00149A  000A               	tblrd		*-
 12669  00149C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12670  0014A0  EC32  F016         	call	___ftmul	;wreg free
 12671  0014A4  C066  F078         	movff	?___ftmul,_fround$3976
 12672  0014A8  C067  F079         	movff	?___ftmul+1,_fround$3976+1
 12673  0014AC  C068  F07A         	movff	?___ftmul+2,_fround$3976+2
 12674                           
 12675                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 12676  0014B0  C078  F066         	movff	_fround$3976,___ftmul@f1
 12677  0014B4  C079  F067         	movff	_fround$3976+1,___ftmul@f1+1
 12678  0014B8  C07A  F068         	movff	_fround$3976+2,___ftmul@f1+2
 12679  0014BC  0E00               	movlw	0
 12680  0014BE  0100               	movlb	0	; () banked
 12681  0014C0  6F69               	movwf	___ftmul@f2& (0+255),b
 12682  0014C2  0E00               	movlw	0
 12683  0014C4  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 12684  0014C6  0E3F               	movlw	63
 12685  0014C8  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 12686  0014CA  EC32  F016         	call	___ftmul	;wreg free
 12687  0014CE  C066  F072         	movff	?___ftmul,?_fround
 12688  0014D2  C067  F073         	movff	?___ftmul+1,?_fround+1
 12689  0014D6  C068  F074         	movff	?___ftmul+2,?_fround+2
 12690  0014DA  0012               	return	
 12691  0014DC                     l1652:
 12692                           
 12693                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 12694  0014DC  0100               	movlb	0	; () banked
 12695  0014DE  517B               	movf	fround@prec& (0+255),w,b
 12696  0014E0  0D03               	mullw	3
 12697  0014E2  0E00               	movlw	low __npowers_
 12698  0014E4  24F3               	addwf	prodl,w,c
 12699  0014E6  6EF6               	movwf	tblptrl,c
 12700  0014E8  0E78               	movlw	high __npowers_
 12701  0014EA  20F4               	addwfc	prodh,w,c
 12702  0014EC  6EF7               	movwf	tblptrh,c
 12703  0014EE                     	if	0	;There are less than 3 active tblptr bytes
 12704  0014EE                     	endif
 12705  0014EE  0009               	tblrd		*+
 12706  0014F0  CFF5 F066          	movff	tablat,___ftmul@f1
 12707  0014F4  0009               	tblrd		*+
 12708  0014F6  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12709  0014FA  000A               	tblrd		*-
 12710  0014FC  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12711  001500  0E00               	movlw	0
 12712  001502  6F69               	movwf	___ftmul@f2& (0+255),b
 12713  001504  0E00               	movlw	0
 12714  001506  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 12715  001508  0E3F               	movlw	63
 12716  00150A  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 12717  00150C  EC32  F016         	call	___ftmul	;wreg free
 12718  001510  C066  F072         	movff	?___ftmul,?_fround
 12719  001514  C067  F073         	movff	?___ftmul+1,?_fround+1
 12720  001518  C068  F074         	movff	?___ftmul+2,?_fround+2
 12721  00151C  0012               	return	
 12722  00151E                     __end_of_fround:
 12723                           	opt stack 0
 12724                           tosu	equ	0xFFF
 12725                           tosh	equ	0xFFE
 12726                           tosl	equ	0xFFD
 12727                           pclath	equ	0xFFA
 12728                           tblptru	equ	0xFF8
 12729                           tblptrh	equ	0xFF7
 12730                           tblptrl	equ	0xFF6
 12731                           tablat	equ	0xFF5
 12732                           prodh	equ	0xFF4
 12733                           prodl	equ	0xFF3
 12734                           intcon	equ	0xFF2
 12735                           intcon2	equ	0xFF1
 12736                           postinc0	equ	0xFEE
 12737                           wreg	equ	0xFE8
 12738                           indf1	equ	0xFE7
 12739                           postdec1	equ	0xFE5
 12740                           fsr1h	equ	0xFE2
 12741                           fsr1l	equ	0xFE1
 12742                           indf2	equ	0xFDF
 12743                           postinc2	equ	0xFDE
 12744                           postdec2	equ	0xFDD
 12745                           fsr2h	equ	0xFDA
 12746                           fsr2l	equ	0xFD9
 12747                           status	equ	0xFD8
 12748                           
 12749 ;; *************** function ___awmod *****************
 12750 ;; Defined at:
 12751 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 12752 ;; Parameters:    Size  Location     Type
 12753 ;;  dividend        2   23[COMRAM] int 
 12754 ;;  divisor         2   25[COMRAM] int 
 12755 ;; Auto vars:     Size  Location     Type
 12756 ;;  sign            1   28[COMRAM] unsigned char 
 12757 ;;  counter         1   27[COMRAM] unsigned char 
 12758 ;; Return value:  Size  Location     Type
 12759 ;;                  2   23[COMRAM] int 
 12760 ;; Registers used:
 12761 ;;		wreg, status,2, status,0
 12762 ;; Tracked objects:
 12763 ;;		On entry : 0/0
 12764 ;;		On exit  : 0/0
 12765 ;;		Unchanged: 0/0
 12766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12767 ;;      Params:         4       0       0       0       0       0       0
 12768 ;;      Locals:         2       0       0       0       0       0       0
 12769 ;;      Temps:          0       0       0       0       0       0       0
 12770 ;;      Totals:         6       0       0       0       0       0       0
 12771 ;;Total ram usage:        6 bytes
 12772 ;; Hardware stack levels used:    1
 12773 ;; Hardware stack levels required when called:    3
 12774 ;; This function calls:
 12775 ;;		Nothing
 12776 ;; This function is called by:
 12777 ;;		_fround
 12778 ;;		_scale
 12779 ;; This function uses a non-reentrant model
 12780 ;;
 12781                           
 12782                           	psect	text42
 12783  003BCE                     __ptext42:
 12784                           	opt stack 0
 12785  003BCE                     ___awmod:
 12786                           	opt stack 24
 12787                           
 12788                           ;incstack = 0
 12789  003BCE  0E00               	movlw	0
 12790  003BD0  6E1D               	movwf	___awmod@sign,c
 12791  003BD2  AE19               	btfss	___awmod@dividend+1,7,c
 12792  003BD4  D006               	goto	l1908
 12793  003BD6  6C18               	negf	___awmod@dividend,c
 12794  003BD8  1E19               	comf	___awmod@dividend+1,f,c
 12795  003BDA  B0D8               	btfsc	status,0,c
 12796  003BDC  2A19               	incf	___awmod@dividend+1,f,c
 12797  003BDE  0E01               	movlw	1
 12798  003BE0  6E1D               	movwf	___awmod@sign,c
 12799  003BE2                     l1908:
 12800  003BE2  AE1B               	btfss	___awmod@divisor+1,7,c
 12801  003BE4  D004               	goto	l1909
 12802  003BE6  6C1A               	negf	___awmod@divisor,c
 12803  003BE8  1E1B               	comf	___awmod@divisor+1,f,c
 12804  003BEA  B0D8               	btfsc	status,0,c
 12805  003BEC  2A1B               	incf	___awmod@divisor+1,f,c
 12806  003BEE                     l1909:
 12807  003BEE  501A               	movf	___awmod@divisor,w,c
 12808  003BF0  101B               	iorwf	___awmod@divisor+1,w,c
 12809  003BF2  B4D8               	btfsc	status,2,c
 12810  003BF4  D018               	goto	l1916
 12811  003BF6  0E01               	movlw	1
 12812  003BF8  6E1C               	movwf	___awmod@counter,c
 12813  003BFA  D004               	goto	l1911
 12814  003BFC  90D8               	bcf	status,0,c
 12815  003BFE  361A               	rlcf	___awmod@divisor,f,c
 12816  003C00  361B               	rlcf	___awmod@divisor+1,f,c
 12817  003C02  2A1C               	incf	___awmod@counter,f,c
 12818  003C04                     l1911:
 12819  003C04  AE1B               	btfss	___awmod@divisor+1,7,c
 12820  003C06  D7FA               	goto	l1912
 12821  003C08                     u7700:
 12822  003C08  501A               	movf	___awmod@divisor,w,c
 12823  003C0A  5C18               	subwf	___awmod@dividend,w,c
 12824  003C0C  501B               	movf	___awmod@divisor+1,w,c
 12825  003C0E  5819               	subwfb	___awmod@dividend+1,w,c
 12826  003C10  A0D8               	btfss	status,0,c
 12827  003C12  D004               	goto	l1915
 12828  003C14  501A               	movf	___awmod@divisor,w,c
 12829  003C16  5E18               	subwf	___awmod@dividend,f,c
 12830  003C18  501B               	movf	___awmod@divisor+1,w,c
 12831  003C1A  5A19               	subwfb	___awmod@dividend+1,f,c
 12832  003C1C                     l1915:
 12833  003C1C  90D8               	bcf	status,0,c
 12834  003C1E  321B               	rrcf	___awmod@divisor+1,f,c
 12835  003C20  321A               	rrcf	___awmod@divisor,f,c
 12836  003C22  2E1C               	decfsz	___awmod@counter,f,c
 12837  003C24  D7F1               	goto	u7700
 12838  003C26                     l1916:
 12839  003C26  501D               	movf	___awmod@sign,w,c
 12840  003C28  B4D8               	btfsc	status,2,c
 12841  003C2A  D004               	goto	l1917
 12842  003C2C  6C18               	negf	___awmod@dividend,c
 12843  003C2E  1E19               	comf	___awmod@dividend+1,f,c
 12844  003C30  B0D8               	btfsc	status,0,c
 12845  003C32  2A19               	incf	___awmod@dividend+1,f,c
 12846  003C34                     l1917:
 12847  003C34  C018  F018         	movff	___awmod@dividend,?___awmod
 12848  003C38  C019  F019         	movff	___awmod@dividend+1,?___awmod+1
 12849  003C3C  0012               	return	
 12850  003C3E                     __end_of___awmod:
 12851                           	opt stack 0
 12852                           tosu	equ	0xFFF
 12853                           tosh	equ	0xFFE
 12854                           tosl	equ	0xFFD
 12855                           pclath	equ	0xFFA
 12856                           tblptru	equ	0xFF8
 12857                           tblptrh	equ	0xFF7
 12858                           tblptrl	equ	0xFF6
 12859                           tablat	equ	0xFF5
 12860                           prodh	equ	0xFF4
 12861                           prodl	equ	0xFF3
 12862                           intcon	equ	0xFF2
 12863                           intcon2	equ	0xFF1
 12864                           postinc0	equ	0xFEE
 12865                           wreg	equ	0xFE8
 12866                           indf1	equ	0xFE7
 12867                           postdec1	equ	0xFE5
 12868                           fsr1h	equ	0xFE2
 12869                           fsr1l	equ	0xFE1
 12870                           indf2	equ	0xFDF
 12871                           postinc2	equ	0xFDE
 12872                           postdec2	equ	0xFDD
 12873                           fsr2h	equ	0xFDA
 12874                           fsr2l	equ	0xFD9
 12875                           status	equ	0xFD8
 12876                           
 12877 ;; *************** function ___awdiv *****************
 12878 ;; Defined at:
 12879 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12880 ;; Parameters:    Size  Location     Type
 12881 ;;  dividend        2   29[COMRAM] int 
 12882 ;;  divisor         2   31[COMRAM] int 
 12883 ;; Auto vars:     Size  Location     Type
 12884 ;;  quotient        2   35[COMRAM] int 
 12885 ;;  sign            1   34[COMRAM] unsigned char 
 12886 ;;  counter         1   33[COMRAM] unsigned char 
 12887 ;; Return value:  Size  Location     Type
 12888 ;;                  2   29[COMRAM] int 
 12889 ;; Registers used:
 12890 ;;		wreg, status,2, status,0
 12891 ;; Tracked objects:
 12892 ;;		On entry : 0/0
 12893 ;;		On exit  : 0/0
 12894 ;;		Unchanged: 0/0
 12895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12896 ;;      Params:         4       0       0       0       0       0       0
 12897 ;;      Locals:         4       0       0       0       0       0       0
 12898 ;;      Temps:          0       0       0       0       0       0       0
 12899 ;;      Totals:         8       0       0       0       0       0       0
 12900 ;;Total ram usage:        8 bytes
 12901 ;; Hardware stack levels used:    1
 12902 ;; Hardware stack levels required when called:    3
 12903 ;; This function calls:
 12904 ;;		Nothing
 12905 ;; This function is called by:
 12906 ;;		_fround
 12907 ;;		_scale
 12908 ;;		_sprintf
 12909 ;; This function uses a non-reentrant model
 12910 ;;
 12911                           
 12912                           	psect	text43
 12913  0038EA                     __ptext43:
 12914                           	opt stack 0
 12915  0038EA                     ___awdiv:
 12916                           	opt stack 24
 12917                           
 12918                           ;incstack = 0
 12919  0038EA  0E00               	movlw	0
 12920  0038EC  6E23               	movwf	___awdiv@sign,c
 12921  0038EE  AE21               	btfss	___awdiv@divisor+1,7,c
 12922  0038F0  D006               	goto	l1895
 12923  0038F2  6C20               	negf	___awdiv@divisor,c
 12924  0038F4  1E21               	comf	___awdiv@divisor+1,f,c
 12925  0038F6  B0D8               	btfsc	status,0,c
 12926  0038F8  2A21               	incf	___awdiv@divisor+1,f,c
 12927  0038FA  0E01               	movlw	1
 12928  0038FC  6E23               	movwf	___awdiv@sign,c
 12929  0038FE                     l1895:
 12930  0038FE  AE1F               	btfss	___awdiv@dividend+1,7,c
 12931  003900  D006               	goto	l1896
 12932  003902  6C1E               	negf	___awdiv@dividend,c
 12933  003904  1E1F               	comf	___awdiv@dividend+1,f,c
 12934  003906  B0D8               	btfsc	status,0,c
 12935  003908  2A1F               	incf	___awdiv@dividend+1,f,c
 12936  00390A  0E01               	movlw	1
 12937  00390C  1A23               	xorwf	___awdiv@sign,f,c
 12938  00390E                     l1896:
 12939  00390E  0E00               	movlw	0
 12940  003910  6E25               	movwf	___awdiv@quotient+1,c
 12941  003912  0E00               	movlw	0
 12942  003914  6E24               	movwf	___awdiv@quotient,c
 12943  003916  5020               	movf	___awdiv@divisor,w,c
 12944  003918  1021               	iorwf	___awdiv@divisor+1,w,c
 12945  00391A  B4D8               	btfsc	status,2,c
 12946  00391C  D01C               	goto	l1903
 12947  00391E  0E01               	movlw	1
 12948  003920  6E22               	movwf	___awdiv@counter,c
 12949  003922  D004               	goto	l1898
 12950  003924  90D8               	bcf	status,0,c
 12951  003926  3620               	rlcf	___awdiv@divisor,f,c
 12952  003928  3621               	rlcf	___awdiv@divisor+1,f,c
 12953  00392A  2A22               	incf	___awdiv@counter,f,c
 12954  00392C                     l1898:
 12955  00392C  AE21               	btfss	___awdiv@divisor+1,7,c
 12956  00392E  D7FA               	goto	l1899
 12957  003930                     u7640:
 12958  003930  90D8               	bcf	status,0,c
 12959  003932  3624               	rlcf	___awdiv@quotient,f,c
 12960  003934  3625               	rlcf	___awdiv@quotient+1,f,c
 12961  003936  5020               	movf	___awdiv@divisor,w,c
 12962  003938  5C1E               	subwf	___awdiv@dividend,w,c
 12963  00393A  5021               	movf	___awdiv@divisor+1,w,c
 12964  00393C  581F               	subwfb	___awdiv@dividend+1,w,c
 12965  00393E  A0D8               	btfss	status,0,c
 12966  003940  D005               	goto	l1902
 12967  003942  5020               	movf	___awdiv@divisor,w,c
 12968  003944  5E1E               	subwf	___awdiv@dividend,f,c
 12969  003946  5021               	movf	___awdiv@divisor+1,w,c
 12970  003948  5A1F               	subwfb	___awdiv@dividend+1,f,c
 12971  00394A  8024               	bsf	___awdiv@quotient,0,c
 12972  00394C                     l1902:
 12973  00394C  90D8               	bcf	status,0,c
 12974  00394E  3221               	rrcf	___awdiv@divisor+1,f,c
 12975  003950  3220               	rrcf	___awdiv@divisor,f,c
 12976  003952  2E22               	decfsz	___awdiv@counter,f,c
 12977  003954  D7ED               	goto	u7640
 12978  003956                     l1903:
 12979  003956  5023               	movf	___awdiv@sign,w,c
 12980  003958  B4D8               	btfsc	status,2,c
 12981  00395A  D004               	goto	l1904
 12982  00395C  6C24               	negf	___awdiv@quotient,c
 12983  00395E  1E25               	comf	___awdiv@quotient+1,f,c
 12984  003960  B0D8               	btfsc	status,0,c
 12985  003962  2A25               	incf	___awdiv@quotient+1,f,c
 12986  003964                     l1904:
 12987  003964  C024  F01E         	movff	___awdiv@quotient,?___awdiv
 12988  003968  C025  F01F         	movff	___awdiv@quotient+1,?___awdiv+1
 12989  00396C  0012               	return	
 12990  00396E                     __end_of___awdiv:
 12991                           	opt stack 0
 12992                           tosu	equ	0xFFF
 12993                           tosh	equ	0xFFE
 12994                           tosl	equ	0xFFD
 12995                           pclath	equ	0xFFA
 12996                           tblptru	equ	0xFF8
 12997                           tblptrh	equ	0xFF7
 12998                           tblptrl	equ	0xFF6
 12999                           tablat	equ	0xFF5
 13000                           prodh	equ	0xFF4
 13001                           prodl	equ	0xFF3
 13002                           intcon	equ	0xFF2
 13003                           intcon2	equ	0xFF1
 13004                           postinc0	equ	0xFEE
 13005                           wreg	equ	0xFE8
 13006                           indf1	equ	0xFE7
 13007                           postdec1	equ	0xFE5
 13008                           fsr1h	equ	0xFE2
 13009                           fsr1l	equ	0xFE1
 13010                           indf2	equ	0xFDF
 13011                           postinc2	equ	0xFDE
 13012                           postdec2	equ	0xFDD
 13013                           fsr2h	equ	0xFDA
 13014                           fsr2l	equ	0xFD9
 13015                           status	equ	0xFD8
 13016                           
 13017 ;; *************** function __tdiv_to_l_ *****************
 13018 ;; Defined at:
 13019 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
 13020 ;; Parameters:    Size  Location     Type
 13021 ;;  f1              3   23[COMRAM] float 
 13022 ;;  f2              3   26[COMRAM] float 
 13023 ;; Auto vars:     Size  Location     Type
 13024 ;;  quot            4   32[COMRAM] unsigned long 
 13025 ;;  exp1            1   37[COMRAM] unsigned char 
 13026 ;;  cntr            1   36[COMRAM] unsigned char 
 13027 ;; Return value:  Size  Location     Type
 13028 ;;                  4   23[COMRAM] unsigned long 
 13029 ;; Registers used:
 13030 ;;		wreg, status,2, status,0
 13031 ;; Tracked objects:
 13032 ;;		On entry : 0/0
 13033 ;;		On exit  : 0/0
 13034 ;;		Unchanged: 0/0
 13035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13036 ;;      Params:         6       0       0       0       0       0       0
 13037 ;;      Locals:         6       0       0       0       0       0       0
 13038 ;;      Temps:          3       0       0       0       0       0       0
 13039 ;;      Totals:        15       0       0       0       0       0       0
 13040 ;;Total ram usage:       15 bytes
 13041 ;; Hardware stack levels used:    1
 13042 ;; Hardware stack levels required when called:    3
 13043 ;; This function calls:
 13044 ;;		Nothing
 13045 ;; This function is called by:
 13046 ;;		_sprintf
 13047 ;; This function uses a non-reentrant model
 13048 ;;
 13049                           
 13050                           	psect	text44
 13051  002364                     __ptext44:
 13052                           	opt stack 0
 13053  002364                     __tdiv_to_l_:
 13054                           	opt stack 25
 13055                           
 13056                           ;incstack = 0
 13057  002364  C01A  F01E         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 13058  002368  6A1F               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 13059  00236A  6A20               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 13060  00236C  3419               	rlcf	__tdiv_to_l_@f1+1,w,c
 13061  00236E  361E               	rlcf	??__tdiv_to_l_& (0+255),f,c
 13062  002370  E301               	bnc	u8331
 13063  002372  801F               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 13064  002374                     u8331:
 13065  002374  501E               	movf	??__tdiv_to_l_,w,c
 13066  002376  6E26               	movwf	__tdiv_to_l_@exp1,c
 13067  002378  5026               	movf	__tdiv_to_l_@exp1,w,c
 13068  00237A  A4D8               	btfss	status,2,c
 13069  00237C  D009               	goto	l2031
 13070  00237E  0E00               	movlw	0
 13071  002380  6E18               	movwf	?__tdiv_to_l_,c
 13072  002382  0E00               	movlw	0
 13073  002384  6E19               	movwf	?__tdiv_to_l_+1,c
 13074  002386  0E00               	movlw	0
 13075  002388  6E1A               	movwf	?__tdiv_to_l_+2,c
 13076  00238A  0E00               	movlw	0
 13077  00238C  6E1B               	movwf	?__tdiv_to_l_+3,c
 13078  00238E  0012               	return	
 13079  002390                     l2031:
 13080  002390  C01D  F01E         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 13081  002394  6A1F               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 13082  002396  6A20               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 13083  002398  341C               	rlcf	__tdiv_to_l_@f2+1,w,c
 13084  00239A  361E               	rlcf	??__tdiv_to_l_& (0+255),f,c
 13085  00239C  E301               	bnc	u8351
 13086  00239E  801F               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 13087  0023A0                     u8351:
 13088  0023A0  501E               	movf	??__tdiv_to_l_,w,c
 13089  0023A2  6E25               	movwf	__tdiv_to_l_@cntr,c
 13090  0023A4  5025               	movf	__tdiv_to_l_@cntr,w,c
 13091  0023A6  A4D8               	btfss	status,2,c
 13092  0023A8  D009               	goto	l2033
 13093  0023AA  0E00               	movlw	0
 13094  0023AC  6E18               	movwf	?__tdiv_to_l_,c
 13095  0023AE  0E00               	movlw	0
 13096  0023B0  6E19               	movwf	?__tdiv_to_l_+1,c
 13097  0023B2  0E00               	movlw	0
 13098  0023B4  6E1A               	movwf	?__tdiv_to_l_+2,c
 13099  0023B6  0E00               	movlw	0
 13100  0023B8  6E1B               	movwf	?__tdiv_to_l_+3,c
 13101  0023BA  0012               	return	
 13102  0023BC                     l2033:
 13103  0023BC  8E19               	bsf	__tdiv_to_l_@f1+1,7,c
 13104  0023BE  0EFF               	movlw	255
 13105  0023C0  1618               	andwf	__tdiv_to_l_@f1,f,c
 13106  0023C2  0EFF               	movlw	255
 13107  0023C4  1619               	andwf	__tdiv_to_l_@f1+1,f,c
 13108  0023C6  0E00               	movlw	0
 13109  0023C8  161A               	andwf	__tdiv_to_l_@f1+2,f,c
 13110  0023CA  8E1C               	bsf	__tdiv_to_l_@f2+1,7,c
 13111  0023CC  0EFF               	movlw	255
 13112  0023CE  161B               	andwf	__tdiv_to_l_@f2,f,c
 13113  0023D0  0EFF               	movlw	255
 13114  0023D2  161C               	andwf	__tdiv_to_l_@f2+1,f,c
 13115  0023D4  0E00               	movlw	0
 13116  0023D6  161D               	andwf	__tdiv_to_l_@f2+2,f,c
 13117  0023D8  0E00               	movlw	0
 13118  0023DA  6E21               	movwf	__tdiv_to_l_@quot,c
 13119  0023DC  0E00               	movlw	0
 13120  0023DE  6E22               	movwf	__tdiv_to_l_@quot+1,c
 13121  0023E0  0E00               	movlw	0
 13122  0023E2  6E23               	movwf	__tdiv_to_l_@quot+2,c
 13123  0023E4  0E00               	movlw	0
 13124  0023E6  6E24               	movwf	__tdiv_to_l_@quot+3,c
 13125  0023E8  0E7F               	movlw	127
 13126  0023EA  5E26               	subwf	__tdiv_to_l_@exp1,f,c
 13127  0023EC  5025               	movf	__tdiv_to_l_@cntr,w,c
 13128  0023EE  0F98               	addlw	152
 13129  0023F0  5E26               	subwf	__tdiv_to_l_@exp1,f,c
 13130  0023F2  0E18               	movlw	24
 13131  0023F4  6E25               	movwf	__tdiv_to_l_@cntr,c
 13132  0023F6                     l2034:
 13133  0023F6  90D8               	bcf	status,0,c
 13134  0023F8  3621               	rlcf	__tdiv_to_l_@quot,f,c
 13135  0023FA  3622               	rlcf	__tdiv_to_l_@quot+1,f,c
 13136  0023FC  3623               	rlcf	__tdiv_to_l_@quot+2,f,c
 13137  0023FE  3624               	rlcf	__tdiv_to_l_@quot+3,f,c
 13138  002400  501B               	movf	__tdiv_to_l_@f2,w,c
 13139  002402  5C18               	subwf	__tdiv_to_l_@f1,w,c
 13140  002404  501C               	movf	__tdiv_to_l_@f2+1,w,c
 13141  002406  5819               	subwfb	__tdiv_to_l_@f1+1,w,c
 13142  002408  501D               	movf	__tdiv_to_l_@f2+2,w,c
 13143  00240A  581A               	subwfb	__tdiv_to_l_@f1+2,w,c
 13144  00240C  A0D8               	btfss	status,0,c
 13145  00240E  D007               	goto	l2035
 13146  002410  501B               	movf	__tdiv_to_l_@f2,w,c
 13147  002412  5E18               	subwf	__tdiv_to_l_@f1,f,c
 13148  002414  501C               	movf	__tdiv_to_l_@f2+1,w,c
 13149  002416  5A19               	subwfb	__tdiv_to_l_@f1+1,f,c
 13150  002418  501D               	movf	__tdiv_to_l_@f2+2,w,c
 13151  00241A  5A1A               	subwfb	__tdiv_to_l_@f1+2,f,c
 13152  00241C  8021               	bsf	__tdiv_to_l_@quot,0,c
 13153  00241E                     l2035:
 13154  00241E  90D8               	bcf	status,0,c
 13155  002420  3618               	rlcf	__tdiv_to_l_@f1,f,c
 13156  002422  3619               	rlcf	__tdiv_to_l_@f1+1,f,c
 13157  002424  361A               	rlcf	__tdiv_to_l_@f1+2,f,c
 13158  002426  2E25               	decfsz	__tdiv_to_l_@cntr,f,c
 13159  002428  D7E6               	goto	l2034
 13160  00242A  AE26               	btfss	__tdiv_to_l_@exp1,7,c
 13161  00242C  D016               	goto	l2037
 13162  00242E  5026               	movf	__tdiv_to_l_@exp1,w,c
 13163  002430  0A80               	xorlw	128
 13164  002432  0F97               	addlw	151
 13165  002434  B0D8               	btfsc	status,0,c
 13166  002436  D009               	goto	l2038
 13167  002438  0E00               	movlw	0
 13168  00243A  6E18               	movwf	?__tdiv_to_l_,c
 13169  00243C  0E00               	movlw	0
 13170  00243E  6E19               	movwf	?__tdiv_to_l_+1,c
 13171  002440  0E00               	movlw	0
 13172  002442  6E1A               	movwf	?__tdiv_to_l_+2,c
 13173  002444  0E00               	movlw	0
 13174  002446  6E1B               	movwf	?__tdiv_to_l_+3,c
 13175  002448  0012               	return	
 13176  00244A                     l2038:
 13177  00244A  90D8               	bcf	status,0,c
 13178  00244C  3224               	rrcf	__tdiv_to_l_@quot+3,f,c
 13179  00244E  3223               	rrcf	__tdiv_to_l_@quot+2,f,c
 13180  002450  3222               	rrcf	__tdiv_to_l_@quot+1,f,c
 13181  002452  3221               	rrcf	__tdiv_to_l_@quot,f,c
 13182  002454  3E26               	incfsz	__tdiv_to_l_@exp1,f,c
 13183  002456  D7F9               	goto	l2038
 13184  002458  D015               	goto	u8410
 13185  00245A                     l2037:
 13186  00245A  0E17               	movlw	23
 13187  00245C  6426               	cpfsgt	__tdiv_to_l_@exp1,c
 13188  00245E  D00F               	goto	l2043
 13189  002460  0E00               	movlw	0
 13190  002462  6E18               	movwf	?__tdiv_to_l_,c
 13191  002464  0E00               	movlw	0
 13192  002466  6E19               	movwf	?__tdiv_to_l_+1,c
 13193  002468  0E00               	movlw	0
 13194  00246A  6E1A               	movwf	?__tdiv_to_l_+2,c
 13195  00246C  0E00               	movlw	0
 13196  00246E  6E1B               	movwf	?__tdiv_to_l_+3,c
 13197  002470  0012               	return	
 13198  002472  90D8               	bcf	status,0,c
 13199  002474  3621               	rlcf	__tdiv_to_l_@quot,f,c
 13200  002476  3622               	rlcf	__tdiv_to_l_@quot+1,f,c
 13201  002478  3623               	rlcf	__tdiv_to_l_@quot+2,f,c
 13202  00247A  3624               	rlcf	__tdiv_to_l_@quot+3,f,c
 13203  00247C  0626               	decf	__tdiv_to_l_@exp1,f,c
 13204  00247E                     l2043:
 13205  00247E  5026               	movf	__tdiv_to_l_@exp1,w,c
 13206  002480  A4D8               	btfss	status,2,c
 13207  002482  D7F7               	goto	l2044
 13208  002484                     u8410:
 13209  002484  C021  F018         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 13210  002488  C022  F019         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 13211  00248C  C023  F01A         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 13212  002490  C024  F01B         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 13213  002494  0012               	return		;funcret
 13214  002496                     __end_of__tdiv_to_l_:
 13215                           	opt stack 0
 13216                           tosu	equ	0xFFF
 13217                           tosh	equ	0xFFE
 13218                           tosl	equ	0xFFD
 13219                           pclath	equ	0xFFA
 13220                           tblptru	equ	0xFF8
 13221                           tblptrh	equ	0xFF7
 13222                           tblptrl	equ	0xFF6
 13223                           tablat	equ	0xFF5
 13224                           prodh	equ	0xFF4
 13225                           prodl	equ	0xFF3
 13226                           intcon	equ	0xFF2
 13227                           intcon2	equ	0xFF1
 13228                           postinc0	equ	0xFEE
 13229                           wreg	equ	0xFE8
 13230                           indf1	equ	0xFE7
 13231                           postdec1	equ	0xFE5
 13232                           fsr1h	equ	0xFE2
 13233                           fsr1l	equ	0xFE1
 13234                           indf2	equ	0xFDF
 13235                           postinc2	equ	0xFDE
 13236                           postdec2	equ	0xFDD
 13237                           fsr2h	equ	0xFDA
 13238                           fsr2l	equ	0xFD9
 13239                           status	equ	0xFD8
 13240                           
 13241 ;; *************** function __div_to_l_ *****************
 13242 ;; Defined at:
 13243 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
 13244 ;; Parameters:    Size  Location     Type
 13245 ;;  f1              3   23[COMRAM] unsigned long 
 13246 ;;  f2              3   26[COMRAM] unsigned long 
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;  quot            4   29[COMRAM] unsigned long 
 13249 ;;  exp1            1   34[COMRAM] unsigned char 
 13250 ;;  cntr            1   33[COMRAM] unsigned char 
 13251 ;; Return value:  Size  Location     Type
 13252 ;;                  4   23[COMRAM] unsigned long 
 13253 ;; Registers used:
 13254 ;;		wreg, status,2, status,0
 13255 ;; Tracked objects:
 13256 ;;		On entry : 0/0
 13257 ;;		On exit  : 0/0
 13258 ;;		Unchanged: 0/0
 13259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13260 ;;      Params:         6       0       0       0       0       0       0
 13261 ;;      Locals:         6       0       0       0       0       0       0
 13262 ;;      Temps:          0       0       0       0       0       0       0
 13263 ;;      Totals:        12       0       0       0       0       0       0
 13264 ;;Total ram usage:       12 bytes
 13265 ;; Hardware stack levels used:    1
 13266 ;; Hardware stack levels required when called:    3
 13267 ;; This function calls:
 13268 ;;		Nothing
 13269 ;; This function is called by:
 13270 ;;		_sprintf
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           	psect	text45
 13275  0026E8                     __ptext45:
 13276                           	opt stack 0
 13277  0026E8                     __div_to_l_:
 13278                           	opt stack 25
 13279                           
 13280                           ;incstack = 0
 13281  0026E8  341A               	rlcf	__div_to_l_@f1+2,w,c
 13282  0026EA  341B               	rlcf	__div_to_l_@f1+3,w,c
 13283  0026EC  6E23               	movwf	__div_to_l_@exp1,c
 13284  0026EE  5023               	movf	__div_to_l_@exp1,w,c
 13285  0026F0  A4D8               	btfss	status,2,c
 13286  0026F2  D009               	goto	l1927
 13287  0026F4  0E00               	movlw	0
 13288  0026F6  6E18               	movwf	?__div_to_l_,c
 13289  0026F8  0E00               	movlw	0
 13290  0026FA  6E19               	movwf	?__div_to_l_+1,c
 13291  0026FC  0E00               	movlw	0
 13292  0026FE  6E1A               	movwf	?__div_to_l_+2,c
 13293  002700  0E00               	movlw	0
 13294  002702  6E1B               	movwf	?__div_to_l_+3,c
 13295  002704  0012               	return	
 13296  002706                     l1927:
 13297  002706  341D               	rlcf	__div_to_l_@f2+2,w,c
 13298  002708  341E               	rlcf	__div_to_l_@f2+3,w,c
 13299  00270A  6E22               	movwf	__div_to_l_@cntr,c
 13300  00270C  5022               	movf	__div_to_l_@cntr,w,c
 13301  00270E  A4D8               	btfss	status,2,c
 13302  002710  D009               	goto	l1929
 13303  002712  0E00               	movlw	0
 13304  002714  6E18               	movwf	?__div_to_l_,c
 13305  002716  0E00               	movlw	0
 13306  002718  6E19               	movwf	?__div_to_l_+1,c
 13307  00271A  0E00               	movlw	0
 13308  00271C  6E1A               	movwf	?__div_to_l_+2,c
 13309  00271E  0E00               	movlw	0
 13310  002720  6E1B               	movwf	?__div_to_l_+3,c
 13311  002722  0012               	return	
 13312  002724                     l1929:
 13313  002724  8E1A               	bsf	__div_to_l_@f1+2,7,c
 13314  002726  0EFF               	movlw	255
 13315  002728  1618               	andwf	__div_to_l_@f1,f,c
 13316  00272A  0EFF               	movlw	255
 13317  00272C  1619               	andwf	__div_to_l_@f1+1,f,c
 13318  00272E  0EFF               	movlw	255
 13319  002730  161A               	andwf	__div_to_l_@f1+2,f,c
 13320  002732  0E00               	movlw	0
 13321  002734  161B               	andwf	__div_to_l_@f1+3,f,c
 13322  002736  8E1D               	bsf	__div_to_l_@f2+2,7,c
 13323  002738  0EFF               	movlw	255
 13324  00273A  161B               	andwf	__div_to_l_@f2,f,c
 13325  00273C  0EFF               	movlw	255
 13326  00273E  161C               	andwf	__div_to_l_@f2+1,f,c
 13327  002740  0EFF               	movlw	255
 13328  002742  161D               	andwf	__div_to_l_@f2+2,f,c
 13329  002744  0E00               	movlw	0
 13330  002746  161E               	andwf	__div_to_l_@f2+3,f,c
 13331  002748  0E00               	movlw	0
 13332  00274A  6E1E               	movwf	__div_to_l_@quot,c
 13333  00274C  0E00               	movlw	0
 13334  00274E  6E1F               	movwf	__div_to_l_@quot+1,c
 13335  002750  0E00               	movlw	0
 13336  002752  6E20               	movwf	__div_to_l_@quot+2,c
 13337  002754  0E00               	movlw	0
 13338  002756  6E21               	movwf	__div_to_l_@quot+3,c
 13339  002758  0E7F               	movlw	127
 13340  00275A  5E23               	subwf	__div_to_l_@exp1,f,c
 13341  00275C  5022               	movf	__div_to_l_@cntr,w,c
 13342  00275E  0FA0               	addlw	160
 13343  002760  5E23               	subwf	__div_to_l_@exp1,f,c
 13344  002762  0E20               	movlw	32
 13345  002764  6E22               	movwf	__div_to_l_@cntr,c
 13346  002766  90D8               	bcf	status,0,c
 13347  002768  361E               	rlcf	__div_to_l_@quot,f,c
 13348  00276A  361F               	rlcf	__div_to_l_@quot+1,f,c
 13349  00276C  3620               	rlcf	__div_to_l_@quot+2,f,c
 13350  00276E  3621               	rlcf	__div_to_l_@quot+3,f,c
 13351  002770  501B               	movf	__div_to_l_@f2,w,c
 13352  002772  5C18               	subwf	__div_to_l_@f1,w,c
 13353  002774  501C               	movf	__div_to_l_@f2+1,w,c
 13354  002776  5819               	subwfb	__div_to_l_@f1+1,w,c
 13355  002778  501D               	movf	__div_to_l_@f2+2,w,c
 13356  00277A  581A               	subwfb	__div_to_l_@f1+2,w,c
 13357  00277C  501E               	movf	__div_to_l_@f2+3,w,c
 13358  00277E  581B               	subwfb	__div_to_l_@f1+3,w,c
 13359  002780  A0D8               	btfss	status,0,c
 13360  002782  D009               	goto	l1931
 13361  002784  501B               	movf	__div_to_l_@f2,w,c
 13362  002786  5E18               	subwf	__div_to_l_@f1,f,c
 13363  002788  501C               	movf	__div_to_l_@f2+1,w,c
 13364  00278A  5A19               	subwfb	__div_to_l_@f1+1,f,c
 13365  00278C  501D               	movf	__div_to_l_@f2+2,w,c
 13366  00278E  5A1A               	subwfb	__div_to_l_@f1+2,f,c
 13367  002790  501E               	movf	__div_to_l_@f2+3,w,c
 13368  002792  5A1B               	subwfb	__div_to_l_@f1+3,f,c
 13369  002794  801E               	bsf	__div_to_l_@quot,0,c
 13370  002796                     l1931:
 13371  002796  90D8               	bcf	status,0,c
 13372  002798  3618               	rlcf	__div_to_l_@f1,f,c
 13373  00279A  3619               	rlcf	__div_to_l_@f1+1,f,c
 13374  00279C  361A               	rlcf	__div_to_l_@f1+2,f,c
 13375  00279E  361B               	rlcf	__div_to_l_@f1+3,f,c
 13376  0027A0  2E22               	decfsz	__div_to_l_@cntr,f,c
 13377  0027A2  D7E1               	goto	l1930
 13378  0027A4  AE23               	btfss	__div_to_l_@exp1,7,c
 13379  0027A6  D016               	goto	l1933
 13380  0027A8  5023               	movf	__div_to_l_@exp1,w,c
 13381  0027AA  0A80               	xorlw	128
 13382  0027AC  0F9F               	addlw	159
 13383  0027AE  B0D8               	btfsc	status,0,c
 13384  0027B0  D009               	goto	l1934
 13385  0027B2  0E00               	movlw	0
 13386  0027B4  6E18               	movwf	?__div_to_l_,c
 13387  0027B6  0E00               	movlw	0
 13388  0027B8  6E19               	movwf	?__div_to_l_+1,c
 13389  0027BA  0E00               	movlw	0
 13390  0027BC  6E1A               	movwf	?__div_to_l_+2,c
 13391  0027BE  0E00               	movlw	0
 13392  0027C0  6E1B               	movwf	?__div_to_l_+3,c
 13393  0027C2  0012               	return	
 13394  0027C4                     l1934:
 13395  0027C4  90D8               	bcf	status,0,c
 13396  0027C6  3221               	rrcf	__div_to_l_@quot+3,f,c
 13397  0027C8  3220               	rrcf	__div_to_l_@quot+2,f,c
 13398  0027CA  321F               	rrcf	__div_to_l_@quot+1,f,c
 13399  0027CC  321E               	rrcf	__div_to_l_@quot,f,c
 13400  0027CE  3E23               	incfsz	__div_to_l_@exp1,f,c
 13401  0027D0  D7F9               	goto	l1934
 13402  0027D2  D015               	goto	u8480
 13403  0027D4                     l1933:
 13404  0027D4  0E1F               	movlw	31
 13405  0027D6  6423               	cpfsgt	__div_to_l_@exp1,c
 13406  0027D8  D00F               	goto	l1939
 13407  0027DA  0E00               	movlw	0
 13408  0027DC  6E18               	movwf	?__div_to_l_,c
 13409  0027DE  0E00               	movlw	0
 13410  0027E0  6E19               	movwf	?__div_to_l_+1,c
 13411  0027E2  0E00               	movlw	0
 13412  0027E4  6E1A               	movwf	?__div_to_l_+2,c
 13413  0027E6  0E00               	movlw	0
 13414  0027E8  6E1B               	movwf	?__div_to_l_+3,c
 13415  0027EA  0012               	return	
 13416  0027EC  90D8               	bcf	status,0,c
 13417  0027EE  361E               	rlcf	__div_to_l_@quot,f,c
 13418  0027F0  361F               	rlcf	__div_to_l_@quot+1,f,c
 13419  0027F2  3620               	rlcf	__div_to_l_@quot+2,f,c
 13420  0027F4  3621               	rlcf	__div_to_l_@quot+3,f,c
 13421  0027F6  0623               	decf	__div_to_l_@exp1,f,c
 13422  0027F8                     l1939:
 13423  0027F8  5023               	movf	__div_to_l_@exp1,w,c
 13424  0027FA  A4D8               	btfss	status,2,c
 13425  0027FC  D7F7               	goto	l1940
 13426  0027FE                     u8480:
 13427  0027FE  C01E  F018         	movff	__div_to_l_@quot,?__div_to_l_
 13428  002802  C01F  F019         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 13429  002806  C020  F01A         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 13430  00280A  C021  F01B         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 13431  00280E  0012               	return		;funcret
 13432  002810                     __end_of__div_to_l_:
 13433                           	opt stack 0
 13434                           tosu	equ	0xFFF
 13435                           tosh	equ	0xFFE
 13436                           tosl	equ	0xFFD
 13437                           pclath	equ	0xFFA
 13438                           tblptru	equ	0xFF8
 13439                           tblptrh	equ	0xFF7
 13440                           tblptrl	equ	0xFF6
 13441                           tablat	equ	0xFF5
 13442                           prodh	equ	0xFF4
 13443                           prodl	equ	0xFF3
 13444                           intcon	equ	0xFF2
 13445                           intcon2	equ	0xFF1
 13446                           postinc0	equ	0xFEE
 13447                           wreg	equ	0xFE8
 13448                           indf1	equ	0xFE7
 13449                           postdec1	equ	0xFE5
 13450                           fsr1h	equ	0xFE2
 13451                           fsr1l	equ	0xFE1
 13452                           indf2	equ	0xFDF
 13453                           postinc2	equ	0xFDE
 13454                           postdec2	equ	0xFDD
 13455                           fsr2h	equ	0xFDA
 13456                           fsr2l	equ	0xFD9
 13457                           status	equ	0xFD8
 13458                           
 13459 ;; *************** function ___llmod *****************
 13460 ;; Defined at:
 13461 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 13462 ;; Parameters:    Size  Location     Type
 13463 ;;  dividend        4   83[BANK0 ] unsigned long 
 13464 ;;  divisor         4   87[BANK0 ] unsigned long 
 13465 ;; Auto vars:     Size  Location     Type
 13466 ;;  counter         1   91[BANK0 ] unsigned char 
 13467 ;; Return value:  Size  Location     Type
 13468 ;;                  4   83[BANK0 ] unsigned long 
 13469 ;; Registers used:
 13470 ;;		wreg, status,2, status,0
 13471 ;; Tracked objects:
 13472 ;;		On entry : 0/0
 13473 ;;		On exit  : 0/0
 13474 ;;		Unchanged: 0/0
 13475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13476 ;;      Params:         0       8       0       0       0       0       0
 13477 ;;      Locals:         0       1       0       0       0       0       0
 13478 ;;      Temps:          0       0       0       0       0       0       0
 13479 ;;      Totals:         0       9       0       0       0       0       0
 13480 ;;Total ram usage:        9 bytes
 13481 ;; Hardware stack levels used:    1
 13482 ;; Hardware stack levels required when called:    3
 13483 ;; This function calls:
 13484 ;;		Nothing
 13485 ;; This function is called by:
 13486 ;;		_GroupRx
 13487 ;;		_GroupTx
 13488 ;;		_SetMcuRunTime
 13489 ;;		_sprintf
 13490 ;;		_DacSetValue
 13491 ;; This function uses a non-reentrant model
 13492 ;;
 13493                           
 13494                           	psect	text46
 13495  003CA6                     __ptext46:
 13496                           	opt stack 0
 13497  003CA6                     ___llmod:
 13498                           	opt stack 25
 13499                           
 13500                           ;incstack = 0
 13501  003CA6  0100               	movlb	0	; () banked
 13502  003CA8  51B7               	movf	___llmod@divisor& (0+255),w,b
 13503  003CAA  11B8               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 13504  003CAC  11B9               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 13505  003CAE  11BA               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 13506  003CB0  B4D8               	btfsc	status,2,c
 13507  003CB2  D024               	goto	l2127
 13508                           
 13509                           ; BSR set to: 0
 13510  003CB4  0E01               	movlw	1
 13511  003CB6  6FBB               	movwf	___llmod@counter& (0+255),b
 13512  003CB8  D006               	goto	l2122
 13513  003CBA                     
 13514                           ; BSR set to: 0
 13515                           
 13516                           ; BSR set to: 0
 13517  003CBA  90D8               	bcf	status,0,c
 13518  003CBC  37B7               	rlcf	___llmod@divisor& (0+255),f,b
 13519  003CBE  37B8               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 13520  003CC0  37B9               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 13521  003CC2  37BA               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 13522  003CC4  2BBB               	incf	___llmod@counter& (0+255),f,b
 13523  003CC6                     l2122:
 13524                           
 13525                           ; BSR set to: 0
 13526                           
 13527                           ; BSR set to: 0
 13528  003CC6  AFBA               	btfss	(___llmod@divisor+3)& (0+255),7,b
 13529  003CC8  D7F8               	goto	l2123
 13530  003CCA                     u8530:
 13531                           
 13532                           ; BSR set to: 0
 13533                           
 13534                           ; BSR set to: 0
 13535                           
 13536                           ; BSR set to: 0
 13537  003CCA  51B7               	movf	___llmod@divisor& (0+255),w,b
 13538  003CCC  5DB3               	subwf	___llmod@dividend& (0+255),w,b
 13539  003CCE  51B8               	movf	(___llmod@divisor+1)& (0+255),w,b
 13540  003CD0  59B4               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 13541  003CD2  51B9               	movf	(___llmod@divisor+2)& (0+255),w,b
 13542  003CD4  59B5               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 13543  003CD6  51BA               	movf	(___llmod@divisor+3)& (0+255),w,b
 13544  003CD8  59B6               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 13545  003CDA  A0D8               	btfss	status,0,c
 13546  003CDC  D008               	goto	l2126
 13547                           
 13548                           ; BSR set to: 0
 13549  003CDE  51B7               	movf	___llmod@divisor& (0+255),w,b
 13550  003CE0  5FB3               	subwf	___llmod@dividend& (0+255),f,b
 13551  003CE2  51B8               	movf	(___llmod@divisor+1)& (0+255),w,b
 13552  003CE4  5BB4               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 13553  003CE6  51B9               	movf	(___llmod@divisor+2)& (0+255),w,b
 13554  003CE8  5BB5               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 13555  003CEA  51BA               	movf	(___llmod@divisor+3)& (0+255),w,b
 13556  003CEC  5BB6               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 13557  003CEE                     l2126:
 13558                           
 13559                           ; BSR set to: 0
 13560                           
 13561                           ; BSR set to: 0
 13562  003CEE  90D8               	bcf	status,0,c
 13563  003CF0  33BA               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 13564  003CF2  33B9               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 13565  003CF4  33B8               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 13566  003CF6  33B7               	rrcf	___llmod@divisor& (0+255),f,b
 13567                           
 13568                           ; BSR set to: 0
 13569  003CF8  2FBB               	decfsz	___llmod@counter& (0+255),f,b
 13570  003CFA  D7E7               	goto	u8530
 13571  003CFC                     l2127:
 13572                           
 13573                           ; BSR set to: 0
 13574                           
 13575                           ; BSR set to: 0
 13576  003CFC  C0B3  F0B3         	movff	___llmod@dividend,?___llmod
 13577  003D00  C0B4  F0B4         	movff	___llmod@dividend+1,?___llmod+1
 13578  003D04  C0B5  F0B5         	movff	___llmod@dividend+2,?___llmod+2
 13579  003D08  C0B6  F0B6         	movff	___llmod@dividend+3,?___llmod+3
 13580                           
 13581                           ; BSR set to: 0
 13582  003D0C  0012               	return		;funcret
 13583  003D0E                     __end_of___llmod:
 13584                           	opt stack 0
 13585                           tosu	equ	0xFFF
 13586                           tosh	equ	0xFFE
 13587                           tosl	equ	0xFFD
 13588                           pclath	equ	0xFFA
 13589                           tblptru	equ	0xFF8
 13590                           tblptrh	equ	0xFF7
 13591                           tblptrl	equ	0xFF6
 13592                           tablat	equ	0xFF5
 13593                           prodh	equ	0xFF4
 13594                           prodl	equ	0xFF3
 13595                           intcon	equ	0xFF2
 13596                           intcon2	equ	0xFF1
 13597                           postinc0	equ	0xFEE
 13598                           wreg	equ	0xFE8
 13599                           indf1	equ	0xFE7
 13600                           postdec1	equ	0xFE5
 13601                           fsr1h	equ	0xFE2
 13602                           fsr1l	equ	0xFE1
 13603                           indf2	equ	0xFDF
 13604                           postinc2	equ	0xFDE
 13605                           postdec2	equ	0xFDD
 13606                           fsr2h	equ	0xFDA
 13607                           fsr2l	equ	0xFD9
 13608                           status	equ	0xFD8
 13609                           
 13610 ;; *************** function ___lldiv *****************
 13611 ;; Defined at:
 13612 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 13613 ;; Parameters:    Size  Location     Type
 13614 ;;  dividend        4   23[COMRAM] unsigned long 
 13615 ;;  divisor         4   27[COMRAM] unsigned long 
 13616 ;; Auto vars:     Size  Location     Type
 13617 ;;  quotient        4   31[COMRAM] unsigned long 
 13618 ;;  counter         1   35[COMRAM] unsigned char 
 13619 ;; Return value:  Size  Location     Type
 13620 ;;                  4   23[COMRAM] unsigned long 
 13621 ;; Registers used:
 13622 ;;		wreg, status,2, status,0
 13623 ;; Tracked objects:
 13624 ;;		On entry : 0/0
 13625 ;;		On exit  : 0/0
 13626 ;;		Unchanged: 0/0
 13627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13628 ;;      Params:         8       0       0       0       0       0       0
 13629 ;;      Locals:         5       0       0       0       0       0       0
 13630 ;;      Temps:          0       0       0       0       0       0       0
 13631 ;;      Totals:        13       0       0       0       0       0       0
 13632 ;;Total ram usage:       13 bytes
 13633 ;; Hardware stack levels used:    1
 13634 ;; Hardware stack levels required when called:    3
 13635 ;; This function calls:
 13636 ;;		Nothing
 13637 ;; This function is called by:
 13638 ;;		_set_system_type
 13639 ;;		_sprintf
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           	psect	text47
 13644  00396E                     __ptext47:
 13645                           	opt stack 0
 13646  00396E                     ___lldiv:
 13647                           	opt stack 25
 13648                           
 13649                           ; BSR set to: 0
 13650                           ;incstack = 0
 13651  00396E  0E00               	movlw	0
 13652  003970  6E20               	movwf	___lldiv@quotient,c
 13653  003972  0E00               	movlw	0
 13654  003974  6E21               	movwf	___lldiv@quotient+1,c
 13655  003976  0E00               	movlw	0
 13656  003978  6E22               	movwf	___lldiv@quotient+2,c
 13657  00397A  0E00               	movlw	0
 13658  00397C  6E23               	movwf	___lldiv@quotient+3,c
 13659  00397E  501C               	movf	___lldiv@divisor,w,c
 13660  003980  101D               	iorwf	___lldiv@divisor+1,w,c
 13661  003982  101E               	iorwf	___lldiv@divisor+2,w,c
 13662  003984  101F               	iorwf	___lldiv@divisor+3,w,c
 13663  003986  B4D8               	btfsc	status,2,c
 13664  003988  D02A               	goto	l2117
 13665  00398A  0E01               	movlw	1
 13666  00398C  6E24               	movwf	___lldiv@counter,c
 13667  00398E  D006               	goto	l2112
 13668  003990  90D8               	bcf	status,0,c
 13669  003992  361C               	rlcf	___lldiv@divisor,f,c
 13670  003994  361D               	rlcf	___lldiv@divisor+1,f,c
 13671  003996  361E               	rlcf	___lldiv@divisor+2,f,c
 13672  003998  361F               	rlcf	___lldiv@divisor+3,f,c
 13673  00399A  2A24               	incf	___lldiv@counter,f,c
 13674  00399C                     l2112:
 13675  00399C  AE1F               	btfss	___lldiv@divisor+3,7,c
 13676  00399E  D7F8               	goto	l2113
 13677  0039A0                     u8500:
 13678  0039A0  90D8               	bcf	status,0,c
 13679  0039A2  3620               	rlcf	___lldiv@quotient,f,c
 13680  0039A4  3621               	rlcf	___lldiv@quotient+1,f,c
 13681  0039A6  3622               	rlcf	___lldiv@quotient+2,f,c
 13682  0039A8  3623               	rlcf	___lldiv@quotient+3,f,c
 13683  0039AA  501C               	movf	___lldiv@divisor,w,c
 13684  0039AC  5C18               	subwf	___lldiv@dividend,w,c
 13685  0039AE  501D               	movf	___lldiv@divisor+1,w,c
 13686  0039B0  5819               	subwfb	___lldiv@dividend+1,w,c
 13687  0039B2  501E               	movf	___lldiv@divisor+2,w,c
 13688  0039B4  581A               	subwfb	___lldiv@dividend+2,w,c
 13689  0039B6  501F               	movf	___lldiv@divisor+3,w,c
 13690  0039B8  581B               	subwfb	___lldiv@dividend+3,w,c
 13691  0039BA  A0D8               	btfss	status,0,c
 13692  0039BC  D009               	goto	l2116
 13693  0039BE  501C               	movf	___lldiv@divisor,w,c
 13694  0039C0  5E18               	subwf	___lldiv@dividend,f,c
 13695  0039C2  501D               	movf	___lldiv@divisor+1,w,c
 13696  0039C4  5A19               	subwfb	___lldiv@dividend+1,f,c
 13697  0039C6  501E               	movf	___lldiv@divisor+2,w,c
 13698  0039C8  5A1A               	subwfb	___lldiv@dividend+2,f,c
 13699  0039CA  501F               	movf	___lldiv@divisor+3,w,c
 13700  0039CC  5A1B               	subwfb	___lldiv@dividend+3,f,c
 13701  0039CE  8020               	bsf	___lldiv@quotient,0,c
 13702  0039D0                     l2116:
 13703  0039D0  90D8               	bcf	status,0,c
 13704  0039D2  321F               	rrcf	___lldiv@divisor+3,f,c
 13705  0039D4  321E               	rrcf	___lldiv@divisor+2,f,c
 13706  0039D6  321D               	rrcf	___lldiv@divisor+1,f,c
 13707  0039D8  321C               	rrcf	___lldiv@divisor,f,c
 13708  0039DA  2E24               	decfsz	___lldiv@counter,f,c
 13709  0039DC  D7E1               	goto	u8500
 13710  0039DE                     l2117:
 13711  0039DE  C020  F018         	movff	___lldiv@quotient,?___lldiv
 13712  0039E2  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
 13713  0039E6  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
 13714  0039EA  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
 13715  0039EE  0012               	return		;funcret
 13716  0039F0                     __end_of___lldiv:
 13717                           	opt stack 0
 13718                           tosu	equ	0xFFF
 13719                           tosh	equ	0xFFE
 13720                           tosl	equ	0xFFD
 13721                           pclath	equ	0xFFA
 13722                           tblptru	equ	0xFF8
 13723                           tblptrh	equ	0xFF7
 13724                           tblptrl	equ	0xFF6
 13725                           tablat	equ	0xFF5
 13726                           prodh	equ	0xFF4
 13727                           prodl	equ	0xFF3
 13728                           intcon	equ	0xFF2
 13729                           intcon2	equ	0xFF1
 13730                           postinc0	equ	0xFEE
 13731                           wreg	equ	0xFE8
 13732                           indf1	equ	0xFE7
 13733                           postdec1	equ	0xFE5
 13734                           fsr1h	equ	0xFE2
 13735                           fsr1l	equ	0xFE1
 13736                           indf2	equ	0xFDF
 13737                           postinc2	equ	0xFDE
 13738                           postdec2	equ	0xFDD
 13739                           fsr2h	equ	0xFDA
 13740                           fsr2l	equ	0xFD9
 13741                           status	equ	0xFD8
 13742                           
 13743 ;; *************** function _UART_Write_Text *****************
 13744 ;; Defined at:
 13745 ;;		line 225 in file "EusartApp.c"
 13746 ;; Parameters:    Size  Location     Type
 13747 ;;  text            2   24[COMRAM] PTR unsigned char 
 13748 ;;		 -> PrintTxStatus@dest(80), PrintRxStatus@dest(80), PrintSystemStatus@dest(80), PrintHelpScreen@dest(50), 
 13749 ;;		 -> SendUartSystemInitMessage@dest(50), STR_17(10), STR_16(10), STR_15(10), 
 13750 ;;		 -> STR_14(10), STR_13(10), STR_12(10), STR_11(10), 
 13751 ;;		 -> readUartByte@dest(50), STR_9(9), SampleSingleChannel@dest(50), STR_7(10), 
 13752 ;;		 -> STR_6(34), STR_5(32), STR_4(10), STR_3(29), 
 13753 ;;		 -> STR_2(33), STR_1(10), 
 13754 ;; Auto vars:     Size  Location     Type
 13755 ;;  i               2   28[COMRAM] int 
 13756 ;; Return value:  Size  Location     Type
 13757 ;;                  1    wreg      void 
 13758 ;; Registers used:
 13759 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13760 ;; Tracked objects:
 13761 ;;		On entry : 0/0
 13762 ;;		On exit  : 0/0
 13763 ;;		Unchanged: 0/0
 13764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13765 ;;      Params:         2       0       0       0       0       0       0
 13766 ;;      Locals:         2       0       0       0       0       0       0
 13767 ;;      Temps:          2       0       0       0       0       0       0
 13768 ;;      Totals:         6       0       0       0       0       0       0
 13769 ;;Total ram usage:        6 bytes
 13770 ;; Hardware stack levels used:    1
 13771 ;; Hardware stack levels required when called:    4
 13772 ;; This function calls:
 13773 ;;		_EUSART1_Write
 13774 ;; This function is called by:
 13775 ;;		_AdcSingleSample
 13776 ;;		_SampleSingleChannel
 13777 ;;		_readUartByte
 13778 ;;		_set_system_type
 13779 ;;		_SetUartRefrashRate
 13780 ;;		_SetUartMode
 13781 ;;		_SendUartSystemInitMessage
 13782 ;;		_PrintHelpScreen
 13783 ;;		_PrintSystemStatus
 13784 ;;		_PrintRxStatus
 13785 ;;		_PrintTxStatus
 13786 ;; This function uses a non-reentrant model
 13787 ;;
 13788                           
 13789                           	psect	text48
 13790  003B5C                     __ptext48:
 13791                           	opt stack 0
 13792  003B5C                     _UART_Write_Text:
 13793                           	opt stack 25
 13794                           
 13795                           ;EusartApp.c: 227: for(int i =0;text[i]!='\0';i++)
 13796                           
 13797                           ;incstack = 0
 13798  003B5C  0E00               	movlw	0
 13799  003B5E  6E1E               	movwf	UART_Write_Text@i+1,c
 13800  003B60  0E00               	movlw	0
 13801  003B62  6E1D               	movwf	UART_Write_Text@i,c
 13802  003B64  D01A               	goto	l333
 13803  003B66                     
 13804                           ;EusartApp.c: 228: {
 13805                           ;EusartApp.c: 229: EUSART1_Write(text[i]);
 13806  003B66  501D               	movf	UART_Write_Text@i,w,c
 13807  003B68  2419               	addwf	UART_Write_Text@text,w,c
 13808  003B6A  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 13809  003B6C  501E               	movf	UART_Write_Text@i+1,w,c
 13810  003B6E  201A               	addwfc	UART_Write_Text@text+1,w,c
 13811  003B70  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 13812  003B72  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 13813  003B76  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 13814  003B7A  6AF8               	clrf	tblptru,c
 13815  003B7C  0E05               	movlw	(high __ramtop+-1)
 13816  003B7E  64F7               	cpfsgt	tblptrh,c
 13817  003B80  D003               	bra	u8667
 13818  003B82  0008               	tblrd		*
 13819  003B84  50F5               	movf	tablat,w,c
 13820  003B86  D005               	bra	u8660
 13821  003B88                     u8667:
 13822  003B88  CFF6 FFE9          	movff	tblptrl,fsr0l
 13823  003B8C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13824  003B90  50EF               	movf	indf0,w,c
 13825  003B92                     u8660:
 13826  003B92  ECD5  F021         	call	_EUSART1_Write
 13827  003B96  4A1D               	infsnz	UART_Write_Text@i,f,c
 13828  003B98  2A1E               	incf	UART_Write_Text@i+1,f,c
 13829  003B9A                     l333:
 13830  003B9A  501D               	movf	UART_Write_Text@i,w,c
 13831  003B9C  2419               	addwf	UART_Write_Text@text,w,c
 13832  003B9E  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 13833  003BA0  501E               	movf	UART_Write_Text@i+1,w,c
 13834  003BA2  201A               	addwfc	UART_Write_Text@text+1,w,c
 13835  003BA4  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 13836  003BA6  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 13837  003BAA  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 13838  003BAE  6AF8               	clrf	tblptru,c
 13839  003BB0  0E05               	movlw	(high __ramtop+-1)
 13840  003BB2  64F7               	cpfsgt	tblptrh,c
 13841  003BB4  D003               	bra	u8677
 13842  003BB6  0008               	tblrd		*
 13843  003BB8  50F5               	movf	tablat,w,c
 13844  003BBA  D005               	bra	u8670
 13845  003BBC                     u8677:
 13846  003BBC  CFF6 FFE9          	movff	tblptrl,fsr0l
 13847  003BC0  CFF7 FFEA          	movff	tblptrh,fsr0h
 13848  003BC4  50EF               	movf	indf0,w,c
 13849  003BC6                     u8670:
 13850  003BC6  0900               	iorlw	0
 13851  003BC8  B4D8               	btfsc	status,2,c
 13852  003BCA  0012               	return	
 13853  003BCC  D7CC               	goto	l334
 13854  003BCE                     __end_of_UART_Write_Text:
 13855                           	opt stack 0
 13856                           tosu	equ	0xFFF
 13857                           tosh	equ	0xFFE
 13858                           tosl	equ	0xFFD
 13859                           pclath	equ	0xFFA
 13860                           tblptru	equ	0xFF8
 13861                           tblptrh	equ	0xFF7
 13862                           tblptrl	equ	0xFF6
 13863                           tablat	equ	0xFF5
 13864                           prodh	equ	0xFF4
 13865                           prodl	equ	0xFF3
 13866                           intcon	equ	0xFF2
 13867                           intcon2	equ	0xFF1
 13868                           indf0	equ	0xFEF
 13869                           postinc0	equ	0xFEE
 13870                           fsr0h	equ	0xFEA
 13871                           fsr0l	equ	0xFE9
 13872                           wreg	equ	0xFE8
 13873                           indf1	equ	0xFE7
 13874                           postdec1	equ	0xFE5
 13875                           fsr1h	equ	0xFE2
 13876                           fsr1l	equ	0xFE1
 13877                           indf2	equ	0xFDF
 13878                           postinc2	equ	0xFDE
 13879                           postdec2	equ	0xFDD
 13880                           fsr2h	equ	0xFDA
 13881                           fsr2l	equ	0xFD9
 13882                           status	equ	0xFD8
 13883                           
 13884 ;; *************** function _EUSART1_Write *****************
 13885 ;; Defined at:
 13886 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 13887 ;; Parameters:    Size  Location     Type
 13888 ;;  txData          1    wreg     unsigned char 
 13889 ;; Auto vars:     Size  Location     Type
 13890 ;;  txData          1   23[COMRAM] unsigned char 
 13891 ;; Return value:  Size  Location     Type
 13892 ;;                  1    wreg      void 
 13893 ;; Registers used:
 13894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13895 ;; Tracked objects:
 13896 ;;		On entry : 0/0
 13897 ;;		On exit  : 0/0
 13898 ;;		Unchanged: 0/0
 13899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13900 ;;      Params:         0       0       0       0       0       0       0
 13901 ;;      Locals:         1       0       0       0       0       0       0
 13902 ;;      Temps:          0       0       0       0       0       0       0
 13903 ;;      Totals:         1       0       0       0       0       0       0
 13904 ;;Total ram usage:        1 bytes
 13905 ;; Hardware stack levels used:    1
 13906 ;; Hardware stack levels required when called:    3
 13907 ;; This function calls:
 13908 ;;		Nothing
 13909 ;; This function is called by:
 13910 ;;		_UART_Write_Text
 13911 ;;		_WriteUartMessage
 13912 ;; This function uses a non-reentrant model
 13913 ;;
 13914                           
 13915                           	psect	text49
 13916  0043AA                     __ptext49:
 13917                           	opt stack 0
 13918  0043AA                     _EUSART1_Write:
 13919                           	opt stack 25
 13920                           
 13921                           ;incstack = 0
 13922                           ;EUSART1_Write@txData stored from wreg
 13923  0043AA  6E18               	movwf	EUSART1_Write@txData,c
 13924  0043AC                     
 13925                           ;eusart1.c: 160: {
 13926                           
 13927                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 13928  0043AC  0101               	movlb	1	; () banked
 13929  0043AE  51EA               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 13930  0043B0  B4D8               	btfsc	status,2,c
 13931  0043B2  D7FC               	goto	l8230
 13932                           
 13933                           ; BSR set to: 1
 13934                           ;eusart1.c: 161: }
 13935                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 13936  0043B4  B89D               	btfsc	3997,4,c	;volatile
 13937  0043B6  D003               	goto	l842
 13938                           
 13939                           ; BSR set to: 1
 13940                           ;eusart1.c: 164: {
 13941                           ;eusart1.c: 165: TXREG1 = txData;
 13942  0043B8  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 13943                           
 13944                           ;eusart1.c: 166: }
 13945  0043BC  D012               	goto	l843
 13946  0043BE                     l842:
 13947                           
 13948                           ; BSR set to: 1
 13949                           ;eusart1.c: 167: else
 13950                           ;eusart1.c: 168: {
 13951                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 13952  0043BE  989D               	bcf	3997,4,c	;volatile
 13953                           
 13954                           ; BSR set to: 1
 13955                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 13956  0043C0  5044               	movf	_eusart1TxHead,w,c	;volatile
 13957  0043C2  0D01               	mullw	1
 13958  0043C4  0E00               	movlw	low _eusart1TxBuffer
 13959  0043C6  24F3               	addwf	prodl,w,c
 13960  0043C8  6ED9               	movwf	fsr2l,c
 13961  0043CA  0E02               	movlw	high _eusart1TxBuffer
 13962  0043CC  20F4               	addwfc	prodh,w,c
 13963  0043CE  6EDA               	movwf	fsr2h,c
 13964  0043D0  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 13965                           
 13966                           ; BSR set to: 1
 13967  0043D4  2A44               	incf	_eusart1TxHead,f,c	;volatile
 13968                           
 13969                           ; BSR set to: 1
 13970                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 13971  0043D6  0E45               	movlw	69
 13972  0043D8  6444               	cpfsgt	_eusart1TxHead,c	;volatile
 13973  0043DA  D002               	goto	l844
 13974                           
 13975                           ; BSR set to: 1
 13976                           ;eusart1.c: 172: {
 13977                           ;eusart1.c: 173: eusart1TxHead = 0;
 13978  0043DC  0E00               	movlw	0
 13979  0043DE  6E44               	movwf	_eusart1TxHead,c	;volatile
 13980  0043E0                     l844:
 13981                           
 13982                           ; BSR set to: 1
 13983                           ;eusart1.c: 174: }
 13984                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 13985                           
 13986                           ; BSR set to: 1
 13987  0043E0  07EA               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 13988  0043E2                     l843:
 13989                           
 13990                           ; BSR set to: 1
 13991                           ;eusart1.c: 176: }
 13992                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 13993                           
 13994                           ; BSR set to: 1
 13995  0043E2  889D               	bsf	3997,4,c	;volatile
 13996                           
 13997                           ; BSR set to: 1
 13998  0043E4  0012               	return		;funcret
 13999  0043E6                     __end_of_EUSART1_Write:
 14000                           	opt stack 0
 14001                           tosu	equ	0xFFF
 14002                           tosh	equ	0xFFE
 14003                           tosl	equ	0xFFD
 14004                           pclath	equ	0xFFA
 14005                           tblptru	equ	0xFF8
 14006                           tblptrh	equ	0xFF7
 14007                           tblptrl	equ	0xFF6
 14008                           tablat	equ	0xFF5
 14009                           prodh	equ	0xFF4
 14010                           prodl	equ	0xFF3
 14011                           intcon	equ	0xFF2
 14012                           intcon2	equ	0xFF1
 14013                           indf0	equ	0xFEF
 14014                           postinc0	equ	0xFEE
 14015                           fsr0h	equ	0xFEA
 14016                           fsr0l	equ	0xFE9
 14017                           wreg	equ	0xFE8
 14018                           indf1	equ	0xFE7
 14019                           postdec1	equ	0xFE5
 14020                           fsr1h	equ	0xFE2
 14021                           fsr1l	equ	0xFE1
 14022                           indf2	equ	0xFDF
 14023                           postinc2	equ	0xFDE
 14024                           postdec2	equ	0xFDD
 14025                           fsr2h	equ	0xFDA
 14026                           fsr2l	equ	0xFD9
 14027                           status	equ	0xFD8
 14028                           
 14029 ;; *************** function _SampleAllChannels *****************
 14030 ;; Defined at:
 14031 ;;		line 122 in file "AdcApp.c"
 14032 ;; Parameters:    Size  Location     Type
 14033 ;;		None
 14034 ;; Auto vars:     Size  Location     Type
 14035 ;;  _adcResult      2   86[BANK0 ] unsigned int 
 14036 ;;  adcRes          2   88[BANK0 ] unsigned int 
 14037 ;;  i               1   90[BANK0 ] unsigned char 
 14038 ;; Return value:  Size  Location     Type
 14039 ;;                  1    wreg      void 
 14040 ;; Registers used:
 14041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14042 ;; Tracked objects:
 14043 ;;		On entry : 0/0
 14044 ;;		On exit  : 0/0
 14045 ;;		Unchanged: 0/0
 14046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14047 ;;      Params:         0       0       0       0       0       0       0
 14048 ;;      Locals:         0       8       0       0       0       0       0
 14049 ;;      Temps:          0       0       0       0       0       0       0
 14050 ;;      Totals:         0       8       0       0       0       0       0
 14051 ;;Total ram usage:        8 bytes
 14052 ;; Hardware stack levels used:    1
 14053 ;; Hardware stack levels required when called:    8
 14054 ;; This function calls:
 14055 ;;		_ADC_GetConversion
 14056 ;;		___ftdiv
 14057 ;;		___ftmul
 14058 ;;		___fttol
 14059 ;;		___lwtoft
 14060 ;;		_pow
 14061 ;; This function is called by:
 14062 ;;		_main
 14063 ;; This function uses a non-reentrant model
 14064 ;;
 14065                           
 14066                           	psect	text50
 14067  002218                     __ptext50:
 14068                           	opt stack 0
 14069  002218                     _SampleAllChannels:
 14070                           	opt stack 22
 14071                           
 14072                           ;AdcApp.c: 124: uint16_t adcRes = 0x0;
 14073                           
 14074                           ; BSR set to: 1
 14075                           ;incstack = 0
 14076  002218  0E00               	movlw	0
 14077  00221A  0100               	movlb	0	; () banked
 14078  00221C  6FB9               	movwf	(SampleAllChannels@adcRes+1)& (0+255),b
 14079  00221E  0E00               	movlw	0
 14080  002220  6FB8               	movwf	SampleAllChannels@adcRes& (0+255),b
 14081                           
 14082                           ;AdcApp.c: 125: uint8_t i;
 14083                           ;AdcApp.c: 126: for (i=1;i<=4;i++)
 14084  002222  0E01               	movlw	1
 14085  002224  6FBA               	movwf	SampleAllChannels@i& (0+255),b
 14086  002226                     l9562:
 14087                           
 14088                           ; BSR set to: 0
 14089  002226  0E04               	movlw	4
 14090  002228  65BA               	cpfsgt	SampleAllChannels@i& (0+255),b
 14091  00222A  D001               	goto	l184
 14092  00222C  0012               	return	
 14093  00222E                     l184:
 14094                           
 14095                           ; BSR set to: 0
 14096                           ;AdcApp.c: 127: {
 14097                           ;AdcApp.c: 128: adc_result_t _adcResult = ADC_GetConversion(channelArr[i]);
 14098                           
 14099                           ; BSR set to: 0
 14100  00222E  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 14101  002230  0D01               	mullw	1
 14102  002232  0E33               	movlw	low _channelArr
 14103  002234  24F3               	addwf	prodl,w,c
 14104  002236  6EF6               	movwf	tblptrl,c
 14105  002238  0E78               	movlw	high _channelArr
 14106  00223A  20F4               	addwfc	prodh,w,c
 14107  00223C  6EF7               	movwf	tblptrh,c
 14108  00223E                     	if	0	;There are less than 3 active tblptr bytes
 14109  00223E                     	endif
 14110  00223E  0008               	tblrd		*
 14111  002240  50F5               	movf	tablat,w,c
 14112  002242  ECEC  F022         	call	_ADC_GetConversion
 14113  002246  C018  F0B6         	movff	?_ADC_GetConversion,SampleAllChannels@_adcResult
 14114  00224A  C019  F0B7         	movff	?_ADC_GetConversion+1,SampleAllChannels@_adcResult+1
 14115                           
 14116                           ;AdcApp.c: 129: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14117  00224E  0E00               	movlw	0
 14118  002250  0100               	movlb	0	; () banked
 14119  002252  6FA5               	movwf	pow@y& (0+255),b
 14120  002254  0E20               	movlw	32
 14121  002256  6FA6               	movwf	(pow@y+1)& (0+255),b
 14122  002258  0E41               	movlw	65
 14123  00225A  6FA7               	movwf	(pow@y+2)& (0+255),b
 14124  00225C  0E00               	movlw	0
 14125  00225E  6FA2               	movwf	pow@x& (0+255),b
 14126  002260  0E00               	movlw	0
 14127  002262  6FA3               	movwf	(pow@x+1)& (0+255),b
 14128  002264  0E40               	movlw	64
 14129  002266  6FA4               	movwf	(pow@x+2)& (0+255),b
 14130  002268  ECD8  F00E         	call	_pow	;wreg free
 14131  00226C  C0A2  F0B3         	movff	?_pow,_SampleAllChannels$3963
 14132  002270  C0A3  F0B4         	movff	?_pow+1,_SampleAllChannels$3963+1
 14133  002274  C0A4  F0B5         	movff	?_pow+2,_SampleAllChannels$3963+2
 14134                           
 14135                           ;AdcApp.c: 129: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14136  002278  0EC0               	movlw	192
 14137  00227A  0100               	movlb	0	; () banked
 14138  00227C  6F69               	movwf	___ftmul@f2& (0+255),b
 14139  00227E  0E50               	movlw	80
 14140  002280  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 14141  002282  0E45               	movlw	69
 14142  002284  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 14143  002286  C0B3  F026         	movff	_SampleAllChannels$3963,___ftdiv@f2
 14144  00228A  C0B4  F027         	movff	_SampleAllChannels$3963+1,___ftdiv@f2+1
 14145  00228E  C0B5  F028         	movff	_SampleAllChannels$3963+2,___ftdiv@f2+2
 14146  002292  C0B6  F020         	movff	SampleAllChannels@_adcResult,___lwtoft@c
 14147  002296  C0B7  F021         	movff	SampleAllChannels@_adcResult+1,___lwtoft@c+1
 14148  00229A  EC54  F023         	call	___lwtoft	;wreg free
 14149  00229E  C020  F023         	movff	?___lwtoft,___ftdiv@f1
 14150  0022A2  C021  F024         	movff	?___lwtoft+1,___ftdiv@f1+1
 14151  0022A6  C022  F025         	movff	?___lwtoft+2,___ftdiv@f1+2
 14152  0022AA  ECAD  F016         	call	___ftdiv	;wreg free
 14153  0022AE  C023  F066         	movff	?___ftdiv,___ftmul@f1
 14154  0022B2  C024  F067         	movff	?___ftdiv+1,___ftmul@f1+1
 14155  0022B6  C025  F068         	movff	?___ftdiv+2,___ftmul@f1+2
 14156  0022BA  EC32  F016         	call	___ftmul	;wreg free
 14157  0022BE  C066  F079         	movff	?___ftmul,___fttol@f1
 14158  0022C2  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
 14159  0022C6  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
 14160  0022CA  ECB6  F015         	call	___fttol	;wreg free
 14161  0022CE  C079  F0B8         	movff	?___fttol,SampleAllChannels@adcRes
 14162  0022D2  C07A  F0B9         	movff	?___fttol+1,SampleAllChannels@adcRes+1
 14163                           
 14164                           ;AdcApp.c: 130: if(channelArr[i] == 0x6) lastAdcTemp = adcRes;
 14165  0022D6  0100               	movlb	0	; () banked
 14166  0022D8  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 14167  0022DA  0D01               	mullw	1
 14168  0022DC  0E33               	movlw	low _channelArr
 14169  0022DE  24F3               	addwf	prodl,w,c
 14170  0022E0  6EF6               	movwf	tblptrl,c
 14171  0022E2  0E78               	movlw	high _channelArr
 14172  0022E4  20F4               	addwfc	prodh,w,c
 14173  0022E6  6EF7               	movwf	tblptrh,c
 14174  0022E8                     	if	0	;There are less than 3 active tblptr bytes
 14175  0022E8                     	endif
 14176  0022E8  0008               	tblrd		*
 14177  0022EA  50F5               	movf	tablat,w,c
 14178  0022EC  0A06               	xorlw	6
 14179  0022EE  A4D8               	btfss	status,2,c
 14180  0022F0  D004               	goto	l186
 14181                           
 14182                           ; BSR set to: 0
 14183  0022F2  C0B8  F03F         	movff	SampleAllChannels@adcRes,_lastAdcTemp	;volatile
 14184  0022F6  C0B9  F040         	movff	SampleAllChannels@adcRes+1,_lastAdcTemp+1	;volatile
 14185  0022FA                     l186:
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;AdcApp.c: 131: if(channelArr[i] == 0x5) lastAdcFfwrRSSI = adcRes;
 14189                           
 14190                           ; BSR set to: 0
 14191  0022FA  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 14192  0022FC  0D01               	mullw	1
 14193  0022FE  0E33               	movlw	low _channelArr
 14194  002300  24F3               	addwf	prodl,w,c
 14195  002302  6EF6               	movwf	tblptrl,c
 14196  002304  0E78               	movlw	high _channelArr
 14197  002306  20F4               	addwfc	prodh,w,c
 14198  002308  6EF7               	movwf	tblptrh,c
 14199  00230A                     	if	0	;There are less than 3 active tblptr bytes
 14200  00230A                     	endif
 14201  00230A  0008               	tblrd		*
 14202  00230C  50F5               	movf	tablat,w,c
 14203  00230E  0A05               	xorlw	5
 14204  002310  A4D8               	btfss	status,2,c
 14205  002312  D004               	goto	l187
 14206                           
 14207                           ; BSR set to: 0
 14208  002314  C0B8  F03D         	movff	SampleAllChannels@adcRes,_lastAdcFfwrRSSI	;volatile
 14209  002318  C0B9  F03E         	movff	SampleAllChannels@adcRes+1,_lastAdcFfwrRSSI+1	;volatile
 14210  00231C                     l187:
 14211                           
 14212                           ; BSR set to: 0
 14213                           ;AdcApp.c: 132: if(channelArr[i] == 0x4) lastAdcRREV = adcRes;
 14214                           
 14215                           ; BSR set to: 0
 14216  00231C  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 14217  00231E  0D01               	mullw	1
 14218  002320  0E33               	movlw	low _channelArr
 14219  002322  24F3               	addwf	prodl,w,c
 14220  002324  6EF6               	movwf	tblptrl,c
 14221  002326  0E78               	movlw	high _channelArr
 14222  002328  20F4               	addwfc	prodh,w,c
 14223  00232A  6EF7               	movwf	tblptrh,c
 14224  00232C                     	if	0	;There are less than 3 active tblptr bytes
 14225  00232C                     	endif
 14226  00232C  0008               	tblrd		*
 14227  00232E  50F5               	movf	tablat,w,c
 14228  002330  0A04               	xorlw	4
 14229  002332  A4D8               	btfss	status,2,c
 14230  002334  D004               	goto	l188
 14231                           
 14232                           ; BSR set to: 0
 14233  002336  C0B8  F1CC         	movff	SampleAllChannels@adcRes,_lastAdcRREV	;volatile
 14234  00233A  C0B9  F1CD         	movff	SampleAllChannels@adcRes+1,_lastAdcRREV+1	;volatile
 14235  00233E                     l188:
 14236                           
 14237                           ; BSR set to: 0
 14238                           ;AdcApp.c: 133: if(channelArr[i] == 0x7) lastAdcVgMon = adcRes;
 14239                           
 14240                           ; BSR set to: 0
 14241  00233E  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 14242  002340  0D01               	mullw	1
 14243  002342  0E33               	movlw	low _channelArr
 14244  002344  24F3               	addwf	prodl,w,c
 14245  002346  6EF6               	movwf	tblptrl,c
 14246  002348  0E78               	movlw	high _channelArr
 14247  00234A  20F4               	addwfc	prodh,w,c
 14248  00234C  6EF7               	movwf	tblptrh,c
 14249  00234E                     	if	0	;There are less than 3 active tblptr bytes
 14250  00234E                     	endif
 14251  00234E  0008               	tblrd		*
 14252  002350  50F5               	movf	tablat,w,c
 14253  002352  0A07               	xorlw	7
 14254  002354  A4D8               	btfss	status,2,c
 14255  002356  D004               	goto	l189
 14256                           
 14257                           ; BSR set to: 0
 14258  002358  C0B8  F1CA         	movff	SampleAllChannels@adcRes,_lastAdcVgMon	;volatile
 14259  00235C  C0B9  F1CB         	movff	SampleAllChannels@adcRes+1,_lastAdcVgMon+1	;volatile
 14260  002360                     l189:
 14261                           
 14262                           ; BSR set to: 0
 14263                           
 14264                           ; BSR set to: 0
 14265  002360  2BBA               	incf	SampleAllChannels@i& (0+255),f,b
 14266  002362  D761               	goto	l9562
 14267  002364                     __end_of_SampleAllChannels:
 14268                           	opt stack 0
 14269                           tosu	equ	0xFFF
 14270                           tosh	equ	0xFFE
 14271                           tosl	equ	0xFFD
 14272                           pclath	equ	0xFFA
 14273                           tblptru	equ	0xFF8
 14274                           tblptrh	equ	0xFF7
 14275                           tblptrl	equ	0xFF6
 14276                           tablat	equ	0xFF5
 14277                           prodh	equ	0xFF4
 14278                           prodl	equ	0xFF3
 14279                           intcon	equ	0xFF2
 14280                           intcon2	equ	0xFF1
 14281                           indf0	equ	0xFEF
 14282                           postinc0	equ	0xFEE
 14283                           fsr0h	equ	0xFEA
 14284                           fsr0l	equ	0xFE9
 14285                           wreg	equ	0xFE8
 14286                           indf1	equ	0xFE7
 14287                           postdec1	equ	0xFE5
 14288                           fsr1h	equ	0xFE2
 14289                           fsr1l	equ	0xFE1
 14290                           indf2	equ	0xFDF
 14291                           postinc2	equ	0xFDE
 14292                           postdec2	equ	0xFDD
 14293                           fsr2h	equ	0xFDA
 14294                           fsr2l	equ	0xFD9
 14295                           status	equ	0xFD8
 14296                           
 14297 ;; *************** function ___lwtoft *****************
 14298 ;; Defined at:
 14299 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 14300 ;; Parameters:    Size  Location     Type
 14301 ;;  c               2   31[COMRAM] unsigned int 
 14302 ;; Auto vars:     Size  Location     Type
 14303 ;;		None
 14304 ;; Return value:  Size  Location     Type
 14305 ;;                  3   31[COMRAM] float 
 14306 ;; Registers used:
 14307 ;;		wreg, status,2, status,0, cstack
 14308 ;; Tracked objects:
 14309 ;;		On entry : 0/0
 14310 ;;		On exit  : 0/0
 14311 ;;		Unchanged: 0/0
 14312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14313 ;;      Params:         3       0       0       0       0       0       0
 14314 ;;      Locals:         0       0       0       0       0       0       0
 14315 ;;      Temps:          0       0       0       0       0       0       0
 14316 ;;      Totals:         3       0       0       0       0       0       0
 14317 ;;Total ram usage:        3 bytes
 14318 ;; Hardware stack levels used:    1
 14319 ;; Hardware stack levels required when called:    4
 14320 ;; This function calls:
 14321 ;;		___ftpack
 14322 ;; This function is called by:
 14323 ;;		_SampleSingleChannel
 14324 ;;		_SampleAllChannels
 14325 ;;		_CollectRxStatusParams
 14326 ;;		_CollectTxStatusParams
 14327 ;;		_DacAnalogToDigitalSpi
 14328 ;; This function uses a non-reentrant model
 14329 ;;
 14330                           
 14331                           	psect	text51
 14332  0046A8                     __ptext51:
 14333                           	opt stack 0
 14334  0046A8                     ___lwtoft:
 14335                           	opt stack 23
 14336                           
 14337                           ; BSR set to: 0
 14338                           ;incstack = 0
 14339  0046A8  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 14340  0046AC  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 14341  0046B0  6A1A               	clrf	___ftpack@arg+2,c
 14342  0046B2  0E8E               	movlw	142
 14343  0046B4  6E1B               	movwf	___ftpack@exp,c
 14344  0046B6  0E00               	movlw	0
 14345  0046B8  6E1C               	movwf	___ftpack@sign,c
 14346  0046BA  EC64  F01A         	call	___ftpack	;wreg free
 14347  0046BE  C018  F020         	movff	?___ftpack,?___lwtoft
 14348  0046C2  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 14349  0046C6  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 14350  0046CA  0012               	return	
 14351  0046CC                     __end_of___lwtoft:
 14352                           	opt stack 0
 14353                           tosu	equ	0xFFF
 14354                           tosh	equ	0xFFE
 14355                           tosl	equ	0xFFD
 14356                           pclath	equ	0xFFA
 14357                           tblptru	equ	0xFF8
 14358                           tblptrh	equ	0xFF7
 14359                           tblptrl	equ	0xFF6
 14360                           tablat	equ	0xFF5
 14361                           prodh	equ	0xFF4
 14362                           prodl	equ	0xFF3
 14363                           intcon	equ	0xFF2
 14364                           intcon2	equ	0xFF1
 14365                           indf0	equ	0xFEF
 14366                           postinc0	equ	0xFEE
 14367                           fsr0h	equ	0xFEA
 14368                           fsr0l	equ	0xFE9
 14369                           wreg	equ	0xFE8
 14370                           indf1	equ	0xFE7
 14371                           postdec1	equ	0xFE5
 14372                           fsr1h	equ	0xFE2
 14373                           fsr1l	equ	0xFE1
 14374                           indf2	equ	0xFDF
 14375                           postinc2	equ	0xFDE
 14376                           postdec2	equ	0xFDD
 14377                           fsr2h	equ	0xFDA
 14378                           fsr2l	equ	0xFD9
 14379                           status	equ	0xFD8
 14380                           
 14381 ;; *************** function _ADC_GetConversion *****************
 14382 ;; Defined at:
 14383 ;;		line 106 in file "mcc_generated_files/adc.c"
 14384 ;; Parameters:    Size  Location     Type
 14385 ;;  channel         1    wreg     enum E6975
 14386 ;; Auto vars:     Size  Location     Type
 14387 ;;  channel         1   27[COMRAM] enum E6975
 14388 ;; Return value:  Size  Location     Type
 14389 ;;                  2   23[COMRAM] unsigned int 
 14390 ;; Registers used:
 14391 ;;		wreg, status,2, status,0
 14392 ;; Tracked objects:
 14393 ;;		On entry : 0/0
 14394 ;;		On exit  : 0/0
 14395 ;;		Unchanged: 0/0
 14396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14397 ;;      Params:         2       0       0       0       0       0       0
 14398 ;;      Locals:         1       0       0       0       0       0       0
 14399 ;;      Temps:          2       0       0       0       0       0       0
 14400 ;;      Totals:         5       0       0       0       0       0       0
 14401 ;;Total ram usage:        5 bytes
 14402 ;; Hardware stack levels used:    1
 14403 ;; Hardware stack levels required when called:    3
 14404 ;; This function calls:
 14405 ;;		Nothing
 14406 ;; This function is called by:
 14407 ;;		_SampleSingleChannel
 14408 ;;		_SampleAllChannels
 14409 ;; This function uses a non-reentrant model
 14410 ;;
 14411                           
 14412                           	psect	text52
 14413  0045D8                     __ptext52:
 14414                           	opt stack 0
 14415  0045D8                     _ADC_GetConversion:
 14416                           	opt stack 26
 14417                           
 14418                           ;incstack = 0
 14419                           ;ADC_GetConversion@channel stored from wreg
 14420  0045D8  6E1C               	movwf	ADC_GetConversion@channel,c
 14421                           
 14422                           ;adc.c: 109: ADCON0bits.CHS = channel;
 14423  0045DA  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 14424  0045DE  461A               	rlncf	??_ADC_GetConversion,f,c
 14425  0045E0  461A               	rlncf	??_ADC_GetConversion,f,c
 14426  0045E2  50C2               	movf	4034,w,c	;volatile
 14427  0045E4  181A               	xorwf	??_ADC_GetConversion,w,c
 14428  0045E6  0B83               	andlw	-125
 14429  0045E8  181A               	xorwf	??_ADC_GetConversion,w,c
 14430  0045EA  6EC2               	movwf	4034,c	;volatile
 14431                           
 14432                           ;adc.c: 112: ADCON0bits.ADON = 1;
 14433  0045EC  80C2               	bsf	4034,0,c	;volatile
 14434                           
 14435                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 14436  0045EE  82C2               	bsf	4034,1,c	;volatile
 14437  0045F0                     
 14438                           ;adc.c: 119: {
 14439  0045F0  B2C2               	btfsc	4034,1,c	;volatile
 14440  0045F2  D7FE               	goto	l1055
 14441                           
 14442                           ;adc.c: 120: }
 14443                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 14444  0045F4  50C4               	movf	4036,w,c	;volatile
 14445  0045F6  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 14446  0045F8  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 14447  0045FA  50C3               	movf	4035,w,c	;volatile
 14448  0045FC  241A               	addwf	??_ADC_GetConversion,w,c
 14449  0045FE  6E18               	movwf	?_ADC_GetConversion,c
 14450  004600  0E00               	movlw	0
 14451  004602  201B               	addwfc	??_ADC_GetConversion+1,w,c
 14452  004604  6E19               	movwf	?_ADC_GetConversion+1,c
 14453  004606  0012               	return	
 14454  004608                     __end_of_ADC_GetConversion:
 14455                           	opt stack 0
 14456                           tosu	equ	0xFFF
 14457                           tosh	equ	0xFFE
 14458                           tosl	equ	0xFFD
 14459                           pclath	equ	0xFFA
 14460                           tblptru	equ	0xFF8
 14461                           tblptrh	equ	0xFF7
 14462                           tblptrl	equ	0xFF6
 14463                           tablat	equ	0xFF5
 14464                           prodh	equ	0xFF4
 14465                           prodl	equ	0xFF3
 14466                           intcon	equ	0xFF2
 14467                           intcon2	equ	0xFF1
 14468                           indf0	equ	0xFEF
 14469                           postinc0	equ	0xFEE
 14470                           fsr0h	equ	0xFEA
 14471                           fsr0l	equ	0xFE9
 14472                           wreg	equ	0xFE8
 14473                           indf1	equ	0xFE7
 14474                           postdec1	equ	0xFE5
 14475                           fsr1h	equ	0xFE2
 14476                           fsr1l	equ	0xFE1
 14477                           indf2	equ	0xFDF
 14478                           postinc2	equ	0xFDE
 14479                           postdec2	equ	0xFDD
 14480                           fsr2h	equ	0xFDA
 14481                           fsr2l	equ	0xFD9
 14482                           status	equ	0xFD8
 14483                           
 14484 ;; *************** function _ReadSystemStatusFromEprom *****************
 14485 ;; Defined at:
 14486 ;;		line 19 in file "SystemStatus.c"
 14487 ;; Parameters:    Size  Location     Type
 14488 ;;		None
 14489 ;; Auto vars:     Size  Location     Type
 14490 ;;  sysData         2  106[BANK0 ] unsigned int 
 14491 ;; Return value:  Size  Location     Type
 14492 ;;                  1    wreg      void 
 14493 ;; Registers used:
 14494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14495 ;; Tracked objects:
 14496 ;;		On entry : 0/0
 14497 ;;		On exit  : 0/0
 14498 ;;		Unchanged: 0/0
 14499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14500 ;;      Params:         0       0       0       0       0       0       0
 14501 ;;      Locals:         0       2       0       0       0       0       0
 14502 ;;      Temps:          0       0       0       0       0       0       0
 14503 ;;      Totals:         0       2       0       0       0       0       0
 14504 ;;Total ram usage:        2 bytes
 14505 ;; Hardware stack levels used:    1
 14506 ;; Hardware stack levels required when called:    9
 14507 ;; This function calls:
 14508 ;;		_ReadIntFromEeprom
 14509 ;; This function is called by:
 14510 ;;		_main
 14511 ;; This function uses a non-reentrant model
 14512 ;;
 14513                           
 14514                           	psect	text53
 14515  00385E                     __ptext53:
 14516                           	opt stack 0
 14517  00385E                     _ReadSystemStatusFromEprom:
 14518                           	opt stack 21
 14519                           
 14520                           ;SystemStatus.c: 21: uint16_t sysData = ReadIntFromEeprom((0x50) | SYSTEM_INFO_ADDRES[0]
      +                          , 1);
 14521                           
 14522                           ;incstack = 0
 14523  00385E  0E00               	movlw	0
 14524  003860  0100               	movlb	0	; () banked
 14525  003862  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 14526  003864  0E01               	movlw	1
 14527  003866  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 14528  003868  0E37               	movlw	low _SYSTEM_INFO_ADDRES
 14529  00386A  6EF6               	movwf	tblptrl,c
 14530  00386C                     	if	1	;There is more than 1 active tblptr byte
 14531  00386C  0E78               	movlw	high _SYSTEM_INFO_ADDRES
 14532  00386E  6EF7               	movwf	tblptrh,c
 14533  003870                     	endif
 14534  003870                     	if	0	;There are less than 3 active tblptr bytes
 14535  003870                     	endif
 14536  003870  0008               	tblrd		*
 14537  003872  50F5               	movf	tablat,w,c
 14538  003874  0950               	iorlw	80
 14539  003876  EC08  F014         	call	_ReadIntFromEeprom
 14540  00387A  C0B3  F0CA         	movff	?_ReadIntFromEeprom,ReadSystemStatusFromEprom@sysData
 14541  00387E  C0B4  F0CB         	movff	?_ReadIntFromEeprom+1,ReadSystemStatusFromEprom@sysData+1
 14542                           
 14543                           ;SystemStatus.c: 22: systemStatus.UnitType = sysData & 0x1;
 14544  003882  0100               	movlb	0	; () banked
 14545  003884  51CA               	movf	ReadSystemStatusFromEprom@sysData& (0+255),w,b
 14546  003886  0B01               	andlw	1
 14547  003888  0101               	movlb	1	; () banked
 14548  00388A  6FB5               	movwf	(_systemStatus+3)& (0+255),b	;volatile
 14549                           
 14550                           ; BSR set to: 1
 14551                           ;SystemStatus.c: 23: sysData = ReadIntFromEeprom((0x50) | SYSTEM_INFO_ADDRES[1], 1);
 14552  00388C  0E00               	movlw	0
 14553  00388E  0100               	movlb	0	; () banked
 14554  003890  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 14555  003892  0E01               	movlw	1
 14556  003894  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 14557  003896  0E38               	movlw	low (_SYSTEM_INFO_ADDRES+1)
 14558  003898  6EF6               	movwf	tblptrl,c
 14559  00389A  0E78               	movlw	high (_SYSTEM_INFO_ADDRES+1)
 14560  00389C  6EF7               	movwf	tblptrh,c
 14561  00389E                     	if	0	;tblptru may be non-zero
 14562  00389E                     	endif
 14563  00389E                     	if	0	;tblptru may be non-zero
 14564  00389E                     	endif
 14565  00389E  0008               	tblrd		*
 14566  0038A0  50F5               	movf	tablat,w,c
 14567  0038A2  0950               	iorlw	80
 14568  0038A4  EC08  F014         	call	_ReadIntFromEeprom
 14569  0038A8  C0B3  F0CA         	movff	?_ReadIntFromEeprom,ReadSystemStatusFromEprom@sysData
 14570  0038AC  C0B4  F0CB         	movff	?_ReadIntFromEeprom+1,ReadSystemStatusFromEprom@sysData+1
 14571                           
 14572                           ;SystemStatus.c: 24: systemStatus.UartMode = sysData & 0x1;
 14573  0038B0  0100               	movlb	0	; () banked
 14574  0038B2  51CA               	movf	ReadSystemStatusFromEprom@sysData& (0+255),w,b
 14575  0038B4  0B01               	andlw	1
 14576  0038B6  0101               	movlb	1	; () banked
 14577  0038B8  6FBA               	movwf	(_systemStatus+8)& (0+255),b	;volatile
 14578                           
 14579                           ; BSR set to: 1
 14580                           ;SystemStatus.c: 25: sysData = ReadIntFromEeprom((0x50) | SYSTEM_INFO_ADDRES[2], 2);
 14581  0038BA  0E00               	movlw	0
 14582  0038BC  0100               	movlb	0	; () banked
 14583  0038BE  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 14584  0038C0  0E02               	movlw	2
 14585  0038C2  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 14586  0038C4  0E39               	movlw	low (_SYSTEM_INFO_ADDRES+2)
 14587  0038C6  6EF6               	movwf	tblptrl,c
 14588  0038C8  0E78               	movlw	high (_SYSTEM_INFO_ADDRES+2)
 14589  0038CA  6EF7               	movwf	tblptrh,c
 14590  0038CC                     	if	0	;tblptru may be non-zero
 14591  0038CC                     	endif
 14592  0038CC                     	if	0	;tblptru may be non-zero
 14593  0038CC                     	endif
 14594  0038CC  0008               	tblrd		*
 14595  0038CE  50F5               	movf	tablat,w,c
 14596  0038D0  0950               	iorlw	80
 14597  0038D2  EC08  F014         	call	_ReadIntFromEeprom
 14598  0038D6  C0B3  F0CA         	movff	?_ReadIntFromEeprom,ReadSystemStatusFromEprom@sysData
 14599  0038DA  C0B4  F0CB         	movff	?_ReadIntFromEeprom+1,ReadSystemStatusFromEprom@sysData+1
 14600                           
 14601                           ;SystemStatus.c: 26: systemStatus.UartRefreshRate = sysData & 0x1F;
 14602  0038DE  0100               	movlb	0	; () banked
 14603  0038E0  51CA               	movf	ReadSystemStatusFromEprom@sysData& (0+255),w,b
 14604  0038E2  0B1F               	andlw	31
 14605  0038E4  0101               	movlb	1	; () banked
 14606  0038E6  6FBB               	movwf	(_systemStatus+9)& (0+255),b	;volatile
 14607                           
 14608                           ; BSR set to: 1
 14609  0038E8  0012               	return		;funcret
 14610  0038EA                     __end_of_ReadSystemStatusFromEprom:
 14611                           	opt stack 0
 14612                           tosu	equ	0xFFF
 14613                           tosh	equ	0xFFE
 14614                           tosl	equ	0xFFD
 14615                           pclath	equ	0xFFA
 14616                           tblptru	equ	0xFF8
 14617                           tblptrh	equ	0xFF7
 14618                           tblptrl	equ	0xFF6
 14619                           tablat	equ	0xFF5
 14620                           prodh	equ	0xFF4
 14621                           prodl	equ	0xFF3
 14622                           intcon	equ	0xFF2
 14623                           intcon2	equ	0xFF1
 14624                           indf0	equ	0xFEF
 14625                           postinc0	equ	0xFEE
 14626                           fsr0h	equ	0xFEA
 14627                           fsr0l	equ	0xFE9
 14628                           wreg	equ	0xFE8
 14629                           indf1	equ	0xFE7
 14630                           postdec1	equ	0xFE5
 14631                           fsr1h	equ	0xFE2
 14632                           fsr1l	equ	0xFE1
 14633                           indf2	equ	0xFDF
 14634                           postinc2	equ	0xFDE
 14635                           postdec2	equ	0xFDD
 14636                           fsr2h	equ	0xFDA
 14637                           fsr2l	equ	0xFD9
 14638                           status	equ	0xFD8
 14639                           
 14640 ;; *************** function _InitSystemApplicationManagers *****************
 14641 ;; Defined at:
 14642 ;;		line 33 in file "SystemSettings.c"
 14643 ;; Parameters:    Size  Location     Type
 14644 ;;		None
 14645 ;; Auto vars:     Size  Location     Type
 14646 ;;		None
 14647 ;; Return value:  Size  Location     Type
 14648 ;;                  1    wreg      void 
 14649 ;; Registers used:
 14650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14651 ;; Tracked objects:
 14652 ;;		On entry : 0/0
 14653 ;;		On exit  : 0/0
 14654 ;;		Unchanged: 0/0
 14655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14656 ;;      Params:         0       0       0       0       0       0       0
 14657 ;;      Locals:         0       0       0       0       0       0       0
 14658 ;;      Temps:          0       0       0       0       0       0       0
 14659 ;;      Totals:         0       0       0       0       0       0       0
 14660 ;;Total ram usage:        0 bytes
 14661 ;; Hardware stack levels used:    1
 14662 ;; Hardware stack levels required when called:   10
 14663 ;; This function calls:
 14664 ;;		_ClearMcuRunTime
 14665 ;;		_DacInit
 14666 ;;		_InitAdcApplicationMgr
 14667 ;;		_PLLInitialize
 14668 ;;		_TMR0_StartTimer
 14669 ;; This function is called by:
 14670 ;;		_main
 14671 ;; This function uses a non-reentrant model
 14672 ;;
 14673                           
 14674                           	psect	text54
 14675  0047AE                     __ptext54:
 14676                           	opt stack 0
 14677  0047AE                     _InitSystemApplicationManagers:
 14678                           	opt stack 20
 14679                           
 14680                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 14681                           
 14682                           ; BSR set to: 1
 14683                           ;incstack = 0
 14684  0047AE  EC23  F024         	call	_InitAdcApplicationMgr	;wreg free
 14685                           
 14686                           ;SystemSettings.c: 39: TMR0_StartTimer();
 14687  0047B2  EC28  F024         	call	_TMR0_StartTimer	;wreg free
 14688                           
 14689                           ;SystemSettings.c: 42: PLLInitialize();
 14690  0047B6  EC13  F00E         	call	_PLLInitialize	;wreg free
 14691                           
 14692                           ;SystemSettings.c: 45: ClearMcuRunTime();
 14693  0047BA  ECF6  F023         	call	_ClearMcuRunTime	;wreg free
 14694                           
 14695                           ;SystemSettings.c: 48: DacInit();
 14696  0047BE  EC94  F017         	call	_DacInit	;wreg free
 14697  0047C2  0012               	return		;funcret
 14698  0047C4                     __end_of_InitSystemApplicationManagers:
 14699                           	opt stack 0
 14700                           tosu	equ	0xFFF
 14701                           tosh	equ	0xFFE
 14702                           tosl	equ	0xFFD
 14703                           pclath	equ	0xFFA
 14704                           tblptru	equ	0xFF8
 14705                           tblptrh	equ	0xFF7
 14706                           tblptrl	equ	0xFF6
 14707                           tablat	equ	0xFF5
 14708                           prodh	equ	0xFF4
 14709                           prodl	equ	0xFF3
 14710                           intcon	equ	0xFF2
 14711                           intcon2	equ	0xFF1
 14712                           indf0	equ	0xFEF
 14713                           postinc0	equ	0xFEE
 14714                           fsr0h	equ	0xFEA
 14715                           fsr0l	equ	0xFE9
 14716                           wreg	equ	0xFE8
 14717                           indf1	equ	0xFE7
 14718                           postdec1	equ	0xFE5
 14719                           fsr1h	equ	0xFE2
 14720                           fsr1l	equ	0xFE1
 14721                           indf2	equ	0xFDF
 14722                           postinc2	equ	0xFDE
 14723                           postdec2	equ	0xFDD
 14724                           fsr2h	equ	0xFDA
 14725                           fsr2l	equ	0xFD9
 14726                           status	equ	0xFD8
 14727                           
 14728 ;; *************** function _TMR0_StartTimer *****************
 14729 ;; Defined at:
 14730 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 14731 ;; Parameters:    Size  Location     Type
 14732 ;;		None
 14733 ;; Auto vars:     Size  Location     Type
 14734 ;;		None
 14735 ;; Return value:  Size  Location     Type
 14736 ;;                  1    wreg      void 
 14737 ;; Registers used:
 14738 ;;		None
 14739 ;; Tracked objects:
 14740 ;;		On entry : 0/0
 14741 ;;		On exit  : 0/0
 14742 ;;		Unchanged: 0/0
 14743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14744 ;;      Params:         0       0       0       0       0       0       0
 14745 ;;      Locals:         0       0       0       0       0       0       0
 14746 ;;      Temps:          0       0       0       0       0       0       0
 14747 ;;      Totals:         0       0       0       0       0       0       0
 14748 ;;Total ram usage:        0 bytes
 14749 ;; Hardware stack levels used:    1
 14750 ;; Hardware stack levels required when called:    3
 14751 ;; This function calls:
 14752 ;;		Nothing
 14753 ;; This function is called by:
 14754 ;;		_InitSystemApplicationManagers
 14755 ;; This function uses a non-reentrant model
 14756 ;;
 14757                           
 14758                           	psect	text55
 14759  004850                     __ptext55:
 14760                           	opt stack 0
 14761  004850                     _TMR0_StartTimer:
 14762                           	opt stack 26
 14763                           
 14764                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 14765                           
 14766                           ;incstack = 0
 14767  004850  8ED5               	bsf	4053,7,c	;volatile
 14768  004852  0012               	return		;funcret
 14769  004854                     __end_of_TMR0_StartTimer:
 14770                           	opt stack 0
 14771                           tosu	equ	0xFFF
 14772                           tosh	equ	0xFFE
 14773                           tosl	equ	0xFFD
 14774                           pclath	equ	0xFFA
 14775                           tblptru	equ	0xFF8
 14776                           tblptrh	equ	0xFF7
 14777                           tblptrl	equ	0xFF6
 14778                           tablat	equ	0xFF5
 14779                           prodh	equ	0xFF4
 14780                           prodl	equ	0xFF3
 14781                           intcon	equ	0xFF2
 14782                           intcon2	equ	0xFF1
 14783                           indf0	equ	0xFEF
 14784                           postinc0	equ	0xFEE
 14785                           fsr0h	equ	0xFEA
 14786                           fsr0l	equ	0xFE9
 14787                           wreg	equ	0xFE8
 14788                           indf1	equ	0xFE7
 14789                           postdec1	equ	0xFE5
 14790                           fsr1h	equ	0xFE2
 14791                           fsr1l	equ	0xFE1
 14792                           indf2	equ	0xFDF
 14793                           postinc2	equ	0xFDE
 14794                           postdec2	equ	0xFDD
 14795                           fsr2h	equ	0xFDA
 14796                           fsr2l	equ	0xFD9
 14797                           status	equ	0xFD8
 14798                           
 14799 ;; *************** function _PLLInitialize *****************
 14800 ;; Defined at:
 14801 ;;		line 19 in file "SyntApp.c"
 14802 ;; Parameters:    Size  Location     Type
 14803 ;;		None
 14804 ;; Auto vars:     Size  Location     Type
 14805 ;;  idx             2   42[BANK0 ] int 
 14806 ;;  idx             2   40[BANK0 ] int 
 14807 ;; Return value:  Size  Location     Type
 14808 ;;                  1    wreg      void 
 14809 ;; Registers used:
 14810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14811 ;; Tracked objects:
 14812 ;;		On entry : 0/0
 14813 ;;		On exit  : 0/0
 14814 ;;		Unchanged: 0/0
 14815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14816 ;;      Params:         0       0       0       0       0       0       0
 14817 ;;      Locals:         0       4       0       0       0       0       0
 14818 ;;      Temps:          0       2       0       0       0       0       0
 14819 ;;      Totals:         0       6       0       0       0       0       0
 14820 ;;Total ram usage:        6 bytes
 14821 ;; Hardware stack levels used:    1
 14822 ;; Hardware stack levels required when called:    7
 14823 ;; This function calls:
 14824 ;;		_SWSPI_send_word
 14825 ;;		_SwSpi_Set_CE_Pin
 14826 ;; This function is called by:
 14827 ;;		_InitSystemApplicationManagers
 14828 ;; This function uses a non-reentrant model
 14829 ;;
 14830                           
 14831                           	psect	text56
 14832  001C26                     __ptext56:
 14833                           	opt stack 0
 14834  001C26                     _PLLInitialize:
 14835                           	opt stack 22
 14836                           
 14837                           ;SyntApp.c: 22: IOCB = 0b10000000;
 14838                           
 14839                           ;incstack = 0
 14840  001C26  0E80               	movlw	128
 14841  001C28  6E62               	movwf	3938,c	;volatile
 14842                           
 14843                           ;SyntApp.c: 25: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
 14844  001C2A  0E01               	movlw	1
 14845  001C2C  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 14846  001C2E  0E00               	movlw	0
 14847  001C30  ECF3  F021         	call	_SwSpi_Set_CE_Pin
 14848                           
 14849                           ;SyntApp.c: 29: for(int idx = 0; idx < 13; idx++)
 14850  001C34  0E00               	movlw	0
 14851  001C36  0100               	movlb	0	; () banked
 14852  001C38  6F89               	movwf	(PLLInitialize@idx+1)& (0+255),b
 14853  001C3A  0E00               	movlw	0
 14854  001C3C  6F88               	movwf	PLLInitialize@idx& (0+255),b
 14855  001C3E                     l9432:
 14856                           
 14857                           ; BSR set to: 0
 14858  001C3E  BF89               	btfsc	(PLLInitialize@idx+1)& (0+255),7,b
 14859  001C40  D006               	goto	l471
 14860  001C42  5189               	movf	(PLLInitialize@idx+1)& (0+255),w,b
 14861  001C44  E129               	bnz	l9442
 14862  001C46  0E0D               	movlw	13
 14863  001C48  5D88               	subwf	PLLInitialize@idx& (0+255),w,b
 14864  001C4A  B0D8               	btfsc	status,0,c
 14865  001C4C  D025               	goto	u9570
 14866  001C4E                     l471:
 14867                           
 14868                           ; BSR set to: 0
 14869                           ;SyntApp.c: 30: {
 14870                           ;SyntApp.c: 31: SWSPI_send_word(SYNTH_TX, TEST_PLL_REGISTERS[idx], 3);
 14871                           
 14872                           ; BSR set to: 0
 14873  001C4E  C088  F086         	movff	PLLInitialize@idx,??_PLLInitialize
 14874  001C52  C089  F087         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
 14875  001C56  90D8               	bcf	status,0,c
 14876  001C58  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 14877  001C5A  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 14878  001C5C  90D8               	bcf	status,0,c
 14879  001C5E  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 14880  001C60  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 14881  001C62  0E49               	movlw	low _TEST_PLL_REGISTERS
 14882  001C64  2586               	addwf	??_PLLInitialize& (0+255),w,b
 14883  001C66  6EF6               	movwf	tblptrl,c
 14884  001C68  0E77               	movlw	high _TEST_PLL_REGISTERS
 14885  001C6A  2187               	addwfc	(??_PLLInitialize+1)& (0+255),w,b
 14886  001C6C  6EF7               	movwf	tblptrh,c
 14887  001C6E                     	if	0	;There are less than 3 active tblptr bytes
 14888  001C6E                     	endif
 14889  001C6E  0009               	tblrd		*+
 14890  001C70  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14891  001C74  0009               	tblrd		*+
 14892  001C76  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14893  001C7A  0009               	tblrd		*+
 14894  001C7C  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14895  001C80  000A               	tblrd		*-
 14896  001C82  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14897  001C86  0E03               	movlw	3
 14898  001C88  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14899  001C8A  0E00               	movlw	0
 14900  001C8C  EC08  F01B         	call	_SWSPI_send_word
 14901  001C90  0100               	movlb	0	; () banked
 14902  001C92  4B88               	infsnz	PLLInitialize@idx& (0+255),f,b
 14903  001C94  2B89               	incf	(PLLInitialize@idx+1)& (0+255),f,b
 14904  001C96  D7D3               	goto	l9432
 14905  001C98                     u9570:
 14906  001C98                     l9442:
 14907                           
 14908                           ; BSR set to: 0
 14909                           ;SyntApp.c: 32: }
 14910                           ;SyntApp.c: 41: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
 14911  001C98  0E01               	movlw	1
 14912  001C9A  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 14913  001C9C  0E01               	movlw	1
 14914  001C9E  ECF3  F021         	call	_SwSpi_Set_CE_Pin
 14915                           
 14916                           ;SyntApp.c: 44: for(int idx = 0; idx < 13; idx++)
 14917  001CA2  0E00               	movlw	0
 14918  001CA4  0100               	movlb	0	; () banked
 14919  001CA6  6F8B               	movwf	(PLLInitialize@idx_803+1)& (0+255),b
 14920  001CA8  0E00               	movlw	0
 14921  001CAA  6F8A               	movwf	PLLInitialize@idx_803& (0+255),b
 14922  001CAC                     l9446:
 14923                           
 14924                           ; BSR set to: 0
 14925  001CAC  BF8B               	btfsc	(PLLInitialize@idx_803+1)& (0+255),7,b
 14926  001CAE  D006               	goto	l473
 14927  001CB0  518B               	movf	(PLLInitialize@idx_803+1)& (0+255),w,b
 14928  001CB2  E129               	bnz	l9456
 14929  001CB4  0E0D               	movlw	13
 14930  001CB6  5D8A               	subwf	PLLInitialize@idx_803& (0+255),w,b
 14931  001CB8  B0D8               	btfsc	status,0,c
 14932  001CBA  D025               	goto	u9590
 14933  001CBC                     l473:
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;SyntApp.c: 45: {
 14937                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
 14938                           
 14939                           ; BSR set to: 0
 14940  001CBC  C08A  F086         	movff	PLLInitialize@idx_803,??_PLLInitialize
 14941  001CC0  C08B  F087         	movff	PLLInitialize@idx_803+1,??_PLLInitialize+1
 14942  001CC4  90D8               	bcf	status,0,c
 14943  001CC6  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 14944  001CC8  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 14945  001CCA  90D8               	bcf	status,0,c
 14946  001CCC  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 14947  001CCE  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 14948  001CD0  0E7D               	movlw	low _PLL_INIT_REGISTERS
 14949  001CD2  2586               	addwf	??_PLLInitialize& (0+255),w,b
 14950  001CD4  6EF6               	movwf	tblptrl,c
 14951  001CD6  0E77               	movlw	high _PLL_INIT_REGISTERS
 14952  001CD8  2187               	addwfc	(??_PLLInitialize+1)& (0+255),w,b
 14953  001CDA  6EF7               	movwf	tblptrh,c
 14954  001CDC                     	if	0	;There are less than 3 active tblptr bytes
 14955  001CDC                     	endif
 14956  001CDC  0009               	tblrd		*+
 14957  001CDE  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14958  001CE2  0009               	tblrd		*+
 14959  001CE4  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14960  001CE8  0009               	tblrd		*+
 14961  001CEA  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14962  001CEE  000A               	tblrd		*-
 14963  001CF0  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14964  001CF4  0E03               	movlw	3
 14965  001CF6  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14966  001CF8  0E01               	movlw	1
 14967  001CFA  EC08  F01B         	call	_SWSPI_send_word
 14968  001CFE  0100               	movlb	0	; () banked
 14969  001D00  4B8A               	infsnz	PLLInitialize@idx_803& (0+255),f,b
 14970  001D02  2B8B               	incf	(PLLInitialize@idx_803+1)& (0+255),f,b
 14971  001D04  D7D3               	goto	l9446
 14972  001D06                     u9590:
 14973  001D06                     l9456:
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;SyntApp.c: 47: }
 14977                           ;SyntApp.c: 50: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
 14978  001D06  0E8D               	movlw	low (_PLL_INIT_REGISTERS+16)
 14979  001D08  6EF6               	movwf	tblptrl,c
 14980  001D0A  0E77               	movlw	high (_PLL_INIT_REGISTERS+16)
 14981  001D0C  6EF7               	movwf	tblptrh,c
 14982  001D0E                     	if	0	;tblptru may be non-zero
 14983  001D0E                     	endif
 14984  001D0E                     	if	0	;tblptru may be non-zero
 14985  001D0E                     	endif
 14986  001D0E  0009               	tblrd		*+
 14987  001D10  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14988  001D14  0009               	tblrd		*+
 14989  001D16  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14990  001D1A  0009               	tblrd		*+
 14991  001D1C  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14992  001D20  000A               	tblrd		*-
 14993  001D22  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14994  001D26  0E03               	movlw	3
 14995  001D28  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14996  001D2A  0E01               	movlw	1
 14997  001D2C  EC08  F01B         	call	_SWSPI_send_word
 14998                           
 14999                           ;SyntApp.c: 51: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
 15000  001D30  0E85               	movlw	low (_PLL_INIT_REGISTERS+8)
 15001  001D32  6EF6               	movwf	tblptrl,c
 15002  001D34  0E77               	movlw	high (_PLL_INIT_REGISTERS+8)
 15003  001D36  6EF7               	movwf	tblptrh,c
 15004  001D38                     	if	0	;tblptru may be non-zero
 15005  001D38                     	endif
 15006  001D38                     	if	0	;tblptru may be non-zero
 15007  001D38                     	endif
 15008  001D38  0009               	tblrd		*+
 15009  001D3A  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 15010  001D3E  0009               	tblrd		*+
 15011  001D40  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 15012  001D44  0009               	tblrd		*+
 15013  001D46  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 15014  001D4A  000A               	tblrd		*-
 15015  001D4C  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 15016  001D50  0E03               	movlw	3
 15017  001D52  6E2C               	movwf	SWSPI_send_word@dataSize,c
 15018  001D54  0E01               	movlw	1
 15019  001D56  EC08  F01B         	call	_SWSPI_send_word
 15020                           
 15021                           ;SyntApp.c: 52: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
 15022  001D5A  0E81               	movlw	low (_PLL_INIT_REGISTERS+4)
 15023  001D5C  6EF6               	movwf	tblptrl,c
 15024  001D5E  0E77               	movlw	high (_PLL_INIT_REGISTERS+4)
 15025  001D60  6EF7               	movwf	tblptrh,c
 15026  001D62                     	if	0	;tblptru may be non-zero
 15027  001D62                     	endif
 15028  001D62                     	if	0	;tblptru may be non-zero
 15029  001D62                     	endif
 15030  001D62  0009               	tblrd		*+
 15031  001D64  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 15032  001D68  0009               	tblrd		*+
 15033  001D6A  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 15034  001D6E  0009               	tblrd		*+
 15035  001D70  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 15036  001D74  000A               	tblrd		*-
 15037  001D76  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 15038  001D7A  0E03               	movlw	3
 15039  001D7C  6E2C               	movwf	SWSPI_send_word@dataSize,c
 15040  001D7E  0E01               	movlw	1
 15041  001D80  EC08  F01B         	call	_SWSPI_send_word
 15042                           
 15043                           ;SyntApp.c: 53: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
 15044  001D84  0E7D               	movlw	low _PLL_INIT_REGISTERS
 15045  001D86  6EF6               	movwf	tblptrl,c
 15046  001D88                     	if	1	;There is more than 1 active tblptr byte
 15047  001D88  0E77               	movlw	high _PLL_INIT_REGISTERS
 15048  001D8A  6EF7               	movwf	tblptrh,c
 15049  001D8C                     	endif
 15050  001D8C                     	if	0	;There are less than 3 active tblptr bytes
 15051  001D8C                     	endif
 15052  001D8C  0009               	tblrd		*+
 15053  001D8E  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 15054  001D92  0009               	tblrd		*+
 15055  001D94  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 15056  001D98  0009               	tblrd		*+
 15057  001D9A  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 15058  001D9E  000A               	tblrd		*-
 15059  001DA0  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 15060  001DA4  0E03               	movlw	3
 15061  001DA6  6E2C               	movwf	SWSPI_send_word@dataSize,c
 15062  001DA8  0E01               	movlw	1
 15063  001DAA  EC08  F01B         	call	_SWSPI_send_word
 15064  001DAE  0012               	return		;funcret
 15065  001DB0                     __end_of_PLLInitialize:
 15066                           	opt stack 0
 15067                           tosu	equ	0xFFF
 15068                           tosh	equ	0xFFE
 15069                           tosl	equ	0xFFD
 15070                           pclath	equ	0xFFA
 15071                           tblptru	equ	0xFF8
 15072                           tblptrh	equ	0xFF7
 15073                           tblptrl	equ	0xFF6
 15074                           tablat	equ	0xFF5
 15075                           prodh	equ	0xFF4
 15076                           prodl	equ	0xFF3
 15077                           intcon	equ	0xFF2
 15078                           intcon2	equ	0xFF1
 15079                           indf0	equ	0xFEF
 15080                           postinc0	equ	0xFEE
 15081                           fsr0h	equ	0xFEA
 15082                           fsr0l	equ	0xFE9
 15083                           wreg	equ	0xFE8
 15084                           indf1	equ	0xFE7
 15085                           postdec1	equ	0xFE5
 15086                           fsr1h	equ	0xFE2
 15087                           fsr1l	equ	0xFE1
 15088                           indf2	equ	0xFDF
 15089                           postinc2	equ	0xFDE
 15090                           postdec2	equ	0xFDD
 15091                           fsr2h	equ	0xFDA
 15092                           fsr2l	equ	0xFD9
 15093                           status	equ	0xFD8
 15094                           
 15095 ;; *************** function _SwSpi_Set_CE_Pin *****************
 15096 ;; Defined at:
 15097 ;;		line 201 in file "SwSpiApp.c"
 15098 ;; Parameters:    Size  Location     Type
 15099 ;;  phrType         1    wreg     enum E181
 15100 ;;  cPinMode        1   23[COMRAM] unsigned char 
 15101 ;; Auto vars:     Size  Location     Type
 15102 ;;  phrType         1   24[COMRAM] enum E181
 15103 ;; Return value:  Size  Location     Type
 15104 ;;                  1    wreg      void 
 15105 ;; Registers used:
 15106 ;;		wreg, status,2, status,0
 15107 ;; Tracked objects:
 15108 ;;		On entry : 0/0
 15109 ;;		On exit  : 0/0
 15110 ;;		Unchanged: 0/0
 15111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15112 ;;      Params:         1       0       0       0       0       0       0
 15113 ;;      Locals:         1       0       0       0       0       0       0
 15114 ;;      Temps:          0       0       0       0       0       0       0
 15115 ;;      Totals:         2       0       0       0       0       0       0
 15116 ;;Total ram usage:        2 bytes
 15117 ;; Hardware stack levels used:    1
 15118 ;; Hardware stack levels required when called:    3
 15119 ;; This function calls:
 15120 ;;		Nothing
 15121 ;; This function is called by:
 15122 ;;		_PLLInitialize
 15123 ;; This function uses a non-reentrant model
 15124 ;;
 15125                           
 15126                           	psect	text57
 15127  0043E6                     __ptext57:
 15128                           	opt stack 0
 15129  0043E6                     _SwSpi_Set_CE_Pin:
 15130                           	opt stack 25
 15131                           
 15132                           ;incstack = 0
 15133                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 15134  0043E6  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 15135                           
 15136                           ;SwSpiApp.c: 203: switch(phrType)
 15137  0043E8  D014               	goto	l657
 15138  0043EA                     
 15139                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 15140  0043EA  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 15141  0043EC  A4D8               	btfss	status,2,c
 15142  0043EE  D002               	goto	l659
 15143                           
 15144                           ;SwSpiApp.c: 207: {
 15145                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 15146  0043F0  828B               	bsf	3979,1,c	;volatile
 15147                           
 15148                           ;SwSpiApp.c: 209: }
 15149  0043F2  0012               	return	
 15150  0043F4                     l659:
 15151                           
 15152                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 15153  0043F4  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 15154  0043F6  A4D8               	btfss	status,2,c
 15155  0043F8  0012               	return	
 15156                           
 15157                           ;SwSpiApp.c: 211: {
 15158                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 15159  0043FA  928B               	bcf	3979,1,c	;volatile
 15160                           
 15161                           ;SwSpiApp.c: 213: }
 15162                           ;SwSpiApp.c: 214: break;
 15163  0043FC  0012               	return	
 15164  0043FE                     
 15165                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 15166  0043FE  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 15167  004400  A4D8               	btfss	status,2,c
 15168  004402  D002               	goto	l668
 15169                           
 15170                           ;SwSpiApp.c: 218: {
 15171                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 15172  004404  848C               	bsf	3980,2,c	;volatile
 15173                           
 15174                           ;SwSpiApp.c: 220: }
 15175  004406  0012               	return	
 15176  004408                     l668:
 15177                           
 15178                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 15179  004408  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 15180  00440A  A4D8               	btfss	status,2,c
 15181  00440C  0012               	return	
 15182                           
 15183                           ;SwSpiApp.c: 222: {
 15184                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 15185  00440E  948C               	bcf	3980,2,c	;volatile
 15186                           
 15187                           ;SwSpiApp.c: 226: }
 15188                           
 15189                           ;SwSpiApp.c: 224: }
 15190                           ;SwSpiApp.c: 225: break;
 15191  004410  0012               	return	
 15192  004412                     l657:
 15193  004412  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 15194                           
 15195                           ; Switch size 1, requested type "space"
 15196                           ; Number of cases is 2, Range of values is 0 to 1
 15197                           ; switch strategies available:
 15198                           ; Name         Instructions Cycles
 15199                           ; simple_byte            7     4 (average)
 15200                           ;	Chosen strategy is simple_byte
 15201  004414  0A00               	xorlw	0	; case 0
 15202  004416  B4D8               	btfsc	status,2,c
 15203  004418  D7E8               	goto	l658
 15204  00441A  0A01               	xorlw	1	; case 1
 15205  00441C  A4D8               	btfss	status,2,c
 15206  00441E  0012               	return	
 15207  004420  D7EE               	goto	l667
 15208  004422                     __end_of_SwSpi_Set_CE_Pin:
 15209                           	opt stack 0
 15210                           tosu	equ	0xFFF
 15211                           tosh	equ	0xFFE
 15212                           tosl	equ	0xFFD
 15213                           pclath	equ	0xFFA
 15214                           tblptru	equ	0xFF8
 15215                           tblptrh	equ	0xFF7
 15216                           tblptrl	equ	0xFF6
 15217                           tablat	equ	0xFF5
 15218                           prodh	equ	0xFF4
 15219                           prodl	equ	0xFF3
 15220                           intcon	equ	0xFF2
 15221                           intcon2	equ	0xFF1
 15222                           indf0	equ	0xFEF
 15223                           postinc0	equ	0xFEE
 15224                           fsr0h	equ	0xFEA
 15225                           fsr0l	equ	0xFE9
 15226                           wreg	equ	0xFE8
 15227                           indf1	equ	0xFE7
 15228                           postdec1	equ	0xFE5
 15229                           fsr1h	equ	0xFE2
 15230                           fsr1l	equ	0xFE1
 15231                           indf2	equ	0xFDF
 15232                           postinc2	equ	0xFDE
 15233                           postdec2	equ	0xFDD
 15234                           fsr2h	equ	0xFDA
 15235                           fsr2l	equ	0xFD9
 15236                           status	equ	0xFD8
 15237                           
 15238 ;; *************** function _InitAdcApplicationMgr *****************
 15239 ;; Defined at:
 15240 ;;		line 23 in file "AdcApp.c"
 15241 ;; Parameters:    Size  Location     Type
 15242 ;;		None
 15243 ;; Auto vars:     Size  Location     Type
 15244 ;;		None
 15245 ;; Return value:  Size  Location     Type
 15246 ;;                  1    wreg      void 
 15247 ;; Registers used:
 15248 ;;		wreg, status,2
 15249 ;; Tracked objects:
 15250 ;;		On entry : 0/0
 15251 ;;		On exit  : 0/0
 15252 ;;		Unchanged: 0/0
 15253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15254 ;;      Params:         0       0       0       0       0       0       0
 15255 ;;      Locals:         0       0       0       0       0       0       0
 15256 ;;      Temps:          0       0       0       0       0       0       0
 15257 ;;      Totals:         0       0       0       0       0       0       0
 15258 ;;Total ram usage:        0 bytes
 15259 ;; Hardware stack levels used:    1
 15260 ;; Hardware stack levels required when called:    3
 15261 ;; This function calls:
 15262 ;;		Nothing
 15263 ;; This function is called by:
 15264 ;;		_InitSystemApplicationManagers
 15265 ;; This function uses a non-reentrant model
 15266 ;;
 15267                           
 15268                           	psect	text58
 15269  004846                     __ptext58:
 15270                           	opt stack 0
 15271  004846                     _InitAdcApplicationMgr:
 15272                           	opt stack 26
 15273                           
 15274                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 15275                           
 15276                           ;incstack = 0
 15277  004846  0E00               	movlw	0
 15278  004848  6E45               	movwf	_adcSampleMode,c
 15279  00484A  0012               	return		;funcret
 15280  00484C                     __end_of_InitAdcApplicationMgr:
 15281                           	opt stack 0
 15282                           tosu	equ	0xFFF
 15283                           tosh	equ	0xFFE
 15284                           tosl	equ	0xFFD
 15285                           pclath	equ	0xFFA
 15286                           tblptru	equ	0xFF8
 15287                           tblptrh	equ	0xFF7
 15288                           tblptrl	equ	0xFF6
 15289                           tablat	equ	0xFF5
 15290                           prodh	equ	0xFF4
 15291                           prodl	equ	0xFF3
 15292                           intcon	equ	0xFF2
 15293                           intcon2	equ	0xFF1
 15294                           indf0	equ	0xFEF
 15295                           postinc0	equ	0xFEE
 15296                           fsr0h	equ	0xFEA
 15297                           fsr0l	equ	0xFE9
 15298                           wreg	equ	0xFE8
 15299                           indf1	equ	0xFE7
 15300                           postdec1	equ	0xFE5
 15301                           fsr1h	equ	0xFE2
 15302                           fsr1l	equ	0xFE1
 15303                           indf2	equ	0xFDF
 15304                           postinc2	equ	0xFDE
 15305                           postdec2	equ	0xFDD
 15306                           fsr2h	equ	0xFDA
 15307                           fsr2l	equ	0xFD9
 15308                           status	equ	0xFD8
 15309                           
 15310 ;; *************** function _DacInit *****************
 15311 ;; Defined at:
 15312 ;;		line 12 in file "DacApp.c"
 15313 ;; Parameters:    Size  Location     Type
 15314 ;;		None
 15315 ;; Auto vars:     Size  Location     Type
 15316 ;;  dacInput        2  108[BANK0 ] unsigned int 
 15317 ;;  idx             1  110[BANK0 ] char 
 15318 ;; Return value:  Size  Location     Type
 15319 ;;                  1    wreg      void 
 15320 ;; Registers used:
 15321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15322 ;; Tracked objects:
 15323 ;;		On entry : 0/0
 15324 ;;		On exit  : 0/0
 15325 ;;		Unchanged: 0/0
 15326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15327 ;;      Params:         0       0       0       0       0       0       0
 15328 ;;      Locals:         0       3       0       0       0       0       0
 15329 ;;      Temps:          0       2       0       0       0       0       0
 15330 ;;      Totals:         0       5       0       0       0       0       0
 15331 ;;Total ram usage:        5 bytes
 15332 ;; Hardware stack levels used:    1
 15333 ;; Hardware stack levels required when called:    9
 15334 ;; This function calls:
 15335 ;;		_ReadIntFromEeprom
 15336 ;;		_SWSPI_send_word
 15337 ;;		_StoreIntInEeprom
 15338 ;; This function is called by:
 15339 ;;		_InitSystemApplicationManagers
 15340 ;; This function uses a non-reentrant model
 15341 ;;
 15342                           
 15343                           	psect	text59
 15344  002F28                     __ptext59:
 15345                           	opt stack 0
 15346  002F28                     _DacInit:
 15347                           	opt stack 20
 15348                           
 15349                           ;DacApp.c: 14: for(int8_t idx = 0; idx < (4); idx++)
 15350                           
 15351                           ;incstack = 0
 15352  002F28  0E00               	movlw	0
 15353  002F2A  0100               	movlb	0	; () banked
 15354  002F2C  6FCE               	movwf	DacInit@idx& (0+255),b
 15355  002F2E                     l9408:
 15356                           
 15357                           ; BSR set to: 0
 15358  002F2E  51CE               	movf	DacInit@idx& (0+255),w,b
 15359  002F30  0A80               	xorlw	128
 15360  002F32  0F7C               	addlw	-132
 15361  002F34  B0D8               	btfsc	status,0,c
 15362  002F36  0012               	return	
 15363                           
 15364                           ; BSR set to: 0
 15365                           ;DacApp.c: 15: {
 15366                           ;DacApp.c: 16: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 15367                           
 15368                           ; BSR set to: 0
 15369                           
 15370                           ; BSR set to: 0
 15371  002F38  0E00               	movlw	0
 15372  002F3A  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 15373  002F3C  0E02               	movlw	2
 15374  002F3E  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 15375  002F40  51CE               	movf	DacInit@idx& (0+255),w,b
 15376  002F42  0D01               	mullw	1
 15377  002F44  0E2F               	movlw	low _DAC_ADDRES
 15378  002F46  24F3               	addwf	prodl,w,c
 15379  002F48  6EF6               	movwf	tblptrl,c
 15380  002F4A  0E78               	movlw	high _DAC_ADDRES
 15381  002F4C  20F4               	addwfc	prodh,w,c
 15382  002F4E  6EF7               	movwf	tblptrh,c
 15383  002F50                     	if	0	;There are less than 3 active tblptr bytes
 15384  002F50                     	endif
 15385  002F50  0008               	tblrd		*
 15386  002F52  50F5               	movf	tablat,w,c
 15387  002F54  0940               	iorlw	64
 15388  002F56  EC08  F014         	call	_ReadIntFromEeprom
 15389  002F5A  C0B3  F0CC         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 15390  002F5E  C0B4  F0CD         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 15391                           
 15392                           ;DacApp.c: 17: if(dacInput == 0xFFFF)
 15393  002F62  0100               	movlb	0	; () banked
 15394  002F64  29CC               	incf	DacInit@dacInput& (0+255),w,b
 15395  002F66  E144               	bnz	l9420
 15396  002F68  29CD               	incf	(DacInit@dacInput+1)& (0+255),w,b
 15397  002F6A  A4D8               	btfss	status,2,c
 15398  002F6C  D041               	goto	l401
 15399                           
 15400                           ; BSR set to: 0
 15401                           ;DacApp.c: 18: {
 15402                           ;DacApp.c: 19: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 15403  002F6E  51CE               	movf	DacInit@idx& (0+255),w,b
 15404  002F70  0D02               	mullw	2
 15405  002F72  0E27               	movlw	low _DAC_DEFAULT_INIT_VALUES
 15406  002F74  24F3               	addwf	prodl,w,c
 15407  002F76  6EF6               	movwf	tblptrl,c
 15408  002F78  0E78               	movlw	high _DAC_DEFAULT_INIT_VALUES
 15409  002F7A  20F4               	addwfc	prodh,w,c
 15410  002F7C  6EF7               	movwf	tblptrh,c
 15411  002F7E                     	if	0	;There are less than 3 active tblptr bytes
 15412  002F7E                     	endif
 15413  002F7E  0009               	tblrd		*+
 15414  002F80  CFF5 F0CA          	movff	tablat,??_DacInit
 15415  002F84  0009               	tblrd		*+
 15416  002F86  CFF5 F0CB          	movff	tablat,??_DacInit+1
 15417  002F8A  C0CA  F028         	movff	??_DacInit,SWSPI_send_word@data
 15418  002F8E  C0CB  F029         	movff	??_DacInit+1,SWSPI_send_word@data+1
 15419  002F92  6A2A               	clrf	SWSPI_send_word@data+2,c
 15420  002F94  6A2B               	clrf	SWSPI_send_word@data+3,c
 15421  002F96  0E01               	movlw	1
 15422  002F98  6E2C               	movwf	SWSPI_send_word@dataSize,c
 15423  002F9A  0E02               	movlw	2
 15424  002F9C  EC08  F01B         	call	_SWSPI_send_word
 15425                           
 15426                           ;DacApp.c: 20: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 15427  002FA0  0100               	movlb	0	; () banked
 15428  002FA2  51CE               	movf	DacInit@idx& (0+255),w,b
 15429  002FA4  0D02               	mullw	2
 15430  002FA6  0E27               	movlw	low _DAC_DEFAULT_INIT_VALUES
 15431  002FA8  24F3               	addwf	prodl,w,c
 15432  002FAA  6EF6               	movwf	tblptrl,c
 15433  002FAC  0E78               	movlw	high _DAC_DEFAULT_INIT_VALUES
 15434  002FAE  20F4               	addwfc	prodh,w,c
 15435  002FB0  6EF7               	movwf	tblptrh,c
 15436  002FB2                     	if	0	;There are less than 3 active tblptr bytes
 15437  002FB2                     	endif
 15438  002FB2  0009               	tblrd		*+
 15439  002FB4  CFF5 F0CA          	movff	tablat,??_DacInit
 15440  002FB8  0009               	tblrd		*+
 15441  002FBA  CFF5 F0CB          	movff	tablat,??_DacInit+1
 15442  002FBE  C0CA  F021         	movff	??_DacInit,StoreIntInEeprom@data
 15443  002FC2  C0CB  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 15444  002FC6  6A23               	clrf	StoreIntInEeprom@data+2,c
 15445  002FC8  6A24               	clrf	StoreIntInEeprom@data+3,c
 15446  002FCA  51CE               	movf	DacInit@idx& (0+255),w,b
 15447  002FCC  0D01               	mullw	1
 15448  002FCE  0E2F               	movlw	low _DAC_ADDRES
 15449  002FD0  24F3               	addwf	prodl,w,c
 15450  002FD2  6EF6               	movwf	tblptrl,c
 15451  002FD4  0E78               	movlw	high _DAC_ADDRES
 15452  002FD6  20F4               	addwfc	prodh,w,c
 15453  002FD8  6EF7               	movwf	tblptrh,c
 15454  002FDA                     	if	0	;There are less than 3 active tblptr bytes
 15455  002FDA                     	endif
 15456  002FDA  0008               	tblrd		*
 15457  002FDC  50F5               	movf	tablat,w,c
 15458  002FDE  0940               	iorlw	64
 15459  002FE0  6E25               	movwf	StoreIntInEeprom@address,c
 15460  002FE2  0E00               	movlw	0
 15461  002FE4  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 15462  002FE6  0E02               	movlw	2
 15463  002FE8  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 15464  002FEA  EC2F  F022         	call	_StoreIntInEeprom	;wreg free
 15465                           
 15466                           ;DacApp.c: 21: }
 15467  002FEE  D00B               	goto	l402
 15468  002FF0                     l401:
 15469  002FF0                     l9420:
 15470                           
 15471                           ;DacApp.c: 22: else
 15472                           ;DacApp.c: 23: {
 15473                           ;DacApp.c: 24: SWSPI_send_word(EXT_DAC, dacInput, 1);
 15474  002FF0  C0CC  F028         	movff	DacInit@dacInput,SWSPI_send_word@data
 15475  002FF4  C0CD  F029         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 15476  002FF8  6A2A               	clrf	SWSPI_send_word@data+2,c
 15477  002FFA  6A2B               	clrf	SWSPI_send_word@data+3,c
 15478  002FFC  0E01               	movlw	1
 15479  002FFE  6E2C               	movwf	SWSPI_send_word@dataSize,c
 15480  003000  0E02               	movlw	2
 15481  003002  EC08  F01B         	call	_SWSPI_send_word
 15482  003006                     l402:
 15483  003006  0100               	movlb	0	; () banked
 15484  003008  2BCE               	incf	DacInit@idx& (0+255),f,b
 15485  00300A  D791               	goto	l9408
 15486  00300C                     __end_of_DacInit:
 15487                           	opt stack 0
 15488                           tosu	equ	0xFFF
 15489                           tosh	equ	0xFFE
 15490                           tosl	equ	0xFFD
 15491                           pclath	equ	0xFFA
 15492                           tblptru	equ	0xFF8
 15493                           tblptrh	equ	0xFF7
 15494                           tblptrl	equ	0xFF6
 15495                           tablat	equ	0xFF5
 15496                           prodh	equ	0xFF4
 15497                           prodl	equ	0xFF3
 15498                           intcon	equ	0xFF2
 15499                           intcon2	equ	0xFF1
 15500                           indf0	equ	0xFEF
 15501                           postinc0	equ	0xFEE
 15502                           fsr0h	equ	0xFEA
 15503                           fsr0l	equ	0xFE9
 15504                           wreg	equ	0xFE8
 15505                           indf1	equ	0xFE7
 15506                           postdec1	equ	0xFE5
 15507                           fsr1h	equ	0xFE2
 15508                           fsr1l	equ	0xFE1
 15509                           indf2	equ	0xFDF
 15510                           postinc2	equ	0xFDE
 15511                           postdec2	equ	0xFDD
 15512                           fsr2h	equ	0xFDA
 15513                           fsr2l	equ	0xFD9
 15514                           status	equ	0xFD8
 15515                           
 15516 ;; *************** function _StoreIntInEeprom *****************
 15517 ;; Defined at:
 15518 ;;		line 38 in file "SystemCommon.c"
 15519 ;; Parameters:    Size  Location     Type
 15520 ;;  data            4   32[COMRAM] unsigned long 
 15521 ;;  address         1   36[COMRAM] unsigned char 
 15522 ;;  numOfByes       2   37[COMRAM] int 
 15523 ;; Auto vars:     Size  Location     Type
 15524 ;;  val             1   39[COMRAM] unsigned char 
 15525 ;;  idx             1   40[COMRAM] unsigned char 
 15526 ;; Return value:  Size  Location     Type
 15527 ;;                  1    wreg      void 
 15528 ;; Registers used:
 15529 ;;		wreg, status,2, status,0, cstack
 15530 ;; Tracked objects:
 15531 ;;		On entry : 0/0
 15532 ;;		On exit  : 0/0
 15533 ;;		Unchanged: 0/0
 15534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15535 ;;      Params:         7       0       0       0       0       0       0
 15536 ;;      Locals:         2       0       0       0       0       0       0
 15537 ;;      Temps:          0       0       0       0       0       0       0
 15538 ;;      Totals:         9       0       0       0       0       0       0
 15539 ;;Total ram usage:        9 bytes
 15540 ;; Hardware stack levels used:    1
 15541 ;; Hardware stack levels required when called:    5
 15542 ;; This function calls:
 15543 ;;		_EepromWrite
 15544 ;;		_make8
 15545 ;; This function is called by:
 15546 ;;		_DacInit
 15547 ;;		_SaveSystemStatus
 15548 ;;		_DacSetValue
 15549 ;; This function uses a non-reentrant model
 15550 ;;
 15551                           
 15552                           	psect	text60
 15553  00445E                     __ptext60:
 15554                           	opt stack 0
 15555  00445E                     _StoreIntInEeprom:
 15556                           	opt stack 22
 15557                           
 15558                           ;SystemCommon.c: 40: for(uint8_t idx = numOfByes; idx; idx--)
 15559                           
 15560                           ; BSR set to: 0
 15561                           ;incstack = 0
 15562  00445E  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 15563  004462  D015               	goto	l1325
 15564  004464                     
 15565                           ;SystemCommon.c: 41: {
 15566                           ;SystemCommon.c: 42: uint8_t val = make8(data, idx - 1);
 15567  004464  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 15568  004468  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 15569  00446C  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 15570  004470  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 15571  004474  0429               	decf	StoreIntInEeprom@idx,w,c
 15572  004476  6E1C               	movwf	make8@dataLocation,c
 15573  004478  ECAA  F01F         	call	_make8	;wreg free
 15574  00447C  6E28               	movwf	StoreIntInEeprom@val,c
 15575                           
 15576                           ;SystemCommon.c: 43: EepromWrite(address - idx, val);
 15577  00447E  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 15578  004482  5029               	movf	StoreIntInEeprom@idx,w,c
 15579  004484  0800               	sublw	0
 15580  004486  2425               	addwf	StoreIntInEeprom@address,w,c
 15581  004488  EC07  F024         	call	_EepromWrite
 15582  00448C  0629               	decf	StoreIntInEeprom@idx,f,c
 15583  00448E                     l1325:
 15584  00448E  5029               	movf	StoreIntInEeprom@idx,w,c
 15585  004490  B4D8               	btfsc	status,2,c
 15586  004492  0012               	return	
 15587  004494  D7E7               	goto	l1326
 15588  004496                     __end_of_StoreIntInEeprom:
 15589                           	opt stack 0
 15590                           tosu	equ	0xFFF
 15591                           tosh	equ	0xFFE
 15592                           tosl	equ	0xFFD
 15593                           pclath	equ	0xFFA
 15594                           tblptru	equ	0xFF8
 15595                           tblptrh	equ	0xFF7
 15596                           tblptrl	equ	0xFF6
 15597                           tablat	equ	0xFF5
 15598                           prodh	equ	0xFF4
 15599                           prodl	equ	0xFF3
 15600                           intcon	equ	0xFF2
 15601                           intcon2	equ	0xFF1
 15602                           indf0	equ	0xFEF
 15603                           postinc0	equ	0xFEE
 15604                           fsr0h	equ	0xFEA
 15605                           fsr0l	equ	0xFE9
 15606                           wreg	equ	0xFE8
 15607                           indf1	equ	0xFE7
 15608                           postdec1	equ	0xFE5
 15609                           fsr1h	equ	0xFE2
 15610                           fsr1l	equ	0xFE1
 15611                           indf2	equ	0xFDF
 15612                           postinc2	equ	0xFDE
 15613                           postdec2	equ	0xFDD
 15614                           fsr2h	equ	0xFDA
 15615                           fsr2l	equ	0xFD9
 15616                           status	equ	0xFD8
 15617                           
 15618 ;; *************** function _EepromWrite *****************
 15619 ;; Defined at:
 15620 ;;		line 18 in file "FlashApp.c"
 15621 ;; Parameters:    Size  Location     Type
 15622 ;;  address         1    wreg     unsigned char 
 15623 ;;  data            1   26[COMRAM] unsigned char 
 15624 ;; Auto vars:     Size  Location     Type
 15625 ;;  address         1   27[COMRAM] unsigned char 
 15626 ;; Return value:  Size  Location     Type
 15627 ;;                  1    wreg      void 
 15628 ;; Registers used:
 15629 ;;		wreg, status,2, cstack
 15630 ;; Tracked objects:
 15631 ;;		On entry : 0/0
 15632 ;;		On exit  : 0/0
 15633 ;;		Unchanged: 0/0
 15634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15635 ;;      Params:         1       0       0       0       0       0       0
 15636 ;;      Locals:         1       0       0       0       0       0       0
 15637 ;;      Temps:          0       0       0       0       0       0       0
 15638 ;;      Totals:         2       0       0       0       0       0       0
 15639 ;;Total ram usage:        2 bytes
 15640 ;; Hardware stack levels used:    1
 15641 ;; Hardware stack levels required when called:    4
 15642 ;; This function calls:
 15643 ;;		_DATAEE_WriteByte
 15644 ;; This function is called by:
 15645 ;;		_StoreIntInEeprom
 15646 ;; This function uses a non-reentrant model
 15647 ;;
 15648                           
 15649                           	psect	text61
 15650  00480E                     __ptext61:
 15651                           	opt stack 0
 15652  00480E                     _EepromWrite:
 15653                           	opt stack 22
 15654                           
 15655                           ;incstack = 0
 15656                           ;EepromWrite@address stored from wreg
 15657  00480E  6E1C               	movwf	EepromWrite@address,c
 15658                           
 15659                           ;FlashApp.c: 20: DATAEE_WriteByte(address, data);
 15660  004810  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 15661  004814  501C               	movf	EepromWrite@address,w,c
 15662  004816  EC9E  F022         	call	_DATAEE_WriteByte
 15663  00481A  0012               	return		;funcret
 15664  00481C                     __end_of_EepromWrite:
 15665                           	opt stack 0
 15666                           tosu	equ	0xFFF
 15667                           tosh	equ	0xFFE
 15668                           tosl	equ	0xFFD
 15669                           pclath	equ	0xFFA
 15670                           tblptru	equ	0xFF8
 15671                           tblptrh	equ	0xFF7
 15672                           tblptrl	equ	0xFF6
 15673                           tablat	equ	0xFF5
 15674                           prodh	equ	0xFF4
 15675                           prodl	equ	0xFF3
 15676                           intcon	equ	0xFF2
 15677                           intcon2	equ	0xFF1
 15678                           indf0	equ	0xFEF
 15679                           postinc0	equ	0xFEE
 15680                           fsr0h	equ	0xFEA
 15681                           fsr0l	equ	0xFE9
 15682                           wreg	equ	0xFE8
 15683                           indf1	equ	0xFE7
 15684                           postdec1	equ	0xFE5
 15685                           fsr1h	equ	0xFE2
 15686                           fsr1l	equ	0xFE1
 15687                           indf2	equ	0xFDF
 15688                           postinc2	equ	0xFDE
 15689                           postdec2	equ	0xFDD
 15690                           fsr2h	equ	0xFDA
 15691                           fsr2l	equ	0xFD9
 15692                           status	equ	0xFD8
 15693                           
 15694 ;; *************** function _DATAEE_WriteByte *****************
 15695 ;; Defined at:
 15696 ;;		line 167 in file "mcc_generated_files/memory.c"
 15697 ;; Parameters:    Size  Location     Type
 15698 ;;  bAdd            1    wreg     unsigned char 
 15699 ;;  bData           1   23[COMRAM] unsigned char 
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;  bAdd            1   24[COMRAM] unsigned char 
 15702 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 15703 ;; Return value:  Size  Location     Type
 15704 ;;                  1    wreg      void 
 15705 ;; Registers used:
 15706 ;;		wreg, status,2
 15707 ;; Tracked objects:
 15708 ;;		On entry : 0/0
 15709 ;;		On exit  : 0/0
 15710 ;;		Unchanged: 0/0
 15711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15712 ;;      Params:         1       0       0       0       0       0       0
 15713 ;;      Locals:         2       0       0       0       0       0       0
 15714 ;;      Temps:          0       0       0       0       0       0       0
 15715 ;;      Totals:         3       0       0       0       0       0       0
 15716 ;;Total ram usage:        3 bytes
 15717 ;; Hardware stack levels used:    1
 15718 ;; Hardware stack levels required when called:    3
 15719 ;; This function calls:
 15720 ;;		Nothing
 15721 ;; This function is called by:
 15722 ;;		_EepromWrite
 15723 ;; This function uses a non-reentrant model
 15724 ;;
 15725                           
 15726                           	psect	text62
 15727  00453C                     __ptext62:
 15728                           	opt stack 0
 15729  00453C                     _DATAEE_WriteByte:
 15730                           	opt stack 22
 15731                           
 15732                           ;incstack = 0
 15733                           ;DATAEE_WriteByte@bAdd stored from wreg
 15734  00453C  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 15735                           
 15736                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 15737  00453E  0E00               	movlw	0
 15738  004540  BEF2               	btfsc	intcon,7,c	;volatile
 15739  004542  0E01               	movlw	1
 15740  004544  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 15741                           
 15742                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 15743  004546  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 15744                           
 15745                           ;memory.c: 172: EEDATA = bData;
 15746  00454A  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 15747                           
 15748                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 15749  00454E  9EA6               	bcf	4006,7,c	;volsfr
 15750                           
 15751                           ;memory.c: 174: EECON1bits.CFGS = 0;
 15752  004550  9CA6               	bcf	4006,6,c	;volsfr
 15753                           
 15754                           ;memory.c: 175: EECON1bits.WREN = 1;
 15755  004552  84A6               	bsf	4006,2,c	;volsfr
 15756                           
 15757                           ;memory.c: 176: INTCONbits.GIE = 0;
 15758  004554  9EF2               	bcf	intcon,7,c	;volatile
 15759                           
 15760                           ;memory.c: 177: EECON2 = 0x55;
 15761  004556  0E55               	movlw	85
 15762  004558  6EA7               	movwf	4007,c	;volsfr
 15763                           
 15764                           ;memory.c: 178: EECON2 = 0xAA;
 15765  00455A  0EAA               	movlw	170
 15766  00455C  6EA7               	movwf	4007,c	;volsfr
 15767                           
 15768                           ;memory.c: 179: EECON1bits.WR = 1;
 15769  00455E  82A6               	bsf	4006,1,c	;volsfr
 15770  004560                     
 15771                           ;memory.c: 182: {
 15772  004560  B2A6               	btfsc	4006,1,c	;volsfr
 15773  004562  D7FE               	goto	l950
 15774                           
 15775                           ;memory.c: 183: }
 15776                           ;memory.c: 185: EECON1bits.WREN = 0;
 15777  004564  94A6               	bcf	4006,2,c	;volsfr
 15778                           
 15779                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 15780  004566  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 15781  004568  D002               	bra	u4105
 15782  00456A  9EF2               	bcf	intcon,7,c	;volatile
 15783  00456C  D001               	bra	u4106
 15784  00456E                     u4105:
 15785  00456E  8EF2               	bsf	intcon,7,c	;volatile
 15786  004570                     u4106:
 15787  004570  0012               	return		;funcret
 15788  004572                     __end_of_DATAEE_WriteByte:
 15789                           	opt stack 0
 15790                           tosu	equ	0xFFF
 15791                           tosh	equ	0xFFE
 15792                           tosl	equ	0xFFD
 15793                           pclath	equ	0xFFA
 15794                           tblptru	equ	0xFF8
 15795                           tblptrh	equ	0xFF7
 15796                           tblptrl	equ	0xFF6
 15797                           tablat	equ	0xFF5
 15798                           prodh	equ	0xFF4
 15799                           prodl	equ	0xFF3
 15800                           intcon	equ	0xFF2
 15801                           intcon2	equ	0xFF1
 15802                           indf0	equ	0xFEF
 15803                           postinc0	equ	0xFEE
 15804                           fsr0h	equ	0xFEA
 15805                           fsr0l	equ	0xFE9
 15806                           wreg	equ	0xFE8
 15807                           indf1	equ	0xFE7
 15808                           postdec1	equ	0xFE5
 15809                           fsr1h	equ	0xFE2
 15810                           fsr1l	equ	0xFE1
 15811                           indf2	equ	0xFDF
 15812                           postinc2	equ	0xFDE
 15813                           postdec2	equ	0xFDD
 15814                           fsr2h	equ	0xFDA
 15815                           fsr2l	equ	0xFD9
 15816                           status	equ	0xFD8
 15817                           
 15818 ;; *************** function _SWSPI_send_word *****************
 15819 ;; Defined at:
 15820 ;;		line 17 in file "SwSpiApp.c"
 15821 ;; Parameters:    Size  Location     Type
 15822 ;;  phrType         1    wreg     enum E181
 15823 ;;  data            4   39[COMRAM] unsigned long 
 15824 ;;  dataSize        1   43[COMRAM] unsigned char 
 15825 ;; Auto vars:     Size  Location     Type
 15826 ;;  phrType         1   47[COMRAM] enum E181
 15827 ;;  datac           1   44[COMRAM] unsigned char 
 15828 ;;  idx             2   45[COMRAM] int 
 15829 ;; Return value:  Size  Location     Type
 15830 ;;                  1    wreg      void 
 15831 ;; Registers used:
 15832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15833 ;; Tracked objects:
 15834 ;;		On entry : 0/0
 15835 ;;		On exit  : 0/0
 15836 ;;		Unchanged: 0/0
 15837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15838 ;;      Params:         5       0       0       0       0       0       0
 15839 ;;      Locals:         4       0       0       0       0       0       0
 15840 ;;      Temps:          0       0       0       0       0       0       0
 15841 ;;      Totals:         9       0       0       0       0       0       0
 15842 ;;Total ram usage:        9 bytes
 15843 ;; Hardware stack levels used:    1
 15844 ;; Hardware stack levels required when called:    6
 15845 ;; This function calls:
 15846 ;;		_SWSPI_DAC_send_bits
 15847 ;;		_SWSPI_Synth_send_bits
 15848 ;;		_SwSpi_Set_Dac_Sync_Pin
 15849 ;;		_SwSpi_Set_Synth_Le_Pin
 15850 ;;		_make8
 15851 ;; This function is called by:
 15852 ;;		_DacInit
 15853 ;;		_PLLInitialize
 15854 ;;		_DacSetValue
 15855 ;;		_UpdateTxFreq
 15856 ;;		_UpdateRxFreq
 15857 ;; This function uses a non-reentrant model
 15858 ;;
 15859                           
 15860                           	psect	text63
 15861  003610                     __ptext63:
 15862                           	opt stack 0
 15863  003610                     _SWSPI_send_word:
 15864                           	opt stack 22
 15865                           
 15866                           ;incstack = 0
 15867                           ;SWSPI_send_word@phrType stored from wreg
 15868  003610  6E30               	movwf	SWSPI_send_word@phrType,c
 15869                           
 15870                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 15871  003612  9EF2               	bcf	intcon,7,c	;volatile
 15872                           
 15873                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 15874  003614  5030               	movf	SWSPI_send_word@phrType,w,c
 15875  003616  B4D8               	btfsc	status,2,c
 15876  003618  D003               	goto	u9380
 15877  00361A  0430               	decf	SWSPI_send_word@phrType,w,c
 15878  00361C  A4D8               	btfss	status,2,c
 15879  00361E  D016               	goto	l566
 15880  003620                     u9380:
 15881                           
 15882                           ;SwSpiApp.c: 24: {
 15883                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 15884  003620  0E00               	movlw	0
 15885  003622  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 15886  003624  5030               	movf	SWSPI_send_word@phrType,w,c
 15887  003626  EC11  F022         	call	_SwSpi_Set_Synth_Le_Pin
 15888                           
 15889                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 15890  00362A  C028  F024         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 15891  00362E  C029  F025         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 15892  003632  C02A  F026         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 15893  003636  C02B  F027         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 15894  00363A  5030               	movf	SWSPI_send_word@phrType,w,c
 15895  00363C  EC49  F019         	call	_SWSPI_Synth_send_bits
 15896                           
 15897                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 15898  003640  0E01               	movlw	1
 15899  003642  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 15900  003644  5030               	movf	SWSPI_send_word@phrType,w,c
 15901  003646  EC11  F022         	call	_SwSpi_Set_Synth_Le_Pin
 15902                           
 15903                           ;SwSpiApp.c: 28: }
 15904  00364A  D02D               	goto	l570
 15905  00364C                     l566:
 15906                           
 15907                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 15908  00364C  0E02               	movlw	2
 15909  00364E  1830               	xorwf	SWSPI_send_word@phrType,w,c
 15910  003650  A4D8               	btfss	status,2,c
 15911  003652  D029               	goto	l570
 15912                           
 15913                           ;SwSpiApp.c: 30: {
 15914                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 15915  003654  0E00               	movlw	0
 15916  003656  ECA5  F023         	call	_SwSpi_Set_Dac_Sync_Pin
 15917                           
 15918                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 15919  00365A  0E01               	movlw	1
 15920  00365C  242C               	addwf	SWSPI_send_word@dataSize,w,c
 15921  00365E  6E2E               	movwf	SWSPI_send_word@idx,c
 15922  003660  6A2F               	clrf	SWSPI_send_word@idx+1,c
 15923  003662  0E00               	movlw	0
 15924  003664  222F               	addwfc	SWSPI_send_word@idx+1,f,c
 15925  003666                     l9172:
 15926  003666  BE2F               	btfsc	SWSPI_send_word@idx+1,7,c
 15927  003668  D01B               	goto	u9410
 15928  00366A  502F               	movf	SWSPI_send_word@idx+1,w,c
 15929  00366C  E103               	bnz	l9176
 15930  00366E  042E               	decf	SWSPI_send_word@idx,w,c
 15931  003670  A0D8               	btfss	status,0,c
 15932  003672  D016               	goto	u9410
 15933  003674                     l9176:
 15934                           
 15935                           ;SwSpiApp.c: 33: {
 15936                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 15937  003674  C028  F018         	movff	SWSPI_send_word@data,make8@data
 15938  003678  C029  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 15939  00367C  C02A  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 15940  003680  C02B  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 15941  003684  042E               	decf	SWSPI_send_word@idx,w,c
 15942  003686  6E1C               	movwf	make8@dataLocation,c
 15943  003688  ECAA  F01F         	call	_make8	;wreg free
 15944  00368C  6E2D               	movwf	SWSPI_send_word@datac,c
 15945                           
 15946                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 15947  00368E  C02D  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 15948  003692  5030               	movf	SWSPI_send_word@phrType,w,c
 15949  003694  EC32  F020         	call	_SWSPI_DAC_send_bits
 15950  003698  062E               	decf	SWSPI_send_word@idx,f,c
 15951  00369A  A0D8               	btfss	status,0,c
 15952  00369C  062F               	decf	SWSPI_send_word@idx+1,f,c
 15953  00369E  D7E3               	goto	l9172
 15954  0036A0                     u9410:
 15955                           
 15956                           ;SwSpiApp.c: 36: }
 15957                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 15958  0036A0  0E01               	movlw	1
 15959  0036A2  ECA5  F023         	call	_SwSpi_Set_Dac_Sync_Pin
 15960  0036A6                     l570:
 15961                           
 15962                           ;SwSpiApp.c: 38: }
 15963                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 15964  0036A6  8EF2               	bsf	intcon,7,c	;volatile
 15965  0036A8  0012               	return		;funcret
 15966  0036AA                     __end_of_SWSPI_send_word:
 15967                           	opt stack 0
 15968                           tosu	equ	0xFFF
 15969                           tosh	equ	0xFFE
 15970                           tosl	equ	0xFFD
 15971                           pclath	equ	0xFFA
 15972                           tblptru	equ	0xFF8
 15973                           tblptrh	equ	0xFF7
 15974                           tblptrl	equ	0xFF6
 15975                           tablat	equ	0xFF5
 15976                           prodh	equ	0xFF4
 15977                           prodl	equ	0xFF3
 15978                           intcon	equ	0xFF2
 15979                           intcon2	equ	0xFF1
 15980                           indf0	equ	0xFEF
 15981                           postinc0	equ	0xFEE
 15982                           fsr0h	equ	0xFEA
 15983                           fsr0l	equ	0xFE9
 15984                           wreg	equ	0xFE8
 15985                           indf1	equ	0xFE7
 15986                           postdec1	equ	0xFE5
 15987                           fsr1h	equ	0xFE2
 15988                           fsr1l	equ	0xFE1
 15989                           indf2	equ	0xFDF
 15990                           postinc2	equ	0xFDE
 15991                           postdec2	equ	0xFDD
 15992                           fsr2h	equ	0xFDA
 15993                           fsr2l	equ	0xFD9
 15994                           status	equ	0xFD8
 15995                           
 15996 ;; *************** function _make8 *****************
 15997 ;; Defined at:
 15998 ;;		line 81 in file "SystemCommon.c"
 15999 ;; Parameters:    Size  Location     Type
 16000 ;;  data            4   23[COMRAM] unsigned long 
 16001 ;;  dataLocation    1   27[COMRAM] unsigned char 
 16002 ;; Auto vars:     Size  Location     Type
 16003 ;;		None
 16004 ;; Return value:  Size  Location     Type
 16005 ;;                  1    wreg      unsigned char 
 16006 ;; Registers used:
 16007 ;;		wreg, status,2, status,0
 16008 ;; Tracked objects:
 16009 ;;		On entry : 0/0
 16010 ;;		On exit  : 0/0
 16011 ;;		Unchanged: 0/0
 16012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16013 ;;      Params:         5       0       0       0       0       0       0
 16014 ;;      Locals:         0       0       0       0       0       0       0
 16015 ;;      Temps:          4       0       0       0       0       0       0
 16016 ;;      Totals:         9       0       0       0       0       0       0
 16017 ;;Total ram usage:        9 bytes
 16018 ;; Hardware stack levels used:    1
 16019 ;; Hardware stack levels required when called:    3
 16020 ;; This function calls:
 16021 ;;		Nothing
 16022 ;; This function is called by:
 16023 ;;		_SWSPI_send_word
 16024 ;;		_StoreIntInEeprom
 16025 ;; This function uses a non-reentrant model
 16026 ;;
 16027                           
 16028                           	psect	text64
 16029  003F54                     __ptext64:
 16030                           	opt stack 0
 16031  003F54                     _make8:
 16032                           	opt stack 23
 16033                           
 16034                           ;SystemCommon.c: 83: switch(dataLocation)
 16035                           
 16036                           ;incstack = 0
 16037  003F54  D01F               	goto	l1344
 16038  003F56                     
 16039                           ;SystemCommon.c: 86: return (data & 0x000000ff);
 16040  003F56  5018               	movf	make8@data,w,c
 16041  003F58  0012               	return	
 16042  003F5A                     
 16043                           ;SystemCommon.c: 89: return (data & 0x0000ff00) >> 8;
 16044  003F5A  5019               	movf	make8@data+1,w,c
 16045  003F5C  0012               	return	
 16046  003F5E                     
 16047                           ;SystemCommon.c: 92: return (data & 0x00ff0000) >> 16;
 16048  003F5E  501A               	movf	make8@data+2,w,c
 16049  003F60  0012               	return	
 16050  003F62                     
 16051                           ;SystemCommon.c: 95: return (data & 0xff000000) >> 24;
 16052  003F62  0E00               	movlw	0
 16053  003F64  1418               	andwf	make8@data,w,c
 16054  003F66  6E1D               	movwf	??_make8& (0+255),c
 16055  003F68  0E00               	movlw	0
 16056  003F6A  1419               	andwf	make8@data+1,w,c
 16057  003F6C  6E1E               	movwf	(??_make8+1)& (0+255),c
 16058  003F6E  0E00               	movlw	0
 16059  003F70  141A               	andwf	make8@data+2,w,c
 16060  003F72  6E1F               	movwf	(??_make8+2)& (0+255),c
 16061  003F74  0EFF               	movlw	255
 16062  003F76  141B               	andwf	make8@data+3,w,c
 16063  003F78  6E20               	movwf	(??_make8+3)& (0+255),c
 16064  003F7A  0E19               	movlw	25
 16065  003F7C  D005               	goto	u7960
 16066  003F7E                     u7965:
 16067  003F7E  90D8               	bcf	status,0,c
 16068  003F80  3220               	rrcf	??_make8+3,f,c
 16069  003F82  321F               	rrcf	??_make8+2,f,c
 16070  003F84  321E               	rrcf	??_make8+1,f,c
 16071  003F86  321D               	rrcf	??_make8,f,c
 16072  003F88                     u7960:
 16073  003F88  2EE8               	decfsz	wreg,f,c
 16074  003F8A  D7F9               	goto	u7965
 16075  003F8C  501D               	movf	??_make8,w,c
 16076  003F8E  0012               	return	
 16077  003F90                     
 16078                           ;SystemCommon.c: 98: return (0);
 16079  003F90  0E00               	movlw	0
 16080                           
 16081                           ;SystemCommon.c: 99: }
 16082  003F92  0012               	return	
 16083  003F94                     l1344:
 16084  003F94  501C               	movf	make8@dataLocation,w,c
 16085                           
 16086                           ; Switch size 1, requested type "space"
 16087                           ; Number of cases is 4, Range of values is 0 to 3
 16088                           ; switch strategies available:
 16089                           ; Name         Instructions Cycles
 16090                           ; simple_byte           13     7 (average)
 16091                           ;	Chosen strategy is simple_byte
 16092  003F96  0A00               	xorlw	0	; case 0
 16093  003F98  B4D8               	btfsc	status,2,c
 16094  003F9A  D7DD               	goto	l1345
 16095  003F9C  0A01               	xorlw	1	; case 1
 16096  003F9E  B4D8               	btfsc	status,2,c
 16097  003FA0  D7DC               	goto	l1347
 16098  003FA2  0A03               	xorlw	3	; case 2
 16099  003FA4  B4D8               	btfsc	status,2,c
 16100  003FA6  D7DB               	goto	l1348
 16101  003FA8  0A01               	xorlw	1	; case 3
 16102  003FAA  B4D8               	btfsc	status,2,c
 16103  003FAC  D7DA               	goto	l1349
 16104  003FAE  D7F0               	goto	l1350
 16105  003FB0                     __end_of_make8:
 16106                           	opt stack 0
 16107                           tosu	equ	0xFFF
 16108                           tosh	equ	0xFFE
 16109                           tosl	equ	0xFFD
 16110                           pclath	equ	0xFFA
 16111                           tblptru	equ	0xFF8
 16112                           tblptrh	equ	0xFF7
 16113                           tblptrl	equ	0xFF6
 16114                           tablat	equ	0xFF5
 16115                           prodh	equ	0xFF4
 16116                           prodl	equ	0xFF3
 16117                           intcon	equ	0xFF2
 16118                           intcon2	equ	0xFF1
 16119                           indf0	equ	0xFEF
 16120                           postinc0	equ	0xFEE
 16121                           fsr0h	equ	0xFEA
 16122                           fsr0l	equ	0xFE9
 16123                           wreg	equ	0xFE8
 16124                           indf1	equ	0xFE7
 16125                           postdec1	equ	0xFE5
 16126                           fsr1h	equ	0xFE2
 16127                           fsr1l	equ	0xFE1
 16128                           indf2	equ	0xFDF
 16129                           postinc2	equ	0xFDE
 16130                           postdec2	equ	0xFDD
 16131                           fsr2h	equ	0xFDA
 16132                           fsr2l	equ	0xFD9
 16133                           status	equ	0xFD8
 16134                           
 16135 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 16136 ;; Defined at:
 16137 ;;		line 232 in file "SwSpiApp.c"
 16138 ;; Parameters:    Size  Location     Type
 16139 ;;  phrType         1    wreg     enum E181
 16140 ;;  cPinMode        1   23[COMRAM] unsigned char 
 16141 ;; Auto vars:     Size  Location     Type
 16142 ;;  phrType         1   24[COMRAM] enum E181
 16143 ;; Return value:  Size  Location     Type
 16144 ;;                  1    wreg      void 
 16145 ;; Registers used:
 16146 ;;		wreg, status,2, status,0
 16147 ;; Tracked objects:
 16148 ;;		On entry : 0/0
 16149 ;;		On exit  : 0/0
 16150 ;;		Unchanged: 0/0
 16151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16152 ;;      Params:         1       0       0       0       0       0       0
 16153 ;;      Locals:         1       0       0       0       0       0       0
 16154 ;;      Temps:          0       0       0       0       0       0       0
 16155 ;;      Totals:         2       0       0       0       0       0       0
 16156 ;;Total ram usage:        2 bytes
 16157 ;; Hardware stack levels used:    1
 16158 ;; Hardware stack levels required when called:    3
 16159 ;; This function calls:
 16160 ;;		Nothing
 16161 ;; This function is called by:
 16162 ;;		_SWSPI_send_word
 16163 ;; This function uses a non-reentrant model
 16164 ;;
 16165                           
 16166                           	psect	text65
 16167  004422                     __ptext65:
 16168                           	opt stack 0
 16169  004422                     _SwSpi_Set_Synth_Le_Pin:
 16170                           	opt stack 24
 16171                           
 16172                           ;incstack = 0
 16173                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 16174  004422  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 16175                           
 16176                           ;SwSpiApp.c: 234: switch(phrType)
 16177  004424  D014               	goto	l678
 16178  004426                     
 16179                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 16180  004426  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 16181  004428  A4D8               	btfss	status,2,c
 16182  00442A  D002               	goto	l680
 16183                           
 16184                           ;SwSpiApp.c: 238: {
 16185                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 16186  00442C  848B               	bsf	3979,2,c	;volatile
 16187                           
 16188                           ;SwSpiApp.c: 240: }
 16189  00442E  0012               	return	
 16190  004430                     l680:
 16191                           
 16192                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 16193  004430  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 16194  004432  A4D8               	btfss	status,2,c
 16195  004434  0012               	return	
 16196                           
 16197                           ;SwSpiApp.c: 242: {
 16198                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 16199  004436  948B               	bcf	3979,2,c	;volatile
 16200                           
 16201                           ;SwSpiApp.c: 244: }
 16202                           ;SwSpiApp.c: 245: break;
 16203  004438  0012               	return	
 16204  00443A                     
 16205                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 16206  00443A  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 16207  00443C  A4D8               	btfss	status,2,c
 16208  00443E  D002               	goto	l689
 16209                           
 16210                           ;SwSpiApp.c: 249: {
 16211                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 16212  004440  868C               	bsf	3980,3,c	;volatile
 16213                           
 16214                           ;SwSpiApp.c: 251: }
 16215  004442  0012               	return	
 16216  004444                     l689:
 16217                           
 16218                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 16219  004444  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 16220  004446  A4D8               	btfss	status,2,c
 16221  004448  0012               	return	
 16222                           
 16223                           ;SwSpiApp.c: 253: {
 16224                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 16225  00444A  968C               	bcf	3980,3,c	;volatile
 16226                           
 16227                           ;SwSpiApp.c: 257: }
 16228                           
 16229                           ;SwSpiApp.c: 255: }
 16230                           ;SwSpiApp.c: 256: break;
 16231  00444C  0012               	return	
 16232  00444E                     l678:
 16233  00444E  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 16234                           
 16235                           ; Switch size 1, requested type "space"
 16236                           ; Number of cases is 2, Range of values is 0 to 1
 16237                           ; switch strategies available:
 16238                           ; Name         Instructions Cycles
 16239                           ; simple_byte            7     4 (average)
 16240                           ;	Chosen strategy is simple_byte
 16241  004450  0A00               	xorlw	0	; case 0
 16242  004452  B4D8               	btfsc	status,2,c
 16243  004454  D7E8               	goto	l679
 16244  004456  0A01               	xorlw	1	; case 1
 16245  004458  A4D8               	btfss	status,2,c
 16246  00445A  0012               	return	
 16247  00445C  D7EE               	goto	l688
 16248  00445E                     __end_of_SwSpi_Set_Synth_Le_Pin:
 16249                           	opt stack 0
 16250                           tosu	equ	0xFFF
 16251                           tosh	equ	0xFFE
 16252                           tosl	equ	0xFFD
 16253                           pclath	equ	0xFFA
 16254                           tblptru	equ	0xFF8
 16255                           tblptrh	equ	0xFF7
 16256                           tblptrl	equ	0xFF6
 16257                           tablat	equ	0xFF5
 16258                           prodh	equ	0xFF4
 16259                           prodl	equ	0xFF3
 16260                           intcon	equ	0xFF2
 16261                           intcon2	equ	0xFF1
 16262                           indf0	equ	0xFEF
 16263                           postinc0	equ	0xFEE
 16264                           fsr0h	equ	0xFEA
 16265                           fsr0l	equ	0xFE9
 16266                           wreg	equ	0xFE8
 16267                           indf1	equ	0xFE7
 16268                           postdec1	equ	0xFE5
 16269                           fsr1h	equ	0xFE2
 16270                           fsr1l	equ	0xFE1
 16271                           indf2	equ	0xFDF
 16272                           postinc2	equ	0xFDE
 16273                           postdec2	equ	0xFDD
 16274                           fsr2h	equ	0xFDA
 16275                           fsr2l	equ	0xFD9
 16276                           status	equ	0xFD8
 16277                           
 16278 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 16279 ;; Defined at:
 16280 ;;		line 260 in file "SwSpiApp.c"
 16281 ;; Parameters:    Size  Location     Type
 16282 ;;  cPinMode        1    wreg     unsigned char 
 16283 ;; Auto vars:     Size  Location     Type
 16284 ;;  cPinMode        1   23[COMRAM] unsigned char 
 16285 ;; Return value:  Size  Location     Type
 16286 ;;                  1    wreg      void 
 16287 ;; Registers used:
 16288 ;;		wreg, status,2, status,0
 16289 ;; Tracked objects:
 16290 ;;		On entry : 0/0
 16291 ;;		On exit  : 0/0
 16292 ;;		Unchanged: 0/0
 16293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16294 ;;      Params:         0       0       0       0       0       0       0
 16295 ;;      Locals:         1       0       0       0       0       0       0
 16296 ;;      Temps:          0       0       0       0       0       0       0
 16297 ;;      Totals:         1       0       0       0       0       0       0
 16298 ;;Total ram usage:        1 bytes
 16299 ;; Hardware stack levels used:    1
 16300 ;; Hardware stack levels required when called:    3
 16301 ;; This function calls:
 16302 ;;		Nothing
 16303 ;; This function is called by:
 16304 ;;		_SWSPI_send_word
 16305 ;; This function uses a non-reentrant model
 16306 ;;
 16307                           
 16308                           	psect	text66
 16309  00474A                     __ptext66:
 16310                           	opt stack 0
 16311  00474A                     _SwSpi_Set_Dac_Sync_Pin:
 16312                           	opt stack 24
 16313                           
 16314                           ;incstack = 0
 16315                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 16316  00474A  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 16317                           
 16318                           ;SwSpiApp.c: 262: switch(cPinMode)
 16319  00474C  D004               	goto	l699
 16320  00474E                     
 16321                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 16322  00474E  9489               	bcf	3977,2,c	;volatile
 16323                           
 16324                           ;SwSpiApp.c: 266: break;
 16325  004750  0012               	return	
 16326  004752                     
 16327                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 16328  004752  8489               	bsf	3977,2,c	;volatile
 16329                           
 16330                           ;SwSpiApp.c: 271: }
 16331                           
 16332                           ;SwSpiApp.c: 270: break;
 16333  004754  0012               	return	
 16334  004756                     l699:
 16335  004756  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 16336                           
 16337                           ; Switch size 1, requested type "space"
 16338                           ; Number of cases is 2, Range of values is 0 to 1
 16339                           ; switch strategies available:
 16340                           ; Name         Instructions Cycles
 16341                           ; simple_byte            7     4 (average)
 16342                           ;	Chosen strategy is simple_byte
 16343  004758  0A00               	xorlw	0	; case 0
 16344  00475A  B4D8               	btfsc	status,2,c
 16345  00475C  D7F8               	goto	l700
 16346  00475E  0A01               	xorlw	1	; case 1
 16347  004760  A4D8               	btfss	status,2,c
 16348  004762  0012               	return	
 16349  004764  D7F6               	goto	l704
 16350  004766                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 16351                           	opt stack 0
 16352                           tosu	equ	0xFFF
 16353                           tosh	equ	0xFFE
 16354                           tosl	equ	0xFFD
 16355                           pclath	equ	0xFFA
 16356                           tblptru	equ	0xFF8
 16357                           tblptrh	equ	0xFF7
 16358                           tblptrl	equ	0xFF6
 16359                           tablat	equ	0xFF5
 16360                           prodh	equ	0xFF4
 16361                           prodl	equ	0xFF3
 16362                           intcon	equ	0xFF2
 16363                           intcon2	equ	0xFF1
 16364                           indf0	equ	0xFEF
 16365                           postinc0	equ	0xFEE
 16366                           fsr0h	equ	0xFEA
 16367                           fsr0l	equ	0xFE9
 16368                           wreg	equ	0xFE8
 16369                           indf1	equ	0xFE7
 16370                           postdec1	equ	0xFE5
 16371                           fsr1h	equ	0xFE2
 16372                           fsr1l	equ	0xFE1
 16373                           indf2	equ	0xFDF
 16374                           postinc2	equ	0xFDE
 16375                           postdec2	equ	0xFDD
 16376                           fsr2h	equ	0xFDA
 16377                           fsr2l	equ	0xFD9
 16378                           status	equ	0xFD8
 16379                           
 16380 ;; *************** function _SWSPI_Synth_send_bits *****************
 16381 ;; Defined at:
 16382 ;;		line 67 in file "SwSpiApp.c"
 16383 ;; Parameters:    Size  Location     Type
 16384 ;;  phrType         1    wreg     enum E181
 16385 ;;  data            4   35[COMRAM] unsigned long 
 16386 ;; Auto vars:     Size  Location     Type
 16387 ;;  phrType         1   37[BANK0 ] enum E181
 16388 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 16389 ;;  mask            4   32[BANK0 ] unsigned long 
 16390 ;;  count           1   36[BANK0 ] unsigned char 
 16391 ;; Return value:  Size  Location     Type
 16392 ;;                  1    wreg      void 
 16393 ;; Registers used:
 16394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16395 ;; Tracked objects:
 16396 ;;		On entry : 0/0
 16397 ;;		On exit  : 0/0
 16398 ;;		Unchanged: 0/0
 16399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16400 ;;      Params:         4       0       0       0       0       0       0
 16401 ;;      Locals:         0      38       0       0       0       0       0
 16402 ;;      Temps:          0       0       0       0       0       0       0
 16403 ;;      Totals:         4      38       0       0       0       0       0
 16404 ;;Total ram usage:       42 bytes
 16405 ;; Hardware stack levels used:    1
 16406 ;; Hardware stack levels required when called:    5
 16407 ;; This function calls:
 16408 ;;		_Make32bitsArray
 16409 ;;		_SwSpi_Clk_Pin
 16410 ;;		_SwSpi_Data_Pin
 16411 ;;		_ZeroArray
 16412 ;; This function is called by:
 16413 ;;		_SWSPI_send_word
 16414 ;; This function uses a non-reentrant model
 16415 ;;
 16416                           
 16417                           	psect	text67
 16418  003292                     __ptext67:
 16419                           	opt stack 0
 16420  003292                     _SWSPI_Synth_send_bits:
 16421                           	opt stack 22
 16422                           
 16423                           ;incstack = 0
 16424                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 16425  003292  0100               	movlb	0	; () banked
 16426  003294  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 16427                           
 16428                           ;SwSpiApp.c: 69: uint8_t count;
 16429                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 16430  003296  0E01               	movlw	1
 16431  003298  0100               	movlb	0	; () banked
 16432  00329A  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 16433  00329C  0E00               	movlw	0
 16434  00329E  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 16435  0032A0  0E00               	movlw	0
 16436  0032A2  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 16437  0032A4  0E00               	movlw	0
 16438  0032A6  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 16439                           
 16440                           ; BSR set to: 0
 16441                           ;SwSpiApp.c: 72: bool bitArray[32];
 16442                           ;SwSpiApp.c: 73: ZeroArray(bitArray, sizeof(bitArray));
 16443  0032A8  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 16444  0032AA  6E20               	movwf	ZeroArray@array,c
 16445  0032AC  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 16446  0032AE  6E21               	movwf	ZeroArray@array+1,c
 16447  0032B0  0E00               	movlw	0
 16448  0032B2  6E23               	movwf	ZeroArray@size+1,c
 16449  0032B4  0E20               	movlw	32
 16450  0032B6  6E22               	movwf	ZeroArray@size,c
 16451  0032B8  EC96  F023         	call	_ZeroArray	;wreg free
 16452                           
 16453                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 16454  0032BC  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 16455  0032BE  6E18               	movwf	Make32bitsArray@array,c
 16456  0032C0  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 16457  0032C2  6E19               	movwf	Make32bitsArray@array+1,c
 16458  0032C4  C024  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 16459  0032C8  C025  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 16460  0032CC  C026  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 16461  0032D0  C027  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 16462  0032D4  EC06  F020         	call	_Make32bitsArray	;wreg free
 16463                           
 16464                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 16465  0032D8  0E00               	movlw	0
 16466  0032DA  0100               	movlb	0	; () banked
 16467  0032DC  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 16468  0032DE                     l9020:
 16469                           
 16470                           ; BSR set to: 0
 16471  0032DE  0E1F               	movlw	31
 16472  0032E0  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 16473  0032E2  D001               	goto	l584
 16474  0032E4  D026               	goto	u9180
 16475  0032E6                     l584:
 16476                           
 16477                           ; BSR set to: 0
 16478                           ;SwSpiApp.c: 78: {
 16479                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 16480                           
 16481                           ; BSR set to: 0
 16482  0032E6  0E00               	movlw	0
 16483  0032E8  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16484  0032EA  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16485  0032EC  EC89  F020         	call	_SwSpi_Clk_Pin
 16486                           
 16487                           ;SwSpiApp.c: 82: if (bitArray[count])
 16488  0032F0  0100               	movlb	0	; () banked
 16489  0032F2  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 16490  0032F4  0D01               	mullw	1
 16491  0032F6  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 16492  0032F8  24F3               	addwf	prodl,w,c
 16493  0032FA  6ED9               	movwf	fsr2l,c
 16494  0032FC  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 16495  0032FE  20F4               	addwfc	prodh,w,c
 16496  003300  6EDA               	movwf	fsr2h,c
 16497  003302  50DF               	movf	indf2,w,c
 16498  003304  B4D8               	btfsc	status,2,c
 16499  003306  D006               	goto	l586
 16500                           
 16501                           ; BSR set to: 0
 16502                           ;SwSpiApp.c: 83: {
 16503                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 16504  003308  0E01               	movlw	1
 16505  00330A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16506  00330C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16507  00330E  EC5E  F020         	call	_SwSpi_Data_Pin
 16508                           
 16509                           ;SwSpiApp.c: 85: }
 16510  003312  D006               	goto	l587
 16511  003314                     l586:
 16512                           
 16513                           ;SwSpiApp.c: 86: else
 16514                           ;SwSpiApp.c: 87: {
 16515                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 16516  003314  0E00               	movlw	0
 16517  003316  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16518  003318  0100               	movlb	0	; () banked
 16519  00331A  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16520  00331C  EC5E  F020         	call	_SwSpi_Data_Pin
 16521  003320                     l587:
 16522                           
 16523                           ;SwSpiApp.c: 89: }
 16524                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 16525  003320  0E01               	movlw	1
 16526  003322  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16527  003324  0100               	movlb	0	; () banked
 16528  003326  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16529  003328  EC89  F020         	call	_SwSpi_Clk_Pin
 16530  00332C  0100               	movlb	0	; () banked
 16531  00332E  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 16532  003330  D7D6               	goto	l9020
 16533  003332                     u9180:
 16534                           
 16535                           ; BSR set to: 0
 16536                           ;SwSpiApp.c: 92: }
 16537                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 16538                           
 16539                           ; BSR set to: 0
 16540  003332  0E21               	movlw	33
 16541  003334                     u10097:
 16542  003334  2EE8               	decfsz	wreg,f,c
 16543  003336  D7FE               	bra	u10097
 16544  003338  F000               	nop	
 16545                           
 16546                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 16547  00333A  0E00               	movlw	0
 16548  00333C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16549  00333E  0100               	movlb	0	; () banked
 16550  003340  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16551  003342  EC5E  F020         	call	_SwSpi_Data_Pin
 16552                           
 16553                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 16554  003346  0E00               	movlw	0
 16555  003348  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16556  00334A  0100               	movlb	0	; () banked
 16557  00334C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16558  00334E  EC89  F020         	call	_SwSpi_Clk_Pin
 16559  003352  0012               	return		;funcret
 16560  003354                     __end_of_SWSPI_Synth_send_bits:
 16561                           	opt stack 0
 16562                           tosu	equ	0xFFF
 16563                           tosh	equ	0xFFE
 16564                           tosl	equ	0xFFD
 16565                           pclath	equ	0xFFA
 16566                           tblptru	equ	0xFF8
 16567                           tblptrh	equ	0xFF7
 16568                           tblptrl	equ	0xFF6
 16569                           tablat	equ	0xFF5
 16570                           prodh	equ	0xFF4
 16571                           prodl	equ	0xFF3
 16572                           intcon	equ	0xFF2
 16573                           intcon2	equ	0xFF1
 16574                           indf0	equ	0xFEF
 16575                           postinc0	equ	0xFEE
 16576                           fsr0h	equ	0xFEA
 16577                           fsr0l	equ	0xFE9
 16578                           wreg	equ	0xFE8
 16579                           indf1	equ	0xFE7
 16580                           postdec1	equ	0xFE5
 16581                           fsr1h	equ	0xFE2
 16582                           fsr1l	equ	0xFE1
 16583                           indf2	equ	0xFDF
 16584                           postinc2	equ	0xFDE
 16585                           postdec2	equ	0xFDD
 16586                           fsr2h	equ	0xFDA
 16587                           fsr2l	equ	0xFD9
 16588                           status	equ	0xFD8
 16589                           
 16590 ;; *************** function _ZeroArray *****************
 16591 ;; Defined at:
 16592 ;;		line 33 in file "SystemCommon.c"
 16593 ;; Parameters:    Size  Location     Type
 16594 ;;  array           2   31[COMRAM] PTR unsigned char 
 16595 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), rxMsgData(20), rxMsgQueue(20), 
 16596 ;;  size            2   33[COMRAM] int 
 16597 ;; Auto vars:     Size  Location     Type
 16598 ;;		None
 16599 ;; Return value:  Size  Location     Type
 16600 ;;                  1    wreg      void 
 16601 ;; Registers used:
 16602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16603 ;; Tracked objects:
 16604 ;;		On entry : 0/0
 16605 ;;		On exit  : 0/0
 16606 ;;		Unchanged: 0/0
 16607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16608 ;;      Params:         4       0       0       0       0       0       0
 16609 ;;      Locals:         0       0       0       0       0       0       0
 16610 ;;      Temps:          0       0       0       0       0       0       0
 16611 ;;      Totals:         4       0       0       0       0       0       0
 16612 ;;Total ram usage:        4 bytes
 16613 ;; Hardware stack levels used:    1
 16614 ;; Hardware stack levels required when called:    4
 16615 ;; This function calls:
 16616 ;;		_memset
 16617 ;; This function is called by:
 16618 ;;		_InitRxMessageParams
 16619 ;;		_SWSPI_Synth_send_bits
 16620 ;;		_GetIntFromUartData
 16621 ;; This function uses a non-reentrant model
 16622 ;;
 16623                           
 16624                           	psect	text68
 16625  00472C                     __ptext68:
 16626                           	opt stack 0
 16627  00472C                     _ZeroArray:
 16628                           	opt stack 24
 16629                           
 16630                           ;SystemCommon.c: 35: memset(array, 0x0, size);
 16631                           
 16632                           ;incstack = 0
 16633  00472C  C020  F018         	movff	ZeroArray@array,memset@p1
 16634  004730  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 16635  004734  0E00               	movlw	0
 16636  004736  6E1B               	movwf	memset@c+1,c
 16637  004738  0E00               	movlw	0
 16638  00473A  6E1A               	movwf	memset@c,c
 16639  00473C  C022  F01C         	movff	ZeroArray@size,memset@n
 16640  004740  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 16641  004744  EC04  F023         	call	_memset	;wreg free
 16642  004748  0012               	return		;funcret
 16643  00474A                     __end_of_ZeroArray:
 16644                           	opt stack 0
 16645                           tosu	equ	0xFFF
 16646                           tosh	equ	0xFFE
 16647                           tosl	equ	0xFFD
 16648                           pclath	equ	0xFFA
 16649                           tblptru	equ	0xFF8
 16650                           tblptrh	equ	0xFF7
 16651                           tblptrl	equ	0xFF6
 16652                           tablat	equ	0xFF5
 16653                           prodh	equ	0xFF4
 16654                           prodl	equ	0xFF3
 16655                           intcon	equ	0xFF2
 16656                           intcon2	equ	0xFF1
 16657                           indf0	equ	0xFEF
 16658                           postinc0	equ	0xFEE
 16659                           fsr0h	equ	0xFEA
 16660                           fsr0l	equ	0xFE9
 16661                           wreg	equ	0xFE8
 16662                           indf1	equ	0xFE7
 16663                           postdec1	equ	0xFE5
 16664                           fsr1h	equ	0xFE2
 16665                           fsr1l	equ	0xFE1
 16666                           indf2	equ	0xFDF
 16667                           postinc2	equ	0xFDE
 16668                           postdec2	equ	0xFDD
 16669                           fsr2h	equ	0xFDA
 16670                           fsr2l	equ	0xFD9
 16671                           status	equ	0xFD8
 16672                           
 16673 ;; *************** function _memset *****************
 16674 ;; Defined at:
 16675 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 16676 ;; Parameters:    Size  Location     Type
 16677 ;;  p1              2   23[COMRAM] PTR void 
 16678 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), rxMsgData(20), rxMsgQueue(20), 
 16679 ;;  c               2   25[COMRAM] int 
 16680 ;;  n               2   27[COMRAM] unsigned int 
 16681 ;; Auto vars:     Size  Location     Type
 16682 ;;  p               2   29[COMRAM] PTR unsigned char 
 16683 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), rxMsgData(20), rxMsgQueue(20), 
 16684 ;; Return value:  Size  Location     Type
 16685 ;;                  2   23[COMRAM] PTR void 
 16686 ;; Registers used:
 16687 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16688 ;; Tracked objects:
 16689 ;;		On entry : 0/0
 16690 ;;		On exit  : 0/0
 16691 ;;		Unchanged: 0/0
 16692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16693 ;;      Params:         6       0       0       0       0       0       0
 16694 ;;      Locals:         2       0       0       0       0       0       0
 16695 ;;      Temps:          0       0       0       0       0       0       0
 16696 ;;      Totals:         8       0       0       0       0       0       0
 16697 ;;Total ram usage:        8 bytes
 16698 ;; Hardware stack levels used:    1
 16699 ;; Hardware stack levels required when called:    3
 16700 ;; This function calls:
 16701 ;;		Nothing
 16702 ;; This function is called by:
 16703 ;;		_ZeroArray
 16704 ;; This function uses a non-reentrant model
 16705 ;;
 16706                           
 16707                           	psect	text69
 16708  004608                     __ptext69:
 16709                           	opt stack 0
 16710  004608                     _memset:
 16711                           	opt stack 24
 16712                           
 16713                           ;incstack = 0
 16714  004608  C018  F01E         	movff	memset@p1,memset@p
 16715  00460C  C019  F01F         	movff	memset@p1+1,memset@p+1
 16716  004610  D008               	goto	l2189
 16717  004612                     l7956:
 16718  004612  C01E  FFD9         	movff	memset@p,fsr2l
 16719  004616  C01F  FFDA         	movff	memset@p+1,fsr2h
 16720  00461A  C01A  FFDF         	movff	memset@c,indf2
 16721  00461E  4A1E               	infsnz	memset@p,f,c
 16722  004620  2A1F               	incf	memset@p+1,f,c
 16723  004622                     l2189:
 16724  004622  061C               	decf	memset@n,f,c
 16725  004624  A0D8               	btfss	status,0,c
 16726  004626  061D               	decf	memset@n+1,f,c
 16727  004628  281C               	incf	memset@n,w,c
 16728  00462A  E1F3               	bnz	l7956
 16729  00462C  281D               	incf	memset@n+1,w,c
 16730  00462E  B4D8               	btfsc	status,2,c
 16731  004630  0012               	return	
 16732  004632  D7EF               	goto	l2190
 16733  004634                     __end_of_memset:
 16734                           	opt stack 0
 16735                           tosu	equ	0xFFF
 16736                           tosh	equ	0xFFE
 16737                           tosl	equ	0xFFD
 16738                           pclath	equ	0xFFA
 16739                           tblptru	equ	0xFF8
 16740                           tblptrh	equ	0xFF7
 16741                           tblptrl	equ	0xFF6
 16742                           tablat	equ	0xFF5
 16743                           prodh	equ	0xFF4
 16744                           prodl	equ	0xFF3
 16745                           intcon	equ	0xFF2
 16746                           intcon2	equ	0xFF1
 16747                           indf0	equ	0xFEF
 16748                           postinc0	equ	0xFEE
 16749                           fsr0h	equ	0xFEA
 16750                           fsr0l	equ	0xFE9
 16751                           wreg	equ	0xFE8
 16752                           indf1	equ	0xFE7
 16753                           postdec1	equ	0xFE5
 16754                           fsr1h	equ	0xFE2
 16755                           fsr1l	equ	0xFE1
 16756                           indf2	equ	0xFDF
 16757                           postinc2	equ	0xFDE
 16758                           postdec2	equ	0xFDD
 16759                           fsr2h	equ	0xFDA
 16760                           fsr2l	equ	0xFD9
 16761                           status	equ	0xFD8
 16762                           
 16763 ;; *************** function _Make32bitsArray *****************
 16764 ;; Defined at:
 16765 ;;		line 24 in file "SystemCommon.c"
 16766 ;; Parameters:    Size  Location     Type
 16767 ;;  array           2   23[COMRAM] PTR unsigned char 
 16768 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 16769 ;;  data            4   25[COMRAM] unsigned long 
 16770 ;; Auto vars:     Size  Location     Type
 16771 ;;  idx             2   31[COMRAM] int 
 16772 ;; Return value:  Size  Location     Type
 16773 ;;                  1    wreg      void 
 16774 ;; Registers used:
 16775 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16776 ;; Tracked objects:
 16777 ;;		On entry : 0/0
 16778 ;;		On exit  : 0/0
 16779 ;;		Unchanged: 0/0
 16780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16781 ;;      Params:         6       0       0       0       0       0       0
 16782 ;;      Locals:         2       0       0       0       0       0       0
 16783 ;;      Temps:          2       0       0       0       0       0       0
 16784 ;;      Totals:        10       0       0       0       0       0       0
 16785 ;;Total ram usage:       10 bytes
 16786 ;; Hardware stack levels used:    1
 16787 ;; Hardware stack levels required when called:    3
 16788 ;; This function calls:
 16789 ;;		Nothing
 16790 ;; This function is called by:
 16791 ;;		_SWSPI_Synth_send_bits
 16792 ;; This function uses a non-reentrant model
 16793 ;;
 16794                           
 16795                           	psect	text70
 16796  00400C                     __ptext70:
 16797                           	opt stack 0
 16798  00400C                     _Make32bitsArray:
 16799                           	opt stack 23
 16800                           
 16801                           ;SystemCommon.c: 26: for(int idx = 0; idx <= 32; idx++)
 16802                           
 16803                           ;incstack = 0
 16804  00400C  0E00               	movlw	0
 16805  00400E  6E21               	movwf	Make32bitsArray@idx+1,c
 16806  004010  0E00               	movlw	0
 16807  004012  6E20               	movwf	Make32bitsArray@idx,c
 16808  004014                     l8312:
 16809  004014  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 16810  004016  D006               	goto	l1317
 16811  004018  5021               	movf	Make32bitsArray@idx+1,w,c
 16812  00401A  E123               	bnz	l1319
 16813  00401C  0E21               	movlw	33
 16814  00401E  5C20               	subwf	Make32bitsArray@idx,w,c
 16815  004020  B0D8               	btfsc	status,0,c
 16816  004022  0012               	return	
 16817  004024                     l1317:
 16818                           
 16819                           ;SystemCommon.c: 27: {
 16820                           ;SystemCommon.c: 28: array[32 - idx - 1] = data % 2;
 16821  004024  0E01               	movlw	1
 16822  004026  2420               	addwf	Make32bitsArray@idx,w,c
 16823  004028  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 16824  00402A  0E00               	movlw	0
 16825  00402C  2021               	addwfc	Make32bitsArray@idx+1,w,c
 16826  00402E  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 16827  004030  1E1E               	comf	??_Make32bitsArray,f,c
 16828  004032  1E1F               	comf	??_Make32bitsArray+1,f,c
 16829  004034  4A1E               	infsnz	??_Make32bitsArray,f,c
 16830  004036  2A1F               	incf	??_Make32bitsArray+1,f,c
 16831  004038  0E20               	movlw	32
 16832  00403A  261E               	addwf	??_Make32bitsArray,f,c
 16833  00403C  0E00               	movlw	0
 16834  00403E  221F               	addwfc	??_Make32bitsArray+1,f,c
 16835  004040  501E               	movf	??_Make32bitsArray,w,c
 16836  004042  2418               	addwf	Make32bitsArray@array,w,c
 16837  004044  6ED9               	movwf	fsr2l,c
 16838  004046  501F               	movf	??_Make32bitsArray+1,w,c
 16839  004048  2019               	addwfc	Make32bitsArray@array+1,w,c
 16840  00404A  6EDA               	movwf	fsr2h,c
 16841  00404C  501A               	movf	Make32bitsArray@data,w,c
 16842  00404E  0B01               	andlw	1
 16843  004050  6EDF               	movwf	indf2,c
 16844                           
 16845                           ;SystemCommon.c: 29: data /= 2;
 16846  004052  90D8               	bcf	status,0,c
 16847  004054  321D               	rrcf	Make32bitsArray@data+3,f,c
 16848  004056  321C               	rrcf	Make32bitsArray@data+2,f,c
 16849  004058  321B               	rrcf	Make32bitsArray@data+1,f,c
 16850  00405A  321A               	rrcf	Make32bitsArray@data,f,c
 16851  00405C  4A20               	infsnz	Make32bitsArray@idx,f,c
 16852  00405E  2A21               	incf	Make32bitsArray@idx+1,f,c
 16853  004060  D7D9               	goto	l8312
 16854  004062                     l1319:
 16855  004062  0012               	return		;funcret
 16856  004064                     __end_of_Make32bitsArray:
 16857                           	opt stack 0
 16858                           tosu	equ	0xFFF
 16859                           tosh	equ	0xFFE
 16860                           tosl	equ	0xFFD
 16861                           pclath	equ	0xFFA
 16862                           tblptru	equ	0xFF8
 16863                           tblptrh	equ	0xFF7
 16864                           tblptrl	equ	0xFF6
 16865                           tablat	equ	0xFF5
 16866                           prodh	equ	0xFF4
 16867                           prodl	equ	0xFF3
 16868                           intcon	equ	0xFF2
 16869                           intcon2	equ	0xFF1
 16870                           indf0	equ	0xFEF
 16871                           postinc0	equ	0xFEE
 16872                           fsr0h	equ	0xFEA
 16873                           fsr0l	equ	0xFE9
 16874                           wreg	equ	0xFE8
 16875                           indf1	equ	0xFE7
 16876                           postdec1	equ	0xFE5
 16877                           fsr1h	equ	0xFE2
 16878                           fsr1l	equ	0xFE1
 16879                           indf2	equ	0xFDF
 16880                           postinc2	equ	0xFDE
 16881                           postdec2	equ	0xFDD
 16882                           fsr2h	equ	0xFDA
 16883                           fsr2l	equ	0xFD9
 16884                           status	equ	0xFD8
 16885                           
 16886 ;; *************** function _SWSPI_DAC_send_bits *****************
 16887 ;; Defined at:
 16888 ;;		line 43 in file "SwSpiApp.c"
 16889 ;; Parameters:    Size  Location     Type
 16890 ;;  phrType         1    wreg     enum E181
 16891 ;;  data            1   25[COMRAM] unsigned char 
 16892 ;; Auto vars:     Size  Location     Type
 16893 ;;  phrType         1   27[COMRAM] enum E181
 16894 ;;  count           1   26[COMRAM] unsigned char 
 16895 ;; Return value:  Size  Location     Type
 16896 ;;                  1    wreg      void 
 16897 ;; Registers used:
 16898 ;;		wreg, status,2, status,0, cstack
 16899 ;; Tracked objects:
 16900 ;;		On entry : 0/0
 16901 ;;		On exit  : 0/0
 16902 ;;		Unchanged: 0/0
 16903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16904 ;;      Params:         1       0       0       0       0       0       0
 16905 ;;      Locals:         2       0       0       0       0       0       0
 16906 ;;      Temps:          0       0       0       0       0       0       0
 16907 ;;      Totals:         3       0       0       0       0       0       0
 16908 ;;Total ram usage:        3 bytes
 16909 ;; Hardware stack levels used:    1
 16910 ;; Hardware stack levels required when called:    4
 16911 ;; This function calls:
 16912 ;;		_SwSpi_Clk_Pin
 16913 ;;		_SwSpi_Data_Pin
 16914 ;; This function is called by:
 16915 ;;		_SWSPI_send_word
 16916 ;; This function uses a non-reentrant model
 16917 ;;
 16918                           
 16919                           	psect	text71
 16920  004064                     __ptext71:
 16921                           	opt stack 0
 16922  004064                     _SWSPI_DAC_send_bits:
 16923                           	opt stack 23
 16924                           
 16925                           ;incstack = 0
 16926                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 16927  004064  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 16928                           
 16929                           ;SwSpiApp.c: 45: uint8_t count;
 16930                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 16931  004066  0E08               	movlw	8
 16932  004068  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 16933  00406A  D01A               	goto	l576
 16934  00406C                     
 16935                           ;SwSpiApp.c: 47: {
 16936                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 16937  00406C  0E01               	movlw	1
 16938  00406E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16939  004070  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16940  004072  EC89  F020         	call	_SwSpi_Clk_Pin
 16941                           
 16942                           ;SwSpiApp.c: 50: if (data & 0X80)
 16943  004076  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 16944  004078  D006               	goto	l578
 16945                           
 16946                           ;SwSpiApp.c: 51: {
 16947                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 16948  00407A  0E01               	movlw	1
 16949  00407C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16950  00407E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16951  004080  EC5E  F020         	call	_SwSpi_Data_Pin
 16952                           
 16953                           ;SwSpiApp.c: 54: }
 16954  004084  D005               	goto	l579
 16955  004086                     l578:
 16956                           
 16957                           ;SwSpiApp.c: 55: else
 16958                           ;SwSpiApp.c: 56: {
 16959                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 16960  004086  0E00               	movlw	0
 16961  004088  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16962  00408A  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16963  00408C  EC5E  F020         	call	_SwSpi_Data_Pin
 16964  004090                     l579:
 16965                           
 16966                           ;SwSpiApp.c: 58: }
 16967                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 16968  004090  0E00               	movlw	0
 16969  004092  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16970  004094  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16971  004096  EC89  F020         	call	_SwSpi_Clk_Pin
 16972  00409A  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 16973  00409C  90D8               	bcf	status,0,c
 16974  00409E  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 16975  0040A0                     l576:
 16976  0040A0  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 16977  0040A2  A4D8               	btfss	status,2,c
 16978  0040A4  D7E3               	goto	l577
 16979                           
 16980                           ;SwSpiApp.c: 61: }
 16981                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 16982  0040A6  0E00               	movlw	0
 16983  0040A8  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16984  0040AA  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16985  0040AC  EC5E  F020         	call	_SwSpi_Data_Pin
 16986                           
 16987                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 16988  0040B0  0E00               	movlw	0
 16989  0040B2  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16990  0040B4  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16991  0040B6  EC89  F020         	call	_SwSpi_Clk_Pin
 16992  0040BA  0012               	return		;funcret
 16993  0040BC                     __end_of_SWSPI_DAC_send_bits:
 16994                           	opt stack 0
 16995                           tosu	equ	0xFFF
 16996                           tosh	equ	0xFFE
 16997                           tosl	equ	0xFFD
 16998                           pclath	equ	0xFFA
 16999                           tblptru	equ	0xFF8
 17000                           tblptrh	equ	0xFF7
 17001                           tblptrl	equ	0xFF6
 17002                           tablat	equ	0xFF5
 17003                           prodh	equ	0xFF4
 17004                           prodl	equ	0xFF3
 17005                           intcon	equ	0xFF2
 17006                           intcon2	equ	0xFF1
 17007                           indf0	equ	0xFEF
 17008                           postinc0	equ	0xFEE
 17009                           fsr0h	equ	0xFEA
 17010                           fsr0l	equ	0xFE9
 17011                           wreg	equ	0xFE8
 17012                           indf1	equ	0xFE7
 17013                           postdec1	equ	0xFE5
 17014                           fsr1h	equ	0xFE2
 17015                           fsr1l	equ	0xFE1
 17016                           indf2	equ	0xFDF
 17017                           postinc2	equ	0xFDE
 17018                           postdec2	equ	0xFDD
 17019                           fsr2h	equ	0xFDA
 17020                           fsr2l	equ	0xFD9
 17021                           status	equ	0xFD8
 17022                           
 17023 ;; *************** function _SwSpi_Data_Pin *****************
 17024 ;; Defined at:
 17025 ;;		line 103 in file "SwSpiApp.c"
 17026 ;; Parameters:    Size  Location     Type
 17027 ;;  phrType         1    wreg     enum E181
 17028 ;;  cPinMode        1   23[COMRAM] unsigned char 
 17029 ;; Auto vars:     Size  Location     Type
 17030 ;;  phrType         1   24[COMRAM] enum E181
 17031 ;; Return value:  Size  Location     Type
 17032 ;;                  1    wreg      void 
 17033 ;; Registers used:
 17034 ;;		wreg, status,2, status,0
 17035 ;; Tracked objects:
 17036 ;;		On entry : 0/0
 17037 ;;		On exit  : 0/0
 17038 ;;		Unchanged: 0/0
 17039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17040 ;;      Params:         1       0       0       0       0       0       0
 17041 ;;      Locals:         1       0       0       0       0       0       0
 17042 ;;      Temps:          0       0       0       0       0       0       0
 17043 ;;      Totals:         2       0       0       0       0       0       0
 17044 ;;Total ram usage:        2 bytes
 17045 ;; Hardware stack levels used:    1
 17046 ;; Hardware stack levels required when called:    3
 17047 ;; This function calls:
 17048 ;;		Nothing
 17049 ;; This function is called by:
 17050 ;;		_SWSPI_DAC_send_bits
 17051 ;;		_SWSPI_Synth_send_bits
 17052 ;; This function uses a non-reentrant model
 17053 ;;
 17054                           
 17055                           	psect	text72
 17056  0040BC                     __ptext72:
 17057                           	opt stack 0
 17058  0040BC                     _SwSpi_Data_Pin:
 17059                           	opt stack 23
 17060                           
 17061                           ;incstack = 0
 17062                           ;SwSpi_Data_Pin@phrType stored from wreg
 17063  0040BC  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 17064                           
 17065                           ;SwSpiApp.c: 105: switch(phrType)
 17066  0040BE  D01E               	goto	l591
 17067  0040C0                     
 17068                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 17069  0040C0  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 17070  0040C2  A4D8               	btfss	status,2,c
 17071  0040C4  D002               	goto	l593
 17072                           
 17073                           ;SwSpiApp.c: 109: {
 17074                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 17075  0040C6  808C               	bsf	3980,0,c	;volatile
 17076                           
 17077                           ;SwSpiApp.c: 111: }
 17078  0040C8  0012               	return	
 17079  0040CA                     l593:
 17080                           
 17081                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 17082  0040CA  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 17083  0040CC  A4D8               	btfss	status,2,c
 17084  0040CE  0012               	return	
 17085                           
 17086                           ;SwSpiApp.c: 113: {
 17087                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 17088  0040D0  908C               	bcf	3980,0,c	;volatile
 17089                           
 17090                           ;SwSpiApp.c: 115: }
 17091                           ;SwSpiApp.c: 116: break;
 17092  0040D2  0012               	return	
 17093  0040D4                     
 17094                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 17095  0040D4  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 17096  0040D6  A4D8               	btfss	status,2,c
 17097  0040D8  D002               	goto	l602
 17098                           
 17099                           ;SwSpiApp.c: 120: {
 17100                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 17101  0040DA  8A8B               	bsf	3979,5,c	;volatile
 17102                           
 17103                           ;SwSpiApp.c: 122: }
 17104  0040DC  0012               	return	
 17105  0040DE                     l602:
 17106                           
 17107                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 17108  0040DE  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 17109  0040E0  A4D8               	btfss	status,2,c
 17110  0040E2  0012               	return	
 17111                           
 17112                           ;SwSpiApp.c: 124: {
 17113                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 17114  0040E4  9A8B               	bcf	3979,5,c	;volatile
 17115                           
 17116                           ;SwSpiApp.c: 126: }
 17117                           ;SwSpiApp.c: 127: break;
 17118  0040E6  0012               	return	
 17119  0040E8                     
 17120                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 17121  0040E8  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 17122  0040EA  A4D8               	btfss	status,2,c
 17123  0040EC  D002               	goto	l610
 17124                           
 17125                           ;SwSpiApp.c: 131: {
 17126                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 17127  0040EE  8889               	bsf	3977,4,c	;volatile
 17128                           
 17129                           ;SwSpiApp.c: 133: }
 17130  0040F0  0012               	return	
 17131  0040F2                     l610:
 17132                           
 17133                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 17134  0040F2  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 17135  0040F4  A4D8               	btfss	status,2,c
 17136  0040F6  0012               	return	
 17137                           
 17138                           ;SwSpiApp.c: 135: {
 17139                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 17140  0040F8  9889               	bcf	3977,4,c	;volatile
 17141                           
 17142                           ;SwSpiApp.c: 139: }
 17143                           
 17144                           ;SwSpiApp.c: 137: }
 17145                           ;SwSpiApp.c: 138: break;
 17146  0040FA  0012               	return	
 17147  0040FC                     l591:
 17148  0040FC  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 17149                           
 17150                           ; Switch size 1, requested type "space"
 17151                           ; Number of cases is 3, Range of values is 0 to 2
 17152                           ; switch strategies available:
 17153                           ; Name         Instructions Cycles
 17154                           ; simple_byte           10     6 (average)
 17155                           ;	Chosen strategy is simple_byte
 17156  0040FE  0A00               	xorlw	0	; case 0
 17157  004100  B4D8               	btfsc	status,2,c
 17158  004102  D7DE               	goto	l592
 17159  004104  0A01               	xorlw	1	; case 1
 17160  004106  B4D8               	btfsc	status,2,c
 17161  004108  D7E5               	goto	l601
 17162  00410A  0A03               	xorlw	3	; case 2
 17163  00410C  A4D8               	btfss	status,2,c
 17164  00410E  0012               	return	
 17165  004110  D7EB               	goto	l609
 17166  004112                     __end_of_SwSpi_Data_Pin:
 17167                           	opt stack 0
 17168                           tosu	equ	0xFFF
 17169                           tosh	equ	0xFFE
 17170                           tosl	equ	0xFFD
 17171                           pclath	equ	0xFFA
 17172                           tblptru	equ	0xFF8
 17173                           tblptrh	equ	0xFF7
 17174                           tblptrl	equ	0xFF6
 17175                           tablat	equ	0xFF5
 17176                           prodh	equ	0xFF4
 17177                           prodl	equ	0xFF3
 17178                           intcon	equ	0xFF2
 17179                           intcon2	equ	0xFF1
 17180                           indf0	equ	0xFEF
 17181                           postinc0	equ	0xFEE
 17182                           fsr0h	equ	0xFEA
 17183                           fsr0l	equ	0xFE9
 17184                           wreg	equ	0xFE8
 17185                           indf1	equ	0xFE7
 17186                           postdec1	equ	0xFE5
 17187                           fsr1h	equ	0xFE2
 17188                           fsr1l	equ	0xFE1
 17189                           indf2	equ	0xFDF
 17190                           postinc2	equ	0xFDE
 17191                           postdec2	equ	0xFDD
 17192                           fsr2h	equ	0xFDA
 17193                           fsr2l	equ	0xFD9
 17194                           status	equ	0xFD8
 17195                           
 17196 ;; *************** function _SwSpi_Clk_Pin *****************
 17197 ;; Defined at:
 17198 ;;		line 142 in file "SwSpiApp.c"
 17199 ;; Parameters:    Size  Location     Type
 17200 ;;  phrType         1    wreg     enum E181
 17201 ;;  cPinMode        1   23[COMRAM] unsigned char 
 17202 ;; Auto vars:     Size  Location     Type
 17203 ;;  phrType         1   24[COMRAM] enum E181
 17204 ;; Return value:  Size  Location     Type
 17205 ;;                  1    wreg      void 
 17206 ;; Registers used:
 17207 ;;		wreg, status,2, status,0
 17208 ;; Tracked objects:
 17209 ;;		On entry : 0/0
 17210 ;;		On exit  : 0/0
 17211 ;;		Unchanged: 0/0
 17212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17213 ;;      Params:         1       0       0       0       0       0       0
 17214 ;;      Locals:         1       0       0       0       0       0       0
 17215 ;;      Temps:          0       0       0       0       0       0       0
 17216 ;;      Totals:         2       0       0       0       0       0       0
 17217 ;;Total ram usage:        2 bytes
 17218 ;; Hardware stack levels used:    1
 17219 ;; Hardware stack levels required when called:    3
 17220 ;; This function calls:
 17221 ;;		Nothing
 17222 ;; This function is called by:
 17223 ;;		_SWSPI_DAC_send_bits
 17224 ;;		_SWSPI_Synth_send_bits
 17225 ;;		_SwSpi_Synth_Toggle_Clock
 17226 ;; This function uses a non-reentrant model
 17227 ;;
 17228                           
 17229                           	psect	text73
 17230  004112                     __ptext73:
 17231                           	opt stack 0
 17232  004112                     _SwSpi_Clk_Pin:
 17233                           	opt stack 23
 17234                           
 17235                           ;incstack = 0
 17236                           ;SwSpi_Clk_Pin@phrType stored from wreg
 17237  004112  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 17238                           
 17239                           ;SwSpiApp.c: 144: switch(phrType)
 17240  004114  D01E               	goto	l620
 17241  004116                     
 17242                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 17243  004116  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 17244  004118  A4D8               	btfss	status,2,c
 17245  00411A  D002               	goto	l622
 17246                           
 17247                           ;SwSpiApp.c: 148: {
 17248                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 17249  00411C  868B               	bsf	3979,3,c	;volatile
 17250                           
 17251                           ;SwSpiApp.c: 150: }
 17252  00411E  0012               	return	
 17253  004120                     l622:
 17254                           
 17255                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 17256  004120  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 17257  004122  A4D8               	btfss	status,2,c
 17258  004124  0012               	return	
 17259                           
 17260                           ;SwSpiApp.c: 152: {
 17261                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 17262  004126  968B               	bcf	3979,3,c	;volatile
 17263                           
 17264                           ;SwSpiApp.c: 154: }
 17265                           ;SwSpiApp.c: 155: break;
 17266  004128  0012               	return	
 17267  00412A                     
 17268                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 17269  00412A  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 17270  00412C  A4D8               	btfss	status,2,c
 17271  00412E  D002               	goto	l631
 17272                           
 17273                           ;SwSpiApp.c: 159: {
 17274                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 17275  004130  888B               	bsf	3979,4,c	;volatile
 17276                           
 17277                           ;SwSpiApp.c: 161: }
 17278  004132  0012               	return	
 17279  004134                     l631:
 17280                           
 17281                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 17282  004134  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 17283  004136  A4D8               	btfss	status,2,c
 17284  004138  0012               	return	
 17285                           
 17286                           ;SwSpiApp.c: 163: {
 17287                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 17288  00413A  988B               	bcf	3979,4,c	;volatile
 17289                           
 17290                           ;SwSpiApp.c: 165: }
 17291                           ;SwSpiApp.c: 167: break;
 17292  00413C  0012               	return	
 17293  00413E                     
 17294                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 17295  00413E  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 17296  004140  A4D8               	btfss	status,2,c
 17297  004142  D002               	goto	l639
 17298                           
 17299                           ;SwSpiApp.c: 171: {
 17300                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 17301  004144  8689               	bsf	3977,3,c	;volatile
 17302                           
 17303                           ;SwSpiApp.c: 173: }
 17304  004146  0012               	return	
 17305  004148                     l639:
 17306                           
 17307                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 17308  004148  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 17309  00414A  A4D8               	btfss	status,2,c
 17310  00414C  0012               	return	
 17311                           
 17312                           ;SwSpiApp.c: 175: {
 17313                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 17314  00414E  9689               	bcf	3977,3,c	;volatile
 17315                           
 17316                           ;SwSpiApp.c: 179: }
 17317                           
 17318                           ;SwSpiApp.c: 177: }
 17319                           ;SwSpiApp.c: 178: break;
 17320  004150  0012               	return	
 17321  004152                     l620:
 17322  004152  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 17323                           
 17324                           ; Switch size 1, requested type "space"
 17325                           ; Number of cases is 3, Range of values is 0 to 2
 17326                           ; switch strategies available:
 17327                           ; Name         Instructions Cycles
 17328                           ; simple_byte           10     6 (average)
 17329                           ;	Chosen strategy is simple_byte
 17330  004154  0A00               	xorlw	0	; case 0
 17331  004156  B4D8               	btfsc	status,2,c
 17332  004158  D7DE               	goto	l621
 17333  00415A  0A01               	xorlw	1	; case 1
 17334  00415C  B4D8               	btfsc	status,2,c
 17335  00415E  D7E5               	goto	l630
 17336  004160  0A03               	xorlw	3	; case 2
 17337  004162  A4D8               	btfss	status,2,c
 17338  004164  0012               	return	
 17339  004166  D7EB               	goto	l638
 17340  004168                     __end_of_SwSpi_Clk_Pin:
 17341                           	opt stack 0
 17342                           tosu	equ	0xFFF
 17343                           tosh	equ	0xFFE
 17344                           tosl	equ	0xFFD
 17345                           pclath	equ	0xFFA
 17346                           tblptru	equ	0xFF8
 17347                           tblptrh	equ	0xFF7
 17348                           tblptrl	equ	0xFF6
 17349                           tablat	equ	0xFF5
 17350                           prodh	equ	0xFF4
 17351                           prodl	equ	0xFF3
 17352                           intcon	equ	0xFF2
 17353                           intcon2	equ	0xFF1
 17354                           indf0	equ	0xFEF
 17355                           postinc0	equ	0xFEE
 17356                           fsr0h	equ	0xFEA
 17357                           fsr0l	equ	0xFE9
 17358                           wreg	equ	0xFE8
 17359                           indf1	equ	0xFE7
 17360                           postdec1	equ	0xFE5
 17361                           fsr1h	equ	0xFE2
 17362                           fsr1l	equ	0xFE1
 17363                           indf2	equ	0xFDF
 17364                           postinc2	equ	0xFDE
 17365                           postdec2	equ	0xFDD
 17366                           fsr2h	equ	0xFDA
 17367                           fsr2l	equ	0xFD9
 17368                           status	equ	0xFD8
 17369                           
 17370 ;; *************** function _ReadIntFromEeprom *****************
 17371 ;; Defined at:
 17372 ;;		line 47 in file "SystemCommon.c"
 17373 ;; Parameters:    Size  Location     Type
 17374 ;;  address         1    wreg     unsigned char 
 17375 ;;  numOfByes       2   83[BANK0 ] int 
 17376 ;; Auto vars:     Size  Location     Type
 17377 ;;  address         1  100[BANK0 ] unsigned char 
 17378 ;;  base            4   90[BANK0 ] unsigned long 
 17379 ;;  idx             1  105[BANK0 ] unsigned char 
 17380 ;;  retVal          4  101[BANK0 ] unsigned long 
 17381 ;; Return value:  Size  Location     Type
 17382 ;;                  4   83[BANK0 ] unsigned long 
 17383 ;; Registers used:
 17384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17385 ;; Tracked objects:
 17386 ;;		On entry : 0/0
 17387 ;;		On exit  : 0/0
 17388 ;;		Unchanged: 0/0
 17389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17390 ;;      Params:         0       4       0       0       0       0       0
 17391 ;;      Locals:         0      16       0       0       0       0       0
 17392 ;;      Temps:          0       3       0       0       0       0       0
 17393 ;;      Totals:         0      23       0       0       0       0       0
 17394 ;;Total ram usage:       23 bytes
 17395 ;; Hardware stack levels used:    1
 17396 ;; Hardware stack levels required when called:    8
 17397 ;; This function calls:
 17398 ;;		_EepromRead
 17399 ;;		___awtoft
 17400 ;;		___fttol
 17401 ;;		___lmul
 17402 ;;		_pow
 17403 ;; This function is called by:
 17404 ;;		_DacInit
 17405 ;;		_ReadSystemStatusFromEprom
 17406 ;;		_DacReadValue
 17407 ;; This function uses a non-reentrant model
 17408 ;;
 17409                           
 17410                           	psect	text74
 17411  002810                     __ptext74:
 17412                           	opt stack 0
 17413  002810                     _ReadIntFromEeprom:
 17414                           	opt stack 21
 17415                           
 17416                           ;incstack = 0
 17417                           ;ReadIntFromEeprom@address stored from wreg
 17418  002810  0100               	movlb	0	; () banked
 17419  002812  6FC4               	movwf	ReadIntFromEeprom@address& (0+255),b
 17420                           
 17421                           ;SystemCommon.c: 49: uint32_t retVal = 0x00;
 17422  002814  0E00               	movlw	0
 17423  002816  0100               	movlb	0	; () banked
 17424  002818  6FC5               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 17425  00281A  0E00               	movlw	0
 17426  00281C  6FC6               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 17427  00281E  0E00               	movlw	0
 17428  002820  6FC7               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 17429  002822  0E00               	movlw	0
 17430  002824  6FC8               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 17431                           
 17432                           ; BSR set to: 0
 17433                           ;SystemCommon.c: 50: address -= numOfByes;
 17434  002826  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 17435  002828  5FC4               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 17436                           
 17437                           ; BSR set to: 0
 17438                           ;SystemCommon.c: 52: for(uint8_t idx = 0; idx < numOfByes; idx++)
 17439  00282A  0E00               	movlw	0
 17440  00282C  6FC9               	movwf	ReadIntFromEeprom@idx& (0+255),b
 17441  00282E  D06D               	goto	l1331
 17442  002830                     
 17443                           ; BSR set to: 0
 17444                           ;SystemCommon.c: 53: {
 17445                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 17446                           
 17447                           ; BSR set to: 0
 17448  002830  51C9               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 17449  002832  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 17450  002834  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 17451  002836  0E01               	movlw	1
 17452  002838  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 17453  00283A  0E00               	movlw	0
 17454  00283C  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17455  00283E  1FB7               	comf	??_ReadIntFromEeprom& (0+255),f,b
 17456  002840  1FB8               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17457  002842  4BB7               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 17458  002844  2BB8               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17459  002846  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 17460  002848  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 17461  00284A  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 17462  00284C  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17463  00284E  90D8               	bcf	status,0,c
 17464  002850  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 17465  002852  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17466  002854  90D8               	bcf	status,0,c
 17467  002856  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 17468  002858  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17469  00285A  90D8               	bcf	status,0,c
 17470  00285C  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 17471  00285E  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17472  002860  C0B7  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 17473  002864  C0B8  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 17474  002868  EC4B  F022         	call	___awtoft	;wreg free
 17475  00286C  C020  F0BE         	movff	?___awtoft,_ReadIntFromEeprom$3974
 17476  002870  C021  F0BF         	movff	?___awtoft+1,_ReadIntFromEeprom$3974+1
 17477  002874  C022  F0C0         	movff	?___awtoft+2,_ReadIntFromEeprom$3974+2
 17478                           
 17479                           ;SystemCommon.c: 53: {
 17480                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 17481  002878  C0BE  F0A5         	movff	_ReadIntFromEeprom$3974,pow@y
 17482  00287C  C0BF  F0A6         	movff	_ReadIntFromEeprom$3974+1,pow@y+1
 17483  002880  C0C0  F0A7         	movff	_ReadIntFromEeprom$3974+2,pow@y+2
 17484  002884  0E00               	movlw	0
 17485  002886  0100               	movlb	0	; () banked
 17486  002888  6FA2               	movwf	pow@x& (0+255),b
 17487  00288A  0E00               	movlw	0
 17488  00288C  6FA3               	movwf	(pow@x+1)& (0+255),b
 17489  00288E  0E40               	movlw	64
 17490  002890  6FA4               	movwf	(pow@x+2)& (0+255),b
 17491  002892  ECD8  F00E         	call	_pow	;wreg free
 17492  002896  C0A2  F0C1         	movff	?_pow,_ReadIntFromEeprom$3975
 17493  00289A  C0A3  F0C2         	movff	?_pow+1,_ReadIntFromEeprom$3975+1
 17494  00289E  C0A4  F0C3         	movff	?_pow+2,_ReadIntFromEeprom$3975+2
 17495                           
 17496                           ;SystemCommon.c: 53: {
 17497                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 17498  0028A2  C0C1  F079         	movff	_ReadIntFromEeprom$3975,___fttol@f1
 17499  0028A6  C0C2  F07A         	movff	_ReadIntFromEeprom$3975+1,___fttol@f1+1
 17500  0028AA  C0C3  F07B         	movff	_ReadIntFromEeprom$3975+2,___fttol@f1+2
 17501  0028AE  ECB6  F015         	call	___fttol	;wreg free
 17502  0028B2  C079  F0BA         	movff	?___fttol,ReadIntFromEeprom@base
 17503  0028B6  C07A  F0BB         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 17504  0028BA  C07B  F0BC         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 17505  0028BE  C07C  F0BD         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 17506                           
 17507                           ;SystemCommon.c: 55: retVal = retVal | EepromRead(address + idx) * base;
 17508  0028C2  0100               	movlb	0	; () banked
 17509  0028C4  51C4               	movf	ReadIntFromEeprom@address& (0+255),w,b
 17510  0028C6  25C9               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 17511  0028C8  EC1E  F024         	call	_EepromRead
 17512  0028CC  0100               	movlb	0	; () banked
 17513  0028CE  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 17514  0028D0  51B7               	movf	??_ReadIntFromEeprom& (0+255),w,b
 17515  0028D2  6E1A               	movwf	___lmul@multiplier,c
 17516  0028D4  6A1B               	clrf	___lmul@multiplier+1,c
 17517  0028D6  6A1C               	clrf	___lmul@multiplier+2,c
 17518  0028D8  6A1D               	clrf	___lmul@multiplier+3,c
 17519  0028DA  C0BA  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 17520  0028DE  C0BB  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 17521  0028E2  C0BC  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 17522  0028E6  C0BD  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 17523  0028EA  ECB4  F020         	call	___lmul	;wreg free
 17524  0028EE  0100               	movlb	0	; () banked
 17525  0028F0  51C5               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 17526  0028F2  101A               	iorwf	?___lmul,w,c
 17527  0028F4  6FC5               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 17528  0028F6  51C6               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 17529  0028F8  101B               	iorwf	?___lmul+1,w,c
 17530  0028FA  6FC6               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 17531  0028FC  51C7               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 17532  0028FE  101C               	iorwf	?___lmul+2,w,c
 17533  002900  6FC7               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 17534  002902  51C8               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 17535  002904  101D               	iorwf	?___lmul+3,w,c
 17536  002906  6FC8               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 17537                           
 17538                           ; BSR set to: 0
 17539  002908  2BC9               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 17540  00290A                     l1331:
 17541                           
 17542                           ; BSR set to: 0
 17543                           
 17544                           ; BSR set to: 0
 17545  00290A  51C9               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 17546  00290C  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 17547  00290E  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 17548  002910  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 17549  002912  5DB7               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 17550  002914  51B8               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 17551  002916  0A80               	xorlw	128
 17552  002918  6FB9               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 17553  00291A  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 17554  00291C  0A80               	xorlw	128
 17555  00291E  59B9               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 17556  002920  A0D8               	btfss	status,0,c
 17557  002922  D786               	goto	l1332
 17558                           
 17559                           ; BSR set to: 0
 17560                           ;SystemCommon.c: 56: }
 17561                           ;SystemCommon.c: 57: return retVal;
 17562  002924  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 17563  002928  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 17564  00292C  C0C7  F0B5         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 17565  002930  C0C8  F0B6         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 17566                           
 17567                           ; BSR set to: 0
 17568  002934  0012               	return		;funcret
 17569  002936                     __end_of_ReadIntFromEeprom:
 17570                           	opt stack 0
 17571                           tosu	equ	0xFFF
 17572                           tosh	equ	0xFFE
 17573                           tosl	equ	0xFFD
 17574                           pclath	equ	0xFFA
 17575                           tblptru	equ	0xFF8
 17576                           tblptrh	equ	0xFF7
 17577                           tblptrl	equ	0xFF6
 17578                           tablat	equ	0xFF5
 17579                           prodh	equ	0xFF4
 17580                           prodl	equ	0xFF3
 17581                           intcon	equ	0xFF2
 17582                           intcon2	equ	0xFF1
 17583                           indf0	equ	0xFEF
 17584                           postinc0	equ	0xFEE
 17585                           fsr0h	equ	0xFEA
 17586                           fsr0l	equ	0xFE9
 17587                           wreg	equ	0xFE8
 17588                           indf1	equ	0xFE7
 17589                           postdec1	equ	0xFE5
 17590                           fsr1h	equ	0xFE2
 17591                           fsr1l	equ	0xFE1
 17592                           indf2	equ	0xFDF
 17593                           postinc2	equ	0xFDE
 17594                           postdec2	equ	0xFDD
 17595                           fsr2h	equ	0xFDA
 17596                           fsr2l	equ	0xFD9
 17597                           status	equ	0xFD8
 17598                           
 17599 ;; *************** function _pow *****************
 17600 ;; Defined at:
 17601 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 17602 ;; Parameters:    Size  Location     Type
 17603 ;;  x               3   66[BANK0 ] unsigned long 
 17604 ;;  y               3   69[BANK0 ] unsigned long 
 17605 ;; Auto vars:     Size  Location     Type
 17606 ;;  yi              4   79[BANK0 ] unsigned long 
 17607 ;;  sign            1   78[BANK0 ] unsigned char 
 17608 ;; Return value:  Size  Location     Type
 17609 ;;                  3   66[BANK0 ] unsigned char 
 17610 ;; Registers used:
 17611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17612 ;; Tracked objects:
 17613 ;;		On entry : 0/0
 17614 ;;		On exit  : 0/0
 17615 ;;		Unchanged: 0/0
 17616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17617 ;;      Params:         0       6       0       0       0       0       0
 17618 ;;      Locals:         0      11       0       0       0       0       0
 17619 ;;      Temps:          0       0       0       0       0       0       0
 17620 ;;      Totals:         0      17       0       0       0       0       0
 17621 ;;Total ram usage:       17 bytes
 17622 ;; Hardware stack levels used:    1
 17623 ;; Hardware stack levels required when called:    7
 17624 ;; This function calls:
 17625 ;;		___ftge
 17626 ;;		___ftmul
 17627 ;;		___ftneg
 17628 ;;		___fttol
 17629 ;;		___lltoft
 17630 ;;		_exp
 17631 ;;		_log
 17632 ;; This function is called by:
 17633 ;;		_SampleSingleChannel
 17634 ;;		_SampleAllChannels
 17635 ;;		_GroupRx
 17636 ;;		_GroupTx
 17637 ;;		_ReadIntFromEeprom
 17638 ;;		_DacSetValue
 17639 ;;		_DacAnalogToDigitalSpi
 17640 ;; This function uses a non-reentrant model
 17641 ;;
 17642                           
 17643                           	psect	text75
 17644  001DB0                     __ptext75:
 17645                           	opt stack 0
 17646  001DB0                     _pow:
 17647                           	opt stack 21
 17648                           
 17649                           ; BSR set to: 0
 17650                           ;incstack = 0
 17651  001DB0  0E00               	movlw	0
 17652  001DB2  0100               	movlb	0	; () banked
 17653  001DB4  6FAE               	movwf	pow@sign& (0+255),b
 17654                           
 17655                           ; BSR set to: 0
 17656  001DB6  51A2               	movf	pow@x& (0+255),w,b
 17657  001DB8  11A3               	iorwf	(pow@x+1)& (0+255),w,b
 17658  001DBA  11A4               	iorwf	(pow@x+2)& (0+255),w,b
 17659  001DBC  A4D8               	btfss	status,2,c
 17660  001DBE  D01D               	goto	l2201
 17661                           
 17662                           ; BSR set to: 0
 17663  001DC0  0E00               	movlw	0
 17664  001DC2  6E18               	movwf	___ftge@ff1,c
 17665  001DC4  0E00               	movlw	0
 17666  001DC6  6E19               	movwf	___ftge@ff1+1,c
 17667  001DC8  0E00               	movlw	0
 17668  001DCA  6E1A               	movwf	___ftge@ff1+2,c
 17669  001DCC  C0A5  F01B         	movff	pow@y,___ftge@ff2
 17670  001DD0  C0A6  F01C         	movff	pow@y+1,___ftge@ff2+1
 17671  001DD4  C0A7  F01D         	movff	pow@y+2,___ftge@ff2+2
 17672  001DD8  ECE7  F01B         	call	___ftge	;wreg free
 17673  001DDC  A0D8               	btfss	status,0,c
 17674  001DDE  D005               	goto	l2202
 17675  001DE0  0E00               	movlw	0
 17676  001DE2  0101               	movlb	1	; () banked
 17677  001DE4  6FC5               	movwf	(_errno+1)& (0+255),b
 17678  001DE6  0E21               	movlw	33
 17679  001DE8  6FC4               	movwf	_errno& (0+255),b
 17680  001DEA                     l2202:
 17681  001DEA  0E00               	movlw	0
 17682  001DEC  0100               	movlb	0	; () banked
 17683  001DEE  6FA2               	movwf	?_pow& (0+255),b
 17684  001DF0  0E00               	movlw	0
 17685  001DF2  6FA3               	movwf	(?_pow+1)& (0+255),b
 17686  001DF4  0E00               	movlw	0
 17687  001DF6  6FA4               	movwf	(?_pow+2)& (0+255),b
 17688                           
 17689                           ; BSR set to: 0
 17690  001DF8  0012               	return	
 17691  001DFA                     l2201:
 17692                           
 17693                           ; BSR set to: 0
 17694                           
 17695                           ; BSR set to: 0
 17696  001DFA  51A5               	movf	pow@y& (0+255),w,b
 17697  001DFC  11A6               	iorwf	(pow@y+1)& (0+255),w,b
 17698  001DFE  11A7               	iorwf	(pow@y+2)& (0+255),w,b
 17699  001E00  A4D8               	btfss	status,2,c
 17700  001E02  D007               	goto	l2204
 17701                           
 17702                           ; BSR set to: 0
 17703  001E04  0E00               	movlw	0
 17704  001E06  6FA2               	movwf	?_pow& (0+255),b
 17705  001E08  0E80               	movlw	128
 17706  001E0A  6FA3               	movwf	(?_pow+1)& (0+255),b
 17707  001E0C  0E3F               	movlw	63
 17708  001E0E  6FA4               	movwf	(?_pow+2)& (0+255),b
 17709                           
 17710                           ; BSR set to: 0
 17711  001E10  0012               	return	
 17712  001E12                     l2204:
 17713                           
 17714                           ; BSR set to: 0
 17715                           
 17716                           ; BSR set to: 0
 17717  001E12  AFA4               	btfss	(pow@x+2)& (0+255),7,b
 17718  001E14  D043               	goto	l2205
 17719                           
 17720                           ; BSR set to: 0
 17721  001E16  C0A5  F079         	movff	pow@y,___fttol@f1
 17722  001E1A  C0A6  F07A         	movff	pow@y+1,___fttol@f1+1
 17723  001E1E  C0A7  F07B         	movff	pow@y+2,___fttol@f1+2
 17724  001E22  ECB6  F015         	call	___fttol	;wreg free
 17725  001E26  C079  F0AF         	movff	?___fttol,pow@yi
 17726  001E2A  C07A  F0B0         	movff	?___fttol+1,pow@yi+1
 17727  001E2E  C07B  F0B1         	movff	?___fttol+2,pow@yi+2
 17728  001E32  C07C  F0B2         	movff	?___fttol+3,pow@yi+3
 17729  001E36  C0AF  F020         	movff	pow@yi,___lltoft@c
 17730  001E3A  C0B0  F021         	movff	pow@yi+1,___lltoft@c+1
 17731  001E3E  C0B1  F022         	movff	pow@yi+2,___lltoft@c+2
 17732  001E42  C0B2  F023         	movff	pow@yi+3,___lltoft@c+3
 17733  001E46  ECD8  F01F         	call	___lltoft	;wreg free
 17734  001E4A  0100               	movlb	0	; () banked
 17735  001E4C  51A5               	movf	pow@y& (0+255),w,b
 17736  001E4E  1820               	xorwf	?___lltoft,w,c
 17737  001E50  E107               	bnz	u8730
 17738  001E52  51A6               	movf	(pow@y+1)& (0+255),w,b
 17739  001E54  1821               	xorwf	?___lltoft+1,w,c
 17740  001E56  E104               	bnz	u8730
 17741  001E58  51A7               	movf	(pow@y+2)& (0+255),w,b
 17742  001E5A  1822               	xorwf	?___lltoft+2,w,c
 17743  001E5C  B4D8               	btfsc	status,2,c
 17744  001E5E  D00D               	goto	l2206
 17745  001E60                     u8730:
 17746                           
 17747                           ; BSR set to: 0
 17748  001E60  0E00               	movlw	0
 17749  001E62  0101               	movlb	1	; () banked
 17750  001E64  6FC5               	movwf	(_errno+1)& (0+255),b
 17751  001E66  0E21               	movlw	33
 17752  001E68  6FC4               	movwf	_errno& (0+255),b
 17753  001E6A  0E00               	movlw	0
 17754  001E6C  0100               	movlb	0	; () banked
 17755  001E6E  6FA2               	movwf	?_pow& (0+255),b
 17756  001E70  0E00               	movlw	0
 17757  001E72  6FA3               	movwf	(?_pow+1)& (0+255),b
 17758  001E74  0E00               	movlw	0
 17759  001E76  6FA4               	movwf	(?_pow+2)& (0+255),b
 17760                           
 17761                           ; BSR set to: 0
 17762  001E78  0012               	return	
 17763  001E7A                     l2206:
 17764                           
 17765                           ; BSR set to: 0
 17766                           
 17767                           ; BSR set to: 0
 17768  001E7A  51AF               	movf	pow@yi& (0+255),w,b
 17769  001E7C  0B01               	andlw	1
 17770  001E7E  6FAE               	movwf	pow@sign& (0+255),b
 17771                           
 17772                           ; BSR set to: 0
 17773  001E80  C0A2  F018         	movff	pow@x,___ftneg@f1
 17774  001E84  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 17775  001E88  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 17776  001E8C  EC66  F023         	call	___ftneg	;wreg free
 17777  001E90  C018  F0A2         	movff	?___ftneg,pow@x
 17778  001E94  C019  F0A3         	movff	?___ftneg+1,pow@x+1
 17779  001E98  C01A  F0A4         	movff	?___ftneg+2,pow@x+2
 17780  001E9C                     l2205:
 17781  001E9C  C0A2  F092         	movff	pow@x,log@x
 17782  001EA0  C0A3  F093         	movff	pow@x+1,log@x+1
 17783  001EA4  C0A4  F094         	movff	pow@x+2,log@x+2
 17784  001EA8  EC4B  F012         	call	_log	;wreg free
 17785  001EAC  C092  F0A8         	movff	?_log,_pow$3980
 17786  001EB0  C093  F0A9         	movff	?_log+1,_pow$3980+1
 17787  001EB4  C094  F0AA         	movff	?_log+2,_pow$3980+2
 17788  001EB8  C0A8  F066         	movff	_pow$3980,___ftmul@f1
 17789  001EBC  C0A9  F067         	movff	_pow$3980+1,___ftmul@f1+1
 17790  001EC0  C0AA  F068         	movff	_pow$3980+2,___ftmul@f1+2
 17791  001EC4  C0A5  F069         	movff	pow@y,___ftmul@f2
 17792  001EC8  C0A6  F06A         	movff	pow@y+1,___ftmul@f2+1
 17793  001ECC  C0A7  F06B         	movff	pow@y+2,___ftmul@f2+2
 17794  001ED0  EC32  F016         	call	___ftmul	;wreg free
 17795  001ED4  C066  F0AB         	movff	?___ftmul,_pow$3981
 17796  001ED8  C067  F0AC         	movff	?___ftmul+1,_pow$3981+1
 17797  001EDC  C068  F0AD         	movff	?___ftmul+2,_pow$3981+2
 17798  001EE0  C0AB  F099         	movff	_pow$3981,exp@x
 17799  001EE4  C0AC  F09A         	movff	_pow$3981+1,exp@x+1
 17800  001EE8  C0AD  F09B         	movff	_pow$3981+2,exp@x+2
 17801  001EEC  EC8F  F00A         	call	_exp	;wreg free
 17802  001EF0  C099  F0A2         	movff	?_exp,pow@x
 17803  001EF4  C09A  F0A3         	movff	?_exp+1,pow@x+1
 17804  001EF8  C09B  F0A4         	movff	?_exp+2,pow@x+2
 17805  001EFC  0100               	movlb	0	; () banked
 17806  001EFE  51AE               	movf	pow@sign& (0+255),w,b
 17807  001F00  B4D8               	btfsc	status,2,c
 17808  001F02  D00F               	goto	l2207
 17809                           
 17810                           ; BSR set to: 0
 17811  001F04  C0A2  F018         	movff	pow@x,___ftneg@f1
 17812  001F08  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 17813  001F0C  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 17814  001F10  EC66  F023         	call	___ftneg	;wreg free
 17815  001F14  C018  F0A2         	movff	?___ftneg,?_pow
 17816  001F18  C019  F0A3         	movff	?___ftneg+1,?_pow+1
 17817  001F1C  C01A  F0A4         	movff	?___ftneg+2,?_pow+2
 17818  001F20  0012               	return	
 17819  001F22                     l2207:
 17820                           
 17821                           ; BSR set to: 0
 17822  001F22  C0A2  F0A2         	movff	pow@x,?_pow
 17823  001F26  C0A3  F0A3         	movff	pow@x+1,?_pow+1
 17824  001F2A  C0A4  F0A4         	movff	pow@x+2,?_pow+2
 17825  001F2E  0012               	return		;funcret
 17826  001F30                     __end_of_pow:
 17827                           	opt stack 0
 17828                           tosu	equ	0xFFF
 17829                           tosh	equ	0xFFE
 17830                           tosl	equ	0xFFD
 17831                           pclath	equ	0xFFA
 17832                           tblptru	equ	0xFF8
 17833                           tblptrh	equ	0xFF7
 17834                           tblptrl	equ	0xFF6
 17835                           tablat	equ	0xFF5
 17836                           prodh	equ	0xFF4
 17837                           prodl	equ	0xFF3
 17838                           intcon	equ	0xFF2
 17839                           intcon2	equ	0xFF1
 17840                           indf0	equ	0xFEF
 17841                           postinc0	equ	0xFEE
 17842                           fsr0h	equ	0xFEA
 17843                           fsr0l	equ	0xFE9
 17844                           wreg	equ	0xFE8
 17845                           indf1	equ	0xFE7
 17846                           postdec1	equ	0xFE5
 17847                           fsr1h	equ	0xFE2
 17848                           fsr1l	equ	0xFE1
 17849                           indf2	equ	0xFDF
 17850                           postinc2	equ	0xFDE
 17851                           postdec2	equ	0xFDD
 17852                           fsr2h	equ	0xFDA
 17853                           fsr2l	equ	0xFD9
 17854                           status	equ	0xFD8
 17855                           
 17856 ;; *************** function _log *****************
 17857 ;; Defined at:
 17858 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 17859 ;; Parameters:    Size  Location     Type
 17860 ;;  x               3   50[BANK0 ] unsigned char 
 17861 ;; Auto vars:     Size  Location     Type
 17862 ;;  exponent        2   53[BANK0 ] int 
 17863 ;; Return value:  Size  Location     Type
 17864 ;;                  3   50[BANK0 ] int 
 17865 ;; Registers used:
 17866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17867 ;; Tracked objects:
 17868 ;;		On entry : 0/0
 17869 ;;		On exit  : 0/0
 17870 ;;		Unchanged: 0/0
 17871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17872 ;;      Params:         0       3       0       0       0       0       0
 17873 ;;      Locals:         0       2       0       0       0       0       0
 17874 ;;      Temps:          0       0       0       0       0       0       0
 17875 ;;      Totals:         0       5       0       0       0       0       0
 17876 ;;Total ram usage:        5 bytes
 17877 ;; Hardware stack levels used:    1
 17878 ;; Hardware stack levels required when called:    6
 17879 ;; This function calls:
 17880 ;;		___awtoft
 17881 ;;		___ftadd
 17882 ;;		___ftmul
 17883 ;;		_eval_poly
 17884 ;;		_frexp
 17885 ;; This function is called by:
 17886 ;;		_pow
 17887 ;; This function uses a non-reentrant model
 17888 ;;
 17889                           
 17890                           	psect	text76
 17891  002496                     __ptext76:
 17892                           	opt stack 0
 17893  002496                     _log:
 17894                           	opt stack 21
 17895                           
 17896                           ;incstack = 0
 17897  002496  0100               	movlb	0	; () banked
 17898  002498  AF94               	btfss	(log@x+2)& (0+255),7,b
 17899  00249A  D00D               	goto	l2467
 17900                           
 17901                           ; BSR set to: 0
 17902  00249C  0E00               	movlw	0
 17903  00249E  0101               	movlb	1	; () banked
 17904  0024A0  6FC5               	movwf	(_errno+1)& (0+255),b
 17905  0024A2  0E21               	movlw	33
 17906  0024A4  6FC4               	movwf	_errno& (0+255),b
 17907  0024A6  0E00               	movlw	0
 17908  0024A8  0100               	movlb	0	; () banked
 17909  0024AA  6F92               	movwf	?_log& (0+255),b
 17910  0024AC  0E00               	movlw	0
 17911  0024AE  6F93               	movwf	(?_log+1)& (0+255),b
 17912  0024B0  0E00               	movlw	0
 17913  0024B2  6F94               	movwf	(?_log+2)& (0+255),b
 17914                           
 17915                           ; BSR set to: 0
 17916  0024B4  0012               	return	
 17917  0024B6                     l2467:
 17918                           
 17919                           ; BSR set to: 0
 17920                           
 17921                           ; BSR set to: 0
 17922  0024B6  5192               	movf	log@x& (0+255),w,b
 17923  0024B8  1193               	iorwf	(log@x+1)& (0+255),w,b
 17924  0024BA  1194               	iorwf	(log@x+2)& (0+255),w,b
 17925  0024BC  A4D8               	btfss	status,2,c
 17926  0024BE  D00D               	goto	l2469
 17927                           
 17928                           ; BSR set to: 0
 17929  0024C0  0E00               	movlw	0
 17930  0024C2  0101               	movlb	1	; () banked
 17931  0024C4  6FC5               	movwf	(_errno+1)& (0+255),b
 17932  0024C6  0E22               	movlw	34
 17933  0024C8  6FC4               	movwf	_errno& (0+255),b
 17934  0024CA  0E00               	movlw	0
 17935  0024CC  0100               	movlb	0	; () banked
 17936  0024CE  6F92               	movwf	?_log& (0+255),b
 17937  0024D0  0E00               	movlw	0
 17938  0024D2  6F93               	movwf	(?_log+1)& (0+255),b
 17939  0024D4  0E00               	movlw	0
 17940  0024D6  6F94               	movwf	(?_log+2)& (0+255),b
 17941                           
 17942                           ; BSR set to: 0
 17943  0024D8  0012               	return	
 17944  0024DA                     l2469:
 17945                           
 17946                           ; BSR set to: 0
 17947                           
 17948                           ; BSR set to: 0
 17949  0024DA  0E00               	movlw	0
 17950  0024DC  6F69               	movwf	___ftmul@f2& (0+255),b
 17951  0024DE  0E00               	movlw	0
 17952  0024E0  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 17953  0024E2  0E40               	movlw	64
 17954  0024E4  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 17955  0024E6  0E95               	movlw	low log@exponent
 17956  0024E8  6E1B               	movwf	frexp@eptr,c
 17957  0024EA  0E00               	movlw	high log@exponent
 17958  0024EC  6E1C               	movwf	frexp@eptr+1,c
 17959  0024EE  C092  F018         	movff	log@x,frexp@value
 17960  0024F2  C093  F019         	movff	log@x+1,frexp@value+1
 17961  0024F6  C094  F01A         	movff	log@x+2,frexp@value+2
 17962  0024FA  EC9F  F01B         	call	_frexp	;wreg free
 17963  0024FE  C018  F066         	movff	?_frexp,___ftmul@f1
 17964  002502  C019  F067         	movff	?_frexp+1,___ftmul@f1+1
 17965  002506  C01A  F068         	movff	?_frexp+2,___ftmul@f1+2
 17966  00250A  EC32  F016         	call	___ftmul	;wreg free
 17967  00250E  C066  F07C         	movff	?___ftmul,___ftadd@f1
 17968  002512  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 17969  002516  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 17970  00251A  0E00               	movlw	0
 17971  00251C  0100               	movlb	0	; () banked
 17972  00251E  6F7F               	movwf	___ftadd@f2& (0+255),b
 17973  002520  0E80               	movlw	128
 17974  002522  6F80               	movwf	(___ftadd@f2+1)& (0+255),b
 17975  002524  0EBF               	movlw	191
 17976  002526  6F81               	movwf	(___ftadd@f2+2)& (0+255),b
 17977  002528  EC75  F00C         	call	___ftadd	;wreg free
 17978  00252C  C07C  F092         	movff	?___ftadd,log@x
 17979  002530  C07D  F093         	movff	?___ftadd+1,log@x+1
 17980  002534  C07E  F094         	movff	?___ftadd+2,log@x+2
 17981  002538  0100               	movlb	0	; () banked
 17982  00253A  0795               	decf	log@exponent& (0+255),f,b
 17983  00253C  A0D8               	btfss	status,0,c
 17984  00253E  0796               	decf	(log@exponent+1)& (0+255),f,b
 17985                           
 17986                           ; BSR set to: 0
 17987  002540  C092  F088         	movff	log@x,eval_poly@x
 17988  002544  C093  F089         	movff	log@x+1,eval_poly@x+1
 17989  002548  C094  F08A         	movff	log@x+2,eval_poly@x+2
 17990  00254C  0E58               	movlw	low log@coeff
 17991  00254E  6F8B               	movwf	eval_poly@d& (0+255),b
 17992  002550  0E78               	movlw	high log@coeff
 17993  002552  6F8C               	movwf	(eval_poly@d+1)& (0+255),b
 17994  002554  0E00               	movlw	0
 17995  002556  6F8E               	movwf	(eval_poly@n+1)& (0+255),b
 17996  002558  0E08               	movlw	8
 17997  00255A  6F8D               	movwf	eval_poly@n& (0+255),b
 17998  00255C  EC77  F018         	call	_eval_poly	;wreg free
 17999  002560  C088  F092         	movff	?_eval_poly,log@x
 18000  002564  C089  F093         	movff	?_eval_poly+1,log@x+1
 18001  002568  C08A  F094         	movff	?_eval_poly+2,log@x+2
 18002  00256C  0E72               	movlw	114
 18003  00256E  0100               	movlb	0	; () banked
 18004  002570  6F69               	movwf	___ftmul@f2& (0+255),b
 18005  002572  0E31               	movlw	49
 18006  002574  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 18007  002576  0E3F               	movlw	63
 18008  002578  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 18009  00257A  C095  F020         	movff	log@exponent,___awtoft@c
 18010  00257E  C096  F021         	movff	log@exponent+1,___awtoft@c+1
 18011  002582  EC4B  F022         	call	___awtoft	;wreg free
 18012  002586  C020  F066         	movff	?___awtoft,___ftmul@f1
 18013  00258A  C021  F067         	movff	?___awtoft+1,___ftmul@f1+1
 18014  00258E  C022  F068         	movff	?___awtoft+2,___ftmul@f1+2
 18015  002592  EC32  F016         	call	___ftmul	;wreg free
 18016  002596  C066  F07C         	movff	?___ftmul,___ftadd@f1
 18017  00259A  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 18018  00259E  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 18019  0025A2  C092  F07F         	movff	log@x,___ftadd@f2
 18020  0025A6  C093  F080         	movff	log@x+1,___ftadd@f2+1
 18021  0025AA  C094  F081         	movff	log@x+2,___ftadd@f2+2
 18022  0025AE  EC75  F00C         	call	___ftadd	;wreg free
 18023  0025B2  C07C  F092         	movff	?___ftadd,?_log
 18024  0025B6  C07D  F093         	movff	?___ftadd+1,?_log+1
 18025  0025BA  C07E  F094         	movff	?___ftadd+2,?_log+2
 18026  0025BE  0012               	return	
 18027  0025C0                     __end_of_log:
 18028                           	opt stack 0
 18029                           tosu	equ	0xFFF
 18030                           tosh	equ	0xFFE
 18031                           tosl	equ	0xFFD
 18032                           pclath	equ	0xFFA
 18033                           tblptru	equ	0xFF8
 18034                           tblptrh	equ	0xFF7
 18035                           tblptrl	equ	0xFF6
 18036                           tablat	equ	0xFF5
 18037                           prodh	equ	0xFF4
 18038                           prodl	equ	0xFF3
 18039                           intcon	equ	0xFF2
 18040                           intcon2	equ	0xFF1
 18041                           indf0	equ	0xFEF
 18042                           postinc0	equ	0xFEE
 18043                           fsr0h	equ	0xFEA
 18044                           fsr0l	equ	0xFE9
 18045                           wreg	equ	0xFE8
 18046                           indf1	equ	0xFE7
 18047                           postdec1	equ	0xFE5
 18048                           fsr1h	equ	0xFE2
 18049                           fsr1l	equ	0xFE1
 18050                           indf2	equ	0xFDF
 18051                           postinc2	equ	0xFDE
 18052                           postdec2	equ	0xFDD
 18053                           fsr2h	equ	0xFDA
 18054                           fsr2l	equ	0xFD9
 18055                           status	equ	0xFD8
 18056                           
 18057 ;; *************** function _exp *****************
 18058 ;; Defined at:
 18059 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 18060 ;; Parameters:    Size  Location     Type
 18061 ;;  x               3   57[BANK0 ] int 
 18062 ;; Auto vars:     Size  Location     Type
 18063 ;;  exponent        2   63[BANK0 ] int 
 18064 ;;  sign            1   65[BANK0 ] unsigned char 
 18065 ;; Return value:  Size  Location     Type
 18066 ;;                  3   57[BANK0 ] unsigned char 
 18067 ;; Registers used:
 18068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18069 ;; Tracked objects:
 18070 ;;		On entry : 0/0
 18071 ;;		On exit  : 0/0
 18072 ;;		Unchanged: 0/0
 18073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18074 ;;      Params:         0       3       0       0       0       0       0
 18075 ;;      Locals:         0       6       0       0       0       0       0
 18076 ;;      Temps:          0       0       0       0       0       0       0
 18077 ;;      Totals:         0       9       0       0       0       0       0
 18078 ;;Total ram usage:        9 bytes
 18079 ;; Hardware stack levels used:    1
 18080 ;; Hardware stack levels required when called:    6
 18081 ;; This function calls:
 18082 ;;		___awtoft
 18083 ;;		___ftdiv
 18084 ;;		___ftge
 18085 ;;		___ftmul
 18086 ;;		___ftneg
 18087 ;;		___ftsub
 18088 ;;		___fttol
 18089 ;;		_eval_poly
 18090 ;;		_floor
 18091 ;;		_ldexp
 18092 ;; This function is called by:
 18093 ;;		_pow
 18094 ;; This function uses a non-reentrant model
 18095 ;;
 18096                           
 18097                           	psect	text77
 18098  00151E                     __ptext77:
 18099                           	opt stack 0
 18100  00151E                     _exp:
 18101                           	opt stack 21
 18102                           
 18103                           ;incstack = 0
 18104  00151E  0100               	movlb	0	; () banked
 18105  001520  5199               	movf	exp@x& (0+255),w,b
 18106  001522  119A               	iorwf	(exp@x+1)& (0+255),w,b
 18107  001524  119B               	iorwf	(exp@x+2)& (0+255),w,b
 18108  001526  A4D8               	btfss	status,2,c
 18109  001528  D007               	goto	l2403
 18110                           
 18111                           ; BSR set to: 0
 18112  00152A  0E00               	movlw	0
 18113  00152C  6F99               	movwf	?_exp& (0+255),b
 18114  00152E  0E80               	movlw	128
 18115  001530  6F9A               	movwf	(?_exp+1)& (0+255),b
 18116  001532  0E3F               	movlw	63
 18117  001534  6F9B               	movwf	(?_exp+2)& (0+255),b
 18118                           
 18119                           ; BSR set to: 0
 18120  001536  0012               	return	
 18121  001538                     l2403:
 18122                           
 18123                           ; BSR set to: 0
 18124                           
 18125                           ; BSR set to: 0
 18126  001538  0E72               	movlw	114
 18127  00153A  6E18               	movwf	___ftge@ff1,c
 18128  00153C  0E31               	movlw	49
 18129  00153E  6E19               	movwf	___ftge@ff1+1,c
 18130  001540  0E44               	movlw	68
 18131  001542  6E1A               	movwf	___ftge@ff1+2,c
 18132  001544  C099  F01B         	movff	exp@x,___ftge@ff2
 18133  001548  C09A  F01C         	movff	exp@x+1,___ftge@ff2+1
 18134  00154C  C09B  F01D         	movff	exp@x+2,___ftge@ff2+2
 18135  001550  ECE7  F01B         	call	___ftge	;wreg free
 18136  001554  B0D8               	btfsc	status,0,c
 18137  001556  D00D               	goto	l2405
 18138  001558  0E00               	movlw	0
 18139  00155A  0101               	movlb	1	; () banked
 18140  00155C  6FC5               	movwf	(_errno+1)& (0+255),b
 18141  00155E  0E22               	movlw	34
 18142  001560  6FC4               	movwf	_errno& (0+255),b
 18143  001562  0EFF               	movlw	255
 18144  001564  0100               	movlb	0	; () banked
 18145  001566  6F99               	movwf	?_exp& (0+255),b
 18146  001568  0E7F               	movlw	127
 18147  00156A  6F9A               	movwf	(?_exp+1)& (0+255),b
 18148  00156C  0E7F               	movlw	127
 18149  00156E  6F9B               	movwf	(?_exp+2)& (0+255),b
 18150                           
 18151                           ; BSR set to: 0
 18152  001570  0012               	return	
 18153  001572                     l2405:
 18154                           
 18155                           ; BSR set to: 0
 18156  001572  C099  F018         	movff	exp@x,___ftge@ff1
 18157  001576  C09A  F019         	movff	exp@x+1,___ftge@ff1+1
 18158  00157A  C09B  F01A         	movff	exp@x+2,___ftge@ff1+2
 18159  00157E  0E49               	movlw	73
 18160  001580  6E1B               	movwf	___ftge@ff2,c
 18161  001582  0E3A               	movlw	58
 18162  001584  6E1C               	movwf	___ftge@ff2+1,c
 18163  001586  0EC4               	movlw	196
 18164  001588  6E1D               	movwf	___ftge@ff2+2,c
 18165  00158A  ECE7  F01B         	call	___ftge	;wreg free
 18166  00158E  B0D8               	btfsc	status,0,c
 18167  001590  D00D               	goto	l2406
 18168  001592  0E00               	movlw	0
 18169  001594  0101               	movlb	1	; () banked
 18170  001596  6FC5               	movwf	(_errno+1)& (0+255),b
 18171  001598  0E22               	movlw	34
 18172  00159A  6FC4               	movwf	_errno& (0+255),b
 18173  00159C  0E00               	movlw	0
 18174  00159E  0100               	movlb	0	; () banked
 18175  0015A0  6F99               	movwf	?_exp& (0+255),b
 18176  0015A2  0E00               	movlw	0
 18177  0015A4  6F9A               	movwf	(?_exp+1)& (0+255),b
 18178  0015A6  0E00               	movlw	0
 18179  0015A8  6F9B               	movwf	(?_exp+2)& (0+255),b
 18180                           
 18181                           ; BSR set to: 0
 18182  0015AA  0012               	return	
 18183  0015AC                     l2406:
 18184                           
 18185                           ; BSR set to: 0
 18186  0015AC  0100               	movlb	0	; () banked
 18187  0015AE  AF9B               	btfss	(exp@x+2)& (0+255),7,b
 18188  0015B0  D002               	goto	u8610
 18189  0015B2  0E01               	movlw	1
 18190  0015B4  D001               	goto	u8620
 18191  0015B6                     u8610:
 18192  0015B6  0E00               	movlw	0
 18193  0015B8                     u8620:
 18194  0015B8  6FA1               	movwf	exp@sign& (0+255),b
 18195                           
 18196                           ; BSR set to: 0
 18197  0015BA  51A1               	movf	exp@sign& (0+255),w,b
 18198  0015BC  B4D8               	btfsc	status,2,c
 18199  0015BE  D00E               	goto	l2407
 18200                           
 18201                           ; BSR set to: 0
 18202  0015C0  C099  F018         	movff	exp@x,___ftneg@f1
 18203  0015C4  C09A  F019         	movff	exp@x+1,___ftneg@f1+1
 18204  0015C8  C09B  F01A         	movff	exp@x+2,___ftneg@f1+2
 18205  0015CC  EC66  F023         	call	___ftneg	;wreg free
 18206  0015D0  C018  F099         	movff	?___ftneg,exp@x
 18207  0015D4  C019  F09A         	movff	?___ftneg+1,exp@x+1
 18208  0015D8  C01A  F09B         	movff	?___ftneg+2,exp@x+2
 18209  0015DC                     l2407:
 18210  0015DC  C099  F066         	movff	exp@x,___ftmul@f1
 18211  0015E0  C09A  F067         	movff	exp@x+1,___ftmul@f1+1
 18212  0015E4  C09B  F068         	movff	exp@x+2,___ftmul@f1+2
 18213  0015E8  0EAA               	movlw	170
 18214  0015EA  0100               	movlb	0	; () banked
 18215  0015EC  6F69               	movwf	___ftmul@f2& (0+255),b
 18216  0015EE  0EB8               	movlw	184
 18217  0015F0  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 18218  0015F2  0E3F               	movlw	63
 18219  0015F4  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 18220  0015F6  EC32  F016         	call	___ftmul	;wreg free
 18221  0015FA  C066  F099         	movff	?___ftmul,exp@x
 18222  0015FE  C067  F09A         	movff	?___ftmul+1,exp@x+1
 18223  001602  C068  F09B         	movff	?___ftmul+2,exp@x+2
 18224  001606  C099  F090         	movff	exp@x,floor@x
 18225  00160A  C09A  F091         	movff	exp@x+1,floor@x+1
 18226  00160E  C09B  F092         	movff	exp@x+2,floor@x+2
 18227  001612  EC06  F018         	call	_floor	;wreg free
 18228  001616  C090  F09C         	movff	?_floor,_exp$3982
 18229  00161A  C091  F09D         	movff	?_floor+1,_exp$3982+1
 18230  00161E  C092  F09E         	movff	?_floor+2,_exp$3982+2
 18231  001622  C09C  F079         	movff	_exp$3982,___fttol@f1
 18232  001626  C09D  F07A         	movff	_exp$3982+1,___fttol@f1+1
 18233  00162A  C09E  F07B         	movff	_exp$3982+2,___fttol@f1+2
 18234  00162E  ECB6  F015         	call	___fttol	;wreg free
 18235  001632  C079  F09F         	movff	?___fttol,exp@exponent
 18236  001636  C07A  F0A0         	movff	?___fttol+1,exp@exponent+1
 18237  00163A  C099  F088         	movff	exp@x,___ftsub@f1
 18238  00163E  C09A  F089         	movff	exp@x+1,___ftsub@f1+1
 18239  001642  C09B  F08A         	movff	exp@x+2,___ftsub@f1+2
 18240  001646  C09F  F020         	movff	exp@exponent,___awtoft@c
 18241  00164A  C0A0  F021         	movff	exp@exponent+1,___awtoft@c+1
 18242  00164E  EC4B  F022         	call	___awtoft	;wreg free
 18243  001652  C020  F08B         	movff	?___awtoft,___ftsub@f2
 18244  001656  C021  F08C         	movff	?___awtoft+1,___ftsub@f2+1
 18245  00165A  C022  F08D         	movff	?___awtoft+2,___ftsub@f2+2
 18246  00165E  EC93  F021         	call	___ftsub	;wreg free
 18247  001662  C088  F099         	movff	?___ftsub,exp@x
 18248  001666  C089  F09A         	movff	?___ftsub+1,exp@x+1
 18249  00166A  C08A  F09B         	movff	?___ftsub+2,exp@x+2
 18250  00166E  C099  F088         	movff	exp@x,eval_poly@x
 18251  001672  C09A  F089         	movff	exp@x+1,eval_poly@x+1
 18252  001676  C09B  F08A         	movff	exp@x+2,eval_poly@x+2
 18253  00167A  0E3A               	movlw	low exp@coeff
 18254  00167C  0100               	movlb	0	; () banked
 18255  00167E  6F8B               	movwf	eval_poly@d& (0+255),b
 18256  001680  0E78               	movlw	high exp@coeff
 18257  001682  6F8C               	movwf	(eval_poly@d+1)& (0+255),b
 18258  001684  0E00               	movlw	0
 18259  001686  6F8E               	movwf	(eval_poly@n+1)& (0+255),b
 18260  001688  0E09               	movlw	9
 18261  00168A  6F8D               	movwf	eval_poly@n& (0+255),b
 18262  00168C  EC77  F018         	call	_eval_poly	;wreg free
 18263  001690  C088  F092         	movff	?_eval_poly,ldexp@value
 18264  001694  C089  F093         	movff	?_eval_poly+1,ldexp@value+1
 18265  001698  C08A  F094         	movff	?_eval_poly+2,ldexp@value+2
 18266  00169C  C09F  F095         	movff	exp@exponent,ldexp@newexp
 18267  0016A0  C0A0  F096         	movff	exp@exponent+1,ldexp@newexp+1
 18268  0016A4  ECE2  F018         	call	_ldexp	;wreg free
 18269  0016A8  C092  F099         	movff	?_ldexp,exp@x
 18270  0016AC  C093  F09A         	movff	?_ldexp+1,exp@x+1
 18271  0016B0  C094  F09B         	movff	?_ldexp+2,exp@x+2
 18272  0016B4  0100               	movlb	0	; () banked
 18273  0016B6  51A1               	movf	exp@sign& (0+255),w,b
 18274  0016B8  B4D8               	btfsc	status,2,c
 18275  0016BA  D025               	goto	l2408
 18276                           
 18277                           ; BSR set to: 0
 18278  0016BC  2999               	incf	exp@x& (0+255),w,b
 18279  0016BE  E10E               	bnz	l8688
 18280  0016C0  0E7F               	movlw	127
 18281  0016C2  199A               	xorwf	(exp@x+1)& (0+255),w,b
 18282  0016C4  E10B               	bnz	l8688
 18283  0016C6  0E7F               	movlw	127
 18284  0016C8  199B               	xorwf	(exp@x+2)& (0+255),w,b
 18285  0016CA  A4D8               	btfss	status,2,c
 18286  0016CC  D007               	goto	l2409
 18287                           
 18288                           ; BSR set to: 0
 18289  0016CE  0E00               	movlw	0
 18290  0016D0  6F99               	movwf	?_exp& (0+255),b
 18291  0016D2  0E00               	movlw	0
 18292  0016D4  6F9A               	movwf	(?_exp+1)& (0+255),b
 18293  0016D6  0E00               	movlw	0
 18294  0016D8  6F9B               	movwf	(?_exp+2)& (0+255),b
 18295                           
 18296                           ; BSR set to: 0
 18297  0016DA  0012               	return	
 18298  0016DC                     l2409:
 18299  0016DC                     l8688:
 18300                           
 18301                           ; BSR set to: 0
 18302  0016DC  0E00               	movlw	0
 18303  0016DE  6E23               	movwf	___ftdiv@f1,c
 18304  0016E0  0E80               	movlw	128
 18305  0016E2  6E24               	movwf	___ftdiv@f1+1,c
 18306  0016E4  0E3F               	movlw	63
 18307  0016E6  6E25               	movwf	___ftdiv@f1+2,c
 18308  0016E8  C099  F026         	movff	exp@x,___ftdiv@f2
 18309  0016EC  C09A  F027         	movff	exp@x+1,___ftdiv@f2+1
 18310  0016F0  C09B  F028         	movff	exp@x+2,___ftdiv@f2+2
 18311  0016F4  ECAD  F016         	call	___ftdiv	;wreg free
 18312  0016F8  C023  F099         	movff	?___ftdiv,?_exp
 18313  0016FC  C024  F09A         	movff	?___ftdiv+1,?_exp+1
 18314  001700  C025  F09B         	movff	?___ftdiv+2,?_exp+2
 18315  001704  0012               	return	
 18316  001706                     l2408:
 18317                           
 18318                           ; BSR set to: 0
 18319  001706  C099  F099         	movff	exp@x,?_exp
 18320  00170A  C09A  F09A         	movff	exp@x+1,?_exp+1
 18321  00170E  C09B  F09B         	movff	exp@x+2,?_exp+2
 18322  001712  0012               	return		;funcret
 18323  001714                     __end_of_exp:
 18324                           	opt stack 0
 18325                           tosu	equ	0xFFF
 18326                           tosh	equ	0xFFE
 18327                           tosl	equ	0xFFD
 18328                           pclath	equ	0xFFA
 18329                           tblptru	equ	0xFF8
 18330                           tblptrh	equ	0xFF7
 18331                           tblptrl	equ	0xFF6
 18332                           tablat	equ	0xFF5
 18333                           prodh	equ	0xFF4
 18334                           prodl	equ	0xFF3
 18335                           intcon	equ	0xFF2
 18336                           intcon2	equ	0xFF1
 18337                           indf0	equ	0xFEF
 18338                           postinc0	equ	0xFEE
 18339                           fsr0h	equ	0xFEA
 18340                           fsr0l	equ	0xFE9
 18341                           wreg	equ	0xFE8
 18342                           indf1	equ	0xFE7
 18343                           postdec1	equ	0xFE5
 18344                           fsr1h	equ	0xFE2
 18345                           fsr1l	equ	0xFE1
 18346                           indf2	equ	0xFDF
 18347                           postinc2	equ	0xFDE
 18348                           postdec2	equ	0xFDD
 18349                           fsr2h	equ	0xFDA
 18350                           fsr2l	equ	0xFD9
 18351                           status	equ	0xFD8
 18352                           
 18353 ;; *************** function _ldexp *****************
 18354 ;; Defined at:
 18355 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 18356 ;; Parameters:    Size  Location     Type
 18357 ;;  value           3   50[BANK0 ] unsigned char 
 18358 ;;  newexp          2   53[BANK0 ] int 
 18359 ;; Auto vars:     Size  Location     Type
 18360 ;;		None
 18361 ;; Return value:  Size  Location     Type
 18362 ;;                  3   50[BANK0 ] int 
 18363 ;; Registers used:
 18364 ;;		wreg, status,2, status,0
 18365 ;; Tracked objects:
 18366 ;;		On entry : 0/0
 18367 ;;		On exit  : 0/0
 18368 ;;		Unchanged: 0/0
 18369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18370 ;;      Params:         0       5       0       0       0       0       0
 18371 ;;      Locals:         0       0       0       0       0       0       0
 18372 ;;      Temps:          0       2       0       0       0       0       0
 18373 ;;      Totals:         0       7       0       0       0       0       0
 18374 ;;Total ram usage:        7 bytes
 18375 ;; Hardware stack levels used:    1
 18376 ;; Hardware stack levels required when called:    3
 18377 ;; This function calls:
 18378 ;;		Nothing
 18379 ;; This function is called by:
 18380 ;;		_exp
 18381 ;; This function uses a non-reentrant model
 18382 ;;
 18383                           
 18384                           	psect	text78
 18385  0031C4                     __ptext78:
 18386                           	opt stack 0
 18387  0031C4                     _ldexp:
 18388                           	opt stack 23
 18389                           
 18390                           ;incstack = 0
 18391  0031C4  0100               	movlb	0	; () banked
 18392  0031C6  5192               	movf	ldexp@value& (0+255),w,b
 18393  0031C8  1193               	iorwf	(ldexp@value+1)& (0+255),w,b
 18394  0031CA  1194               	iorwf	(ldexp@value+2)& (0+255),w,b
 18395  0031CC  A4D8               	btfss	status,2,c
 18396  0031CE  D007               	goto	l2427
 18397                           
 18398                           ; BSR set to: 0
 18399  0031D0  0E00               	movlw	0
 18400  0031D2  6F92               	movwf	?_ldexp& (0+255),b
 18401  0031D4  0E00               	movlw	0
 18402  0031D6  6F93               	movwf	(?_ldexp+1)& (0+255),b
 18403  0031D8  0E00               	movlw	0
 18404  0031DA  6F94               	movwf	(?_ldexp+2)& (0+255),b
 18405                           
 18406                           ; BSR set to: 0
 18407  0031DC  0012               	return	
 18408  0031DE                     l2427:
 18409                           
 18410                           ; BSR set to: 0
 18411                           
 18412                           ; BSR set to: 0
 18413  0031DE  5194               	movf	(ldexp@value+2)& (0+255),w,b
 18414  0031E0  0B7F               	andlw	127
 18415  0031E2  6F97               	movwf	??_ldexp& (0+255),b
 18416  0031E4  6B98               	clrf	(??_ldexp+1)& (0+255),b
 18417  0031E6  90D8               	bcf	status,0,c
 18418  0031E8  3797               	rlcf	??_ldexp& (0+255),f,b
 18419  0031EA  3798               	rlcf	(??_ldexp+1)& (0+255),f,b
 18420  0031EC  5197               	movf	??_ldexp& (0+255),w,b
 18421  0031EE  2795               	addwf	ldexp@newexp& (0+255),f,b
 18422  0031F0  5198               	movf	(??_ldexp+1)& (0+255),w,b
 18423  0031F2  2396               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 18424  0031F4  AF93               	btfss	(ldexp@value+1)& (0+255),7,b
 18425  0031F6  D003               	goto	u7890
 18426  0031F8  6B97               	clrf	??_ldexp& (0+255),b
 18427  0031FA  2B97               	incf	??_ldexp& (0+255),f,b
 18428  0031FC  D002               	goto	u7898
 18429  0031FE                     u7890:
 18430  0031FE  0100               	movlb	0	; () banked
 18431  003200  6B97               	clrf	??_ldexp& (0+255),b
 18432  003202                     u7898:
 18433  003202  5197               	movf	??_ldexp& (0+255),w,b
 18434  003204  2795               	addwf	ldexp@newexp& (0+255),f,b
 18435  003206  0E00               	movlw	0
 18436  003208  2396               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 18437  00320A  AF96               	btfss	(ldexp@newexp+1)& (0+255),7,b
 18438  00320C  D00D               	goto	l2429
 18439                           
 18440                           ; BSR set to: 0
 18441  00320E  0E00               	movlw	0
 18442  003210  0101               	movlb	1	; () banked
 18443  003212  6FC5               	movwf	(_errno+1)& (0+255),b
 18444  003214  0E22               	movlw	34
 18445  003216  6FC4               	movwf	_errno& (0+255),b
 18446  003218  0E00               	movlw	0
 18447  00321A  0100               	movlb	0	; () banked
 18448  00321C  6F92               	movwf	?_ldexp& (0+255),b
 18449  00321E  0E00               	movlw	0
 18450  003220  6F93               	movwf	(?_ldexp+1)& (0+255),b
 18451  003222  0E00               	movlw	0
 18452  003224                     L3:
 18453  003224  6F94               	movwf	(?_ldexp+2)& (0+255),b
 18454                           
 18455                           ; BSR set to: 0
 18456  003226  0012               	return	
 18457  003228                     l2429:
 18458                           
 18459                           ; BSR set to: 0
 18460                           
 18461                           ; BSR set to: 0
 18462  003228  BF96               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 18463  00322A  D017               	goto	l2431
 18464  00322C  0596               	decf	(ldexp@newexp+1)& (0+255),w,b
 18465  00322E  A0D8               	btfss	status,0,c
 18466  003230  D014               	goto	l2431
 18467                           
 18468                           ; BSR set to: 0
 18469  003232  0E00               	movlw	0
 18470  003234  0101               	movlb	1	; () banked
 18471  003236  6FC5               	movwf	(_errno+1)& (0+255),b
 18472  003238  0E22               	movlw	34
 18473  00323A  6FC4               	movwf	_errno& (0+255),b
 18474                           
 18475                           ; BSR set to: 1
 18476  00323C  0100               	movlb	0	; () banked
 18477  00323E  AF94               	btfss	(ldexp@value+2)& (0+255),7,b
 18478  003240  D006               	goto	l2432
 18479                           
 18480                           ; BSR set to: 0
 18481  003242  0EFF               	movlw	255
 18482  003244  6F92               	movwf	?_ldexp& (0+255),b
 18483  003246  0E7F               	movlw	127
 18484  003248  6F93               	movwf	(?_ldexp+1)& (0+255),b
 18485  00324A  0EFF               	movlw	255
 18486  00324C  D7EB               	goto	L3
 18487  00324E                     l2432:
 18488                           
 18489                           ; BSR set to: 0
 18490                           
 18491                           ; BSR set to: 0
 18492  00324E  0EFF               	movlw	255
 18493  003250  6F92               	movwf	?_ldexp& (0+255),b
 18494  003252  0E7F               	movlw	127
 18495  003254  6F93               	movwf	(?_ldexp+1)& (0+255),b
 18496  003256  0E7F               	movlw	127
 18497  003258  D7E5               	goto	L3
 18498  00325A                     l2431:
 18499                           
 18500                           ; BSR set to: 0
 18501                           
 18502                           ; BSR set to: 0
 18503  00325A  3596               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 18504  00325C  3196               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 18505  00325E  6F98               	movwf	(??_ldexp+1)& (0+255),b
 18506  003260  3195               	rrcf	ldexp@newexp& (0+255),w,b
 18507  003262  6F97               	movwf	??_ldexp& (0+255),b
 18508  003264  5194               	movf	(ldexp@value+2)& (0+255),w,b
 18509  003266  1997               	xorwf	??_ldexp& (0+255),w,b
 18510  003268  0B80               	andlw	-128
 18511  00326A  1997               	xorwf	??_ldexp& (0+255),w,b
 18512  00326C  6F94               	movwf	(ldexp@value+2)& (0+255),b
 18513  00326E  C095  F097         	movff	ldexp@newexp,??_ldexp
 18514  003272  0E01               	movlw	1
 18515  003274  1797               	andwf	??_ldexp& (0+255),f,b
 18516  003276  3397               	rrcf	??_ldexp& (0+255),f,b
 18517  003278  3397               	rrcf	??_ldexp& (0+255),f,b
 18518  00327A  5193               	movf	(ldexp@value+1)& (0+255),w,b
 18519  00327C  1997               	xorwf	??_ldexp& (0+255),w,b
 18520  00327E  0B7F               	andlw	-129
 18521  003280  1997               	xorwf	??_ldexp& (0+255),w,b
 18522  003282  6F93               	movwf	(ldexp@value+1)& (0+255),b
 18523                           
 18524                           ; BSR set to: 0
 18525                           
 18526                           ; BSR set to: 0
 18527                           
 18528                           ; BSR set to: 0
 18529  003284  C092  F092         	movff	ldexp@value,?_ldexp
 18530  003288  C093  F093         	movff	ldexp@value+1,?_ldexp+1
 18531  00328C  C094  F094         	movff	ldexp@value+2,?_ldexp+2
 18532  003290  0012               	return	
 18533  003292                     __end_of_ldexp:
 18534                           	opt stack 0
 18535                           tosu	equ	0xFFF
 18536                           tosh	equ	0xFFE
 18537                           tosl	equ	0xFFD
 18538                           pclath	equ	0xFFA
 18539                           tblptru	equ	0xFF8
 18540                           tblptrh	equ	0xFF7
 18541                           tblptrl	equ	0xFF6
 18542                           tablat	equ	0xFF5
 18543                           prodh	equ	0xFF4
 18544                           prodl	equ	0xFF3
 18545                           intcon	equ	0xFF2
 18546                           intcon2	equ	0xFF1
 18547                           indf0	equ	0xFEF
 18548                           postinc0	equ	0xFEE
 18549                           fsr0h	equ	0xFEA
 18550                           fsr0l	equ	0xFE9
 18551                           wreg	equ	0xFE8
 18552                           indf1	equ	0xFE7
 18553                           postdec1	equ	0xFE5
 18554                           fsr1h	equ	0xFE2
 18555                           fsr1l	equ	0xFE1
 18556                           indf2	equ	0xFDF
 18557                           postinc2	equ	0xFDE
 18558                           postdec2	equ	0xFDD
 18559                           fsr2h	equ	0xFDA
 18560                           fsr2l	equ	0xFD9
 18561                           status	equ	0xFD8
 18562                           
 18563 ;; *************** function _floor *****************
 18564 ;; Defined at:
 18565 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 18566 ;; Parameters:    Size  Location     Type
 18567 ;;  x               3   48[BANK0 ] int 
 18568 ;; Auto vars:     Size  Location     Type
 18569 ;;  i               3   51[BANK0 ] int 
 18570 ;;  expon           2   54[BANK0 ] int 
 18571 ;; Return value:  Size  Location     Type
 18572 ;;                  3   48[BANK0 ] int 
 18573 ;; Registers used:
 18574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18575 ;; Tracked objects:
 18576 ;;		On entry : 0/0
 18577 ;;		On exit  : 0/0
 18578 ;;		Unchanged: 0/0
 18579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18580 ;;      Params:         0       3       0       0       0       0       0
 18581 ;;      Locals:         0       5       0       0       0       0       0
 18582 ;;      Temps:          0       0       0       0       0       0       0
 18583 ;;      Totals:         0       8       0       0       0       0       0
 18584 ;;Total ram usage:        8 bytes
 18585 ;; Hardware stack levels used:    1
 18586 ;; Hardware stack levels required when called:    5
 18587 ;; This function calls:
 18588 ;;		___altoft
 18589 ;;		___ftadd
 18590 ;;		___ftge
 18591 ;;		___fttol
 18592 ;;		_frexp
 18593 ;; This function is called by:
 18594 ;;		_exp
 18595 ;; This function uses a non-reentrant model
 18596 ;;
 18597                           
 18598                           	psect	text79
 18599  00300C                     __ptext79:
 18600                           	opt stack 0
 18601  00300C                     _floor:
 18602                           	opt stack 21
 18603                           
 18604                           ; BSR set to: 0
 18605                           ;incstack = 0
 18606  00300C  C090  F018         	movff	floor@x,frexp@value
 18607  003010  C091  F019         	movff	floor@x+1,frexp@value+1
 18608  003014  C092  F01A         	movff	floor@x+2,frexp@value+2
 18609  003018  0E96               	movlw	low floor@expon
 18610  00301A  6E1B               	movwf	frexp@eptr,c
 18611  00301C  0E00               	movlw	high floor@expon
 18612  00301E  6E1C               	movwf	frexp@eptr+1,c
 18613  003020  EC9F  F01B         	call	_frexp	;wreg free
 18614  003024  0100               	movlb	0	; () banked
 18615  003026  AF97               	btfss	(floor@expon+1)& (0+255),7,b
 18616  003028  D010               	goto	l2414
 18617                           
 18618                           ; BSR set to: 0
 18619  00302A  AF92               	btfss	(floor@x+2)& (0+255),7,b
 18620  00302C  D007               	goto	l2415
 18621                           
 18622                           ; BSR set to: 0
 18623  00302E  0E00               	movlw	0
 18624  003030  6F90               	movwf	?_floor& (0+255),b
 18625  003032  0E80               	movlw	128
 18626  003034  6F91               	movwf	(?_floor+1)& (0+255),b
 18627  003036  0EBF               	movlw	191
 18628  003038  6F92               	movwf	(?_floor+2)& (0+255),b
 18629                           
 18630                           ; BSR set to: 0
 18631  00303A  0012               	return	
 18632  00303C                     l2415:
 18633                           
 18634                           ; BSR set to: 0
 18635                           
 18636                           ; BSR set to: 0
 18637  00303C  0E00               	movlw	0
 18638  00303E  6F90               	movwf	?_floor& (0+255),b
 18639  003040  0E00               	movlw	0
 18640  003042  6F91               	movwf	(?_floor+1)& (0+255),b
 18641  003044  0E00               	movlw	0
 18642  003046  6F92               	movwf	(?_floor+2)& (0+255),b
 18643                           
 18644                           ; BSR set to: 0
 18645  003048  0012               	return	
 18646  00304A                     l2414:
 18647                           
 18648                           ; BSR set to: 0
 18649                           
 18650                           ; BSR set to: 0
 18651  00304A  5197               	movf	(floor@expon+1)& (0+255),w,b
 18652  00304C  E104               	bnz	u7850
 18653  00304E  0E15               	movlw	21
 18654  003050  5D96               	subwf	floor@expon& (0+255),w,b
 18655  003052  A0D8               	btfss	status,0,c
 18656  003054  D007               	goto	l2417
 18657  003056                     u7850:
 18658                           
 18659                           ; BSR set to: 0
 18660  003056  C090  F090         	movff	floor@x,?_floor
 18661  00305A  C091  F091         	movff	floor@x+1,?_floor+1
 18662  00305E  C092  F092         	movff	floor@x+2,?_floor+2
 18663  003062  0012               	return	
 18664  003064                     l2417:
 18665                           
 18666                           ; BSR set to: 0
 18667                           
 18668                           ; BSR set to: 0
 18669  003064  C090  F079         	movff	floor@x,___fttol@f1
 18670  003068  C091  F07A         	movff	floor@x+1,___fttol@f1+1
 18671  00306C  C092  F07B         	movff	floor@x+2,___fttol@f1+2
 18672  003070  ECB6  F015         	call	___fttol	;wreg free
 18673  003074  C079  F088         	movff	?___fttol,___altoft@c
 18674  003078  C07A  F089         	movff	?___fttol+1,___altoft@c+1
 18675  00307C  C07B  F08A         	movff	?___fttol+2,___altoft@c+2
 18676  003080  C07C  F08B         	movff	?___fttol+3,___altoft@c+3
 18677  003084  EC35  F01D         	call	___altoft	;wreg free
 18678  003088  C088  F093         	movff	?___altoft,floor@i
 18679  00308C  C089  F094         	movff	?___altoft+1,floor@i+1
 18680  003090  C08A  F095         	movff	?___altoft+2,floor@i+2
 18681  003094  C090  F018         	movff	floor@x,___ftge@ff1
 18682  003098  C091  F019         	movff	floor@x+1,___ftge@ff1+1
 18683  00309C  C092  F01A         	movff	floor@x+2,___ftge@ff1+2
 18684  0030A0  C093  F01B         	movff	floor@i,___ftge@ff2
 18685  0030A4  C094  F01C         	movff	floor@i+1,___ftge@ff2+1
 18686  0030A8  C095  F01D         	movff	floor@i+2,___ftge@ff2+2
 18687  0030AC  ECE7  F01B         	call	___ftge	;wreg free
 18688  0030B0  B0D8               	btfsc	status,0,c
 18689  0030B2  D016               	goto	l2418
 18690  0030B4  C093  F07C         	movff	floor@i,___ftadd@f1
 18691  0030B8  C094  F07D         	movff	floor@i+1,___ftadd@f1+1
 18692  0030BC  C095  F07E         	movff	floor@i+2,___ftadd@f1+2
 18693  0030C0  0E00               	movlw	0
 18694  0030C2  0100               	movlb	0	; () banked
 18695  0030C4  6F7F               	movwf	___ftadd@f2& (0+255),b
 18696  0030C6  0E80               	movlw	128
 18697  0030C8  6F80               	movwf	(___ftadd@f2+1)& (0+255),b
 18698  0030CA  0EBF               	movlw	191
 18699  0030CC  6F81               	movwf	(___ftadd@f2+2)& (0+255),b
 18700  0030CE  EC75  F00C         	call	___ftadd	;wreg free
 18701  0030D2  C07C  F090         	movff	?___ftadd,?_floor
 18702  0030D6  C07D  F091         	movff	?___ftadd+1,?_floor+1
 18703  0030DA  C07E  F092         	movff	?___ftadd+2,?_floor+2
 18704  0030DE  0012               	return	
 18705  0030E0                     l2418:
 18706  0030E0  C093  F090         	movff	floor@i,?_floor
 18707  0030E4  C094  F091         	movff	floor@i+1,?_floor+1
 18708  0030E8  C095  F092         	movff	floor@i+2,?_floor+2
 18709  0030EC  0012               	return		;funcret
 18710  0030EE                     __end_of_floor:
 18711                           	opt stack 0
 18712                           tosu	equ	0xFFF
 18713                           tosh	equ	0xFFE
 18714                           tosl	equ	0xFFD
 18715                           pclath	equ	0xFFA
 18716                           tblptru	equ	0xFF8
 18717                           tblptrh	equ	0xFF7
 18718                           tblptrl	equ	0xFF6
 18719                           tablat	equ	0xFF5
 18720                           prodh	equ	0xFF4
 18721                           prodl	equ	0xFF3
 18722                           intcon	equ	0xFF2
 18723                           intcon2	equ	0xFF1
 18724                           indf0	equ	0xFEF
 18725                           postinc0	equ	0xFEE
 18726                           fsr0h	equ	0xFEA
 18727                           fsr0l	equ	0xFE9
 18728                           wreg	equ	0xFE8
 18729                           indf1	equ	0xFE7
 18730                           postdec1	equ	0xFE5
 18731                           fsr1h	equ	0xFE2
 18732                           fsr1l	equ	0xFE1
 18733                           indf2	equ	0xFDF
 18734                           postinc2	equ	0xFDE
 18735                           postdec2	equ	0xFDD
 18736                           fsr2h	equ	0xFDA
 18737                           fsr2l	equ	0xFD9
 18738                           status	equ	0xFD8
 18739                           
 18740 ;; *************** function _frexp *****************
 18741 ;; Defined at:
 18742 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 18743 ;; Parameters:    Size  Location     Type
 18744 ;;  value           3   23[COMRAM] int 
 18745 ;;  eptr            2   26[COMRAM] PTR int 
 18746 ;;		 -> log@exponent(2), floor@expon(2), 
 18747 ;; Auto vars:     Size  Location     Type
 18748 ;;		None
 18749 ;; Return value:  Size  Location     Type
 18750 ;;                  3   23[COMRAM] PTR int 
 18751 ;; Registers used:
 18752 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18753 ;; Tracked objects:
 18754 ;;		On entry : 0/0
 18755 ;;		On exit  : 0/0
 18756 ;;		Unchanged: 0/0
 18757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18758 ;;      Params:         5       0       0       0       0       0       0
 18759 ;;      Locals:         0       0       0       0       0       0       0
 18760 ;;      Temps:          2       0       0       0       0       0       0
 18761 ;;      Totals:         7       0       0       0       0       0       0
 18762 ;;Total ram usage:        7 bytes
 18763 ;; Hardware stack levels used:    1
 18764 ;; Hardware stack levels required when called:    3
 18765 ;; This function calls:
 18766 ;;		Nothing
 18767 ;; This function is called by:
 18768 ;;		_floor
 18769 ;;		_log
 18770 ;; This function uses a non-reentrant model
 18771 ;;
 18772                           
 18773                           	psect	text80
 18774  00373E                     __ptext80:
 18775                           	opt stack 0
 18776  00373E                     _frexp:
 18777                           	opt stack 23
 18778                           
 18779                           ;incstack = 0
 18780  00373E  5018               	movf	frexp@value,w,c
 18781  003740  1019               	iorwf	frexp@value+1,w,c
 18782  003742  101A               	iorwf	frexp@value+2,w,c
 18783  003744  A4D8               	btfss	status,2,c
 18784  003746  D00F               	goto	l2423
 18785  003748  C01B  FFD9         	movff	frexp@eptr,fsr2l
 18786  00374C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 18787  003750  0E00               	movlw	0
 18788  003752  6EDE               	movwf	postinc2,c
 18789  003754  0E00               	movlw	0
 18790  003756  6EDD               	movwf	postdec2,c
 18791  003758  0E00               	movlw	0
 18792  00375A  6E18               	movwf	?_frexp,c
 18793  00375C  0E00               	movlw	0
 18794  00375E  6E19               	movwf	?_frexp+1,c
 18795  003760  0E00               	movlw	0
 18796  003762  6E1A               	movwf	?_frexp+2,c
 18797  003764  0012               	return	
 18798  003766                     l2423:
 18799  003766  501A               	movf	frexp@value+2,w,c
 18800  003768  0B7F               	andlw	127
 18801  00376A  6E1D               	movwf	??_frexp& (0+255),c
 18802  00376C  6A1E               	clrf	(??_frexp+1)& (0+255),c
 18803  00376E  90D8               	bcf	status,0,c
 18804  003770  361D               	rlcf	??_frexp,f,c
 18805  003772  361E               	rlcf	??_frexp+1,f,c
 18806  003774  C01B  FFD9         	movff	frexp@eptr,fsr2l
 18807  003778  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 18808  00377C  C01D  FFDE         	movff	??_frexp,postinc2
 18809  003780  C01E  FFDD         	movff	??_frexp+1,postdec2
 18810  003784  AE19               	btfss	frexp@value+1,7,c
 18811  003786  D003               	goto	u7470
 18812  003788  6A1D               	clrf	??_frexp& (0+255),c
 18813  00378A  2A1D               	incf	??_frexp& (0+255),f,c
 18814  00378C  D001               	goto	u7478
 18815  00378E                     u7470:
 18816  00378E  6A1D               	clrf	??_frexp& (0+255),c
 18817  003790                     u7478:
 18818  003790  501D               	movf	??_frexp,w,c
 18819  003792  C01B  FFD9         	movff	frexp@eptr,fsr2l
 18820  003796  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 18821  00379A  12DE               	iorwf	postinc2,f,c
 18822  00379C  0E00               	movlw	0
 18823  00379E  12DD               	iorwf	postdec2,f,c
 18824  0037A0  C01B  FFD9         	movff	frexp@eptr,fsr2l
 18825  0037A4  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 18826  0037A8  0E82               	movlw	130
 18827  0037AA  26DE               	addwf	postinc2,f,c
 18828  0037AC  0EFF               	movlw	255
 18829  0037AE  22DD               	addwfc	postdec2,f,c
 18830  0037B0  801A               	bsf	frexp@value+2,0,c
 18831  0037B2  821A               	bsf	frexp@value+2,1,c
 18832  0037B4  841A               	bsf	frexp@value+2,2,c
 18833  0037B6  861A               	bsf	frexp@value+2,3,c
 18834  0037B8  881A               	bsf	frexp@value+2,4,c
 18835  0037BA  8A1A               	bsf	frexp@value+2,5,c
 18836  0037BC  9C1A               	bcf	frexp@value+2,6,c
 18837  0037BE  9E19               	bcf	frexp@value+1,7,c
 18838  0037C0  C018  F018         	movff	frexp@value,?_frexp
 18839  0037C4  C019  F019         	movff	frexp@value+1,?_frexp+1
 18840  0037C8  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 18841  0037CC  0012               	return	
 18842  0037CE                     __end_of_frexp:
 18843                           	opt stack 0
 18844                           tosu	equ	0xFFF
 18845                           tosh	equ	0xFFE
 18846                           tosl	equ	0xFFD
 18847                           pclath	equ	0xFFA
 18848                           tblptru	equ	0xFF8
 18849                           tblptrh	equ	0xFF7
 18850                           tblptrl	equ	0xFF6
 18851                           tablat	equ	0xFF5
 18852                           prodh	equ	0xFF4
 18853                           prodl	equ	0xFF3
 18854                           intcon	equ	0xFF2
 18855                           intcon2	equ	0xFF1
 18856                           indf0	equ	0xFEF
 18857                           postinc0	equ	0xFEE
 18858                           fsr0h	equ	0xFEA
 18859                           fsr0l	equ	0xFE9
 18860                           wreg	equ	0xFE8
 18861                           indf1	equ	0xFE7
 18862                           postdec1	equ	0xFE5
 18863                           fsr1h	equ	0xFE2
 18864                           fsr1l	equ	0xFE1
 18865                           indf2	equ	0xFDF
 18866                           postinc2	equ	0xFDE
 18867                           postdec2	equ	0xFDD
 18868                           fsr2h	equ	0xFDA
 18869                           fsr2l	equ	0xFD9
 18870                           status	equ	0xFD8
 18871                           
 18872 ;; *************** function ___fttol *****************
 18873 ;; Defined at:
 18874 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 18875 ;; Parameters:    Size  Location     Type
 18876 ;;  f1              3   25[BANK0 ] float 
 18877 ;; Auto vars:     Size  Location     Type
 18878 ;;  lval            4   35[BANK0 ] unsigned long 
 18879 ;;  exp1            1   39[BANK0 ] unsigned char 
 18880 ;;  sign1           1   34[BANK0 ] unsigned char 
 18881 ;; Return value:  Size  Location     Type
 18882 ;;                  4   25[BANK0 ] long 
 18883 ;; Registers used:
 18884 ;;		wreg, status,2, status,0
 18885 ;; Tracked objects:
 18886 ;;		On entry : 0/0
 18887 ;;		On exit  : 0/0
 18888 ;;		Unchanged: 0/0
 18889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18890 ;;      Params:         0       4       0       0       0       0       0
 18891 ;;      Locals:         0       6       0       0       0       0       0
 18892 ;;      Temps:          0       5       0       0       0       0       0
 18893 ;;      Totals:         0      15       0       0       0       0       0
 18894 ;;Total ram usage:       15 bytes
 18895 ;; Hardware stack levels used:    1
 18896 ;; Hardware stack levels required when called:    3
 18897 ;; This function calls:
 18898 ;;		Nothing
 18899 ;; This function is called by:
 18900 ;;		_SampleSingleChannel
 18901 ;;		_SampleAllChannels
 18902 ;;		_GroupRx
 18903 ;;		_GroupTx
 18904 ;;		_ReadIntFromEeprom
 18905 ;;		_sprintf
 18906 ;;		_pow
 18907 ;;		_exp
 18908 ;;		_floor
 18909 ;;		_DacSetValue
 18910 ;;		_DacAnalogToDigitalSpi
 18911 ;; This function uses a non-reentrant model
 18912 ;;
 18913                           
 18914                           	psect	text81
 18915  002B6C                     __ptext81:
 18916                           	opt stack 0
 18917  002B6C                     ___fttol:
 18918                           	opt stack 25
 18919                           
 18920                           ;incstack = 0
 18921  002B6C  C07B  F07D         	movff	___fttol@f1+2,??___fttol
 18922  002B70  0100               	movlb	0	; () banked
 18923  002B72  6B7E               	clrf	(??___fttol+1)& (0+255),b
 18924  002B74  6B7F               	clrf	(??___fttol+2)& (0+255),b
 18925  002B76  357A               	rlcf	(___fttol@f1+1)& (0+255),w,b
 18926  002B78  377D               	rlcf	??___fttol& (0+255),f,b
 18927  002B7A  E301               	bnc	u7381
 18928  002B7C  817E               	bsf	(??___fttol+1)& (0+255),0,b
 18929  002B7E                     u7381:
 18930  002B7E  517D               	movf	??___fttol& (0+255),w,b
 18931  002B80  6F87               	movwf	___fttol@exp1& (0+255),b
 18932  002B82  5187               	movf	___fttol@exp1& (0+255),w,b
 18933  002B84  A4D8               	btfss	status,2,c
 18934  002B86  D009               	goto	l2076
 18935                           
 18936                           ; BSR set to: 0
 18937  002B88  0E00               	movlw	0
 18938  002B8A  6F79               	movwf	?___fttol& (0+255),b
 18939  002B8C  0E00               	movlw	0
 18940  002B8E  6F7A               	movwf	(?___fttol+1)& (0+255),b
 18941  002B90  0E00               	movlw	0
 18942  002B92  6F7B               	movwf	(?___fttol+2)& (0+255),b
 18943  002B94  0E00               	movlw	0
 18944  002B96  6F7C               	movwf	(?___fttol+3)& (0+255),b
 18945                           
 18946                           ; BSR set to: 0
 18947  002B98  0012               	return	
 18948  002B9A                     l2076:
 18949                           
 18950                           ; BSR set to: 0
 18951                           
 18952                           ; BSR set to: 0
 18953  002B9A  0E17               	movlw	23
 18954  002B9C  6F7D               	movwf	??___fttol& (0+255),b
 18955  002B9E  C079  F07E         	movff	___fttol@f1,??___fttol+1
 18956  002BA2  C07A  F07F         	movff	___fttol@f1+1,??___fttol+2
 18957  002BA6  C07B  F080         	movff	___fttol@f1+2,??___fttol+3
 18958  002BAA  297D               	incf	??___fttol& (0+255),w,b
 18959  002BAC  6F81               	movwf	(??___fttol+4)& (0+255),b
 18960  002BAE  D004               	goto	u7400
 18961  002BB0                     u7405:
 18962  002BB0  90D8               	bcf	status,0,c
 18963  002BB2  3380               	rrcf	(??___fttol+3)& (0+255),f,b
 18964  002BB4  337F               	rrcf	(??___fttol+2)& (0+255),f,b
 18965  002BB6  337E               	rrcf	(??___fttol+1)& (0+255),f,b
 18966  002BB8                     u7400:
 18967  002BB8  2F81               	decfsz	(??___fttol+4)& (0+255),f,b
 18968  002BBA  D7FA               	goto	u7405
 18969  002BBC  0100               	movlb	0	; () banked
 18970  002BBE  517E               	movf	(??___fttol+1)& (0+255),w,b
 18971  002BC0  6F82               	movwf	___fttol@sign1& (0+255),b
 18972                           
 18973                           ; BSR set to: 0
 18974  002BC2  8F7A               	bsf	(___fttol@f1+1)& (0+255),7,b
 18975                           
 18976                           ; BSR set to: 0
 18977  002BC4  0EFF               	movlw	255
 18978  002BC6  1779               	andwf	___fttol@f1& (0+255),f,b
 18979  002BC8  0EFF               	movlw	255
 18980  002BCA  177A               	andwf	(___fttol@f1+1)& (0+255),f,b
 18981  002BCC  0E00               	movlw	0
 18982  002BCE  177B               	andwf	(___fttol@f1+2)& (0+255),f,b
 18983                           
 18984                           ; BSR set to: 0
 18985  002BD0  5179               	movf	___fttol@f1& (0+255),w,b
 18986  002BD2  6F83               	movwf	___fttol@lval& (0+255),b
 18987  002BD4  517A               	movf	(___fttol@f1+1)& (0+255),w,b
 18988  002BD6  6F84               	movwf	(___fttol@lval+1)& (0+255),b
 18989  002BD8  517B               	movf	(___fttol@f1+2)& (0+255),w,b
 18990  002BDA  6F85               	movwf	(___fttol@lval+2)& (0+255),b
 18991  002BDC  6B86               	clrf	(___fttol@lval+3)& (0+255),b
 18992                           
 18993                           ; BSR set to: 0
 18994  002BDE  0E8E               	movlw	142
 18995  002BE0  5F87               	subwf	___fttol@exp1& (0+255),f,b
 18996                           
 18997                           ; BSR set to: 0
 18998  002BE2  AF87               	btfss	___fttol@exp1& (0+255),7,b
 18999  002BE4  D016               	goto	l2078
 19000                           
 19001                           ; BSR set to: 0
 19002  002BE6  5187               	movf	___fttol@exp1& (0+255),w,b
 19003  002BE8  0A80               	xorlw	128
 19004  002BEA  0F8F               	addlw	143
 19005  002BEC  B0D8               	btfsc	status,0,c
 19006  002BEE  D009               	goto	l2079
 19007                           
 19008                           ; BSR set to: 0
 19009  002BF0  0E00               	movlw	0
 19010  002BF2  6F79               	movwf	?___fttol& (0+255),b
 19011  002BF4  0E00               	movlw	0
 19012  002BF6  6F7A               	movwf	(?___fttol+1)& (0+255),b
 19013  002BF8  0E00               	movlw	0
 19014  002BFA  6F7B               	movwf	(?___fttol+2)& (0+255),b
 19015  002BFC  0E00               	movlw	0
 19016  002BFE  6F7C               	movwf	(?___fttol+3)& (0+255),b
 19017                           
 19018                           ; BSR set to: 0
 19019  002C00  0012               	return	
 19020  002C02                     l2079:
 19021                           
 19022                           ; BSR set to: 0
 19023                           
 19024                           ; BSR set to: 0
 19025                           
 19026                           ; BSR set to: 0
 19027  002C02  90D8               	bcf	status,0,c
 19028  002C04  3386               	rrcf	(___fttol@lval+3)& (0+255),f,b
 19029  002C06  3385               	rrcf	(___fttol@lval+2)& (0+255),f,b
 19030  002C08  3384               	rrcf	(___fttol@lval+1)& (0+255),f,b
 19031  002C0A  3383               	rrcf	___fttol@lval& (0+255),f,b
 19032                           
 19033                           ; BSR set to: 0
 19034  002C0C  3F87               	incfsz	___fttol@exp1& (0+255),f,b
 19035  002C0E  D7F9               	goto	l2079
 19036                           
 19037                           ; BSR set to: 0
 19038  002C10  D015               	goto	u7440
 19039  002C12                     l2078:
 19040                           
 19041                           ; BSR set to: 0
 19042                           
 19043                           ; BSR set to: 0
 19044  002C12  0E17               	movlw	23
 19045  002C14  6587               	cpfsgt	___fttol@exp1& (0+255),b
 19046  002C16  D00F               	goto	l2084
 19047                           
 19048                           ; BSR set to: 0
 19049  002C18  0E00               	movlw	0
 19050  002C1A  6F79               	movwf	?___fttol& (0+255),b
 19051  002C1C  0E00               	movlw	0
 19052  002C1E  6F7A               	movwf	(?___fttol+1)& (0+255),b
 19053  002C20  0E00               	movlw	0
 19054  002C22  6F7B               	movwf	(?___fttol+2)& (0+255),b
 19055  002C24  0E00               	movlw	0
 19056  002C26  6F7C               	movwf	(?___fttol+3)& (0+255),b
 19057                           
 19058                           ; BSR set to: 0
 19059  002C28  0012               	return	
 19060  002C2A                     
 19061                           ; BSR set to: 0
 19062                           
 19063                           ; BSR set to: 0
 19064  002C2A  90D8               	bcf	status,0,c
 19065  002C2C  3783               	rlcf	___fttol@lval& (0+255),f,b
 19066  002C2E  3784               	rlcf	(___fttol@lval+1)& (0+255),f,b
 19067  002C30  3785               	rlcf	(___fttol@lval+2)& (0+255),f,b
 19068  002C32  3786               	rlcf	(___fttol@lval+3)& (0+255),f,b
 19069  002C34  0787               	decf	___fttol@exp1& (0+255),f,b
 19070  002C36                     l2084:
 19071                           
 19072                           ; BSR set to: 0
 19073                           
 19074                           ; BSR set to: 0
 19075  002C36  5187               	movf	___fttol@exp1& (0+255),w,b
 19076  002C38  A4D8               	btfss	status,2,c
 19077  002C3A  D7F7               	goto	l2085
 19078  002C3C                     u7440:
 19079                           
 19080                           ; BSR set to: 0
 19081                           
 19082                           ; BSR set to: 0
 19083                           
 19084                           ; BSR set to: 0
 19085  002C3C  5182               	movf	___fttol@sign1& (0+255),w,b
 19086  002C3E  B4D8               	btfsc	status,2,c
 19087  002C40  D008               	goto	l2087
 19088                           
 19089                           ; BSR set to: 0
 19090  002C42  1F86               	comf	(___fttol@lval+3)& (0+255),f,b
 19091  002C44  1F85               	comf	(___fttol@lval+2)& (0+255),f,b
 19092  002C46  1F84               	comf	(___fttol@lval+1)& (0+255),f,b
 19093  002C48  6D83               	negf	___fttol@lval& (0+255),b
 19094  002C4A  0E00               	movlw	0
 19095  002C4C  2384               	addwfc	(___fttol@lval+1)& (0+255),f,b
 19096  002C4E  2385               	addwfc	(___fttol@lval+2)& (0+255),f,b
 19097  002C50  2386               	addwfc	(___fttol@lval+3)& (0+255),f,b
 19098  002C52                     l2087:
 19099                           
 19100                           ; BSR set to: 0
 19101                           
 19102                           ; BSR set to: 0
 19103  002C52  C083  F079         	movff	___fttol@lval,?___fttol
 19104  002C56  C084  F07A         	movff	___fttol@lval+1,?___fttol+1
 19105  002C5A  C085  F07B         	movff	___fttol@lval+2,?___fttol+2
 19106  002C5E  C086  F07C         	movff	___fttol@lval+3,?___fttol+3
 19107  002C62  0012               	return	
 19108  002C64                     __end_of___fttol:
 19109                           	opt stack 0
 19110                           tosu	equ	0xFFF
 19111                           tosh	equ	0xFFE
 19112                           tosl	equ	0xFFD
 19113                           pclath	equ	0xFFA
 19114                           tblptru	equ	0xFF8
 19115                           tblptrh	equ	0xFF7
 19116                           tblptrl	equ	0xFF6
 19117                           tablat	equ	0xFF5
 19118                           prodh	equ	0xFF4
 19119                           prodl	equ	0xFF3
 19120                           intcon	equ	0xFF2
 19121                           intcon2	equ	0xFF1
 19122                           indf0	equ	0xFEF
 19123                           postinc0	equ	0xFEE
 19124                           fsr0h	equ	0xFEA
 19125                           fsr0l	equ	0xFE9
 19126                           wreg	equ	0xFE8
 19127                           indf1	equ	0xFE7
 19128                           postdec1	equ	0xFE5
 19129                           fsr1h	equ	0xFE2
 19130                           fsr1l	equ	0xFE1
 19131                           indf2	equ	0xFDF
 19132                           postinc2	equ	0xFDE
 19133                           postdec2	equ	0xFDD
 19134                           fsr2h	equ	0xFDA
 19135                           fsr2l	equ	0xFD9
 19136                           status	equ	0xFD8
 19137                           
 19138 ;; *************** function ___ftge *****************
 19139 ;; Defined at:
 19140 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 19141 ;; Parameters:    Size  Location     Type
 19142 ;;  ff1             3   23[COMRAM] float 
 19143 ;;  ff2             3   26[COMRAM] float 
 19144 ;; Auto vars:     Size  Location     Type
 19145 ;;		None
 19146 ;; Return value:  Size  Location     Type
 19147 ;;		None               void
 19148 ;; Registers used:
 19149 ;;		wreg, status,2, status,0
 19150 ;; Tracked objects:
 19151 ;;		On entry : 0/0
 19152 ;;		On exit  : 0/0
 19153 ;;		Unchanged: 0/0
 19154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19155 ;;      Params:         6       0       0       0       0       0       0
 19156 ;;      Locals:         0       0       0       0       0       0       0
 19157 ;;      Temps:          3       0       0       0       0       0       0
 19158 ;;      Totals:         9       0       0       0       0       0       0
 19159 ;;Total ram usage:        9 bytes
 19160 ;; Hardware stack levels used:    1
 19161 ;; Hardware stack levels required when called:    3
 19162 ;; This function calls:
 19163 ;;		Nothing
 19164 ;; This function is called by:
 19165 ;;		_sprintf
 19166 ;;		_pow
 19167 ;;		_exp
 19168 ;;		_floor
 19169 ;; This function uses a non-reentrant model
 19170 ;;
 19171                           
 19172                           	psect	text82
 19173  0037CE                     __ptext82:
 19174                           	opt stack 0
 19175  0037CE                     ___ftge:
 19176                           	opt stack 25
 19177                           
 19178                           ; BSR set to: 0
 19179                           ;incstack = 0
 19180  0037CE  AE1A               	btfss	___ftge@ff1+2,7,c
 19181  0037D0  D016               	goto	l2048
 19182  0037D2  C018  F01E         	movff	___ftge@ff1,??___ftge
 19183  0037D6  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 19184  0037DA  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 19185  0037DE  1E1E               	comf	??___ftge,f,c
 19186  0037E0  1E1F               	comf	??___ftge+1,f,c
 19187  0037E2  1E20               	comf	??___ftge+2,f,c
 19188  0037E4  2A1E               	incf	??___ftge,f,c
 19189  0037E6  0E00               	movlw	0
 19190  0037E8  221F               	addwfc	??___ftge+1,f,c
 19191  0037EA  2220               	addwfc	??___ftge+2,f,c
 19192  0037EC  0E00               	movlw	0
 19193  0037EE  241E               	addwf	??___ftge,w,c
 19194  0037F0  6E18               	movwf	___ftge@ff1,c
 19195  0037F2  0E00               	movlw	0
 19196  0037F4  201F               	addwfc	??___ftge+1,w,c
 19197  0037F6  6E19               	movwf	___ftge@ff1+1,c
 19198  0037F8  0E80               	movlw	128
 19199  0037FA  2020               	addwfc	??___ftge+2,w,c
 19200  0037FC  6E1A               	movwf	___ftge@ff1+2,c
 19201  0037FE                     l2048:
 19202  0037FE  AE1D               	btfss	___ftge@ff2+2,7,c
 19203  003800  D016               	goto	l2049
 19204  003802  C01B  F01E         	movff	___ftge@ff2,??___ftge
 19205  003806  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 19206  00380A  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 19207  00380E  1E1E               	comf	??___ftge,f,c
 19208  003810  1E1F               	comf	??___ftge+1,f,c
 19209  003812  1E20               	comf	??___ftge+2,f,c
 19210  003814  2A1E               	incf	??___ftge,f,c
 19211  003816  0E00               	movlw	0
 19212  003818  221F               	addwfc	??___ftge+1,f,c
 19213  00381A  2220               	addwfc	??___ftge+2,f,c
 19214  00381C  0E00               	movlw	0
 19215  00381E  241E               	addwf	??___ftge,w,c
 19216  003820  6E1B               	movwf	___ftge@ff2,c
 19217  003822  0E00               	movlw	0
 19218  003824  201F               	addwfc	??___ftge+1,w,c
 19219  003826  6E1C               	movwf	___ftge@ff2+1,c
 19220  003828  0E80               	movlw	128
 19221  00382A  2020               	addwfc	??___ftge+2,w,c
 19222  00382C  6E1D               	movwf	___ftge@ff2+2,c
 19223  00382E                     l2049:
 19224  00382E  0E00               	movlw	0
 19225  003830  1A18               	xorwf	___ftge@ff1,f,c
 19226  003832  0E00               	movlw	0
 19227  003834  1A19               	xorwf	___ftge@ff1+1,f,c
 19228  003836  0E80               	movlw	128
 19229  003838  1A1A               	xorwf	___ftge@ff1+2,f,c
 19230  00383A  0E00               	movlw	0
 19231  00383C  1A1B               	xorwf	___ftge@ff2,f,c
 19232  00383E  0E00               	movlw	0
 19233  003840  1A1C               	xorwf	___ftge@ff2+1,f,c
 19234  003842  0E80               	movlw	128
 19235  003844  1A1D               	xorwf	___ftge@ff2+2,f,c
 19236  003846  501B               	movf	___ftge@ff2,w,c
 19237  003848  5C18               	subwf	___ftge@ff1,w,c
 19238  00384A  501C               	movf	___ftge@ff2+1,w,c
 19239  00384C  5819               	subwfb	___ftge@ff1+1,w,c
 19240  00384E  501D               	movf	___ftge@ff2+2,w,c
 19241  003850  581A               	subwfb	___ftge@ff1+2,w,c
 19242  003852  B0D8               	btfsc	status,0,c
 19243  003854  D002               	goto	l7668
 19244  003856  90D8               	bcf	status,0,c
 19245  003858  0012               	return	
 19246  00385A                     l7668:
 19247  00385A  80D8               	bsf	status,0,c
 19248  00385C  0012               	return	
 19249  00385E                     __end_of___ftge:
 19250                           	opt stack 0
 19251                           tosu	equ	0xFFF
 19252                           tosh	equ	0xFFE
 19253                           tosl	equ	0xFFD
 19254                           pclath	equ	0xFFA
 19255                           tblptru	equ	0xFF8
 19256                           tblptrh	equ	0xFF7
 19257                           tblptrl	equ	0xFF6
 19258                           tablat	equ	0xFF5
 19259                           prodh	equ	0xFF4
 19260                           prodl	equ	0xFF3
 19261                           intcon	equ	0xFF2
 19262                           intcon2	equ	0xFF1
 19263                           indf0	equ	0xFEF
 19264                           postinc0	equ	0xFEE
 19265                           fsr0h	equ	0xFEA
 19266                           fsr0l	equ	0xFE9
 19267                           wreg	equ	0xFE8
 19268                           indf1	equ	0xFE7
 19269                           postdec1	equ	0xFE5
 19270                           fsr1h	equ	0xFE2
 19271                           fsr1l	equ	0xFE1
 19272                           indf2	equ	0xFDF
 19273                           postinc2	equ	0xFDE
 19274                           postdec2	equ	0xFDD
 19275                           fsr2h	equ	0xFDA
 19276                           fsr2l	equ	0xFD9
 19277                           status	equ	0xFD8
 19278                           
 19279 ;; *************** function ___altoft *****************
 19280 ;; Defined at:
 19281 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 19282 ;; Parameters:    Size  Location     Type
 19283 ;;  c               4   40[BANK0 ] long 
 19284 ;; Auto vars:     Size  Location     Type
 19285 ;;  sign            1   47[COMRAM] unsigned char 
 19286 ;;  exp             1   46[COMRAM] unsigned char 
 19287 ;; Return value:  Size  Location     Type
 19288 ;;                  3   40[BANK0 ] float 
 19289 ;; Registers used:
 19290 ;;		wreg, status,2, status,0, cstack
 19291 ;; Tracked objects:
 19292 ;;		On entry : 0/0
 19293 ;;		On exit  : 0/0
 19294 ;;		Unchanged: 0/0
 19295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19296 ;;      Params:         0       4       0       0       0       0       0
 19297 ;;      Locals:         2       0       0       0       0       0       0
 19298 ;;      Temps:          0       4       0       0       0       0       0
 19299 ;;      Totals:         2       8       0       0       0       0       0
 19300 ;;Total ram usage:       10 bytes
 19301 ;; Hardware stack levels used:    1
 19302 ;; Hardware stack levels required when called:    4
 19303 ;; This function calls:
 19304 ;;		___ftpack
 19305 ;; This function is called by:
 19306 ;;		_floor
 19307 ;; This function uses a non-reentrant model
 19308 ;;
 19309                           
 19310                           	psect	text83
 19311  003A6A                     __ptext83:
 19312                           	opt stack 0
 19313  003A6A                     ___altoft:
 19314                           	opt stack 21
 19315                           
 19316                           ;incstack = 0
 19317  003A6A  0E00               	movlw	0
 19318  003A6C  6E30               	movwf	___altoft@sign,c
 19319  003A6E  0E8E               	movlw	142
 19320  003A70  6E2F               	movwf	___altoft@exp,c
 19321  003A72  0100               	movlb	0	; () banked
 19322  003A74  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
 19323  003A76  D011               	goto	l1812
 19324                           
 19325                           ; BSR set to: 0
 19326  003A78  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
 19327  003A7A  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
 19328  003A7C  1F89               	comf	(___altoft@c+1)& (0+255),f,b
 19329  003A7E  6D88               	negf	___altoft@c& (0+255),b
 19330  003A80  0E00               	movlw	0
 19331  003A82  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
 19332  003A84  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
 19333  003A86  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
 19334                           
 19335                           ; BSR set to: 0
 19336  003A88  0E01               	movlw	1
 19337  003A8A  6E30               	movwf	___altoft@sign,c
 19338                           
 19339                           ; BSR set to: 0
 19340  003A8C  D006               	goto	l1812
 19341  003A8E                     
 19342                           ; BSR set to: 0
 19343                           
 19344                           ; BSR set to: 0
 19345  003A8E  90D8               	bcf	status,0,c
 19346  003A90  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
 19347  003A92  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
 19348  003A94  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
 19349  003A96  3388               	rrcf	___altoft@c& (0+255),f,b
 19350  003A98  2A2F               	incf	___altoft@exp,f,c
 19351  003A9A                     l1812:
 19352                           
 19353                           ; BSR set to: 0
 19354                           
 19355                           ; BSR set to: 0
 19356  003A9A  0E00               	movlw	0
 19357  003A9C  1588               	andwf	___altoft@c& (0+255),w,b
 19358  003A9E  6F8C               	movwf	??___altoft& (0+255),b
 19359  003AA0  0E00               	movlw	0
 19360  003AA2  1589               	andwf	(___altoft@c+1)& (0+255),w,b
 19361  003AA4  6F8D               	movwf	(??___altoft+1)& (0+255),b
 19362  003AA6  0E00               	movlw	0
 19363  003AA8  158A               	andwf	(___altoft@c+2)& (0+255),w,b
 19364  003AAA  6F8E               	movwf	(??___altoft+2)& (0+255),b
 19365  003AAC  0EFF               	movlw	255
 19366  003AAE  158B               	andwf	(___altoft@c+3)& (0+255),w,b
 19367  003AB0  6F8F               	movwf	(??___altoft+3)& (0+255),b
 19368  003AB2  518C               	movf	??___altoft& (0+255),w,b
 19369  003AB4  118D               	iorwf	(??___altoft+1)& (0+255),w,b
 19370  003AB6  118E               	iorwf	(??___altoft+2)& (0+255),w,b
 19371  003AB8  118F               	iorwf	(??___altoft+3)& (0+255),w,b
 19372  003ABA  A4D8               	btfss	status,2,c
 19373  003ABC  D7E8               	goto	l1813
 19374                           
 19375                           ; BSR set to: 0
 19376                           
 19377                           ; BSR set to: 0
 19378  003ABE  C088  F018         	movff	___altoft@c,___ftpack@arg
 19379  003AC2  C089  F019         	movff	___altoft@c+1,___ftpack@arg+1
 19380  003AC6  C08A  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 19381  003ACA  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 19382  003ACE  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 19383  003AD2  EC64  F01A         	call	___ftpack	;wreg free
 19384  003AD6  C018  F088         	movff	?___ftpack,?___altoft
 19385  003ADA  C019  F089         	movff	?___ftpack+1,?___altoft+1
 19386  003ADE  C01A  F08A         	movff	?___ftpack+2,?___altoft+2
 19387  003AE2  0012               	return	
 19388  003AE4                     __end_of___altoft:
 19389                           	opt stack 0
 19390                           tosu	equ	0xFFF
 19391                           tosh	equ	0xFFE
 19392                           tosl	equ	0xFFD
 19393                           pclath	equ	0xFFA
 19394                           tblptru	equ	0xFF8
 19395                           tblptrh	equ	0xFF7
 19396                           tblptrl	equ	0xFF6
 19397                           tablat	equ	0xFF5
 19398                           prodh	equ	0xFF4
 19399                           prodl	equ	0xFF3
 19400                           intcon	equ	0xFF2
 19401                           intcon2	equ	0xFF1
 19402                           indf0	equ	0xFEF
 19403                           postinc0	equ	0xFEE
 19404                           fsr0h	equ	0xFEA
 19405                           fsr0l	equ	0xFE9
 19406                           wreg	equ	0xFE8
 19407                           indf1	equ	0xFE7
 19408                           postdec1	equ	0xFE5
 19409                           fsr1h	equ	0xFE2
 19410                           fsr1l	equ	0xFE1
 19411                           indf2	equ	0xFDF
 19412                           postinc2	equ	0xFDE
 19413                           postdec2	equ	0xFDD
 19414                           fsr2h	equ	0xFDA
 19415                           fsr2l	equ	0xFD9
 19416                           status	equ	0xFD8
 19417                           
 19418 ;; *************** function _eval_poly *****************
 19419 ;; Defined at:
 19420 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 19421 ;; Parameters:    Size  Location     Type
 19422 ;;  x               3   40[BANK0 ] float 
 19423 ;;  d               2   43[BANK0 ] PTR const 
 19424 ;;		 -> log@coeff(27), exp@coeff(30), 
 19425 ;;  n               2   45[BANK0 ] int 
 19426 ;; Auto vars:     Size  Location     Type
 19427 ;;  res             3   47[BANK0 ] int 
 19428 ;; Return value:  Size  Location     Type
 19429 ;;                  3   40[BANK0 ] int 
 19430 ;; Registers used:
 19431 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19432 ;; Tracked objects:
 19433 ;;		On entry : 0/0
 19434 ;;		On exit  : 0/0
 19435 ;;		Unchanged: 0/0
 19436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19437 ;;      Params:         0       7       0       0       0       0       0
 19438 ;;      Locals:         0       3       0       0       0       0       0
 19439 ;;      Temps:          2       0       0       0       0       0       0
 19440 ;;      Totals:         2      10       0       0       0       0       0
 19441 ;;Total ram usage:       12 bytes
 19442 ;; Hardware stack levels used:    1
 19443 ;; Hardware stack levels required when called:    5
 19444 ;; This function calls:
 19445 ;;		___ftadd
 19446 ;;		___ftmul
 19447 ;;		___wmul
 19448 ;; This function is called by:
 19449 ;;		_exp
 19450 ;;		_log
 19451 ;; This function uses a non-reentrant model
 19452 ;;
 19453                           
 19454                           	psect	text84
 19455  0030EE                     __ptext84:
 19456                           	opt stack 0
 19457  0030EE                     _eval_poly:
 19458                           	opt stack 21
 19459                           
 19460                           ;incstack = 0
 19461  0030EE  C08D  F026         	movff	eval_poly@n,___wmul@multiplier
 19462  0030F2  C08E  F027         	movff	eval_poly@n+1,___wmul@multiplier+1
 19463  0030F6  0E00               	movlw	0
 19464  0030F8  6E29               	movwf	___wmul@multiplicand+1,c
 19465  0030FA  0E03               	movlw	3
 19466  0030FC  6E28               	movwf	___wmul@multiplicand,c
 19467  0030FE  EC41  F023         	call	___wmul	;wreg free
 19468  003102  C08B  F02F         	movff	eval_poly@d,??_eval_poly
 19469  003106  C08C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 19470  00310A  5026               	movf	?___wmul,w,c
 19471  00310C  262F               	addwf	??_eval_poly,f,c
 19472  00310E  5027               	movf	?___wmul+1,w,c
 19473  003110  2230               	addwfc	??_eval_poly+1,f,c
 19474  003112  C02F  FFF6         	movff	??_eval_poly,tblptrl
 19475  003116  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 19476  00311A                     	if	0	;tblptru may be non-zero
 19477  00311A                     	endif
 19478  00311A                     	if	0	;tblptru may be non-zero
 19479  00311A                     	endif
 19480  00311A  0009               	tblrd		*+
 19481  00311C  CFF5 F08F          	movff	tablat,eval_poly@res
 19482  003120  0009               	tblrd		*+
 19483  003122  CFF5 F090          	movff	tablat,eval_poly@res+1
 19484  003126  000A               	tblrd		*-
 19485  003128  CFF5 F091          	movff	tablat,eval_poly@res+2
 19486  00312C  D03F               	goto	l2475
 19487  00312E  C08F  F069         	movff	eval_poly@res,___ftmul@f2
 19488  003132  C090  F06A         	movff	eval_poly@res+1,___ftmul@f2+1
 19489  003136  C091  F06B         	movff	eval_poly@res+2,___ftmul@f2+2
 19490  00313A  C088  F066         	movff	eval_poly@x,___ftmul@f1
 19491  00313E  C089  F067         	movff	eval_poly@x+1,___ftmul@f1+1
 19492  003142  C08A  F068         	movff	eval_poly@x+2,___ftmul@f1+2
 19493  003146  EC32  F016         	call	___ftmul	;wreg free
 19494  00314A  C066  F07C         	movff	?___ftmul,___ftadd@f1
 19495  00314E  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 19496  003152  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 19497  003156  0E00               	movlw	0
 19498  003158  6E29               	movwf	___wmul@multiplicand+1,c
 19499  00315A  0E03               	movlw	3
 19500  00315C  6E28               	movwf	___wmul@multiplicand,c
 19501  00315E  0100               	movlb	0	; () banked
 19502  003160  078D               	decf	eval_poly@n& (0+255),f,b
 19503  003162  A0D8               	btfss	status,0,c
 19504  003164  078E               	decf	(eval_poly@n+1)& (0+255),f,b
 19505  003166  C08D  F026         	movff	eval_poly@n,___wmul@multiplier
 19506  00316A  C08E  F027         	movff	eval_poly@n+1,___wmul@multiplier+1
 19507  00316E  EC41  F023         	call	___wmul	;wreg free
 19508  003172  C08B  F02F         	movff	eval_poly@d,??_eval_poly
 19509  003176  C08C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 19510  00317A  5026               	movf	?___wmul,w,c
 19511  00317C  262F               	addwf	??_eval_poly,f,c
 19512  00317E  5027               	movf	?___wmul+1,w,c
 19513  003180  2230               	addwfc	??_eval_poly+1,f,c
 19514  003182  C02F  FFF6         	movff	??_eval_poly,tblptrl
 19515  003186  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 19516  00318A                     	if	0	;tblptru may be non-zero
 19517  00318A                     	endif
 19518  00318A                     	if	0	;tblptru may be non-zero
 19519  00318A                     	endif
 19520  00318A  0009               	tblrd		*+
 19521  00318C  CFF5 F07F          	movff	tablat,___ftadd@f2
 19522  003190  0009               	tblrd		*+
 19523  003192  CFF5 F080          	movff	tablat,___ftadd@f2+1
 19524  003196  000A               	tblrd		*-
 19525  003198  CFF5 F081          	movff	tablat,___ftadd@f2+2
 19526  00319C  EC75  F00C         	call	___ftadd	;wreg free
 19527  0031A0  C07C  F08F         	movff	?___ftadd,eval_poly@res
 19528  0031A4  C07D  F090         	movff	?___ftadd+1,eval_poly@res+1
 19529  0031A8  C07E  F091         	movff	?___ftadd+2,eval_poly@res+2
 19530  0031AC                     l2475:
 19531  0031AC  0100               	movlb	0	; () banked
 19532  0031AE  518D               	movf	eval_poly@n& (0+255),w,b
 19533  0031B0  118E               	iorwf	(eval_poly@n+1)& (0+255),w,b
 19534  0031B2  A4D8               	btfss	status,2,c
 19535  0031B4  D7BC               	goto	l2476
 19536                           
 19537                           ; BSR set to: 0
 19538  0031B6  C08F  F088         	movff	eval_poly@res,?_eval_poly
 19539  0031BA  C090  F089         	movff	eval_poly@res+1,?_eval_poly+1
 19540  0031BE  C091  F08A         	movff	eval_poly@res+2,?_eval_poly+2
 19541                           
 19542                           ; BSR set to: 0
 19543  0031C2  0012               	return		;funcret
 19544  0031C4                     __end_of_eval_poly:
 19545                           	opt stack 0
 19546                           tosu	equ	0xFFF
 19547                           tosh	equ	0xFFE
 19548                           tosl	equ	0xFFD
 19549                           pclath	equ	0xFFA
 19550                           tblptru	equ	0xFF8
 19551                           tblptrh	equ	0xFF7
 19552                           tblptrl	equ	0xFF6
 19553                           tablat	equ	0xFF5
 19554                           prodh	equ	0xFF4
 19555                           prodl	equ	0xFF3
 19556                           intcon	equ	0xFF2
 19557                           intcon2	equ	0xFF1
 19558                           indf0	equ	0xFEF
 19559                           postinc0	equ	0xFEE
 19560                           fsr0h	equ	0xFEA
 19561                           fsr0l	equ	0xFE9
 19562                           wreg	equ	0xFE8
 19563                           indf1	equ	0xFE7
 19564                           postdec1	equ	0xFE5
 19565                           fsr1h	equ	0xFE2
 19566                           fsr1l	equ	0xFE1
 19567                           indf2	equ	0xFDF
 19568                           postinc2	equ	0xFDE
 19569                           postdec2	equ	0xFDD
 19570                           fsr2h	equ	0xFDA
 19571                           fsr2l	equ	0xFD9
 19572                           status	equ	0xFD8
 19573                           
 19574 ;; *************** function ___wmul *****************
 19575 ;; Defined at:
 19576 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 19577 ;; Parameters:    Size  Location     Type
 19578 ;;  multiplier      2   37[COMRAM] unsigned int 
 19579 ;;  multiplicand    2   39[COMRAM] unsigned int 
 19580 ;; Auto vars:     Size  Location     Type
 19581 ;;  product         2   41[COMRAM] unsigned int 
 19582 ;; Return value:  Size  Location     Type
 19583 ;;                  2   37[COMRAM] unsigned int 
 19584 ;; Registers used:
 19585 ;;		wreg, status,2, status,0, prodl, prodh
 19586 ;; Tracked objects:
 19587 ;;		On entry : 0/0
 19588 ;;		On exit  : 0/0
 19589 ;;		Unchanged: 0/0
 19590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19591 ;;      Params:         4       0       0       0       0       0       0
 19592 ;;      Locals:         2       0       0       0       0       0       0
 19593 ;;      Temps:          0       0       0       0       0       0       0
 19594 ;;      Totals:         6       0       0       0       0       0       0
 19595 ;;Total ram usage:        6 bytes
 19596 ;; Hardware stack levels used:    1
 19597 ;; Hardware stack levels required when called:    3
 19598 ;; This function calls:
 19599 ;;		Nothing
 19600 ;; This function is called by:
 19601 ;;		_fround
 19602 ;;		_scale
 19603 ;;		_sprintf
 19604 ;;		_eval_poly
 19605 ;; This function uses a non-reentrant model
 19606 ;;
 19607                           
 19608                           	psect	text85
 19609  004682                     __ptext85:
 19610                           	opt stack 0
 19611  004682                     ___wmul:
 19612                           	opt stack 24
 19613                           
 19614                           ; BSR set to: 0
 19615                           ;incstack = 0
 19616  004682  5026               	movf	___wmul@multiplier,w,c
 19617  004684  0228               	mulwf	___wmul@multiplicand,c
 19618  004686  CFF3 F02A          	movff	prodl,___wmul@product
 19619  00468A  CFF4 F02B          	movff	prodh,___wmul@product+1
 19620  00468E  5026               	movf	___wmul@multiplier,w,c
 19621  004690  0229               	mulwf	___wmul@multiplicand+1,c
 19622  004692  50F3               	movf	prodl,w,c
 19623  004694  262B               	addwf	___wmul@product+1,f,c
 19624  004696  5027               	movf	___wmul@multiplier+1,w,c
 19625  004698  0228               	mulwf	___wmul@multiplicand,c
 19626  00469A  50F3               	movf	prodl,w,c
 19627  00469C  262B               	addwf	___wmul@product+1,f,c
 19628  00469E  C02A  F026         	movff	___wmul@product,?___wmul
 19629  0046A2  C02B  F027         	movff	___wmul@product+1,?___wmul+1
 19630  0046A6  0012               	return	
 19631  0046A8                     __end_of___wmul:
 19632                           	opt stack 0
 19633                           tosu	equ	0xFFF
 19634                           tosh	equ	0xFFE
 19635                           tosl	equ	0xFFD
 19636                           pclath	equ	0xFFA
 19637                           tblptru	equ	0xFF8
 19638                           tblptrh	equ	0xFF7
 19639                           tblptrl	equ	0xFF6
 19640                           tablat	equ	0xFF5
 19641                           prodh	equ	0xFF4
 19642                           prodl	equ	0xFF3
 19643                           intcon	equ	0xFF2
 19644                           intcon2	equ	0xFF1
 19645                           indf0	equ	0xFEF
 19646                           postinc0	equ	0xFEE
 19647                           fsr0h	equ	0xFEA
 19648                           fsr0l	equ	0xFE9
 19649                           wreg	equ	0xFE8
 19650                           indf1	equ	0xFE7
 19651                           postdec1	equ	0xFE5
 19652                           fsr1h	equ	0xFE2
 19653                           fsr1l	equ	0xFE1
 19654                           indf2	equ	0xFDF
 19655                           postinc2	equ	0xFDE
 19656                           postdec2	equ	0xFDD
 19657                           fsr2h	equ	0xFDA
 19658                           fsr2l	equ	0xFD9
 19659                           status	equ	0xFD8
 19660                           
 19661 ;; *************** function ___ftmul *****************
 19662 ;; Defined at:
 19663 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 19664 ;; Parameters:    Size  Location     Type
 19665 ;;  f1              3    6[BANK0 ] float 
 19666 ;;  f2              3    9[BANK0 ] float 
 19667 ;; Auto vars:     Size  Location     Type
 19668 ;;  f3_as_produc    3   13[BANK0 ] unsigned um
 19669 ;;  sign            1   17[BANK0 ] unsigned char 
 19670 ;;  cntr            1   16[BANK0 ] unsigned char 
 19671 ;;  exp             1   12[BANK0 ] unsigned char 
 19672 ;; Return value:  Size  Location     Type
 19673 ;;                  3    6[BANK0 ] float 
 19674 ;; Registers used:
 19675 ;;		wreg, status,2, status,0, cstack
 19676 ;; Tracked objects:
 19677 ;;		On entry : 0/0
 19678 ;;		On exit  : 0/0
 19679 ;;		Unchanged: 0/0
 19680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19681 ;;      Params:         0       6       0       0       0       0       0
 19682 ;;      Locals:         0       6       0       0       0       0       0
 19683 ;;      Temps:          3       0       0       0       0       0       0
 19684 ;;      Totals:         3      12       0       0       0       0       0
 19685 ;;Total ram usage:       15 bytes
 19686 ;; Hardware stack levels used:    1
 19687 ;; Hardware stack levels required when called:    4
 19688 ;; This function calls:
 19689 ;;		___ftpack
 19690 ;; This function is called by:
 19691 ;;		_SampleSingleChannel
 19692 ;;		_SampleAllChannels
 19693 ;;		_fround
 19694 ;;		_scale
 19695 ;;		_sprintf
 19696 ;;		_pow
 19697 ;;		_exp
 19698 ;;		_log
 19699 ;;		_eval_poly
 19700 ;;		_DacAnalogToDigitalSpi
 19701 ;; This function uses a non-reentrant model
 19702 ;;
 19703                           
 19704                           	psect	text86
 19705  002C64                     __ptext86:
 19706                           	opt stack 0
 19707  002C64                     ___ftmul:
 19708                           	opt stack 23
 19709                           
 19710                           ;incstack = 0
 19711  002C64  C068  F02C         	movff	___ftmul@f1+2,??___ftmul
 19712  002C68  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 19713  002C6A  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 19714  002C6C  0100               	movlb	0	; () banked
 19715  002C6E  3567               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 19716  002C70  362C               	rlcf	??___ftmul& (0+255),f,c
 19717  002C72  E301               	bnc	u7291
 19718  002C74  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 19719  002C76                     u7291:
 19720  002C76  502C               	movf	??___ftmul,w,c
 19721  002C78  6F6C               	movwf	___ftmul@exp& (0+255),b
 19722  002C7A  516C               	movf	___ftmul@exp& (0+255),w,b
 19723  002C7C  A4D8               	btfss	status,2,c
 19724  002C7E  D007               	goto	l2055
 19725                           
 19726                           ; BSR set to: 0
 19727  002C80  0E00               	movlw	0
 19728  002C82  6F66               	movwf	?___ftmul& (0+255),b
 19729  002C84  0E00               	movlw	0
 19730  002C86  6F67               	movwf	(?___ftmul+1)& (0+255),b
 19731  002C88  0E00               	movlw	0
 19732  002C8A  6F68               	movwf	(?___ftmul+2)& (0+255),b
 19733                           
 19734                           ; BSR set to: 0
 19735  002C8C  0012               	return	
 19736  002C8E                     l2055:
 19737                           
 19738                           ; BSR set to: 0
 19739                           
 19740                           ; BSR set to: 0
 19741  002C8E  C06B  F02C         	movff	___ftmul@f2+2,??___ftmul
 19742  002C92  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 19743  002C94  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 19744  002C96  356A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 19745  002C98  362C               	rlcf	??___ftmul& (0+255),f,c
 19746  002C9A  E301               	bnc	u7311
 19747  002C9C  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 19748  002C9E                     u7311:
 19749  002C9E  502C               	movf	??___ftmul,w,c
 19750  002CA0  6F71               	movwf	___ftmul@sign& (0+255),b
 19751  002CA2  5171               	movf	___ftmul@sign& (0+255),w,b
 19752  002CA4  A4D8               	btfss	status,2,c
 19753  002CA6  D007               	goto	l2057
 19754                           
 19755                           ; BSR set to: 0
 19756  002CA8  0E00               	movlw	0
 19757  002CAA  6F66               	movwf	?___ftmul& (0+255),b
 19758  002CAC  0E00               	movlw	0
 19759  002CAE  6F67               	movwf	(?___ftmul+1)& (0+255),b
 19760  002CB0  0E00               	movlw	0
 19761  002CB2  6F68               	movwf	(?___ftmul+2)& (0+255),b
 19762                           
 19763                           ; BSR set to: 0
 19764  002CB4  0012               	return	
 19765  002CB6                     l2057:
 19766                           
 19767                           ; BSR set to: 0
 19768                           
 19769                           ; BSR set to: 0
 19770  002CB6  5171               	movf	___ftmul@sign& (0+255),w,b
 19771  002CB8  0F7B               	addlw	123
 19772  002CBA  276C               	addwf	___ftmul@exp& (0+255),f,b
 19773                           
 19774                           ; BSR set to: 0
 19775  002CBC  C068  F071         	movff	___ftmul@f1+2,___ftmul@sign
 19776  002CC0  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 19777  002CC2  1B71               	xorwf	___ftmul@sign& (0+255),f,b
 19778  002CC4  0E80               	movlw	128
 19779  002CC6  1771               	andwf	___ftmul@sign& (0+255),f,b
 19780                           
 19781                           ; BSR set to: 0
 19782  002CC8  8F67               	bsf	(___ftmul@f1+1)& (0+255),7,b
 19783                           
 19784                           ; BSR set to: 0
 19785  002CCA  8F6A               	bsf	(___ftmul@f2+1)& (0+255),7,b
 19786                           
 19787                           ; BSR set to: 0
 19788  002CCC  0EFF               	movlw	255
 19789  002CCE  1769               	andwf	___ftmul@f2& (0+255),f,b
 19790  002CD0  0EFF               	movlw	255
 19791  002CD2  176A               	andwf	(___ftmul@f2+1)& (0+255),f,b
 19792  002CD4  0E00               	movlw	0
 19793  002CD6  176B               	andwf	(___ftmul@f2+2)& (0+255),f,b
 19794                           
 19795                           ; BSR set to: 0
 19796  002CD8  0E00               	movlw	0
 19797  002CDA  6F6D               	movwf	___ftmul@f3_as_product& (0+255),b
 19798  002CDC  0E00               	movlw	0
 19799  002CDE  6F6E               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 19800  002CE0  0E00               	movlw	0
 19801  002CE2  6F6F               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 19802                           
 19803                           ; BSR set to: 0
 19804  002CE4  0E07               	movlw	7
 19805  002CE6  6F70               	movwf	___ftmul@cntr& (0+255),b
 19806  002CE8                     
 19807                           ; BSR set to: 0
 19808                           
 19809                           ; BSR set to: 0
 19810  002CE8  A166               	btfss	___ftmul@f1& (0+255),0,b
 19811  002CEA  D006               	goto	l2059
 19812                           
 19813                           ; BSR set to: 0
 19814  002CEC  5169               	movf	___ftmul@f2& (0+255),w,b
 19815  002CEE  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 19816  002CF0  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 19817  002CF2  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 19818  002CF4  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 19819  002CF6  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 19820  002CF8                     l2059:
 19821                           
 19822                           ; BSR set to: 0
 19823                           
 19824                           ; BSR set to: 0
 19825  002CF8  90D8               	bcf	status,0,c
 19826  002CFA  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 19827  002CFC  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 19828  002CFE  3366               	rrcf	___ftmul@f1& (0+255),f,b
 19829  002D00  90D8               	bcf	status,0,c
 19830  002D02  3769               	rlcf	___ftmul@f2& (0+255),f,b
 19831  002D04  376A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 19832  002D06  376B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 19833                           
 19834                           ; BSR set to: 0
 19835  002D08  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 19836  002D0A  D7EE               	goto	l2058
 19837                           
 19838                           ; BSR set to: 0
 19839                           
 19840                           ; BSR set to: 0
 19841  002D0C  0E09               	movlw	9
 19842  002D0E  6F70               	movwf	___ftmul@cntr& (0+255),b
 19843  002D10                     
 19844                           ; BSR set to: 0
 19845                           
 19846                           ; BSR set to: 0
 19847  002D10  A166               	btfss	___ftmul@f1& (0+255),0,b
 19848  002D12  D006               	goto	l2062
 19849                           
 19850                           ; BSR set to: 0
 19851  002D14  5169               	movf	___ftmul@f2& (0+255),w,b
 19852  002D16  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 19853  002D18  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 19854  002D1A  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 19855  002D1C  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 19856  002D1E  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 19857  002D20                     l2062:
 19858                           
 19859                           ; BSR set to: 0
 19860                           
 19861                           ; BSR set to: 0
 19862  002D20  90D8               	bcf	status,0,c
 19863  002D22  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 19864  002D24  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 19865  002D26  3366               	rrcf	___ftmul@f1& (0+255),f,b
 19866  002D28  90D8               	bcf	status,0,c
 19867  002D2A  336F               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 19868  002D2C  336E               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 19869  002D2E  336D               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 19870                           
 19871                           ; BSR set to: 0
 19872  002D30  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 19873  002D32  D7EE               	goto	l2061
 19874                           
 19875                           ; BSR set to: 0
 19876                           
 19877                           ; BSR set to: 0
 19878  002D34  C06D  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 19879  002D38  C06E  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 19880  002D3C  C06F  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 19881  002D40  C06C  F01B         	movff	___ftmul@exp,___ftpack@exp
 19882  002D44  C071  F01C         	movff	___ftmul@sign,___ftpack@sign
 19883  002D48  EC64  F01A         	call	___ftpack	;wreg free
 19884  002D4C  C018  F066         	movff	?___ftpack,?___ftmul
 19885  002D50  C019  F067         	movff	?___ftpack+1,?___ftmul+1
 19886  002D54  C01A  F068         	movff	?___ftpack+2,?___ftmul+2
 19887  002D58  0012               	return	
 19888  002D5A                     __end_of___ftmul:
 19889                           	opt stack 0
 19890                           tosu	equ	0xFFF
 19891                           tosh	equ	0xFFE
 19892                           tosl	equ	0xFFD
 19893                           pclath	equ	0xFFA
 19894                           tblptru	equ	0xFF8
 19895                           tblptrh	equ	0xFF7
 19896                           tblptrl	equ	0xFF6
 19897                           tablat	equ	0xFF5
 19898                           prodh	equ	0xFF4
 19899                           prodl	equ	0xFF3
 19900                           intcon	equ	0xFF2
 19901                           intcon2	equ	0xFF1
 19902                           indf0	equ	0xFEF
 19903                           postinc0	equ	0xFEE
 19904                           fsr0h	equ	0xFEA
 19905                           fsr0l	equ	0xFE9
 19906                           wreg	equ	0xFE8
 19907                           indf1	equ	0xFE7
 19908                           postdec1	equ	0xFE5
 19909                           fsr1h	equ	0xFE2
 19910                           fsr1l	equ	0xFE1
 19911                           indf2	equ	0xFDF
 19912                           postinc2	equ	0xFDE
 19913                           postdec2	equ	0xFDD
 19914                           fsr2h	equ	0xFDA
 19915                           fsr2l	equ	0xFD9
 19916                           status	equ	0xFD8
 19917                           
 19918 ;; *************** function ___ftsub *****************
 19919 ;; Defined at:
 19920 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 19921 ;; Parameters:    Size  Location     Type
 19922 ;;  f1              3   40[BANK0 ] float 
 19923 ;;  f2              3   43[BANK0 ] float 
 19924 ;; Auto vars:     Size  Location     Type
 19925 ;;		None
 19926 ;; Return value:  Size  Location     Type
 19927 ;;                  3   40[BANK0 ] float 
 19928 ;; Registers used:
 19929 ;;		wreg, status,2, status,0, cstack
 19930 ;; Tracked objects:
 19931 ;;		On entry : 0/0
 19932 ;;		On exit  : 0/0
 19933 ;;		Unchanged: 0/0
 19934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19935 ;;      Params:         0       6       0       0       0       0       0
 19936 ;;      Locals:         0       0       0       0       0       0       0
 19937 ;;      Temps:          0       0       0       0       0       0       0
 19938 ;;      Totals:         0       6       0       0       0       0       0
 19939 ;;Total ram usage:        6 bytes
 19940 ;; Hardware stack levels used:    1
 19941 ;; Hardware stack levels required when called:    5
 19942 ;; This function calls:
 19943 ;;		___ftadd
 19944 ;; This function is called by:
 19945 ;;		_sprintf
 19946 ;;		_exp
 19947 ;; This function uses a non-reentrant model
 19948 ;;
 19949                           
 19950                           	psect	text87
 19951  004326                     __ptext87:
 19952                           	opt stack 0
 19953  004326                     ___ftsub:
 19954                           	opt stack 23
 19955                           
 19956                           ;incstack = 0
 19957  004326  0100               	movlb	0	; () banked
 19958  004328  518B               	movf	___ftsub@f2& (0+255),w,b
 19959  00432A  118C               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 19960  00432C  118D               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 19961  00432E  B4D8               	btfsc	status,2,c
 19962  004330  D006               	goto	l2072
 19963                           
 19964                           ; BSR set to: 0
 19965  004332  0E00               	movlw	0
 19966  004334  1B8B               	xorwf	___ftsub@f2& (0+255),f,b
 19967  004336  0E00               	movlw	0
 19968  004338  1B8C               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 19969  00433A  0E80               	movlw	128
 19970  00433C  1B8D               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 19971  00433E                     l2072:
 19972                           
 19973                           ; BSR set to: 0
 19974                           
 19975                           ; BSR set to: 0
 19976  00433E  C088  F07C         	movff	___ftsub@f1,___ftadd@f1
 19977  004342  C089  F07D         	movff	___ftsub@f1+1,___ftadd@f1+1
 19978  004346  C08A  F07E         	movff	___ftsub@f1+2,___ftadd@f1+2
 19979  00434A  C08B  F07F         	movff	___ftsub@f2,___ftadd@f2
 19980  00434E  C08C  F080         	movff	___ftsub@f2+1,___ftadd@f2+1
 19981  004352  C08D  F081         	movff	___ftsub@f2+2,___ftadd@f2+2
 19982  004356  EC75  F00C         	call	___ftadd	;wreg free
 19983  00435A  C07C  F088         	movff	?___ftadd,?___ftsub
 19984  00435E  C07D  F089         	movff	?___ftadd+1,?___ftsub+1
 19985  004362  C07E  F08A         	movff	?___ftadd+2,?___ftsub+2
 19986  004366  0012               	return	
 19987  004368                     __end_of___ftsub:
 19988                           	opt stack 0
 19989                           tosu	equ	0xFFF
 19990                           tosh	equ	0xFFE
 19991                           tosl	equ	0xFFD
 19992                           pclath	equ	0xFFA
 19993                           tblptru	equ	0xFF8
 19994                           tblptrh	equ	0xFF7
 19995                           tblptrl	equ	0xFF6
 19996                           tablat	equ	0xFF5
 19997                           prodh	equ	0xFF4
 19998                           prodl	equ	0xFF3
 19999                           intcon	equ	0xFF2
 20000                           intcon2	equ	0xFF1
 20001                           indf0	equ	0xFEF
 20002                           postinc0	equ	0xFEE
 20003                           fsr0h	equ	0xFEA
 20004                           fsr0l	equ	0xFE9
 20005                           wreg	equ	0xFE8
 20006                           indf1	equ	0xFE7
 20007                           postdec1	equ	0xFE5
 20008                           fsr1h	equ	0xFE2
 20009                           fsr1l	equ	0xFE1
 20010                           indf2	equ	0xFDF
 20011                           postinc2	equ	0xFDE
 20012                           postdec2	equ	0xFDD
 20013                           fsr2h	equ	0xFDA
 20014                           fsr2l	equ	0xFD9
 20015                           status	equ	0xFD8
 20016                           
 20017 ;; *************** function ___ftadd *****************
 20018 ;; Defined at:
 20019 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 20020 ;; Parameters:    Size  Location     Type
 20021 ;;  f1              3   28[BANK0 ] float 
 20022 ;;  f2              3   31[BANK0 ] float 
 20023 ;; Auto vars:     Size  Location     Type
 20024 ;;  exp1            1   39[BANK0 ] unsigned char 
 20025 ;;  exp2            1   38[BANK0 ] unsigned char 
 20026 ;;  sign            1   37[BANK0 ] unsigned char 
 20027 ;; Return value:  Size  Location     Type
 20028 ;;                  3   28[BANK0 ] float 
 20029 ;; Registers used:
 20030 ;;		wreg, status,2, status,0, cstack
 20031 ;; Tracked objects:
 20032 ;;		On entry : 0/0
 20033 ;;		On exit  : 0/0
 20034 ;;		Unchanged: 0/0
 20035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20036 ;;      Params:         0       6       0       0       0       0       0
 20037 ;;      Locals:         0       3       0       0       0       0       0
 20038 ;;      Temps:          0       3       0       0       0       0       0
 20039 ;;      Totals:         0      12       0       0       0       0       0
 20040 ;;Total ram usage:       12 bytes
 20041 ;; Hardware stack levels used:    1
 20042 ;; Hardware stack levels required when called:    4
 20043 ;; This function calls:
 20044 ;;		___ftpack
 20045 ;; This function is called by:
 20046 ;;		_sprintf
 20047 ;;		___ftsub
 20048 ;;		_floor
 20049 ;;		_log
 20050 ;;		_eval_poly
 20051 ;;		_DacAnalogToDigitalSpi
 20052 ;; This function uses a non-reentrant model
 20053 ;;
 20054                           
 20055                           	psect	text88
 20056  0018EA                     __ptext88:
 20057                           	opt stack 0
 20058  0018EA                     ___ftadd:
 20059                           	opt stack 23
 20060                           
 20061                           ;incstack = 0
 20062  0018EA  C07E  F082         	movff	___ftadd@f1+2,??___ftadd
 20063  0018EE  0100               	movlb	0	; () banked
 20064  0018F0  6B83               	clrf	(??___ftadd+1)& (0+255),b
 20065  0018F2  6B84               	clrf	(??___ftadd+2)& (0+255),b
 20066  0018F4  357D               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 20067  0018F6  3782               	rlcf	??___ftadd& (0+255),f,b
 20068  0018F8  E301               	bnc	u7081
 20069  0018FA  8183               	bsf	(??___ftadd+1)& (0+255),0,b
 20070  0018FC                     u7081:
 20071  0018FC  5182               	movf	??___ftadd& (0+255),w,b
 20072  0018FE  6F87               	movwf	___ftadd@exp1& (0+255),b
 20073  001900  C081  F082         	movff	___ftadd@f2+2,??___ftadd
 20074  001904  6B83               	clrf	(??___ftadd+1)& (0+255),b
 20075  001906  6B84               	clrf	(??___ftadd+2)& (0+255),b
 20076  001908  3580               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 20077  00190A  3782               	rlcf	??___ftadd& (0+255),f,b
 20078  00190C  E301               	bnc	u7091
 20079  00190E  8183               	bsf	(??___ftadd+1)& (0+255),0,b
 20080  001910                     u7091:
 20081  001910  5182               	movf	??___ftadd& (0+255),w,b
 20082  001912  6F86               	movwf	___ftadd@exp2& (0+255),b
 20083                           
 20084                           ; BSR set to: 0
 20085  001914  5187               	movf	___ftadd@exp1& (0+255),w,b
 20086  001916  B4D8               	btfsc	status,2,c
 20087  001918  D00B               	goto	u7120
 20088                           
 20089                           ; BSR set to: 0
 20090  00191A  5186               	movf	___ftadd@exp2& (0+255),w,b
 20091  00191C  5D87               	subwf	___ftadd@exp1& (0+255),w,b
 20092  00191E  B0D8               	btfsc	status,0,c
 20093  001920  D00E               	goto	l1990
 20094                           
 20095                           ; BSR set to: 0
 20096  001922  5187               	movf	___ftadd@exp1& (0+255),w,b
 20097  001924  0800               	sublw	0
 20098  001926  2586               	addwf	___ftadd@exp2& (0+255),w,b
 20099  001928  6F82               	movwf	??___ftadd& (0+255),b
 20100  00192A  0E18               	movlw	24
 20101  00192C  6582               	cpfsgt	??___ftadd& (0+255),b
 20102  00192E  D007               	goto	l1990
 20103  001930                     u7120:
 20104                           
 20105                           ; BSR set to: 0
 20106  001930  C07F  F07C         	movff	___ftadd@f2,?___ftadd
 20107  001934  C080  F07D         	movff	___ftadd@f2+1,?___ftadd+1
 20108  001938  C081  F07E         	movff	___ftadd@f2+2,?___ftadd+2
 20109  00193C  0012               	return	
 20110  00193E                     l1990:
 20111                           
 20112                           ; BSR set to: 0
 20113                           
 20114                           ; BSR set to: 0
 20115  00193E  5186               	movf	___ftadd@exp2& (0+255),w,b
 20116  001940  B4D8               	btfsc	status,2,c
 20117  001942  D00B               	goto	u7150
 20118                           
 20119                           ; BSR set to: 0
 20120  001944  5187               	movf	___ftadd@exp1& (0+255),w,b
 20121  001946  5D86               	subwf	___ftadd@exp2& (0+255),w,b
 20122  001948  B0D8               	btfsc	status,0,c
 20123  00194A  D00E               	goto	l1994
 20124                           
 20125                           ; BSR set to: 0
 20126  00194C  5186               	movf	___ftadd@exp2& (0+255),w,b
 20127  00194E  0800               	sublw	0
 20128  001950  2587               	addwf	___ftadd@exp1& (0+255),w,b
 20129  001952  6F82               	movwf	??___ftadd& (0+255),b
 20130  001954  0E18               	movlw	24
 20131  001956  6582               	cpfsgt	??___ftadd& (0+255),b
 20132  001958  D007               	goto	l1994
 20133  00195A                     u7150:
 20134                           
 20135                           ; BSR set to: 0
 20136  00195A  C07C  F07C         	movff	___ftadd@f1,?___ftadd
 20137  00195E  C07D  F07D         	movff	___ftadd@f1+1,?___ftadd+1
 20138  001962  C07E  F07E         	movff	___ftadd@f1+2,?___ftadd+2
 20139  001966  0012               	return	
 20140  001968                     l1994:
 20141                           
 20142                           ; BSR set to: 0
 20143                           
 20144                           ; BSR set to: 0
 20145  001968  0E06               	movlw	6
 20146  00196A  6F85               	movwf	___ftadd@sign& (0+255),b
 20147                           
 20148                           ; BSR set to: 0
 20149  00196C  BF7E               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 20150                           
 20151                           ; BSR set to: 0
 20152  00196E  8F85               	bsf	___ftadd@sign& (0+255),7,b
 20153                           
 20154                           ; BSR set to: 0
 20155                           
 20156                           ; BSR set to: 0
 20157  001970  BF81               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 20158                           
 20159                           ; BSR set to: 0
 20160  001972  8D85               	bsf	___ftadd@sign& (0+255),6,b
 20161                           
 20162                           ; BSR set to: 0
 20163  001974  8F7D               	bsf	(___ftadd@f1+1)& (0+255),7,b
 20164                           
 20165                           ; BSR set to: 0
 20166  001976  0EFF               	movlw	255
 20167  001978  177C               	andwf	___ftadd@f1& (0+255),f,b
 20168  00197A  0EFF               	movlw	255
 20169  00197C  177D               	andwf	(___ftadd@f1+1)& (0+255),f,b
 20170  00197E  0E00               	movlw	0
 20171  001980  177E               	andwf	(___ftadd@f1+2)& (0+255),f,b
 20172  001982  8F80               	bsf	(___ftadd@f2+1)& (0+255),7,b
 20173                           
 20174                           ; BSR set to: 0
 20175  001984  0EFF               	movlw	255
 20176  001986  177F               	andwf	___ftadd@f2& (0+255),f,b
 20177  001988  0EFF               	movlw	255
 20178  00198A  1780               	andwf	(___ftadd@f2+1)& (0+255),f,b
 20179  00198C  0E00               	movlw	0
 20180  00198E  1781               	andwf	(___ftadd@f2+2)& (0+255),f,b
 20181                           
 20182                           ; BSR set to: 0
 20183  001990  5186               	movf	___ftadd@exp2& (0+255),w,b
 20184  001992  5D87               	subwf	___ftadd@exp1& (0+255),w,b
 20185  001994  B0D8               	btfsc	status,0,c
 20186  001996  D01B               	goto	l1999
 20187  001998                     u7180:
 20188                           
 20189                           ; BSR set to: 0
 20190                           
 20191                           ; BSR set to: 0
 20192  001998  90D8               	bcf	status,0,c
 20193  00199A  377F               	rlcf	___ftadd@f2& (0+255),f,b
 20194  00199C  3780               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 20195  00199E  3781               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 20196  0019A0  0786               	decf	___ftadd@exp2& (0+255),f,b
 20197                           
 20198                           ; BSR set to: 0
 20199  0019A2  5187               	movf	___ftadd@exp1& (0+255),w,b
 20200  0019A4  1986               	xorwf	___ftadd@exp2& (0+255),w,b
 20201  0019A6  B4D8               	btfsc	status,2,c
 20202  0019A8  D00D               	goto	l2004
 20203                           
 20204                           ; BSR set to: 0
 20205  0019AA  0785               	decf	___ftadd@sign& (0+255),f,b
 20206  0019AC  C085  F082         	movff	___ftadd@sign,??___ftadd
 20207  0019B0  0E07               	movlw	7
 20208  0019B2  1782               	andwf	??___ftadd& (0+255),f,b
 20209  0019B4  B4D8               	btfsc	status,2,c
 20210  0019B6  D006               	goto	l2004
 20211  0019B8  D7EF               	goto	u7180
 20212  0019BA                     
 20213                           ; BSR set to: 0
 20214                           
 20215                           ; BSR set to: 0
 20216  0019BA  90D8               	bcf	status,0,c
 20217  0019BC  337E               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 20218  0019BE  337D               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 20219  0019C0  337C               	rrcf	___ftadd@f1& (0+255),f,b
 20220  0019C2  2B87               	incf	___ftadd@exp1& (0+255),f,b
 20221  0019C4                     l2004:
 20222                           
 20223                           ; BSR set to: 0
 20224                           
 20225                           ; BSR set to: 0
 20226  0019C4  5186               	movf	___ftadd@exp2& (0+255),w,b
 20227  0019C6  1987               	xorwf	___ftadd@exp1& (0+255),w,b
 20228  0019C8  B4D8               	btfsc	status,2,c
 20229  0019CA  D01F               	goto	u7250
 20230  0019CC  D7F6               	goto	l2005
 20231  0019CE                     l1999:
 20232                           
 20233                           ; BSR set to: 0
 20234                           
 20235                           ; BSR set to: 0
 20236  0019CE  5187               	movf	___ftadd@exp1& (0+255),w,b
 20237  0019D0  5D86               	subwf	___ftadd@exp2& (0+255),w,b
 20238  0019D2  B0D8               	btfsc	status,0,c
 20239  0019D4  D01A               	goto	u7250
 20240  0019D6                     u7220:
 20241                           
 20242                           ; BSR set to: 0
 20243                           
 20244                           ; BSR set to: 0
 20245  0019D6  90D8               	bcf	status,0,c
 20246  0019D8  377C               	rlcf	___ftadd@f1& (0+255),f,b
 20247  0019DA  377D               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 20248  0019DC  377E               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 20249  0019DE  0787               	decf	___ftadd@exp1& (0+255),f,b
 20250                           
 20251                           ; BSR set to: 0
 20252  0019E0  5187               	movf	___ftadd@exp1& (0+255),w,b
 20253  0019E2  1986               	xorwf	___ftadd@exp2& (0+255),w,b
 20254  0019E4  B4D8               	btfsc	status,2,c
 20255  0019E6  D00D               	goto	l2013
 20256                           
 20257                           ; BSR set to: 0
 20258  0019E8  0785               	decf	___ftadd@sign& (0+255),f,b
 20259  0019EA  C085  F082         	movff	___ftadd@sign,??___ftadd
 20260  0019EE  0E07               	movlw	7
 20261  0019F0  1782               	andwf	??___ftadd& (0+255),f,b
 20262  0019F2  B4D8               	btfsc	status,2,c
 20263  0019F4  D006               	goto	l2013
 20264  0019F6  D7EF               	goto	u7220
 20265  0019F8                     
 20266                           ; BSR set to: 0
 20267                           
 20268                           ; BSR set to: 0
 20269  0019F8  90D8               	bcf	status,0,c
 20270  0019FA  3381               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 20271  0019FC  3380               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 20272  0019FE  337F               	rrcf	___ftadd@f2& (0+255),f,b
 20273  001A00  2B86               	incf	___ftadd@exp2& (0+255),f,b
 20274  001A02                     l2013:
 20275                           
 20276                           ; BSR set to: 0
 20277                           
 20278                           ; BSR set to: 0
 20279  001A02  5186               	movf	___ftadd@exp2& (0+255),w,b
 20280  001A04  1987               	xorwf	___ftadd@exp1& (0+255),w,b
 20281  001A06  A4D8               	btfss	status,2,c
 20282  001A08  D7F7               	goto	l2014
 20283  001A0A                     u7250:
 20284                           
 20285                           ; BSR set to: 0
 20286                           
 20287                           ; BSR set to: 0
 20288                           
 20289                           ; BSR set to: 0
 20290  001A0A  AF85               	btfss	___ftadd@sign& (0+255),7,b
 20291  001A0C  D00C               	goto	l2016
 20292                           
 20293                           ; BSR set to: 0
 20294  001A0E  0EFF               	movlw	255
 20295  001A10  1B7C               	xorwf	___ftadd@f1& (0+255),f,b
 20296  001A12  0EFF               	movlw	255
 20297  001A14  1B7D               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 20298  001A16  0EFF               	movlw	255
 20299  001A18  1B7E               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 20300  001A1A  0E01               	movlw	1
 20301  001A1C  277C               	addwf	___ftadd@f1& (0+255),f,b
 20302  001A1E  0E00               	movlw	0
 20303  001A20  237D               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 20304  001A22  0E00               	movlw	0
 20305  001A24  237E               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 20306  001A26                     l2016:
 20307                           
 20308                           ; BSR set to: 0
 20309  001A26  AD85               	btfss	___ftadd@sign& (0+255),6,b
 20310  001A28  D00C               	goto	l2017
 20311                           
 20312                           ; BSR set to: 0
 20313  001A2A  0EFF               	movlw	255
 20314  001A2C  1B7F               	xorwf	___ftadd@f2& (0+255),f,b
 20315  001A2E  0EFF               	movlw	255
 20316  001A30  1B80               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 20317  001A32  0EFF               	movlw	255
 20318  001A34  1B81               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 20319  001A36  0E01               	movlw	1
 20320  001A38  277F               	addwf	___ftadd@f2& (0+255),f,b
 20321  001A3A  0E00               	movlw	0
 20322  001A3C  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 20323  001A3E  0E00               	movlw	0
 20324  001A40  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 20325  001A42                     l2017:
 20326                           
 20327                           ; BSR set to: 0
 20328                           
 20329                           ; BSR set to: 0
 20330  001A42  0E00               	movlw	0
 20331  001A44  6F85               	movwf	___ftadd@sign& (0+255),b
 20332                           
 20333                           ; BSR set to: 0
 20334  001A46  517C               	movf	___ftadd@f1& (0+255),w,b
 20335  001A48  277F               	addwf	___ftadd@f2& (0+255),f,b
 20336  001A4A  517D               	movf	(___ftadd@f1+1)& (0+255),w,b
 20337  001A4C  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 20338  001A4E  517E               	movf	(___ftadd@f1+2)& (0+255),w,b
 20339  001A50  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 20340                           
 20341                           ; BSR set to: 0
 20342  001A52  AF81               	btfss	(___ftadd@f2+2)& (0+255),7,b
 20343  001A54  D00E               	goto	l2018
 20344                           
 20345                           ; BSR set to: 0
 20346  001A56  0EFF               	movlw	255
 20347  001A58  1B7F               	xorwf	___ftadd@f2& (0+255),f,b
 20348  001A5A  0EFF               	movlw	255
 20349  001A5C  1B80               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 20350  001A5E  0EFF               	movlw	255
 20351  001A60  1B81               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 20352  001A62  0E01               	movlw	1
 20353  001A64  277F               	addwf	___ftadd@f2& (0+255),f,b
 20354  001A66  0E00               	movlw	0
 20355  001A68  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 20356  001A6A  0E00               	movlw	0
 20357  001A6C  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 20358                           
 20359                           ; BSR set to: 0
 20360  001A6E  0E01               	movlw	1
 20361  001A70  6F85               	movwf	___ftadd@sign& (0+255),b
 20362  001A72                     l2018:
 20363                           
 20364                           ; BSR set to: 0
 20365                           
 20366                           ; BSR set to: 0
 20367  001A72  C07F  F018         	movff	___ftadd@f2,___ftpack@arg
 20368  001A76  C080  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 20369  001A7A  C081  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 20370  001A7E  C087  F01B         	movff	___ftadd@exp1,___ftpack@exp
 20371  001A82  C085  F01C         	movff	___ftadd@sign,___ftpack@sign
 20372  001A86  EC64  F01A         	call	___ftpack	;wreg free
 20373  001A8A  C018  F07C         	movff	?___ftpack,?___ftadd
 20374  001A8E  C019  F07D         	movff	?___ftpack+1,?___ftadd+1
 20375  001A92  C01A  F07E         	movff	?___ftpack+2,?___ftadd+2
 20376  001A96  0012               	return	
 20377  001A98                     __end_of___ftadd:
 20378                           	opt stack 0
 20379                           tosu	equ	0xFFF
 20380                           tosh	equ	0xFFE
 20381                           tosl	equ	0xFFD
 20382                           pclath	equ	0xFFA
 20383                           tblptru	equ	0xFF8
 20384                           tblptrh	equ	0xFF7
 20385                           tblptrl	equ	0xFF6
 20386                           tablat	equ	0xFF5
 20387                           prodh	equ	0xFF4
 20388                           prodl	equ	0xFF3
 20389                           intcon	equ	0xFF2
 20390                           intcon2	equ	0xFF1
 20391                           indf0	equ	0xFEF
 20392                           postinc0	equ	0xFEE
 20393                           fsr0h	equ	0xFEA
 20394                           fsr0l	equ	0xFE9
 20395                           wreg	equ	0xFE8
 20396                           indf1	equ	0xFE7
 20397                           postdec1	equ	0xFE5
 20398                           fsr1h	equ	0xFE2
 20399                           fsr1l	equ	0xFE1
 20400                           indf2	equ	0xFDF
 20401                           postinc2	equ	0xFDE
 20402                           postdec2	equ	0xFDD
 20403                           fsr2h	equ	0xFDA
 20404                           fsr2l	equ	0xFD9
 20405                           status	equ	0xFD8
 20406                           
 20407 ;; *************** function ___ftneg *****************
 20408 ;; Defined at:
 20409 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 20410 ;; Parameters:    Size  Location     Type
 20411 ;;  f1              3   23[COMRAM] float 
 20412 ;; Auto vars:     Size  Location     Type
 20413 ;;		None
 20414 ;; Return value:  Size  Location     Type
 20415 ;;                  3   23[COMRAM] float 
 20416 ;; Registers used:
 20417 ;;		wreg, status,2, status,0
 20418 ;; Tracked objects:
 20419 ;;		On entry : 0/0
 20420 ;;		On exit  : 0/0
 20421 ;;		Unchanged: 0/0
 20422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20423 ;;      Params:         3       0       0       0       0       0       0
 20424 ;;      Locals:         0       0       0       0       0       0       0
 20425 ;;      Temps:          0       0       0       0       0       0       0
 20426 ;;      Totals:         3       0       0       0       0       0       0
 20427 ;;Total ram usage:        3 bytes
 20428 ;; Hardware stack levels used:    1
 20429 ;; Hardware stack levels required when called:    3
 20430 ;; This function calls:
 20431 ;;		Nothing
 20432 ;; This function is called by:
 20433 ;;		_sprintf
 20434 ;;		_pow
 20435 ;;		_exp
 20436 ;; This function uses a non-reentrant model
 20437 ;;
 20438                           
 20439                           	psect	text89
 20440  0046CC                     __ptext89:
 20441                           	opt stack 0
 20442  0046CC                     ___ftneg:
 20443                           	opt stack 25
 20444                           
 20445                           ;incstack = 0
 20446  0046CC  5018               	movf	___ftneg@f1,w,c
 20447  0046CE  1019               	iorwf	___ftneg@f1+1,w,c
 20448  0046D0  101A               	iorwf	___ftneg@f1+2,w,c
 20449  0046D2  B4D8               	btfsc	status,2,c
 20450  0046D4  D006               	goto	l2066
 20451  0046D6  0E00               	movlw	0
 20452  0046D8  1A18               	xorwf	___ftneg@f1,f,c
 20453  0046DA  0E00               	movlw	0
 20454  0046DC  1A19               	xorwf	___ftneg@f1+1,f,c
 20455  0046DE  0E80               	movlw	128
 20456  0046E0  1A1A               	xorwf	___ftneg@f1+2,f,c
 20457  0046E2                     l2066:
 20458  0046E2  C018  F018         	movff	___ftneg@f1,?___ftneg
 20459  0046E6  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 20460  0046EA  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 20461  0046EE  0012               	return		;funcret
 20462  0046F0                     __end_of___ftneg:
 20463                           	opt stack 0
 20464                           tosu	equ	0xFFF
 20465                           tosh	equ	0xFFE
 20466                           tosl	equ	0xFFD
 20467                           pclath	equ	0xFFA
 20468                           tblptru	equ	0xFF8
 20469                           tblptrh	equ	0xFF7
 20470                           tblptrl	equ	0xFF6
 20471                           tablat	equ	0xFF5
 20472                           prodh	equ	0xFF4
 20473                           prodl	equ	0xFF3
 20474                           intcon	equ	0xFF2
 20475                           intcon2	equ	0xFF1
 20476                           indf0	equ	0xFEF
 20477                           postinc0	equ	0xFEE
 20478                           fsr0h	equ	0xFEA
 20479                           fsr0l	equ	0xFE9
 20480                           wreg	equ	0xFE8
 20481                           indf1	equ	0xFE7
 20482                           postdec1	equ	0xFE5
 20483                           fsr1h	equ	0xFE2
 20484                           fsr1l	equ	0xFE1
 20485                           indf2	equ	0xFDF
 20486                           postinc2	equ	0xFDE
 20487                           postdec2	equ	0xFDD
 20488                           fsr2h	equ	0xFDA
 20489                           fsr2l	equ	0xFD9
 20490                           status	equ	0xFD8
 20491                           
 20492 ;; *************** function ___ftdiv *****************
 20493 ;; Defined at:
 20494 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 20495 ;; Parameters:    Size  Location     Type
 20496 ;;  f1              3   34[COMRAM] float 
 20497 ;;  f2              3   37[COMRAM] float 
 20498 ;; Auto vars:     Size  Location     Type
 20499 ;;  f3              3    1[BANK0 ] float 
 20500 ;;  sign            1    5[BANK0 ] unsigned char 
 20501 ;;  exp             1    4[BANK0 ] unsigned char 
 20502 ;;  cntr            1    0[BANK0 ] unsigned char 
 20503 ;; Return value:  Size  Location     Type
 20504 ;;                  3   34[COMRAM] float 
 20505 ;; Registers used:
 20506 ;;		wreg, status,2, status,0, cstack
 20507 ;; Tracked objects:
 20508 ;;		On entry : 0/0
 20509 ;;		On exit  : 0/0
 20510 ;;		Unchanged: 0/0
 20511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20512 ;;      Params:         6       0       0       0       0       0       0
 20513 ;;      Locals:         0       6       0       0       0       0       0
 20514 ;;      Temps:          3       0       0       0       0       0       0
 20515 ;;      Totals:         9       6       0       0       0       0       0
 20516 ;;Total ram usage:       15 bytes
 20517 ;; Hardware stack levels used:    1
 20518 ;; Hardware stack levels required when called:    4
 20519 ;; This function calls:
 20520 ;;		___ftpack
 20521 ;; This function is called by:
 20522 ;;		_SampleSingleChannel
 20523 ;;		_SampleAllChannels
 20524 ;;		_exp
 20525 ;;		_DacAnalogToDigitalSpi
 20526 ;; This function uses a non-reentrant model
 20527 ;;
 20528                           
 20529                           	psect	text90
 20530  002D5A                     __ptext90:
 20531                           	opt stack 0
 20532  002D5A                     ___ftdiv:
 20533                           	opt stack 22
 20534                           
 20535                           ;incstack = 0
 20536  002D5A  C025  F029         	movff	___ftdiv@f1+2,??___ftdiv
 20537  002D5E  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 20538  002D60  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 20539  002D62  3424               	rlcf	___ftdiv@f1+1,w,c
 20540  002D64  3629               	rlcf	??___ftdiv& (0+255),f,c
 20541  002D66  E301               	bnc	u7551
 20542  002D68  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 20543  002D6A                     u7551:
 20544  002D6A  5029               	movf	??___ftdiv,w,c
 20545  002D6C  0100               	movlb	0	; () banked
 20546  002D6E  6F64               	movwf	___ftdiv@exp& (0+255),b
 20547  002D70  5164               	movf	___ftdiv@exp& (0+255),w,b
 20548  002D72  A4D8               	btfss	status,2,c
 20549  002D74  D007               	goto	l2023
 20550                           
 20551                           ; BSR set to: 0
 20552  002D76  0E00               	movlw	0
 20553  002D78  6E23               	movwf	?___ftdiv,c
 20554  002D7A  0E00               	movlw	0
 20555  002D7C  6E24               	movwf	?___ftdiv+1,c
 20556  002D7E  0E00               	movlw	0
 20557  002D80  6E25               	movwf	?___ftdiv+2,c
 20558                           
 20559                           ; BSR set to: 0
 20560  002D82  0012               	return	
 20561  002D84                     l2023:
 20562                           
 20563                           ; BSR set to: 0
 20564                           
 20565                           ; BSR set to: 0
 20566  002D84  C028  F029         	movff	___ftdiv@f2+2,??___ftdiv
 20567  002D88  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 20568  002D8A  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 20569  002D8C  3427               	rlcf	___ftdiv@f2+1,w,c
 20570  002D8E  3629               	rlcf	??___ftdiv& (0+255),f,c
 20571  002D90  E301               	bnc	u7571
 20572  002D92  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 20573  002D94                     u7571:
 20574  002D94  5029               	movf	??___ftdiv,w,c
 20575  002D96  6F65               	movwf	___ftdiv@sign& (0+255),b
 20576  002D98  5165               	movf	___ftdiv@sign& (0+255),w,b
 20577  002D9A  A4D8               	btfss	status,2,c
 20578  002D9C  D007               	goto	l2025
 20579                           
 20580                           ; BSR set to: 0
 20581  002D9E  0E00               	movlw	0
 20582  002DA0  6E23               	movwf	?___ftdiv,c
 20583  002DA2  0E00               	movlw	0
 20584  002DA4  6E24               	movwf	?___ftdiv+1,c
 20585  002DA6  0E00               	movlw	0
 20586  002DA8  6E25               	movwf	?___ftdiv+2,c
 20587                           
 20588                           ; BSR set to: 0
 20589  002DAA  0012               	return	
 20590  002DAC                     l2025:
 20591                           
 20592                           ; BSR set to: 0
 20593                           
 20594                           ; BSR set to: 0
 20595  002DAC  0E00               	movlw	0
 20596  002DAE  6F61               	movwf	___ftdiv@f3& (0+255),b
 20597  002DB0  0E00               	movlw	0
 20598  002DB2  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
 20599  002DB4  0E00               	movlw	0
 20600  002DB6  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
 20601                           
 20602                           ; BSR set to: 0
 20603  002DB8  5165               	movf	___ftdiv@sign& (0+255),w,b
 20604  002DBA  0F89               	addlw	137
 20605  002DBC  5F64               	subwf	___ftdiv@exp& (0+255),f,b
 20606                           
 20607                           ; BSR set to: 0
 20608  002DBE  C025  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
 20609                           
 20610                           ; BSR set to: 0
 20611  002DC2  5028               	movf	___ftdiv@f2+2,w,c
 20612  002DC4  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
 20613                           
 20614                           ; BSR set to: 0
 20615  002DC6  0E80               	movlw	128
 20616  002DC8  1765               	andwf	___ftdiv@sign& (0+255),f,b
 20617                           
 20618                           ; BSR set to: 0
 20619  002DCA  8E24               	bsf	___ftdiv@f1+1,7,c
 20620                           
 20621                           ; BSR set to: 0
 20622  002DCC  0EFF               	movlw	255
 20623  002DCE  1623               	andwf	___ftdiv@f1,f,c
 20624  002DD0  0EFF               	movlw	255
 20625  002DD2  1624               	andwf	___ftdiv@f1+1,f,c
 20626  002DD4  0E00               	movlw	0
 20627  002DD6  1625               	andwf	___ftdiv@f1+2,f,c
 20628                           
 20629                           ; BSR set to: 0
 20630  002DD8  8E27               	bsf	___ftdiv@f2+1,7,c
 20631                           
 20632                           ; BSR set to: 0
 20633  002DDA  0EFF               	movlw	255
 20634  002DDC  1626               	andwf	___ftdiv@f2,f,c
 20635  002DDE  0EFF               	movlw	255
 20636  002DE0  1627               	andwf	___ftdiv@f2+1,f,c
 20637  002DE2  0E00               	movlw	0
 20638  002DE4  1628               	andwf	___ftdiv@f2+2,f,c
 20639                           
 20640                           ; BSR set to: 0
 20641  002DE6  0E18               	movlw	24
 20642  002DE8  6F60               	movwf	___ftdiv@cntr& (0+255),b
 20643  002DEA                     
 20644                           ; BSR set to: 0
 20645                           
 20646                           ; BSR set to: 0
 20647  002DEA  90D8               	bcf	status,0,c
 20648  002DEC  3761               	rlcf	___ftdiv@f3& (0+255),f,b
 20649  002DEE  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 20650  002DF0  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 20651                           
 20652                           ; BSR set to: 0
 20653  002DF2  5026               	movf	___ftdiv@f2,w,c
 20654  002DF4  5C23               	subwf	___ftdiv@f1,w,c
 20655  002DF6  5027               	movf	___ftdiv@f2+1,w,c
 20656  002DF8  5824               	subwfb	___ftdiv@f1+1,w,c
 20657  002DFA  5028               	movf	___ftdiv@f2+2,w,c
 20658  002DFC  5825               	subwfb	___ftdiv@f1+2,w,c
 20659  002DFE  A0D8               	btfss	status,0,c
 20660  002E00  D007               	goto	l2027
 20661                           
 20662                           ; BSR set to: 0
 20663  002E02  5026               	movf	___ftdiv@f2,w,c
 20664  002E04  5E23               	subwf	___ftdiv@f1,f,c
 20665  002E06  5027               	movf	___ftdiv@f2+1,w,c
 20666  002E08  5A24               	subwfb	___ftdiv@f1+1,f,c
 20667  002E0A  5028               	movf	___ftdiv@f2+2,w,c
 20668  002E0C  5A25               	subwfb	___ftdiv@f1+2,f,c
 20669                           
 20670                           ; BSR set to: 0
 20671  002E0E  8161               	bsf	___ftdiv@f3& (0+255),0,b
 20672  002E10                     l2027:
 20673                           
 20674                           ; BSR set to: 0
 20675  002E10  90D8               	bcf	status,0,c
 20676  002E12  3623               	rlcf	___ftdiv@f1,f,c
 20677  002E14  3624               	rlcf	___ftdiv@f1+1,f,c
 20678  002E16  3625               	rlcf	___ftdiv@f1+2,f,c
 20679                           
 20680                           ; BSR set to: 0
 20681  002E18  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
 20682  002E1A  D7E7               	goto	l2026
 20683                           
 20684                           ; BSR set to: 0
 20685                           
 20686                           ; BSR set to: 0
 20687  002E1C  C061  F018         	movff	___ftdiv@f3,___ftpack@arg
 20688  002E20  C062  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 20689  002E24  C063  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 20690  002E28  C064  F01B         	movff	___ftdiv@exp,___ftpack@exp
 20691  002E2C  C065  F01C         	movff	___ftdiv@sign,___ftpack@sign
 20692  002E30  EC64  F01A         	call	___ftpack	;wreg free
 20693  002E34  C018  F023         	movff	?___ftpack,?___ftdiv
 20694  002E38  C019  F024         	movff	?___ftpack+1,?___ftdiv+1
 20695  002E3C  C01A  F025         	movff	?___ftpack+2,?___ftdiv+2
 20696  002E40  0012               	return	
 20697  002E42                     __end_of___ftdiv:
 20698                           	opt stack 0
 20699                           tosu	equ	0xFFF
 20700                           tosh	equ	0xFFE
 20701                           tosl	equ	0xFFD
 20702                           pclath	equ	0xFFA
 20703                           tblptru	equ	0xFF8
 20704                           tblptrh	equ	0xFF7
 20705                           tblptrl	equ	0xFF6
 20706                           tablat	equ	0xFF5
 20707                           prodh	equ	0xFF4
 20708                           prodl	equ	0xFF3
 20709                           intcon	equ	0xFF2
 20710                           intcon2	equ	0xFF1
 20711                           indf0	equ	0xFEF
 20712                           postinc0	equ	0xFEE
 20713                           fsr0h	equ	0xFEA
 20714                           fsr0l	equ	0xFE9
 20715                           wreg	equ	0xFE8
 20716                           indf1	equ	0xFE7
 20717                           postdec1	equ	0xFE5
 20718                           fsr1h	equ	0xFE2
 20719                           fsr1l	equ	0xFE1
 20720                           indf2	equ	0xFDF
 20721                           postinc2	equ	0xFDE
 20722                           postdec2	equ	0xFDD
 20723                           fsr2h	equ	0xFDA
 20724                           fsr2l	equ	0xFD9
 20725                           status	equ	0xFD8
 20726                           
 20727 ;; *************** function ___awtoft *****************
 20728 ;; Defined at:
 20729 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 20730 ;; Parameters:    Size  Location     Type
 20731 ;;  c               2   31[COMRAM] int 
 20732 ;; Auto vars:     Size  Location     Type
 20733 ;;  sign            1   34[COMRAM] unsigned char 
 20734 ;; Return value:  Size  Location     Type
 20735 ;;                  3   31[COMRAM] float 
 20736 ;; Registers used:
 20737 ;;		wreg, status,2, status,0, cstack
 20738 ;; Tracked objects:
 20739 ;;		On entry : 0/0
 20740 ;;		On exit  : 0/0
 20741 ;;		Unchanged: 0/0
 20742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20743 ;;      Params:         3       0       0       0       0       0       0
 20744 ;;      Locals:         1       0       0       0       0       0       0
 20745 ;;      Temps:          0       0       0       0       0       0       0
 20746 ;;      Totals:         4       0       0       0       0       0       0
 20747 ;;Total ram usage:        4 bytes
 20748 ;; Hardware stack levels used:    1
 20749 ;; Hardware stack levels required when called:    4
 20750 ;; This function calls:
 20751 ;;		___ftpack
 20752 ;; This function is called by:
 20753 ;;		_GroupRx
 20754 ;;		_GroupTx
 20755 ;;		_ReadIntFromEeprom
 20756 ;;		_exp
 20757 ;;		_log
 20758 ;;		_DacSetValue
 20759 ;; This function uses a non-reentrant model
 20760 ;;
 20761                           
 20762                           	psect	text91
 20763  004496                     __ptext91:
 20764                           	opt stack 0
 20765  004496                     ___awtoft:
 20766                           	opt stack 22
 20767                           
 20768                           ;incstack = 0
 20769  004496  0E00               	movlw	0
 20770  004498  6E23               	movwf	___awtoft@sign,c
 20771  00449A  AE21               	btfss	___awtoft@c+1,7,c
 20772  00449C  D006               	goto	l1923
 20773  00449E  6C20               	negf	___awtoft@c,c
 20774  0044A0  1E21               	comf	___awtoft@c+1,f,c
 20775  0044A2  B0D8               	btfsc	status,0,c
 20776  0044A4  2A21               	incf	___awtoft@c+1,f,c
 20777  0044A6  0E01               	movlw	1
 20778  0044A8  6E23               	movwf	___awtoft@sign,c
 20779  0044AA                     l1923:
 20780  0044AA  C020  F018         	movff	___awtoft@c,___ftpack@arg
 20781  0044AE  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 20782  0044B2  6A1A               	clrf	___ftpack@arg+2,c
 20783  0044B4  0E8E               	movlw	142
 20784  0044B6  6E1B               	movwf	___ftpack@exp,c
 20785  0044B8  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 20786  0044BC  EC64  F01A         	call	___ftpack	;wreg free
 20787  0044C0  C018  F020         	movff	?___ftpack,?___awtoft
 20788  0044C4  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 20789  0044C8  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 20790  0044CC  0012               	return	
 20791  0044CE                     __end_of___awtoft:
 20792                           	opt stack 0
 20793                           tosu	equ	0xFFF
 20794                           tosh	equ	0xFFE
 20795                           tosl	equ	0xFFD
 20796                           pclath	equ	0xFFA
 20797                           tblptru	equ	0xFF8
 20798                           tblptrh	equ	0xFF7
 20799                           tblptrl	equ	0xFF6
 20800                           tablat	equ	0xFF5
 20801                           prodh	equ	0xFF4
 20802                           prodl	equ	0xFF3
 20803                           intcon	equ	0xFF2
 20804                           intcon2	equ	0xFF1
 20805                           indf0	equ	0xFEF
 20806                           postinc0	equ	0xFEE
 20807                           fsr0h	equ	0xFEA
 20808                           fsr0l	equ	0xFE9
 20809                           wreg	equ	0xFE8
 20810                           indf1	equ	0xFE7
 20811                           postdec1	equ	0xFE5
 20812                           fsr1h	equ	0xFE2
 20813                           fsr1l	equ	0xFE1
 20814                           indf2	equ	0xFDF
 20815                           postinc2	equ	0xFDE
 20816                           postdec2	equ	0xFDD
 20817                           fsr2h	equ	0xFDA
 20818                           fsr2l	equ	0xFD9
 20819                           status	equ	0xFD8
 20820                           
 20821 ;; *************** function ___lltoft *****************
 20822 ;; Defined at:
 20823 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 20824 ;; Parameters:    Size  Location     Type
 20825 ;;  c               4   31[COMRAM] unsigned long 
 20826 ;; Auto vars:     Size  Location     Type
 20827 ;;  exp             1   39[COMRAM] unsigned char 
 20828 ;; Return value:  Size  Location     Type
 20829 ;;                  3   31[COMRAM] float 
 20830 ;; Registers used:
 20831 ;;		wreg, status,2, status,0, cstack
 20832 ;; Tracked objects:
 20833 ;;		On entry : 0/0
 20834 ;;		On exit  : 0/0
 20835 ;;		Unchanged: 0/0
 20836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20837 ;;      Params:         4       0       0       0       0       0       0
 20838 ;;      Locals:         1       0       0       0       0       0       0
 20839 ;;      Temps:          4       0       0       0       0       0       0
 20840 ;;      Totals:         9       0       0       0       0       0       0
 20841 ;;Total ram usage:        9 bytes
 20842 ;; Hardware stack levels used:    1
 20843 ;; Hardware stack levels required when called:    4
 20844 ;; This function calls:
 20845 ;;		___ftpack
 20846 ;; This function is called by:
 20847 ;;		_CollectRxStatusParams
 20848 ;;		_CollectTxStatusParams
 20849 ;;		_sprintf
 20850 ;;		_pow
 20851 ;; This function uses a non-reentrant model
 20852 ;;
 20853                           
 20854                           	psect	text92
 20855  003FB0                     __ptext92:
 20856                           	opt stack 0
 20857  003FB0                     ___lltoft:
 20858                           	opt stack 24
 20859                           
 20860                           ;incstack = 0
 20861  003FB0  0E8E               	movlw	142
 20862  003FB2  6E28               	movwf	___lltoft@exp,c
 20863  003FB4  D006               	goto	l2133
 20864  003FB6  90D8               	bcf	status,0,c
 20865  003FB8  3223               	rrcf	___lltoft@c+3,f,c
 20866  003FBA  3222               	rrcf	___lltoft@c+2,f,c
 20867  003FBC  3221               	rrcf	___lltoft@c+1,f,c
 20868  003FBE  3220               	rrcf	___lltoft@c,f,c
 20869  003FC0  2A28               	incf	___lltoft@exp,f,c
 20870  003FC2                     l2133:
 20871  003FC2  0E00               	movlw	0
 20872  003FC4  1420               	andwf	___lltoft@c,w,c
 20873  003FC6  6E24               	movwf	??___lltoft& (0+255),c
 20874  003FC8  0E00               	movlw	0
 20875  003FCA  1421               	andwf	___lltoft@c+1,w,c
 20876  003FCC  6E25               	movwf	(??___lltoft+1)& (0+255),c
 20877  003FCE  0E00               	movlw	0
 20878  003FD0  1422               	andwf	___lltoft@c+2,w,c
 20879  003FD2  6E26               	movwf	(??___lltoft+2)& (0+255),c
 20880  003FD4  0EFF               	movlw	255
 20881  003FD6  1423               	andwf	___lltoft@c+3,w,c
 20882  003FD8  6E27               	movwf	(??___lltoft+3)& (0+255),c
 20883  003FDA  5024               	movf	??___lltoft,w,c
 20884  003FDC  1025               	iorwf	??___lltoft+1,w,c
 20885  003FDE  1026               	iorwf	??___lltoft+2,w,c
 20886  003FE0  1027               	iorwf	??___lltoft+3,w,c
 20887  003FE2  A4D8               	btfss	status,2,c
 20888  003FE4  D7E8               	goto	l2134
 20889  003FE6  C020  F018         	movff	___lltoft@c,___ftpack@arg
 20890  003FEA  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 20891  003FEE  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 20892  003FF2  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 20893  003FF6  0E00               	movlw	0
 20894  003FF8  6E1C               	movwf	___ftpack@sign,c
 20895  003FFA  EC64  F01A         	call	___ftpack	;wreg free
 20896  003FFE  C018  F020         	movff	?___ftpack,?___lltoft
 20897  004002  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 20898  004006  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 20899  00400A  0012               	return	
 20900  00400C                     __end_of___lltoft:
 20901                           	opt stack 0
 20902                           tosu	equ	0xFFF
 20903                           tosh	equ	0xFFE
 20904                           tosl	equ	0xFFD
 20905                           pclath	equ	0xFFA
 20906                           tblptru	equ	0xFF8
 20907                           tblptrh	equ	0xFF7
 20908                           tblptrl	equ	0xFF6
 20909                           tablat	equ	0xFF5
 20910                           prodh	equ	0xFF4
 20911                           prodl	equ	0xFF3
 20912                           intcon	equ	0xFF2
 20913                           intcon2	equ	0xFF1
 20914                           indf0	equ	0xFEF
 20915                           postinc0	equ	0xFEE
 20916                           fsr0h	equ	0xFEA
 20917                           fsr0l	equ	0xFE9
 20918                           wreg	equ	0xFE8
 20919                           indf1	equ	0xFE7
 20920                           postdec1	equ	0xFE5
 20921                           fsr1h	equ	0xFE2
 20922                           fsr1l	equ	0xFE1
 20923                           indf2	equ	0xFDF
 20924                           postinc2	equ	0xFDE
 20925                           postdec2	equ	0xFDD
 20926                           fsr2h	equ	0xFDA
 20927                           fsr2l	equ	0xFD9
 20928                           status	equ	0xFD8
 20929                           
 20930 ;; *************** function ___ftpack *****************
 20931 ;; Defined at:
 20932 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 20933 ;; Parameters:    Size  Location     Type
 20934 ;;  arg             3   23[COMRAM] unsigned um
 20935 ;;  exp             1   26[COMRAM] unsigned char 
 20936 ;;  sign            1   27[COMRAM] unsigned char 
 20937 ;; Auto vars:     Size  Location     Type
 20938 ;;		None
 20939 ;; Return value:  Size  Location     Type
 20940 ;;                  3   23[COMRAM] float 
 20941 ;; Registers used:
 20942 ;;		wreg, status,2, status,0
 20943 ;; Tracked objects:
 20944 ;;		On entry : 0/0
 20945 ;;		On exit  : 0/0
 20946 ;;		Unchanged: 0/0
 20947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20948 ;;      Params:         5       0       0       0       0       0       0
 20949 ;;      Locals:         0       0       0       0       0       0       0
 20950 ;;      Temps:          3       0       0       0       0       0       0
 20951 ;;      Totals:         8       0       0       0       0       0       0
 20952 ;;Total ram usage:        8 bytes
 20953 ;; Hardware stack levels used:    1
 20954 ;; Hardware stack levels required when called:    3
 20955 ;; This function calls:
 20956 ;;		Nothing
 20957 ;; This function is called by:
 20958 ;;		___altoft
 20959 ;;		___awtoft
 20960 ;;		___ftadd
 20961 ;;		___ftdiv
 20962 ;;		___ftmul
 20963 ;;		___lltoft
 20964 ;;		___lwtoft
 20965 ;; This function uses a non-reentrant model
 20966 ;;
 20967                           
 20968                           	psect	text93
 20969  0034C8                     __ptext93:
 20970                           	opt stack 0
 20971  0034C8                     ___ftpack:
 20972                           	opt stack 23
 20973                           
 20974                           ;incstack = 0
 20975  0034C8  501B               	movf	___ftpack@exp,w,c
 20976  0034CA  B4D8               	btfsc	status,2,c
 20977  0034CC  D005               	goto	u6990
 20978  0034CE  5018               	movf	___ftpack@arg,w,c
 20979  0034D0  1019               	iorwf	___ftpack@arg+1,w,c
 20980  0034D2  101A               	iorwf	___ftpack@arg+2,w,c
 20981  0034D4  A4D8               	btfss	status,2,c
 20982  0034D6  D00C               	goto	l1959
 20983  0034D8                     u6990:
 20984  0034D8  0E00               	movlw	0
 20985  0034DA  6E18               	movwf	?___ftpack,c
 20986  0034DC  0E00               	movlw	0
 20987  0034DE  6E19               	movwf	?___ftpack+1,c
 20988  0034E0  0E00               	movlw	0
 20989  0034E2  6E1A               	movwf	?___ftpack+2,c
 20990  0034E4  0012               	return	
 20991  0034E6  2A1B               	incf	___ftpack@exp,f,c
 20992  0034E8  90D8               	bcf	status,0,c
 20993  0034EA  321A               	rrcf	___ftpack@arg+2,f,c
 20994  0034EC  3219               	rrcf	___ftpack@arg+1,f,c
 20995  0034EE  3218               	rrcf	___ftpack@arg,f,c
 20996  0034F0                     l1959:
 20997  0034F0  0E00               	movlw	0
 20998  0034F2  1418               	andwf	___ftpack@arg,w,c
 20999  0034F4  6E1D               	movwf	??___ftpack& (0+255),c
 21000  0034F6  0E00               	movlw	0
 21001  0034F8  1419               	andwf	___ftpack@arg+1,w,c
 21002  0034FA  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 21003  0034FC  0EFE               	movlw	254
 21004  0034FE  141A               	andwf	___ftpack@arg+2,w,c
 21005  003500  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 21006  003502  501D               	movf	??___ftpack,w,c
 21007  003504  101E               	iorwf	??___ftpack+1,w,c
 21008  003506  101F               	iorwf	??___ftpack+2,w,c
 21009  003508  B4D8               	btfsc	status,2,c
 21010  00350A  D00C               	goto	l1962
 21011  00350C  D7EC               	goto	l1960
 21012  00350E  2A1B               	incf	___ftpack@exp,f,c
 21013  003510  0E01               	movlw	1
 21014  003512  2618               	addwf	___ftpack@arg,f,c
 21015  003514  0E00               	movlw	0
 21016  003516  2219               	addwfc	___ftpack@arg+1,f,c
 21017  003518  0E00               	movlw	0
 21018  00351A  221A               	addwfc	___ftpack@arg+2,f,c
 21019  00351C  90D8               	bcf	status,0,c
 21020  00351E  321A               	rrcf	___ftpack@arg+2,f,c
 21021  003520  3219               	rrcf	___ftpack@arg+1,f,c
 21022  003522  3218               	rrcf	___ftpack@arg,f,c
 21023  003524                     l1962:
 21024  003524  0E00               	movlw	0
 21025  003526  1418               	andwf	___ftpack@arg,w,c
 21026  003528  6E1D               	movwf	??___ftpack& (0+255),c
 21027  00352A  0E00               	movlw	0
 21028  00352C  1419               	andwf	___ftpack@arg+1,w,c
 21029  00352E  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 21030  003530  0EFF               	movlw	255
 21031  003532  141A               	andwf	___ftpack@arg+2,w,c
 21032  003534  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 21033  003536  501D               	movf	??___ftpack,w,c
 21034  003538  101E               	iorwf	??___ftpack+1,w,c
 21035  00353A  101F               	iorwf	??___ftpack+2,w,c
 21036  00353C  B4D8               	btfsc	status,2,c
 21037  00353E  D006               	goto	l1965
 21038  003540  D7E6               	goto	l1963
 21039  003542  061B               	decf	___ftpack@exp,f,c
 21040  003544  90D8               	bcf	status,0,c
 21041  003546  3618               	rlcf	___ftpack@arg,f,c
 21042  003548  3619               	rlcf	___ftpack@arg+1,f,c
 21043  00354A  361A               	rlcf	___ftpack@arg+2,f,c
 21044  00354C                     l1965:
 21045  00354C  BE19               	btfsc	___ftpack@arg+1,7,c
 21046  00354E  D003               	goto	u7030
 21047  003550  0E02               	movlw	2
 21048  003552  601B               	cpfslt	___ftpack@exp,c
 21049  003554  D7F6               	goto	l1966
 21050  003556                     u7030:
 21051  003556  A01B               	btfss	___ftpack@exp,0,c
 21052  003558  9E19               	bcf	___ftpack@arg+1,7,c
 21053  00355A  90D8               	bcf	status,0,c
 21054  00355C  321B               	rrcf	___ftpack@exp,f,c
 21055  00355E  501B               	movf	___ftpack@exp,w,c
 21056  003560  121A               	iorwf	___ftpack@arg+2,f,c
 21057  003562  501C               	movf	___ftpack@sign,w,c
 21058  003564  A4D8               	btfss	status,2,c
 21059  003566  8E1A               	bsf	___ftpack@arg+2,7,c
 21060  003568  C018  F018         	movff	___ftpack@arg,?___ftpack
 21061  00356C  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 21062  003570  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 21063  003574  0012               	return	
 21064  003576                     __end_of___ftpack:
 21065                           	opt stack 0
 21066                           tosu	equ	0xFFF
 21067                           tosh	equ	0xFFE
 21068                           tosl	equ	0xFFD
 21069                           pclath	equ	0xFFA
 21070                           tblptru	equ	0xFF8
 21071                           tblptrh	equ	0xFF7
 21072                           tblptrl	equ	0xFF6
 21073                           tablat	equ	0xFF5
 21074                           prodh	equ	0xFF4
 21075                           prodl	equ	0xFF3
 21076                           intcon	equ	0xFF2
 21077                           intcon2	equ	0xFF1
 21078                           indf0	equ	0xFEF
 21079                           postinc0	equ	0xFEE
 21080                           fsr0h	equ	0xFEA
 21081                           fsr0l	equ	0xFE9
 21082                           wreg	equ	0xFE8
 21083                           indf1	equ	0xFE7
 21084                           postdec1	equ	0xFE5
 21085                           fsr1h	equ	0xFE2
 21086                           fsr1l	equ	0xFE1
 21087                           indf2	equ	0xFDF
 21088                           postinc2	equ	0xFDE
 21089                           postdec2	equ	0xFDD
 21090                           fsr2h	equ	0xFDA
 21091                           fsr2l	equ	0xFD9
 21092                           status	equ	0xFD8
 21093                           
 21094 ;; *************** function ___lmul *****************
 21095 ;; Defined at:
 21096 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 21097 ;; Parameters:    Size  Location     Type
 21098 ;;  multiplier      4   25[COMRAM] unsigned long 
 21099 ;;  multiplicand    4   29[COMRAM] unsigned long 
 21100 ;; Auto vars:     Size  Location     Type
 21101 ;;  product         4   33[COMRAM] unsigned long 
 21102 ;; Return value:  Size  Location     Type
 21103 ;;                  4   25[COMRAM] unsigned long 
 21104 ;; Registers used:
 21105 ;;		wreg, status,2, status,0
 21106 ;; Tracked objects:
 21107 ;;		On entry : 0/0
 21108 ;;		On exit  : 0/0
 21109 ;;		Unchanged: 0/0
 21110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21111 ;;      Params:         8       0       0       0       0       0       0
 21112 ;;      Locals:         4       0       0       0       0       0       0
 21113 ;;      Temps:          0       0       0       0       0       0       0
 21114 ;;      Totals:        12       0       0       0       0       0       0
 21115 ;;Total ram usage:       12 bytes
 21116 ;; Hardware stack levels used:    1
 21117 ;; Hardware stack levels required when called:    3
 21118 ;; This function calls:
 21119 ;;		Nothing
 21120 ;; This function is called by:
 21121 ;;		_ReadIntFromEeprom
 21122 ;;		_strtol
 21123 ;; This function uses a non-reentrant model
 21124 ;;
 21125                           
 21126                           	psect	text94
 21127  004168                     __ptext94:
 21128                           	opt stack 0
 21129  004168                     ___lmul:
 21130                           	opt stack 23
 21131                           
 21132                           ;incstack = 0
 21133  004168  0E00               	movlw	0
 21134  00416A  6E22               	movwf	___lmul@product,c
 21135  00416C  0E00               	movlw	0
 21136  00416E  6E23               	movwf	___lmul@product+1,c
 21137  004170  0E00               	movlw	0
 21138  004172  6E24               	movwf	___lmul@product+2,c
 21139  004174  0E00               	movlw	0
 21140  004176  6E25               	movwf	___lmul@product+3,c
 21141  004178  A01A               	btfss	___lmul@multiplier,0,c
 21142  00417A  D008               	goto	l1740
 21143  00417C  501E               	movf	___lmul@multiplicand,w,c
 21144  00417E  2622               	addwf	___lmul@product,f,c
 21145  004180  501F               	movf	___lmul@multiplicand+1,w,c
 21146  004182  2223               	addwfc	___lmul@product+1,f,c
 21147  004184  5020               	movf	___lmul@multiplicand+2,w,c
 21148  004186  2224               	addwfc	___lmul@product+2,f,c
 21149  004188  5021               	movf	___lmul@multiplicand+3,w,c
 21150  00418A  2225               	addwfc	___lmul@product+3,f,c
 21151  00418C                     l1740:
 21152  00418C  90D8               	bcf	status,0,c
 21153  00418E  361E               	rlcf	___lmul@multiplicand,f,c
 21154  004190  361F               	rlcf	___lmul@multiplicand+1,f,c
 21155  004192  3620               	rlcf	___lmul@multiplicand+2,f,c
 21156  004194  3621               	rlcf	___lmul@multiplicand+3,f,c
 21157  004196  90D8               	bcf	status,0,c
 21158  004198  321D               	rrcf	___lmul@multiplier+3,f,c
 21159  00419A  321C               	rrcf	___lmul@multiplier+2,f,c
 21160  00419C  321B               	rrcf	___lmul@multiplier+1,f,c
 21161  00419E  321A               	rrcf	___lmul@multiplier,f,c
 21162  0041A0  501A               	movf	___lmul@multiplier,w,c
 21163  0041A2  101B               	iorwf	___lmul@multiplier+1,w,c
 21164  0041A4  101C               	iorwf	___lmul@multiplier+2,w,c
 21165  0041A6  101D               	iorwf	___lmul@multiplier+3,w,c
 21166  0041A8  A4D8               	btfss	status,2,c
 21167  0041AA  D7E6               	goto	l1739
 21168  0041AC  C022  F01A         	movff	___lmul@product,?___lmul
 21169  0041B0  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 21170  0041B4  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 21171  0041B8  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 21172  0041BC  0012               	return		;funcret
 21173  0041BE                     __end_of___lmul:
 21174                           	opt stack 0
 21175                           tosu	equ	0xFFF
 21176                           tosh	equ	0xFFE
 21177                           tosl	equ	0xFFD
 21178                           pclath	equ	0xFFA
 21179                           tblptru	equ	0xFF8
 21180                           tblptrh	equ	0xFF7
 21181                           tblptrl	equ	0xFF6
 21182                           tablat	equ	0xFF5
 21183                           prodh	equ	0xFF4
 21184                           prodl	equ	0xFF3
 21185                           intcon	equ	0xFF2
 21186                           intcon2	equ	0xFF1
 21187                           indf0	equ	0xFEF
 21188                           postinc0	equ	0xFEE
 21189                           fsr0h	equ	0xFEA
 21190                           fsr0l	equ	0xFE9
 21191                           wreg	equ	0xFE8
 21192                           indf1	equ	0xFE7
 21193                           postdec1	equ	0xFE5
 21194                           fsr1h	equ	0xFE2
 21195                           fsr1l	equ	0xFE1
 21196                           indf2	equ	0xFDF
 21197                           postinc2	equ	0xFDE
 21198                           postdec2	equ	0xFDD
 21199                           fsr2h	equ	0xFDA
 21200                           fsr2l	equ	0xFD9
 21201                           status	equ	0xFD8
 21202                           
 21203 ;; *************** function _EepromRead *****************
 21204 ;; Defined at:
 21205 ;;		line 13 in file "FlashApp.c"
 21206 ;; Parameters:    Size  Location     Type
 21207 ;;  address         1    wreg     unsigned char 
 21208 ;; Auto vars:     Size  Location     Type
 21209 ;;  address         1   24[COMRAM] unsigned char 
 21210 ;; Return value:  Size  Location     Type
 21211 ;;                  1    wreg      unsigned char 
 21212 ;; Registers used:
 21213 ;;		wreg, status,2, cstack
 21214 ;; Tracked objects:
 21215 ;;		On entry : 0/0
 21216 ;;		On exit  : 0/0
 21217 ;;		Unchanged: 0/0
 21218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21219 ;;      Params:         0       0       0       0       0       0       0
 21220 ;;      Locals:         1       0       0       0       0       0       0
 21221 ;;      Temps:          0       0       0       0       0       0       0
 21222 ;;      Totals:         1       0       0       0       0       0       0
 21223 ;;Total ram usage:        1 bytes
 21224 ;; Hardware stack levels used:    1
 21225 ;; Hardware stack levels required when called:    4
 21226 ;; This function calls:
 21227 ;;		_DATAEE_ReadByte
 21228 ;; This function is called by:
 21229 ;;		_ReadIntFromEeprom
 21230 ;; This function uses a non-reentrant model
 21231 ;;
 21232                           
 21233                           	psect	text95
 21234  00483C                     __ptext95:
 21235                           	opt stack 0
 21236  00483C                     _EepromRead:
 21237                           	opt stack 24
 21238                           
 21239                           ;incstack = 0
 21240                           ;EepromRead@address stored from wreg
 21241  00483C  6E19               	movwf	EepromRead@address,c
 21242                           
 21243                           ;FlashApp.c: 15: return DATAEE_ReadByte(address);
 21244  00483E  5019               	movf	EepromRead@address,w,c
 21245  004840  ECEC  F023         	call	_DATAEE_ReadByte
 21246  004844  0012               	return	
 21247  004846                     __end_of_EepromRead:
 21248                           	opt stack 0
 21249                           tosu	equ	0xFFF
 21250                           tosh	equ	0xFFE
 21251                           tosl	equ	0xFFD
 21252                           pclath	equ	0xFFA
 21253                           tblptru	equ	0xFF8
 21254                           tblptrh	equ	0xFF7
 21255                           tblptrl	equ	0xFF6
 21256                           tablat	equ	0xFF5
 21257                           prodh	equ	0xFF4
 21258                           prodl	equ	0xFF3
 21259                           intcon	equ	0xFF2
 21260                           intcon2	equ	0xFF1
 21261                           indf0	equ	0xFEF
 21262                           postinc0	equ	0xFEE
 21263                           fsr0h	equ	0xFEA
 21264                           fsr0l	equ	0xFE9
 21265                           wreg	equ	0xFE8
 21266                           indf1	equ	0xFE7
 21267                           postdec1	equ	0xFE5
 21268                           fsr1h	equ	0xFE2
 21269                           fsr1l	equ	0xFE1
 21270                           indf2	equ	0xFDF
 21271                           postinc2	equ	0xFDE
 21272                           postdec2	equ	0xFDD
 21273                           fsr2h	equ	0xFDA
 21274                           fsr2l	equ	0xFD9
 21275                           status	equ	0xFD8
 21276                           
 21277 ;; *************** function _DATAEE_ReadByte *****************
 21278 ;; Defined at:
 21279 ;;		line 194 in file "mcc_generated_files/memory.c"
 21280 ;; Parameters:    Size  Location     Type
 21281 ;;  bAdd            1    wreg     unsigned char 
 21282 ;; Auto vars:     Size  Location     Type
 21283 ;;  bAdd            1   23[COMRAM] unsigned char 
 21284 ;; Return value:  Size  Location     Type
 21285 ;;                  1    wreg      unsigned char 
 21286 ;; Registers used:
 21287 ;;		wreg, status,2
 21288 ;; Tracked objects:
 21289 ;;		On entry : 0/0
 21290 ;;		On exit  : 0/0
 21291 ;;		Unchanged: 0/0
 21292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21293 ;;      Params:         0       0       0       0       0       0       0
 21294 ;;      Locals:         1       0       0       0       0       0       0
 21295 ;;      Temps:          0       0       0       0       0       0       0
 21296 ;;      Totals:         1       0       0       0       0       0       0
 21297 ;;Total ram usage:        1 bytes
 21298 ;; Hardware stack levels used:    1
 21299 ;; Hardware stack levels required when called:    3
 21300 ;; This function calls:
 21301 ;;		Nothing
 21302 ;; This function is called by:
 21303 ;;		_EepromRead
 21304 ;; This function uses a non-reentrant model
 21305 ;;
 21306                           
 21307                           	psect	text96
 21308  0047D8                     __ptext96:
 21309                           	opt stack 0
 21310  0047D8                     _DATAEE_ReadByte:
 21311                           	opt stack 24
 21312                           
 21313                           ;incstack = 0
 21314                           ;DATAEE_ReadByte@bAdd stored from wreg
 21315  0047D8  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 21316                           
 21317                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 21318  0047DA  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 21319                           
 21320                           ;memory.c: 198: EECON1bits.CFGS = 0;
 21321  0047DE  9CA6               	bcf	4006,6,c	;volsfr
 21322                           
 21323                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 21324  0047E0  9EA6               	bcf	4006,7,c	;volsfr
 21325                           
 21326                           ;memory.c: 200: EECON1bits.RD = 1;
 21327  0047E2  80A6               	bsf	4006,0,c	;volsfr
 21328                           
 21329                           ;memory.c: 201: __nop();
 21330  0047E4  F000               	nop	
 21331                           
 21332                           ;memory.c: 202: __nop();
 21333  0047E6  F000               	nop	
 21334                           
 21335                           ;memory.c: 204: return (EEDATA);
 21336  0047E8  50A8               	movf	4008,w,c	;volatile
 21337  0047EA  0012               	return	
 21338  0047EC                     __end_of_DATAEE_ReadByte:
 21339                           	opt stack 0
 21340                           tosu	equ	0xFFF
 21341                           tosh	equ	0xFFE
 21342                           tosl	equ	0xFFD
 21343                           pclath	equ	0xFFA
 21344                           tblptru	equ	0xFF8
 21345                           tblptrh	equ	0xFF7
 21346                           tblptrl	equ	0xFF6
 21347                           tablat	equ	0xFF5
 21348                           prodh	equ	0xFF4
 21349                           prodl	equ	0xFF3
 21350                           intcon	equ	0xFF2
 21351                           intcon2	equ	0xFF1
 21352                           indf0	equ	0xFEF
 21353                           postinc0	equ	0xFEE
 21354                           fsr0h	equ	0xFEA
 21355                           fsr0l	equ	0xFE9
 21356                           wreg	equ	0xFE8
 21357                           indf1	equ	0xFE7
 21358                           postdec1	equ	0xFE5
 21359                           fsr1h	equ	0xFE2
 21360                           fsr1l	equ	0xFE1
 21361                           indf2	equ	0xFDF
 21362                           postinc2	equ	0xFDE
 21363                           postdec2	equ	0xFDD
 21364                           fsr2h	equ	0xFDA
 21365                           fsr2l	equ	0xFD9
 21366                           status	equ	0xFD8
 21367                           
 21368 ;; *************** function _ClearMcuRunTime *****************
 21369 ;; Defined at:
 21370 ;;		line 53 in file "SystemStatus.c"
 21371 ;; Parameters:    Size  Location     Type
 21372 ;;		None
 21373 ;; Auto vars:     Size  Location     Type
 21374 ;;		None
 21375 ;; Return value:  Size  Location     Type
 21376 ;;                  1    wreg      void 
 21377 ;; Registers used:
 21378 ;;		wreg, status,2
 21379 ;; Tracked objects:
 21380 ;;		On entry : 0/0
 21381 ;;		On exit  : 0/0
 21382 ;;		Unchanged: 0/0
 21383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21384 ;;      Params:         0       0       0       0       0       0       0
 21385 ;;      Locals:         0       0       0       0       0       0       0
 21386 ;;      Temps:          0       0       0       0       0       0       0
 21387 ;;      Totals:         0       0       0       0       0       0       0
 21388 ;;Total ram usage:        0 bytes
 21389 ;; Hardware stack levels used:    1
 21390 ;; Hardware stack levels required when called:    3
 21391 ;; This function calls:
 21392 ;;		Nothing
 21393 ;; This function is called by:
 21394 ;;		_InitSystemApplicationManagers
 21395 ;; This function uses a non-reentrant model
 21396 ;;
 21397                           
 21398                           	psect	text97
 21399  0047EC                     __ptext97:
 21400                           	opt stack 0
 21401  0047EC                     _ClearMcuRunTime:
 21402                           	opt stack 26
 21403                           
 21404                           ;SystemStatus.c: 55: mcuRunTimeIn5SecTicks = 0;
 21405                           
 21406                           ;incstack = 0
 21407  0047EC  0E00               	movlw	0
 21408  0047EE  0101               	movlb	1	; () banked
 21409  0047F0  6FBC               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 21410  0047F2  0E00               	movlw	0
 21411  0047F4  6FBD               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 21412  0047F6  0E00               	movlw	0
 21413  0047F8  6FBE               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 21414  0047FA  0E00               	movlw	0
 21415  0047FC  6FBF               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 21416                           
 21417                           ; BSR set to: 1
 21418  0047FE  0012               	return		;funcret
 21419  004800                     __end_of_ClearMcuRunTime:
 21420                           	opt stack 0
 21421                           tosu	equ	0xFFF
 21422                           tosh	equ	0xFFE
 21423                           tosl	equ	0xFFD
 21424                           pclath	equ	0xFFA
 21425                           tblptru	equ	0xFF8
 21426                           tblptrh	equ	0xFF7
 21427                           tblptrl	equ	0xFF6
 21428                           tablat	equ	0xFF5
 21429                           prodh	equ	0xFF4
 21430                           prodl	equ	0xFF3
 21431                           intcon	equ	0xFF2
 21432                           intcon2	equ	0xFF1
 21433                           indf0	equ	0xFEF
 21434                           postinc0	equ	0xFEE
 21435                           fsr0h	equ	0xFEA
 21436                           fsr0l	equ	0xFE9
 21437                           wreg	equ	0xFE8
 21438                           indf1	equ	0xFE7
 21439                           postdec1	equ	0xFE5
 21440                           fsr1h	equ	0xFE2
 21441                           fsr1l	equ	0xFE1
 21442                           indf2	equ	0xFDF
 21443                           postinc2	equ	0xFDE
 21444                           postdec2	equ	0xFDD
 21445                           fsr2h	equ	0xFDA
 21446                           fsr2l	equ	0xFD9
 21447                           status	equ	0xFD8
 21448                           
 21449 ;; *************** function _BlinkOkLeds *****************
 21450 ;; Defined at:
 21451 ;;		line 24 in file "LedsApp.c"
 21452 ;; Parameters:    Size  Location     Type
 21453 ;;  state           1    wreg     enum E7690
 21454 ;; Auto vars:     Size  Location     Type
 21455 ;;  state           1   26[COMRAM] enum E7690
 21456 ;;  idx             2   27[COMRAM] int 
 21457 ;; Return value:  Size  Location     Type
 21458 ;;                  1    wreg      void 
 21459 ;; Registers used:
 21460 ;;		wreg, status,2, status,0
 21461 ;; Tracked objects:
 21462 ;;		On entry : 0/0
 21463 ;;		On exit  : 0/0
 21464 ;;		Unchanged: 0/0
 21465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21466 ;;      Params:         0       0       0       0       0       0       0
 21467 ;;      Locals:         3       0       0       0       0       0       0
 21468 ;;      Temps:          3       0       0       0       0       0       0
 21469 ;;      Totals:         6       0       0       0       0       0       0
 21470 ;;Total ram usage:        6 bytes
 21471 ;; Hardware stack levels used:    1
 21472 ;; Hardware stack levels required when called:    3
 21473 ;; This function calls:
 21474 ;;		Nothing
 21475 ;; This function is called by:
 21476 ;;		_main
 21477 ;; This function uses a non-reentrant model
 21478 ;;
 21479                           
 21480                           	psect	text98
 21481  003EF6                     __ptext98:
 21482                           	opt stack 0
 21483  003EF6                     _BlinkOkLeds:
 21484                           	opt stack 27
 21485                           
 21486                           ; BSR set to: 1
 21487                           ;incstack = 0
 21488                           ;BlinkOkLeds@state stored from wreg
 21489  003EF6  6E1B               	movwf	BlinkOkLeds@state,c
 21490                           
 21491                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 21492  003EF8  0E00               	movlw	0
 21493  003EFA  6E1D               	movwf	BlinkOkLeds@idx+1,c
 21494  003EFC  0E00               	movlw	0
 21495  003EFE  6E1C               	movwf	BlinkOkLeds@idx,c
 21496  003F00                     l7166:
 21497  003F00  501B               	movf	BlinkOkLeds@state,w,c
 21498  003F02  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 21499  003F04  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 21500  003F06  5018               	movf	??_BlinkOkLeds,w,c
 21501  003F08  5C1C               	subwf	BlinkOkLeds@idx,w,c
 21502  003F0A  501D               	movf	BlinkOkLeds@idx+1,w,c
 21503  003F0C  0A80               	xorlw	128
 21504  003F0E  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 21505  003F10  5019               	movf	??_BlinkOkLeds+1,w,c
 21506  003F12  0A80               	xorlw	128
 21507  003F14  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 21508  003F16  B0D8               	btfsc	status,0,c
 21509  003F18  0012               	return	
 21510                           
 21511                           ;LedsApp.c: 27: {
 21512                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 21513  003F1A  908B               	bcf	3979,0,c	;volatile
 21514                           
 21515                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 21516  003F1C  0E02               	movlw	2
 21517  003F1E  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 21518  003F20  0E04               	movlw	4
 21519  003F22  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 21520  003F24  0EBA               	movlw	186
 21521  003F26                     u10107:
 21522  003F26  2EE8               	decfsz	wreg,f,c
 21523  003F28  D7FE               	bra	u10107
 21524  003F2A  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 21525  003F2C  D7FC               	bra	u10107
 21526  003F2E  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 21527  003F30  D7FA               	bra	u10107
 21528  003F32  D000               	nop2	
 21529                           
 21530                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 21531  003F34  808B               	bsf	3979,0,c	;volatile
 21532                           
 21533                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 21534  003F36  0E02               	movlw	2
 21535  003F38  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 21536  003F3A  0E04               	movlw	4
 21537  003F3C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 21538  003F3E  0EBA               	movlw	186
 21539  003F40                     u10117:
 21540  003F40  2EE8               	decfsz	wreg,f,c
 21541  003F42  D7FE               	bra	u10117
 21542  003F44  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 21543  003F46  D7FC               	bra	u10117
 21544  003F48  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 21545  003F4A  D7FA               	bra	u10117
 21546  003F4C  D000               	nop2	
 21547  003F4E  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 21548  003F50  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 21549  003F52  D7D6               	goto	l7166
 21550  003F54                     __end_of_BlinkOkLeds:
 21551                           	opt stack 0
 21552                           tosu	equ	0xFFF
 21553                           tosh	equ	0xFFE
 21554                           tosl	equ	0xFFD
 21555                           pclath	equ	0xFFA
 21556                           tblptru	equ	0xFF8
 21557                           tblptrh	equ	0xFF7
 21558                           tblptrl	equ	0xFF6
 21559                           tablat	equ	0xFF5
 21560                           prodh	equ	0xFF4
 21561                           prodl	equ	0xFF3
 21562                           intcon	equ	0xFF2
 21563                           intcon2	equ	0xFF1
 21564                           indf0	equ	0xFEF
 21565                           postinc0	equ	0xFEE
 21566                           fsr0h	equ	0xFEA
 21567                           fsr0l	equ	0xFE9
 21568                           wreg	equ	0xFE8
 21569                           indf1	equ	0xFE7
 21570                           postdec1	equ	0xFE5
 21571                           fsr1h	equ	0xFE2
 21572                           fsr1l	equ	0xFE1
 21573                           indf2	equ	0xFDF
 21574                           postinc2	equ	0xFDE
 21575                           postdec2	equ	0xFDD
 21576                           fsr2h	equ	0xFDA
 21577                           fsr2l	equ	0xFD9
 21578                           status	equ	0xFD8
 21579                           
 21580 ;; *************** function _INTERRUPT_InterruptManager *****************
 21581 ;; Defined at:
 21582 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 21583 ;; Parameters:    Size  Location     Type
 21584 ;;		None
 21585 ;; Auto vars:     Size  Location     Type
 21586 ;;		None
 21587 ;; Return value:  Size  Location     Type
 21588 ;;                  1    wreg      void 
 21589 ;; Registers used:
 21590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21591 ;; Tracked objects:
 21592 ;;		On entry : 0/0
 21593 ;;		On exit  : 0/0
 21594 ;;		Unchanged: 0/0
 21595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21596 ;;      Params:         0       0       0       0       0       0       0
 21597 ;;      Locals:         0       0       0       0       0       0       0
 21598 ;;      Temps:         18       0       0       0       0       0       0
 21599 ;;      Totals:        18       0       0       0       0       0       0
 21600 ;;Total ram usage:       18 bytes
 21601 ;; Hardware stack levels used:    1
 21602 ;; Hardware stack levels required when called:    2
 21603 ;; This function calls:
 21604 ;;		_EUSART1_Receive_ISR
 21605 ;;		_EUSART1_Transmit_ISR
 21606 ;;		_MEMORY_ISR
 21607 ;;		_PIN_MANAGER_IOC
 21608 ;;		_TMR0_ISR
 21609 ;; This function is called by:
 21610 ;;		Interrupt level 2
 21611 ;; This function uses a non-reentrant model
 21612 ;;
 21613                           
 21614                           	psect	intcode
 21615  000008                     __pintcode:
 21616                           	opt stack 0
 21617  000008                     _INTERRUPT_InterruptManager:
 21618                           	opt stack 20
 21619                           
 21620                           ;incstack = 0
 21621  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21622  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 21623  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 21624  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 21625  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 21626  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 21627  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 21628  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 21629  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 21630  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 21631  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 21632  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 21633  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 21634  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 21635  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 21636  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 21637  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 21638  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 21639  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 21640                           
 21641                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 21642  000052  B6F2               	btfsc	intcon,3,c	;volatile
 21643  000054  A0F2               	btfss	intcon,0,c	;volatile
 21644  000056  D003               	goto	i2l777
 21645                           
 21646                           ;interrupt_manager.c: 61: {
 21647                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 21648  000058  EC2A  F024         	call	_PIN_MANAGER_IOC	;wreg free
 21649                           
 21650                           ;interrupt_manager.c: 63: }
 21651  00005C  D019               	goto	i2l786
 21652  00005E                     i2l777:
 21653                           
 21654                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 21655  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 21656  000060  A4F2               	btfss	intcon,2,c	;volatile
 21657  000062  D003               	goto	i2l779
 21658                           
 21659                           ;interrupt_manager.c: 65: {
 21660                           ;interrupt_manager.c: 66: TMR0_ISR();
 21661  000064  EC0A  F01A         	call	_TMR0_ISR	;wreg free
 21662                           
 21663                           ;interrupt_manager.c: 67: }
 21664  000068  D013               	goto	i2l786
 21665  00006A                     i2l779:
 21666                           
 21667                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 21668  00006A  ACF2               	btfss	intcon,6,c	;volatile
 21669  00006C  D011               	goto	i2l786
 21670                           
 21671                           ;interrupt_manager.c: 69: {
 21672                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 21673  00006E  B8A0               	btfsc	4000,4,c	;volatile
 21674  000070  A8A1               	btfss	4001,4,c	;volatile
 21675  000072  D003               	goto	i2l782
 21676                           
 21677                           ;interrupt_manager.c: 71: {
 21678                           ;interrupt_manager.c: 72: MEMORY_ISR();
 21679  000074  EC2C  F024         	call	_MEMORY_ISR	;wreg free
 21680                           
 21681                           ;interrupt_manager.c: 73: }
 21682  000078  D00B               	goto	i2l786
 21683  00007A                     i2l782:
 21684                           
 21685                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 21686  00007A  B89D               	btfsc	3997,4,c	;volatile
 21687  00007C  A89E               	btfss	3998,4,c	;volatile
 21688  00007E  D003               	goto	i2l784
 21689                           
 21690                           ;interrupt_manager.c: 75: {
 21691                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 21692  000080  EC67  F022         	call	_EUSART1_Transmit_ISR	;wreg free
 21693                           
 21694                           ;interrupt_manager.c: 77: }
 21695  000084  D005               	goto	i2l786
 21696  000086                     i2l784:
 21697                           
 21698                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 21699  000086  BA9D               	btfsc	3997,5,c	;volatile
 21700  000088  AA9E               	btfss	3998,5,c	;volatile
 21701  00008A  D002               	goto	i2l786
 21702                           
 21703                           ;interrupt_manager.c: 79: {
 21704                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 21705  00008C  ECD3  F022         	call	_EUSART1_Receive_ISR	;wreg free
 21706  000090                     i2l786:
 21707                           
 21708                           ;interrupt_manager.c: 87: else
 21709                           ;interrupt_manager.c: 88: {
 21710                           
 21711                           ;interrupt_manager.c: 85: }
 21712                           ;interrupt_manager.c: 86: }
 21713                           
 21714                           ;interrupt_manager.c: 82: else
 21715                           ;interrupt_manager.c: 83: {
 21716  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 21717  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 21718  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 21719  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 21720  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 21721  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 21722  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 21723  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 21724  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 21725  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 21726  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 21727  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 21728  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 21729  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 21730  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 21731  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 21732  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 21733  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 21734  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21735  0000DA  0011               	retfie		f
 21736  0000DC                     __end_of_INTERRUPT_InterruptManager:
 21737                           	opt stack 0
 21738                           tosu	equ	0xFFF
 21739                           tosh	equ	0xFFE
 21740                           tosl	equ	0xFFD
 21741                           pclatu	equ	0xFFB
 21742                           pclath	equ	0xFFA
 21743                           tblptru	equ	0xFF8
 21744                           tblptrh	equ	0xFF7
 21745                           tblptrl	equ	0xFF6
 21746                           tablat	equ	0xFF5
 21747                           prodh	equ	0xFF4
 21748                           prodl	equ	0xFF3
 21749                           intcon	equ	0xFF2
 21750                           intcon2	equ	0xFF1
 21751                           indf0	equ	0xFEF
 21752                           postinc0	equ	0xFEE
 21753                           fsr0h	equ	0xFEA
 21754                           fsr0l	equ	0xFE9
 21755                           wreg	equ	0xFE8
 21756                           indf1	equ	0xFE7
 21757                           postdec1	equ	0xFE5
 21758                           fsr1h	equ	0xFE2
 21759                           fsr1l	equ	0xFE1
 21760                           indf2	equ	0xFDF
 21761                           postinc2	equ	0xFDE
 21762                           postdec2	equ	0xFDD
 21763                           fsr2h	equ	0xFDA
 21764                           fsr2l	equ	0xFD9
 21765                           status	equ	0xFD8
 21766                           
 21767 ;; *************** function _TMR0_ISR *****************
 21768 ;; Defined at:
 21769 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 21770 ;; Parameters:    Size  Location     Type
 21771 ;;		None
 21772 ;; Auto vars:     Size  Location     Type
 21773 ;;		None
 21774 ;; Return value:  Size  Location     Type
 21775 ;;                  1    wreg      void 
 21776 ;; Registers used:
 21777 ;;		wreg, status,2, status,0, cstack
 21778 ;; Tracked objects:
 21779 ;;		On entry : 0/0
 21780 ;;		On exit  : 0/0
 21781 ;;		Unchanged: 0/0
 21782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21783 ;;      Params:         0       0       0       0       0       0       0
 21784 ;;      Locals:         0       0       0       0       0       0       0
 21785 ;;      Temps:          0       0       0       0       0       0       0
 21786 ;;      Totals:         0       0       0       0       0       0       0
 21787 ;;Total ram usage:        0 bytes
 21788 ;; Hardware stack levels used:    1
 21789 ;; Hardware stack levels required when called:    1
 21790 ;; This function calls:
 21791 ;;		___lwmod
 21792 ;; This function is called by:
 21793 ;;		_INTERRUPT_InterruptManager
 21794 ;; This function uses a non-reentrant model
 21795 ;;
 21796                           
 21797                           	psect	text100
 21798  003414                     __ptext100:
 21799                           	opt stack 0
 21800  003414                     _TMR0_ISR:
 21801                           	opt stack 20
 21802                           
 21803                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 21804                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 21805                           
 21806                           ;incstack = 0
 21807  003414  94F2               	bcf	intcon,2,c	;volatile
 21808                           
 21809                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 21810  003416  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 21811  003418  6ED7               	movwf	4055,c	;volatile
 21812                           
 21813                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 21814  00341A  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 21815                           
 21816                           ;tmr0.c: 146: CountCallBack ++;
 21817  00341E  4A39               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 21818  003420  2A3A               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 21819                           
 21820                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 21821  003422  C039  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 21822  003426  C03A  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 21823  00342A  0E00               	movlw	0
 21824  00342C  6E04               	movwf	___lwmod@divisor+1,c
 21825  00342E  0E14               	movlw	20
 21826  003430  6E03               	movwf	___lwmod@divisor,c
 21827  003432  ECB4  F021         	call	___lwmod	;wreg free
 21828  003436  5001               	movf	?___lwmod,w,c
 21829  003438  1002               	iorwf	?___lwmod+1,w,c
 21830  00343A  A4D8               	btfss	status,2,c
 21831  00343C  D003               	goto	i2l1010
 21832                           
 21833                           ;tmr0.c: 148: {
 21834                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 21835  00343E  0E01               	movlw	1
 21836  003440  0101               	movlb	1	; () banked
 21837  003442  6FDB               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 21838  003444                     i2l1010:
 21839                           
 21840                           ;tmr0.c: 150: }
 21841                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 21842                           
 21843                           ; BSR set to: 1
 21844  003444  C039  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 21845  003448  C03A  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 21846  00344C  0E00               	movlw	0
 21847  00344E  6E04               	movwf	___lwmod@divisor+1,c
 21848  003450  0E32               	movlw	50
 21849  003452  6E03               	movwf	___lwmod@divisor,c
 21850  003454  ECB4  F021         	call	___lwmod	;wreg free
 21851  003458  5001               	movf	?___lwmod,w,c
 21852  00345A  1002               	iorwf	?___lwmod+1,w,c
 21853  00345C  A4D8               	btfss	status,2,c
 21854  00345E  D003               	goto	i2l1011
 21855                           
 21856                           ;tmr0.c: 153: {
 21857                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 21858  003460  0E01               	movlw	1
 21859  003462  0101               	movlb	1	; () banked
 21860  003464  6FDA               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 21861  003466                     i2l1011:
 21862                           
 21863                           ;tmr0.c: 155: }
 21864                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 21865                           
 21866                           ; BSR set to: 1
 21867  003466  C039  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 21868  00346A  C03A  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 21869  00346E  0E01               	movlw	1
 21870  003470  6E04               	movwf	___lwmod@divisor+1,c
 21871  003472  0E2C               	movlw	44
 21872  003474  6E03               	movwf	___lwmod@divisor,c
 21873  003476  ECB4  F021         	call	___lwmod	;wreg free
 21874  00347A  5001               	movf	?___lwmod,w,c
 21875  00347C  1002               	iorwf	?___lwmod+1,w,c
 21876  00347E  A4D8               	btfss	status,2,c
 21877  003480  D003               	goto	i2l1012
 21878                           
 21879                           ;tmr0.c: 157: {
 21880                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 21881  003482  0E01               	movlw	1
 21882  003484  0101               	movlb	1	; () banked
 21883  003486  6FD9               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 21884  003488                     i2l1012:
 21885                           
 21886                           ;tmr0.c: 159: }
 21887                           ;tmr0.c: 160: if ((CountCallBack % 200) == 0)
 21888                           
 21889                           ; BSR set to: 1
 21890  003488  C039  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 21891  00348C  C03A  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 21892  003490  0E00               	movlw	0
 21893  003492  6E04               	movwf	___lwmod@divisor+1,c
 21894  003494  0EC8               	movlw	200
 21895  003496  6E03               	movwf	___lwmod@divisor,c
 21896  003498  ECB4  F021         	call	___lwmod	;wreg free
 21897  00349C  5001               	movf	?___lwmod,w,c
 21898  00349E  1002               	iorwf	?___lwmod+1,w,c
 21899  0034A0  A4D8               	btfss	status,2,c
 21900  0034A2  D003               	goto	i2l1013
 21901                           
 21902                           ;tmr0.c: 161: {
 21903                           ;tmr0.c: 162: TimertenSecFlag = 1;
 21904  0034A4  0E01               	movlw	1
 21905  0034A6  0101               	movlb	1	; () banked
 21906  0034A8  6FD8               	movwf	_TimertenSecFlag& (0+255),b	;volatile
 21907  0034AA                     i2l1013:
 21908                           
 21909                           ;tmr0.c: 163: }
 21910                           ;tmr0.c: 165: CountCallBack %= 300;
 21911                           
 21912                           ; BSR set to: 1
 21913  0034AA  C039  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 21914  0034AE  C03A  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 21915  0034B2  0E01               	movlw	1
 21916  0034B4  6E04               	movwf	___lwmod@divisor+1,c
 21917  0034B6  0E2C               	movlw	44
 21918  0034B8  6E03               	movwf	___lwmod@divisor,c
 21919  0034BA  ECB4  F021         	call	___lwmod	;wreg free
 21920  0034BE  C001  F039         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 21921  0034C2  C002  F03A         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 21922  0034C6  0012               	return		;funcret
 21923  0034C8                     __end_of_TMR0_ISR:
 21924                           	opt stack 0
 21925                           tosu	equ	0xFFF
 21926                           tosh	equ	0xFFE
 21927                           tosl	equ	0xFFD
 21928                           pclatu	equ	0xFFB
 21929                           pclath	equ	0xFFA
 21930                           tblptru	equ	0xFF8
 21931                           tblptrh	equ	0xFF7
 21932                           tblptrl	equ	0xFF6
 21933                           tablat	equ	0xFF5
 21934                           prodh	equ	0xFF4
 21935                           prodl	equ	0xFF3
 21936                           intcon	equ	0xFF2
 21937                           intcon2	equ	0xFF1
 21938                           indf0	equ	0xFEF
 21939                           postinc0	equ	0xFEE
 21940                           fsr0h	equ	0xFEA
 21941                           fsr0l	equ	0xFE9
 21942                           wreg	equ	0xFE8
 21943                           indf1	equ	0xFE7
 21944                           postdec1	equ	0xFE5
 21945                           fsr1h	equ	0xFE2
 21946                           fsr1l	equ	0xFE1
 21947                           indf2	equ	0xFDF
 21948                           postinc2	equ	0xFDE
 21949                           postdec2	equ	0xFDD
 21950                           fsr2h	equ	0xFDA
 21951                           fsr2l	equ	0xFD9
 21952                           status	equ	0xFD8
 21953                           
 21954 ;; *************** function ___lwmod *****************
 21955 ;; Defined at:
 21956 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 21957 ;; Parameters:    Size  Location     Type
 21958 ;;  dividend        2    0[COMRAM] unsigned int 
 21959 ;;  divisor         2    2[COMRAM] unsigned int 
 21960 ;; Auto vars:     Size  Location     Type
 21961 ;;  counter         1    4[COMRAM] unsigned char 
 21962 ;; Return value:  Size  Location     Type
 21963 ;;                  2    0[COMRAM] unsigned int 
 21964 ;; Registers used:
 21965 ;;		wreg, status,2, status,0
 21966 ;; Tracked objects:
 21967 ;;		On entry : 0/0
 21968 ;;		On exit  : 0/0
 21969 ;;		Unchanged: 0/0
 21970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21971 ;;      Params:         4       0       0       0       0       0       0
 21972 ;;      Locals:         1       0       0       0       0       0       0
 21973 ;;      Temps:          0       0       0       0       0       0       0
 21974 ;;      Totals:         5       0       0       0       0       0       0
 21975 ;;Total ram usage:        5 bytes
 21976 ;; Hardware stack levels used:    1
 21977 ;; This function calls:
 21978 ;;		Nothing
 21979 ;; This function is called by:
 21980 ;;		_TMR0_ISR
 21981 ;; This function uses a non-reentrant model
 21982 ;;
 21983                           
 21984                           	psect	text101
 21985  004368                     __ptext101:
 21986                           	opt stack 0
 21987  004368                     ___lwmod:
 21988                           	opt stack 20
 21989                           
 21990                           ;incstack = 0
 21991  004368  5003               	movf	___lwmod@divisor,w,c
 21992  00436A  1004               	iorwf	___lwmod@divisor+1,w,c
 21993  00436C  B4D8               	btfsc	status,2,c
 21994  00436E  D018               	goto	i2l2180
 21995  004370  0E01               	movlw	1
 21996  004372  6E05               	movwf	___lwmod@counter,c
 21997  004374  D004               	goto	i2l2175
 21998  004376  90D8               	bcf	status,0,c
 21999  004378  3603               	rlcf	___lwmod@divisor,f,c
 22000  00437A  3604               	rlcf	___lwmod@divisor+1,f,c
 22001  00437C  2A05               	incf	___lwmod@counter,f,c
 22002  00437E                     i2l2175:
 22003  00437E  AE04               	btfss	___lwmod@divisor+1,7,c
 22004  004380  D7FA               	goto	i2l2176
 22005  004382                     i2u625_40:
 22006  004382  5003               	movf	___lwmod@divisor,w,c
 22007  004384  5C01               	subwf	___lwmod@dividend,w,c
 22008  004386  5004               	movf	___lwmod@divisor+1,w,c
 22009  004388  5802               	subwfb	___lwmod@dividend+1,w,c
 22010  00438A  A0D8               	btfss	status,0,c
 22011  00438C  D004               	goto	i2l2179
 22012  00438E  5003               	movf	___lwmod@divisor,w,c
 22013  004390  5E01               	subwf	___lwmod@dividend,f,c
 22014  004392  5004               	movf	___lwmod@divisor+1,w,c
 22015  004394  5A02               	subwfb	___lwmod@dividend+1,f,c
 22016  004396                     i2l2179:
 22017  004396  90D8               	bcf	status,0,c
 22018  004398  3204               	rrcf	___lwmod@divisor+1,f,c
 22019  00439A  3203               	rrcf	___lwmod@divisor,f,c
 22020  00439C  2E05               	decfsz	___lwmod@counter,f,c
 22021  00439E  D7F1               	goto	i2u625_40
 22022  0043A0                     i2l2180:
 22023  0043A0  C001  F001         	movff	___lwmod@dividend,?___lwmod
 22024  0043A4  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 22025  0043A8  0012               	return		;funcret
 22026  0043AA                     __end_of___lwmod:
 22027                           	opt stack 0
 22028                           tosu	equ	0xFFF
 22029                           tosh	equ	0xFFE
 22030                           tosl	equ	0xFFD
 22031                           pclatu	equ	0xFFB
 22032                           pclath	equ	0xFFA
 22033                           tblptru	equ	0xFF8
 22034                           tblptrh	equ	0xFF7
 22035                           tblptrl	equ	0xFF6
 22036                           tablat	equ	0xFF5
 22037                           prodh	equ	0xFF4
 22038                           prodl	equ	0xFF3
 22039                           intcon	equ	0xFF2
 22040                           intcon2	equ	0xFF1
 22041                           indf0	equ	0xFEF
 22042                           postinc0	equ	0xFEE
 22043                           fsr0h	equ	0xFEA
 22044                           fsr0l	equ	0xFE9
 22045                           wreg	equ	0xFE8
 22046                           indf1	equ	0xFE7
 22047                           postdec1	equ	0xFE5
 22048                           fsr1h	equ	0xFE2
 22049                           fsr1l	equ	0xFE1
 22050                           indf2	equ	0xFDF
 22051                           postinc2	equ	0xFDE
 22052                           postdec2	equ	0xFDD
 22053                           fsr2h	equ	0xFDA
 22054                           fsr2l	equ	0xFD9
 22055                           status	equ	0xFD8
 22056                           
 22057 ;; *************** function _PIN_MANAGER_IOC *****************
 22058 ;; Defined at:
 22059 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 22060 ;; Parameters:    Size  Location     Type
 22061 ;;		None
 22062 ;; Auto vars:     Size  Location     Type
 22063 ;;		None
 22064 ;; Return value:  Size  Location     Type
 22065 ;;                  1    wreg      void 
 22066 ;; Registers used:
 22067 ;;		None
 22068 ;; Tracked objects:
 22069 ;;		On entry : 0/0
 22070 ;;		On exit  : 0/0
 22071 ;;		Unchanged: 0/0
 22072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22073 ;;      Params:         0       0       0       0       0       0       0
 22074 ;;      Locals:         0       0       0       0       0       0       0
 22075 ;;      Temps:          0       0       0       0       0       0       0
 22076 ;;      Totals:         0       0       0       0       0       0       0
 22077 ;;Total ram usage:        0 bytes
 22078 ;; Hardware stack levels used:    1
 22079 ;; This function calls:
 22080 ;;		Nothing
 22081 ;; This function is called by:
 22082 ;;		_INTERRUPT_InterruptManager
 22083 ;; This function uses a non-reentrant model
 22084 ;;
 22085                           
 22086                           	psect	text102
 22087  004854                     __ptext102:
 22088                           	opt stack 0
 22089  004854                     _PIN_MANAGER_IOC:
 22090                           	opt stack 21
 22091                           
 22092                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 22093                           
 22094                           ;incstack = 0
 22095  004854  90F2               	bcf	intcon,0,c	;volatile
 22096  004856  0012               	return		;funcret
 22097  004858                     __end_of_PIN_MANAGER_IOC:
 22098                           	opt stack 0
 22099                           tosu	equ	0xFFF
 22100                           tosh	equ	0xFFE
 22101                           tosl	equ	0xFFD
 22102                           pclatu	equ	0xFFB
 22103                           pclath	equ	0xFFA
 22104                           tblptru	equ	0xFF8
 22105                           tblptrh	equ	0xFF7
 22106                           tblptrl	equ	0xFF6
 22107                           tablat	equ	0xFF5
 22108                           prodh	equ	0xFF4
 22109                           prodl	equ	0xFF3
 22110                           intcon	equ	0xFF2
 22111                           intcon2	equ	0xFF1
 22112                           indf0	equ	0xFEF
 22113                           postinc0	equ	0xFEE
 22114                           fsr0h	equ	0xFEA
 22115                           fsr0l	equ	0xFE9
 22116                           wreg	equ	0xFE8
 22117                           indf1	equ	0xFE7
 22118                           postdec1	equ	0xFE5
 22119                           fsr1h	equ	0xFE2
 22120                           fsr1l	equ	0xFE1
 22121                           indf2	equ	0xFDF
 22122                           postinc2	equ	0xFDE
 22123                           postdec2	equ	0xFDD
 22124                           fsr2h	equ	0xFDA
 22125                           fsr2l	equ	0xFD9
 22126                           status	equ	0xFD8
 22127                           
 22128 ;; *************** function _MEMORY_ISR *****************
 22129 ;; Defined at:
 22130 ;;		line 206 in file "mcc_generated_files/memory.c"
 22131 ;; Parameters:    Size  Location     Type
 22132 ;;		None
 22133 ;; Auto vars:     Size  Location     Type
 22134 ;;		None
 22135 ;; Return value:  Size  Location     Type
 22136 ;;                  1    wreg      void 
 22137 ;; Registers used:
 22138 ;;		None
 22139 ;; Tracked objects:
 22140 ;;		On entry : 0/0
 22141 ;;		On exit  : 0/0
 22142 ;;		Unchanged: 0/0
 22143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22144 ;;      Params:         0       0       0       0       0       0       0
 22145 ;;      Locals:         0       0       0       0       0       0       0
 22146 ;;      Temps:          0       0       0       0       0       0       0
 22147 ;;      Totals:         0       0       0       0       0       0       0
 22148 ;;Total ram usage:        0 bytes
 22149 ;; Hardware stack levels used:    1
 22150 ;; This function calls:
 22151 ;;		Nothing
 22152 ;; This function is called by:
 22153 ;;		_INTERRUPT_InterruptManager
 22154 ;; This function uses a non-reentrant model
 22155 ;;
 22156                           
 22157                           	psect	text103
 22158  004858                     __ptext103:
 22159                           	opt stack 0
 22160  004858                     _MEMORY_ISR:
 22161                           	opt stack 21
 22162                           
 22163                           ;memory.c: 209: PIR2bits.EEIF = 0;
 22164                           
 22165                           ;incstack = 0
 22166  004858  98A1               	bcf	4001,4,c	;volatile
 22167  00485A  0012               	return		;funcret
 22168  00485C                     __end_of_MEMORY_ISR:
 22169                           	opt stack 0
 22170                           tosu	equ	0xFFF
 22171                           tosh	equ	0xFFE
 22172                           tosl	equ	0xFFD
 22173                           pclatu	equ	0xFFB
 22174                           pclath	equ	0xFFA
 22175                           tblptru	equ	0xFF8
 22176                           tblptrh	equ	0xFF7
 22177                           tblptrl	equ	0xFF6
 22178                           tablat	equ	0xFF5
 22179                           prodh	equ	0xFF4
 22180                           prodl	equ	0xFF3
 22181                           intcon	equ	0xFF2
 22182                           intcon2	equ	0xFF1
 22183                           indf0	equ	0xFEF
 22184                           postinc0	equ	0xFEE
 22185                           fsr0h	equ	0xFEA
 22186                           fsr0l	equ	0xFE9
 22187                           wreg	equ	0xFE8
 22188                           indf1	equ	0xFE7
 22189                           postdec1	equ	0xFE5
 22190                           fsr1h	equ	0xFE2
 22191                           fsr1l	equ	0xFE1
 22192                           indf2	equ	0xFDF
 22193                           postinc2	equ	0xFDE
 22194                           postdec2	equ	0xFDD
 22195                           fsr2h	equ	0xFDA
 22196                           fsr2l	equ	0xFD9
 22197                           status	equ	0xFD8
 22198                           
 22199 ;; *************** function _EUSART1_Transmit_ISR *****************
 22200 ;; Defined at:
 22201 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 22202 ;; Parameters:    Size  Location     Type
 22203 ;;		None
 22204 ;; Auto vars:     Size  Location     Type
 22205 ;;		None
 22206 ;; Return value:  Size  Location     Type
 22207 ;;                  1    wreg      void 
 22208 ;; Registers used:
 22209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22210 ;; Tracked objects:
 22211 ;;		On entry : 0/0
 22212 ;;		On exit  : 0/0
 22213 ;;		Unchanged: 0/0
 22214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22215 ;;      Params:         0       0       0       0       0       0       0
 22216 ;;      Locals:         0       0       0       0       0       0       0
 22217 ;;      Temps:          0       0       0       0       0       0       0
 22218 ;;      Totals:         0       0       0       0       0       0       0
 22219 ;;Total ram usage:        0 bytes
 22220 ;; Hardware stack levels used:    1
 22221 ;; This function calls:
 22222 ;;		Nothing
 22223 ;; This function is called by:
 22224 ;;		_INTERRUPT_InterruptManager
 22225 ;; This function uses a non-reentrant model
 22226 ;;
 22227                           
 22228                           	psect	text104
 22229  0044CE                     __ptext104:
 22230                           	opt stack 0
 22231  0044CE                     _EUSART1_Transmit_ISR:
 22232                           	opt stack 21
 22233                           
 22234                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 22235                           
 22236                           ;incstack = 0
 22237  0044CE  0E46               	movlw	70
 22238  0044D0  0101               	movlb	1	; () banked
 22239  0044D2  61EA               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 22240  0044D4  D012               	goto	i2l848
 22241                           
 22242                           ; BSR set to: 1
 22243                           ;eusart1.c: 186: {
 22244                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 22245  0044D6  5043               	movf	_eusart1TxTail,w,c	;volatile
 22246  0044D8  0D01               	mullw	1
 22247  0044DA  0E00               	movlw	low _eusart1TxBuffer
 22248  0044DC  24F3               	addwf	prodl,w,c
 22249  0044DE  6ED9               	movwf	fsr2l,c
 22250  0044E0  0E02               	movlw	high _eusart1TxBuffer
 22251  0044E2  20F4               	addwfc	prodh,w,c
 22252  0044E4  6EDA               	movwf	fsr2h,c
 22253  0044E6  50DF               	movf	indf2,w,c
 22254  0044E8  6EAD               	movwf	4013,c	;volatile
 22255                           
 22256                           ; BSR set to: 1
 22257  0044EA  2A43               	incf	_eusart1TxTail,f,c	;volatile
 22258                           
 22259                           ; BSR set to: 1
 22260                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 22261  0044EC  0E45               	movlw	69
 22262  0044EE  6443               	cpfsgt	_eusart1TxTail,c	;volatile
 22263  0044F0  D002               	goto	i2l849
 22264                           
 22265                           ; BSR set to: 1
 22266                           ;eusart1.c: 189: {
 22267                           ;eusart1.c: 190: eusart1TxTail = 0;
 22268  0044F2  0E00               	movlw	0
 22269  0044F4  6E43               	movwf	_eusart1TxTail,c	;volatile
 22270  0044F6                     i2l849:
 22271                           
 22272                           ; BSR set to: 1
 22273                           ;eusart1.c: 191: }
 22274                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 22275                           
 22276                           ; BSR set to: 1
 22277  0044F6  2BEA               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 22278                           
 22279                           ;eusart1.c: 193: }
 22280  0044F8  0012               	return	
 22281  0044FA                     i2l848:
 22282                           
 22283                           ; BSR set to: 1
 22284                           ;eusart1.c: 194: else
 22285                           ;eusart1.c: 195: {
 22286                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 22287  0044FA  989D               	bcf	3997,4,c	;volatile
 22288                           
 22289                           ; BSR set to: 1
 22290                           ;eusart1.c: 197: eusart1TxTail = 0;
 22291  0044FC  0E00               	movlw	0
 22292  0044FE  6E43               	movwf	_eusart1TxTail,c	;volatile
 22293                           
 22294                           ;eusart1.c: 198: eusart1TxHead = 0;
 22295  004500  0E00               	movlw	0
 22296  004502  6E44               	movwf	_eusart1TxHead,c	;volatile
 22297  004504  0012               	return	
 22298  004506                     __end_of_EUSART1_Transmit_ISR:
 22299                           	opt stack 0
 22300                           tosu	equ	0xFFF
 22301                           tosh	equ	0xFFE
 22302                           tosl	equ	0xFFD
 22303                           pclatu	equ	0xFFB
 22304                           pclath	equ	0xFFA
 22305                           tblptru	equ	0xFF8
 22306                           tblptrh	equ	0xFF7
 22307                           tblptrl	equ	0xFF6
 22308                           tablat	equ	0xFF5
 22309                           prodh	equ	0xFF4
 22310                           prodl	equ	0xFF3
 22311                           intcon	equ	0xFF2
 22312                           intcon2	equ	0xFF1
 22313                           indf0	equ	0xFEF
 22314                           postinc0	equ	0xFEE
 22315                           fsr0h	equ	0xFEA
 22316                           fsr0l	equ	0xFE9
 22317                           wreg	equ	0xFE8
 22318                           indf1	equ	0xFE7
 22319                           postdec1	equ	0xFE5
 22320                           fsr1h	equ	0xFE2
 22321                           fsr1l	equ	0xFE1
 22322                           indf2	equ	0xFDF
 22323                           postinc2	equ	0xFDE
 22324                           postdec2	equ	0xFDD
 22325                           fsr2h	equ	0xFDA
 22326                           fsr2l	equ	0xFD9
 22327                           status	equ	0xFD8
 22328                           
 22329 ;; *************** function _EUSART1_Receive_ISR *****************
 22330 ;; Defined at:
 22331 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 22332 ;; Parameters:    Size  Location     Type
 22333 ;;		None
 22334 ;; Auto vars:     Size  Location     Type
 22335 ;;		None
 22336 ;; Return value:  Size  Location     Type
 22337 ;;                  1    wreg      void 
 22338 ;; Registers used:
 22339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22340 ;; Tracked objects:
 22341 ;;		On entry : 0/0
 22342 ;;		On exit  : 0/0
 22343 ;;		Unchanged: 0/0
 22344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22345 ;;      Params:         0       0       0       0       0       0       0
 22346 ;;      Locals:         0       0       0       0       0       0       0
 22347 ;;      Temps:          0       0       0       0       0       0       0
 22348 ;;      Totals:         0       0       0       0       0       0       0
 22349 ;;Total ram usage:        0 bytes
 22350 ;; Hardware stack levels used:    1
 22351 ;; This function calls:
 22352 ;;		Nothing
 22353 ;; This function is called by:
 22354 ;;		_INTERRUPT_InterruptManager
 22355 ;; This function uses a non-reentrant model
 22356 ;;
 22357                           
 22358                           	psect	text105
 22359  0045A6                     __ptext105:
 22360                           	opt stack 0
 22361  0045A6                     _EUSART1_Receive_ISR:
 22362                           	opt stack 21
 22363                           
 22364                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 22365                           
 22366                           ; BSR set to: 1
 22367                           ;incstack = 0
 22368  0045A6  A2AB               	btfss	4011,1,c	;volatile
 22369  0045A8  D002               	goto	i2l854
 22370                           
 22371                           ;eusart1.c: 206: {
 22372                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 22373  0045AA  98AB               	bcf	4011,4,c	;volatile
 22374                           
 22375                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 22376  0045AC  88AB               	bsf	4011,4,c	;volatile
 22377  0045AE                     i2l854:
 22378                           
 22379                           ;eusart1.c: 210: }
 22380                           ;eusart1.c: 212: TXREG1 = RCREG1;
 22381  0045AE  CFAE FFAD          	movff	4014,4013	;volatile
 22382                           
 22383                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 22384  0045B2  5042               	movf	_eusart1RxHead,w,c	;volatile
 22385  0045B4  0D01               	mullw	1
 22386  0045B6  0E46               	movlw	low _eusart1RxBuffer
 22387  0045B8  24F3               	addwf	prodl,w,c
 22388  0045BA  6ED9               	movwf	fsr2l,c
 22389  0045BC  0E02               	movlw	high _eusart1RxBuffer
 22390  0045BE  20F4               	addwfc	prodh,w,c
 22391  0045C0  6EDA               	movwf	fsr2h,c
 22392  0045C2  CFAE FFDF          	movff	4014,indf2	;volatile
 22393  0045C6  2A42               	incf	_eusart1RxHead,f,c	;volatile
 22394                           
 22395                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 22396  0045C8  0E27               	movlw	39
 22397  0045CA  6442               	cpfsgt	_eusart1RxHead,c	;volatile
 22398  0045CC  D002               	goto	i2l855
 22399                           
 22400                           ;eusart1.c: 217: {
 22401                           ;eusart1.c: 218: eusart1RxHead = 0;
 22402  0045CE  0E00               	movlw	0
 22403  0045D0  6E42               	movwf	_eusart1RxHead,c	;volatile
 22404  0045D2                     i2l855:
 22405                           
 22406                           ;eusart1.c: 219: }
 22407                           ;eusart1.c: 220: eusart1RxCount++;
 22408  0045D2  0101               	movlb	1	; () banked
 22409  0045D4  2BD5               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 22410                           
 22411                           ; BSR set to: 1
 22412  0045D6  0012               	return		;funcret
 22413  0045D8                     __end_of_EUSART1_Receive_ISR:
 22414                           	opt stack 0
 22415                           tosu	equ	0xFFF
 22416                           tosh	equ	0xFFE
 22417                           tosl	equ	0xFFD
 22418                           pclatu	equ	0xFFB
 22419                           pclath	equ	0xFFA
 22420                           tblptru	equ	0xFF8
 22421                           tblptrh	equ	0xFF7
 22422                           tblptrl	equ	0xFF6
 22423                           tablat	equ	0xFF5
 22424                           prodh	equ	0xFF4
 22425                           prodl	equ	0xFF3
 22426                           intcon	equ	0xFF2
 22427                           intcon2	equ	0xFF1
 22428                           indf0	equ	0xFEF
 22429                           postinc0	equ	0xFEE
 22430                           fsr0h	equ	0xFEA
 22431                           fsr0l	equ	0xFE9
 22432                           wreg	equ	0xFE8
 22433                           indf1	equ	0xFE7
 22434                           postdec1	equ	0xFE5
 22435                           fsr1h	equ	0xFE2
 22436                           fsr1l	equ	0xFE1
 22437                           indf2	equ	0xFDF
 22438                           postinc2	equ	0xFDE
 22439                           postdec2	equ	0xFDD
 22440                           fsr2h	equ	0xFDA
 22441                           fsr2l	equ	0xFD9
 22442                           status	equ	0xFD8
 22443                           tosu	equ	0xFFF
 22444                           tosh	equ	0xFFE
 22445                           tosl	equ	0xFFD
 22446                           pclatu	equ	0xFFB
 22447                           pclath	equ	0xFFA
 22448                           tblptru	equ	0xFF8
 22449                           tblptrh	equ	0xFF7
 22450                           tblptrl	equ	0xFF6
 22451                           tablat	equ	0xFF5
 22452                           prodh	equ	0xFF4
 22453                           prodl	equ	0xFF3
 22454                           intcon	equ	0xFF2
 22455                           intcon2	equ	0xFF1
 22456                           indf0	equ	0xFEF
 22457                           postinc0	equ	0xFEE
 22458                           fsr0h	equ	0xFEA
 22459                           fsr0l	equ	0xFE9
 22460                           wreg	equ	0xFE8
 22461                           indf1	equ	0xFE7
 22462                           postdec1	equ	0xFE5
 22463                           fsr1h	equ	0xFE2
 22464                           fsr1l	equ	0xFE1
 22465                           indf2	equ	0xFDF
 22466                           postinc2	equ	0xFDE
 22467                           postdec2	equ	0xFDD
 22468                           fsr2h	equ	0xFDA
 22469                           fsr2l	equ	0xFD9
 22470                           status	equ	0xFD8
 22471                           
 22472                           	psect	text106
 22473  000000                     __ptext106:
 22474                           	opt stack 0
 22475                           tosu	equ	0xFFF
 22476                           tosh	equ	0xFFE
 22477                           tosl	equ	0xFFD
 22478                           pclatu	equ	0xFFB
 22479                           pclath	equ	0xFFA
 22480                           tblptru	equ	0xFF8
 22481                           tblptrh	equ	0xFF7
 22482                           tblptrl	equ	0xFF6
 22483                           tablat	equ	0xFF5
 22484                           prodh	equ	0xFF4
 22485                           prodl	equ	0xFF3
 22486                           intcon	equ	0xFF2
 22487                           intcon2	equ	0xFF1
 22488                           indf0	equ	0xFEF
 22489                           postinc0	equ	0xFEE
 22490                           fsr0h	equ	0xFEA
 22491                           fsr0l	equ	0xFE9
 22492                           wreg	equ	0xFE8
 22493                           indf1	equ	0xFE7
 22494                           postdec1	equ	0xFE5
 22495                           fsr1h	equ	0xFE2
 22496                           fsr1l	equ	0xFE1
 22497                           indf2	equ	0xFDF
 22498                           postinc2	equ	0xFDE
 22499                           postdec2	equ	0xFDD
 22500                           fsr2h	equ	0xFDA
 22501                           fsr2l	equ	0xFD9
 22502                           status	equ	0xFD8
 22503                           
 22504                           	psect	rparam
 22505  0000                     tosu	equ	0xFFF
 22506                           tosh	equ	0xFFE
 22507                           tosl	equ	0xFFD
 22508                           pclatu	equ	0xFFB
 22509                           pclath	equ	0xFFA
 22510                           tblptru	equ	0xFF8
 22511                           tblptrh	equ	0xFF7
 22512                           tblptrl	equ	0xFF6
 22513                           tablat	equ	0xFF5
 22514                           prodh	equ	0xFF4
 22515                           prodl	equ	0xFF3
 22516                           intcon	equ	0xFF2
 22517                           intcon2	equ	0xFF1
 22518                           indf0	equ	0xFEF
 22519                           postinc0	equ	0xFEE
 22520                           fsr0h	equ	0xFEA
 22521                           fsr0l	equ	0xFE9
 22522                           wreg	equ	0xFE8
 22523                           indf1	equ	0xFE7
 22524                           postdec1	equ	0xFE5
 22525                           fsr1h	equ	0xFE2
 22526                           fsr1l	equ	0xFE1
 22527                           indf2	equ	0xFDF
 22528                           postinc2	equ	0xFDE
 22529                           postdec2	equ	0xFDD
 22530                           fsr2h	equ	0xFDA
 22531                           fsr2l	equ	0xFD9
 22532                           status	equ	0xFD8
 22533                           
 22534                           	psect	temp
 22535  000048                     btemp:
 22536                           	opt stack 0
 22537  000048                     	ds	1
 22538  0000                     int$flags	set	btemp
 22539  0000                     wtemp6	set	btemp+1
 22540                           tosu	equ	0xFFF
 22541                           tosh	equ	0xFFE
 22542                           tosl	equ	0xFFD
 22543                           pclatu	equ	0xFFB
 22544                           pclath	equ	0xFFA
 22545                           tblptru	equ	0xFF8
 22546                           tblptrh	equ	0xFF7
 22547                           tblptrl	equ	0xFF6
 22548                           tablat	equ	0xFF5
 22549                           prodh	equ	0xFF4
 22550                           prodl	equ	0xFF3
 22551                           intcon	equ	0xFF2
 22552                           intcon2	equ	0xFF1
 22553                           indf0	equ	0xFEF
 22554                           postinc0	equ	0xFEE
 22555                           fsr0h	equ	0xFEA
 22556                           fsr0l	equ	0xFE9
 22557                           wreg	equ	0xFE8
 22558                           indf1	equ	0xFE7
 22559                           postdec1	equ	0xFE5
 22560                           fsr1h	equ	0xFE2
 22561                           fsr1l	equ	0xFE1
 22562                           indf2	equ	0xFDF
 22563                           postinc2	equ	0xFDE
 22564                           postdec2	equ	0xFDD
 22565                           fsr2h	equ	0xFDA
 22566                           fsr2l	equ	0xFD9
 22567                           status	equ	0xFD8


Data Sizes:
    Strings     1931
    Constant    298
    Data        12
    BSS         256
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    142     142
    BANK1           256    135     235
    BANK2           256      0     150
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartByte$3984	PTR FTN()void  size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 32
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 32
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 101
		 -> STR_72(CODE[22]), STR_71(CODE[13]), STR_70(CODE[23]), STR_69(CODE[10]), 
		 -> STR_68(CODE[24]), STR_67(CODE[36]), STR_66(CODE[24]), STR_65(CODE[36]), 
		 -> STR_64(CODE[22]), STR_63(CODE[22]), STR_62(CODE[13]), STR_61(CODE[23]), 
		 -> STR_60(CODE[10]), STR_59(CODE[24]), STR_58(CODE[36]), STR_57(CODE[24]), 
		 -> STR_56(CODE[59]), STR_55(CODE[22]), STR_54(CODE[18]), STR_53(CODE[15]), 
		 -> STR_52(CODE[22]), STR_51(CODE[13]), STR_49(CODE[49]), STR_48(CODE[34]), 
		 -> STR_47(CODE[39]), STR_46(CODE[73]), STR_45(CODE[37]), STR_44(CODE[38]), 
		 -> STR_43(CODE[85]), STR_42(CODE[52]), STR_41(CODE[46]), STR_40(CODE[29]), 
		 -> STR_39(CODE[101]), STR_38(CODE[86]), STR_37(CODE[61]), STR_36(CODE[62]), 
		 -> STR_35(CODE[45]), STR_34(CODE[74]), STR_33(CODE[25]), STR_32(CODE[79]), 
		 -> STR_31(CODE[75]), STR_30(CODE[46]), STR_29(CODE[61]), STR_28(CODE[66]), 
		 -> STR_27(CODE[23]), STR_26(CODE[31]), STR_24(CODE[20]), STR_22(CODE[20]), 
		 -> STR_20(CODE[18]), STR_19(CODE[20]), STR_18(CODE[31]), STR_10(CODE[11]), 
		 -> STR_8(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_73(CODE[7]), STR_50(CODE[6]), STR_25(CODE[9]), STR_23(CODE[12]), 
		 -> STR_21(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> PrintTxStatus@dest(BANK1[80]), PrintRxStatus@dest(BANK1[80]), PrintSystemStatus@dest(BANK1[80]), PrintHelpScreen@dest(BANK1[50]), 
		 -> SendUartSystemInitMessage@dest(BANK1[50]), readUartByte@dest(BANK1[50]), SampleSingleChannel@dest(BANK1[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    SetUartMode@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    SetUartRefrashRate@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    set_system_type@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    sp__memset	PTR void  size(2) Largest target is 32
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GroupCommon@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 80
		 -> PrintTxStatus@dest(BANK1[80]), PrintRxStatus@dest(BANK1[80]), PrintSystemStatus@dest(BANK1[80]), PrintHelpScreen@dest(BANK1[50]), 
		 -> SendUartSystemInitMessage@dest(BANK1[50]), STR_17(CODE[10]), STR_16(CODE[10]), STR_15(CODE[10]), 
		 -> STR_14(CODE[10]), STR_13(CODE[10]), STR_12(CODE[10]), STR_11(CODE[10]), 
		 -> readUartByte@dest(BANK1[50]), STR_9(CODE[9]), SampleSingleChannel@dest(BANK1[50]), STR_7(CODE[10]), 
		 -> STR_6(CODE[34]), STR_5(CODE[32]), STR_4(CODE[10]), STR_3(CODE[29]), 
		 -> STR_2(CODE[33]), STR_1(CODE[10]), 

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 

    S48$SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_50(CODE[6]), 

    systemStatus.SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_50(CODE[6]), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _CollectTxStatusParams->___lltoft
    _CollectRxStatusParams->___lltoft
    _AdcSingleSample->_UART_Write_Text
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _SaveSystemStatus->_StoreIntInEeprom
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    _UART_Write_Text->_EUSART1_Write
    ___lwtoft->___ftpack
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_ZeroArray
    _ZeroArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    _eval_poly->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftmul->___wmul
    ___ftadd->___ftmul
    ___ftdiv->___lwtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartByte
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _PrintTxStatus->_sprintf
    _PrintRxStatus->_sprintf
    _set_system_type->_GetIntFromUartData
    _SetUartRefrashRate->_GetIntFromUartData
    _SetUartMode->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _PrintSystemStatus->_sprintf
    _PrintHelpScreen->_sprintf
    _SetMcuRunTime->___llmod
    _SendUartSystemInitMessage->_sprintf
    _SampleSingleChannel->_sprintf
    _sprintf->___llmod
    _scale->___ftmul
    _fround->___ftmul
    ___llmod->_pow
    _SampleAllChannels->_pow
    _ReadSystemStatusFromEprom->_ReadIntFromEeprom
    _InitSystemApplicationManagers->_DacInit
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_scale
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartByte
    _readUartByte->_GroupCommon
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _GroupTx->_PrintTxStatus
    _GroupRx->_PrintRxStatus
    _GroupCommon->_PrintSystemStatus

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1488548
                        _BlinkOkLeds
      _InitSystemApplicationManagers
          _ReadSystemStatusFromEprom
                  _SampleAllChannels
                _SampleSingleChannel
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                        56    56      0  772894
                                            139 BANK0      3     3      0
                                             82 BANK1     53    53      0
                       _EUSART1_Read
                        _GroupCommon *
                            _GroupRx *
                            _GroupTx *
                _InitRxMessageParams
                    _UART_Write_Text
                            _sprintf
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    1189
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupTx                                             10     8      2  231124
                                            131 BANK0      8     8      0
                                             80 BANK1      2     0      2
                    _AdcSingleSample
              _CollectTxStatusParams
                 _GetIntFromUartData
                      _PrintTxStatus
                           ___awtoft
                            ___fttol
                            ___llmod
                                _pow
 ---------------------------------------------------------------------------------
 (3) _PrintTxStatus                                       80    80      0   90341
                                              0 BANK1     80    80      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _CollectTxStatusParams                                0     0      0    7179
                           ___lltoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _GroupRx                                             10     8      2  231124
                                            131 BANK0      8     8      0
                                             80 BANK1      2     0      2
                    _AdcSingleSample
              _CollectRxStatusParams
                 _GetIntFromUartData
                      _PrintRxStatus
                           ___awtoft
                            ___fttol
                            ___llmod
                                _pow
 ---------------------------------------------------------------------------------
 (3) _PrintRxStatus                                       80    80      0   90341
                                              0 BANK1     80    80      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _CollectRxStatusParams                                0     0      0    7179
                           ___lltoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _AdcSingleSample                                     10     5      5    6799
                                             30 COMRAM    10     5      5
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (2) _GroupCommon                                          3     1      2  218488
                                            131 BANK0      1     1      0
                                             80 BANK1      2     0      2
                    _PrintHelpScreen
                  _PrintSystemStatus
                   _SaveSystemStatus
                        _SetUartMode
                 _SetUartRefrashRate
                    _set_system_type
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _set_system_type                                      6     4      2   12204
                                             23 BANK0      6     4      2
                 _GetIntFromUartData
                    _UART_Write_Text
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _SetUartRefrashRate                                   6     4      2   11243
                                             23 BANK0      6     4      2
                 _GetIntFromUartData
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (3) _SetUartMode                                          6     4      2   11212
                                             23 BANK0      6     4      2
                 _GetIntFromUartData
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (3) _GetIntFromUartData                                  17    13      4    4711
                                              6 BANK0     17    13      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (4) _strtol                                              16    10      6    2453
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (6) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _SaveSystemStatus                                     0     0      0    2354
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _PrintSystemStatus                                   80    80      0   90031
                                              0 BANK1     80    80      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _PrintHelpScreen                                     50    50      0   91209
                                              0 BANK1     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0    1672
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           50    50      0   90155
                                              0 BANK1     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SampleSingleChannel                                 59    59      0  222918
                                            131 BANK0      2     2      0
                                              0 BANK1     57    57      0
                  _ADC_GetConversion
                    _UART_Write_Text
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    36      8   83399
                                             92 BANK0     39    31      8
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   16850
                                             18 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              10     7      3   16571
                                             18 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2053
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             29 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     634
                                             23 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     853
                                             23 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8    1672
                                             83 BANK0      9     1      8
                           ___awtoft (ARG)
                            ___fttol (ARG)
                            ___lldiv (ARG)
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     961
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      6     4      2    6312
                                             24 COMRAM     6     4      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SampleAllChannels                                    8     8      0  133265
                                             83 BANK0      8     8      0
                  _ADC_GetConversion
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    3644
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ReadSystemStatusFromEprom                            2     2      0  121858
                                            106 BANK0      2     2      0
                  _ReadIntFromEeprom
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  145598
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0   10882
                                             38 BANK0      6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  134716
                                            106 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    2354
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     263
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     143
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _SWSPI_send_word                                      9     4      5   10349
                                             39 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5     515
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SWSPI_Synth_send_bits                               42    38      4    3744
                                             35 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    1189
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (4) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ReadIntFromEeprom                                   23    19      4  121756
                                             83 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 17    11      6  114673
                                             66 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   37292
                                             50 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                  9     6      3   59494
                                             57 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                7     2      5     539
                                             50 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                                8     5      3   13474
                                             48 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4    1811
                                             25 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1458
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             40 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   18415
                                             46 COMRAM     2     2      0
                                             40 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3582
                                             37 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    8341
                                             43 COMRAM     3     3      0
                                              6 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6294
                                             40 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5698
                                             28 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     425
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    4353
                                             34 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3746
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3535
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _EepromRead                                           1     1      0      44
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (4) _DATAEE_ReadByte                                      1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BlinkOkLeds
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _ReadSystemStatusFromEprom
     _ReadIntFromEeprom
       _EepromRead
         _DATAEE_ReadByte
       ___awtoft
         ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lmul
         _EepromRead (ARG)
           _DATAEE_ReadByte
       _pow
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
   _SampleAllChannels
     _ADC_GetConversion
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
   _SampleSingleChannel
     _ADC_GetConversion
     _UART_Write_Text
       _EUSART1_Write
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SendUartSystemInitMessage
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SetMcuRunTime
     ___llmod
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       _pow (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _GroupCommon *
       _PrintHelpScreen
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _PrintSystemStatus
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SaveSystemStatus
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
       _SetUartMode
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
       _SetUartRefrashRate
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
       _set_system_type
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
         ___lldiv
       _testLeds
     _GroupRx *
       _AdcSingleSample
         _UART_Write_Text
           _EUSART1_Write
       _CollectRxStatusParams
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
       _GetIntFromUartData
         _ZeroArray
           _memset
         _strtol
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _isalpha
             _isupper
           _isdigit
           _isspace
           _toupper
       _PrintRxStatus
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___awtoft
         ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _pow
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
     _GroupTx *
       _AdcSingleSample
         _UART_Write_Text
           _EUSART1_Write
       _CollectTxStatusParams
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
       _GetIntFromUartData
         _ZeroArray
           _memset
         _strtol
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _isalpha
             _isupper
           _isdigit
           _isspace
           _toupper
       _PrintTxStatus
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___awtoft
         ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _pow
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _UART_Write_Text *
       _EUSART1_Write
     _sprintf *
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _toupper *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      96       8       58.6%
BITBANK1           100      0       0       5        0.0%
BANK1              100     87      EB       6       91.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     8E      8E       4       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     256       9        0.0%
DATA                 0      0     256      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 29 13:38:10 2018

              __end_of_keepAliveSignalLed 4798                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 01EA                             ___altoft@sign 0030  
                                      l70 3DF0                                        l72 3E36  
                            ___awdiv@sign 0023                       __end_of_BlinkOkLeds 3F54  
                         _SWSPI_send_word 3610                       ___wmul@multiplicand 0028  
                         _timer0ReloadVal 0046            __size_of_CollectTxStatusParams 0066  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
           __end_of_CollectTxStatusParams 3D74                              ___ftadd@exp1 0087  
                            ___ftadd@exp2 0086                               __CFG_LVP$ON 000000  
           SampleSingleChannel@_adcResult 0135                              ___ftadd@sign 0085  
                             ?_MEMORY_ISR 0001                                       l150 2A9A  
                                     l310 119C                                       l303 1108  
                                     l304 1144                                       l401 2FF0  
                                     l153 2AB0                                       l321 1252  
                                     l402 3006                                       l162 2B02  
                                     l146 2A80                                       l314 11C6  
                                     l147 2A78                                       l315 11DC  
                                     l164 2B18                                       l156 2AC6  
                                     l333 3B9A                                       l317 11E2  
                                     l309 1158                                       l334 3B66  
                                     l166 2B2E                                       l158 2ADC  
                                     l318 1222                                       l175 1C14  
                                     l159 2AF6                                       l319 11EC  
                                     l184 222E                                       l176 1B6C  
                                     l168 2B44                                       l280 0FFC  
                                     l601 40D4                                       l177 1B8A  
                                     l169 2B5E                                       l610 40F2  
                                     l602 40DE                                       l186 22FA  
                                     l178 1BA8                                       l290 1094  
                                     l187 231C                                       l179 1BC6  
                                     l275 128C                                       l291 104C  
                                     l620 4152                                       l700 474E  
                                     l188 233E                                       l276 0FDA  
                                     l621 4116                                       l189 2360  
                                     l293 1056                                       l285 101E  
                                     l630 412A                                       l622 4120  
                                     l294 1060                                       l278 0FE6  
                                     l631 4134                                       l471 1C4E  
                                     l295 106A                                       l704 4752  
                                     l296 10AA                                       l609 40E8  
                                     l473 1CBC                                       l297 11B0  
                                     l289 103E                                       l570 36A6  
                                     l298 10B8                                       l299 10F4  
                                     l638 413E                                       l566 364C  
                                     l639 4148                                       l591 40FC  
                                     l831 431C                                       l592 40C0  
                                     l576 40A0                                       l584 32E6  
                                     l680 4430                                       l593 40CA  
                                     l577 406C                                       l657 4412  
                                     l578 4086                                       l586 3314  
                                     l658 43EA                                       l842 43BE  
                                     l579 4090                                       l587 3320  
                                     l667 43FE                                       l659 43F4  
                                     l843 43E2                                       l668 4408  
                                     l844 43E0                                       l829 42F6  
                                     l678 444E                                       l950 4560  
                                     l679 4426                                       l688 443A  
                                     l689 4444                                       l699 4756  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                       ??_Make32bitsArray 001E                          PLLInitialize@idx 0088  
                                     _exp 151E                                       _log 2496  
                                     _pow 1DB0                              _txStatistics 0187  
                            ___awmod@sign 001D                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                       ??_set_system_type 0030            ?_InitSystemApplicationManagers 0001  
                            ___ftdiv@cntr 0060                              ___ftdiv@sign 0065  
                                    l1210 2A2C                                      l2004 19C4  
                                    l2013 1A02                                      l2005 19BA  
                                    l2014 19F8                                      l1222 26B6  
                                    l1214 293C                                      l2023 2D84  
                                    l1055 45F0                                      l2031 2390  
                                    l1231 25D0                                      l2016 1A26  
                                    l2112 399C                                      l1240 3AF6  
                                    l2025 2DAC                                      l2017 1A42  
                                    l2201 1DFA                                      l2113 3990  
                                    l2033 23BC                                      l1217 2946  
                                    l1241 3B04                                      l2026 2DEA  
                                    l2018 1A72                                      l2202 1DEA  
                                    l2122 3CC6                                      l2034 23F6  
                                    l1226 25C6                                      l1242 3B0A  
                                    l2027 2E10                                      l1331 290A  
                                    l2123 3CBA                                      l2043 247E  
                                    l2035 241E                                      l1243 3B18  
                                    l2204 1E12                                      l1332 2830  
                                    l2116 39D0                                      l2044 2472  
                                    l1236 3B2C                                      l1244 3B26  
                                    l2133 3FC2                                      l2061 2D10  
                                    l2205 1E9C                                      l1317 4024  
                                    l1325 448E                                      l2117 39DE  
                                    l2037 245A                                      l1237 3AEA  
                                    l2134 3FB6                                      l2062 2D20  
                                    l2206 1E7A                                      l1350 3F90  
                                    l1326 4464                                      l2126 3CEE  
                                    l2038 244A                                      l2055 2C8E  
                                    l2207 1F22                                      l1319 4062  
                                    l2127 3CFC                                      l1239 3AF0  
                                    l2072 433E                                      l2048 37FE  
                                    l1344 3F94                                      l2057 2CB6  
                                    l2049 382E                                      l1345 3F56  
                                    l1337 36D8                                      l2066 46E2  
                                    l2058 2CE8                                      l1370 3C82  
                                    l1354 3602                                      l2059 2CF8  
                                    l2403 1538                                      l1347 3F5A  
                                    l1363 3E8A                                      l1355 35E8  
                                    l2084 2C36                                      l2076 2B9A  
                                    l1348 3F5E                                      l1372 3C98  
                                    l2085 2C2A                                      l2405 1572  
                                    l1349 3F62                                      l1357 35F4  
                                    l2078 2C12                                      l2414 304A  
                                    l2406 15AC                                      l2190 4612  
                                    l1710 05BA                                      l2087 2C52  
                                    l2079 2C02                                      l2423 3766  
                                    l2415 303C                                      l2431 325A  
                                    l2407 15DC                                      l1711 05DC  
                                    l1703 0572                                      l2432 324E  
                                    l2408 1706                                      l1712 0710  
                                    l1704 04DC                                      l2440 4654  
                                    l2360 180C                                      l2344 1754  
                                    l2417 3064                                      l2409 16DC  
                                    l1713 062C                                      l2361 1878  
                                    l2418 30E0                                      l1722 07D6  
                                    l1706 0592                                      l2450 467A  
                                    l2354 17D0                                      l2346 176C  
                                    l2427 31DE                                      l1723 086C  
                                    l1715 0732                                      l1707 057C  
                                    l2363 189C                                      l2355 17E0  
                                    l1563 3D8A                                      l1740 418C  
                                    l1812 3A9A                                      l1652 14DC  
                                    l1660 0BE8                                      l1724 07E2  
                                    l1716 071C                                      l2364 18D8  
                                    l2348 17C0                                      l1564 3DA2  
                                    l1813 3A8E                                      l2429 3228  
                                    l2189 4622                                      l1709 05B6  
                                    l2445 4706                                      l2357 17FA  
                                    l1902 394C                                      l1662 0C9C  
                                    l1718 0776                                      l1566 3DB4  
                                    l1903 3956                                      l1911 3C04  
                                    l1655 0AB8                                      l1671 0110  
                                    l2455 4724                                      l1904 3964  
                                    l1912 3BFC                                      l1656 09DE  
                                    l1672 01A4                                      l2368 47D4  
                                    l1568 3DC6                                      l1649 140C  
                                    l1681 073C                                      l1930 2766  
                                    l1682 01F6                                      l1666 00EC  
                                    l1739 4178                                      l1923 44AA  
                                    l2475 31AC                                      l2467 24B6  
                                    l1931 2796                                      l1915 3C1C  
                                    l1659 0A92                                      l1675 0114  
                                    l1667 0106                                      l2476 312E  
                                    l1940 27EC                                      l1916 3C26  
                                    l1908 3BE2                                      l1692 03C2  
                                    l1684 0288                                      l1668 0170  
                                    l2469 24DA                                      l1933 27D4  
                                    l1917 3C34                                      l1909 3BEE  
                                    l1685 02EE                                      l1677 015C  
                                    l1934 27C4                                      l1678 013E  
                                    l1927 2706                                      l1687 0314  
                                    l1960 34E6                                      l1688 0354  
                                    l1929 2724                                      l1689 041A  
                                    l1962 3524                                      l1698 0480  
                                    l1963 350E                                      l1939 27F8  
                                    l1965 354C                                      l1966 3542  
                                    l1990 193E                                      l1959 34F0  
                                    l1895 38FE                                      l1896 390E  
                                    l1994 1968                                      l1898 392C  
                                    l1899 3924                                      l1999 19CE  
                                    l6600 3DE0                                      l9020 32DE  
                                    ?_exp 0099                                      ?_log 0092  
                                    l7166 3F00                                      l8230 43AC  
                                    l8312 4014                                      l9172 3666  
                                    l9420 2FF0                                      l9176 3674  
                                    l9408 2F2E                                      l9432 1C3E  
                                    l9442 1C98                                      l9354 3602  
                                    l7668 385A                                      l9446 1CAC  
                                    l9382 3E8A                                      l9456 1D06  
                                    l9562 2226                                      l8930 077A  
                                    l8826 039C                                      l8818 0354  
                                    l7956 4612                                      ?_pow 00A2  
                                    l8950 07E2                                      l8846 0484  
                                    l8688 16DC                                      l8874 057C  
                                    STR_1 7FD0                                      l8976 36C8  
                                    STR_2 7DD1                                      STR_3 7E4E  
                                    l8994 3710                                      STR_4 7FD0  
                                    STR_5 7DF2                                      STR_6 7DAF  
                                    STR_7 7FD0                                      STR_8 7FF9  
                                    STR_9 7FE3                        EepromWrite@address 001C  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u4105 456E                                      u4106 4570  
                                    u7030 3556                                      u7120 1930  
                                    u7220 19D6                                      u6308 478C  
                                    u7150 195A                                      u7311 2C9E  
                                    u7400 2BB8                                      u7081 18FC  
                                    u7250 1A0A                                      u6290 478A  
                                    u8130 175C                                      u7091 1910  
                                    u7180 1998                                      u7405 2BB0  
                                    u9110 3710                                      u7440 2C3C  
                                    u9040 07B2                                      u8160 1796  
                                    u8410 2484                                      u7291 2C76  
                                    u8331 2374                                      u8500 39A0  
                                    u7700 3C08                                      u9060 087C  
                                    u8180 17A6                                      u7381 2B7E  
                                    u7470 378E                                      u9070 0894  
                                    u9230 2A8C                                      u7551 2D6A  
                                    u8351 23A0                                      u7640 3930  
                                    u8610 15B6                                      u9410 36A0  
                                    u8530 3CCA                                      u7571 2D94  
                                    u8620 15B8                                      u9180 3332  
                                    u9500 3E84                                      u7478 3790  
                                    u9350 2B56                                      u8480 27FE  
                                    u7850 3056                                      u8730 1E60  
                                    u8810 022E                                      u7770 4676  
                                    u9290 2AEE                                      u9380 3620  
                                    u8660 3B92                                      u6990 34D8  
                                    u8670 3BC6                                      u7790 4646  
                                    u8815 0224                                      u7960 3F88  
                                    u7890 31FE                                      u9570 1C98  
                                    u8930 04BC                                      u8850 0326  
                                    u9810 10E8                                      u8667 3B88  
                                    u8860 0366                                      u7965 3F7E  
                                    u8677 3BBC                                      u9590 1D06  
                                    u8960 05A0                                      u7898 3202  
                                    u8970 05B0                                      u8890 039C  
                                    u9940 1190                                      u9870 1138  
                                    u9978 1266                                      u9979 1284  
                ??_SwSpi_Set_Synth_Le_Pin 0019                                      _WPUB 000F61  
                           _EUSART1_Write 43AA                   ??_InitAdcApplicationMgr 0018  
                                    _main 3D74                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 4850                           __end_of_DacInit 300C  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0048  
                           __CFG_BORV$190 000000                                      exp@x 0099  
                                    log@x 0092                 SampleSingleChannel@adcRes 0137  
                        ?_ClearMcuRunTime 0001                                      pow@x 00A2  
                                    pow@y 00A5                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00DC  
                           __CFG_IESO$OFF 000000                       __end_of_EepromWrite 481C  
                           _adcSampleMode 0045                              _sprintf$3979 00CA  
             __end_of_SampleSingleChannel 1C26                           GroupCommon@data 0150  
                            ___ftmul@cntr 0070                              ___param_bank 000000  
                            ___ftmul@sign 0071                   __end_of_UART_Write_Text 3BCE  
                         __end_of_GroupRx 2A52                           __end_of_GroupTx 26E8  
                            ___fttol@exp1 0087                 __size_of_DATAEE_WriteByte 0036  
                                   ??_exp 0031                                     ??_log 0031  
                            ___fttol@lval 0083                                     ??_pow 0031  
                 __end_of_TMR0_Initialize 45A6                    _ReadIntFromEeprom$3974 00BE  
                  _ReadIntFromEeprom$3975 00C1            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 480E                SWSPI_DAC_send_bits@phrType 001C  
                                   ?_main 0001                           __end_of___awdiv 396E  
                                   _EEADR 000FA9                           __end_of___ftadd 1A98  
                                   STR_10 7FBB                                     STR_11 7FD0  
                                   STR_12 7FD0                                     STR_20 7F62  
                                   STR_13 7FD0                                     STR_21 7FF3  
                                   STR_14 7FD0                                     STR_22 7F4E  
                                   STR_30 7C78                                     STR_15 7FD0  
                                   STR_23 7FAF                                     STR_31 79D2  
                                   STR_16 7FD0                                     STR_24 7F3A  
                                   STR_40 7E31                                     STR_32 7983  
                                   STR_17 7FD0                                     STR_25 7FDA  
                                   STR_33 7E6B                                     STR_41 7C4A  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                                     STR_26 7E12  
                                   STR_50 7FF3                                     STR_18 7E12  
                                   STR_42 7BE5                                     STR_34 7A1D  
                                   STR_51 7FA2                                     STR_19 7F26  
                                   STR_27 7ECC                                     STR_35 7CA6  
                                   STR_43 792E                                     STR_60 7FC6  
                                   STR_52 7F10                                     STR_44 7CFA  
                                   STR_36 7AF2                                     STR_28 7AB0  
                         __end_of___awmod 3C3E                                     STR_53 7F86  
                                   STR_61 7EE3                                     STR_45 7D20  
                                   STR_37 7B6D                                     STR_29 7B30  
                                   STR_70 7EE3                                     STR_62 7F95  
                                   STR_54 7F74                                     STR_46 7A67  
                                   STR_38 78D8                                     STR_63 7EFA  
                                   STR_71 7F95                                     STR_55 7EFA  
                                   STR_47 7CD3                                     STR_39 7873  
                                   STR_72 7EFA                                     STR_64 7EFA  
                                   STR_48 7D8D                                     STR_56 7BAA  
                                   STR_73 7FEC                                     STR_57 7E84  
                                   STR_65 7D45                                     STR_49 7C19  
                                   STR_66 7E84                                     STR_58 7D69  
                                   STR_67 7D69                                     STR_59 7E9C  
                                   STR_68 7EB4                                     STR_69 7FC6  
                         __end_of___ftdiv 2E42                           __end_of___ftneg 46F0  
                         __end_of___lldiv 39F0                                     u10107 3F26  
                                   u10117 3F40                                     u10047 3DF8  
                                   u10057 3E08                                     u10067 3E18  
                              _EepromRead 483C                           __end_of___ftmul 2D5A  
                                   u10077 3E28                                     u10087 1BFC  
                                   _T0CON 000FD5                                     u10097 3334  
                         ___awdiv@divisor 0020                           __end_of___llmod 3D0E  
                         __end_of___ftsub 4368                           __end_of___fttol 2C64  
                          __CFG_DEBUG$OFF 000000               __size_of_SetUartRefrashRate 0060  
                         __end_of___lwmod 43AA                     _CollectRxStatusParams 3E98  
                     StoreIntInEeprom@idx 0029                                     i2l854 45AE  
                                   i2l782 007A                                     i2l855 45D2  
                                   i2l848 44FA                                     i2l784 0086  
                                   i2l849 44F6                                     i2l777 005E  
                                   i2l786 0090                                     i2l779 006A  
                         ___awdiv@counter 0022                       StoreIntInEeprom@val 0028  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                ?_ReadSystemStatusFromEprom 0001  
                     _SWSPI_DAC_send_bits 4064         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                          ?_PrintHelpScreen 0001  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 373E  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001E  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 44CE  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 34C8  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                           _DATAEE_ReadByte 47D8  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 0023  
                 __end_of_PIN_MANAGER_IOC 4858                                     _make8 3F54  
                         __end_of_dpowers 77D9            __size_of_SWSPI_Synth_send_bits 00C2  
                                   _count 01C8                                     _floor 300C  
                                   _ldexp 31C4                         PrintRxStatus@dest 0100  
                                   _frexp 373E                                     _errno 01C4  
           __end_of_SWSPI_Synth_send_bits 3354                                     _scale 08A2  
                         __end_of_isalpha 465C                           __end_of_isdigit 470E  
                                   _group 01D3                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 001C                             ??_GroupCommon 0031  
                         __end_of_isspace 4682                            ?_EUSART1_Write 0001  
                         __end_of_isupper 472C                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 00AF  
                          ??_EUSART1_Read 0018                                     status 000FD8  
                                   wtemp6 0049                           __end_of_sprintf 08A2  
                    ReadIntFromEeprom@idx 00C9                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 47D8            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
                             exp@exponent 009F                      ?_SWSPI_DAC_send_bits 001A  
                             ldexp@newexp 0095                   __end_of_SWSPI_send_word 36AA  
                             _BlinkOkLeds 3EF6                           __initialization 41BE  
                             log@exponent 0095                __end_of_EUSART1_Initialize 453C  
                            __end_of_main 3DD8               ?_INTERRUPT_InterruptManager 0001  
                                  ??_main 0031                             ___fttol@sign1 0082  
                       ?_SwSpi_Set_CE_Pin 0018                        _TimerKeepAliveFlag 01D9  
                           __activetblptr 000002                       set_system_type@data 0077  
              ?_SendUartSystemInitMessage 0001                      __size_of__tdiv_to_l_ 0132  
                           ??_SetUartMode 0030                        ??_SwSpi_Set_CE_Pin 0019  
                   ?_EUSART1_Transmit_ISR 0001         __end_of_ReadSystemStatusFromEprom 38EA  
                 __end_of_TMR0_StartTimer 4854                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 0090  
                                  ?_ldexp 0092                                    ?_frexp 0018  
                        __end_of___altoft 3AE4                          ___llmod@dividend 00B3  
                                  ?_scale 0072                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 00CA                                    _EECON2 000FA7  
                           ?_readUartByte 0001                          ___awdiv@dividend 001E  
                        __end_of___awtoft 44CE                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 3576                          __end_of___lltoft 400C  
                                  i2l1010 3444                                    i2l1011 3466  
                                  i2l1012 3488                                    i2l1013 34AA  
                                  i2l2180 43A0                                    i2l2175 437E  
                                  i2l2176 4376                                    i2l2179 4396  
                          __CFG_WDTEN$OFF 000000                      StoreIntInEeprom@data 0021  
                                  _TABLAT 000FF5                               _EepromWrite 480E  
                                  _RCREG1 000FAE                          __end_of___lwtoft 46CC  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 474A                   __size_of_SwSpi_Data_Pin 0056  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                   ??_SWSPI_DAC_send_bits 001B                       __end_of_GroupCommon 3B5C  
                               ??_GroupRx 00E3                                 ??_GroupTx 00E3  
                          __CFG_XINST$OFF 000000                               GroupRx@data 0150  
                        __end_of__powers_ 7800                               GroupTx@data 0150  
                       _PrintSystemStatus 3354                                    _cState 01D4  
                                  ___ftge 37CE                                    ___lmul 4168  
               SWSPI_Synth_send_bits@data 0024                                    ___wmul 4682  
                               ??___awdiv 0022                                 ??___ftadd 0082  
               SWSPI_Synth_send_bits@mask 0080                            __CFG_STVREN$ON 000000  
                               ??___awmod 001C                          ?_UART_Write_Text 0019  
                               ??___ftdiv 0029                                 ??___ftneg 001B  
                               ??___lldiv 0020                                 ??___ftmul 002C  
                   __end_of_PLLInitialize 1DB0                                 ??___llmod 0031  
                               ??___ftsub 002F                                 ??___fttol 007D  
                               ??___lwmod 0005            SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                      ?_PrintSystemStatus 0001                      AdcSingleSample@cType 0028  
                        ?_TMR0_Initialize 0001                                    _memset 4608  
                                  _fround 12C0                        __end_of_DAC_ADDRES 7833  
                                  clear_0 41E4                                    clear_1 41F0  
                                  clear_2 41FC                          ___awdiv@quotient 0024  
                                  _retNum 01C0                           ___awmod@divisor 001A  
                                  _rxFreq 0035                                    _txFreq 0031  
                         ___awmod@counter 001C                    ?_CollectRxStatusParams 0001  
                 __end_of_DATAEE_ReadByte 47EC                               ?_EepromRead 0001  
                                  _strtol 1714                                    floor@i 0093  
                   __end_of_SwSpi_Clk_Pin 4168                                    floor@x 0090  
                   ___ftmul@f3_as_product 006D                  SWSPI_DAC_send_bits@count 001B  
                               ??_isalpha 001B                                 ??_isdigit 0018  
                       ?_SaveSystemStatus 0001                       ??_PrintSystemStatus 0031  
                        __end_of_testLeds 3E38                             ?_SetMcuSystem 0001  
       __end_of_SendUartSystemInitMessage 2F28                              __mediumconst 7748  
                               ??_isspace 0018                                    tblptrh 000FF7  
                               ??_isupper 0018                                    tblptrl 000FF6  
                                  tblptru 000FF8                  ADC_GetConversion@channel 001C  
                      ??_SaveSystemStatus 002A                            ??_readUartByte 00EB  
                         ??_EUSART1_Write 0018  TMR0_SetInterruptHandler@InterruptHandler 0018  
            __size_of_InitRxMessageParams 0044                          ?_PIN_MANAGER_IOC 0001  
                               ??_sprintf 00C4                     ReadIntFromEeprom@base 00BA  
                       PrintTxStatus@dest 0100                           _eusart1RxBuffer 0246  
                               ??_toupper 0018                        __size_of_ZeroArray 001E  
           __size_of_INTERRUPT_Initialize 0004                           _eusart1TxBuffer 0200  
                     __end_of_SetUartMode 3CA6                          __end_ofexp@coeff 7858  
                       _SYSTEM_Initialize 4766                          __end_oflog@coeff 7873  
                              __accesstop 0060                   __end_of__initialization 4202  
                              ___altoft@c 0088                             ZeroArray@size 0022  
                              ___ftadd@f1 007C                                ___ftadd@f2 007F  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 008F  
                           ___rparam_used 000001                                ___ftdiv@f1 0023  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0061  
                              ___ftneg@f1 0018                 __end_of_PrintSystemStatus 3414  
                              ___awtoft@c 0020                                ___ftmul@f1 0066  
                              ___ftmul@f2 0069                          ?_SWSPI_send_word 0028  
                              ___ftsub@f1 0088                                ___ftsub@f2 008B  
                              ___fttol@f1 0079                           _Make32bitsArray 400C  
                          __pcstackCOMRAM 0001                              _systemStatus 01B2  
                            __pidataBANK1 481C                       ??_SYSTEM_Initialize 001C  
                   __end_of_PrintRxStatus 2218                                 ?_TMR0_ISR 0001  
                              ___lltoft@c 0020                             __end_of_make8 3FB0  
                        _DATAEE_WriteByte 453C                             __end_of_floor 30EE  
                           __end_of_ldexp 3292                             __end_of_frexp 37CE  
                   __end_of_PrintTxStatus 20A4                             __end_of_scale 0CC2  
                         _set_system_type 3576                    _SwSpi_Set_Synth_Le_Pin 4422  
                              ___lwtoft@c 0020           __end_of_DAC_DEFAULT_INIT_VALUES 782F  
                    __end_of_EUSART1_Read 4326                              ??_MEMORY_ISR 0001  
               __size_of_StoreIntInEeprom 0038                    __size_of_SetMcuRunTime 0046  
                  ??_EUSART1_Transmit_ISR 0001                                __div_to_l_ 26E8  
                          ??_SetMcuSystem 001C                     TMR0_ISR@CountCallBack 0039  
           SwSpi_Set_Synth_Le_Pin@phrType 0019                           _lastAdcFfwrRSSI 003D  
                      _keepAliveSignalLed 4780                         make8@dataLocation 001C  
             __end_of_EUSART1_Receive_ISR 45D8                  __size_of_AdcSingleSample 011A  
                                 ??_make8 001D                           __div_to_l_@exp1 0023  
                                 ??_floor 0031                          ?_TMR0_StartTimer 0001  
                                 ??_ldexp 0097                           __div_to_l_@cntr 0022  
                                 ??_frexp 001D                                   ??_scale 002F  
               __end_of_SYSTEM_Initialize 4780                           __div_to_l_@quot 001E  
                           _eusart1RxHead 0042                       PrintHelpScreen@dest 0100  
                           _eusart1TxHead 0044                             _eusart1RxTail 0041  
                              __pbssBANK1 0187                                __pbssBANK2 0200  
                             _GroupCommon 3AE4                             _eusart1TxTail 0043  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00D6  
                         __CFG_PLLCFG$OFF 000000                                _channelArr 7833  
                              _channelNum 003B                                __pnvCOMRAM 0046  
          __size_of_InitAdcApplicationMgr 0006                             __div_to_l_@f1 0018  
                           __div_to_l_@f2 001B             __end_of_InitAdcApplicationMgr 484C  
                     __size_of_EepromRead 000A                        __end_of_MEMORY_ISR 485C  
         ??_InitSystemApplicationManagers 0031                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018          __end_of_TMR0_SetInterruptHandler 483C  
                                 ?___lmul 001A                                   ?___wmul 0026  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                    ??_keepAliveSignalLed 0018                         __end_of_ZeroArray 474A  
                               ?___altoft 0088                                   ?_memset 0018  
                       _ReadIntFromEeprom 2810                                   ?_fround 0072  
                          ___lmul@product 0022                                 ?___awtoft 0020  
                               ?___ftpack 0018                                 ?___lltoft 0020  
                 __size_of_ADC_Initialize 0016                                 ?___lwtoft 0020  
                      ?_ReadIntFromEeprom 00B3                                   ?_strtol 0026  
                        ?_DATAEE_ReadByte 0001                     _CollectTxStatusParams 3D0E  
             SampleAllChannels@_adcResult 00B6               ??_ReadSystemStatusFromEprom 0031  
                             _SetUartMode 3C3E                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                           readUartByte@idx 0184  
                 SampleSingleChannel@dest 0100                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                       ??_ReadIntFromEeprom 00B7  
                                 _DacInit 2F28                     GetIntFromUartData@idx 0075  
                          _SwSpi_Data_Pin 40BC                      DATAEE_WriteByte@bAdd 0019  
                 __end_of_Make32bitsArray 4064                             _SetMcuRunTime 4258  
                      _GetIntFromUartData 36AA                           __CFG_PWRTEN$OFF 000000  
                 __end_of_set_system_type 3610                __size_of_PrintSystemStatus 00C0  
                                 _GroupRx 2936                                   _GroupTx 25C0  
                       __end_of__npowers_ 7827                                   __Hparam 0000  
                            ?_BlinkOkLeds 0001                                _scale$3978 0075  
                                 __Lparam 0000                                 ?_testLeds 0001  
                    PLLInitialize@idx_803 008A                 __end_of_ReadIntFromEeprom 2936  
                     ?_GetIntFromUartData 0066                           __size_of___ftge 0090  
                                 ___awdiv 38EA                           __size_of___lmul 0056  
                                 ___ftadd 18EA                                   ___awmod 3BCE  
                                 ___ftdiv 2D5A                      __end_of_readUartByte 12C0  
                                 ___ftneg 46CC                                   ___lldiv 396E  
                         __size_of___wmul 0026                                   ___ftmul 2C64  
                                 ___llmod 3CA6                                   ___ftsub 4326  
                                 ___fttol 2B6C                  __size_of_ClearMcuRunTime 0014  
                                 ___lwmod 4368                                ??___altoft 008C  
              SWSPI_Synth_send_bits@count 0084                     _mcuRunTimeIn5SecTicks 01BC  
              __end_of_SetUartRefrashRate 3E98                                   _crcCalc 01D0  
                                 _channel 01D6                                   __pcinit 41BE  
                              ??___awtoft 0023                                ??___ftpack 001D  
                       __end_of_eval_poly 31C4                           __size_of_memset 002C  
                         __size_of_fround 025E                                   __ramtop 0600  
            __size_of_SampleSingleChannel 018E                                ??___lltoft 0024  
                                 __ptext0 3D74                                   __ptext1 0FD2  
                                 __ptext2 429E                                   __ptext3 3AE4  
                                 __ptext4 2936                                   __ptext5 25C0  
                                 __ptext6 1F30                                   __ptext7 3D0E  
                                 __ptext8 20A4                                   __ptext9 3E98  
                              ??___lwtoft 0023                                 _T0CONbits 000FD5  
                             ?__div_to_l_ 0018                           __size_of_strtol 01D6  
                                 _dpowers 77B1                     AdcSingleSample@chType 001F  
                   _OSCILLATOR_Initialize 4800                                   _isalpha 4634  
                            __size_of_exp 01F6                              __size_of_log 012A  
                                 _isdigit 46F0                              __size_of_pow 0180  
             ??_SendUartSystemInitMessage 0031                          ___awmod@dividend 0018  
                      _EUSART1_Initialize 4506                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 465C                 StoreIntInEeprom@numOfByes 0026  
                                 _isupper 470E                     AdcSingleSample@retNum 0024  
                                 _request 01D2                      ??_GetIntFromUartData 006A  
              __size_of_SYSTEM_Initialize 001A                   ?_SwSpi_Set_Dac_Sync_Pin 0001  
                                 _sprintf 00E0                    __end_of_SwSpi_Data_Pin 4112  
                 StoreIntInEeprom@address 0025                                   _toupper 47C4  
                    end_of_initialization 4202                                   exp@sign 00A1  
                     ?_EUSART1_Initialize 0001                              ?_EepromWrite 001B  
                   _SWSPI_Synth_send_bits 3292                __end_of_TEST_PLL_REGISTERS 777D  
                __size_of_PrintHelpScreen 0310                 __size_of_SwSpi_Set_CE_Pin 003C  
                          ?_SetMcuRunTime 0001                                   memset@c 001A  
                                 memset@n 001C                                   memset@p 001E  
                           __Lmediumconst 7748                         ??_AdcSingleSample 0024  
               _ReadSystemStatusFromEprom 385E                           ___lldiv@divisor 001C  
                              _numSamples 01C6                      __end_of_SetMcuSystem 4832  
                                 pow@sign 00AE                           ___lldiv@counter 0024  
                       readUartByte@chRec 0186                                ??_testLeds 0018  
                    SWSPI_send_word@datac 002D                                _rxMsgQueue 0282  
                                 postdec1 000FE5                                   postdec2 000FDD  
              __end_of_PLL_INIT_REGISTERS 77B1                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 429E                   ??_CollectRxStatusParams 0029  
                             testLeds@idx 0019                            __tdiv_to_l_@f1 0018  
                          __tdiv_to_l_@f2 001B                      ??_EUSART1_Initialize 0018  
   __end_of_InitSystemApplicationManagers 47C4    __size_of_InitSystemApplicationManagers 0016  
           _InitSystemApplicationManagers 47AE                             ??__tdiv_to_l_ 001E  
                                 strtol@a 0061                                   strtol@c 0065  
                                 strtol@s 0026                  _TMR0_SetInterruptHandler 4832  
                               _PORTBbits 000F81                                 _PORTDbits 000F83  
                            ??_EepromRead 0019                          _StoreIntInEeprom 445E  
                  ?_CollectTxStatusParams 0001                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 4766                              strtol@endptr 0028  
                    ?_InitRxMessageParams 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018                  __end_of_DATAEE_WriteByte 4572  
             __end_of_SWSPI_DAC_send_bits 40BC             SendUartSystemInitMessage@dest 0100  
                        ?_Make32bitsArray 0018                               ___ftdiv@exp 0064  
                            _EUSART1_Read 42E2                 __size_of_SaveSystemStatus 007A  
               _SendUartSystemInitMessage 2E42                   SampleAllChannels@adcRes 00B8  
                     __size_of__div_to_l_ 0128                          ?_set_system_type 0077  
                      __end_of_EepromRead 4846                               ___ftmul@exp 006C  
                 ?_SwSpi_Set_Synth_Le_Pin 0018                              _needToSample 01D7  
              __size_of_ReadIntFromEeprom 0126                              _lastAdcVgMon 01CA  
            __end_of_INTERRUPT_Initialize 4850                            __end_of___ftge 385E  
                          __end_of___lmul 41BE                        GroupCommon@request 00E3  
                          __end_of___wmul 46A8                         __size_of_TMR0_ISR 00B4  
                          _ADC_Initialize 4798                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 4634                            __end_of_fround 151E  
               AdcSingleSample@numSamples 0020                         _SampleAllChannels 2218  
                              floor@expon 0096                  __size_of_UART_Write_Text 0072  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 18EA  
                      ?_SampleAllChannels 0001                       start_initialization 41BE  
                              eval_poly@d 008B                                eval_poly@n 008D  
                              eval_poly@x 0088          ReadSystemStatusFromEprom@sysData 00CA  
                        BlinkOkLeds@state 001B                  __size_of_TMR0_Initialize 0034  
                              ldexp@value 0092           __size_of_PIN_MANAGER_Initialize 0048  
                     __end_of__tdiv_to_l_ 2496                     ??_InitRxMessageParams 0024  
                             __end_of_exp 1714                               __end_of_log 25C0  
                             __end_of_pow 1F30                    ?_SWSPI_Synth_send_bits 0024  
                         ??_SetMcuRunTime 0031                              ?_GroupCommon 0150  
                   __end_of_EUSART1_Write 43E6                       ??_SampleAllChannels 0031  
                  __size_of_PLLInitialize 018A                                frexp@value 0018  
                         ___llmod@divisor 00B7                  SetUartRefrashRate@retNum 0079  
                         ___llmod@counter 00BB                       DATAEE_ReadByte@bAdd 0018  
                __size_of_PIN_MANAGER_IOC 0004                     __size_of_readUartByte 02EE  
                  __size_of_SwSpi_Clk_Pin 0056            __end_of_SwSpi_Set_Synth_Le_Pin 445E  
                       ??_PrintHelpScreen 0031                                  ??___ftge 001E  
                                ??___lmul 0022                                  ??___wmul 002A  
                    __size_of_BlinkOkLeds 005E                    __end_of_ADC_Initialize 47AE  
                             __pdataBANK1 01DC                   SWSPI_DAC_send_bits@data 001A  
                          GroupRx@request 00EA                              _GroupRx$3970 00E4  
                            _GroupRx$3971 00E7                 __end_of_SampleAllChannels 2364  
                                ??_memset 001E                                  ??_fround 002F  
                            _GroupTx$3972 00E4                              _GroupTx$3973 00E7  
                           sprintf@tmpval 00DB                  __size_of_SWSPI_send_word 009A  
                                ??_strtol 002C                            _eusart1RxCount 01D5  
                       __size_of___altoft 007A                                fround@prec 007B  
                               _ZeroArray 472C                           DacInit@dacInput 00CC  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                          GroupTx@request 00EA                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                              ?_SetUartMode 0077  
                       __size_of___lwtoft 0024             __size_of_EUSART1_Transmit_ISR 0038  
                           __pcstackBANK0 0060                             __pcstackBANK1 0100  
                            _isalpha$3656 001C                     PrintSystemStatus@dest 0100  
                            _isdigit$3659 0019                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                              _readUartByte 0FD2  
                  __size_of_PrintRxStatus 0174                     set_system_type@retNum 0079  
                  __size_of_PrintTxStatus 0174                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 43E6                       _SampleSingleChannel 1A98  
            __size_of_EUSART1_Receive_ISR 0032             SWSPI_Synth_send_bits@bitArray 0060  
                             sprintf@flag 00D1                               sprintf@fval 00DF  
                             sprintf@prec 00D3                   _DAC_DEFAULT_INIT_VALUES 7827  
                    __size_of_EepromWrite 000E                     _TMR0_InterruptHandler 01E8  
                               __pnvBANK1 01E8                  __size_of_TMR0_StartTimer 0004  
              __end_of_SYSTEM_INFO_ADDRES 783A                                  ?_GroupRx 0150  
                                ?_GroupTx 0150                    _PIN_MANAGER_Initialize 4210  
                   _InitAdcApplicationMgr 4846                                 __pintcode 0008  
                           __pmediumconst 7748                                  ?___awdiv 001E  
                               __ptext100 3414                                 __ptext101 4368  
                               __ptext102 4854                                 __ptext103 4858  
                               __ptext104 44CE                                 __ptext105 45A6  
                               __ptext106 0000                                  ?___ftadd 007C  
                                ?___awmod 0018                                  ?___ftdiv 0023  
                                ?___ftneg 0018                                  ?___lldiv 0018  
                                ?___ftmul 0066                                  ?___llmod 00B3  
                                ?___ftsub 0088                                 __npowers_ 7800  
                                ?___fttol 0079                                  ?___lwmod 0001  
                         ?_ADC_Initialize 0001                         __size_of_testLeds 0060  
                           _PLLInitialize 1C26               __size_of_keepAliveSignalLed 0018  
      __size_of_ReadSystemStatusFromEprom 008C                      ?_SampleSingleChannel 0001  
            ??_INTERRUPT_InterruptManager 0006                          __CFG_PRICLKEN$ON 000000  
                             __tdiv_to_l_ 2364                              ??__div_to_l_ 001E  
                              ?_ZeroArray 0020                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 4112                                  ?_isalpha 0001  
                                ?_isdigit 0001                                 _eval_poly 30EE  
                         _TimerOneSecFlag 01DB                                  ?_isspace 0001  
                         _AdcSingleSample 2A52                              _SetMcuSystem 4828  
                                ?_isupper 0001                            __size_of_make8 005C  
                      _SetUartRefrashRate 3E38                                  ?_sprintf 00BC  
                          __size_of_floor 00E2                            __size_of_ldexp 00CE  
                          __size_of_frexp 0090                            __size_of_scale 0420  
                __size_of_DATAEE_ReadByte 0014                                  ?_toupper 0001  
                       ??_UART_Write_Text 001B                      _INTERRUPT_Initialize 484C  
                       ??_TMR0_Initialize 001A                            ___wmul@product 002A  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                __end_of_StoreIntInEeprom 4496                    _SampleAllChannels$3963 00B3  
                     ?_SetUartRefrashRate 0077                          _SaveSystemStatus 39F0  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                    Make32bitsArray@array 0018                                  _PIR1bits 000F9E  
                      __end_of__div_to_l_ 2810                                  _PIR2bits 000FA1  
                               _rxMsgData 026E                                  i2u625_40 4382  
                        readUartByte@dest 0152                       SWSPI_send_word@data 0028  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                         SetUartMode@data 0077                                 make8@data 0018  
                                _TMR0_ISR 3414                        _TEST_PLL_REGISTERS 7749  
                          ?_PLLInitialize 0001                             _PrintRxStatus 20A4  
                       ??_PIN_MANAGER_IOC 0001                   ??_CollectTxStatusParams 0029  
                   ??_SampleSingleChannel 00E3                __size_of_SampleAllChannels 014C  
          __size_of_CollectRxStatusParams 005E        __size_of_SendUartSystemInitMessage 00E6  
                           _PrintTxStatus 1F30             __end_of_CollectRxStatusParams 3EF6  
                  GetIntFromUartData@data 0066                   SWSPI_send_word@dataSize 002C  
                              _ADCON0bits 000FC2                         ___wmul@multiplier 0026  
                    ??_SetUartRefrashRate 0030                            ?_SwSpi_Clk_Pin 0018  
                      __end_of_channelArr 7837                          ??_SwSpi_Data_Pin 0019  
                              ?_eval_poly 0088                        _PLL_INIT_REGISTERS 777D  
                             _lastAdcRREV 01CC                     DATAEE_WriteByte@bData 0018  
                            _isspace$3662 0019                               _lastAdcTemp 003F  
                       ??_SWSPI_send_word 002D                                DacInit@idx 00CE  
                              _DAC_ADDRES 782F               __size_of_GetIntFromUartData 0094  
                       ___lmul@multiplier 001A                               _INTCON2bits 000FF1  
                               copy_data0 41D2                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 00E4                         ?_DATAEE_WriteByte 0018  
                _SampleSingleChannel$3962 0132                     EUSART1_Read@readValue 0019  
                    __size_of_GroupCommon 0078                        ??_DATAEE_WriteByte 0019  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                                __Hrparam 0000                    ?_InitAdcApplicationMgr 0001  
                        __size_of_GroupRx 011C                          __size_of_GroupTx 0128  
                                __Lrparam 0000                         _ADC_GetConversion 45D8  
                      __CFG_BOREN$SBORDIS 000000                           _ClearMcuRunTime 47EC  
                       __CFG_P2BMX$PORTD2 000000                            ?_PrintRxStatus 0001  
                 ??_OSCILLATOR_Initialize 0018                        ?_ADC_GetConversion 0018  
                       ??_TMR0_StartTimer 0018                            ?_PrintTxStatus 0001  
                        __size_of___awdiv 0084                          __size_of___ftadd 01AE  
                        __size_of___awmod 0070                          __size_of___ftdiv 00E8  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                                ___altoft 3A6A                          __size_of___ftmul 00F6  
                        __size_of___llmod 0068                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0036  
                 __end_of_AdcSingleSample 2B6C                          __size_of___lwmod 0042  
                                ___awtoft 4496                                  ___ftpack 34C8  
                             _fround$3976 0078                               _fround$3977 0075  
                                ___lltoft 3FB0                                  ___lwtoft 46A8  
                             ??_ZeroArray 0024                       ??_ADC_GetConversion 001A  
                                _exp$3982 009C                              _isupper$3665 0019  
                              sprintf@exp 00D9                                sprintf@val 00D5  
                                _dataSize 01D1                     SwSpi_Clk_Pin@cPinMode 0018  
                        __size_of_isalpha 0028                                  _crcGiven 01CF  
                        __size_of_isdigit 001E                   ??_SWSPI_Synth_send_bits 0028  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                                __ptext10 2A52                                  __ptext11 3DD8  
                                __ptext20 4634                                  __ptext12 3576  
                                __ptext21 470E                                  __ptext13 3E38  
                                __ptext30 4832                                  __ptext22 39F0  
                                __ptext14 3C3E                                  __ptext31 4210  
                                __ptext23 3354                                  __ptext15 36AA  
                                __ptext40 08A2                                  __ptext32 4800  
                                __ptext24 0CC2                                  __ptext16 1714  
                                __ptext41 12C0                                  __ptext33 484C  
                                __ptext25 42E2                                  __ptext17 47C4  
                                __ptext50 2218                                  __ptext42 3BCE  
                                __ptext34 4506                                  __ptext26 4780  
                                __ptext18 465C                                  __ptext51 46A8  
                                __ptext43 38EA                                  __ptext35 4798  
                                __ptext27 4828                                  __ptext19 46F0  
                                __ptext60 445E                                  __ptext52 45D8  
                                __ptext44 2364                                  __ptext36 4258  
                                __ptext28 4766                                  __ptext61 480E  
                                __ptext53 385E                                  __ptext45 26E8  
                                __ptext37 2E42                                  __ptext29 4572  
                                __ptext70 400C                                  __ptext62 453C  
                                __ptext54 47AE                                  __ptext46 3CA6  
                                __ptext38 1A98                                  __ptext71 4064  
                                __ptext63 3610                                  __ptext55 4850  
                                __ptext47 396E                                  __ptext39 00E0  
                                __ptext80 373E                                  __ptext72 40BC  
                                __ptext64 3F54                                  __ptext56 1C26  
                                __ptext48 3B5C                                  __ptext81 2B6C  
                                __ptext73 4112                                  __ptext65 4422  
                                __ptext57 43E6                                  __ptext49 43AA  
                                __ptext90 2D5A                                  __ptext82 37CE  
                                __ptext74 2810                                  __ptext66 474A  
                                __ptext58 4846                                  __ptext91 4496  
                                __ptext83 3A6A                                  __ptext75 1DB0  
                                __ptext67 3292                                  __ptext59 2F28  
                                __ptext92 3FB0                                  __ptext84 30EE  
                                __ptext76 2496                                  __ptext68 472C  
                                __ptext93 34C8                                  __ptext85 4682  
                                __ptext77 151E                                  __ptext69 4608  
                                __ptext94 4168                                  __ptext86 2C64  
                                __ptext78 31C4                                  __ptext95 483C  
                                __ptext87 4326                                  __ptext79 300C  
                                __ptext96 47D8                                  __ptext88 18EA  
                                __ptext97 47EC                                  __ptext89 46CC  
                                __ptext98 3EF6                          __size_of_isupper 001E  
                                __powers_ 77D9                      __size_of_SetUartMode 0068  
            SWSPI_Synth_send_bits@phrType 0085                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$3980 00A8                                  _pow$3981 00AB  
                     GetIntFromUartData@c 0074                           _PrintHelpScreen 0CC2  
                        __size_of_sprintf 07C2               DATAEE_WriteByte@GIEBitValue 001A  
                        __size_of_toupper 0014                       UART_Write_Text@text 0019  
                           __size_of_main 0064                                  _msgCount 01CE  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 0018  
               __end_of_ADC_GetConversion 4608                        SampleAllChannels@i 00BA  
            __size_of_SWSPI_DAC_send_bits 0058                       Make32bitsArray@data 001A  
                      SWSPI_send_word@idx 002E                               _groupsArray 01DC  
                         ??_PLLInitialize 0086                                  _testLeds 3DD8  
                                int$flags 0048                  __size_of_Make32bitsArray 0058  
                              strtol@base 002A                                strtol@sign 0060  
      __end_of_INTERRUPT_InterruptManager 00DC                _INTERRUPT_InterruptManager 0008  
                         EepromWrite@data 001B                           ??_SwSpi_Clk_Pin 0019  
                __size_of_set_system_type 009A                       _EUSART1_Receive_ISR 45A6  
                __end_of_SwSpi_Set_CE_Pin 4422               __end_of_InitRxMessageParams 42E2  
                                exp@coeff 783A                                _MEMORY_ISR 4858  
                                log@coeff 7858                    SWSPI_send_word@phrType 0030  
                              _INTCONbits 000FF2                               ??_eval_poly 002F  
                  SetUartRefrashRate@data 0077                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                                  scale@scl 0078  
                                intlevel2 0000                                 sprintf@ap 00CF  
                               sprintf@cp 00CD                          __tdiv_to_l_@exp1 0026  
                        __tdiv_to_l_@cntr 0025                                 sprintf@sp 00BC  
                        __tdiv_to_l_@quot 0021                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 429E                          ___lwmod@dividend 0001  
                                isspace@c 001A                          ___lldiv@dividend 0018  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 4800  
                              _RCSTA1bits 000FAB                                  isupper@c 001A  
                ReadIntFromEeprom@address 00C4              __end_of_EUSART1_Transmit_ISR 4506  
                           ??_BlinkOkLeds 0018                          ??_ADC_Initialize 0018  
                         ??_PrintRxStatus 0031                        Make32bitsArray@idx 0020  
                       _TimerSamplingFlag 01DA                           ??_PrintTxStatus 0031  
                    SwSpi_Clk_Pin@phrType 0019                     SwSpi_Data_Pin@phrType 0019  
                 SwSpi_Set_CE_Pin@phrType 0019                          ?_AdcSingleSample 001F  
                  __size_of_EUSART1_Write 003C                              ?__tdiv_to_l_ 0018  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                        _SYSTEM_INFO_ADDRES 7837  
                         _UART_Write_Text 3B5C                                  sprintf@c 00E2  
                                sprintf@f 00BE                         EepromRead@address 0019  
                __end_of_SaveSystemStatus 3A6A                         SetUartMode@retNum 0079  
                            _rxStatistics 019D                          ___lldiv@quotient 0020  
                         ___lwmod@divisor 0003                           _TMR0_Initialize 4572  
                 __end_of_PrintHelpScreen 0FD2                           ___lwmod@counter 0005  
                                toupper@c 0018                ReadIntFromEeprom@numOfByes 00B3  
                       __CFG_T3CMX$PORTC0 000000                   ReadIntFromEeprom@retVal 00C5  
                           ??_EepromWrite 001C                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 4258                          UART_Write_Text@i 001D  
            GetIntFromUartData@dataRegArr 006C                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 4854                           _TimertenSecFlag 01D8  
                       ?_StoreIntInEeprom 0021                __size_of_ADC_GetConversion 0030  
                      ??_StoreIntInEeprom 0028  
