

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 28 13:09:23 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1
   122                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   125                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   126  0000                     
   127                           ; Version 1.45
   128                           ; Generated 16/11/2017 GMT
   129                           ; 
   130                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   131                           ; All rights reserved.
   132                           ; 
   133                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   134                           ; 
   135                           ; Redistribution and use in source and binary forms, with or without modification, are
   136                           ; permitted provided that the following conditions are met:
   137                           ; 
   138                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   139                           ;        conditions and the following disclaimer.
   140                           ; 
   141                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   142                           ;        of conditions and the following disclaimer in the documentation and/or other
   143                           ;        materials provided with the distribution.
   144                           ; 
   145                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   146                           ;        software without specific prior written permission.
   147                           ; 
   148                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   149                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   150                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   151                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   152                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   153                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   154                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   155                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   156                           ; 
   157                           ; 
   158                           ; Code-generator required, PIC18F45K22 Definitions
   159                           ; 
   160                           ; SFR Addresses
   161  0000                     
   162 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   163  0000                     
   164                           	psect	idataCOMRAM
   165  0045A4                     __pidataCOMRAM:
   166                           	opt stack 0
   167                           
   168                           ;initializer for _writeAddress
   169  0045A4  4000               	dw	16384
   170  0045A6  0000               	dw	0
   171                           
   172                           	psect	idataBANK1
   173  0045A8                     __pidataBANK1:
   174                           	opt stack 0
   175                           
   176                           ;initializer for _readAddress
   177  0045A8  4000               	dw	16384
   178  0045AA  0000               	dw	0
   179                           
   180                           	psect	idataBANK2
   181  004572                     __pidataBANK2:
   182                           	opt stack 0
   183                           
   184                           ;initializer for _groupsArray
   185  004572  AE                 	db	low _GroupRx
   186  004573  29                 	db	high _GroupRx
   187  004574  62                 	db	low _GroupTx
   188  004575  27                 	db	high _GroupTx
   189  004576  DA                 	db	low _GroupCommon
   190  004577  43                 	db	high _GroupCommon
   191  004578  00                 	db	0
   192  004579  00                 	db	0
   193  00457A  00                 	db	0
   194  00457B  00                 	db	0
   195  00457C  00                 	db	0
   196  00457D  00                 	db	0
   197                           
   198                           	psect	mediumconst
   199  0077D2                     __pmediumconst:
   200                           	opt stack 0
   201  0077D2  00                 	db	0
   202  0077D3                     _TEST_PLL_REGISTERS:
   203                           	opt stack 0
   204  0077D3  041C               	dw	1052
   205  0077D5  0001               	dw	1
   206  0077D7  300B               	dw	12299
   207  0077D9  0061               	dw	97
   208  0077DB  26BA               	dw	9914
   209  0077DD  00C0               	dw	192
   210  0077DF  FCC9               	dw	64713
   211  0077E1  1A19               	dw	6681
   212  0077E3  0428               	dw	1064
   213  0077E5  102D               	dw	4141
   214  0077E7  00E7               	dw	231
   215  0077E9  1200               	dw	4608
   216  0077EB  6076               	dw	24694
   217  0077ED  3505               	dw	13573
   218  0077EF  0025               	dw	37
   219  0077F1  0080               	dw	128
   220  0077F3  8B84               	dw	35716
   221  0077F5  3200               	dw	12800
   222  0077F7  0003               	dw	3
   223  0077F9  0000               	dw	0
   224  0077FB  0032               	dw	50
   225  0077FD  0008               	dw	8
   226  0077FF  AAA1               	dw	43681
   227  007801  01AA               	dw	426
   228  007803  0EDA               	dw	3802
   229  007805  0003               	dw	3
   230  007807                     __end_of_TEST_PLL_REGISTERS:
   231                           	opt stack 0
   232  007807                     _PLL_INIT_REGISTERS:
   233                           	opt stack 0
   234  007807  041C               	dw	1052
   235  007809  0001               	dw	1
   236  00780B  300B               	dw	12299
   237  00780D  0061               	dw	97
   238  00780F  323A               	dw	12858
   239  007811  00C0               	dw	192
   240  007813  BCC9               	dw	48329
   241  007815  2221               	dw	8737
   242  007817  0428               	dw	1064
   243  007819  102D               	dw	4141
   244  00781B  00E7               	dw	231
   245  00781D  1200               	dw	4608
   246  00781F  2076               	dw	8310
   247  007821  3501               	dw	13569
   248  007823  0025               	dw	37
   249  007825  0080               	dw	128
   250  007827  9B84               	dw	39812
   251  007829  3400               	dw	13312
   252  00782B  0003               	dw	3
   253  00782D  0000               	dw	0
   254  00782F  0012               	dw	18
   255  007831  0000               	dw	0
   256  007833  0001               	dw	1
   257  007835  0600               	dw	1536
   258  007837  0340               	dw	832
   259  007839  0020               	dw	32
   260  00783B                     __end_of_PLL_INIT_REGISTERS:
   261                           	opt stack 0
   262  00783B                     _dpowers:
   263                           	opt stack 0
   264  00783B  0001               	dw	1
   265  00783D  0000               	dw	0
   266  00783F  000A               	dw	10
   267  007841  0000               	dw	0
   268  007843  0064               	dw	100
   269  007845  0000               	dw	0
   270  007847  03E8               	dw	1000
   271  007849  0000               	dw	0
   272  00784B  2710               	dw	10000
   273  00784D  0000               	dw	0
   274  00784F  86A0               	dw	34464
   275  007851  0001               	dw	1
   276  007853  4240               	dw	16960
   277  007855  000F               	dw	15
   278  007857  9680               	dw	38528
   279  007859  0098               	dw	152
   280  00785B  E100               	dw	57600
   281  00785D  05F5               	dw	1525
   282  00785F  CA00               	dw	51712
   283  007861  3B9A               	dw	15258
   284  007863                     __end_of_dpowers:
   285                           	opt stack 0
   286  007863                     __powers_:
   287                           	opt stack 0
   288  007863  00                 	db	0
   289  007864  80                 	db	128
   290  007865  3F                 	db	63
   291  007866  00                 	db	0
   292  007867  20                 	db	32
   293  007868  41                 	db	65
   294  007869  00                 	db	0
   295  00786A  C8                 	db	200
   296  00786B  42                 	db	66
   297  00786C  00                 	db	0
   298  00786D  7A                 	db	122
   299  00786E  44                 	db	68
   300  00786F  40                 	db	64
   301  007870  1C                 	db	28
   302  007871  46                 	db	70
   303  007872  50                 	db	80
   304  007873  C3                 	db	195
   305  007874  47                 	db	71
   306  007875  24                 	db	36
   307  007876  74                 	db	116
   308  007877  49                 	db	73
   309  007878  97                 	db	151
   310  007879  18                 	db	24
   311  00787A  4B                 	db	75
   312  00787B  BC                 	db	188
   313  00787C  BE                 	db	190
   314  00787D  4C                 	db	76
   315  00787E  6B                 	db	107
   316  00787F  6E                 	db	110
   317  007880  4E                 	db	78
   318  007881  03                 	db	3
   319  007882  15                 	db	21
   320  007883  50                 	db	80
   321  007884  79                 	db	121
   322  007885  AD                 	db	173
   323  007886  60                 	db	96
   324  007887  F3                 	db	243
   325  007888  49                 	db	73
   326  007889  71                 	db	113
   327  00788A                     __end_of__powers_:
   328                           	opt stack 0
   329  00788A                     __npowers_:
   330                           	opt stack 0
   331  00788A  00                 	db	0
   332  00788B  80                 	db	128
   333  00788C  3F                 	db	63
   334  00788D  CD                 	db	205
   335  00788E  CC                 	db	204
   336  00788F  3D                 	db	61
   337  007890  D7                 	db	215
   338  007891  23                 	db	35
   339  007892  3C                 	db	60
   340  007893  12                 	db	18
   341  007894  83                 	db	131
   342  007895  3A                 	db	58
   343  007896  B7                 	db	183
   344  007897  D1                 	db	209
   345  007898  38                 	db	56
   346  007899  C6                 	db	198
   347  00789A  27                 	db	39
   348  00789B  37                 	db	55
   349  00789C  38                 	db	56
   350  00789D  86                 	db	134
   351  00789E  35                 	db	53
   352  00789F  C0                 	db	192
   353  0078A0  D6                 	db	214
   354  0078A1  33                 	db	51
   355  0078A2  CC                 	db	204
   356  0078A3  2B                 	db	43
   357  0078A4  32                 	db	50
   358  0078A5  70                 	db	112
   359  0078A6  89                 	db	137
   360  0078A7  30                 	db	48
   361  0078A8  E7                 	db	231
   362  0078A9  DB                 	db	219
   363  0078AA  2E                 	db	46
   364  0078AB  E5                 	db	229
   365  0078AC  3C                 	db	60
   366  0078AD  1E                 	db	30
   367  0078AE  42                 	db	66
   368  0078AF  A2                 	db	162
   369  0078B0  0D                 	db	13
   370  0078B1                     __end_of__npowers_:
   371                           	opt stack 0
   372  0078B1                     _DAC_DEFAULT_INIT_VALUES:
   373                           	opt stack 0
   374  0078B1  2344               	dw	9028
   375  0078B3  6344               	dw	25412
   376  0078B5  A344               	dw	41796
   377  0078B7  E344               	dw	58180
   378  0078B9                     __end_of_DAC_DEFAULT_INIT_VALUES:
   379                           	opt stack 0
   380  0078B9                     _DAC_ADDRES:
   381                           	opt stack 0
   382  0078B9  02                 	db	2
   383  0078BA  04                 	db	4
   384  0078BB  06                 	db	6
   385  0078BC  08                 	db	8
   386  0078BD                     __end_of_DAC_ADDRES:
   387                           	opt stack 0
   388  0078BD                     _channelArr:
   389                           	opt stack 0
   390  0078BD  04                 	db	4
   391  0078BE  06                 	db	6
   392  0078BF  05                 	db	5
   393  0078C0  07                 	db	7
   394  0078C1                     __end_of_channelArr:
   395                           	opt stack 0
   396  0078C1                     exp@coeff:
   397                           	opt stack 0
   398  0078C1  00                 	db	0
   399  0078C2  80                 	db	128
   400  0078C3  3F                 	db	63
   401  0078C4  72                 	db	114
   402  0078C5  31                 	db	49
   403  0078C6  3F                 	db	63
   404  0078C7  FE                 	db	254
   405  0078C8  75                 	db	117
   406  0078C9  3E                 	db	62
   407  0078CA  58                 	db	88
   408  0078CB  63                 	db	99
   409  0078CC  3D                 	db	61
   410  0078CD  95                 	db	149
   411  0078CE  1D                 	db	29
   412  0078CF  3C                 	db	60
   413  0078D0  C5                 	db	197
   414  0078D1  AE                 	db	174
   415  0078D2  3A                 	db	58
   416  0078D3  79                 	db	121
   417  0078D4  21                 	db	33
   418  0078D5  39                 	db	57
   419  0078D6  94                 	db	148
   420  0078D7  80                 	db	128
   421  0078D8  37                 	db	55
   422  0078D9  93                 	db	147
   423  0078DA  A7                 	db	167
   424  0078DB  35                 	db	53
   425  0078DC  56                 	db	86
   426  0078DD  15                 	db	21
   427  0078DE  34                 	db	52
   428  0078DF                     __end_ofexp@coeff:
   429                           	opt stack 0
   430  0078DF                     log@coeff:
   431                           	opt stack 0
   432  0078DF  00                 	db	0
   433  0078E0  00                 	db	0
   434  0078E1  00                 	db	0
   435  0078E2  00                 	db	0
   436  0078E3  80                 	db	128
   437  0078E4  3F                 	db	63
   438  0078E5  F0                 	db	240
   439  0078E6  FF                 	db	255
   440  0078E7  BE                 	db	190
   441  0078E8  E2                 	db	226
   442  0078E9  A9                 	db	169
   443  0078EA  3E                 	db	62
   444  0078EB  83                 	db	131
   445  0078EC  76                 	db	118
   446  0078ED  BE                 	db	190
   447  0078EE  AE                 	db	174
   448  0078EF  2B                 	db	43
   449  0078F0  3E                 	db	62
   450  0078F1  3C                 	db	60
   451  0078F2  C3                 	db	195
   452  0078F3  BD                 	db	189
   453  0078F4  D2                 	db	210
   454  0078F5  13                 	db	19
   455  0078F6  3D                 	db	61
   456  0078F7  78                 	db	120
   457  0078F8  D3                 	db	211
   458  0078F9  BB                 	db	187
   459  0078FA                     __end_oflog@coeff:
   460                           	opt stack 0
   461  0078FA                     STR_35:
   462                           
   463                           ; BSR set to: 1
   464  0078FA  24                 	db	36
   465  0078FB  52                 	db	82	;'R'
   466  0078FC  43                 	db	67	;'C'
   467  0078FD  50                 	db	80	;'P'
   468  0078FE  20                 	db	32
   469  0078FF  3C                 	db	60	;'<'
   470  007900  58                 	db	88	;'X'
   471  007901  3E                 	db	62	;'>'
   472  007902  3C                 	db	60	;'<'
   473  007903  63                 	db	99	;'c'
   474  007904  72                 	db	114	;'r'
   475  007905  3E                 	db	62	;'>'
   476  007906  20                 	db	32
   477  007907  20                 	db	32
   478  007908  20                 	db	32
   479  007909  20                 	db	32
   480  00790A  20                 	db	32
   481  00790B  53                 	db	83	;'S'
   482  00790C  65                 	db	101	;'e'
   483  00790D  74                 	db	116	;'t'
   484  00790E  20                 	db	32
   485  00790F  43                 	db	67	;'C'
   486  007910  6F                 	db	111	;'o'
   487  007911  6D                 	db	109	;'m'
   488  007912  70                 	db	112	;'p'
   489  007913  72                 	db	114	;'r'
   490  007914  65                 	db	101	;'e'
   491  007915  73                 	db	115	;'s'
   492  007916  73                 	db	115	;'s'
   493  007917  69                 	db	105	;'i'
   494  007918  6F                 	db	111	;'o'
   495  007919  6E                 	db	110	;'n'
   496  00791A  20                 	db	32
   497  00791B  6F                 	db	111	;'o'
   498  00791C  70                 	db	112	;'p'
   499  00791D  65                 	db	101	;'e'
   500  00791E  72                 	db	114	;'r'
   501  00791F  61                 	db	97	;'a'
   502  007920  74                 	db	116	;'t'
   503  007921  69                 	db	105	;'i'
   504  007922  6F                 	db	111	;'o'
   505  007923  6E                 	db	110	;'n'
   506  007924  20                 	db	32
   507  007925  6D                 	db	109	;'m'
   508  007926  6F                 	db	111	;'o'
   509  007927  64                 	db	100	;'d'
   510  007928  65                 	db	101	;'e'
   511  007929  20                 	db	32
   512  00792A  61                 	db	97	;'a'
   513  00792B  74                 	db	116	;'t'
   514  00792C  20                 	db	32
   515  00792D  52                 	db	82	;'R'
   516  00792E  58                 	db	88	;'X'
   517  00792F  20                 	db	32
   518  007930  73                 	db	115	;'s'
   519  007931  79                 	db	121	;'y'
   520  007932  73                 	db	115	;'s'
   521  007933  74                 	db	116	;'t'
   522  007934  65                 	db	101	;'e'
   523  007935  6D                 	db	109	;'m'
   524  007936  3A                 	db	58	;':'
   525  007937  20                 	db	32
   526  007938  41                 	db	65	;'A'
   527  007939  75                 	db	117	;'u'
   528  00793A  74                 	db	116	;'t'
   529  00793B  6F                 	db	111	;'o'
   530  00793C  6D                 	db	109	;'m'
   531  00793D  61                 	db	97	;'a'
   532  00793E  74                 	db	116	;'t'
   533  00793F  69                 	db	105	;'i'
   534  007940  63                 	db	99	;'c'
   535  007941  5B                 	db	91	;'['
   536  007942  31                 	db	49	;'1'
   537  007943  5D                 	db	93	;']'
   538  007944  20                 	db	32
   539  007945  4D                 	db	77	;'M'
   540  007946  61                 	db	97	;'a'
   541  007947  6E                 	db	110	;'n'
   542  007948  75                 	db	117	;'u'
   543  007949  61                 	db	97	;'a'
   544  00794A  6C                 	db	108	;'l'
   545  00794B  5B                 	db	91	;'['
   546  00794C  30                 	db	48	;'0'
   547  00794D  5D                 	db	93	;']'
   548  00794E  20                 	db	32
   549  00794F  5B                 	db	91	;'['
   550  007950  44                 	db	68	;'D'
   551  007951  65                 	db	101	;'e'
   552  007952  66                 	db	102	;'f'
   553  007953  61                 	db	97	;'a'
   554  007954  75                 	db	117	;'u'
   555  007955  6C                 	db	108	;'l'
   556  007956  74                 	db	116	;'t'
   557  007957  20                 	db	32
   558  007958  3D                 	db	61	;'='
   559  007959  20                 	db	32
   560  00795A  30                 	db	48	;'0'
   561  00795B  5D                 	db	93	;']'
   562  00795C  0D                 	db	13
   563  00795D  0A                 	db	10
   564  00795E  00                 	db	0
   565  00795F                     STR_34:
   566                           
   567                           ; BSR set to: 1
   568  00795F  24                 	db	36
   569  007960  52                 	db	82	;'R'
   570  007961  43                 	db	67	;'C'
   571  007962  52                 	db	82	;'R'
   572  007963  20                 	db	32
   573  007964  3C                 	db	60	;'<'
   574  007965  58                 	db	88	;'X'
   575  007966  3E                 	db	62	;'>'
   576  007967  3C                 	db	60	;'<'
   577  007968  63                 	db	99	;'c'
   578  007969  72                 	db	114	;'r'
   579  00796A  3E                 	db	62	;'>'
   580  00796B  20                 	db	32
   581  00796C  20                 	db	32
   582  00796D  20                 	db	32
   583  00796E  20                 	db	32
   584  00796F  20                 	db	32
   585  007970  53                 	db	83	;'S'
   586  007971  65                 	db	101	;'e'
   587  007972  74                 	db	116	;'t'
   588  007973  20                 	db	32
   589  007974  43                 	db	67	;'C'
   590  007975  6F                 	db	111	;'o'
   591  007976  6D                 	db	109	;'m'
   592  007977  70                 	db	112	;'p'
   593  007978  72                 	db	114	;'r'
   594  007979  65                 	db	101	;'e'
   595  00797A  73                 	db	115	;'s'
   596  00797B  73                 	db	115	;'s'
   597  00797C  69                 	db	105	;'i'
   598  00797D  6F                 	db	111	;'o'
   599  00797E  6E                 	db	110	;'n'
   600  00797F  20                 	db	32
   601  007980  72                 	db	114	;'r'
   602  007981  61                 	db	97	;'a'
   603  007982  6E                 	db	110	;'n'
   604  007983  67                 	db	103	;'g'
   605  007984  65                 	db	101	;'e'
   606  007985  20                 	db	32
   607  007986  61                 	db	97	;'a'
   608  007987  74                 	db	116	;'t'
   609  007988  20                 	db	32
   610  007989  52                 	db	82	;'R'
   611  00798A  58                 	db	88	;'X'
   612  00798B  20                 	db	32
   613  00798C  73                 	db	115	;'s'
   614  00798D  79                 	db	121	;'y'
   615  00798E  73                 	db	115	;'s'
   616  00798F  74                 	db	116	;'t'
   617  007990  65                 	db	101	;'e'
   618  007991  6D                 	db	109	;'m'
   619  007992  2E                 	db	46
   620  007993  20                 	db	32
   621  007994  48                 	db	72	;'H'
   622  007995  69                 	db	105	;'i'
   623  007996  67                 	db	103	;'g'
   624  007997  68                 	db	104	;'h'
   625  007998  20                 	db	32
   626  007999  5B                 	db	91	;'['
   627  00799A  31                 	db	49	;'1'
   628  00799B  5D                 	db	93	;']'
   629  00799C  20                 	db	32
   630  00799D  4C                 	db	76	;'L'
   631  00799E  6F                 	db	111	;'o'
   632  00799F  77                 	db	119	;'w'
   633  0079A0  20                 	db	32
   634  0079A1  5B                 	db	91	;'['
   635  0079A2  30                 	db	48	;'0'
   636  0079A3  5D                 	db	93	;']'
   637  0079A4  20                 	db	32
   638  0079A5  5B                 	db	91	;'['
   639  0079A6  44                 	db	68	;'D'
   640  0079A7  65                 	db	101	;'e'
   641  0079A8  66                 	db	102	;'f'
   642  0079A9  61                 	db	97	;'a'
   643  0079AA  75                 	db	117	;'u'
   644  0079AB  6C                 	db	108	;'l'
   645  0079AC  74                 	db	116	;'t'
   646  0079AD  20                 	db	32
   647  0079AE  3D                 	db	61	;'='
   648  0079AF  20                 	db	32
   649  0079B0  30                 	db	48	;'0'
   650  0079B1  5D                 	db	93	;']'
   651  0079B2  0D                 	db	13
   652  0079B3  0A                 	db	10
   653  0079B4  00                 	db	0
   654  0079B5                     STR_39:
   655                           
   656                           ; BSR set to: 1
   657  0079B5  24                 	db	36
   658  0079B6  53                 	db	83	;'S'
   659  0079B7  42                 	db	66	;'B'
   660  0079B8  55                 	db	85	;'U'
   661  0079B9  20                 	db	32
   662  0079BA  3C                 	db	60	;'<'
   663  0079BB  58                 	db	88	;'X'
   664  0079BC  3E                 	db	62	;'>'
   665  0079BD  3C                 	db	60	;'<'
   666  0079BE  63                 	db	99	;'c'
   667  0079BF  72                 	db	114	;'r'
   668  0079C0  3E                 	db	62	;'>'
   669  0079C1  20                 	db	32
   670  0079C2  20                 	db	32
   671  0079C3  20                 	db	32
   672  0079C4  20                 	db	32
   673  0079C5  20                 	db	32
   674  0079C6  53                 	db	83	;'S'
   675  0079C7  65                 	db	101	;'e'
   676  0079C8  74                 	db	116	;'t'
   677  0079C9  20                 	db	32
   678  0079CA  55                 	db	85	;'U'
   679  0079CB  41                 	db	65	;'A'
   680  0079CC  52                 	db	82	;'R'
   681  0079CD  54                 	db	84	;'T'
   682  0079CE  20                 	db	32
   683  0079CF  61                 	db	97	;'a'
   684  0079D0  75                 	db	117	;'u'
   685  0079D1  74                 	db	116	;'t'
   686  0079D2  6F                 	db	111	;'o'
   687  0079D3  6D                 	db	109	;'m'
   688  0079D4  61                 	db	97	;'a'
   689  0079D5  74                 	db	116	;'t'
   690  0079D6  69                 	db	105	;'i'
   691  0079D7  63                 	db	99	;'c'
   692  0079D8  20                 	db	32
   693  0079D9  6F                 	db	111	;'o'
   694  0079DA  70                 	db	112	;'p'
   695  0079DB  65                 	db	101	;'e'
   696  0079DC  72                 	db	114	;'r'
   697  0079DD  61                 	db	97	;'a'
   698  0079DE  74                 	db	116	;'t'
   699  0079DF  69                 	db	105	;'i'
   700  0079E0  6F                 	db	111	;'o'
   701  0079E1  6E                 	db	110	;'n'
   702  0079E2  3A                 	db	58	;':'
   703  0079E3  20                 	db	32
   704  0079E4  41                 	db	65	;'A'
   705  0079E5  75                 	db	117	;'u'
   706  0079E6  74                 	db	116	;'t'
   707  0079E7  6F                 	db	111	;'o'
   708  0079E8  6D                 	db	109	;'m'
   709  0079E9  61                 	db	97	;'a'
   710  0079EA  74                 	db	116	;'t'
   711  0079EB  69                 	db	105	;'i'
   712  0079EC  63                 	db	99	;'c'
   713  0079ED  5B                 	db	91	;'['
   714  0079EE  31                 	db	49	;'1'
   715  0079EF  5D                 	db	93	;']'
   716  0079F0  20                 	db	32
   717  0079F1  4D                 	db	77	;'M'
   718  0079F2  61                 	db	97	;'a'
   719  0079F3  6E                 	db	110	;'n'
   720  0079F4  75                 	db	117	;'u'
   721  0079F5  61                 	db	97	;'a'
   722  0079F6  6C                 	db	108	;'l'
   723  0079F7  5B                 	db	91	;'['
   724  0079F8  30                 	db	48	;'0'
   725  0079F9  5D                 	db	93	;']'
   726  0079FA  20                 	db	32
   727  0079FB  5B                 	db	91	;'['
   728  0079FC  44                 	db	68	;'D'
   729  0079FD  65                 	db	101	;'e'
   730  0079FE  66                 	db	102	;'f'
   731  0079FF  61                 	db	97	;'a'
   732  007A00  75                 	db	117	;'u'
   733  007A01  6C                 	db	108	;'l'
   734  007A02  74                 	db	116	;'t'
   735  007A03  20                 	db	32
   736  007A04  3D                 	db	61	;'='
   737  007A05  20                 	db	32
   738  007A06  30                 	db	48	;'0'
   739  007A07  5D                 	db	93	;']'
   740  007A08  0D                 	db	13
   741  007A09  0A                 	db	10
   742  007A0A  00                 	db	0
   743  007A0B                     STR_28:
   744                           
   745                           ; BSR set to: 1
   746  007A0B  24                 	db	36
   747  007A0C  54                 	db	84	;'T'
   748  007A0D  58                 	db	88	;'X'
   749  007A0E  20                 	db	32
   750  007A0F  3C                 	db	60	;'<'
   751  007A10  58                 	db	88	;'X'
   752  007A11  3E                 	db	62	;'>'
   753  007A12  3C                 	db	60	;'<'
   754  007A13  63                 	db	99	;'c'
   755  007A14  72                 	db	114	;'r'
   756  007A15  3E                 	db	62	;'>'
   757  007A16  20                 	db	32
   758  007A17  20                 	db	32
   759  007A18  20                 	db	32
   760  007A19  20                 	db	32
   761  007A1A  20                 	db	32
   762  007A1B  20                 	db	32
   763  007A1C  54                 	db	84	;'T'
   764  007A1D  75                 	db	117	;'u'
   765  007A1E  72                 	db	114	;'r'
   766  007A1F  6E                 	db	110	;'n'
   767  007A20  20                 	db	32
   768  007A21  6F                 	db	111	;'o'
   769  007A22  6E                 	db	110	;'n'
   770  007A23  5B                 	db	91	;'['
   771  007A24  31                 	db	49	;'1'
   772  007A25  5D                 	db	93	;']'
   773  007A26  20                 	db	32
   774  007A27  2F                 	db	47
   775  007A28  20                 	db	32
   776  007A29  6F                 	db	111	;'o'
   777  007A2A  66                 	db	102	;'f'
   778  007A2B  66                 	db	102	;'f'
   779  007A2C  5B                 	db	91	;'['
   780  007A2D  30                 	db	48	;'0'
   781  007A2E  5D                 	db	93	;']'
   782  007A2F  20                 	db	32
   783  007A30  74                 	db	116	;'t'
   784  007A31  72                 	db	114	;'r'
   785  007A32  61                 	db	97	;'a'
   786  007A33  6E                 	db	110	;'n'
   787  007A34  73                 	db	115	;'s'
   788  007A35  6D                 	db	109	;'m'
   789  007A36  69                 	db	105	;'i'
   790  007A37  73                 	db	115	;'s'
   791  007A38  73                 	db	115	;'s'
   792  007A39  69                 	db	105	;'i'
   793  007A3A  6F                 	db	111	;'o'
   794  007A3B  6E                 	db	110	;'n'
   795  007A3C  20                 	db	32
   796  007A3D  61                 	db	97	;'a'
   797  007A3E  74                 	db	116	;'t'
   798  007A3F  20                 	db	32
   799  007A40  54                 	db	84	;'T'
   800  007A41  58                 	db	88	;'X'
   801  007A42  20                 	db	32
   802  007A43  73                 	db	115	;'s'
   803  007A44  79                 	db	121	;'y'
   804  007A45  73                 	db	115	;'s'
   805  007A46  74                 	db	116	;'t'
   806  007A47  65                 	db	101	;'e'
   807  007A48  6D                 	db	109	;'m'
   808  007A49  20                 	db	32
   809  007A4A  5B                 	db	91	;'['
   810  007A4B  44                 	db	68	;'D'
   811  007A4C  65                 	db	101	;'e'
   812  007A4D  66                 	db	102	;'f'
   813  007A4E  61                 	db	97	;'a'
   814  007A4F  75                 	db	117	;'u'
   815  007A50  6C                 	db	108	;'l'
   816  007A51  74                 	db	116	;'t'
   817  007A52  20                 	db	32
   818  007A53  3D                 	db	61	;'='
   819  007A54  20                 	db	32
   820  007A55  30                 	db	48	;'0'
   821  007A56  5D                 	db	93	;']'
   822  007A57  0D                 	db	13
   823  007A58  0A                 	db	10
   824  007A59  00                 	db	0
   825  007A5A                     STR_27:
   826                           
   827                           ; BSR set to: 1
   828  007A5A  24                 	db	36
   829  007A5B  54                 	db	84	;'T'
   830  007A5C  42                 	db	66	;'B'
   831  007A5D  20                 	db	32
   832  007A5E  3C                 	db	60	;'<'
   833  007A5F  58                 	db	88	;'X'
   834  007A60  3E                 	db	62	;'>'
   835  007A61  3C                 	db	60	;'<'
   836  007A62  63                 	db	99	;'c'
   837  007A63  72                 	db	114	;'r'
   838  007A64  3E                 	db	62	;'>'
   839  007A65  20                 	db	32
   840  007A66  20                 	db	32
   841  007A67  20                 	db	32
   842  007A68  20                 	db	32
   843  007A69  20                 	db	32
   844  007A6A  20                 	db	32
   845  007A6B  54                 	db	84	;'T'
   846  007A6C  75                 	db	117	;'u'
   847  007A6D  72                 	db	114	;'r'
   848  007A6E  6E                 	db	110	;'n'
   849  007A6F  20                 	db	32
   850  007A70  6F                 	db	111	;'o'
   851  007A71  6E                 	db	110	;'n'
   852  007A72  5B                 	db	91	;'['
   853  007A73  31                 	db	49	;'1'
   854  007A74  5D                 	db	93	;']'
   855  007A75  20                 	db	32
   856  007A76  2F                 	db	47
   857  007A77  20                 	db	32
   858  007A78  6F                 	db	111	;'o'
   859  007A79  66                 	db	102	;'f'
   860  007A7A  66                 	db	102	;'f'
   861  007A7B  5B                 	db	91	;'['
   862  007A7C  30                 	db	48	;'0'
   863  007A7D  5D                 	db	93	;']'
   864  007A7E  20                 	db	32
   865  007A7F  42                 	db	66	;'B'
   866  007A80  49                 	db	73	;'I'
   867  007A81  54                 	db	84	;'T'
   868  007A82  20                 	db	32
   869  007A83  6D                 	db	109	;'m'
   870  007A84  6F                 	db	111	;'o'
   871  007A85  64                 	db	100	;'d'
   872  007A86  65                 	db	101	;'e'
   873  007A87  20                 	db	32
   874  007A88  61                 	db	97	;'a'
   875  007A89  74                 	db	116	;'t'
   876  007A8A  20                 	db	32
   877  007A8B  54                 	db	84	;'T'
   878  007A8C  58                 	db	88	;'X'
   879  007A8D  20                 	db	32
   880  007A8E  73                 	db	115	;'s'
   881  007A8F  79                 	db	121	;'y'
   882  007A90  73                 	db	115	;'s'
   883  007A91  74                 	db	116	;'t'
   884  007A92  65                 	db	101	;'e'
   885  007A93  6D                 	db	109	;'m'
   886  007A94  20                 	db	32
   887  007A95  5B                 	db	91	;'['
   888  007A96  44                 	db	68	;'D'
   889  007A97  65                 	db	101	;'e'
   890  007A98  66                 	db	102	;'f'
   891  007A99  61                 	db	97	;'a'
   892  007A9A  75                 	db	117	;'u'
   893  007A9B  6C                 	db	108	;'l'
   894  007A9C  74                 	db	116	;'t'
   895  007A9D  20                 	db	32
   896  007A9E  3D                 	db	61	;'='
   897  007A9F  20                 	db	32
   898  007AA0  30                 	db	48	;'0'
   899  007AA1  5D                 	db	93	;']'
   900  007AA2  0D                 	db	13
   901  007AA3  0A                 	db	10
   902  007AA4  00                 	db	0
   903  007AA5                     STR_30:
   904                           
   905                           ; BSR set to: 1
   906  007AA5  24                 	db	36
   907  007AA6  52                 	db	82	;'R'
   908  007AA7  49                 	db	73	;'I'
   909  007AA8  20                 	db	32
   910  007AA9  3C                 	db	60	;'<'
   911  007AAA  58                 	db	88	;'X'
   912  007AAB  58                 	db	88	;'X'
   913  007AAC  58                 	db	88	;'X'
   914  007AAD  58                 	db	88	;'X'
   915  007AAE  3E                 	db	62	;'>'
   916  007AAF  3C                 	db	60	;'<'
   917  007AB0  63                 	db	99	;'c'
   918  007AB1  72                 	db	114	;'r'
   919  007AB2  3E                 	db	62	;'>'
   920  007AB3  20                 	db	32
   921  007AB4  20                 	db	32
   922  007AB5  20                 	db	32
   923  007AB6  49                 	db	73	;'I'
   924  007AB7  6E                 	db	110	;'n'
   925  007AB8  69                 	db	105	;'i'
   926  007AB9  74                 	db	116	;'t'
   927  007ABA  20                 	db	32
   928  007ABB  52                 	db	82	;'R'
   929  007ABC  58                 	db	88	;'X'
   930  007ABD  20                 	db	32
   931  007ABE  73                 	db	115	;'s'
   932  007ABF  79                 	db	121	;'y'
   933  007AC0  73                 	db	115	;'s'
   934  007AC1  74                 	db	116	;'t'
   935  007AC2  65                 	db	101	;'e'
   936  007AC3  6D                 	db	109	;'m'
   937  007AC4  20                 	db	32
   938  007AC5  61                 	db	97	;'a'
   939  007AC6  6E                 	db	110	;'n'
   940  007AC7  64                 	db	100	;'d'
   941  007AC8  20                 	db	32
   942  007AC9  73                 	db	115	;'s'
   943  007ACA  65                 	db	101	;'e'
   944  007ACB  74                 	db	116	;'t'
   945  007ACC  20                 	db	32
   946  007ACD  66                 	db	102	;'f'
   947  007ACE  72                 	db	114	;'r'
   948  007ACF  65                 	db	101	;'e'
   949  007AD0  71                 	db	113	;'q'
   950  007AD1  75                 	db	117	;'u'
   951  007AD2  65                 	db	101	;'e'
   952  007AD3  6E                 	db	110	;'n'
   953  007AD4  63                 	db	99	;'c'
   954  007AD5  79                 	db	121	;'y'
   955  007AD6  20                 	db	32
   956  007AD7  61                 	db	97	;'a'
   957  007AD8  74                 	db	116	;'t'
   958  007AD9  20                 	db	32
   959  007ADA  58                 	db	88	;'X'
   960  007ADB  58                 	db	88	;'X'
   961  007ADC  58                 	db	88	;'X'
   962  007ADD  58                 	db	88	;'X'
   963  007ADE  20                 	db	32
   964  007ADF  28                 	db	40
   965  007AE0  30                 	db	48	;'0'
   966  007AE1  2D                 	db	45
   967  007AE2  39                 	db	57	;'9'
   968  007AE3  39                 	db	57	;'9'
   969  007AE4  39                 	db	57	;'9'
   970  007AE5  39                 	db	57	;'9'
   971  007AE6  29                 	db	41
   972  007AE7  5B                 	db	91	;'['
   973  007AE8  4D                 	db	77	;'M'
   974  007AE9  48                 	db	72	;'H'
   975  007AEA  7A                 	db	122	;'z'
   976  007AEB  5D                 	db	93	;']'
   977  007AEC  0D                 	db	13
   978  007AED  0A                 	db	10
   979  007AEE  00                 	db	0
   980  007AEF                     STR_42:
   981                           
   982                           ; BSR set to: 1
   983  007AEF  24                 	db	36
   984  007AF0  54                 	db	84	;'T'
   985  007AF1  44                 	db	68	;'D'
   986  007AF2  20                 	db	32
   987  007AF3  3C                 	db	60	;'<'
   988  007AF4  44                 	db	68	;'D'
   989  007AF5  41                 	db	65	;'A'
   990  007AF6  43                 	db	67	;'C'
   991  007AF7  20                 	db	32
   992  007AF8  4E                 	db	78	;'N'
   993  007AF9  55                 	db	85	;'U'
   994  007AFA  4D                 	db	77	;'M'
   995  007AFB  3E                 	db	62	;'>'
   996  007AFC  3C                 	db	60	;'<'
   997  007AFD  44                 	db	68	;'D'
   998  007AFE  41                 	db	65	;'A'
   999  007AFF  43                 	db	67	;'C'
  1000  007B00  20                 	db	32
  1001  007B01  56                 	db	86	;'V'
  1002  007B02  41                 	db	65	;'A'
  1003  007B03  4C                 	db	76	;'L'
  1004  007B04  55                 	db	85	;'U'
  1005  007B05  45                 	db	69	;'E'
  1006  007B06  3E                 	db	62	;'>'
  1007  007B07  3C                 	db	60	;'<'
  1008  007B08  63                 	db	99	;'c'
  1009  007B09  72                 	db	114	;'r'
  1010  007B0A  3E                 	db	62	;'>'
  1011  007B0B  20                 	db	32
  1012  007B0C  20                 	db	32
  1013  007B0D  20                 	db	32
  1014  007B0E  20                 	db	32
  1015  007B0F  20                 	db	32
  1016  007B10  20                 	db	32
  1017  007B11  20                 	db	32
  1018  007B12  20                 	db	32
  1019  007B13  20                 	db	32
  1020  007B14  53                 	db	83	;'S'
  1021  007B15  65                 	db	101	;'e'
  1022  007B16  74                 	db	116	;'t'
  1023  007B17  20                 	db	32
  1024  007B18  54                 	db	84	;'T'
  1025  007B19  58                 	db	88	;'X'
  1026  007B1A  20                 	db	32
  1027  007B1B  44                 	db	68	;'D'
  1028  007B1C  41                 	db	65	;'A'
  1029  007B1D  43                 	db	67	;'C'
  1030  007B1E  20                 	db	32
  1031  007B1F  3C                 	db	60	;'<'
  1032  007B20  30                 	db	48	;'0'
  1033  007B21  2D                 	db	45
  1034  007B22  33                 	db	51	;'3'
  1035  007B23  3E                 	db	62	;'>'
  1036  007B24  20                 	db	32
  1037  007B25  3C                 	db	60	;'<'
  1038  007B26  30                 	db	48	;'0'
  1039  007B27  2D                 	db	45
  1040  007B28  56                 	db	86	;'V'
  1041  007B29  72                 	db	114	;'r'
  1042  007B2A  65                 	db	101	;'e'
  1043  007B2B  66                 	db	102	;'f'
  1044  007B2C  5B                 	db	91	;'['
  1045  007B2D  34                 	db	52	;'4'
  1046  007B2E  20                 	db	32
  1047  007B2F  64                 	db	100	;'d'
  1048  007B30  69                 	db	105	;'i'
  1049  007B31  67                 	db	103	;'g'
  1050  007B32  5D                 	db	93	;']'
  1051  007B33  3E                 	db	62	;'>'
  1052  007B34  20                 	db	32
  1053  007B35  0D                 	db	13
  1054  007B36  0A                 	db	10
  1055  007B37  00                 	db	0
  1056  007B38                     STR_24:
  1057                           
  1058                           ; BSR set to: 1
  1059  007B38  24                 	db	36
  1060  007B39  54                 	db	84	;'T'
  1061  007B3A  49                 	db	73	;'I'
  1062  007B3B  20                 	db	32
  1063  007B3C  3C                 	db	60	;'<'
  1064  007B3D  58                 	db	88	;'X'
  1065  007B3E  58                 	db	88	;'X'
  1066  007B3F  58                 	db	88	;'X'
  1067  007B40  58                 	db	88	;'X'
  1068  007B41  3E                 	db	62	;'>'
  1069  007B42  3C                 	db	60	;'<'
  1070  007B43  63                 	db	99	;'c'
  1071  007B44  72                 	db	114	;'r'
  1072  007B45  3E                 	db	62	;'>'
  1073  007B46  20                 	db	32
  1074  007B47  20                 	db	32
  1075  007B48  20                 	db	32
  1076  007B49  49                 	db	73	;'I'
  1077  007B4A  6E                 	db	110	;'n'
  1078  007B4B  69                 	db	105	;'i'
  1079  007B4C  74                 	db	116	;'t'
  1080  007B4D  20                 	db	32
  1081  007B4E  54                 	db	84	;'T'
  1082  007B4F  58                 	db	88	;'X'
  1083  007B50  20                 	db	32
  1084  007B51  73                 	db	115	;'s'
  1085  007B52  79                 	db	121	;'y'
  1086  007B53  73                 	db	115	;'s'
  1087  007B54  74                 	db	116	;'t'
  1088  007B55  65                 	db	101	;'e'
  1089  007B56  6D                 	db	109	;'m'
  1090  007B57  20                 	db	32
  1091  007B58  61                 	db	97	;'a'
  1092  007B59  6E                 	db	110	;'n'
  1093  007B5A  64                 	db	100	;'d'
  1094  007B5B  20                 	db	32
  1095  007B5C  73                 	db	115	;'s'
  1096  007B5D  65                 	db	101	;'e'
  1097  007B5E  74                 	db	116	;'t'
  1098  007B5F  20                 	db	32
  1099  007B60  66                 	db	102	;'f'
  1100  007B61  72                 	db	114	;'r'
  1101  007B62  65                 	db	101	;'e'
  1102  007B63  71                 	db	113	;'q'
  1103  007B64  75                 	db	117	;'u'
  1104  007B65  65                 	db	101	;'e'
  1105  007B66  6E                 	db	110	;'n'
  1106  007B67  63                 	db	99	;'c'
  1107  007B68  79                 	db	121	;'y'
  1108  007B69  20                 	db	32
  1109  007B6A  28                 	db	40
  1110  007B6B  30                 	db	48	;'0'
  1111  007B6C  2D                 	db	45
  1112  007B6D  39                 	db	57	;'9'
  1113  007B6E  39                 	db	57	;'9'
  1114  007B6F  39                 	db	57	;'9'
  1115  007B70  39                 	db	57	;'9'
  1116  007B71  29                 	db	41
  1117  007B72  5B                 	db	91	;'['
  1118  007B73  4D                 	db	77	;'M'
  1119  007B74  48                 	db	72	;'H'
  1120  007B75  7A                 	db	122	;'z'
  1121  007B76  5D                 	db	93	;']'
  1122  007B77  0D                 	db	13
  1123  007B78  0A                 	db	10
  1124  007B79  00                 	db	0
  1125  007B7A                     STR_32:
  1126                           
  1127                           ; BSR set to: 1
  1128  007B7A  24                 	db	36
  1129  007B7B  52                 	db	82	;'R'
  1130  007B7C  42                 	db	66	;'B'
  1131  007B7D  20                 	db	32
  1132  007B7E  3C                 	db	60	;'<'
  1133  007B7F  58                 	db	88	;'X'
  1134  007B80  3E                 	db	62	;'>'
  1135  007B81  3C                 	db	60	;'<'
  1136  007B82  63                 	db	99	;'c'
  1137  007B83  72                 	db	114	;'r'
  1138  007B84  3E                 	db	62	;'>'
  1139  007B85  20                 	db	32
  1140  007B86  20                 	db	32
  1141  007B87  20                 	db	32
  1142  007B88  20                 	db	32
  1143  007B89  20                 	db	32
  1144  007B8A  20                 	db	32
  1145  007B8B  54                 	db	84	;'T'
  1146  007B8C  75                 	db	117	;'u'
  1147  007B8D  72                 	db	114	;'r'
  1148  007B8E  6E                 	db	110	;'n'
  1149  007B8F  20                 	db	32
  1150  007B90  6F                 	db	111	;'o'
  1151  007B91  6E                 	db	110	;'n'
  1152  007B92  5B                 	db	91	;'['
  1153  007B93  31                 	db	49	;'1'
  1154  007B94  5D                 	db	93	;']'
  1155  007B95  20                 	db	32
  1156  007B96  2F                 	db	47
  1157  007B97  20                 	db	32
  1158  007B98  6F                 	db	111	;'o'
  1159  007B99  66                 	db	102	;'f'
  1160  007B9A  66                 	db	102	;'f'
  1161  007B9B  5B                 	db	91	;'['
  1162  007B9C  30                 	db	48	;'0'
  1163  007B9D  5D                 	db	93	;']'
  1164  007B9E  20                 	db	32
  1165  007B9F  42                 	db	66	;'B'
  1166  007BA0  49                 	db	73	;'I'
  1167  007BA1  54                 	db	84	;'T'
  1168  007BA2  20                 	db	32
  1169  007BA3  6D                 	db	109	;'m'
  1170  007BA4  6F                 	db	111	;'o'
  1171  007BA5  64                 	db	100	;'d'
  1172  007BA6  65                 	db	101	;'e'
  1173  007BA7  20                 	db	32
  1174  007BA8  61                 	db	97	;'a'
  1175  007BA9  74                 	db	116	;'t'
  1176  007BAA  20                 	db	32
  1177  007BAB  52                 	db	82	;'R'
  1178  007BAC  58                 	db	88	;'X'
  1179  007BAD  20                 	db	32
  1180  007BAE  73                 	db	115	;'s'
  1181  007BAF  79                 	db	121	;'y'
  1182  007BB0  73                 	db	115	;'s'
  1183  007BB1  74                 	db	116	;'t'
  1184  007BB2  65                 	db	101	;'e'
  1185  007BB3  6D                 	db	109	;'m'
  1186  007BB4  2E                 	db	46
  1187  007BB5  0D                 	db	13
  1188  007BB6  0A                 	db	10
  1189  007BB7  00                 	db	0
  1190  007BB8                     STR_25:
  1191                           
  1192                           ; BSR set to: 1
  1193  007BB8  24                 	db	36
  1194  007BB9  54                 	db	84	;'T'
  1195  007BBA  46                 	db	70	;'F'
  1196  007BBB  20                 	db	32
  1197  007BBC  3C                 	db	60	;'<'
  1198  007BBD  58                 	db	88	;'X'
  1199  007BBE  58                 	db	88	;'X'
  1200  007BBF  58                 	db	88	;'X'
  1201  007BC0  58                 	db	88	;'X'
  1202  007BC1  3E                 	db	62	;'>'
  1203  007BC2  3C                 	db	60	;'<'
  1204  007BC3  63                 	db	99	;'c'
  1205  007BC4  72                 	db	114	;'r'
  1206  007BC5  3E                 	db	62	;'>'
  1207  007BC6  20                 	db	32
  1208  007BC7  20                 	db	32
  1209  007BC8  20                 	db	32
  1210  007BC9  53                 	db	83	;'S'
  1211  007BCA  65                 	db	101	;'e'
  1212  007BCB  74                 	db	116	;'t'
  1213  007BCC  20                 	db	32
  1214  007BCD  54                 	db	84	;'T'
  1215  007BCE  58                 	db	88	;'X'
  1216  007BCF  20                 	db	32
  1217  007BD0  73                 	db	115	;'s'
  1218  007BD1  79                 	db	121	;'y'
  1219  007BD2  73                 	db	115	;'s'
  1220  007BD3  74                 	db	116	;'t'
  1221  007BD4  65                 	db	101	;'e'
  1222  007BD5  6D                 	db	109	;'m'
  1223  007BD6  20                 	db	32
  1224  007BD7  66                 	db	102	;'f'
  1225  007BD8  72                 	db	114	;'r'
  1226  007BD9  65                 	db	101	;'e'
  1227  007BDA  71                 	db	113	;'q'
  1228  007BDB  75                 	db	117	;'u'
  1229  007BDC  65                 	db	101	;'e'
  1230  007BDD  6E                 	db	110	;'n'
  1231  007BDE  63                 	db	99	;'c'
  1232  007BDF  79                 	db	121	;'y'
  1233  007BE0  20                 	db	32
  1234  007BE1  61                 	db	97	;'a'
  1235  007BE2  74                 	db	116	;'t'
  1236  007BE3  20                 	db	32
  1237  007BE4  28                 	db	40
  1238  007BE5  30                 	db	48	;'0'
  1239  007BE6  2D                 	db	45
  1240  007BE7  39                 	db	57	;'9'
  1241  007BE8  39                 	db	57	;'9'
  1242  007BE9  39                 	db	57	;'9'
  1243  007BEA  39                 	db	57	;'9'
  1244  007BEB  29                 	db	41
  1245  007BEC  5B                 	db	91	;'['
  1246  007BED  4D                 	db	77	;'M'
  1247  007BEE  48                 	db	72	;'H'
  1248  007BEF  7A                 	db	122	;'z'
  1249  007BF0  5D                 	db	93	;']'
  1250  007BF1  2E                 	db	46
  1251  007BF2  0D                 	db	13
  1252  007BF3  0A                 	db	10
  1253  007BF4  00                 	db	0
  1254  007BF5                     STR_33:
  1255                           
  1256                           ; BSR set to: 1
  1257  007BF5  24                 	db	36
  1258  007BF6  52                 	db	82	;'R'
  1259  007BF7  58                 	db	88	;'X'
  1260  007BF8  20                 	db	32
  1261  007BF9  3C                 	db	60	;'<'
  1262  007BFA  58                 	db	88	;'X'
  1263  007BFB  3E                 	db	62	;'>'
  1264  007BFC  3C                 	db	60	;'<'
  1265  007BFD  63                 	db	99	;'c'
  1266  007BFE  72                 	db	114	;'r'
  1267  007BFF  3E                 	db	62	;'>'
  1268  007C00  20                 	db	32
  1269  007C01  20                 	db	32
  1270  007C02  20                 	db	32
  1271  007C03  20                 	db	32
  1272  007C04  20                 	db	32
  1273  007C05  20                 	db	32
  1274  007C06  54                 	db	84	;'T'
  1275  007C07  75                 	db	117	;'u'
  1276  007C08  72                 	db	114	;'r'
  1277  007C09  6E                 	db	110	;'n'
  1278  007C0A  20                 	db	32
  1279  007C0B  6F                 	db	111	;'o'
  1280  007C0C  6E                 	db	110	;'n'
  1281  007C0D  5B                 	db	91	;'['
  1282  007C0E  31                 	db	49	;'1'
  1283  007C0F  5D                 	db	93	;']'
  1284  007C10  20                 	db	32
  1285  007C11  2F                 	db	47
  1286  007C12  20                 	db	32
  1287  007C13  6F                 	db	111	;'o'
  1288  007C14  66                 	db	102	;'f'
  1289  007C15  66                 	db	102	;'f'
  1290  007C16  5B                 	db	91	;'['
  1291  007C17  30                 	db	48	;'0'
  1292  007C18  5D                 	db	93	;']'
  1293  007C19  20                 	db	32
  1294  007C1A  72                 	db	114	;'r'
  1295  007C1B  65                 	db	101	;'e'
  1296  007C1C  63                 	db	99	;'c'
  1297  007C1D  65                 	db	101	;'e'
  1298  007C1E  69                 	db	105	;'i'
  1299  007C1F  76                 	db	118	;'v'
  1300  007C20  65                 	db	101	;'e'
  1301  007C21  20                 	db	32
  1302  007C22  61                 	db	97	;'a'
  1303  007C23  74                 	db	116	;'t'
  1304  007C24  20                 	db	32
  1305  007C25  52                 	db	82	;'R'
  1306  007C26  58                 	db	88	;'X'
  1307  007C27  20                 	db	32
  1308  007C28  73                 	db	115	;'s'
  1309  007C29  79                 	db	121	;'y'
  1310  007C2A  73                 	db	115	;'s'
  1311  007C2B  74                 	db	116	;'t'
  1312  007C2C  65                 	db	101	;'e'
  1313  007C2D  6D                 	db	109	;'m'
  1314  007C2E  2E                 	db	46
  1315  007C2F  0D                 	db	13
  1316  007C30  0A                 	db	10
  1317  007C31  00                 	db	0
  1318  007C32                     STR_47:
  1319                           
  1320                           ; BSR set to: 1
  1321  007C32  52                 	db	82	;'R'
  1322  007C33  58                 	db	88	;'X'
  1323  007C34  20                 	db	32
  1324  007C35  53                 	db	83	;'S'
  1325  007C36  59                 	db	89	;'Y'
  1326  007C37  4E                 	db	78	;'N'
  1327  007C38  54                 	db	84	;'T'
  1328  007C39  48                 	db	72	;'H'
  1329  007C3A  20                 	db	32
  1330  007C3B  28                 	db	40
  1331  007C3C  50                 	db	80	;'P'
  1332  007C3D  4C                 	db	76	;'L'
  1333  007C3E  4C                 	db	76	;'L'
  1334  007C3F  29                 	db	41
  1335  007C40  20                 	db	32
  1336  007C41  4C                 	db	76	;'L'
  1337  007C42  6F                 	db	111	;'o'
  1338  007C43  63                 	db	99	;'c'
  1339  007C44  6B                 	db	107	;'k'
  1340  007C45  20                 	db	32
  1341  007C46  69                 	db	105	;'i'
  1342  007C47  6E                 	db	110	;'n'
  1343  007C48  64                 	db	100	;'d'
  1344  007C49  69                 	db	105	;'i'
  1345  007C4A  63                 	db	99	;'c'
  1346  007C4B  61                 	db	97	;'a'
  1347  007C4C  74                 	db	116	;'t'
  1348  007C4D  69                 	db	105	;'i'
  1349  007C4E  6F                 	db	111	;'o'
  1350  007C4F  6E                 	db	110	;'n'
  1351  007C50  20                 	db	32
  1352  007C51  30                 	db	48	;'0'
  1353  007C52  3A                 	db	58	;':'
  1354  007C53  20                 	db	32
  1355  007C54  6E                 	db	110	;'n'
  1356  007C55  6F                 	db	111	;'o'
  1357  007C56  74                 	db	116	;'t'
  1358  007C57  20                 	db	32
  1359  007C58  6C                 	db	108	;'l'
  1360  007C59  6F                 	db	111	;'o'
  1361  007C5A  63                 	db	99	;'c'
  1362  007C5B  6B                 	db	107	;'k'
  1363  007C5C  65                 	db	101	;'e'
  1364  007C5D  64                 	db	100	;'d'
  1365  007C5E  20                 	db	32
  1366  007C5F  31                 	db	49	;'1'
  1367  007C60  3A                 	db	58	;':'
  1368  007C61  20                 	db	32
  1369  007C62  6C                 	db	108	;'l'
  1370  007C63  6F                 	db	111	;'o'
  1371  007C64  63                 	db	99	;'c'
  1372  007C65  6B                 	db	107	;'k'
  1373  007C66  65                 	db	101	;'e'
  1374  007C67  64                 	db	100	;'d'
  1375  007C68  25                 	db	37
  1376  007C69  64                 	db	100	;'d'
  1377  007C6A  0A                 	db	10
  1378  007C6B  0D                 	db	13
  1379  007C6C  00                 	db	0
  1380  007C6D                     STR_38:
  1381                           
  1382                           ; BSR set to: 1
  1383  007C6D  24                 	db	36
  1384  007C6E  53                 	db	83	;'S'
  1385  007C6F  42                 	db	66	;'B'
  1386  007C70  54                 	db	84	;'T'
  1387  007C71  20                 	db	32
  1388  007C72  3C                 	db	60	;'<'
  1389  007C73  58                 	db	88	;'X'
  1390  007C74  58                 	db	88	;'X'
  1391  007C75  3E                 	db	62	;'>'
  1392  007C76  3C                 	db	60	;'<'
  1393  007C77  63                 	db	99	;'c'
  1394  007C78  72                 	db	114	;'r'
  1395  007C79  3E                 	db	62	;'>'
  1396  007C7A  20                 	db	32
  1397  007C7B  20                 	db	32
  1398  007C7C  20                 	db	32
  1399  007C7D  20                 	db	32
  1400  007C7E  53                 	db	83	;'S'
  1401  007C7F  65                 	db	101	;'e'
  1402  007C80  74                 	db	116	;'t'
  1403  007C81  20                 	db	32
  1404  007C82  55                 	db	85	;'U'
  1405  007C83  41                 	db	65	;'A'
  1406  007C84  52                 	db	82	;'R'
  1407  007C85  54                 	db	84	;'T'
  1408  007C86  20                 	db	32
  1409  007C87  72                 	db	114	;'r'
  1410  007C88  65                 	db	101	;'e'
  1411  007C89  66                 	db	102	;'f'
  1412  007C8A  72                 	db	114	;'r'
  1413  007C8B  65                 	db	101	;'e'
  1414  007C8C  73                 	db	115	;'s'
  1415  007C8D  68                 	db	104	;'h'
  1416  007C8E  20                 	db	32
  1417  007C8F  72                 	db	114	;'r'
  1418  007C90  61                 	db	97	;'a'
  1419  007C91  74                 	db	116	;'t'
  1420  007C92  65                 	db	101	;'e'
  1421  007C93  20                 	db	32
  1422  007C94  28                 	db	40
  1423  007C95  31                 	db	49	;'1'
  1424  007C96  2D                 	db	45
  1425  007C97  32                 	db	50	;'2'
  1426  007C98  30                 	db	48	;'0'
  1427  007C99  29                 	db	41
  1428  007C9A  5B                 	db	91	;'['
  1429  007C9B  48                 	db	72	;'H'
  1430  007C9C  7A                 	db	122	;'z'
  1431  007C9D  5D                 	db	93	;']'
  1432  007C9E  2E                 	db	46
  1433  007C9F  0D                 	db	13
  1434  007CA0  0A                 	db	10
  1435  007CA1  00                 	db	0
  1436  007CA2                     STR_37:
  1437                           
  1438                           ; BSR set to: 1
  1439  007CA2  24                 	db	36
  1440  007CA3  53                 	db	83	;'S'
  1441  007CA4  48                 	db	72	;'H'
  1442  007CA5  20                 	db	32
  1443  007CA6  3C                 	db	60	;'<'
  1444  007CA7  63                 	db	99	;'c'
  1445  007CA8  72                 	db	114	;'r'
  1446  007CA9  3E                 	db	62	;'>'
  1447  007CAA  20                 	db	32
  1448  007CAB  20                 	db	32
  1449  007CAC  20                 	db	32
  1450  007CAD  20                 	db	32
  1451  007CAE  20                 	db	32
  1452  007CAF  20                 	db	32
  1453  007CB0  20                 	db	32
  1454  007CB1  20                 	db	32
  1455  007CB2  20                 	db	32
  1456  007CB3  50                 	db	80	;'P'
  1457  007CB4  72                 	db	114	;'r'
  1458  007CB5  69                 	db	105	;'i'
  1459  007CB6  6E                 	db	110	;'n'
  1460  007CB7  74                 	db	116	;'t'
  1461  007CB8  20                 	db	32
  1462  007CB9  73                 	db	115	;'s'
  1463  007CBA  79                 	db	121	;'y'
  1464  007CBB  73                 	db	115	;'s'
  1465  007CBC  74                 	db	116	;'t'
  1466  007CBD  65                 	db	101	;'e'
  1467  007CBE  6D                 	db	109	;'m'
  1468  007CBF  20                 	db	32
  1469  007CC0  68                 	db	104	;'h'
  1470  007CC1  65                 	db	101	;'e'
  1471  007CC2  6C                 	db	108	;'l'
  1472  007CC3  70                 	db	112	;'p'
  1473  007CC4  20                 	db	32
  1474  007CC5  6D                 	db	109	;'m'
  1475  007CC6  65                 	db	101	;'e'
  1476  007CC7  73                 	db	115	;'s'
  1477  007CC8  73                 	db	115	;'s'
  1478  007CC9  61                 	db	97	;'a'
  1479  007CCA  67                 	db	103	;'g'
  1480  007CCB  65                 	db	101	;'e'
  1481  007CCC  2E                 	db	46
  1482  007CCD  0D                 	db	13
  1483  007CCE  0A                 	db	10
  1484  007CCF  00                 	db	0
  1485  007CD0                     STR_26:
  1486                           
  1487                           ; BSR set to: 1
  1488  007CD0  24                 	db	36
  1489  007CD1  54                 	db	84	;'T'
  1490  007CD2  51                 	db	81	;'Q'
  1491  007CD3  20                 	db	32
  1492  007CD4  3C                 	db	60	;'<'
  1493  007CD5  63                 	db	99	;'c'
  1494  007CD6  72                 	db	114	;'r'
  1495  007CD7  3E                 	db	62	;'>'
  1496  007CD8  20                 	db	32
  1497  007CD9  20                 	db	32
  1498  007CDA  20                 	db	32
  1499  007CDB  20                 	db	32
  1500  007CDC  20                 	db	32
  1501  007CDD  20                 	db	32
  1502  007CDE  20                 	db	32
  1503  007CDF  20                 	db	32
  1504  007CE0  20                 	db	32
  1505  007CE1  47                 	db	71	;'G'
  1506  007CE2  65                 	db	101	;'e'
  1507  007CE3  74                 	db	116	;'t'
  1508  007CE4  20                 	db	32
  1509  007CE5  73                 	db	115	;'s'
  1510  007CE6  74                 	db	116	;'t'
  1511  007CE7  61                 	db	97	;'a'
  1512  007CE8  74                 	db	116	;'t'
  1513  007CE9  75                 	db	117	;'u'
  1514  007CEA  73                 	db	115	;'s'
  1515  007CEB  20                 	db	32
  1516  007CEC  66                 	db	102	;'f'
  1517  007CED  72                 	db	114	;'r'
  1518  007CEE  6F                 	db	111	;'o'
  1519  007CEF  6D                 	db	109	;'m'
  1520  007CF0  20                 	db	32
  1521  007CF1  54                 	db	84	;'T'
  1522  007CF2  58                 	db	88	;'X'
  1523  007CF3  20                 	db	32
  1524  007CF4  73                 	db	115	;'s'
  1525  007CF5  79                 	db	121	;'y'
  1526  007CF6  73                 	db	115	;'s'
  1527  007CF7  74                 	db	116	;'t'
  1528  007CF8  65                 	db	101	;'e'
  1529  007CF9  6D                 	db	109	;'m'
  1530  007CFA  2E                 	db	46
  1531  007CFB  0D                 	db	13
  1532  007CFC  0A                 	db	10
  1533  007CFD  00                 	db	0
  1534  007CFE                     STR_31:
  1535                           
  1536                           ; BSR set to: 1
  1537  007CFE  24                 	db	36
  1538  007CFF  52                 	db	82	;'R'
  1539  007D00  51                 	db	81	;'Q'
  1540  007D01  20                 	db	32
  1541  007D02  3C                 	db	60	;'<'
  1542  007D03  63                 	db	99	;'c'
  1543  007D04  72                 	db	114	;'r'
  1544  007D05  3E                 	db	62	;'>'
  1545  007D06  20                 	db	32
  1546  007D07  20                 	db	32
  1547  007D08  20                 	db	32
  1548  007D09  20                 	db	32
  1549  007D0A  20                 	db	32
  1550  007D0B  20                 	db	32
  1551  007D0C  20                 	db	32
  1552  007D0D  20                 	db	32
  1553  007D0E  20                 	db	32
  1554  007D0F  47                 	db	71	;'G'
  1555  007D10  65                 	db	101	;'e'
  1556  007D11  74                 	db	116	;'t'
  1557  007D12  20                 	db	32
  1558  007D13  73                 	db	115	;'s'
  1559  007D14  74                 	db	116	;'t'
  1560  007D15  61                 	db	97	;'a'
  1561  007D16  74                 	db	116	;'t'
  1562  007D17  75                 	db	117	;'u'
  1563  007D18  73                 	db	115	;'s'
  1564  007D19  20                 	db	32
  1565  007D1A  66                 	db	102	;'f'
  1566  007D1B  72                 	db	114	;'r'
  1567  007D1C  6F                 	db	111	;'o'
  1568  007D1D  6D                 	db	109	;'m'
  1569  007D1E  20                 	db	32
  1570  007D1F  52                 	db	82	;'R'
  1571  007D20  58                 	db	88	;'X'
  1572  007D21  20                 	db	32
  1573  007D22  73                 	db	115	;'s'
  1574  007D23  79                 	db	121	;'y'
  1575  007D24  73                 	db	115	;'s'
  1576  007D25  74                 	db	116	;'t'
  1577  007D26  65                 	db	101	;'e'
  1578  007D27  6D                 	db	109	;'m'
  1579  007D28  0D                 	db	13
  1580  007D29  0A                 	db	10
  1581  007D2A  00                 	db	0
  1582  007D2B                     STR_40:
  1583                           
  1584                           ; BSR set to: 1
  1585  007D2B  24                 	db	36
  1586  007D2C  53                 	db	83	;'S'
  1587  007D2D  51                 	db	81	;'Q'
  1588  007D2E  20                 	db	32
  1589  007D2F  3C                 	db	60	;'<'
  1590  007D30  58                 	db	88	;'X'
  1591  007D31  3E                 	db	62	;'>'
  1592  007D32  3C                 	db	60	;'<'
  1593  007D33  63                 	db	99	;'c'
  1594  007D34  72                 	db	114	;'r'
  1595  007D35  3E                 	db	62	;'>'
  1596  007D36  20                 	db	32
  1597  007D37  20                 	db	32
  1598  007D38  20                 	db	32
  1599  007D39  20                 	db	32
  1600  007D3A  20                 	db	32
  1601  007D3B  20                 	db	32
  1602  007D3C  47                 	db	71	;'G'
  1603  007D3D  65                 	db	101	;'e'
  1604  007D3E  74                 	db	116	;'t'
  1605  007D3F  20                 	db	32
  1606  007D40  73                 	db	115	;'s'
  1607  007D41  79                 	db	121	;'y'
  1608  007D42  73                 	db	115	;'s'
  1609  007D43  74                 	db	116	;'t'
  1610  007D44  65                 	db	101	;'e'
  1611  007D45  6D                 	db	109	;'m'
  1612  007D46  20                 	db	32
  1613  007D47  73                 	db	115	;'s'
  1614  007D48  74                 	db	116	;'t'
  1615  007D49  61                 	db	97	;'a'
  1616  007D4A  74                 	db	116	;'t'
  1617  007D4B  75                 	db	117	;'u'
  1618  007D4C  73                 	db	115	;'s'
  1619  007D4D  2E                 	db	46
  1620  007D4E  0D                 	db	13
  1621  007D4F  0A                 	db	10
  1622  007D50  00                 	db	0
  1623  007D51                     STR_41:
  1624                           
  1625                           ; BSR set to: 1
  1626  007D51  24                 	db	36
  1627  007D52  53                 	db	83	;'S'
  1628  007D53  4C                 	db	76	;'L'
  1629  007D54  20                 	db	32
  1630  007D55  3C                 	db	60	;'<'
  1631  007D56  63                 	db	99	;'c'
  1632  007D57  72                 	db	114	;'r'
  1633  007D58  3E                 	db	62	;'>'
  1634  007D59  20                 	db	32
  1635  007D5A  20                 	db	32
  1636  007D5B  20                 	db	32
  1637  007D5C  20                 	db	32
  1638  007D5D  20                 	db	32
  1639  007D5E  20                 	db	32
  1640  007D5F  20                 	db	32
  1641  007D60  20                 	db	32
  1642  007D61  20                 	db	32
  1643  007D62  54                 	db	84	;'T'
  1644  007D63  65                 	db	101	;'e'
  1645  007D64  73                 	db	115	;'s'
  1646  007D65  74                 	db	116	;'t'
  1647  007D66  20                 	db	32
  1648  007D67  73                 	db	115	;'s'
  1649  007D68  79                 	db	121	;'y'
  1650  007D69  73                 	db	115	;'s'
  1651  007D6A  74                 	db	116	;'t'
  1652  007D6B  65                 	db	101	;'e'
  1653  007D6C  6D                 	db	109	;'m'
  1654  007D6D  20                 	db	32
  1655  007D6E  4C                 	db	76	;'L'
  1656  007D6F  45                 	db	69	;'E'
  1657  007D70  44                 	db	68	;'D'
  1658  007D71  73                 	db	115	;'s'
  1659  007D72  2E                 	db	46
  1660  007D73  0D                 	db	13
  1661  007D74  0A                 	db	10
  1662  007D75  00                 	db	0
  1663  007D76                     STR_59:
  1664                           
  1665                           ; BSR set to: 1
  1666  007D76  54                 	db	84	;'T'
  1667  007D77  58                 	db	88	;'X'
  1668  007D78  20                 	db	32
  1669  007D79  53                 	db	83	;'S'
  1670  007D7A  59                 	db	89	;'Y'
  1671  007D7B  4E                 	db	78	;'N'
  1672  007D7C  54                 	db	84	;'T'
  1673  007D7D  48                 	db	72	;'H'
  1674  007D7E  20                 	db	32
  1675  007D7F  28                 	db	40
  1676  007D80  50                 	db	80	;'P'
  1677  007D81  4C                 	db	76	;'L'
  1678  007D82  4C                 	db	76	;'L'
  1679  007D83  29                 	db	41
  1680  007D84  20                 	db	32
  1681  007D85  4C                 	db	76	;'L'
  1682  007D86  6F                 	db	111	;'o'
  1683  007D87  63                 	db	99	;'c'
  1684  007D88  6B                 	db	107	;'k'
  1685  007D89  20                 	db	32
  1686  007D8A  69                 	db	105	;'i'
  1687  007D8B  6E                 	db	110	;'n'
  1688  007D8C  64                 	db	100	;'d'
  1689  007D8D  69                 	db	105	;'i'
  1690  007D8E  63                 	db	99	;'c'
  1691  007D8F  61                 	db	97	;'a'
  1692  007D90  74                 	db	116	;'t'
  1693  007D91  69                 	db	105	;'i'
  1694  007D92  6F                 	db	111	;'o'
  1695  007D93  6E                 	db	110	;'n'
  1696  007D94  20                 	db	32
  1697  007D95  25                 	db	37
  1698  007D96  64                 	db	100	;'d'
  1699  007D97  0A                 	db	10
  1700  007D98  0D                 	db	13
  1701  007D99  00                 	db	0
  1702  007D9A                     STR_49:
  1703                           
  1704                           ; BSR set to: 1
  1705  007D9A  49                 	db	73	;'I'
  1706  007D9B  6E                 	db	110	;'n'
  1707  007D9C  70                 	db	112	;'p'
  1708  007D9D  75                 	db	117	;'u'
  1709  007D9E  74                 	db	116	;'t'
  1710  007D9F  20                 	db	32
  1711  007DA0  70                 	db	112	;'p'
  1712  007DA1  6F                 	db	111	;'o'
  1713  007DA2  77                 	db	119	;'w'
  1714  007DA3  65                 	db	101	;'e'
  1715  007DA4  72                 	db	114	;'r'
  1716  007DA5  20                 	db	32
  1717  007DA6  73                 	db	115	;'s'
  1718  007DA7  74                 	db	116	;'t'
  1719  007DA8  61                 	db	97	;'a'
  1720  007DA9  74                 	db	116	;'t'
  1721  007DAA  75                 	db	117	;'u'
  1722  007DAB  73                 	db	115	;'s'
  1723  007DAC  20                 	db	32
  1724  007DAD  30                 	db	48	;'0'
  1725  007DAE  3A                 	db	58	;':'
  1726  007DAF  20                 	db	32
  1727  007DB0  4F                 	db	79	;'O'
  1728  007DB1  46                 	db	70	;'F'
  1729  007DB2  46                 	db	70	;'F'
  1730  007DB3  20                 	db	32
  1731  007DB4  31                 	db	49	;'1'
  1732  007DB5  3A                 	db	58	;':'
  1733  007DB6  20                 	db	32
  1734  007DB7  4F                 	db	79	;'O'
  1735  007DB8  4E                 	db	78	;'N'
  1736  007DB9  25                 	db	37
  1737  007DBA  64                 	db	100	;'d'
  1738  007DBB  0A                 	db	10
  1739  007DBC  0D                 	db	13
  1740  007DBD  00                 	db	0
  1741  007DBE                     STR_6:
  1742                           
  1743                           ; BSR set to: 1
  1744  007DBE  52                 	db	82	;'R'
  1745  007DBF  58                 	db	88	;'X'
  1746  007DC0  20                 	db	32
  1747  007DC1  53                 	db	83	;'S'
  1748  007DC2  41                 	db	65	;'A'
  1749  007DC3  4D                 	db	77	;'M'
  1750  007DC4  50                 	db	80	;'P'
  1751  007DC5  4C                 	db	76	;'L'
  1752  007DC6  45                 	db	69	;'E'
  1753  007DC7  20                 	db	32
  1754  007DC8  43                 	db	67	;'C'
  1755  007DC9  48                 	db	72	;'H'
  1756  007DCA  41                 	db	65	;'A'
  1757  007DCB  4E                 	db	78	;'N'
  1758  007DCC  4E                 	db	78	;'N'
  1759  007DCD  45                 	db	69	;'E'
  1760  007DCE  4C                 	db	76	;'L'
  1761  007DCF  20                 	db	32
  1762  007DD0  52                 	db	82	;'R'
  1763  007DD1  58                 	db	88	;'X'
  1764  007DD2  2D                 	db	45
  1765  007DD3  41                 	db	65	;'A'
  1766  007DD4  44                 	db	68	;'D'
  1767  007DD5  43                 	db	67	;'C'
  1768  007DD6  5F                 	db	95	;'_'
  1769  007DD7  56                 	db	86	;'V'
  1770  007DD8  47                 	db	71	;'G'
  1771  007DD9  5F                 	db	95	;'_'
  1772  007DDA  4D                 	db	77	;'M'
  1773  007DDB  4F                 	db	79	;'O'
  1774  007DDC  4E                 	db	78	;'N'
  1775  007DDD  0A                 	db	10
  1776  007DDE  0D                 	db	13
  1777  007DDF  00                 	db	0
  1778  007DE0                     STR_2:
  1779                           
  1780                           ; BSR set to: 1
  1781  007DE0  54                 	db	84	;'T'
  1782  007DE1  58                 	db	88	;'X'
  1783  007DE2  20                 	db	32
  1784  007DE3  53                 	db	83	;'S'
  1785  007DE4  41                 	db	65	;'A'
  1786  007DE5  4D                 	db	77	;'M'
  1787  007DE6  50                 	db	80	;'P'
  1788  007DE7  4C                 	db	76	;'L'
  1789  007DE8  45                 	db	69	;'E'
  1790  007DE9  20                 	db	32
  1791  007DEA  43                 	db	67	;'C'
  1792  007DEB  48                 	db	72	;'H'
  1793  007DEC  41                 	db	65	;'A'
  1794  007DED  4E                 	db	78	;'N'
  1795  007DEE  4E                 	db	78	;'N'
  1796  007DEF  45                 	db	69	;'E'
  1797  007DF0  4C                 	db	76	;'L'
  1798  007DF1  3A                 	db	58	;':'
  1799  007DF2  20                 	db	32
  1800  007DF3  54                 	db	84	;'T'
  1801  007DF4  58                 	db	88	;'X'
  1802  007DF5  2D                 	db	45
  1803  007DF6  41                 	db	65	;'A'
  1804  007DF7  44                 	db	68	;'D'
  1805  007DF8  43                 	db	67	;'C'
  1806  007DF9  5F                 	db	95	;'_'
  1807  007DFA  52                 	db	82	;'R'
  1808  007DFB  52                 	db	82	;'R'
  1809  007DFC  45                 	db	69	;'E'
  1810  007DFD  56                 	db	86	;'V'
  1811  007DFE  0A                 	db	10
  1812  007DFF  0D                 	db	13
  1813  007E00  00                 	db	0
  1814  007E01                     STR_5:
  1815                           
  1816                           ; BSR set to: 1
  1817  007E01  52                 	db	82	;'R'
  1818  007E02  58                 	db	88	;'X'
  1819  007E03  20                 	db	32
  1820  007E04  53                 	db	83	;'S'
  1821  007E05  41                 	db	65	;'A'
  1822  007E06  4D                 	db	77	;'M'
  1823  007E07  50                 	db	80	;'P'
  1824  007E08  4C                 	db	76	;'L'
  1825  007E09  45                 	db	69	;'E'
  1826  007E0A  20                 	db	32
  1827  007E0B  43                 	db	67	;'C'
  1828  007E0C  48                 	db	72	;'H'
  1829  007E0D  41                 	db	65	;'A'
  1830  007E0E  4E                 	db	78	;'N'
  1831  007E0F  4E                 	db	78	;'N'
  1832  007E10  45                 	db	69	;'E'
  1833  007E11  4C                 	db	76	;'L'
  1834  007E12  20                 	db	32
  1835  007E13  52                 	db	82	;'R'
  1836  007E14  58                 	db	88	;'X'
  1837  007E15  2D                 	db	45
  1838  007E16  41                 	db	65	;'A'
  1839  007E17  44                 	db	68	;'D'
  1840  007E18  43                 	db	67	;'C'
  1841  007E19  5F                 	db	95	;'_'
  1842  007E1A  46                 	db	70	;'F'
  1843  007E1B  46                 	db	70	;'F'
  1844  007E1C  57                 	db	87	;'W'
  1845  007E1D  52                 	db	82	;'R'
  1846  007E1E  0A                 	db	10
  1847  007E1F  0D                 	db	13
  1848  007E20  00                 	db	0
  1849  007E21                     STR_14:
  1850                           
  1851                           ; BSR set to: 1
  1852  007E21  2A                 	db	42
  1853  007E22  2A                 	db	42
  1854  007E23  2A                 	db	42
  1855  007E24  2A                 	db	42
  1856  007E25  2A                 	db	42
  1857  007E26  2A                 	db	42
  1858  007E27  2A                 	db	42
  1859  007E28  2A                 	db	42
  1860  007E29  2A                 	db	42
  1861  007E2A  2A                 	db	42
  1862  007E2B  2A                 	db	42
  1863  007E2C  2A                 	db	42
  1864  007E2D  2A                 	db	42
  1865  007E2E  2A                 	db	42
  1866  007E2F  2A                 	db	42
  1867  007E30  2A                 	db	42
  1868  007E31  2A                 	db	42
  1869  007E32  2A                 	db	42
  1870  007E33  2A                 	db	42
  1871  007E34  2A                 	db	42
  1872  007E35  2A                 	db	42
  1873  007E36  2A                 	db	42
  1874  007E37  2A                 	db	42
  1875  007E38  2A                 	db	42
  1876  007E39  2A                 	db	42
  1877  007E3A  2A                 	db	42
  1878  007E3B  2A                 	db	42
  1879  007E3C  20                 	db	32
  1880  007E3D  0A                 	db	10
  1881  007E3E  0D                 	db	13
  1882  007E3F  00                 	db	0
  1883  007E40                     STR_36:
  1884                           
  1885                           ; BSR set to: 1
  1886  007E40  0A                 	db	10
  1887  007E41  0D                 	db	13
  1888  007E42  3C                 	db	60	;'<'
  1889  007E43  43                 	db	67	;'C'
  1890  007E44  6F                 	db	111	;'o'
  1891  007E45  6D                 	db	109	;'m'
  1892  007E46  6D                 	db	109	;'m'
  1893  007E47  6F                 	db	111	;'o'
  1894  007E48  6E                 	db	110	;'n'
  1895  007E49  20                 	db	32
  1896  007E4A  73                 	db	115	;'s'
  1897  007E4B  79                 	db	121	;'y'
  1898  007E4C  73                 	db	115	;'s'
  1899  007E4D  74                 	db	116	;'t'
  1900  007E4E  65                 	db	101	;'e'
  1901  007E4F  6D                 	db	109	;'m'
  1902  007E50  20                 	db	32
  1903  007E51  63                 	db	99	;'c'
  1904  007E52  6F                 	db	111	;'o'
  1905  007E53  6D                 	db	109	;'m'
  1906  007E54  6D                 	db	109	;'m'
  1907  007E55  61                 	db	97	;'a'
  1908  007E56  6E                 	db	110	;'n'
  1909  007E57  64                 	db	100	;'d'
  1910  007E58  73                 	db	115	;'s'
  1911  007E59  3E                 	db	62	;'>'
  1912  007E5A  0A                 	db	10
  1913  007E5B  0D                 	db	13
  1914  007E5C  00                 	db	0
  1915  007E5D                     STR_3:
  1916                           
  1917                           ; BSR set to: 1
  1918  007E5D  54                 	db	84	;'T'
  1919  007E5E  58                 	db	88	;'X'
  1920  007E5F  20                 	db	32
  1921  007E60  53                 	db	83	;'S'
  1922  007E61  41                 	db	65	;'A'
  1923  007E62  4D                 	db	77	;'M'
  1924  007E63  50                 	db	80	;'P'
  1925  007E64  4C                 	db	76	;'L'
  1926  007E65  45                 	db	69	;'E'
  1927  007E66  20                 	db	32
  1928  007E67  43                 	db	67	;'C'
  1929  007E68  48                 	db	72	;'H'
  1930  007E69  41                 	db	65	;'A'
  1931  007E6A  4E                 	db	78	;'N'
  1932  007E6B  4E                 	db	78	;'N'
  1933  007E6C  45                 	db	69	;'E'
  1934  007E6D  4C                 	db	76	;'L'
  1935  007E6E  20                 	db	32
  1936  007E6F  41                 	db	65	;'A'
  1937  007E70  44                 	db	68	;'D'
  1938  007E71  43                 	db	67	;'C'
  1939  007E72  5F                 	db	95	;'_'
  1940  007E73  54                 	db	84	;'T'
  1941  007E74  45                 	db	69	;'E'
  1942  007E75  4D                 	db	77	;'M'
  1943  007E76  50                 	db	80	;'P'
  1944  007E77  0A                 	db	10
  1945  007E78  0D                 	db	13
  1946  007E79  00                 	db	0
  1947  007E7A                     STR_29:
  1948                           
  1949                           ; BSR set to: 1
  1950  007E7A  0A                 	db	10
  1951  007E7B  0D                 	db	13
  1952  007E7C  3C                 	db	60	;'<'
  1953  007E7D  52                 	db	82	;'R'
  1954  007E7E  58                 	db	88	;'X'
  1955  007E7F  20                 	db	32
  1956  007E80  73                 	db	115	;'s'
  1957  007E81  79                 	db	121	;'y'
  1958  007E82  73                 	db	115	;'s'
  1959  007E83  74                 	db	116	;'t'
  1960  007E84  65                 	db	101	;'e'
  1961  007E85  6D                 	db	109	;'m'
  1962  007E86  20                 	db	32
  1963  007E87  63                 	db	99	;'c'
  1964  007E88  6F                 	db	111	;'o'
  1965  007E89  6D                 	db	109	;'m'
  1966  007E8A  6D                 	db	109	;'m'
  1967  007E8B  61                 	db	97	;'a'
  1968  007E8C  6E                 	db	110	;'n'
  1969  007E8D  64                 	db	100	;'d'
  1970  007E8E  73                 	db	115	;'s'
  1971  007E8F  3E                 	db	62	;'>'
  1972  007E90  0A                 	db	10
  1973  007E91  0D                 	db	13
  1974  007E92  00                 	db	0
  1975  007E93                     STR_48:
  1976                           
  1977                           ; BSR set to: 1
  1978  007E93  44                 	db	68	;'D'
  1979  007E94  65                 	db	101	;'e'
  1980  007E95  76                 	db	118	;'v'
  1981  007E96  69                 	db	105	;'i'
  1982  007E97  63                 	db	99	;'c'
  1983  007E98  65                 	db	101	;'e'
  1984  007E99  20                 	db	32
  1985  007E9A  54                 	db	84	;'T'
  1986  007E9B  65                 	db	101	;'e'
  1987  007E9C  6D                 	db	109	;'m'
  1988  007E9D  70                 	db	112	;'p'
  1989  007E9E  65                 	db	101	;'e'
  1990  007E9F  72                 	db	114	;'r'
  1991  007EA0  61                 	db	97	;'a'
  1992  007EA1  74                 	db	116	;'t'
  1993  007EA2  75                 	db	117	;'u'
  1994  007EA3  72                 	db	114	;'r'
  1995  007EA4  65                 	db	101	;'e'
  1996  007EA5  20                 	db	32
  1997  007EA6  25                 	db	37
  1998  007EA7  66                 	db	102	;'f'
  1999  007EA8  0A                 	db	10
  2000  007EA9  0D                 	db	13
  2001  007EAA  00                 	db	0
  2002  007EAB                     STR_50:
  2003                           
  2004                           ; BSR set to: 1
  2005  007EAB  52                 	db	82	;'R'
  2006  007EAC  58                 	db	88	;'X'
  2007  007EAD  20                 	db	32
  2008  007EAE  46                 	db	70	;'F'
  2009  007EAF  72                 	db	114	;'r'
  2010  007EB0  65                 	db	101	;'e'
  2011  007EB1  71                 	db	113	;'q'
  2012  007EB2  75                 	db	117	;'u'
  2013  007EB3  65                 	db	101	;'e'
  2014  007EB4  6E                 	db	110	;'n'
  2015  007EB5  63                 	db	99	;'c'
  2016  007EB6  79                 	db	121	;'y'
  2017  007EB7  20                 	db	32
  2018  007EB8  69                 	db	105	;'i'
  2019  007EB9  6E                 	db	110	;'n'
  2020  007EBA  20                 	db	32
  2021  007EBB  4D                 	db	77	;'M'
  2022  007EBC  48                 	db	72	;'H'
  2023  007EBD  7A                 	db	122	;'z'
  2024  007EBE  25                 	db	37
  2025  007EBF  66                 	db	102	;'f'
  2026  007EC0  0A                 	db	10
  2027  007EC1  0D                 	db	13
  2028  007EC2  00                 	db	0
  2029  007EC3                     STR_62:
  2030                           
  2031                           ; BSR set to: 1
  2032  007EC3  54                 	db	84	;'T'
  2033  007EC4  58                 	db	88	;'X'
  2034  007EC5  20                 	db	32
  2035  007EC6  46                 	db	70	;'F'
  2036  007EC7  72                 	db	114	;'r'
  2037  007EC8  65                 	db	101	;'e'
  2038  007EC9  71                 	db	113	;'q'
  2039  007ECA  75                 	db	117	;'u'
  2040  007ECB  65                 	db	101	;'e'
  2041  007ECC  6E                 	db	110	;'n'
  2042  007ECD  63                 	db	99	;'c'
  2043  007ECE  79                 	db	121	;'y'
  2044  007ECF  20                 	db	32
  2045  007ED0  69                 	db	105	;'i'
  2046  007ED1  6E                 	db	110	;'n'
  2047  007ED2  20                 	db	32
  2048  007ED3  4D                 	db	77	;'M'
  2049  007ED4  48                 	db	72	;'H'
  2050  007ED5  7A                 	db	122	;'z'
  2051  007ED6  25                 	db	37
  2052  007ED7  66                 	db	102	;'f'
  2053  007ED8  0A                 	db	10
  2054  007ED9  0D                 	db	13
  2055  007EDA  00                 	db	0
  2056  007EDB                     STR_23:
  2057                           
  2058                           ; BSR set to: 1
  2059  007EDB  3C                 	db	60	;'<'
  2060  007EDC  54                 	db	84	;'T'
  2061  007EDD  58                 	db	88	;'X'
  2062  007EDE  20                 	db	32
  2063  007EDF  73                 	db	115	;'s'
  2064  007EE0  79                 	db	121	;'y'
  2065  007EE1  73                 	db	115	;'s'
  2066  007EE2  74                 	db	116	;'t'
  2067  007EE3  65                 	db	101	;'e'
  2068  007EE4  6D                 	db	109	;'m'
  2069  007EE5  20                 	db	32
  2070  007EE6  63                 	db	99	;'c'
  2071  007EE7  6F                 	db	111	;'o'
  2072  007EE8  6D                 	db	109	;'m'
  2073  007EE9  6D                 	db	109	;'m'
  2074  007EEA  61                 	db	97	;'a'
  2075  007EEB  6E                 	db	110	;'n'
  2076  007EEC  64                 	db	100	;'d'
  2077  007EED  73                 	db	115	;'s'
  2078  007EEE  3E                 	db	62	;'>'
  2079  007EEF  0A                 	db	10
  2080  007EF0  0D                 	db	13
  2081  007EF1  00                 	db	0
  2082  007EF2                     STR_52:
  2083                           
  2084                           ; BSR set to: 1
  2085  007EF2  4C                 	db	76	;'L'
  2086  007EF3  69                 	db	105	;'i'
  2087  007EF4  67                 	db	103	;'g'
  2088  007EF5  68                 	db	104	;'h'
  2089  007EF6  74                 	db	116	;'t'
  2090  007EF7  20                 	db	32
  2091  007EF8  30                 	db	48	;'0'
  2092  007EF9  3A                 	db	58	;':'
  2093  007EFA  20                 	db	32
  2094  007EFB  4F                 	db	79	;'O'
  2095  007EFC  46                 	db	70	;'F'
  2096  007EFD  46                 	db	70	;'F'
  2097  007EFE  20                 	db	32
  2098  007EFF  31                 	db	49	;'1'
  2099  007F00  3A                 	db	58	;':'
  2100  007F01  20                 	db	32
  2101  007F02  4F                 	db	79	;'O'
  2102  007F03  4E                 	db	78	;'N'
  2103  007F04  25                 	db	37
  2104  007F05  64                 	db	100	;'d'
  2105  007F06  0A                 	db	10
  2106  007F07  0D                 	db	13
  2107  007F08  00                 	db	0
  2108  007F09                     STR_46:
  2109                           
  2110                           ; BSR set to: 1
  2111  007F09  2A                 	db	42
  2112  007F0A  2A                 	db	42
  2113  007F0B  2A                 	db	42
  2114  007F0C  2A                 	db	42
  2115  007F0D  2A                 	db	42
  2116  007F0E  2A                 	db	42
  2117  007F0F  2A                 	db	42
  2118  007F10  2A                 	db	42
  2119  007F11  2A                 	db	42
  2120  007F12  2A                 	db	42
  2121  007F13  2A                 	db	42
  2122  007F14  2A                 	db	42
  2123  007F15  2A                 	db	42
  2124  007F16  2A                 	db	42
  2125  007F17  2A                 	db	42
  2126  007F18  2A                 	db	42
  2127  007F19  2A                 	db	42
  2128  007F1A  2A                 	db	42
  2129  007F1B  2A                 	db	42
  2130  007F1C  0A                 	db	10
  2131  007F1D  0D                 	db	13
  2132  007F1E  00                 	db	0
  2133  007F1F                     STR_55:
  2134                           
  2135                           ; BSR set to: 1
  2136  007F1F  53                 	db	83	;'S'
  2137  007F20  4F                 	db	79	;'O'
  2138  007F21  46                 	db	70	;'F'
  2139  007F22  54                 	db	84	;'T'
  2140  007F23  57                 	db	87	;'W'
  2141  007F24  41                 	db	65	;'A'
  2142  007F25  52                 	db	82	;'R'
  2143  007F26  45                 	db	69	;'E'
  2144  007F27  20                 	db	32
  2145  007F28  56                 	db	86	;'V'
  2146  007F29  45                 	db	69	;'E'
  2147  007F2A  52                 	db	82	;'R'
  2148  007F2B  53                 	db	83	;'S'
  2149  007F2C  49                 	db	73	;'I'
  2150  007F2D  4F                 	db	79	;'O'
  2151  007F2E  4E                 	db	78	;'N'
  2152  007F2F  20                 	db	32
  2153  007F30  25                 	db	37
  2154  007F31  73                 	db	115	;'s'
  2155  007F32  0A                 	db	10
  2156  007F33  0D                 	db	13
  2157  007F34  00                 	db	0
  2158  007F35                     STR_15:
  2159                           
  2160                           ; BSR set to: 1
  2161  007F35  46                 	db	70	;'F'
  2162  007F36  41                 	db	65	;'A'
  2163  007F37  53                 	db	83	;'S'
  2164  007F38  54                 	db	84	;'T'
  2165  007F39  20                 	db	32
  2166  007F3A  4C                 	db	76	;'L'
  2167  007F3B  49                 	db	73	;'I'
  2168  007F3C  4E                 	db	78	;'N'
  2169  007F3D  4B                 	db	75	;'K'
  2170  007F3E  20                 	db	32
  2171  007F3F  53                 	db	83	;'S'
  2172  007F40  59                 	db	89	;'Y'
  2173  007F41  53                 	db	83	;'S'
  2174  007F42  54                 	db	84	;'T'
  2175  007F43  45                 	db	69	;'E'
  2176  007F44  4D                 	db	77	;'M'
  2177  007F45  20                 	db	32
  2178  007F46  0A                 	db	10
  2179  007F47  0D                 	db	13
  2180  007F48  00                 	db	0
  2181  007F49                     STR_20:
  2182                           
  2183                           ; BSR set to: 1
  2184  007F49  43                 	db	67	;'C'
  2185  007F4A  6F                 	db	111	;'o'
  2186  007F4B  6D                 	db	109	;'m'
  2187  007F4C  70                 	db	112	;'p'
  2188  007F4D  69                 	db	105	;'i'
  2189  007F4E  6C                 	db	108	;'l'
  2190  007F4F  65                 	db	101	;'e'
  2191  007F50  20                 	db	32
  2192  007F51  74                 	db	116	;'t'
  2193  007F52  69                 	db	105	;'i'
  2194  007F53  6D                 	db	109	;'m'
  2195  007F54  65                 	db	101	;'e'
  2196  007F55  3A                 	db	58	;':'
  2197  007F56  20                 	db	32
  2198  007F57  25                 	db	37
  2199  007F58  73                 	db	115	;'s'
  2200  007F59  20                 	db	32
  2201  007F5A  0A                 	db	10
  2202  007F5B  0D                 	db	13
  2203  007F5C  00                 	db	0
  2204  007F5D                     STR_18:
  2205                           
  2206                           ; BSR set to: 1
  2207  007F5D  43                 	db	67	;'C'
  2208  007F5E  6F                 	db	111	;'o'
  2209  007F5F  6D                 	db	109	;'m'
  2210  007F60  70                 	db	112	;'p'
  2211  007F61  69                 	db	105	;'i'
  2212  007F62  6C                 	db	108	;'l'
  2213  007F63  65                 	db	101	;'e'
  2214  007F64  20                 	db	32
  2215  007F65  64                 	db	100	;'d'
  2216  007F66  61                 	db	97	;'a'
  2217  007F67  74                 	db	116	;'t'
  2218  007F68  65                 	db	101	;'e'
  2219  007F69  3A                 	db	58	;':'
  2220  007F6A  20                 	db	32
  2221  007F6B  25                 	db	37
  2222  007F6C  73                 	db	115	;'s'
  2223  007F6D  20                 	db	32
  2224  007F6E  0A                 	db	10
  2225  007F6F  0D                 	db	13
  2226  007F70  00                 	db	0
  2227  007F71                     STR_16:
  2228                           
  2229                           ; BSR set to: 1
  2230  007F71  53                 	db	83	;'S'
  2231  007F72  57                 	db	87	;'W'
  2232  007F73  20                 	db	32
  2233  007F74  56                 	db	86	;'V'
  2234  007F75  45                 	db	69	;'E'
  2235  007F76  53                 	db	83	;'S'
  2236  007F77  52                 	db	82	;'R'
  2237  007F78  49                 	db	73	;'I'
  2238  007F79  4F                 	db	79	;'O'
  2239  007F7A  4E                 	db	78	;'N'
  2240  007F7B  3A                 	db	58	;':'
  2241  007F7C  20                 	db	32
  2242  007F7D  25                 	db	37
  2243  007F7E  73                 	db	115	;'s'
  2244  007F7F  20                 	db	32
  2245  007F80  0A                 	db	10
  2246  007F81  0D                 	db	13
  2247  007F82  00                 	db	0
  2248  007F83                     STR_56:
  2249                           
  2250                           ; BSR set to: 1
  2251  007F83  55                 	db	85	;'U'
  2252  007F84  4E                 	db	78	;'N'
  2253  007F85  49                 	db	73	;'I'
  2254  007F86  54                 	db	84	;'T'
  2255  007F87  20                 	db	32
  2256  007F88  54                 	db	84	;'T'
  2257  007F89  59                 	db	89	;'Y'
  2258  007F8A  50                 	db	80	;'P'
  2259  007F8B  45                 	db	69	;'E'
  2260  007F8C  20                 	db	32
  2261  007F8D  25                 	db	37
  2262  007F8E  64                 	db	100	;'d'
  2263  007F8F  0A                 	db	10
  2264  007F90  0D                 	db	13
  2265  007F91  00                 	db	0
  2266  007F92                     STR_54:
  2267                           
  2268                           ; BSR set to: 1
  2269  007F92  55                 	db	85	;'U'
  2270  007F93  4E                 	db	78	;'N'
  2271  007F94  49                 	db	73	;'I'
  2272  007F95  54                 	db	84	;'T'
  2273  007F96  20                 	db	32
  2274  007F97  44                 	db	68	;'D'
  2275  007F98  43                 	db	67	;'C'
  2276  007F99  20                 	db	32
  2277  007F9A  25                 	db	37
  2278  007F9B  64                 	db	100	;'d'
  2279  007F9C  0A                 	db	10
  2280  007F9D  0D                 	db	13
  2281  007F9E  00                 	db	0
  2282  007F9F                     STR_53:
  2283                           
  2284                           ; BSR set to: 1
  2285  007F9F  55                 	db	85	;'U'
  2286  007FA0  4E                 	db	78	;'N'
  2287  007FA1  49                 	db	73	;'I'
  2288  007FA2  54                 	db	84	;'T'
  2289  007FA3  20                 	db	32
  2290  007FA4  49                 	db	73	;'I'
  2291  007FA5  44                 	db	68	;'D'
  2292  007FA6  20                 	db	32
  2293  007FA7  25                 	db	37
  2294  007FA8  64                 	db	100	;'d'
  2295  007FA9  0A                 	db	10
  2296  007FAA  0D                 	db	13
  2297  007FAB  00                 	db	0
  2298  007FAC                     STR_19:
  2299                           
  2300                           ; BSR set to: 1
  2301  007FAC  4D                 	db	77	;'M'
  2302  007FAD  61                 	db	97	;'a'
  2303  007FAE  72                 	db	114	;'r'
  2304  007FAF  20                 	db	32
  2305  007FB0  32                 	db	50	;'2'
  2306  007FB1  38                 	db	56	;'8'
  2307  007FB2  20                 	db	32
  2308  007FB3  32                 	db	50	;'2'
  2309  007FB4  30                 	db	48	;'0'
  2310  007FB5  31                 	db	49	;'1'
  2311  007FB6  38                 	db	56	;'8'
  2312  007FB7  00                 	db	0
  2313  007FB8                     STR_10:
  2314                           
  2315                           ; BSR set to: 1
  2316  007FB8  4E                 	db	78	;'N'
  2317  007FB9  4F                 	db	79	;'O'
  2318  007FBA  54                 	db	84	;'T'
  2319  007FBB  20                 	db	32
  2320  007FBC  4F                 	db	79	;'O'
  2321  007FBD  2E                 	db	46
  2322  007FBE  4B                 	db	75	;'K'
  2323  007FBF  20                 	db	32
  2324  007FC0  0A                 	db	10
  2325  007FC1  0D                 	db	13
  2326  007FC2  00                 	db	0
  2327  007FC3                     STR_51:
  2328                           
  2329                           ; BSR set to: 1
  2330  007FC3  52                 	db	82	;'R'
  2331  007FC4  53                 	db	83	;'S'
  2332  007FC5  53                 	db	83	;'S'
  2333  007FC6  49                 	db	73	;'I'
  2334  007FC7  20                 	db	32
  2335  007FC8  25                 	db	37
  2336  007FC9  64                 	db	100	;'d'
  2337  007FCA  0A                 	db	10
  2338  007FCB  0D                 	db	13
  2339  007FCC  00                 	db	0
  2340  007FCD                     STR_1:
  2341                           
  2342                           ; BSR set to: 1
  2343  007FCD  4E                 	db	78	;'N'
  2344  007FCE  4F                 	db	79	;'O'
  2345  007FCF  54                 	db	84	;'T'
  2346  007FD0  20                 	db	32
  2347  007FD1  4F                 	db	79	;'O'
  2348  007FD2  4B                 	db	75	;'K'
  2349  007FD3  20                 	db	32
  2350  007FD4  0A                 	db	10
  2351  007FD5  0D                 	db	13
  2352  007FD6  00                 	db	0
  2353  007FD7                     STR_21:
  2354                           
  2355                           ; BSR set to: 1
  2356  007FD7  31                 	db	49	;'1'
  2357  007FD8  33                 	db	51	;'3'
  2358  007FD9  3A                 	db	58	;':'
  2359  007FDA  30                 	db	48	;'0'
  2360  007FDB  32                 	db	50	;'2'
  2361  007FDC  3A                 	db	58	;':'
  2362  007FDD  33                 	db	51	;'3'
  2363  007FDE  30                 	db	48	;'0'
  2364  007FDF  00                 	db	0
  2365  007FE0                     STR_9:
  2366                           
  2367                           ; BSR set to: 1
  2368  007FE0  0A                 	db	10
  2369  007FE1  0D                 	db	13
  2370  007FE2  20                 	db	32
  2371  007FE3  4F                 	db	79	;'O'
  2372  007FE4  4B                 	db	75	;'K'
  2373  007FE5  20                 	db	32
  2374  007FE6  0A                 	db	10
  2375  007FE7  0D                 	db	13
  2376  007FE8  00                 	db	0
  2377  007FE9                     STR_70:
  2378                           
  2379                           ; BSR set to: 1
  2380  007FE9  28                 	db	40
  2381  007FEA  6E                 	db	110	;'n'
  2382  007FEB  75                 	db	117	;'u'
  2383  007FEC  6C                 	db	108	;'l'
  2384  007FED  6C                 	db	108	;'l'
  2385  007FEE  29                 	db	41
  2386  007FEF  00                 	db	0
  2387  007FF0                     STR_17:
  2388                           
  2389                           ; BSR set to: 1
  2390  007FF0  31                 	db	49	;'1'
  2391  007FF1  5F                 	db	95	;'_'
  2392  007FF2  30                 	db	48	;'0'
  2393  007FF3  30                 	db	48	;'0'
  2394  007FF4  32                 	db	50	;'2'
  2395  007FF5  00                 	db	0
  2396  007FF6                     STR_8:
  2397                           
  2398                           ; BSR set to: 1
  2399  007FF6  25                 	db	37
  2400  007FF7  64                 	db	100	;'d'
  2401  007FF8  20                 	db	32
  2402  007FF9  09                 	db	9
  2403  007FFA  00                 	db	0
  2404  007FFB                     
  2405                           ; BSR set to: 1
  2406  007FFB  25                 	db	37
  2407  007FFC  64                 	db	100	;'d'
  2408  007FFD  09                 	db	9
  2409  007FFE  00                 	db	0
  2410  0000                     
  2411                           ; #config settings
  2412  007FFF  00                 	db	0	; dummy byte at the end
  2413  0000                     
  2414                           	psect	nvCOMRAM
  2415  000046                     __pnvCOMRAM:
  2416                           	opt stack 0
  2417  000046                     _timer0ReloadVal:
  2418                           	opt stack 0
  2419  000046                     	ds	2
  2420                           
  2421                           	psect	nvBANK1
  2422  0001F3                     __pnvBANK1:
  2423                           	opt stack 0
  2424  0001F3                     _eusart1TxBufferRemaining:
  2425                           	opt stack 0
  2426  0001F3                     	ds	1
  2427                           
  2428                           	psect	nvBANK2
  2429  0002E2                     __pnvBANK2:
  2430                           	opt stack 0
  2431  0002E2                     _TMR0_InterruptHandler:
  2432                           	opt stack 0
  2433  0002E2                     	ds	2
  2434  0000                     _ANSELA	set	3896
  2435  0000                     _ANSELE	set	3900
  2436  0000                     _ANSELD	set	3899
  2437  0000                     _ANSELB	set	3897
  2438  0000                     _ANSELC	set	3898
  2439  0000                     _PORTBbits	set	3969
  2440  0000                     _PORTDbits	set	3971
  2441  0000                     _ADCON0bits	set	4034
  2442  0000                     _ADRESH	set	4036
  2443  0000                     _ADRESL	set	4035
  2444  0000                     _ADCON2	set	4032
  2445  0000                     _ADCON1	set	4033
  2446  0000                     _ADCON0	set	4034
  2447  0000                     _T0CONbits	set	4053
  2448  0000                     _T0CON	set	4053
  2449  0000                     _TMR0L	set	4054
  2450  0000                     _TMR0H	set	4055
  2451  0000                     _EEDATA	set	4008
  2452  0000                     _EEADR	set	4009
  2453  0000                     _EECON2	set	4007
  2454  0000                     _EECON1bits	set	4006
  2455  0000                     _TABLAT	set	4085
  2456  0000                     _TBLPTRL	set	4086
  2457  0000                     _TBLPTRH	set	4087
  2458  0000                     _TBLPTRU	set	4088
  2459  0000                     _INTCON2bits	set	4081
  2460  0000                     _WPUB	set	3937
  2461  0000                     _TRISD	set	3989
  2462  0000                     _TRISC	set	3988
  2463  0000                     _TRISB	set	3987
  2464  0000                     _TRISA	set	3986
  2465  0000                     _TRISE	set	3990
  2466  0000                     _LATC	set	3979
  2467  0000                     _LATB	set	3978
  2468  0000                     _LATA	set	3977
  2469  0000                     _LATD	set	3980
  2470  0000                     _LATE	set	3981
  2471  0000                     _RCREG1	set	4014
  2472  0000                     _RCSTA1bits	set	4011
  2473  0000                     _TXREG1	set	4013
  2474  0000                     _SPBRGH1	set	4016
  2475  0000                     _SPBRG1	set	4015
  2476  0000                     _TXSTA1	set	4012
  2477  0000                     _RCSTA1	set	4011
  2478  0000                     _BAUDCON1	set	4024
  2479  0000                     _PIR1bits	set	3998
  2480  0000                     _PIE1bits	set	3997
  2481  0000                     _PIR2bits	set	4001
  2482  0000                     _PIE2bits	set	4000
  2483  0000                     _RCONbits	set	4048
  2484  0000                     _OSCTUNE	set	3995
  2485  0000                     _OSCCON2	set	4050
  2486  0000                     _OSCCON	set	4051
  2487  0000                     _LATAbits	set	3977
  2488  0000                     _LATDbits	set	3980
  2489  0000                     _INTCONbits	set	4082
  2490  0000                     _IOCB	set	3938
  2491  0000                     _LATCbits	set	3979
  2492  0000                     _LATBbits	set	3978
  2493                           
  2494                           	psect	cinit
  2495  00365A                     __pcinit:
  2496                           	opt stack 0
  2497  00365A                     start_initialization:
  2498                           	opt stack 0
  2499  00365A                     __initialization:
  2500                           	opt stack 0
  2501                           
  2502                           ; Initialize objects allocated to BANK2 (12 bytes)
  2503                           ; load TBLPTR registers with __pidataBANK2
  2504  00365A  0E72               	movlw	low __pidataBANK2
  2505  00365C  6EF6               	movwf	tblptrl,c
  2506  00365E  0E45               	movlw	high __pidataBANK2
  2507  003660  6EF7               	movwf	tblptrh,c
  2508  003662  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  2509  003664  6EF8               	movwf	tblptru,c
  2510  003666  EE02  F0D6         	lfsr	0,__pdataBANK2
  2511  00366A  EE10 F00C          	lfsr	1,12
  2512  00366E                     copy_data0:
  2513  00366E  0009               	tblrd		*+
  2514  003670  CFF5 FFEE          	movff	tablat,postinc0
  2515  003674  50E5               	movf	postdec1,w,c
  2516  003676  50E1               	movf	fsr1l,w,c
  2517  003678  E1FA               	bnz	copy_data0
  2518                           
  2519                           ; Initialize objects allocated to BANK1 (4 bytes)
  2520                           ; load TBLPTR registers with __pidataBANK1
  2521  00367A  0EA8               	movlw	low __pidataBANK1
  2522  00367C  6EF6               	movwf	tblptrl,c
  2523  00367E  0E45               	movlw	high __pidataBANK1
  2524  003680  6EF7               	movwf	tblptrh,c
  2525  003682  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  2526  003684  6EF8               	movwf	tblptru,c
  2527  003686  EE01  F0EF         	lfsr	0,__pdataBANK1
  2528  00368A  EE10 F004          	lfsr	1,4
  2529  00368E                     copy_data1:
  2530  00368E  0009               	tblrd		*+
  2531  003690  CFF5 FFEE          	movff	tablat,postinc0
  2532  003694  50E5               	movf	postdec1,w,c
  2533  003696  50E1               	movf	fsr1l,w,c
  2534  003698  E1FA               	bnz	copy_data1
  2535                           
  2536                           ; Initialize objects allocated to COMRAM (4 bytes)
  2537                           ; load TBLPTR registers with __pidataCOMRAM
  2538  00369A  0EA4               	movlw	low __pidataCOMRAM
  2539  00369C  6EF6               	movwf	tblptrl,c
  2540  00369E  0E45               	movlw	high __pidataCOMRAM
  2541  0036A0  6EF7               	movwf	tblptrh,c
  2542  0036A2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2543  0036A4  6EF8               	movwf	tblptru,c
  2544  0036A6  EE00  F042         	lfsr	0,__pdataCOMRAM
  2545  0036AA  EE10 F004          	lfsr	1,4
  2546  0036AE                     copy_data2:
  2547  0036AE  0009               	tblrd		*+
  2548  0036B0  CFF5 FFEE          	movff	tablat,postinc0
  2549  0036B4  50E5               	movf	postdec1,w,c
  2550  0036B6  50E1               	movf	fsr1l,w,c
  2551  0036B8  E1FA               	bnz	copy_data2
  2552                           
  2553                           ; Clear objects allocated to BANK2 (214 bytes)
  2554  0036BA  EE02  F000         	lfsr	0,__pbssBANK2
  2555  0036BE  0ED6               	movlw	214
  2556  0036C0                     clear_0:
  2557  0036C0  6AEE               	clrf	postinc0,c
  2558  0036C2  06E8               	decf	wreg,f,c
  2559  0036C4  E1FD               	bnz	clear_0
  2560                           
  2561                           ; Clear objects allocated to BANK1 (106 bytes)
  2562  0036C6  EE01  F085         	lfsr	0,__pbssBANK1
  2563  0036CA  0E6A               	movlw	106
  2564  0036CC                     clear_1:
  2565  0036CC  6AEE               	clrf	postinc0,c
  2566  0036CE  06E8               	decf	wreg,f,c
  2567  0036D0  E1FD               	bnz	clear_1
  2568                           
  2569                           ; Clear objects allocated to COMRAM (17 bytes)
  2570  0036D2  EE00  F031         	lfsr	0,__pbssCOMRAM
  2571  0036D6  0E11               	movlw	17
  2572  0036D8                     clear_2:
  2573  0036D8  6AEE               	clrf	postinc0,c
  2574  0036DA  06E8               	decf	wreg,f,c
  2575  0036DC  E1FD               	bnz	clear_2
  2576  0036DE                     end_of_initialization:
  2577                           	opt stack 0
  2578  0036DE                     __end_of__initialization:
  2579                           	opt stack 0
  2580  0036DE  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2581  0036E0  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2582  0036E2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2583  0036E4  6EF8               	movwf	tblptru,c
  2584  0036E6  0100               	movlb	0
  2585  0036E8  EFDD  F01D         	goto	_main	;jump to C main() function
  2586                           tblptru	equ	0xFF8
  2587                           tblptrh	equ	0xFF7
  2588                           tblptrl	equ	0xFF6
  2589                           tablat	equ	0xFF5
  2590                           postinc0	equ	0xFEE
  2591                           wreg	equ	0xFE8
  2592                           postdec1	equ	0xFE5
  2593                           fsr1l	equ	0xFE1
  2594                           
  2595                           	psect	bssCOMRAM
  2596  000031                     __pbssCOMRAM:
  2597                           	opt stack 0
  2598  000031                     _numOfValidateSamples:
  2599                           	opt stack 0
  2600  000031                     	ds	4
  2601  000035                     TMR0_ISR@CountCallBack:
  2602                           	opt stack 0
  2603  000035                     	ds	2
  2604  000037                     _channelNum:
  2605                           	opt stack 0
  2606  000037                     	ds	2
  2607  000039                     _eusart1RxTail:
  2608                           	opt stack 0
  2609  000039                     	ds	1
  2610  00003A                     _eusart1RxHead:
  2611                           	opt stack 0
  2612  00003A                     	ds	1
  2613  00003B                     _eusart1TxTail:
  2614                           	opt stack 0
  2615  00003B                     	ds	1
  2616  00003C                     _eusart1TxHead:
  2617                           	opt stack 0
  2618  00003C                     	ds	1
  2619  00003D                     _isReWriteDone:
  2620                           	opt stack 0
  2621  00003D                     	ds	1
  2622  00003E                     _numOfReadSamples:
  2623                           	opt stack 0
  2624  00003E                     	ds	4
  2625                           tblptru	equ	0xFF8
  2626                           tblptrh	equ	0xFF7
  2627                           tblptrl	equ	0xFF6
  2628                           tablat	equ	0xFF5
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           postdec1	equ	0xFE5
  2632                           fsr1l	equ	0xFE1
  2633                           
  2634                           	psect	dataCOMRAM
  2635  000042                     __pdataCOMRAM:
  2636                           	opt stack 0
  2637  000042                     _writeAddress:
  2638                           	opt stack 0
  2639  000042                     	ds	4
  2640                           tblptru	equ	0xFF8
  2641                           tblptrh	equ	0xFF7
  2642                           tblptrl	equ	0xFF6
  2643                           tablat	equ	0xFF5
  2644                           postinc0	equ	0xFEE
  2645                           wreg	equ	0xFE8
  2646                           postdec1	equ	0xFE5
  2647                           fsr1l	equ	0xFE1
  2648                           
  2649                           	psect	bssBANK1
  2650  000185                     __pbssBANK1:
  2651                           	opt stack 0
  2652  000185                     _txStatistics:
  2653                           	opt stack 0
  2654  000185                     	ds	30
  2655  0001A3                     _rxStatistics:
  2656                           	opt stack 0
  2657  0001A3                     	ds	29
  2658  0001C0                     _mcuRunTimeIn5SecTicks:
  2659                           	opt stack 0
  2660  0001C0                     	ds	4
  2661  0001C4                     _retNum:
  2662                           	opt stack 0
  2663  0001C4                     	ds	4
  2664  0001C8                     _txFreq:
  2665                           	opt stack 0
  2666  0001C8                     	ds	4
  2667  0001CC                     _rxFreq:
  2668                           	opt stack 0
  2669  0001CC                     	ds	4
  2670  0001D0                     _errno:
  2671                           	opt stack 0
  2672  0001D0                     	ds	2
  2673  0001D2                     _sampleCount:
  2674                           	opt stack 0
  2675  0001D2                     	ds	2
  2676  0001D4                     _numSamples:
  2677                           	opt stack 0
  2678  0001D4                     	ds	2
  2679  0001D6                     _count:
  2680                           	opt stack 0
  2681  0001D6                     	ds	2
  2682  0001D8                     _lastAdcVgMon:
  2683                           	opt stack 0
  2684  0001D8                     	ds	2
  2685  0001DA                     _lastAdcRREV:
  2686                           	opt stack 0
  2687  0001DA                     	ds	2
  2688  0001DC                     _lastAdcFfwrRSSI:
  2689                           	opt stack 0
  2690  0001DC                     	ds	2
  2691  0001DE                     _lastAdcTemp:
  2692                           	opt stack 0
  2693  0001DE                     	ds	2
  2694  0001E0                     _msgCount:
  2695                           	opt stack 0
  2696  0001E0                     	ds	1
  2697  0001E1                     _crcGiven:
  2698                           	opt stack 0
  2699  0001E1                     	ds	1
  2700  0001E2                     _crcCalc:
  2701                           	opt stack 0
  2702  0001E2                     	ds	1
  2703  0001E3                     _dataSize:
  2704                           	opt stack 0
  2705  0001E3                     	ds	1
  2706  0001E4                     _request:
  2707                           	opt stack 0
  2708  0001E4                     	ds	1
  2709  0001E5                     _group:
  2710                           	opt stack 0
  2711  0001E5                     	ds	1
  2712  0001E6                     _cState:
  2713                           	opt stack 0
  2714  0001E6                     	ds	1
  2715  0001E7                     _eusart1RxCount:
  2716                           	opt stack 0
  2717  0001E7                     	ds	1
  2718  0001E8                     _channel:
  2719                           	opt stack 0
  2720  0001E8                     	ds	1
  2721  0001E9                     _adcSampleMode:
  2722                           	opt stack 0
  2723  0001E9                     	ds	1
  2724  0001EA                     _needToSample:
  2725                           	opt stack 0
  2726  0001EA                     	ds	1
  2727  0001EB                     _TimertenSecFlag:
  2728                           	opt stack 0
  2729  0001EB                     	ds	1
  2730  0001EC                     _TimerKeepAliveFlag:
  2731                           	opt stack 0
  2732  0001EC                     	ds	1
  2733  0001ED                     _TimerSamplingFlag:
  2734                           	opt stack 0
  2735  0001ED                     	ds	1
  2736  0001EE                     _TimerOneSecFlag:
  2737                           	opt stack 0
  2738  0001EE                     	ds	1
  2739                           tblptru	equ	0xFF8
  2740                           tblptrh	equ	0xFF7
  2741                           tblptrl	equ	0xFF6
  2742                           tablat	equ	0xFF5
  2743                           postinc0	equ	0xFEE
  2744                           wreg	equ	0xFE8
  2745                           postdec1	equ	0xFE5
  2746                           fsr1l	equ	0xFE1
  2747                           
  2748                           	psect	dataBANK1
  2749  0001EF                     __pdataBANK1:
  2750                           	opt stack 0
  2751  0001EF                     _readAddress:
  2752                           	opt stack 0
  2753  0001EF                     	ds	4
  2754                           tblptru	equ	0xFF8
  2755                           tblptrh	equ	0xFF7
  2756                           tblptrl	equ	0xFF6
  2757                           tablat	equ	0xFF5
  2758                           postinc0	equ	0xFEE
  2759                           wreg	equ	0xFE8
  2760                           postdec1	equ	0xFE5
  2761                           fsr1l	equ	0xFE1
  2762                           
  2763                           	psect	bssBANK2
  2764  000200                     __pbssBANK2:
  2765                           	opt stack 0
  2766  000200                     _eusart1TxBuffer:
  2767                           	opt stack 0
  2768  000200                     	ds	70
  2769  000246                     _eusart1RxBuffer:
  2770                           	opt stack 0
  2771  000246                     	ds	40
  2772  00026E                     _sampleArray:
  2773                           	opt stack 0
  2774  00026E                     	ds	64
  2775  0002AE                     _rxMsgData:
  2776                           	opt stack 0
  2777  0002AE                     	ds	20
  2778  0002C2                     _rxMsgQueue:
  2779                           	opt stack 0
  2780  0002C2                     	ds	20
  2781                           tblptru	equ	0xFF8
  2782                           tblptrh	equ	0xFF7
  2783                           tblptrl	equ	0xFF6
  2784                           tablat	equ	0xFF5
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           postdec1	equ	0xFE5
  2788                           fsr1l	equ	0xFE1
  2789                           
  2790                           	psect	dataBANK2
  2791  0002D6                     __pdataBANK2:
  2792                           	opt stack 0
  2793  0002D6                     _groupsArray:
  2794                           	opt stack 0
  2795  0002D6                     	ds	12
  2796                           tblptru	equ	0xFF8
  2797                           tblptrh	equ	0xFF7
  2798                           tblptrl	equ	0xFF6
  2799                           tablat	equ	0xFF5
  2800                           postinc0	equ	0xFEE
  2801                           wreg	equ	0xFE8
  2802                           postdec1	equ	0xFE5
  2803                           fsr1l	equ	0xFE1
  2804                           
  2805                           	psect	cstackBANK1
  2806  000100                     __pcstackBANK1:
  2807                           	opt stack 0
  2808  000100                     SampleSingleChannel@dest:
  2809                           	opt stack 0
  2810  000100                     SendUartSystemInitMessage@dest:
  2811                           	opt stack 0
  2812  000100                     PrintHelpScreen@dest:
  2813                           	opt stack 0
  2814  000100                     PrintRxStatus@dest:
  2815                           	opt stack 0
  2816  000100                     PrintTxStatus@dest:
  2817                           	opt stack 0
  2818                           
  2819                           ; 80 bytes @ 0x0
  2820  000100                     	ds	50
  2821  000132                     _SampleSingleChannel$3938:
  2822                           	opt stack 0
  2823                           
  2824                           ; 3 bytes @ 0x32
  2825  000132                     	ds	3
  2826  000135                     SampleSingleChannel@_adcResult:
  2827                           	opt stack 0
  2828                           
  2829                           ; 2 bytes @ 0x35
  2830  000135                     	ds	2
  2831  000137                     SampleSingleChannel@adcRes:
  2832                           	opt stack 0
  2833                           
  2834                           ; 2 bytes @ 0x37
  2835  000137                     	ds	25
  2836  000150                     readUartByte@dest:
  2837                           	opt stack 0
  2838                           
  2839                           ; 50 bytes @ 0x50
  2840  000150                     	ds	50
  2841  000182                     readUartByte@idx:
  2842                           	opt stack 0
  2843                           
  2844                           ; 2 bytes @ 0x82
  2845  000182                     	ds	2
  2846  000184                     readUartByte@chRec:
  2847                           	opt stack 0
  2848                           
  2849                           ; 1 bytes @ 0x84
  2850  000184                     	ds	1
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           postdec1	equ	0xFE5
  2858                           fsr1l	equ	0xFE1
  2859                           
  2860                           	psect	cstackBANK0
  2861  000060                     __pcstackBANK0:
  2862                           	opt stack 0
  2863  000060                     ___ftdiv@cntr:
  2864                           	opt stack 0
  2865  000060                     strtol@sign:
  2866                           	opt stack 0
  2867  000060                     SWSPI_Synth_send_bits@bitArray:
  2868                           	opt stack 0
  2869                           
  2870                           ; 32 bytes @ 0x0
  2871  000060                     	ds	1
  2872  000061                     ___ftdiv@f3:
  2873                           	opt stack 0
  2874  000061                     strtol@a:
  2875                           	opt stack 0
  2876                           
  2877                           ; 4 bytes @ 0x1
  2878  000061                     	ds	3
  2879  000064                     ___ftdiv@exp:
  2880                           	opt stack 0
  2881                           
  2882                           ; 1 bytes @ 0x4
  2883  000064                     	ds	1
  2884  000065                     ___ftdiv@sign:
  2885                           	opt stack 0
  2886  000065                     strtol@c:
  2887                           	opt stack 0
  2888                           
  2889                           ; 1 bytes @ 0x5
  2890  000065                     	ds	1
  2891  000066                     ?___ftmul:
  2892                           	opt stack 0
  2893  000066                     ?_GetIntFromUartData:
  2894                           	opt stack 0
  2895  000066                     GetIntFromUartData@data:
  2896                           	opt stack 0
  2897  000066                     ___ftmul@f1:
  2898                           	opt stack 0
  2899                           
  2900                           ; 3 bytes @ 0x6
  2901  000066                     	ds	3
  2902  000069                     ___ftmul@f2:
  2903                           	opt stack 0
  2904                           
  2905                           ; 3 bytes @ 0x9
  2906  000069                     	ds	1
  2907  00006A                     ??_GetIntFromUartData:
  2908                           
  2909                           ; 1 bytes @ 0xA
  2910  00006A                     	ds	2
  2911  00006C                     ___ftmul@exp:
  2912                           	opt stack 0
  2913  00006C                     GetIntFromUartData@dataRegArr:
  2914                           	opt stack 0
  2915                           
  2916                           ; 8 bytes @ 0xC
  2917  00006C                     	ds	1
  2918  00006D                     ___ftmul@f3_as_product:
  2919                           	opt stack 0
  2920                           
  2921                           ; 3 bytes @ 0xD
  2922  00006D                     	ds	3
  2923  000070                     ___ftmul@cntr:
  2924                           	opt stack 0
  2925                           
  2926                           ; 1 bytes @ 0x10
  2927  000070                     	ds	1
  2928  000071                     ___ftmul@sign:
  2929                           	opt stack 0
  2930                           
  2931                           ; 1 bytes @ 0x11
  2932  000071                     	ds	1
  2933  000072                     ?_fround:
  2934                           	opt stack 0
  2935  000072                     ?_scale:
  2936                           	opt stack 0
  2937                           
  2938                           ; 3 bytes @ 0x12
  2939  000072                     	ds	2
  2940  000074                     GetIntFromUartData@c:
  2941                           	opt stack 0
  2942                           
  2943                           ; 1 bytes @ 0x14
  2944  000074                     	ds	1
  2945  000075                     GetIntFromUartData@idx:
  2946                           	opt stack 0
  2947  000075                     _fround$3953:
  2948                           	opt stack 0
  2949  000075                     _scale$3954:
  2950                           	opt stack 0
  2951                           
  2952                           ; 3 bytes @ 0x15
  2953  000075                     	ds	3
  2954  000078                     scale@scl:
  2955                           	opt stack 0
  2956  000078                     _fround$3952:
  2957                           	opt stack 0
  2958                           
  2959                           ; 3 bytes @ 0x18
  2960  000078                     	ds	1
  2961  000079                     ?___fttol:
  2962                           	opt stack 0
  2963  000079                     ___fttol@f1:
  2964                           	opt stack 0
  2965                           
  2966                           ; 3 bytes @ 0x19
  2967  000079                     	ds	2
  2968  00007B                     fround@prec:
  2969                           	opt stack 0
  2970                           
  2971                           ; 1 bytes @ 0x1B
  2972  00007B                     	ds	1
  2973  00007C                     ?___ftadd:
  2974                           	opt stack 0
  2975  00007C                     ___ftadd@f1:
  2976                           	opt stack 0
  2977                           
  2978                           ; 3 bytes @ 0x1C
  2979  00007C                     	ds	1
  2980  00007D                     ??___fttol:
  2981                           
  2982                           ; 1 bytes @ 0x1D
  2983  00007D                     	ds	2
  2984  00007F                     ___ftadd@f2:
  2985                           	opt stack 0
  2986                           
  2987                           ; 3 bytes @ 0x1F
  2988  00007F                     	ds	1
  2989  000080                     SWSPI_Synth_send_bits@mask:
  2990                           	opt stack 0
  2991                           
  2992                           ; 4 bytes @ 0x20
  2993  000080                     	ds	2
  2994  000082                     ??___ftadd:
  2995  000082                     ___fttol@sign1:
  2996                           	opt stack 0
  2997                           
  2998                           ; 1 bytes @ 0x22
  2999  000082                     	ds	1
  3000  000083                     ___fttol@lval:
  3001                           	opt stack 0
  3002                           
  3003                           ; 4 bytes @ 0x23
  3004  000083                     	ds	1
  3005  000084                     SWSPI_Synth_send_bits@count:
  3006                           	opt stack 0
  3007                           
  3008                           ; 1 bytes @ 0x24
  3009  000084                     	ds	1
  3010  000085                     SWSPI_Synth_send_bits@phrType:
  3011                           	opt stack 0
  3012  000085                     ___ftadd@sign:
  3013                           	opt stack 0
  3014                           
  3015                           ; 1 bytes @ 0x25
  3016  000085                     	ds	1
  3017  000086                     ??_PLLInitialize:
  3018  000086                     ___ftadd@exp2:
  3019                           	opt stack 0
  3020                           
  3021                           ; 1 bytes @ 0x26
  3022  000086                     	ds	1
  3023  000087                     ___ftadd@exp1:
  3024                           	opt stack 0
  3025  000087                     ___fttol@exp1:
  3026                           	opt stack 0
  3027                           
  3028                           ; 1 bytes @ 0x27
  3029  000087                     	ds	1
  3030  000088                     ?___ftsub:
  3031                           	opt stack 0
  3032  000088                     ?_eval_poly:
  3033                           	opt stack 0
  3034  000088                     ?___altoft:
  3035                           	opt stack 0
  3036  000088                     PLLInitialize@idx:
  3037                           	opt stack 0
  3038  000088                     ___ftsub@f1:
  3039                           	opt stack 0
  3040  000088                     eval_poly@x:
  3041                           	opt stack 0
  3042  000088                     ___altoft@c:
  3043                           	opt stack 0
  3044                           
  3045                           ; 4 bytes @ 0x28
  3046  000088                     	ds	2
  3047  00008A                     PLLInitialize@idx_945:
  3048                           	opt stack 0
  3049                           
  3050                           ; 2 bytes @ 0x2A
  3051  00008A                     	ds	1
  3052  00008B                     eval_poly@d:
  3053                           	opt stack 0
  3054  00008B                     ___ftsub@f2:
  3055                           	opt stack 0
  3056                           
  3057                           ; 3 bytes @ 0x2B
  3058  00008B                     	ds	1
  3059  00008C                     ??___altoft:
  3060                           
  3061                           ; 1 bytes @ 0x2C
  3062  00008C                     	ds	1
  3063  00008D                     eval_poly@n:
  3064                           	opt stack 0
  3065                           
  3066                           ; 2 bytes @ 0x2D
  3067  00008D                     	ds	2
  3068  00008F                     eval_poly@res:
  3069                           	opt stack 0
  3070                           
  3071                           ; 3 bytes @ 0x2F
  3072  00008F                     	ds	1
  3073  000090                     ?_floor:
  3074                           	opt stack 0
  3075  000090                     floor@x:
  3076                           	opt stack 0
  3077                           
  3078                           ; 3 bytes @ 0x30
  3079  000090                     	ds	2
  3080  000092                     ?_log:
  3081                           	opt stack 0
  3082  000092                     ?_ldexp:
  3083                           	opt stack 0
  3084  000092                     ldexp@value:
  3085                           	opt stack 0
  3086  000092                     log@x:
  3087                           	opt stack 0
  3088                           
  3089                           ; 3 bytes @ 0x32
  3090  000092                     	ds	1
  3091  000093                     floor@i:
  3092                           	opt stack 0
  3093                           
  3094                           ; 3 bytes @ 0x33
  3095  000093                     	ds	2
  3096  000095                     ldexp@newexp:
  3097                           	opt stack 0
  3098  000095                     log@exponent:
  3099                           	opt stack 0
  3100                           
  3101                           ; 2 bytes @ 0x35
  3102  000095                     	ds	1
  3103  000096                     floor@expon:
  3104                           	opt stack 0
  3105                           
  3106                           ; 2 bytes @ 0x36
  3107  000096                     	ds	1
  3108  000097                     ??_ldexp:
  3109                           
  3110                           ; 1 bytes @ 0x37
  3111  000097                     	ds	2
  3112  000099                     ?_exp:
  3113                           	opt stack 0
  3114  000099                     exp@x:
  3115                           	opt stack 0
  3116                           
  3117                           ; 3 bytes @ 0x39
  3118  000099                     	ds	3
  3119  00009C                     _exp$3958:
  3120                           	opt stack 0
  3121                           
  3122                           ; 3 bytes @ 0x3C
  3123  00009C                     	ds	3
  3124  00009F                     exp@exponent:
  3125                           	opt stack 0
  3126                           
  3127                           ; 2 bytes @ 0x3F
  3128  00009F                     	ds	2
  3129  0000A1                     exp@sign:
  3130                           	opt stack 0
  3131                           
  3132                           ; 1 bytes @ 0x41
  3133  0000A1                     	ds	1
  3134  0000A2                     ?_pow:
  3135                           	opt stack 0
  3136  0000A2                     pow@x:
  3137                           	opt stack 0
  3138                           
  3139                           ; 3 bytes @ 0x42
  3140  0000A2                     	ds	3
  3141  0000A5                     pow@y:
  3142                           	opt stack 0
  3143                           
  3144                           ; 3 bytes @ 0x45
  3145  0000A5                     	ds	3
  3146  0000A8                     _pow$3956:
  3147                           	opt stack 0
  3148                           
  3149                           ; 3 bytes @ 0x48
  3150  0000A8                     	ds	3
  3151  0000AB                     _pow$3957:
  3152                           	opt stack 0
  3153                           
  3154                           ; 3 bytes @ 0x4B
  3155  0000AB                     	ds	3
  3156  0000AE                     pow@sign:
  3157                           	opt stack 0
  3158                           
  3159                           ; 1 bytes @ 0x4E
  3160  0000AE                     	ds	1
  3161  0000AF                     pow@yi:
  3162                           	opt stack 0
  3163                           
  3164                           ; 4 bytes @ 0x4F
  3165  0000AF                     	ds	4
  3166  0000B3                     ?_ReadIntFromEeprom:
  3167                           	opt stack 0
  3168  0000B3                     ?___llmod:
  3169                           	opt stack 0
  3170  0000B3                     ReadIntFromEeprom@numOfByes:
  3171                           	opt stack 0
  3172  0000B3                     _SampleAllChannels$3939:
  3173                           	opt stack 0
  3174  0000B3                     ___llmod@dividend:
  3175                           	opt stack 0
  3176                           
  3177                           ; 4 bytes @ 0x53
  3178  0000B3                     	ds	3
  3179  0000B6                     SampleAllChannels@_adcResult:
  3180                           	opt stack 0
  3181                           
  3182                           ; 2 bytes @ 0x56
  3183  0000B6                     	ds	1
  3184  0000B7                     ??_ReadIntFromEeprom:
  3185  0000B7                     ___llmod@divisor:
  3186                           	opt stack 0
  3187                           
  3188                           ; 4 bytes @ 0x57
  3189  0000B7                     	ds	1
  3190  0000B8                     SampleAllChannels@adcRes:
  3191                           	opt stack 0
  3192                           
  3193                           ; 2 bytes @ 0x58
  3194  0000B8                     	ds	2
  3195  0000BA                     SampleAllChannels@i:
  3196                           	opt stack 0
  3197  0000BA                     ReadIntFromEeprom@base:
  3198                           	opt stack 0
  3199                           
  3200                           ; 4 bytes @ 0x5A
  3201  0000BA                     	ds	1
  3202  0000BB                     ___llmod@counter:
  3203                           	opt stack 0
  3204                           
  3205                           ; 1 bytes @ 0x5B
  3206  0000BB                     	ds	1
  3207  0000BC                     ?_sprintf:
  3208                           	opt stack 0
  3209  0000BC                     sprintf@sp:
  3210                           	opt stack 0
  3211                           
  3212                           ; 2 bytes @ 0x5C
  3213  0000BC                     	ds	2
  3214  0000BE                     sprintf@f:
  3215                           	opt stack 0
  3216  0000BE                     _ReadIntFromEeprom$3950:
  3217                           	opt stack 0
  3218                           
  3219                           ; 3 bytes @ 0x5E
  3220  0000BE                     	ds	3
  3221  0000C1                     _ReadIntFromEeprom$3951:
  3222                           	opt stack 0
  3223                           
  3224                           ; 3 bytes @ 0x61
  3225  0000C1                     	ds	2
  3226  0000C3                     ??_sprintf:
  3227                           
  3228                           ; 1 bytes @ 0x63
  3229  0000C3                     	ds	1
  3230  0000C4                     ReadIntFromEeprom@address:
  3231                           	opt stack 0
  3232                           
  3233                           ; 1 bytes @ 0x64
  3234  0000C4                     	ds	1
  3235  0000C5                     ReadIntFromEeprom@retVal:
  3236                           	opt stack 0
  3237                           
  3238                           ; 4 bytes @ 0x65
  3239  0000C5                     	ds	4
  3240  0000C9                     ReadIntFromEeprom@idx:
  3241                           	opt stack 0
  3242  0000C9                     _sprintf$3955:
  3243                           	opt stack 0
  3244                           
  3245                           ; 3 bytes @ 0x69
  3246  0000C9                     	ds	1
  3247  0000CA                     ??_DacInit:
  3248                           
  3249                           ; 1 bytes @ 0x6A
  3250  0000CA                     	ds	2
  3251  0000CC                     DacInit@dacInput:
  3252                           	opt stack 0
  3253  0000CC                     sprintf@cp:
  3254                           	opt stack 0
  3255                           
  3256                           ; 2 bytes @ 0x6C
  3257  0000CC                     	ds	2
  3258  0000CE                     DacInit@idx:
  3259                           	opt stack 0
  3260  0000CE                     sprintf@ap:
  3261                           	opt stack 0
  3262                           
  3263                           ; 2 bytes @ 0x6E
  3264  0000CE                     	ds	2
  3265  0000D0                     sprintf@flag:
  3266                           	opt stack 0
  3267                           
  3268                           ; 2 bytes @ 0x70
  3269  0000D0                     	ds	2
  3270  0000D2                     sprintf@prec:
  3271                           	opt stack 0
  3272                           
  3273                           ; 2 bytes @ 0x72
  3274  0000D2                     	ds	2
  3275  0000D4                     sprintf@val:
  3276                           	opt stack 0
  3277                           
  3278                           ; 4 bytes @ 0x74
  3279  0000D4                     	ds	4
  3280  0000D8                     sprintf@exp:
  3281                           	opt stack 0
  3282                           
  3283                           ; 2 bytes @ 0x78
  3284  0000D8                     	ds	2
  3285  0000DA                     sprintf@tmpval:
  3286                           	opt stack 0
  3287                           
  3288                           ; 4 bytes @ 0x7A
  3289  0000DA                     	ds	4
  3290  0000DE                     sprintf@fval:
  3291                           	opt stack 0
  3292                           
  3293                           ; 3 bytes @ 0x7E
  3294  0000DE                     	ds	3
  3295  0000E1                     sprintf@c:
  3296                           	opt stack 0
  3297                           
  3298                           ; 1 bytes @ 0x81
  3299  0000E1                     	ds	1
  3300  0000E2                     ??_SampleSingleChannel:
  3301  0000E2                     GroupRx@data:
  3302                           	opt stack 0
  3303  0000E2                     GroupTx@data:
  3304                           	opt stack 0
  3305  0000E2                     GroupCommon@data:
  3306                           	opt stack 0
  3307                           
  3308                           ; 2 bytes @ 0x82
  3309  0000E2                     	ds	2
  3310  0000E4                     ??_GroupRx:
  3311  0000E4                     ??_GroupTx:
  3312  0000E4                     GroupCommon@request:
  3313                           	opt stack 0
  3314                           
  3315                           ; 1 bytes @ 0x84
  3316  0000E4                     	ds	1
  3317  0000E5                     _GroupRx$3946:
  3318                           	opt stack 0
  3319  0000E5                     _GroupTx$3948:
  3320                           	opt stack 0
  3321                           
  3322                           ; 3 bytes @ 0x85
  3323  0000E5                     	ds	3
  3324  0000E8                     _GroupRx$3947:
  3325                           	opt stack 0
  3326  0000E8                     _GroupTx$3949:
  3327                           	opt stack 0
  3328                           
  3329                           ; 3 bytes @ 0x88
  3330  0000E8                     	ds	3
  3331  0000EB                     GroupRx@request:
  3332                           	opt stack 0
  3333  0000EB                     GroupTx@request:
  3334                           	opt stack 0
  3335                           
  3336                           ; 1 bytes @ 0x8B
  3337  0000EB                     	ds	1
  3338  0000EC                     ??_readUartByte:
  3339                           
  3340                           ; 1 bytes @ 0x8C
  3341  0000EC                     	ds	3
  3342                           tblptru	equ	0xFF8
  3343                           tblptrh	equ	0xFF7
  3344                           tblptrl	equ	0xFF6
  3345                           tablat	equ	0xFF5
  3346                           postinc0	equ	0xFEE
  3347                           wreg	equ	0xFE8
  3348                           postdec1	equ	0xFE5
  3349                           fsr1l	equ	0xFE1
  3350                           
  3351                           	psect	cstackCOMRAM
  3352  000001                     __pcstackCOMRAM:
  3353                           	opt stack 0
  3354  000001                     ?___lwmod:
  3355                           	opt stack 0
  3356  000001                     ___lwmod@dividend:
  3357                           	opt stack 0
  3358                           
  3359                           ; 2 bytes @ 0x0
  3360  000001                     	ds	2
  3361  000003                     ___lwmod@divisor:
  3362                           	opt stack 0
  3363                           
  3364                           ; 2 bytes @ 0x2
  3365  000003                     	ds	2
  3366  000005                     ___lwmod@counter:
  3367                           	opt stack 0
  3368                           
  3369                           ; 1 bytes @ 0x4
  3370  000005                     	ds	1
  3371  000006                     ??_INTERRUPT_InterruptManager:
  3372                           
  3373                           ; 1 bytes @ 0x5
  3374  000006                     	ds	18
  3375  000018                     ??_EUSART1_Read:
  3376  000018                     ??_isspace:
  3377  000018                     ??_isdigit:
  3378  000018                     ??_isupper:
  3379  000018                     ??_BlinkOkLeds:
  3380  000018                     ??_keepAliveSignalLed:
  3381  000018                     ??_testLeds:
  3382  000018                     ?_ADC_GetConversion:
  3383                           	opt stack 0
  3384  000018                     ?___awmod:
  3385                           	opt stack 0
  3386  000018                     ?___ftpack:
  3387                           	opt stack 0
  3388  000018                     ?_frexp:
  3389                           	opt stack 0
  3390  000018                     ?___ftneg:
  3391                           	opt stack 0
  3392  000018                     ?__tdiv_to_l_:
  3393                           	opt stack 0
  3394  000018                     ?__div_to_l_:
  3395                           	opt stack 0
  3396  000018                     ?___lldiv:
  3397                           	opt stack 0
  3398  000018                     SwSpi_Data_Pin@cPinMode:
  3399                           	opt stack 0
  3400  000018                     SwSpi_Clk_Pin@cPinMode:
  3401                           	opt stack 0
  3402  000018                     SwSpi_Set_CE_Pin@cPinMode:
  3403                           	opt stack 0
  3404  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  3405                           	opt stack 0
  3406  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  3407                           	opt stack 0
  3408  000018                     EUSART1_Write@txData:
  3409                           	opt stack 0
  3410  000018                     DATAEE_WriteByte@bData:
  3411                           	opt stack 0
  3412  000018                     DATAEE_ReadByte@bAdd:
  3413                           	opt stack 0
  3414  000018                     toupper@c:
  3415                           	opt stack 0
  3416  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  3417                           	opt stack 0
  3418  000018                     Make32bitsArray@array:
  3419                           	opt stack 0
  3420  000018                     ___awmod@dividend:
  3421                           	opt stack 0
  3422  000018                     memset@p1:
  3423                           	opt stack 0
  3424  000018                     __div_to_l_@f1:
  3425                           	opt stack 0
  3426  000018                     ___ftpack@arg:
  3427                           	opt stack 0
  3428  000018                     __tdiv_to_l_@f1:
  3429                           	opt stack 0
  3430  000018                     ___ftge@ff1:
  3431                           	opt stack 0
  3432  000018                     ___ftneg@f1:
  3433                           	opt stack 0
  3434  000018                     frexp@value:
  3435                           	opt stack 0
  3436  000018                     make8@data:
  3437                           	opt stack 0
  3438  000018                     ___lldiv@dividend:
  3439                           	opt stack 0
  3440                           
  3441                           ; 4 bytes @ 0x17
  3442  000018                     	ds	1
  3443  000019                     EepromRead@address:
  3444                           	opt stack 0
  3445  000019                     SwSpi_Data_Pin@phrType:
  3446                           	opt stack 0
  3447  000019                     SwSpi_Clk_Pin@phrType:
  3448                           	opt stack 0
  3449  000019                     SwSpi_Set_CE_Pin@phrType:
  3450                           	opt stack 0
  3451  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  3452                           	opt stack 0
  3453  000019                     DATAEE_WriteByte@bAdd:
  3454                           	opt stack 0
  3455  000019                     _isdigit$3616:
  3456                           	opt stack 0
  3457  000019                     _isspace$3619:
  3458                           	opt stack 0
  3459  000019                     _isupper$3622:
  3460                           	opt stack 0
  3461  000019                     testLeds@idx:
  3462                           	opt stack 0
  3463  000019                     UART_Write_Text@text:
  3464                           	opt stack 0
  3465  000019                     EUSART1_Read@readValue:
  3466                           	opt stack 0
  3467                           
  3468                           ; 2 bytes @ 0x18
  3469  000019                     	ds	1
  3470  00001A                     ??_ADC_GetConversion:
  3471  00001A                     ??_TMR0_Initialize:
  3472  00001A                     ?___lmul:
  3473                           	opt stack 0
  3474  00001A                     SWSPI_DAC_send_bits@data:
  3475                           	opt stack 0
  3476  00001A                     DATAEE_WriteByte@GIEBitValue:
  3477                           	opt stack 0
  3478  00001A                     isdigit@c:
  3479                           	opt stack 0
  3480  00001A                     isspace@c:
  3481                           	opt stack 0
  3482  00001A                     isupper@c:
  3483                           	opt stack 0
  3484  00001A                     ___awmod@divisor:
  3485                           	opt stack 0
  3486  00001A                     memset@c:
  3487                           	opt stack 0
  3488  00001A                     Make32bitsArray@data:
  3489                           	opt stack 0
  3490  00001A                     ___lmul@multiplier:
  3491                           	opt stack 0
  3492                           
  3493                           ; 4 bytes @ 0x19
  3494  00001A                     	ds	1
  3495  00001B                     ??_UART_Write_Text:
  3496  00001B                     ??_isalpha:
  3497  00001B                     BlinkOkLeds@state:
  3498                           	opt stack 0
  3499  00001B                     EepromWrite@data:
  3500                           	opt stack 0
  3501  00001B                     SWSPI_DAC_send_bits@count:
  3502                           	opt stack 0
  3503  00001B                     ___ftpack@exp:
  3504                           	opt stack 0
  3505  00001B                     frexp@eptr:
  3506                           	opt stack 0
  3507  00001B                     __div_to_l_@f2:
  3508                           	opt stack 0
  3509  00001B                     __tdiv_to_l_@f2:
  3510                           	opt stack 0
  3511  00001B                     ___ftge@ff2:
  3512                           	opt stack 0
  3513                           
  3514                           ; 3 bytes @ 0x1A
  3515  00001B                     	ds	1
  3516  00001C                     EepromWrite@address:
  3517                           	opt stack 0
  3518  00001C                     SWSPI_DAC_send_bits@phrType:
  3519                           	opt stack 0
  3520  00001C                     ADC_GetConversion@channel:
  3521                           	opt stack 0
  3522  00001C                     make8@dataLocation:
  3523                           	opt stack 0
  3524  00001C                     ___awmod@counter:
  3525                           	opt stack 0
  3526  00001C                     ___ftpack@sign:
  3527                           	opt stack 0
  3528  00001C                     _isalpha$3613:
  3529                           	opt stack 0
  3530  00001C                     BlinkOkLeds@idx:
  3531                           	opt stack 0
  3532  00001C                     memset@n:
  3533                           	opt stack 0
  3534  00001C                     ___lldiv@divisor:
  3535                           	opt stack 0
  3536                           
  3537                           ; 4 bytes @ 0x1B
  3538  00001C                     	ds	1
  3539  00001D                     ??_make8:
  3540  00001D                     ??___ftpack:
  3541  00001D                     ??_frexp:
  3542  00001D                     ___awmod@sign:
  3543                           	opt stack 0
  3544  00001D                     isalpha@c:
  3545                           	opt stack 0
  3546  00001D                     UART_Write_Text@i:
  3547                           	opt stack 0
  3548                           
  3549                           ; 2 bytes @ 0x1C
  3550  00001D                     	ds	1
  3551  00001E                     ??_Make32bitsArray:
  3552  00001E                     ??__tdiv_to_l_:
  3553  00001E                     ??___ftge:
  3554  00001E                     ?___awdiv:
  3555                           	opt stack 0
  3556  00001E                     ___awdiv@dividend:
  3557                           	opt stack 0
  3558  00001E                     memset@p:
  3559                           	opt stack 0
  3560  00001E                     ___lmul@multiplicand:
  3561                           	opt stack 0
  3562  00001E                     __div_to_l_@quot:
  3563                           	opt stack 0
  3564                           
  3565                           ; 4 bytes @ 0x1D
  3566  00001E                     	ds	1
  3567  00001F                     AdcSingleSample@chType:
  3568                           	opt stack 0
  3569                           
  3570                           ; 1 bytes @ 0x1E
  3571  00001F                     	ds	1
  3572  000020                     ?___awtoft:
  3573                           	opt stack 0
  3574  000020                     ?___lltoft:
  3575                           	opt stack 0
  3576  000020                     ?___lwtoft:
  3577                           	opt stack 0
  3578  000020                     Make32bitsArray@idx:
  3579                           	opt stack 0
  3580  000020                     ZeroArray@array:
  3581                           	opt stack 0
  3582  000020                     ___awdiv@divisor:
  3583                           	opt stack 0
  3584  000020                     ___awtoft@c:
  3585                           	opt stack 0
  3586  000020                     ___lwtoft@c:
  3587                           	opt stack 0
  3588  000020                     AdcSingleSample@numSamples:
  3589                           	opt stack 0
  3590  000020                     ___lldiv@quotient:
  3591                           	opt stack 0
  3592  000020                     ___lltoft@c:
  3593                           	opt stack 0
  3594                           
  3595                           ; 4 bytes @ 0x1F
  3596  000020                     	ds	1
  3597  000021                     StoreIntInEeprom@data:
  3598                           	opt stack 0
  3599  000021                     __tdiv_to_l_@quot:
  3600                           	opt stack 0
  3601                           
  3602                           ; 4 bytes @ 0x20
  3603  000021                     	ds	1
  3604  000022                     ___awdiv@counter:
  3605                           	opt stack 0
  3606  000022                     __div_to_l_@cntr:
  3607                           	opt stack 0
  3608  000022                     ZeroArray@size:
  3609                           	opt stack 0
  3610  000022                     ___lmul@product:
  3611                           	opt stack 0
  3612                           
  3613                           ; 4 bytes @ 0x21
  3614  000022                     	ds	1
  3615  000023                     ?___ftdiv:
  3616                           	opt stack 0
  3617  000023                     ___awdiv@sign:
  3618                           	opt stack 0
  3619  000023                     ___awtoft@sign:
  3620                           	opt stack 0
  3621  000023                     __div_to_l_@exp1:
  3622                           	opt stack 0
  3623  000023                     ___ftdiv@f1:
  3624                           	opt stack 0
  3625                           
  3626                           ; 3 bytes @ 0x22
  3627  000023                     	ds	1
  3628  000024                     ??___lltoft:
  3629  000024                     ___lldiv@counter:
  3630                           	opt stack 0
  3631  000024                     ___awdiv@quotient:
  3632                           	opt stack 0
  3633  000024                     AdcSingleSample@retNum:
  3634                           	opt stack 0
  3635  000024                     SWSPI_Synth_send_bits@data:
  3636                           	opt stack 0
  3637                           
  3638                           ; 4 bytes @ 0x23
  3639  000024                     	ds	1
  3640  000025                     StoreIntInEeprom@address:
  3641                           	opt stack 0
  3642  000025                     __tdiv_to_l_@cntr:
  3643                           	opt stack 0
  3644                           
  3645                           ; 1 bytes @ 0x24
  3646  000025                     	ds	1
  3647  000026                     ?___wmul:
  3648                           	opt stack 0
  3649  000026                     ?_strtol:
  3650                           	opt stack 0
  3651  000026                     __tdiv_to_l_@exp1:
  3652                           	opt stack 0
  3653  000026                     StoreIntInEeprom@numOfByes:
  3654                           	opt stack 0
  3655  000026                     ___wmul@multiplier:
  3656                           	opt stack 0
  3657  000026                     strtol@s:
  3658                           	opt stack 0
  3659  000026                     ___ftdiv@f2:
  3660                           	opt stack 0
  3661                           
  3662                           ; 3 bytes @ 0x25
  3663  000026                     	ds	2
  3664  000028                     AdcSingleSample@cType:
  3665                           	opt stack 0
  3666  000028                     StoreIntInEeprom@val:
  3667                           	opt stack 0
  3668  000028                     ___lltoft@exp:
  3669                           	opt stack 0
  3670  000028                     ___wmul@multiplicand:
  3671                           	opt stack 0
  3672  000028                     strtol@endptr:
  3673                           	opt stack 0
  3674  000028                     SWSPI_send_word@data:
  3675                           	opt stack 0
  3676                           
  3677                           ; 4 bytes @ 0x27
  3678  000028                     	ds	1
  3679  000029                     ??___ftdiv:
  3680  000029                     StoreIntInEeprom@idx:
  3681                           	opt stack 0
  3682                           
  3683                           ; 1 bytes @ 0x28
  3684  000029                     	ds	1
  3685  00002A                     ___wmul@product:
  3686                           	opt stack 0
  3687  00002A                     strtol@base:
  3688                           	opt stack 0
  3689                           
  3690                           ; 2 bytes @ 0x29
  3691  00002A                     	ds	2
  3692  00002C                     ??_strtol:
  3693  00002C                     ??___ftmul:
  3694  00002C                     SWSPI_send_word@dataSize:
  3695                           	opt stack 0
  3696                           
  3697                           ; 1 bytes @ 0x2B
  3698  00002C                     	ds	1
  3699  00002D                     SWSPI_send_word@datac:
  3700                           	opt stack 0
  3701                           
  3702                           ; 1 bytes @ 0x2C
  3703  00002D                     	ds	1
  3704  00002E                     SWSPI_send_word@idx:
  3705                           	opt stack 0
  3706                           
  3707                           ; 2 bytes @ 0x2D
  3708  00002E                     	ds	1
  3709  00002F                     ??_eval_poly:
  3710  00002F                     ___altoft@exp:
  3711                           	opt stack 0
  3712                           
  3713                           ; 1 bytes @ 0x2E
  3714  00002F                     	ds	1
  3715  000030                     SWSPI_send_word@phrType:
  3716                           	opt stack 0
  3717  000030                     ___altoft@sign:
  3718                           	opt stack 0
  3719                           
  3720                           ; 1 bytes @ 0x2F
  3721  000030                     	ds	1
  3722  000031                     tblptru	equ	0xFF8
  3723                           tblptrh	equ	0xFF7
  3724                           tblptrl	equ	0xFF6
  3725                           tablat	equ	0xFF5
  3726                           postinc0	equ	0xFEE
  3727                           wreg	equ	0xFE8
  3728                           postdec1	equ	0xFE5
  3729                           fsr1l	equ	0xFE1
  3730                           
  3731                           ; 1 bytes @ 0x30
  3732 ;;
  3733 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3734 ;;
  3735 ;; *************** function _main *****************
  3736 ;; Defined at:
  3737 ;;		line 13 in file "main.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;		None
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;		None
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  1    wreg      void 
  3744 ;; Registers used:
  3745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3751 ;;      Params:         0       0       0       0       0       0       0
  3752 ;;      Locals:         0       0       0       0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0
  3754 ;;      Totals:         0       0       0       0       0       0       0
  3755 ;;Total ram usage:        0 bytes
  3756 ;; Hardware stack levels required when called:   11
  3757 ;; This function calls:
  3758 ;;		_BlinkOkLeds
  3759 ;;		_InitSystemApplicationManagers
  3760 ;;		_SampleAllChannels
  3761 ;;		_SampleSingleChannel
  3762 ;;		_SendUartSystemInitMessage
  3763 ;;		_SetMcuRunTime
  3764 ;;		_SetMcuSystem
  3765 ;;		_keepAliveSignalLed
  3766 ;;		_readUartByte
  3767 ;; This function is called by:
  3768 ;;		Startup code after reset
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text0
  3773  003BBA                     __ptext0:
  3774                           	opt stack 0
  3775  003BBA                     _main:
  3776                           	opt stack 20
  3777                           
  3778                           ;main.c: 16: SetMcuSystem();
  3779                           
  3780                           ;incstack = 0
  3781  003BBA  ECBF  F022         	call	_SetMcuSystem	;wreg free
  3782                           
  3783                           ;main.c: 19: InitSystemApplicationManagers();
  3784  003BBE  EC82  F022         	call	_InitSystemApplicationManagers	;wreg free
  3785                           
  3786                           ;main.c: 22: SendUartSystemInitMessage();
  3787  003BC2  EC5C  F017         	call	_SendUartSystemInitMessage	;wreg free
  3788                           
  3789                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  3790  003BC6  0E03               	movlw	3
  3791  003BC8  EC3D  F01E         	call	_BlinkOkLeds
  3792  003BCC                     
  3793                           ;main.c: 29: {
  3794                           ;main.c: 30: readUartByte();
  3795  003BCC  EC61  F006         	call	_readUartByte	;wreg free
  3796                           
  3797                           ;main.c: 32: if (TimerOneSecFlag == 1)
  3798  003BD0  0101               	movlb	1	; () banked
  3799  003BD2  05EE               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  3800  003BD4  A4D8               	btfss	status,2,c
  3801  003BD6  D006               	goto	l1629
  3802                           
  3803                           ; BSR set to: 1
  3804                           ;main.c: 33: {
  3805                           ;main.c: 35: SetMcuRunTime();
  3806  003BD8  ECC5  F01F         	call	_SetMcuRunTime	;wreg free
  3807                           
  3808                           ;main.c: 36: TimerOneSecFlag = 0;
  3809  003BDC  0E00               	movlw	0
  3810  003BDE  0101               	movlb	1	; () banked
  3811  003BE0  6FEE               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  3812                           
  3813                           ;main.c: 37: }
  3814  003BE2  D7F4               	goto	l1628
  3815  003BE4                     l1629:
  3816                           
  3817                           ; BSR set to: 1
  3818                           ;main.c: 38: else if (TimerKeepAliveFlag == 1)
  3819                           
  3820                           ; BSR set to: 1
  3821  003BE4  05EC               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  3822  003BE6  A4D8               	btfss	status,2,c
  3823  003BE8  D006               	goto	l1631
  3824                           
  3825                           ; BSR set to: 1
  3826                           ;main.c: 39: {
  3827                           ;main.c: 40: keepAliveSignalLed();
  3828  003BEA  EC6B  F022         	call	_keepAliveSignalLed	;wreg free
  3829                           
  3830                           ;main.c: 41: TimerKeepAliveFlag = 0;
  3831  003BEE  0E00               	movlw	0
  3832  003BF0  0101               	movlb	1	; () banked
  3833  003BF2  6FEC               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  3834                           
  3835                           ;main.c: 42: }
  3836  003BF4  D7EB               	goto	l1628
  3837  003BF6                     l1631:
  3838                           
  3839                           ; BSR set to: 1
  3840                           ;main.c: 43: else if (TimertenSecFlag == 1)
  3841                           
  3842                           ; BSR set to: 1
  3843  003BF6  05EB               	decf	_TimertenSecFlag& (0+255),w,b	;volatile
  3844  003BF8  A4D8               	btfss	status,2,c
  3845  003BFA  D006               	goto	l1633
  3846                           
  3847                           ; BSR set to: 1
  3848                           ;main.c: 44: {
  3849                           ;main.c: 45: SampleAllChannels();
  3850  003BFC  EC49  F011         	call	_SampleAllChannels	;wreg free
  3851                           
  3852                           ;main.c: 46: TimertenSecFlag = 0;
  3853  003C00  0E00               	movlw	0
  3854  003C02  0101               	movlb	1	; () banked
  3855  003C04  6FEB               	movwf	_TimertenSecFlag& (0+255),b	;volatile
  3856                           
  3857                           ;main.c: 47: }
  3858  003C06  D7E2               	goto	l1628
  3859  003C08                     l1633:
  3860                           
  3861                           ; BSR set to: 1
  3862                           ;main.c: 48: else if (TimerSamplingFlag == 1)
  3863                           
  3864                           ; BSR set to: 1
  3865  003C08  05ED               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  3866  003C0A  A4D8               	btfss	status,2,c
  3867  003C0C  D7DF               	goto	l1628
  3868                           
  3869                           ; BSR set to: 1
  3870                           ;main.c: 49: {
  3871                           ;main.c: 50: if(1 == needToSample)
  3872  003C0E  05EA               	decf	_needToSample& (0+255),w,b	;volatile
  3873  003C10  A4D8               	btfss	status,2,c
  3874  003C12  D7DC               	goto	l1628
  3875                           
  3876                           ; BSR set to: 1
  3877                           ;main.c: 51: {
  3878                           ;main.c: 52: SampleSingleChannel();
  3879  003C14  ECFD  F00E         	call	_SampleSingleChannel	;wreg free
  3880  003C18  D7D9               	goto	l1628
  3881  003C1A                     __end_of_main:
  3882                           	opt stack 0
  3883                           tblptru	equ	0xFF8
  3884                           tblptrh	equ	0xFF7
  3885                           tblptrl	equ	0xFF6
  3886                           tablat	equ	0xFF5
  3887                           postinc0	equ	0xFEE
  3888                           wreg	equ	0xFE8
  3889                           postdec1	equ	0xFE5
  3890                           fsr1l	equ	0xFE1
  3891                           status	equ	0xFD8
  3892                           
  3893 ;; *************** function _readUartByte *****************
  3894 ;; Defined at:
  3895 ;;		line 28 in file "EusartApp.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;		None
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  idx             2  130[BANK1 ] int 
  3900 ;;  dest           50   80[BANK1 ] unsigned char [50]
  3901 ;;  chRec           1  132[BANK1 ] unsigned char 
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      void 
  3904 ;; Registers used:
  3905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3911 ;;      Params:         0       0       0       0       0       0       0
  3912 ;;      Locals:         0       0      53       0       0       0       0
  3913 ;;      Temps:          0       3       0       0       0       0       0
  3914 ;;      Totals:         0       3      53       0       0       0       0
  3915 ;;Total ram usage:       56 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    9
  3918 ;; This function calls:
  3919 ;;		_EUSART1_Read
  3920 ;;		_GroupCommon
  3921 ;;		_GroupRx
  3922 ;;		_GroupTx
  3923 ;;		_InitRxMessageParams
  3924 ;;		_UART_Write_Text
  3925 ;;		_sprintf
  3926 ;;		_toupper
  3927 ;; This function is called by:
  3928 ;;		_main
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text1
  3933  000CC2                     __ptext1:
  3934                           	opt stack 0
  3935  000CC2                     _readUartByte:
  3936                           	opt stack 21
  3937                           
  3938                           ;EusartApp.c: 31: uint8_t chRec = (0);
  3939                           
  3940                           ;incstack = 0
  3941  000CC2  0E00               	movlw	0
  3942  000CC4  0101               	movlb	1	; () banked
  3943  000CC6  6F84               	movwf	readUartByte@chRec& (0+255),b
  3944                           
  3945                           ;EusartApp.c: 32: char dest[50];
  3946                           ;EusartApp.c: 34: switch(cState)
  3947  000CC8  D147               	goto	l265
  3948  000CCA                     
  3949                           ; BSR set to: 1
  3950                           ;EusartApp.c: 38: InitRxMessageParams();
  3951                           
  3952                           ; BSR set to: 1
  3953  000CCA  ECE8  F01F         	call	_InitRxMessageParams	;wreg free
  3954                           
  3955                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  3956  000CCE  0E01               	movlw	1
  3957  000CD0  0101               	movlb	1	; () banked
  3958  000CD2  6FE6               	movwf	_cState& (0+255),b
  3959                           
  3960                           ;EusartApp.c: 40: break;
  3961  000CD4  0012               	return	
  3962  000CD6                     
  3963                           ; BSR set to: 1
  3964                           ;EusartApp.c: 44: chRec = EUSART1_Read();
  3965                           
  3966                           ; BSR set to: 1
  3967  000CD6  EC0A  F020         	call	_EUSART1_Read	;wreg free
  3968  000CDA  0101               	movlb	1	; () banked
  3969  000CDC  6F84               	movwf	readUartByte@chRec& (0+255),b
  3970                           
  3971                           ; BSR set to: 1
  3972                           ;EusartApp.c: 46: if(chRec == (0x24))
  3973  000CDE  0E24               	movlw	36
  3974  000CE0  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  3975  000CE2  A4D8               	btfss	status,2,c
  3976  000CE4  0012               	return	
  3977                           
  3978                           ; BSR set to: 1
  3979                           ;EusartApp.c: 47: {
  3980                           ;EusartApp.c: 48: cState = READ_STREAM;
  3981  000CE6  0E02               	movlw	2
  3982  000CE8  6FE6               	movwf	_cState& (0+255),b
  3983                           
  3984                           ; BSR set to: 1
  3985                           ;EusartApp.c: 49: }
  3986                           ;EusartApp.c: 50: break;
  3987  000CEA  0012               	return	
  3988  000CEC                     
  3989                           ; BSR set to: 1
  3990                           ;EusartApp.c: 54: if(eusart1RxCount > 0)
  3991                           
  3992                           ; BSR set to: 1
  3993  000CEC  51E7               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  3994  000CEE  B4D8               	btfsc	status,2,c
  3995  000CF0  0012               	return	
  3996                           
  3997                           ; BSR set to: 1
  3998                           ;EusartApp.c: 55: {
  3999                           ;EusartApp.c: 56: chRec = EUSART1_Read();
  4000  000CF2  EC0A  F020         	call	_EUSART1_Read	;wreg free
  4001  000CF6  0101               	movlb	1	; () banked
  4002  000CF8  6F84               	movwf	readUartByte@chRec& (0+255),b
  4003                           
  4004                           ; BSR set to: 1
  4005                           ;EusartApp.c: 57: if(chRec == (0))
  4006  000CFA  5184               	movf	readUartByte@chRec& (0+255),w,b
  4007  000CFC  B4D8               	btfsc	status,2,c
  4008  000CFE  0012               	return	
  4009                           
  4010                           ; BSR set to: 1
  4011                           ;EusartApp.c: 61: else if(chRec == (0xd))
  4012                           
  4013                           ; BSR set to: 1
  4014                           
  4015                           ; BSR set to: 1
  4016                           ;EusartApp.c: 60: }
  4017                           
  4018                           ; BSR set to: 1
  4019                           ;EusartApp.c: 58: {
  4020                           ;EusartApp.c: 59: return;
  4021  000D00  0E0D               	movlw	13
  4022  000D02  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4023  000D04  A4D8               	btfss	status,2,c
  4024  000D06  D003               	goto	l275
  4025                           
  4026                           ; BSR set to: 1
  4027                           ;EusartApp.c: 62: {
  4028                           ;EusartApp.c: 63: cState = READ_GROUP;
  4029  000D08  0E03               	movlw	3
  4030  000D0A  6FE6               	movwf	_cState& (0+255),b
  4031                           
  4032                           ;EusartApp.c: 64: }
  4033  000D0C  0012               	return	
  4034  000D0E                     l275:
  4035                           
  4036                           ; BSR set to: 1
  4037                           ;EusartApp.c: 65: else
  4038                           ;EusartApp.c: 66: {
  4039                           ;EusartApp.c: 67: if(chRec != ' ')
  4040                           
  4041                           ; BSR set to: 1
  4042  000D0E  0E20               	movlw	32
  4043  000D10  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4044  000D12  B4D8               	btfsc	status,2,c
  4045  000D14  0012               	return	
  4046                           
  4047                           ; BSR set to: 1
  4048                           ;EusartApp.c: 68: {
  4049                           ;EusartApp.c: 69: rxMsgQueue[msgCount++] = chRec;
  4050  000D16  51E0               	movf	_msgCount& (0+255),w,b
  4051  000D18  0D01               	mullw	1
  4052  000D1A  0EC2               	movlw	low _rxMsgQueue
  4053  000D1C  24F3               	addwf	prodl,w,c
  4054  000D1E  6ED9               	movwf	fsr2l,c
  4055  000D20  0E02               	movlw	high _rxMsgQueue
  4056  000D22  20F4               	addwfc	prodh,w,c
  4057  000D24  6EDA               	movwf	fsr2h,c
  4058  000D26  C184  FFDF         	movff	readUartByte@chRec,indf2
  4059                           
  4060                           ; BSR set to: 1
  4061  000D2A  2BE0               	incf	_msgCount& (0+255),f,b
  4062                           
  4063                           ; BSR set to: 1
  4064                           ;EusartApp.c: 76: }
  4065                           ;EusartApp.c: 77: break;
  4066                           
  4067                           ; BSR set to: 1
  4068                           ;EusartApp.c: 73: else
  4069                           ;EusartApp.c: 74: {
  4070                           ;EusartApp.c: 75: return;
  4071                           
  4072                           ; BSR set to: 1
  4073                           ;EusartApp.c: 70: }
  4074                           ;EusartApp.c: 71: }
  4075                           ;EusartApp.c: 72: }
  4076                           
  4077                           ; BSR set to: 1
  4078                           
  4079                           ; BSR set to: 1
  4080  000D2C  0012               	return	
  4081  000D2E                     
  4082                           ; BSR set to: 1
  4083                           ;EusartApp.c: 81: chRec = toupper(rxMsgQueue[0]);
  4084                           
  4085                           ; BSR set to: 1
  4086  000D2E  0102               	movlb	2	; () banked
  4087  000D30  51C2               	movf	_rxMsgQueue& (0+255),w,b
  4088  000D32  EC8D  F022         	call	_toupper
  4089  000D36  0101               	movlb	1	; () banked
  4090  000D38  6F84               	movwf	readUartByte@chRec& (0+255),b
  4091                           
  4092                           ;EusartApp.c: 83: switch(chRec)
  4093  000D3A  D024               	goto	l280
  4094  000D3C                     
  4095                           ; BSR set to: 1
  4096                           ;EusartApp.c: 87: group = RX_GROUP;
  4097                           
  4098                           ; BSR set to: 1
  4099  000D3C  0E00               	movlw	0
  4100  000D3E  6FE5               	movwf	_group& (0+255),b
  4101                           
  4102                           ;EusartApp.c: 88: cState = READ_REQUEST;
  4103  000D40  0E04               	movlw	4
  4104  000D42  6FE6               	movwf	_cState& (0+255),b
  4105                           
  4106                           ;EusartApp.c: 89: break;
  4107  000D44  0012               	return	
  4108  000D46                     
  4109                           ; BSR set to: 1
  4110                           ;EusartApp.c: 93: group = TX_GROUP;
  4111                           
  4112                           ; BSR set to: 1
  4113  000D46  0E01               	movlw	1
  4114  000D48  6FE5               	movwf	_group& (0+255),b
  4115                           
  4116                           ;EusartApp.c: 94: cState = READ_REQUEST;
  4117  000D4A  0E04               	movlw	4
  4118  000D4C  6FE6               	movwf	_cState& (0+255),b
  4119                           
  4120                           ;EusartApp.c: 95: break;
  4121  000D4E  0012               	return	
  4122  000D50                     
  4123                           ; BSR set to: 1
  4124                           ;EusartApp.c: 99: group = COMMON_GROUP;
  4125                           
  4126                           ; BSR set to: 1
  4127  000D50  0E02               	movlw	2
  4128  000D52  6FE5               	movwf	_group& (0+255),b
  4129                           
  4130                           ;EusartApp.c: 100: cState = READ_REQUEST;
  4131  000D54  0E04               	movlw	4
  4132  000D56  6FE6               	movwf	_cState& (0+255),b
  4133                           
  4134                           ;EusartApp.c: 101: break;
  4135  000D58  0012               	return	
  4136  000D5A                     
  4137                           ; BSR set to: 1
  4138                           ;EusartApp.c: 104: sprintf(dest, "NOT O.K \n\r");
  4139                           
  4140                           ; BSR set to: 1
  4141  000D5A  0E50               	movlw	low readUartByte@dest
  4142  000D5C  0100               	movlb	0	; () banked
  4143  000D5E  6FBC               	movwf	sprintf@sp& (0+255),b
  4144  000D60  0E01               	movlw	high readUartByte@dest
  4145  000D62  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  4146  000D64  0EB8               	movlw	low STR_10
  4147  000D66  6FBE               	movwf	sprintf@f& (0+255),b
  4148  000D68  0E7F               	movlw	high STR_10
  4149  000D6A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  4150  000D6C  EC70  F000         	call	_sprintf	;wreg free
  4151                           
  4152                           ;EusartApp.c: 105: UART_Write_Text(dest);
  4153  000D70  0E50               	movlw	low readUartByte@dest
  4154  000D72  6E19               	movwf	UART_Write_Text@text,c
  4155  000D74  0E01               	movlw	high readUartByte@dest
  4156  000D76  6E1A               	movwf	UART_Write_Text@text+1,c
  4157  000D78  EC01  F01D         	call	_UART_Write_Text	;wreg free
  4158                           
  4159                           ;EusartApp.c: 106: cState = START_RX_MESSAGE_READ;
  4160  000D7C  0E00               	movlw	0
  4161  000D7E  0101               	movlb	1	; () banked
  4162  000D80  6FE6               	movwf	_cState& (0+255),b
  4163                           
  4164                           ; BSR set to: 1
  4165                           ;EusartApp.c: 108: }
  4166                           
  4167                           ;EusartApp.c: 107: break;
  4168  000D82  0012               	return	
  4169  000D84                     l280:
  4170                           
  4171                           ; BSR set to: 1
  4172                           
  4173                           ; BSR set to: 1
  4174  000D84  5184               	movf	readUartByte@chRec& (0+255),w,b
  4175                           
  4176                           ; Switch size 1, requested type "space"
  4177                           ; Number of cases is 3, Range of values is 82 to 84
  4178                           ; switch strategies available:
  4179                           ; Name         Instructions Cycles
  4180                           ; simple_byte           10     6 (average)
  4181                           ;	Chosen strategy is simple_byte
  4182  000D86  0A52               	xorlw	82	; case 82
  4183  000D88  B4D8               	btfsc	status,2,c
  4184  000D8A  D7D8               	goto	l281
  4185  000D8C  0A01               	xorlw	1	; case 83
  4186  000D8E  B4D8               	btfsc	status,2,c
  4187  000D90  D7DF               	goto	l284
  4188  000D92  0A07               	xorlw	7	; case 84
  4189  000D94  B4D8               	btfsc	status,2,c
  4190  000D96  D7D7               	goto	l283
  4191  000D98  D7E0               	goto	l285
  4192  000D9A                     
  4193                           ; BSR set to: 1
  4194                           ;EusartApp.c: 113: chRec = toupper(rxMsgQueue[1]);
  4195                           
  4196                           ; BSR set to: 1
  4197  000D9A  0102               	movlb	2	; () banked
  4198  000D9C  51C3               	movf	(_rxMsgQueue+1)& (0+255),w,b
  4199  000D9E  EC8D  F022         	call	_toupper
  4200  000DA2  0101               	movlb	1	; () banked
  4201  000DA4  6F84               	movwf	readUartByte@chRec& (0+255),b
  4202                           
  4203                           ;EusartApp.c: 115: switch(group)
  4204  000DA6  D068               	goto	l287
  4205  000DA8                     
  4206                           ; BSR set to: 1
  4207                           ;EusartApp.c: 119: if( chRec == 'I' || chRec == 'F' || chRec == 'Q' ||
  4208                           ;EusartApp.c: 120: chRec == 'X' || chRec == 'S' || chRec == 'C')
  4209                           
  4210                           ; BSR set to: 1
  4211  000DA8  0E49               	movlw	73
  4212  000DAA  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4213  000DAC  B4D8               	btfsc	status,2,c
  4214  000DAE  D014               	goto	u10400
  4215                           
  4216                           ; BSR set to: 1
  4217  000DB0  0E46               	movlw	70
  4218  000DB2  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4219  000DB4  B4D8               	btfsc	status,2,c
  4220  000DB6  D010               	goto	u10400
  4221                           
  4222                           ; BSR set to: 1
  4223  000DB8  0E51               	movlw	81
  4224  000DBA  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4225  000DBC  B4D8               	btfsc	status,2,c
  4226  000DBE  D00C               	goto	u10400
  4227                           
  4228                           ; BSR set to: 1
  4229  000DC0  0E58               	movlw	88
  4230  000DC2  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4231  000DC4  B4D8               	btfsc	status,2,c
  4232  000DC6  D008               	goto	u10400
  4233                           
  4234                           ; BSR set to: 1
  4235  000DC8  0E53               	movlw	83
  4236  000DCA  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4237  000DCC  B4D8               	btfsc	status,2,c
  4238  000DCE  D004               	goto	u10400
  4239                           
  4240                           ; BSR set to: 1
  4241  000DD0  0E43               	movlw	67
  4242  000DD2  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4243  000DD4  A4D8               	btfss	status,2,c
  4244  000DD6  D006               	goto	l289
  4245  000DD8                     u10400:
  4246                           
  4247                           ; BSR set to: 1
  4248                           ;EusartApp.c: 121: {
  4249                           ;EusartApp.c: 123: request = chRec - '0';
  4250                           
  4251                           ; BSR set to: 1
  4252  000DD8  5184               	movf	readUartByte@chRec& (0+255),w,b
  4253  000DDA  0FD0               	addlw	208
  4254  000DDC  6FE4               	movwf	_request& (0+255),b
  4255                           
  4256                           ; BSR set to: 1
  4257                           ;EusartApp.c: 124: cState = READ_DATA_SIZE;
  4258  000DDE  0E05               	movlw	5
  4259  000DE0  6FE6               	movwf	_cState& (0+255),b
  4260                           
  4261                           ;EusartApp.c: 126: }
  4262  000DE2  0012               	return	
  4263  000DE4                     l289:
  4264                           
  4265                           ; BSR set to: 1
  4266                           ;EusartApp.c: 127: else
  4267                           ;EusartApp.c: 128: {
  4268                           ;EusartApp.c: 129: UART_Write_Text("NOT OK \n\r");
  4269                           
  4270                           ; BSR set to: 1
  4271  000DE4  0ECD               	movlw	low STR_1
  4272  000DE6  6E19               	movwf	UART_Write_Text@text,c
  4273  000DE8  0E7F               	movlw	high STR_1
  4274  000DEA  6E1A               	movwf	UART_Write_Text@text+1,c
  4275  000DEC  EC01  F01D         	call	_UART_Write_Text	;wreg free
  4276                           
  4277                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  4278  000DF0  0E00               	movlw	0
  4279  000DF2  0101               	movlb	1	; () banked
  4280  000DF4  6FE6               	movwf	_cState& (0+255),b
  4281                           
  4282                           ; BSR set to: 1
  4283                           ;EusartApp.c: 131: }
  4284                           ;EusartApp.c: 132: return;
  4285                           
  4286                           ; BSR set to: 1
  4287  000DF6  0012               	return	
  4288  000DF8                     
  4289                           ; BSR set to: 1
  4290                           ;EusartApp.c: 136: if(chRec == 'I' || chRec == 'F' || chRec == 'Q' || chRec == 'X' || ch
      +                          Rec == 'B' || chRec == 'S')
  4291                           
  4292                           ; BSR set to: 1
  4293  000DF8  0E49               	movlw	73
  4294  000DFA  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4295  000DFC  B4D8               	btfsc	status,2,c
  4296  000DFE  D014               	goto	u10460
  4297                           
  4298                           ; BSR set to: 1
  4299  000E00  0E46               	movlw	70
  4300  000E02  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4301  000E04  B4D8               	btfsc	status,2,c
  4302  000E06  D010               	goto	u10460
  4303                           
  4304                           ; BSR set to: 1
  4305  000E08  0E51               	movlw	81
  4306  000E0A  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4307  000E0C  B4D8               	btfsc	status,2,c
  4308  000E0E  D00C               	goto	u10460
  4309                           
  4310                           ; BSR set to: 1
  4311  000E10  0E58               	movlw	88
  4312  000E12  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4313  000E14  B4D8               	btfsc	status,2,c
  4314  000E16  D008               	goto	u10460
  4315                           
  4316                           ; BSR set to: 1
  4317  000E18  0E42               	movlw	66
  4318  000E1A  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4319  000E1C  B4D8               	btfsc	status,2,c
  4320  000E1E  D004               	goto	u10460
  4321                           
  4322                           ; BSR set to: 1
  4323  000E20  0E53               	movlw	83
  4324  000E22  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4325  000E24  A4D8               	btfss	status,2,c
  4326  000E26  D006               	goto	l294
  4327  000E28                     u10460:
  4328                           
  4329                           ; BSR set to: 1
  4330                           ;EusartApp.c: 137: {
  4331                           ;EusartApp.c: 138: request = (chRec - '0');
  4332                           
  4333                           ; BSR set to: 1
  4334  000E28  5184               	movf	readUartByte@chRec& (0+255),w,b
  4335  000E2A  0FD0               	addlw	208
  4336  000E2C  6FE4               	movwf	_request& (0+255),b
  4337                           
  4338                           ; BSR set to: 1
  4339                           ;EusartApp.c: 139: cState = READ_DATA_SIZE;
  4340  000E2E  0E05               	movlw	5
  4341  000E30  6FE6               	movwf	_cState& (0+255),b
  4342                           
  4343                           ; BSR set to: 1
  4344                           ;EusartApp.c: 141: }
  4345                           
  4346                           ; BSR set to: 1
  4347                           ;EusartApp.c: 140: return;
  4348  000E32  0012               	return	
  4349  000E34                     l294:
  4350                           
  4351                           ; BSR set to: 1
  4352                           ;EusartApp.c: 142: else
  4353                           ;EusartApp.c: 143: {
  4354                           ;EusartApp.c: 144: UART_Write_Text("NOT OK \n\r");
  4355                           
  4356                           ; BSR set to: 1
  4357  000E34  0ECD               	movlw	low STR_1
  4358  000E36  6E19               	movwf	UART_Write_Text@text,c
  4359  000E38  0E7F               	movlw	high STR_1
  4360  000E3A  6E1A               	movwf	UART_Write_Text@text+1,c
  4361  000E3C  EC01  F01D         	call	_UART_Write_Text	;wreg free
  4362                           
  4363                           ;EusartApp.c: 145: cState = START_RX_MESSAGE_READ;
  4364  000E40  0E00               	movlw	0
  4365  000E42  0101               	movlb	1	; () banked
  4366  000E44  6FE6               	movwf	_cState& (0+255),b
  4367                           
  4368                           ; BSR set to: 1
  4369                           ;EusartApp.c: 146: }
  4370                           ;EusartApp.c: 147: break;
  4371  000E46  0012               	return	
  4372  000E48                     
  4373                           ; BSR set to: 1
  4374                           ;EusartApp.c: 151: if(chRec == 'H' || chRec == 'L')
  4375                           
  4376                           ; BSR set to: 1
  4377  000E48  0E48               	movlw	72
  4378  000E4A  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4379  000E4C  B4D8               	btfsc	status,2,c
  4380  000E4E  D004               	goto	u10480
  4381                           
  4382                           ; BSR set to: 1
  4383  000E50  0E4C               	movlw	76
  4384  000E52  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4385  000E54  A4D8               	btfss	status,2,c
  4386  000E56  D006               	goto	l300
  4387  000E58                     u10480:
  4388                           
  4389                           ; BSR set to: 1
  4390                           ;EusartApp.c: 152: {
  4391                           ;EusartApp.c: 153: request = (chRec - '0');
  4392                           
  4393                           ; BSR set to: 1
  4394  000E58  5184               	movf	readUartByte@chRec& (0+255),w,b
  4395  000E5A  0FD0               	addlw	208
  4396  000E5C  6FE4               	movwf	_request& (0+255),b
  4397                           
  4398                           ; BSR set to: 1
  4399                           ;EusartApp.c: 154: cState = READ_DATA_SIZE;
  4400  000E5E  0E05               	movlw	5
  4401  000E60  6FE6               	movwf	_cState& (0+255),b
  4402                           
  4403                           ;EusartApp.c: 155: }
  4404  000E62  0012               	return	
  4405  000E64                     l300:
  4406                           
  4407                           ; BSR set to: 1
  4408                           ;EusartApp.c: 156: else
  4409                           ;EusartApp.c: 157: {
  4410                           ;EusartApp.c: 158: UART_Write_Text("NOT OK \n\r");
  4411                           
  4412                           ; BSR set to: 1
  4413  000E64  0ECD               	movlw	low STR_1
  4414  000E66  6E19               	movwf	UART_Write_Text@text,c
  4415  000E68  0E7F               	movlw	high STR_1
  4416  000E6A  6E1A               	movwf	UART_Write_Text@text+1,c
  4417  000E6C  EC01  F01D         	call	_UART_Write_Text	;wreg free
  4418                           
  4419                           ;EusartApp.c: 159: cState = START_RX_MESSAGE_READ;
  4420  000E70  0E00               	movlw	0
  4421  000E72  0101               	movlb	1	; () banked
  4422  000E74  6FE6               	movwf	_cState& (0+255),b
  4423                           
  4424                           ; BSR set to: 1
  4425                           ;EusartApp.c: 160: }
  4426                           ;EusartApp.c: 161: }
  4427  000E76  0012               	return	
  4428  000E78                     l287:
  4429                           
  4430                           ; BSR set to: 1
  4431                           
  4432                           ; BSR set to: 1
  4433  000E78  51E5               	movf	_group& (0+255),w,b
  4434                           
  4435                           ; Switch size 1, requested type "space"
  4436                           ; Number of cases is 3, Range of values is 0 to 2
  4437                           ; switch strategies available:
  4438                           ; Name         Instructions Cycles
  4439                           ; simple_byte           10     6 (average)
  4440                           ;	Chosen strategy is simple_byte
  4441  000E7A  0A00               	xorlw	0	; case 0
  4442  000E7C  B4D8               	btfsc	status,2,c
  4443  000E7E  D794               	goto	l288
  4444  000E80  0A01               	xorlw	1	; case 1
  4445  000E82  B4D8               	btfsc	status,2,c
  4446  000E84  D7B9               	goto	l293
  4447  000E86  0A03               	xorlw	3	; case 2
  4448  000E88  A4D8               	btfss	status,2,c
  4449                           
  4450                           ; BSR set to: 1
  4451                           ;EusartApp.c: 162: return;
  4452  000E8A  0012               	return	
  4453  000E8C  D7DD               	goto	l299
  4454  000E8E                     
  4455                           ; BSR set to: 1
  4456                           ;EusartApp.c: 166: dataSize = msgCount - 2;
  4457                           
  4458                           ; BSR set to: 1
  4459  000E8E  51E0               	movf	_msgCount& (0+255),w,b
  4460  000E90  0FFE               	addlw	254
  4461  000E92  6FE3               	movwf	_dataSize& (0+255),b
  4462                           
  4463                           ; BSR set to: 1
  4464                           ;EusartApp.c: 167: rxMsgData[(0x0)] = dataSize;
  4465  000E94  C1E3  F2AE         	movff	_dataSize,_rxMsgData
  4466                           
  4467                           ; BSR set to: 1
  4468                           ;EusartApp.c: 168: if(dataSize == 0)
  4469  000E98  51E3               	movf	_dataSize& (0+255),w,b
  4470  000E9A  A4D8               	btfss	status,2,c
  4471  000E9C  D003               	goto	l305
  4472                           
  4473                           ; BSR set to: 1
  4474                           ;EusartApp.c: 169: {
  4475                           ;EusartApp.c: 170: cState = JUMP_FUNCTION;
  4476  000E9E  0E08               	movlw	8
  4477  000EA0  6FE6               	movwf	_cState& (0+255),b
  4478                           
  4479                           ;EusartApp.c: 171: }
  4480  000EA2  0012               	return	
  4481  000EA4                     l305:
  4482                           
  4483                           ; BSR set to: 1
  4484                           ;EusartApp.c: 172: else
  4485                           ;EusartApp.c: 173: {
  4486                           ;EusartApp.c: 174: cState = READ_DATA;
  4487                           
  4488                           ; BSR set to: 1
  4489  000EA4  0E06               	movlw	6
  4490  000EA6  6FE6               	movwf	_cState& (0+255),b
  4491                           
  4492                           ; BSR set to: 1
  4493                           ;EusartApp.c: 175: }
  4494                           ;EusartApp.c: 177: break;
  4495  000EA8  0012               	return	
  4496  000EAA                     
  4497                           ; BSR set to: 1
  4498                           ;EusartApp.c: 181: for(int idx = 1; idx < dataSize + 1; idx++)
  4499                           
  4500                           ; BSR set to: 1
  4501  000EAA  0E00               	movlw	0
  4502  000EAC  6F83               	movwf	(readUartByte@idx+1)& (0+255),b
  4503  000EAE  0E01               	movlw	1
  4504  000EB0  6F82               	movwf	readUartByte@idx& (0+255),b
  4505  000EB2  D01B               	goto	l308
  4506  000EB4                     
  4507                           ;EusartApp.c: 182: {
  4508                           ;EusartApp.c: 183: rxMsgData[idx] = rxMsgQueue[(0x2) + idx - 1];
  4509                           
  4510                           ; BSR set to: 1
  4511  000EB4  0E01               	movlw	1
  4512  000EB6  0101               	movlb	1	; () banked
  4513  000EB8  2582               	addwf	readUartByte@idx& (0+255),w,b
  4514  000EBA  0100               	movlb	0	; () banked
  4515  000EBC  6FEC               	movwf	??_readUartByte& (0+255),b
  4516  000EBE  0E00               	movlw	0
  4517  000EC0  0101               	movlb	1	; () banked
  4518  000EC2  2183               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  4519  000EC4  0100               	movlb	0	; () banked
  4520  000EC6  6FED               	movwf	(??_readUartByte+1)& (0+255),b
  4521  000EC8  0EC2               	movlw	low _rxMsgQueue
  4522  000ECA  25EC               	addwf	??_readUartByte& (0+255),w,b
  4523  000ECC  6ED9               	movwf	fsr2l,c
  4524  000ECE  0E02               	movlw	high _rxMsgQueue
  4525  000ED0  21ED               	addwfc	(??_readUartByte+1)& (0+255),w,b
  4526  000ED2  6EDA               	movwf	fsr2h,c
  4527  000ED4  0EAE               	movlw	low _rxMsgData
  4528  000ED6  0101               	movlb	1	; () banked
  4529  000ED8  2582               	addwf	readUartByte@idx& (0+255),w,b
  4530  000EDA  6EE1               	movwf	fsr1l,c
  4531  000EDC  0E02               	movlw	high _rxMsgData
  4532  000EDE  2183               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  4533  000EE0  6EE2               	movwf	fsr1h,c
  4534  000EE2  CFDF FFE7          	movff	indf2,indf1
  4535                           
  4536                           ; BSR set to: 1
  4537  000EE6  4B82               	infsnz	readUartByte@idx& (0+255),f,b
  4538  000EE8  2B83               	incf	(readUartByte@idx+1)& (0+255),f,b
  4539  000EEA                     l308:
  4540                           
  4541                           ; BSR set to: 1
  4542                           
  4543                           ; BSR set to: 1
  4544  000EEA  51E3               	movf	_dataSize& (0+255),w,b
  4545  000EEC  0100               	movlb	0	; () banked
  4546  000EEE  6FEC               	movwf	??_readUartByte& (0+255),b
  4547  000EF0  6BED               	clrf	(??_readUartByte+1)& (0+255),b
  4548  000EF2  0E01               	movlw	1
  4549  000EF4  27EC               	addwf	??_readUartByte& (0+255),f,b
  4550  000EF6  0E00               	movlw	0
  4551  000EF8  23ED               	addwfc	(??_readUartByte+1)& (0+255),f,b
  4552  000EFA  51EC               	movf	??_readUartByte& (0+255),w,b
  4553  000EFC  0101               	movlb	1	; () banked
  4554  000EFE  5D82               	subwf	readUartByte@idx& (0+255),w,b
  4555  000F00  5183               	movf	(readUartByte@idx+1)& (0+255),w,b
  4556  000F02  0A80               	xorlw	128
  4557  000F04  0100               	movlb	0	; () banked
  4558  000F06  6FEE               	movwf	(??_readUartByte+2)& (0+255),b
  4559  000F08  51ED               	movf	(??_readUartByte+1)& (0+255),w,b
  4560  000F0A  0A80               	xorlw	128
  4561  000F0C  59EE               	subwfb	(??_readUartByte+2)& (0+255),w,b
  4562  000F0E  A0D8               	btfss	status,0,c
  4563  000F10  D7D1               	goto	l309
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;EusartApp.c: 184: }
  4567                           ;EusartApp.c: 186: cState = JUMP_FUNCTION;
  4568                           
  4569                           ; BSR set to: 0
  4570  000F12  0E08               	movlw	8
  4571  000F14  0101               	movlb	1	; () banked
  4572  000F16  6FE6               	movwf	_cState& (0+255),b
  4573                           
  4574                           ;EusartApp.c: 187: break;
  4575  000F18  0012               	return	
  4576  000F1A                     
  4577                           ; BSR set to: 1
  4578                           ;EusartApp.c: 191: groupsArray[group](request, rxMsgData);
  4579                           
  4580                           ; BSR set to: 1
  4581  000F1A  51E5               	movf	_group& (0+255),w,b
  4582  000F1C  0D02               	mullw	2
  4583  000F1E  0ED6               	movlw	low _groupsArray
  4584  000F20  24F3               	addwf	prodl,w,c
  4585  000F22  6ED9               	movwf	fsr2l,c
  4586  000F24  0E02               	movlw	high _groupsArray
  4587  000F26  20F4               	addwfc	prodh,w,c
  4588  000F28  6EDA               	movwf	fsr2h,c
  4589  000F2A  D801               	call	u10518
  4590  000F2C  D011               	goto	u10519
  4591  000F2E                     u10518:
  4592  000F2E  0005               	push	
  4593  000F30  6EFA               	movwf	pclath,c
  4594  000F32  50DE               	movf	postinc2,w,c
  4595  000F34  6EFD               	movwf	tosl,c
  4596  000F36  50DE               	movf	postinc2,w,c
  4597  000F38  6EFE               	movwf	tosh,c
  4598  000F3A  50F8               	movf	tblptru,w,c
  4599  000F3C  6EFF               	movwf	tosu,c
  4600  000F3E  50FA               	movf	pclath,w,c
  4601  000F40  0EAE               	movlw	low _rxMsgData
  4602  000F42  0100               	movlb	0	; () banked
  4603  000F44  6FE2               	movwf	GroupCommon@data& (0+255),b
  4604  000F46  0E02               	movlw	high _rxMsgData
  4605  000F48  6FE3               	movwf	(GroupCommon@data+1)& (0+255),b
  4606  000F4A  0101               	movlb	1	; () banked
  4607  000F4C  51E4               	movf	_request& (0+255),w,b
  4608  000F4E  0012               	return		;indir
  4609  000F50                     u10519:
  4610                           
  4611                           ;EusartApp.c: 192: cState = START_RX_MESSAGE_READ;
  4612  000F50  0E00               	movlw	0
  4613  000F52  0101               	movlb	1	; () banked
  4614  000F54  6FE6               	movwf	_cState& (0+255),b
  4615                           
  4616                           ; BSR set to: 1
  4617                           ;EusartApp.c: 194: }
  4618                           
  4619                           ;EusartApp.c: 193: break;
  4620  000F56  0012               	return	
  4621  000F58                     l265:
  4622                           
  4623                           ; BSR set to: 1
  4624                           
  4625                           ; BSR set to: 1
  4626  000F58  51E6               	movf	_cState& (0+255),w,b
  4627                           
  4628                           ; Switch size 1, requested type "space"
  4629                           ; Number of cases is 8, Range of values is 0 to 8
  4630                           ; switch strategies available:
  4631                           ; Name         Instructions Cycles
  4632                           ; simple_byte           25    13 (average)
  4633                           ;	Chosen strategy is simple_byte
  4634  000F5A  0A00               	xorlw	0	; case 0
  4635  000F5C  B4D8               	btfsc	status,2,c
  4636  000F5E  D6B5               	goto	l266
  4637  000F60  0A01               	xorlw	1	; case 1
  4638  000F62  B4D8               	btfsc	status,2,c
  4639  000F64  D6B8               	goto	l268
  4640  000F66  0A03               	xorlw	3	; case 2
  4641  000F68  B4D8               	btfsc	status,2,c
  4642  000F6A  D6C0               	goto	l270
  4643  000F6C  0A01               	xorlw	1	; case 3
  4644  000F6E  B4D8               	btfsc	status,2,c
  4645  000F70  D6DE               	goto	l279
  4646  000F72  0A07               	xorlw	7	; case 4
  4647  000F74  B4D8               	btfsc	status,2,c
  4648  000F76  D711               	goto	l286
  4649  000F78  0A01               	xorlw	1	; case 5
  4650  000F7A  B4D8               	btfsc	status,2,c
  4651  000F7C  D788               	goto	l304
  4652  000F7E  0A03               	xorlw	3	; case 6
  4653  000F80  B4D8               	btfsc	status,2,c
  4654  000F82  D793               	goto	l307
  4655  000F84  0A0E               	xorlw	14	; case 8
  4656  000F86  A4D8               	btfss	status,2,c
  4657  000F88  0012               	return	
  4658  000F8A  D7C7               	goto	l311
  4659  000F8C                     __end_of_readUartByte:
  4660                           	opt stack 0
  4661                           tosu	equ	0xFFF
  4662                           tosh	equ	0xFFE
  4663                           tosl	equ	0xFFD
  4664                           pclath	equ	0xFFA
  4665                           tblptru	equ	0xFF8
  4666                           tblptrh	equ	0xFF7
  4667                           tblptrl	equ	0xFF6
  4668                           tablat	equ	0xFF5
  4669                           prodh	equ	0xFF4
  4670                           prodl	equ	0xFF3
  4671                           postinc0	equ	0xFEE
  4672                           wreg	equ	0xFE8
  4673                           indf1	equ	0xFE7
  4674                           postdec1	equ	0xFE5
  4675                           fsr1h	equ	0xFE2
  4676                           fsr1l	equ	0xFE1
  4677                           indf2	equ	0xFDF
  4678                           postinc2	equ	0xFDE
  4679                           fsr2h	equ	0xFDA
  4680                           fsr2l	equ	0xFD9
  4681                           status	equ	0xFD8
  4682                           
  4683 ;; *************** function _InitRxMessageParams *****************
  4684 ;; Defined at:
  4685 ;;		line 197 in file "EusartApp.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;		None
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;		None
  4690 ;; Return value:  Size  Location     Type
  4691 ;;                  1    wreg      void 
  4692 ;; Registers used:
  4693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4694 ;; Tracked objects:
  4695 ;;		On entry : 0/0
  4696 ;;		On exit  : 0/0
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4699 ;;      Params:         0       0       0       0       0       0       0
  4700 ;;      Locals:         0       0       0       0       0       0       0
  4701 ;;      Temps:          0       0       0       0       0       0       0
  4702 ;;      Totals:         0       0       0       0       0       0       0
  4703 ;;Total ram usage:        0 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; Hardware stack levels required when called:    5
  4706 ;; This function calls:
  4707 ;;		_ZeroArray
  4708 ;; This function is called by:
  4709 ;;		_readUartByte
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           	psect	text2
  4714  003FD0                     __ptext2:
  4715                           	opt stack 0
  4716  003FD0                     _InitRxMessageParams:
  4717                           	opt stack 24
  4718                           
  4719                           ;EusartApp.c: 199: group = 0;
  4720                           
  4721                           ; BSR set to: 1
  4722                           ;incstack = 0
  4723  003FD0  0E00               	movlw	0
  4724  003FD2  0101               	movlb	1	; () banked
  4725  003FD4  6FE5               	movwf	_group& (0+255),b
  4726                           
  4727                           ;EusartApp.c: 200: request = 0;
  4728  003FD6  0E00               	movlw	0
  4729  003FD8  6FE4               	movwf	_request& (0+255),b
  4730                           
  4731                           ;EusartApp.c: 201: msgCount = 0;
  4732  003FDA  0E00               	movlw	0
  4733  003FDC  6FE0               	movwf	_msgCount& (0+255),b
  4734                           
  4735                           ;EusartApp.c: 202: dataSize = 0;
  4736  003FDE  0E00               	movlw	0
  4737  003FE0  6FE3               	movwf	_dataSize& (0+255),b
  4738                           
  4739                           ;EusartApp.c: 203: crcCalc = 0;
  4740  003FE2  0E00               	movlw	0
  4741  003FE4  6FE2               	movwf	_crcCalc& (0+255),b
  4742                           
  4743                           ;EusartApp.c: 204: crcGiven = 0;
  4744  003FE6  0E00               	movlw	0
  4745  003FE8  6FE1               	movwf	_crcGiven& (0+255),b
  4746                           
  4747                           ; BSR set to: 1
  4748                           ;EusartApp.c: 205: ZeroArray(rxMsgQueue, (0x14));
  4749  003FEA  0EC2               	movlw	low _rxMsgQueue
  4750  003FEC  6E20               	movwf	ZeroArray@array,c
  4751  003FEE  0E02               	movlw	high _rxMsgQueue
  4752  003FF0  6E21               	movwf	ZeroArray@array+1,c
  4753  003FF2  0E00               	movlw	0
  4754  003FF4  6E23               	movwf	ZeroArray@size+1,c
  4755  003FF6  0E14               	movlw	20
  4756  003FF8  6E22               	movwf	ZeroArray@size,c
  4757  003FFA  EC41  F022         	call	_ZeroArray
  4758                           
  4759                           ;EusartApp.c: 206: ZeroArray(rxMsgData, (0x14));
  4760  003FFE  0EAE               	movlw	low _rxMsgData
  4761  004000  6E20               	movwf	ZeroArray@array,c
  4762  004002  0E02               	movlw	high _rxMsgData
  4763  004004  6E21               	movwf	ZeroArray@array+1,c
  4764  004006  0E00               	movlw	0
  4765  004008  6E23               	movwf	ZeroArray@size+1,c
  4766  00400A  0E14               	movlw	20
  4767  00400C  6E22               	movwf	ZeroArray@size,c
  4768  00400E  EC41  F022         	call	_ZeroArray	;wreg free
  4769  004012  0012               	return		;funcret
  4770  004014                     __end_of_InitRxMessageParams:
  4771                           	opt stack 0
  4772                           tosu	equ	0xFFF
  4773                           tosh	equ	0xFFE
  4774                           tosl	equ	0xFFD
  4775                           pclath	equ	0xFFA
  4776                           tblptru	equ	0xFF8
  4777                           tblptrh	equ	0xFF7
  4778                           tblptrl	equ	0xFF6
  4779                           tablat	equ	0xFF5
  4780                           prodh	equ	0xFF4
  4781                           prodl	equ	0xFF3
  4782                           postinc0	equ	0xFEE
  4783                           wreg	equ	0xFE8
  4784                           indf1	equ	0xFE7
  4785                           postdec1	equ	0xFE5
  4786                           fsr1h	equ	0xFE2
  4787                           fsr1l	equ	0xFE1
  4788                           indf2	equ	0xFDF
  4789                           postinc2	equ	0xFDE
  4790                           fsr2h	equ	0xFDA
  4791                           fsr2l	equ	0xFD9
  4792                           status	equ	0xFD8
  4793                           
  4794 ;; *************** function _GroupCommon *****************
  4795 ;; Defined at:
  4796 ;;		line 96 in file "MessageFunctions.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;  request         1    wreg     enum E6
  4799 ;;  data            2  130[BANK0 ] PTR unsigned char 
  4800 ;;		 -> rxMsgData(20), 
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  request         1  132[BANK0 ] enum E6
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  1    wreg      void 
  4805 ;; Registers used:
  4806 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4812 ;;      Params:         0       2       0       0       0       0       0
  4813 ;;      Locals:         0       1       0       0       0       0       0
  4814 ;;      Temps:          0       0       0       0       0       0       0
  4815 ;;      Totals:         0       3       0       0       0       0       0
  4816 ;;Total ram usage:        3 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    8
  4819 ;; This function calls:
  4820 ;;		_PrintHelpScreen
  4821 ;;		_testLeds
  4822 ;; This function is called by:
  4823 ;;		_readUartByte
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           	psect	text3
  4828  0043DA                     __ptext3:
  4829                           	opt stack 0
  4830  0043DA                     _GroupCommon:
  4831                           	opt stack 21
  4832                           
  4833                           ;incstack = 0
  4834                           ;GroupCommon@request stored from wreg
  4835  0043DA  0100               	movlb	0	; () banked
  4836  0043DC  6FE4               	movwf	GroupCommon@request& (0+255),b
  4837                           
  4838                           ;MessageFunctions.c: 98: switch (request)
  4839  0043DE  D006               	goto	l1352
  4840  0043E0                     
  4841                           ;MessageFunctions.c: 101: PrintHelpScreen();
  4842  0043E0  ECC6  F007         	call	_PrintHelpScreen	;wreg free
  4843                           
  4844                           ;MessageFunctions.c: 102: break;
  4845  0043E4  0012               	return	
  4846  0043E6                     
  4847                           ;MessageFunctions.c: 105: testLeds();
  4848  0043E6  EC0D  F01E         	call	_testLeds	;wreg free
  4849                           
  4850                           ;MessageFunctions.c: 112: }
  4851                           
  4852                           ;MessageFunctions.c: 111: break;
  4853                           
  4854                           ;MessageFunctions.c: 110: default:
  4855                           
  4856                           ;MessageFunctions.c: 106: break;
  4857  0043EA  0012               	return	
  4858  0043EC                     l1352:
  4859  0043EC  0100               	movlb	0	; () banked
  4860  0043EE  51E4               	movf	GroupCommon@request& (0+255),w,b
  4861                           
  4862                           ; Switch size 1, requested type "space"
  4863                           ; Number of cases is 2, Range of values is 24 to 28
  4864                           ; switch strategies available:
  4865                           ; Name         Instructions Cycles
  4866                           ; simple_byte            7     4 (average)
  4867                           ;	Chosen strategy is simple_byte
  4868  0043F0  0A18               	xorlw	24	; case 24
  4869  0043F2  B4D8               	btfsc	status,2,c
  4870  0043F4  D7F5               	goto	l1353
  4871  0043F6  0A04               	xorlw	4	; case 28
  4872  0043F8  A4D8               	btfss	status,2,c
  4873  0043FA  0012               	return	
  4874  0043FC  D7F4               	goto	l1355
  4875  0043FE                     __end_of_GroupCommon:
  4876                           	opt stack 0
  4877                           tosu	equ	0xFFF
  4878                           tosh	equ	0xFFE
  4879                           tosl	equ	0xFFD
  4880                           pclath	equ	0xFFA
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           postinc0	equ	0xFEE
  4888                           wreg	equ	0xFE8
  4889                           indf1	equ	0xFE7
  4890                           postdec1	equ	0xFE5
  4891                           fsr1h	equ	0xFE2
  4892                           fsr1l	equ	0xFE1
  4893                           indf2	equ	0xFDF
  4894                           postinc2	equ	0xFDE
  4895                           fsr2h	equ	0xFDA
  4896                           fsr2l	equ	0xFD9
  4897                           status	equ	0xFD8
  4898                           
  4899 ;; *************** function _GroupRx *****************
  4900 ;; Defined at:
  4901 ;;		line 14 in file "MessageFunctions.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;  request         1    wreg     enum E6
  4904 ;;  data            2  130[BANK0 ] PTR unsigned char 
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  request         1  139[BANK0 ] enum E6
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  1    wreg      void 
  4909 ;; Registers used:
  4910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4916 ;;      Params:         0       2       0       0       0       0       0
  4917 ;;      Locals:         0       7       0       0       0       0       0
  4918 ;;      Temps:          0       1       0       0       0       0       0
  4919 ;;      Totals:         0      10       0       0       0       0       0
  4920 ;;Total ram usage:       10 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    8
  4923 ;; This function calls:
  4924 ;;		_AdcSingleSample
  4925 ;;		_CollectRxStatusParams
  4926 ;;		_GetIntFromUartData
  4927 ;;		_PrintRxStatus
  4928 ;;		___awtoft
  4929 ;;		___fttol
  4930 ;;		___llmod
  4931 ;;		_pow
  4932 ;; This function is called by:
  4933 ;;		_readUartByte
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           	psect	text4
  4938  0029AE                     __ptext4:
  4939                           	opt stack 0
  4940  0029AE                     _GroupRx:
  4941                           	opt stack 21
  4942                           
  4943                           ;incstack = 0
  4944                           ;GroupRx@request stored from wreg
  4945  0029AE  0100               	movlb	0	; () banked
  4946  0029B0  6FEB               	movwf	GroupRx@request& (0+255),b
  4947                           
  4948                           ;MessageFunctions.c: 16: switch (request)
  4949  0029B2  D077               	goto	l1326
  4950  0029B4                     
  4951                           ;MessageFunctions.c: 28: CollectRxStatusParams();
  4952  0029B4  EC72  F01D         	call	_CollectRxStatusParams	;wreg free
  4953                           
  4954                           ;MessageFunctions.c: 29: PrintRxStatus();
  4955  0029B8  EC45  F00B         	call	_PrintRxStatus	;wreg free
  4956                           
  4957                           ;MessageFunctions.c: 36: break;
  4958                           
  4959                           ;MessageFunctions.c: 35: case TX_RX_SET_OPERATION_MODE:
  4960                           
  4961                           ;MessageFunctions.c: 33: break;
  4962                           
  4963                           ;MessageFunctions.c: 32: case TX_RX_SET_BIT_MODE:
  4964                           
  4965                           ;MessageFunctions.c: 30: break;
  4966  0029BC  0012               	return	
  4967  0029BE                     
  4968                           ;MessageFunctions.c: 39: retNum = GetIntFromUartData(data);
  4969  0029BE  C0E2  F066         	movff	GroupRx@data,GetIntFromUartData@data
  4970  0029C2  C0E3  F067         	movff	GroupRx@data+1,GetIntFromUartData@data+1
  4971  0029C6  ECE3  F01A         	call	_GetIntFromUartData	;wreg free
  4972  0029CA  C066  F1C4         	movff	?_GetIntFromUartData,_retNum
  4973  0029CE  C067  F1C5         	movff	?_GetIntFromUartData+1,_retNum+1
  4974  0029D2  C068  F1C6         	movff	?_GetIntFromUartData+2,_retNum+2
  4975  0029D6  C069  F1C7         	movff	?_GetIntFromUartData+3,_retNum+3
  4976                           
  4977                           ;MessageFunctions.c: 40: channelNum = data[1] - '0';
  4978  0029DA  0100               	movlb	0	; () banked
  4979  0029DC  EE20 F001          	lfsr	2,1
  4980  0029E0  51E2               	movf	GroupRx@data& (0+255),w,b
  4981  0029E2  26D9               	addwf	fsr2l,f,c
  4982  0029E4  51E3               	movf	(GroupRx@data+1)& (0+255),w,b
  4983  0029E6  22DA               	addwfc	fsr2h,f,c
  4984  0029E8  50DF               	movf	indf2,w,c
  4985  0029EA  6FE4               	movwf	??_GroupRx& (0+255),b
  4986  0029EC  0ED0               	movlw	208
  4987  0029EE  25E4               	addwf	??_GroupRx& (0+255),w,b
  4988  0029F0  6E37               	movwf	_channelNum,c
  4989  0029F2  6A38               	clrf	_channelNum+1,c
  4990  0029F4  0EFF               	movlw	255
  4991  0029F6  2238               	addwfc	_channelNum+1,f,c
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  4995  0029F8  C0E2  FFD9         	movff	GroupRx@data,fsr2l
  4996  0029FC  C0E3  FFDA         	movff	GroupRx@data+1,fsr2h
  4997  002A00  50DF               	movf	indf2,w,c
  4998  002A02  6FE4               	movwf	??_GroupRx& (0+255),b
  4999  002A04  0EFF               	movlw	255
  5000  002A06  25E4               	addwf	??_GroupRx& (0+255),w,b
  5001  002A08  6E20               	movwf	___awtoft@c,c
  5002  002A0A  6A21               	clrf	___awtoft@c+1,c
  5003  002A0C  0EFF               	movlw	255
  5004  002A0E  2221               	addwfc	___awtoft@c+1,f,c
  5005  002A10  ECE4  F020         	call	___awtoft	;wreg free
  5006  002A14  C020  F0E5         	movff	?___awtoft,_GroupRx$3946
  5007  002A18  C021  F0E6         	movff	?___awtoft+1,_GroupRx$3946+1
  5008  002A1C  C022  F0E7         	movff	?___awtoft+2,_GroupRx$3946+2
  5009                           
  5010                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5011  002A20  C0E5  F0A5         	movff	_GroupRx$3946,pow@y
  5012  002A24  C0E6  F0A6         	movff	_GroupRx$3946+1,pow@y+1
  5013  002A28  C0E7  F0A7         	movff	_GroupRx$3946+2,pow@y+2
  5014  002A2C  0E00               	movlw	0
  5015  002A2E  0100               	movlb	0	; () banked
  5016  002A30  6FA2               	movwf	pow@x& (0+255),b
  5017  002A32  0E20               	movlw	32
  5018  002A34  6FA3               	movwf	(pow@x+1)& (0+255),b
  5019  002A36  0E41               	movlw	65
  5020  002A38  6FA4               	movwf	(pow@x+2)& (0+255),b
  5021  002A3A  EC89  F010         	call	_pow	;wreg free
  5022  002A3E  C0A2  F0E8         	movff	?_pow,_GroupRx$3947
  5023  002A42  C0A3  F0E9         	movff	?_pow+1,_GroupRx$3947+1
  5024  002A46  C0A4  F0EA         	movff	?_pow+2,_GroupRx$3947+2
  5025                           
  5026                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5027  002A4A  C1C4  F0B3         	movff	_retNum,___llmod@dividend
  5028  002A4E  C1C5  F0B4         	movff	_retNum+1,___llmod@dividend+1
  5029  002A52  C1C6  F0B5         	movff	_retNum+2,___llmod@dividend+2
  5030  002A56  C1C7  F0B6         	movff	_retNum+3,___llmod@dividend+3
  5031  002A5A  C0E8  F079         	movff	_GroupRx$3947,___fttol@f1
  5032  002A5E  C0E9  F07A         	movff	_GroupRx$3947+1,___fttol@f1+1
  5033  002A62  C0EA  F07B         	movff	_GroupRx$3947+2,___fttol@f1+2
  5034  002A66  ECF1  F015         	call	___fttol	;wreg free
  5035  002A6A  0100               	movlb	0	; () banked
  5036  002A6C  C079  F0B7         	movff	?___fttol,___llmod@divisor
  5037  002A70  C07A  F0B8         	movff	?___fttol+1,___llmod@divisor+1
  5038  002A74  0E00               	movlw	0
  5039  002A76  BFB8               	btfsc	(___llmod@divisor+1)& (0+255),7,b
  5040  002A78  0EFF               	movlw	-1
  5041  002A7A  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  5042  002A7C  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  5043  002A7E  ECA9  F01D         	call	___llmod	;wreg free
  5044  002A82  C0B3  F1D4         	movff	?___llmod,_numSamples
  5045  002A86  C0B4  F1D5         	movff	?___llmod+1,_numSamples+1
  5046                           
  5047                           ;MessageFunctions.c: 42: AdcSingleSample(RX_TYPE, channelNum, numSamples);
  5048  002A8A  C037  F01F         	movff	_channelNum,AdcSingleSample@chType
  5049  002A8E  C1D4  F020         	movff	_numSamples,AdcSingleSample@numSamples
  5050  002A92  C1D5  F021         	movff	_numSamples+1,AdcSingleSample@numSamples+1
  5051  002A96  6A22               	clrf	AdcSingleSample@numSamples+2,c
  5052  002A98  6A23               	clrf	AdcSingleSample@numSamples+3,c
  5053  002A9A  0E01               	movlw	1
  5054  002A9C  EC64  F015         	call	_AdcSingleSample
  5055                           
  5056                           ;MessageFunctions.c: 51: }
  5057                           
  5058                           ;MessageFunctions.c: 50: break;
  5059                           
  5060                           ;MessageFunctions.c: 49: default:
  5061                           
  5062                           ;MessageFunctions.c: 47: break;
  5063  002AA0  0012               	return	
  5064  002AA2                     l1326:
  5065  002AA2  0100               	movlb	0	; () banked
  5066  002AA4  51EB               	movf	GroupRx@request& (0+255),w,b
  5067                           
  5068                           ; Switch size 1, requested type "space"
  5069                           ; Number of cases is 6, Range of values is 18 to 40
  5070                           ; switch strategies available:
  5071                           ; Name         Instructions Cycles
  5072                           ; simple_byte           19    10 (average)
  5073                           ;	Chosen strategy is simple_byte
  5074  002AA6  0A12               	xorlw	18	; case 18
  5075  002AA8  B4D8               	btfsc	status,2,c
  5076  002AAA  0012               	return	
  5077  002AAC  0A04               	xorlw	4	; case 22
  5078  002AAE  B4D8               	btfsc	status,2,c
  5079  002AB0  0012               	return	
  5080  002AB2  0A0F               	xorlw	15	; case 25
  5081  002AB4  B4D8               	btfsc	status,2,c
  5082  002AB6  0012               	return	
  5083  002AB8  0A38               	xorlw	56	; case 33
  5084  002ABA  B4D8               	btfsc	status,2,c
  5085  002ABC  D77B               	goto	l1330
  5086  002ABE  0A02               	xorlw	2	; case 35
  5087  002AC0  B4D8               	btfsc	status,2,c
  5088  002AC2  D77D               	goto	l1333
  5089  002AC4  0A0B               	xorlw	11	; case 40
  5090  002AC6  0012               	return	
  5091  002AC8                     __end_of_GroupRx:
  5092                           	opt stack 0
  5093                           tosu	equ	0xFFF
  5094                           tosh	equ	0xFFE
  5095                           tosl	equ	0xFFD
  5096                           pclath	equ	0xFFA
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           postinc0	equ	0xFEE
  5104                           wreg	equ	0xFE8
  5105                           indf1	equ	0xFE7
  5106                           postdec1	equ	0xFE5
  5107                           fsr1h	equ	0xFE2
  5108                           fsr1l	equ	0xFE1
  5109                           indf2	equ	0xFDF
  5110                           postinc2	equ	0xFDE
  5111                           fsr2h	equ	0xFDA
  5112                           fsr2l	equ	0xFD9
  5113                           status	equ	0xFD8
  5114                           
  5115 ;; *************** function _GroupTx *****************
  5116 ;; Defined at:
  5117 ;;		line 54 in file "MessageFunctions.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;  request         1    wreg     enum E6
  5120 ;;  data            2  130[BANK0 ] PTR unsigned char 
  5121 ;; Auto vars:     Size  Location     Type
  5122 ;;  request         1  139[BANK0 ] enum E6
  5123 ;; Return value:  Size  Location     Type
  5124 ;;                  1    wreg      void 
  5125 ;; Registers used:
  5126 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5132 ;;      Params:         0       2       0       0       0       0       0
  5133 ;;      Locals:         0       7       0       0       0       0       0
  5134 ;;      Temps:          0       1       0       0       0       0       0
  5135 ;;      Totals:         0      10       0       0       0       0       0
  5136 ;;Total ram usage:       10 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; Hardware stack levels required when called:    8
  5139 ;; This function calls:
  5140 ;;		_AdcSingleSample
  5141 ;;		_CollectTxStatusParams
  5142 ;;		_GetIntFromUartData
  5143 ;;		_PrintTxStatus
  5144 ;;		___awtoft
  5145 ;;		___fttol
  5146 ;;		___llmod
  5147 ;;		_pow
  5148 ;; This function is called by:
  5149 ;;		_readUartByte
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           	psect	text5
  5154  002762                     __ptext5:
  5155                           	opt stack 0
  5156  002762                     _GroupTx:
  5157                           	opt stack 21
  5158                           
  5159                           ;incstack = 0
  5160                           ;GroupTx@request stored from wreg
  5161  002762  0100               	movlb	0	; () banked
  5162  002764  6FEB               	movwf	GroupTx@request& (0+255),b
  5163                           
  5164                           ;MessageFunctions.c: 56: switch (request)
  5165  002766  D077               	goto	l1338
  5166  002768                     
  5167                           ;MessageFunctions.c: 67: CollectTxStatusParams();
  5168  002768  ECC6  F01C         	call	_CollectTxStatusParams	;wreg free
  5169                           
  5170                           ;MessageFunctions.c: 68: PrintTxStatus();
  5171  00276C  EC4A  F00A         	call	_PrintTxStatus	;wreg free
  5172                           
  5173                           ;MessageFunctions.c: 81: break;
  5174                           
  5175                           ;MessageFunctions.c: 80: case RX_SET_COMRESSION_RANGE:
  5176                           
  5177                           ;MessageFunctions.c: 78: break;
  5178                           
  5179                           ;MessageFunctions.c: 77: case RX_SET_COMRESSION_MODE:
  5180                           
  5181                           ;MessageFunctions.c: 75: break;
  5182                           
  5183                           ;MessageFunctions.c: 74: case TX_RX_SET_OPERATION_MODE:
  5184                           
  5185                           ;MessageFunctions.c: 72: break;
  5186                           
  5187                           ;MessageFunctions.c: 71: case TX_RX_SET_BIT_MODE:
  5188                           
  5189                           ;MessageFunctions.c: 69: break;
  5190  002770  0012               	return	
  5191  002772                     
  5192                           ;MessageFunctions.c: 84: retNum = GetIntFromUartData(data);
  5193  002772  C0E2  F066         	movff	GroupTx@data,GetIntFromUartData@data
  5194  002776  C0E3  F067         	movff	GroupTx@data+1,GetIntFromUartData@data+1
  5195  00277A  ECE3  F01A         	call	_GetIntFromUartData	;wreg free
  5196  00277E  C066  F1C4         	movff	?_GetIntFromUartData,_retNum
  5197  002782  C067  F1C5         	movff	?_GetIntFromUartData+1,_retNum+1
  5198  002786  C068  F1C6         	movff	?_GetIntFromUartData+2,_retNum+2
  5199  00278A  C069  F1C7         	movff	?_GetIntFromUartData+3,_retNum+3
  5200                           
  5201                           ;MessageFunctions.c: 85: channelNum = data[1] - '0';
  5202  00278E  0100               	movlb	0	; () banked
  5203  002790  EE20 F001          	lfsr	2,1
  5204  002794  51E2               	movf	GroupTx@data& (0+255),w,b
  5205  002796  26D9               	addwf	fsr2l,f,c
  5206  002798  51E3               	movf	(GroupTx@data+1)& (0+255),w,b
  5207  00279A  22DA               	addwfc	fsr2h,f,c
  5208  00279C  50DF               	movf	indf2,w,c
  5209  00279E  6FE4               	movwf	??_GroupTx& (0+255),b
  5210  0027A0  0ED0               	movlw	208
  5211  0027A2  25E4               	addwf	??_GroupTx& (0+255),w,b
  5212  0027A4  6E37               	movwf	_channelNum,c
  5213  0027A6  6A38               	clrf	_channelNum+1,c
  5214  0027A8  0EFF               	movlw	255
  5215  0027AA  2238               	addwfc	_channelNum+1,f,c
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5219  0027AC  C0E2  FFD9         	movff	GroupTx@data,fsr2l
  5220  0027B0  C0E3  FFDA         	movff	GroupTx@data+1,fsr2h
  5221  0027B4  50DF               	movf	indf2,w,c
  5222  0027B6  6FE4               	movwf	??_GroupTx& (0+255),b
  5223  0027B8  0EFF               	movlw	255
  5224  0027BA  25E4               	addwf	??_GroupTx& (0+255),w,b
  5225  0027BC  6E20               	movwf	___awtoft@c,c
  5226  0027BE  6A21               	clrf	___awtoft@c+1,c
  5227  0027C0  0EFF               	movlw	255
  5228  0027C2  2221               	addwfc	___awtoft@c+1,f,c
  5229  0027C4  ECE4  F020         	call	___awtoft	;wreg free
  5230  0027C8  C020  F0E5         	movff	?___awtoft,_GroupTx$3948
  5231  0027CC  C021  F0E6         	movff	?___awtoft+1,_GroupTx$3948+1
  5232  0027D0  C022  F0E7         	movff	?___awtoft+2,_GroupTx$3948+2
  5233                           
  5234                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5235  0027D4  C0E5  F0A5         	movff	_GroupTx$3948,pow@y
  5236  0027D8  C0E6  F0A6         	movff	_GroupTx$3948+1,pow@y+1
  5237  0027DC  C0E7  F0A7         	movff	_GroupTx$3948+2,pow@y+2
  5238  0027E0  0E00               	movlw	0
  5239  0027E2  0100               	movlb	0	; () banked
  5240  0027E4  6FA2               	movwf	pow@x& (0+255),b
  5241  0027E6  0E20               	movlw	32
  5242  0027E8  6FA3               	movwf	(pow@x+1)& (0+255),b
  5243  0027EA  0E41               	movlw	65
  5244  0027EC  6FA4               	movwf	(pow@x+2)& (0+255),b
  5245  0027EE  EC89  F010         	call	_pow	;wreg free
  5246  0027F2  C0A2  F0E8         	movff	?_pow,_GroupTx$3949
  5247  0027F6  C0A3  F0E9         	movff	?_pow+1,_GroupTx$3949+1
  5248  0027FA  C0A4  F0EA         	movff	?_pow+2,_GroupTx$3949+2
  5249                           
  5250                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5251  0027FE  C1C4  F0B3         	movff	_retNum,___llmod@dividend
  5252  002802  C1C5  F0B4         	movff	_retNum+1,___llmod@dividend+1
  5253  002806  C1C6  F0B5         	movff	_retNum+2,___llmod@dividend+2
  5254  00280A  C1C7  F0B6         	movff	_retNum+3,___llmod@dividend+3
  5255  00280E  C0E8  F079         	movff	_GroupTx$3949,___fttol@f1
  5256  002812  C0E9  F07A         	movff	_GroupTx$3949+1,___fttol@f1+1
  5257  002816  C0EA  F07B         	movff	_GroupTx$3949+2,___fttol@f1+2
  5258  00281A  ECF1  F015         	call	___fttol	;wreg free
  5259  00281E  0100               	movlb	0	; () banked
  5260  002820  C079  F0B7         	movff	?___fttol,___llmod@divisor
  5261  002824  C07A  F0B8         	movff	?___fttol+1,___llmod@divisor+1
  5262  002828  0E00               	movlw	0
  5263  00282A  BFB8               	btfsc	(___llmod@divisor+1)& (0+255),7,b
  5264  00282C  0EFF               	movlw	-1
  5265  00282E  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  5266  002830  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  5267  002832  ECA9  F01D         	call	___llmod	;wreg free
  5268  002836  C0B3  F1D4         	movff	?___llmod,_numSamples
  5269  00283A  C0B4  F1D5         	movff	?___llmod+1,_numSamples+1
  5270                           
  5271                           ;MessageFunctions.c: 87: AdcSingleSample(TX_TYPE, channelNum, numSamples);
  5272  00283E  C037  F01F         	movff	_channelNum,AdcSingleSample@chType
  5273  002842  C1D4  F020         	movff	_numSamples,AdcSingleSample@numSamples
  5274  002846  C1D5  F021         	movff	_numSamples+1,AdcSingleSample@numSamples+1
  5275  00284A  6A22               	clrf	AdcSingleSample@numSamples+2,c
  5276  00284C  6A23               	clrf	AdcSingleSample@numSamples+3,c
  5277  00284E  0E00               	movlw	0
  5278  002850  EC64  F015         	call	_AdcSingleSample
  5279                           
  5280                           ;MessageFunctions.c: 93: }
  5281                           
  5282                           ;MessageFunctions.c: 92: break;
  5283                           
  5284                           ;MessageFunctions.c: 91: default:
  5285                           
  5286                           ;MessageFunctions.c: 89: break;
  5287  002854  0012               	return	
  5288  002856                     l1338:
  5289  002856  0100               	movlb	0	; () banked
  5290  002858  51EB               	movf	GroupTx@request& (0+255),w,b
  5291                           
  5292                           ; Switch size 1, requested type "space"
  5293                           ; Number of cases is 8, Range of values is 18 to 101
  5294                           ; switch strategies available:
  5295                           ; Name         Instructions Cycles
  5296                           ; simple_byte           25    13 (average)
  5297                           ;	Chosen strategy is simple_byte
  5298  00285A  0A12               	xorlw	18	; case 18
  5299  00285C  B4D8               	btfsc	status,2,c
  5300  00285E  0012               	return	
  5301  002860  0A04               	xorlw	4	; case 22
  5302  002862  B4D8               	btfsc	status,2,c
  5303  002864  0012               	return	
  5304  002866  0A0F               	xorlw	15	; case 25
  5305  002868  B4D8               	btfsc	status,2,c
  5306  00286A  0012               	return	
  5307  00286C  0A38               	xorlw	56	; case 33
  5308  00286E  B4D8               	btfsc	status,2,c
  5309  002870  D77B               	goto	l1342
  5310  002872  0A02               	xorlw	2	; case 35
  5311  002874  B4D8               	btfsc	status,2,c
  5312  002876  D77D               	goto	l1347
  5313  002878  0A0B               	xorlw	11	; case 40
  5314  00287A  B4D8               	btfsc	status,2,c
  5315  00287C  0012               	return	
  5316  00287E  0A4B               	xorlw	75	; case 99
  5317  002880  B4D8               	btfsc	status,2,c
  5318  002882  0012               	return	
  5319  002884  0A06               	xorlw	6	; case 101
  5320  002886  0012               	return	
  5321  002888                     __end_of_GroupTx:
  5322                           	opt stack 0
  5323                           tosu	equ	0xFFF
  5324                           tosh	equ	0xFFE
  5325                           tosl	equ	0xFFD
  5326                           pclath	equ	0xFFA
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           indf1	equ	0xFE7
  5336                           postdec1	equ	0xFE5
  5337                           fsr1h	equ	0xFE2
  5338                           fsr1l	equ	0xFE1
  5339                           indf2	equ	0xFDF
  5340                           postinc2	equ	0xFDE
  5341                           fsr2h	equ	0xFDA
  5342                           fsr2l	equ	0xFD9
  5343                           status	equ	0xFD8
  5344                           
  5345 ;; *************** function _PrintTxStatus *****************
  5346 ;; Defined at:
  5347 ;;		line 205 in file "SystemStatus.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;		None
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  dest           80    0[BANK1 ] unsigned char [80]
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  1    wreg      void 
  5354 ;; Registers used:
  5355 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5361 ;;      Params:         0       0       0       0       0       0       0
  5362 ;;      Locals:         0       0      80       0       0       0       0
  5363 ;;      Temps:          0       0       0       0       0       0       0
  5364 ;;      Totals:         0       0      80       0       0       0       0
  5365 ;;Total ram usage:       80 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    7
  5368 ;; This function calls:
  5369 ;;		_UART_Write_Text
  5370 ;;		_sprintf
  5371 ;; This function is called by:
  5372 ;;		_GroupTx
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text6
  5377  001494                     __ptext6:
  5378                           	opt stack 0
  5379  001494                     _PrintTxStatus:
  5380                           	opt stack 21
  5381                           
  5382                           ;SystemStatus.c: 207: char dest[80];
  5383                           ;SystemStatus.c: 208: sprintf(dest, "*******************\n\r");
  5384                           
  5385                           ;incstack = 0
  5386  001494  0E00               	movlw	low PrintTxStatus@dest
  5387  001496  0100               	movlb	0	; () banked
  5388  001498  6FBC               	movwf	sprintf@sp& (0+255),b
  5389  00149A  0E01               	movlw	high PrintTxStatus@dest
  5390  00149C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5391  00149E  0E09               	movlw	low STR_46
  5392  0014A0  6FBE               	movwf	sprintf@f& (0+255),b
  5393  0014A2  0E7F               	movlw	high STR_46
  5394  0014A4  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5395  0014A6  EC70  F000         	call	_sprintf	;wreg free
  5396                           
  5397                           ;SystemStatus.c: 209: UART_Write_Text(dest);
  5398  0014AA  0E00               	movlw	low PrintTxStatus@dest
  5399  0014AC  6E19               	movwf	UART_Write_Text@text,c
  5400  0014AE  0E01               	movlw	high PrintTxStatus@dest
  5401  0014B0  6E1A               	movwf	UART_Write_Text@text+1,c
  5402  0014B2  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5403                           
  5404                           ;SystemStatus.c: 210: sprintf(dest, "TX SYNTH (PLL) Lock indication %d\n\r",txStatistics
      +                          .Synt);
  5405  0014B6  0E00               	movlw	low PrintTxStatus@dest
  5406  0014B8  0100               	movlb	0	; () banked
  5407  0014BA  6FBC               	movwf	sprintf@sp& (0+255),b
  5408  0014BC  0E01               	movlw	high PrintTxStatus@dest
  5409  0014BE  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5410  0014C0  0E76               	movlw	low STR_59
  5411  0014C2  6FBE               	movwf	sprintf@f& (0+255),b
  5412  0014C4  0E7D               	movlw	high STR_59
  5413  0014C6  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5414  0014C8  C185  F0C0         	movff	_txStatistics,?_sprintf+4	;volatile
  5415  0014CC  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5416  0014CE  EC70  F000         	call	_sprintf	;wreg free
  5417                           
  5418                           ;SystemStatus.c: 211: UART_Write_Text(dest);
  5419  0014D2  0E00               	movlw	low PrintTxStatus@dest
  5420  0014D4  6E19               	movwf	UART_Write_Text@text,c
  5421  0014D6  0E01               	movlw	high PrintTxStatus@dest
  5422  0014D8  6E1A               	movwf	UART_Write_Text@text+1,c
  5423  0014DA  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5424                           
  5425                           ;SystemStatus.c: 212: sprintf(dest, "Device Temperature %f\n\r",txStatistics.DeviceTempe
      +                          rature);
  5426  0014DE  0E00               	movlw	low PrintTxStatus@dest
  5427  0014E0  0100               	movlb	0	; () banked
  5428  0014E2  6FBC               	movwf	sprintf@sp& (0+255),b
  5429  0014E4  0E01               	movlw	high PrintTxStatus@dest
  5430  0014E6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5431  0014E8  0E93               	movlw	low STR_48
  5432  0014EA  6FBE               	movwf	sprintf@f& (0+255),b
  5433  0014EC  0E7E               	movlw	high STR_48
  5434  0014EE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5435  0014F0  C18B  F0C0         	movff	_txStatistics+6,?_sprintf+4	;volatile
  5436  0014F4  C18C  F0C1         	movff	_txStatistics+7,?_sprintf+5	;volatile
  5437  0014F8  C18D  F0C2         	movff	_txStatistics+8,?_sprintf+6	;volatile
  5438  0014FC  EC70  F000         	call	_sprintf	;wreg free
  5439                           
  5440                           ;SystemStatus.c: 213: UART_Write_Text(dest);
  5441  001500  0E00               	movlw	low PrintTxStatus@dest
  5442  001502  6E19               	movwf	UART_Write_Text@text,c
  5443  001504  0E01               	movlw	high PrintTxStatus@dest
  5444  001506  6E1A               	movwf	UART_Write_Text@text+1,c
  5445  001508  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5446                           
  5447                           ;SystemStatus.c: 214: sprintf(dest, "Input power status 0: OFF 1: ON%d\n\r",txStatistics
      +                          .InputPowerStatus);
  5448  00150C  0E00               	movlw	low PrintTxStatus@dest
  5449  00150E  0100               	movlb	0	; () banked
  5450  001510  6FBC               	movwf	sprintf@sp& (0+255),b
  5451  001512  0E01               	movlw	high PrintTxStatus@dest
  5452  001514  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5453  001516  0E9A               	movlw	low STR_49
  5454  001518  6FBE               	movwf	sprintf@f& (0+255),b
  5455  00151A  0E7D               	movlw	high STR_49
  5456  00151C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5457  00151E  C18E  F0C0         	movff	_txStatistics+9,?_sprintf+4	;volatile
  5458  001522  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5459  001524  EC70  F000         	call	_sprintf	;wreg free
  5460                           
  5461                           ;SystemStatus.c: 215: UART_Write_Text(dest);
  5462  001528  0E00               	movlw	low PrintTxStatus@dest
  5463  00152A  6E19               	movwf	UART_Write_Text@text,c
  5464  00152C  0E01               	movlw	high PrintTxStatus@dest
  5465  00152E  6E1A               	movwf	UART_Write_Text@text+1,c
  5466  001530  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5467                           
  5468                           ;SystemStatus.c: 216: sprintf(dest, "TX Frequency in MHz%f\n\r",txStatistics.Freq);
  5469  001534  0E00               	movlw	low PrintTxStatus@dest
  5470  001536  0100               	movlb	0	; () banked
  5471  001538  6FBC               	movwf	sprintf@sp& (0+255),b
  5472  00153A  0E01               	movlw	high PrintTxStatus@dest
  5473  00153C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5474  00153E  0EC3               	movlw	low STR_62
  5475  001540  6FBE               	movwf	sprintf@f& (0+255),b
  5476  001542  0E7E               	movlw	high STR_62
  5477  001544  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5478  001546  C18F  F0C0         	movff	_txStatistics+10,?_sprintf+4	;volatile
  5479  00154A  C190  F0C1         	movff	_txStatistics+11,?_sprintf+5	;volatile
  5480  00154E  C191  F0C2         	movff	_txStatistics+12,?_sprintf+6	;volatile
  5481  001552  EC70  F000         	call	_sprintf	;wreg free
  5482                           
  5483                           ;SystemStatus.c: 217: UART_Write_Text(dest);
  5484  001556  0E00               	movlw	low PrintTxStatus@dest
  5485  001558  6E19               	movwf	UART_Write_Text@text,c
  5486  00155A  0E01               	movlw	high PrintTxStatus@dest
  5487  00155C  6E1A               	movwf	UART_Write_Text@text+1,c
  5488  00155E  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5489                           
  5490                           ;SystemStatus.c: 218: sprintf(dest, "RSSI %d\n\r",txStatistics.RSSI);
  5491  001562  0E00               	movlw	low PrintTxStatus@dest
  5492  001564  0100               	movlb	0	; () banked
  5493  001566  6FBC               	movwf	sprintf@sp& (0+255),b
  5494  001568  0E01               	movlw	high PrintTxStatus@dest
  5495  00156A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5496  00156C  0EC3               	movlw	low STR_51
  5497  00156E  6FBE               	movwf	sprintf@f& (0+255),b
  5498  001570  0E7F               	movlw	high STR_51
  5499  001572  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5500  001574  0101               	movlb	1	; () banked
  5501  001576  5192               	movf	(_txStatistics+13)& (0+255),w,b	;volatile
  5502  001578  0100               	movlb	0	; () banked
  5503  00157A  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  5504  00157C  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5505  00157E  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  5506  001580  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  5507  001582  EC70  F000         	call	_sprintf	;wreg free
  5508                           
  5509                           ;SystemStatus.c: 219: UART_Write_Text(dest);
  5510  001586  0E00               	movlw	low PrintTxStatus@dest
  5511  001588  6E19               	movwf	UART_Write_Text@text,c
  5512  00158A  0E01               	movlw	high PrintTxStatus@dest
  5513  00158C  6E1A               	movwf	UART_Write_Text@text+1,c
  5514  00158E  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5515                           
  5516                           ;SystemStatus.c: 220: sprintf(dest, "Light 0: OFF 1: ON%d\n\r",txStatistics.Light);
  5517  001592  0E00               	movlw	low PrintTxStatus@dest
  5518  001594  0100               	movlb	0	; () banked
  5519  001596  6FBC               	movwf	sprintf@sp& (0+255),b
  5520  001598  0E01               	movlw	high PrintTxStatus@dest
  5521  00159A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5522  00159C  0EF2               	movlw	low STR_52
  5523  00159E  6FBE               	movwf	sprintf@f& (0+255),b
  5524  0015A0  0E7E               	movlw	high STR_52
  5525  0015A2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5526  0015A4  C196  F0C0         	movff	_txStatistics+17,?_sprintf+4	;volatile
  5527  0015A8  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5528  0015AA  EC70  F000         	call	_sprintf	;wreg free
  5529                           
  5530                           ;SystemStatus.c: 221: UART_Write_Text(dest);
  5531  0015AE  0E00               	movlw	low PrintTxStatus@dest
  5532  0015B0  6E19               	movwf	UART_Write_Text@text,c
  5533  0015B2  0E01               	movlw	high PrintTxStatus@dest
  5534  0015B4  6E1A               	movwf	UART_Write_Text@text+1,c
  5535  0015B6  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5536                           
  5537                           ;SystemStatus.c: 222: sprintf(dest, "UNIT ID %d\n\r",txStatistics.UnitId);
  5538  0015BA  0E00               	movlw	low PrintTxStatus@dest
  5539  0015BC  0100               	movlb	0	; () banked
  5540  0015BE  6FBC               	movwf	sprintf@sp& (0+255),b
  5541  0015C0  0E01               	movlw	high PrintTxStatus@dest
  5542  0015C2  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5543  0015C4  0E9F               	movlw	low STR_53
  5544  0015C6  6FBE               	movwf	sprintf@f& (0+255),b
  5545  0015C8  0E7F               	movlw	high STR_53
  5546  0015CA  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5547  0015CC  0101               	movlb	1	; () banked
  5548  0015CE  5197               	movf	(_txStatistics+18)& (0+255),w,b	;volatile
  5549  0015D0  0100               	movlb	0	; () banked
  5550  0015D2  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  5551  0015D4  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5552  0015D6  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  5553  0015D8  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  5554  0015DA  EC70  F000         	call	_sprintf	;wreg free
  5555                           
  5556                           ;SystemStatus.c: 223: UART_Write_Text(dest);
  5557  0015DE  0E00               	movlw	low PrintTxStatus@dest
  5558  0015E0  6E19               	movwf	UART_Write_Text@text,c
  5559  0015E2  0E01               	movlw	high PrintTxStatus@dest
  5560  0015E4  6E1A               	movwf	UART_Write_Text@text+1,c
  5561  0015E6  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5562                           
  5563                           ;SystemStatus.c: 224: sprintf(dest, "UNIT DC %d\n\r",txStatistics.UnitDc);
  5564  0015EA  0E00               	movlw	low PrintTxStatus@dest
  5565  0015EC  0100               	movlb	0	; () banked
  5566  0015EE  6FBC               	movwf	sprintf@sp& (0+255),b
  5567  0015F0  0E01               	movlw	high PrintTxStatus@dest
  5568  0015F2  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5569  0015F4  0E92               	movlw	low STR_54
  5570  0015F6  6FBE               	movwf	sprintf@f& (0+255),b
  5571  0015F8  0E7F               	movlw	high STR_54
  5572  0015FA  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5573  0015FC  C198  F0C0         	movff	_txStatistics+19,?_sprintf+4	;volatile
  5574  001600  C199  F0C1         	movff	_txStatistics+20,?_sprintf+5	;volatile
  5575  001604  EC70  F000         	call	_sprintf	;wreg free
  5576                           
  5577                           ;SystemStatus.c: 225: UART_Write_Text(dest);
  5578  001608  0E00               	movlw	low PrintTxStatus@dest
  5579  00160A  6E19               	movwf	UART_Write_Text@text,c
  5580  00160C  0E01               	movlw	high PrintTxStatus@dest
  5581  00160E  6E1A               	movwf	UART_Write_Text@text+1,c
  5582  001610  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5583                           
  5584                           ;SystemStatus.c: 226: sprintf(dest, "SOFTWARE VERSION %s\n\r",txStatistics.SwVersion);
  5585  001614  0E00               	movlw	low PrintTxStatus@dest
  5586  001616  0100               	movlb	0	; () banked
  5587  001618  6FBC               	movwf	sprintf@sp& (0+255),b
  5588  00161A  0E01               	movlw	high PrintTxStatus@dest
  5589  00161C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5590  00161E  0E1F               	movlw	low STR_55
  5591  001620  6FBE               	movwf	sprintf@f& (0+255),b
  5592  001622  0E7F               	movlw	high STR_55
  5593  001624  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5594  001626  C19A  F0C0         	movff	_txStatistics+21,?_sprintf+4	;volatile
  5595  00162A  C19B  F0C1         	movff	_txStatistics+22,?_sprintf+5	;volatile
  5596  00162E  EC70  F000         	call	_sprintf	;wreg free
  5597                           
  5598                           ;SystemStatus.c: 227: UART_Write_Text(dest);
  5599  001632  0E00               	movlw	low PrintTxStatus@dest
  5600  001634  6E19               	movwf	UART_Write_Text@text,c
  5601  001636  0E01               	movlw	high PrintTxStatus@dest
  5602  001638  6E1A               	movwf	UART_Write_Text@text+1,c
  5603  00163A  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5604                           
  5605                           ;SystemStatus.c: 228: sprintf(dest, "UNIT TYPE %d\n\r",txStatistics.UnitType);
  5606  00163E  0E00               	movlw	low PrintTxStatus@dest
  5607  001640  0100               	movlb	0	; () banked
  5608  001642  6FBC               	movwf	sprintf@sp& (0+255),b
  5609  001644  0E01               	movlw	high PrintTxStatus@dest
  5610  001646  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5611  001648  0E83               	movlw	low STR_56
  5612  00164A  6FBE               	movwf	sprintf@f& (0+255),b
  5613  00164C  0E7F               	movlw	high STR_56
  5614  00164E  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5615  001650  C19C  F0C0         	movff	_txStatistics+23,?_sprintf+4	;volatile
  5616  001654  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5617  001656  EC70  F000         	call	_sprintf	;wreg free
  5618                           
  5619                           ;SystemStatus.c: 229: UART_Write_Text(dest);
  5620  00165A  0E00               	movlw	low PrintTxStatus@dest
  5621  00165C  6E19               	movwf	UART_Write_Text@text,c
  5622  00165E  0E01               	movlw	high PrintTxStatus@dest
  5623  001660  6E1A               	movwf	UART_Write_Text@text+1,c
  5624  001662  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5625                           
  5626                           ;SystemStatus.c: 230: sprintf(dest, "*******************\n\r");
  5627  001666  0E00               	movlw	low PrintTxStatus@dest
  5628  001668  0100               	movlb	0	; () banked
  5629  00166A  6FBC               	movwf	sprintf@sp& (0+255),b
  5630  00166C  0E01               	movlw	high PrintTxStatus@dest
  5631  00166E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5632  001670  0E09               	movlw	low STR_46
  5633  001672  6FBE               	movwf	sprintf@f& (0+255),b
  5634  001674  0E7F               	movlw	high STR_46
  5635  001676  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5636  001678  EC70  F000         	call	_sprintf	;wreg free
  5637                           
  5638                           ;SystemStatus.c: 231: UART_Write_Text(dest);
  5639  00167C  0E00               	movlw	low PrintTxStatus@dest
  5640  00167E  6E19               	movwf	UART_Write_Text@text,c
  5641  001680  0E01               	movlw	high PrintTxStatus@dest
  5642  001682  6E1A               	movwf	UART_Write_Text@text+1,c
  5643  001684  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5644  001688  0012               	return		;funcret
  5645  00168A                     __end_of_PrintTxStatus:
  5646                           	opt stack 0
  5647                           tosu	equ	0xFFF
  5648                           tosh	equ	0xFFE
  5649                           tosl	equ	0xFFD
  5650                           pclath	equ	0xFFA
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           postinc0	equ	0xFEE
  5658                           wreg	equ	0xFE8
  5659                           indf1	equ	0xFE7
  5660                           postdec1	equ	0xFE5
  5661                           fsr1h	equ	0xFE2
  5662                           fsr1l	equ	0xFE1
  5663                           indf2	equ	0xFDF
  5664                           postinc2	equ	0xFDE
  5665                           fsr2h	equ	0xFDA
  5666                           fsr2l	equ	0xFD9
  5667                           status	equ	0xFD8
  5668                           
  5669 ;; *************** function _CollectTxStatusParams *****************
  5670 ;; Defined at:
  5671 ;;		line 160 in file "SystemStatus.c"
  5672 ;; Parameters:    Size  Location     Type
  5673 ;;		None
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;		None
  5676 ;; Return value:  Size  Location     Type
  5677 ;;                  1    wreg      void 
  5678 ;; Registers used:
  5679 ;;		wreg, status,2, status,0, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5685 ;;      Params:         0       0       0       0       0       0       0
  5686 ;;      Locals:         0       0       0       0       0       0       0
  5687 ;;      Temps:          0       0       0       0       0       0       0
  5688 ;;      Totals:         0       0       0       0       0       0       0
  5689 ;;Total ram usage:        0 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    5
  5692 ;; This function calls:
  5693 ;;		___lltoft
  5694 ;;		___lwtoft
  5695 ;; This function is called by:
  5696 ;;		_GroupTx
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           	psect	text7
  5701  00398C                     __ptext7:
  5702                           	opt stack 0
  5703  00398C                     _CollectTxStatusParams:
  5704                           	opt stack 23
  5705                           
  5706                           ;SystemStatus.c: 162: txStatistics.Synt = txFreq;
  5707                           
  5708                           ;incstack = 0
  5709  00398C  C1C8  F185         	movff	_txFreq,_txStatistics	;volatile
  5710                           
  5711                           ;SystemStatus.c: 163: txStatistics.DeviceTemperature = lastAdcTemp;
  5712  003990  C1DE  F020         	movff	_lastAdcTemp,___lwtoft@c	;volatile
  5713  003994  C1DF  F021         	movff	_lastAdcTemp+1,___lwtoft@c+1	;volatile
  5714  003998  ECFF  F021         	call	___lwtoft	;wreg free
  5715  00399C  C020  F18B         	movff	?___lwtoft,_txStatistics+6	;volatile
  5716  0039A0  C021  F18C         	movff	?___lwtoft+1,_txStatistics+7	;volatile
  5717  0039A4  C022  F18D         	movff	?___lwtoft+2,_txStatistics+8	;volatile
  5718                           
  5719                           ;SystemStatus.c: 164: txStatistics.InputPowerStatus = PORTDbits.RD6;
  5720  0039A8  0E00               	movlw	0
  5721  0039AA  BC83               	btfsc	3971,6,c	;volatile
  5722  0039AC  0E01               	movlw	1
  5723  0039AE  0101               	movlb	1	; () banked
  5724  0039B0  6F8E               	movwf	(_txStatistics+9)& (0+255),b	;volatile
  5725                           
  5726                           ; BSR set to: 1
  5727                           ;SystemStatus.c: 165: txStatistics.Freq = txFreq;
  5728  0039B2  C1C8  F020         	movff	_txFreq,___lltoft@c	;volatile
  5729  0039B6  C1C9  F021         	movff	_txFreq+1,___lltoft@c+1	;volatile
  5730  0039BA  C1CA  F022         	movff	_txFreq+2,___lltoft@c+2	;volatile
  5731  0039BE  C1CB  F023         	movff	_txFreq+3,___lltoft@c+3	;volatile
  5732  0039C2  EC9A  F01E         	call	___lltoft	;wreg free
  5733  0039C6  C020  F18F         	movff	?___lltoft,_txStatistics+10	;volatile
  5734  0039CA  C021  F190         	movff	?___lltoft+1,_txStatistics+11	;volatile
  5735  0039CE  C022  F191         	movff	?___lltoft+2,_txStatistics+12	;volatile
  5736                           
  5737                           ;SystemStatus.c: 166: txStatistics.RSSI = lastAdcFfwrRSSI;
  5738  0039D2  C1DC  F192         	movff	_lastAdcFfwrRSSI,_txStatistics+13	;volatile
  5739                           
  5740                           ;SystemStatus.c: 167: txStatistics.Light = PORTBbits.RB3;
  5741  0039D6  0E00               	movlw	0
  5742  0039D8  B681               	btfsc	3969,3,c	;volatile
  5743  0039DA  0E01               	movlw	1
  5744  0039DC  0101               	movlb	1	; () banked
  5745  0039DE  6F96               	movwf	(_txStatistics+17)& (0+255),b	;volatile
  5746                           
  5747                           ; BSR set to: 1
  5748                           ;SystemStatus.c: 168: txStatistics.UnitId = 123;
  5749  0039E0  0E7B               	movlw	123
  5750  0039E2  6F97               	movwf	(_txStatistics+18)& (0+255),b	;volatile
  5751                           
  5752                           ; BSR set to: 1
  5753                           ;SystemStatus.c: 169: txStatistics.UnitDc = 1234;
  5754  0039E4  0E04               	movlw	4
  5755  0039E6  6F99               	movwf	(_txStatistics+20)& (0+255),b	;volatile
  5756  0039E8  0ED2               	movlw	210
  5757  0039EA  6F98               	movwf	(_txStatistics+19)& (0+255),b	;volatile
  5758                           
  5759                           ; BSR set to: 1
  5760                           ;SystemStatus.c: 170: txStatistics.SwVersion = "1_002";
  5761  0039EC  0EF0               	movlw	low STR_17
  5762  0039EE  6F9A               	movwf	(_txStatistics+21)& (0+255),b	;volatile
  5763  0039F0  0E7F               	movlw	high STR_17
  5764  0039F2  6F9B               	movwf	(_txStatistics+22)& (0+255),b	;volatile
  5765                           
  5766                           ; BSR set to: 1
  5767                           ;SystemStatus.c: 171: txStatistics.UnitType = 1;
  5768  0039F4  0E01               	movlw	1
  5769  0039F6  6F9C               	movwf	(_txStatistics+23)& (0+255),b	;volatile
  5770                           
  5771                           ; BSR set to: 1
  5772                           ;SystemStatus.c: 173: txStatistics.AdcValues.ADC0 = 0x7;
  5773  0039F8  0E00               	movlw	0
  5774  0039FA  6F88               	movwf	(_txStatistics+3)& (0+255),b	;volatile
  5775  0039FC  0E07               	movlw	7
  5776  0039FE  6F87               	movwf	(_txStatistics+2)& (0+255),b	;volatile
  5777                           
  5778                           ; BSR set to: 1
  5779  003A00  0012               	return		;funcret
  5780  003A02                     __end_of_CollectTxStatusParams:
  5781                           	opt stack 0
  5782                           tosu	equ	0xFFF
  5783                           tosh	equ	0xFFE
  5784                           tosl	equ	0xFFD
  5785                           pclath	equ	0xFFA
  5786                           tblptru	equ	0xFF8
  5787                           tblptrh	equ	0xFF7
  5788                           tblptrl	equ	0xFF6
  5789                           tablat	equ	0xFF5
  5790                           prodh	equ	0xFF4
  5791                           prodl	equ	0xFF3
  5792                           postinc0	equ	0xFEE
  5793                           wreg	equ	0xFE8
  5794                           indf1	equ	0xFE7
  5795                           postdec1	equ	0xFE5
  5796                           fsr1h	equ	0xFE2
  5797                           fsr1l	equ	0xFE1
  5798                           indf2	equ	0xFDF
  5799                           postinc2	equ	0xFDE
  5800                           fsr2h	equ	0xFDA
  5801                           fsr2l	equ	0xFD9
  5802                           status	equ	0xFD8
  5803                           
  5804 ;; *************** function _PrintRxStatus *****************
  5805 ;; Defined at:
  5806 ;;		line 176 in file "SystemStatus.c"
  5807 ;; Parameters:    Size  Location     Type
  5808 ;;		None
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;  dest           80    0[BANK1 ] unsigned char [80]
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  1    wreg      void 
  5813 ;; Registers used:
  5814 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5820 ;;      Params:         0       0       0       0       0       0       0
  5821 ;;      Locals:         0       0      80       0       0       0       0
  5822 ;;      Temps:          0       0       0       0       0       0       0
  5823 ;;      Totals:         0       0      80       0       0       0       0
  5824 ;;Total ram usage:       80 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    7
  5827 ;; This function calls:
  5828 ;;		_UART_Write_Text
  5829 ;;		_sprintf
  5830 ;; This function is called by:
  5831 ;;		_GroupRx
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835                           	psect	text8
  5836  00168A                     __ptext8:
  5837                           	opt stack 0
  5838  00168A                     _PrintRxStatus:
  5839                           	opt stack 21
  5840                           
  5841                           ;SystemStatus.c: 178: char dest[80];
  5842                           ;SystemStatus.c: 179: sprintf(dest, "*******************\n\r");
  5843                           
  5844                           ; BSR set to: 1
  5845                           ;incstack = 0
  5846  00168A  0E00               	movlw	low PrintRxStatus@dest
  5847  00168C  0100               	movlb	0	; () banked
  5848  00168E  6FBC               	movwf	sprintf@sp& (0+255),b
  5849  001690  0E01               	movlw	high PrintRxStatus@dest
  5850  001692  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5851  001694  0E09               	movlw	low STR_46
  5852  001696  6FBE               	movwf	sprintf@f& (0+255),b
  5853  001698  0E7F               	movlw	high STR_46
  5854  00169A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5855  00169C  EC70  F000         	call	_sprintf	;wreg free
  5856                           
  5857                           ;SystemStatus.c: 180: UART_Write_Text(dest);
  5858  0016A0  0E00               	movlw	low PrintRxStatus@dest
  5859  0016A2  6E19               	movwf	UART_Write_Text@text,c
  5860  0016A4  0E01               	movlw	high PrintRxStatus@dest
  5861  0016A6  6E1A               	movwf	UART_Write_Text@text+1,c
  5862  0016A8  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5863                           
  5864                           ;SystemStatus.c: 181: sprintf(dest, "RX SYNTH (PLL) Lock indication 0: not locked 1: loc
      +                          ked%d\n\r",rxStatistics.Synt);
  5865  0016AC  0E00               	movlw	low PrintRxStatus@dest
  5866  0016AE  0100               	movlb	0	; () banked
  5867  0016B0  6FBC               	movwf	sprintf@sp& (0+255),b
  5868  0016B2  0E01               	movlw	high PrintRxStatus@dest
  5869  0016B4  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5870  0016B6  0E32               	movlw	low STR_47
  5871  0016B8  6FBE               	movwf	sprintf@f& (0+255),b
  5872  0016BA  0E7C               	movlw	high STR_47
  5873  0016BC  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5874  0016BE  C1A3  F0C0         	movff	_rxStatistics,?_sprintf+4	;volatile
  5875  0016C2  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5876  0016C4  EC70  F000         	call	_sprintf	;wreg free
  5877                           
  5878                           ;SystemStatus.c: 182: UART_Write_Text(dest);
  5879  0016C8  0E00               	movlw	low PrintRxStatus@dest
  5880  0016CA  6E19               	movwf	UART_Write_Text@text,c
  5881  0016CC  0E01               	movlw	high PrintRxStatus@dest
  5882  0016CE  6E1A               	movwf	UART_Write_Text@text+1,c
  5883  0016D0  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5884                           
  5885                           ;SystemStatus.c: 183: sprintf(dest, "Device Temperature %f\n\r",rxStatistics.DeviceTempe
      +                          rature);
  5886  0016D4  0E00               	movlw	low PrintRxStatus@dest
  5887  0016D6  0100               	movlb	0	; () banked
  5888  0016D8  6FBC               	movwf	sprintf@sp& (0+255),b
  5889  0016DA  0E01               	movlw	high PrintRxStatus@dest
  5890  0016DC  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5891  0016DE  0E93               	movlw	low STR_48
  5892  0016E0  6FBE               	movwf	sprintf@f& (0+255),b
  5893  0016E2  0E7E               	movlw	high STR_48
  5894  0016E4  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5895  0016E6  C1A9  F0C0         	movff	_rxStatistics+6,?_sprintf+4	;volatile
  5896  0016EA  C1AA  F0C1         	movff	_rxStatistics+7,?_sprintf+5	;volatile
  5897  0016EE  C1AB  F0C2         	movff	_rxStatistics+8,?_sprintf+6	;volatile
  5898  0016F2  EC70  F000         	call	_sprintf	;wreg free
  5899                           
  5900                           ;SystemStatus.c: 184: UART_Write_Text(dest);
  5901  0016F6  0E00               	movlw	low PrintRxStatus@dest
  5902  0016F8  6E19               	movwf	UART_Write_Text@text,c
  5903  0016FA  0E01               	movlw	high PrintRxStatus@dest
  5904  0016FC  6E1A               	movwf	UART_Write_Text@text+1,c
  5905  0016FE  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5906                           
  5907                           ;SystemStatus.c: 185: sprintf(dest, "Input power status 0: OFF 1: ON%d\n\r",rxStatistics
      +                          .InputPowerStatus);
  5908  001702  0E00               	movlw	low PrintRxStatus@dest
  5909  001704  0100               	movlb	0	; () banked
  5910  001706  6FBC               	movwf	sprintf@sp& (0+255),b
  5911  001708  0E01               	movlw	high PrintRxStatus@dest
  5912  00170A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5913  00170C  0E9A               	movlw	low STR_49
  5914  00170E  6FBE               	movwf	sprintf@f& (0+255),b
  5915  001710  0E7D               	movlw	high STR_49
  5916  001712  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5917  001714  C1AC  F0C0         	movff	_rxStatistics+9,?_sprintf+4	;volatile
  5918  001718  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5919  00171A  EC70  F000         	call	_sprintf	;wreg free
  5920                           
  5921                           ;SystemStatus.c: 186: UART_Write_Text(dest);
  5922  00171E  0E00               	movlw	low PrintRxStatus@dest
  5923  001720  6E19               	movwf	UART_Write_Text@text,c
  5924  001722  0E01               	movlw	high PrintRxStatus@dest
  5925  001724  6E1A               	movwf	UART_Write_Text@text+1,c
  5926  001726  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5927                           
  5928                           ;SystemStatus.c: 187: sprintf(dest, "RX Frequency in MHz%f\n\r",rxStatistics.Freq);
  5929  00172A  0E00               	movlw	low PrintRxStatus@dest
  5930  00172C  0100               	movlb	0	; () banked
  5931  00172E  6FBC               	movwf	sprintf@sp& (0+255),b
  5932  001730  0E01               	movlw	high PrintRxStatus@dest
  5933  001732  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5934  001734  0EAB               	movlw	low STR_50
  5935  001736  6FBE               	movwf	sprintf@f& (0+255),b
  5936  001738  0E7E               	movlw	high STR_50
  5937  00173A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5938  00173C  C1AD  F0C0         	movff	_rxStatistics+10,?_sprintf+4	;volatile
  5939  001740  C1AE  F0C1         	movff	_rxStatistics+11,?_sprintf+5	;volatile
  5940  001744  C1AF  F0C2         	movff	_rxStatistics+12,?_sprintf+6	;volatile
  5941  001748  EC70  F000         	call	_sprintf	;wreg free
  5942                           
  5943                           ;SystemStatus.c: 188: UART_Write_Text(dest);
  5944  00174C  0E00               	movlw	low PrintRxStatus@dest
  5945  00174E  6E19               	movwf	UART_Write_Text@text,c
  5946  001750  0E01               	movlw	high PrintRxStatus@dest
  5947  001752  6E1A               	movwf	UART_Write_Text@text+1,c
  5948  001754  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5949                           
  5950                           ;SystemStatus.c: 189: sprintf(dest, "RSSI %d\n\r",rxStatistics.RSSI);
  5951  001758  0E00               	movlw	low PrintRxStatus@dest
  5952  00175A  0100               	movlb	0	; () banked
  5953  00175C  6FBC               	movwf	sprintf@sp& (0+255),b
  5954  00175E  0E01               	movlw	high PrintRxStatus@dest
  5955  001760  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5956  001762  0EC3               	movlw	low STR_51
  5957  001764  6FBE               	movwf	sprintf@f& (0+255),b
  5958  001766  0E7F               	movlw	high STR_51
  5959  001768  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5960  00176A  0101               	movlb	1	; () banked
  5961  00176C  51B0               	movf	(_rxStatistics+13)& (0+255),w,b	;volatile
  5962  00176E  0100               	movlb	0	; () banked
  5963  001770  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  5964  001772  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5965  001774  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  5966  001776  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  5967  001778  EC70  F000         	call	_sprintf	;wreg free
  5968                           
  5969                           ;SystemStatus.c: 190: UART_Write_Text(dest);
  5970  00177C  0E00               	movlw	low PrintRxStatus@dest
  5971  00177E  6E19               	movwf	UART_Write_Text@text,c
  5972  001780  0E01               	movlw	high PrintRxStatus@dest
  5973  001782  6E1A               	movwf	UART_Write_Text@text+1,c
  5974  001784  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5975                           
  5976                           ;SystemStatus.c: 191: sprintf(dest, "Light 0: OFF 1: ON%d\n\r",rxStatistics.Light);
  5977  001788  0E00               	movlw	low PrintRxStatus@dest
  5978  00178A  0100               	movlb	0	; () banked
  5979  00178C  6FBC               	movwf	sprintf@sp& (0+255),b
  5980  00178E  0E01               	movlw	high PrintRxStatus@dest
  5981  001790  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5982  001792  0EF2               	movlw	low STR_52
  5983  001794  6FBE               	movwf	sprintf@f& (0+255),b
  5984  001796  0E7E               	movlw	high STR_52
  5985  001798  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5986  00179A  C1B4  F0C0         	movff	_rxStatistics+17,?_sprintf+4	;volatile
  5987  00179E  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5988  0017A0  EC70  F000         	call	_sprintf	;wreg free
  5989                           
  5990                           ;SystemStatus.c: 192: UART_Write_Text(dest);
  5991  0017A4  0E00               	movlw	low PrintRxStatus@dest
  5992  0017A6  6E19               	movwf	UART_Write_Text@text,c
  5993  0017A8  0E01               	movlw	high PrintRxStatus@dest
  5994  0017AA  6E1A               	movwf	UART_Write_Text@text+1,c
  5995  0017AC  EC01  F01D         	call	_UART_Write_Text	;wreg free
  5996                           
  5997                           ;SystemStatus.c: 193: sprintf(dest, "UNIT ID %d\n\r",rxStatistics.UnitId);
  5998  0017B0  0E00               	movlw	low PrintRxStatus@dest
  5999  0017B2  0100               	movlb	0	; () banked
  6000  0017B4  6FBC               	movwf	sprintf@sp& (0+255),b
  6001  0017B6  0E01               	movlw	high PrintRxStatus@dest
  6002  0017B8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6003  0017BA  0E9F               	movlw	low STR_53
  6004  0017BC  6FBE               	movwf	sprintf@f& (0+255),b
  6005  0017BE  0E7F               	movlw	high STR_53
  6006  0017C0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6007  0017C2  0101               	movlb	1	; () banked
  6008  0017C4  51B5               	movf	(_rxStatistics+18)& (0+255),w,b	;volatile
  6009  0017C6  0100               	movlb	0	; () banked
  6010  0017C8  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  6011  0017CA  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  6012  0017CC  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  6013  0017CE  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  6014  0017D0  EC70  F000         	call	_sprintf	;wreg free
  6015                           
  6016                           ;SystemStatus.c: 194: UART_Write_Text(dest);
  6017  0017D4  0E00               	movlw	low PrintRxStatus@dest
  6018  0017D6  6E19               	movwf	UART_Write_Text@text,c
  6019  0017D8  0E01               	movlw	high PrintRxStatus@dest
  6020  0017DA  6E1A               	movwf	UART_Write_Text@text+1,c
  6021  0017DC  EC01  F01D         	call	_UART_Write_Text	;wreg free
  6022                           
  6023                           ;SystemStatus.c: 195: sprintf(dest, "UNIT DC %d\n\r",rxStatistics.UnitDc);
  6024  0017E0  0E00               	movlw	low PrintRxStatus@dest
  6025  0017E2  0100               	movlb	0	; () banked
  6026  0017E4  6FBC               	movwf	sprintf@sp& (0+255),b
  6027  0017E6  0E01               	movlw	high PrintRxStatus@dest
  6028  0017E8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6029  0017EA  0E92               	movlw	low STR_54
  6030  0017EC  6FBE               	movwf	sprintf@f& (0+255),b
  6031  0017EE  0E7F               	movlw	high STR_54
  6032  0017F0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6033  0017F2  C1B6  F0C0         	movff	_rxStatistics+19,?_sprintf+4	;volatile
  6034  0017F6  C1B7  F0C1         	movff	_rxStatistics+20,?_sprintf+5	;volatile
  6035  0017FA  EC70  F000         	call	_sprintf	;wreg free
  6036                           
  6037                           ;SystemStatus.c: 196: UART_Write_Text(dest);
  6038  0017FE  0E00               	movlw	low PrintRxStatus@dest
  6039  001800  6E19               	movwf	UART_Write_Text@text,c
  6040  001802  0E01               	movlw	high PrintRxStatus@dest
  6041  001804  6E1A               	movwf	UART_Write_Text@text+1,c
  6042  001806  EC01  F01D         	call	_UART_Write_Text	;wreg free
  6043                           
  6044                           ;SystemStatus.c: 197: sprintf(dest, "SOFTWARE VERSION %s\n\r",rxStatistics.SwVersion);
  6045  00180A  0E00               	movlw	low PrintRxStatus@dest
  6046  00180C  0100               	movlb	0	; () banked
  6047  00180E  6FBC               	movwf	sprintf@sp& (0+255),b
  6048  001810  0E01               	movlw	high PrintRxStatus@dest
  6049  001812  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6050  001814  0E1F               	movlw	low STR_55
  6051  001816  6FBE               	movwf	sprintf@f& (0+255),b
  6052  001818  0E7F               	movlw	high STR_55
  6053  00181A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6054  00181C  C1B8  F0C0         	movff	_rxStatistics+21,?_sprintf+4	;volatile
  6055  001820  C1B9  F0C1         	movff	_rxStatistics+22,?_sprintf+5	;volatile
  6056  001824  EC70  F000         	call	_sprintf	;wreg free
  6057                           
  6058                           ;SystemStatus.c: 198: UART_Write_Text(dest);
  6059  001828  0E00               	movlw	low PrintRxStatus@dest
  6060  00182A  6E19               	movwf	UART_Write_Text@text,c
  6061  00182C  0E01               	movlw	high PrintRxStatus@dest
  6062  00182E  6E1A               	movwf	UART_Write_Text@text+1,c
  6063  001830  EC01  F01D         	call	_UART_Write_Text	;wreg free
  6064                           
  6065                           ;SystemStatus.c: 199: sprintf(dest, "UNIT TYPE %d\n\r",rxStatistics.UnitType);
  6066  001834  0E00               	movlw	low PrintRxStatus@dest
  6067  001836  0100               	movlb	0	; () banked
  6068  001838  6FBC               	movwf	sprintf@sp& (0+255),b
  6069  00183A  0E01               	movlw	high PrintRxStatus@dest
  6070  00183C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6071  00183E  0E83               	movlw	low STR_56
  6072  001840  6FBE               	movwf	sprintf@f& (0+255),b
  6073  001842  0E7F               	movlw	high STR_56
  6074  001844  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6075  001846  C1BA  F0C0         	movff	_rxStatistics+23,?_sprintf+4	;volatile
  6076  00184A  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  6077  00184C  EC70  F000         	call	_sprintf	;wreg free
  6078                           
  6079                           ;SystemStatus.c: 200: UART_Write_Text(dest);
  6080  001850  0E00               	movlw	low PrintRxStatus@dest
  6081  001852  6E19               	movwf	UART_Write_Text@text,c
  6082  001854  0E01               	movlw	high PrintRxStatus@dest
  6083  001856  6E1A               	movwf	UART_Write_Text@text+1,c
  6084  001858  EC01  F01D         	call	_UART_Write_Text	;wreg free
  6085                           
  6086                           ;SystemStatus.c: 201: sprintf(dest, "*******************\n\r");
  6087  00185C  0E00               	movlw	low PrintRxStatus@dest
  6088  00185E  0100               	movlb	0	; () banked
  6089  001860  6FBC               	movwf	sprintf@sp& (0+255),b
  6090  001862  0E01               	movlw	high PrintRxStatus@dest
  6091  001864  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6092  001866  0E09               	movlw	low STR_46
  6093  001868  6FBE               	movwf	sprintf@f& (0+255),b
  6094  00186A  0E7F               	movlw	high STR_46
  6095  00186C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6096  00186E  EC70  F000         	call	_sprintf	;wreg free
  6097                           
  6098                           ;SystemStatus.c: 202: UART_Write_Text(dest);
  6099  001872  0E00               	movlw	low PrintRxStatus@dest
  6100  001874  6E19               	movwf	UART_Write_Text@text,c
  6101  001876  0E01               	movlw	high PrintRxStatus@dest
  6102  001878  6E1A               	movwf	UART_Write_Text@text+1,c
  6103  00187A  EC01  F01D         	call	_UART_Write_Text	;wreg free
  6104  00187E  0012               	return		;funcret
  6105  001880                     __end_of_PrintRxStatus:
  6106                           	opt stack 0
  6107                           tosu	equ	0xFFF
  6108                           tosh	equ	0xFFE
  6109                           tosl	equ	0xFFD
  6110                           pclath	equ	0xFFA
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           prodh	equ	0xFF4
  6116                           prodl	equ	0xFF3
  6117                           postinc0	equ	0xFEE
  6118                           wreg	equ	0xFE8
  6119                           indf1	equ	0xFE7
  6120                           postdec1	equ	0xFE5
  6121                           fsr1h	equ	0xFE2
  6122                           fsr1l	equ	0xFE1
  6123                           indf2	equ	0xFDF
  6124                           postinc2	equ	0xFDE
  6125                           fsr2h	equ	0xFDA
  6126                           fsr2l	equ	0xFD9
  6127                           status	equ	0xFD8
  6128                           
  6129 ;; *************** function _GetIntFromUartData *****************
  6130 ;; Defined at:
  6131 ;;		line 60 in file "SystemCommon.c"
  6132 ;; Parameters:    Size  Location     Type
  6133 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6134 ;; Auto vars:     Size  Location     Type
  6135 ;;  c               1   20[BANK0 ] unsigned char 
  6136 ;;  idx             2   21[BANK0 ] int 
  6137 ;;  dataRegArr      8   12[BANK0 ] unsigned char [8]
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  4    6[BANK0 ] unsigned long 
  6140 ;; Registers used:
  6141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6147 ;;      Params:         0       4       0       0       0       0       0
  6148 ;;      Locals:         0      11       0       0       0       0       0
  6149 ;;      Temps:          0       2       0       0       0       0       0
  6150 ;;      Totals:         0      17       0       0       0       0       0
  6151 ;;Total ram usage:       17 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    6
  6154 ;; This function calls:
  6155 ;;		_ZeroArray
  6156 ;;		_strtol
  6157 ;; This function is called by:
  6158 ;;		_GroupRx
  6159 ;;		_GroupTx
  6160 ;;		_DacSetValue
  6161 ;;		_UpdateTxFreq
  6162 ;;		_UpdateRxFreq
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           	psect	text9
  6167  0035C6                     __ptext9:
  6168                           	opt stack 0
  6169  0035C6                     _GetIntFromUartData:
  6170                           	opt stack 22
  6171                           
  6172                           ;SystemCommon.c: 62: char dataRegArr[8];
  6173                           ;SystemCommon.c: 63: ZeroArray(dataRegArr, 8);
  6174                           
  6175                           ;incstack = 0
  6176  0035C6  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  6177  0035C8  6E20               	movwf	ZeroArray@array,c
  6178  0035CA  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6179  0035CC  6E21               	movwf	ZeroArray@array+1,c
  6180  0035CE  0E00               	movlw	0
  6181  0035D0  6E23               	movwf	ZeroArray@size+1,c
  6182  0035D2  0E08               	movlw	8
  6183  0035D4  6E22               	movwf	ZeroArray@size,c
  6184  0035D6  EC41  F022         	call	_ZeroArray	;wreg free
  6185                           
  6186                           ;SystemCommon.c: 65: for(int idx = 0; idx < 8; idx++)
  6187  0035DA  0E00               	movlw	0
  6188  0035DC  0100               	movlb	0	; () banked
  6189  0035DE  6F76               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  6190  0035E0  0E00               	movlw	0
  6191  0035E2  6F75               	movwf	GetIntFromUartData@idx& (0+255),b
  6192  0035E4                     l9555:
  6193                           
  6194                           ; BSR set to: 0
  6195  0035E4  BF76               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  6196  0035E6  D006               	goto	l1442
  6197  0035E8  5176               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  6198  0035EA  E120               	bnz	l9573
  6199  0035EC  0E08               	movlw	8
  6200  0035EE  5D75               	subwf	GetIntFromUartData@idx& (0+255),w,b
  6201  0035F0  B0D8               	btfsc	status,0,c
  6202  0035F2  D01C               	goto	u10070
  6203  0035F4                     l1442:
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;SystemCommon.c: 66: {
  6207                           ;SystemCommon.c: 67: char c = data[idx + 1];
  6208                           
  6209                           ; BSR set to: 0
  6210  0035F4  0E01               	movlw	1
  6211  0035F6  2575               	addwf	GetIntFromUartData@idx& (0+255),w,b
  6212  0035F8  6F6A               	movwf	??_GetIntFromUartData& (0+255),b
  6213  0035FA  0E00               	movlw	0
  6214  0035FC  2176               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  6215  0035FE  6F6B               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6216  003600  516A               	movf	??_GetIntFromUartData& (0+255),w,b
  6217  003602  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6218  003604  6ED9               	movwf	fsr2l,c
  6219  003606  516B               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6220  003608  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6221  00360A  6EDA               	movwf	fsr2h,c
  6222  00360C  50DF               	movf	indf2,w,c
  6223  00360E  6F74               	movwf	GetIntFromUartData@c& (0+255),b
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;SystemCommon.c: 68: if(c == (0))
  6227  003610  5174               	movf	GetIntFromUartData@c& (0+255),w,b
  6228  003612  B4D8               	btfsc	status,2,c
  6229  003614  D00B               	goto	u10070
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;SystemCommon.c: 72: else
  6233                           ;SystemCommon.c: 73: {
  6234                           ;SystemCommon.c: 74: dataRegArr[idx] = c;
  6235                           
  6236                           ; BSR set to: 0
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;SystemCommon.c: 71: }
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;SystemCommon.c: 69: {
  6243                           ;SystemCommon.c: 70: break;
  6244  003616  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  6245  003618  2575               	addwf	GetIntFromUartData@idx& (0+255),w,b
  6246  00361A  6ED9               	movwf	fsr2l,c
  6247  00361C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6248  00361E  2176               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  6249  003620  6EDA               	movwf	fsr2h,c
  6250  003622  C074  FFDF         	movff	GetIntFromUartData@c,indf2
  6251                           
  6252                           ; BSR set to: 0
  6253                           
  6254                           ; BSR set to: 0
  6255  003626  4B75               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  6256  003628  2B76               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  6257  00362A  D7DC               	goto	l9555
  6258  00362C                     u10070:
  6259  00362C                     l9573:
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;SystemCommon.c: 75: }
  6263                           ;SystemCommon.c: 76: }
  6264                           ;SystemCommon.c: 78: return strtol(dataRegArr, (0), 10);
  6265  00362C  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  6266  00362E  6E26               	movwf	strtol@s,c
  6267  003630  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6268  003632  6E27               	movwf	strtol@s+1,c
  6269  003634  0E00               	movlw	0
  6270  003636  6E28               	movwf	strtol@endptr,c
  6271  003638  0E00               	movlw	0
  6272  00363A  6E29               	movwf	strtol@endptr+1,c
  6273  00363C  0E00               	movlw	0
  6274  00363E  6E2B               	movwf	strtol@base+1,c
  6275  003640  0E0A               	movlw	10
  6276  003642  6E2A               	movwf	strtol@base,c
  6277  003644  EC3B  F00D         	call	_strtol	;wreg free
  6278  003648  C026  F066         	movff	?_strtol,?_GetIntFromUartData
  6279  00364C  C027  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  6280  003650  C028  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  6281  003654  C029  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  6282  003658  0012               	return	
  6283  00365A                     __end_of_GetIntFromUartData:
  6284                           	opt stack 0
  6285                           tosu	equ	0xFFF
  6286                           tosh	equ	0xFFE
  6287                           tosl	equ	0xFFD
  6288                           pclath	equ	0xFFA
  6289                           tblptru	equ	0xFF8
  6290                           tblptrh	equ	0xFF7
  6291                           tblptrl	equ	0xFF6
  6292                           tablat	equ	0xFF5
  6293                           prodh	equ	0xFF4
  6294                           prodl	equ	0xFF3
  6295                           postinc0	equ	0xFEE
  6296                           wreg	equ	0xFE8
  6297                           indf1	equ	0xFE7
  6298                           postdec1	equ	0xFE5
  6299                           fsr1h	equ	0xFE2
  6300                           fsr1l	equ	0xFE1
  6301                           indf2	equ	0xFDF
  6302                           postinc2	equ	0xFDE
  6303                           fsr2h	equ	0xFDA
  6304                           fsr2l	equ	0xFD9
  6305                           status	equ	0xFD8
  6306                           
  6307 ;; *************** function _strtol *****************
  6308 ;; Defined at:
  6309 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6312 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  6313 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6314 ;;		 -> NULL(0), 
  6315 ;;  base            2   41[COMRAM] int 
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;  a               4    1[BANK0 ] long 
  6318 ;;  c               1    5[BANK0 ] unsigned char 
  6319 ;;  sign            1    0[BANK0 ] unsigned char 
  6320 ;; Return value:  Size  Location     Type
  6321 ;;                  4   37[COMRAM] long 
  6322 ;; Registers used:
  6323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6329 ;;      Params:         6       0       0       0       0       0       0
  6330 ;;      Locals:         0       6       0       0       0       0       0
  6331 ;;      Temps:          4       0       0       0       0       0       0
  6332 ;;      Totals:        10       6       0       0       0       0       0
  6333 ;;Total ram usage:       16 bytes
  6334 ;; Hardware stack levels used:    1
  6335 ;; Hardware stack levels required when called:    5
  6336 ;; This function calls:
  6337 ;;		___lmul
  6338 ;;		_isalpha
  6339 ;;		_isdigit
  6340 ;;		_isspace
  6341 ;;		_toupper
  6342 ;; This function is called by:
  6343 ;;		_GetIntFromUartData
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text10
  6348  001A76                     __ptext10:
  6349                           	opt stack 0
  6350  001A76                     _strtol:
  6351                           	opt stack 22
  6352                           
  6353                           ;incstack = 0
  6354  001A76  C026  FFD9         	movff	strtol@s,fsr2l
  6355  001A7A  C027  FFDA         	movff	strtol@s+1,fsr2h
  6356  001A7E  50DF               	movf	indf2,w,c
  6357  001A80  0100               	movlb	0	; () banked
  6358  001A82  6F65               	movwf	strtol@c& (0+255),b
  6359                           
  6360                           ; BSR set to: 0
  6361  001A84  4A26               	infsnz	strtol@s,f,c
  6362  001A86  2A27               	incf	strtol@s+1,f,c
  6363                           
  6364                           ; BSR set to: 0
  6365  001A88  5165               	movf	strtol@c& (0+255),w,b
  6366  001A8A  ECC7  F021         	call	_isspace
  6367  001A8E  B0D8               	btfsc	status,0,c
  6368  001A90  D7F2               	goto	_strtol
  6369  001A92  0E00               	movlw	0
  6370  001A94  0100               	movlb	0	; () banked
  6371  001A96  6F61               	movwf	strtol@a& (0+255),b
  6372  001A98  0E00               	movlw	0
  6373  001A9A  6F62               	movwf	(strtol@a+1)& (0+255),b
  6374  001A9C  0E00               	movlw	0
  6375  001A9E  6F63               	movwf	(strtol@a+2)& (0+255),b
  6376  001AA0  0E00               	movlw	0
  6377  001AA2  6F64               	movwf	(strtol@a+3)& (0+255),b
  6378  001AA4  0E00               	movlw	0
  6379  001AA6  6F60               	movwf	strtol@sign& (0+255),b
  6380                           
  6381                           ; BSR set to: 0
  6382  001AA8  0E2D               	movlw	45
  6383  001AAA  1965               	xorwf	strtol@c& (0+255),w,b
  6384  001AAC  A4D8               	btfss	status,2,c
  6385  001AAE  D003               	goto	l2355
  6386                           
  6387                           ; BSR set to: 0
  6388  001AB0  0E01               	movlw	1
  6389  001AB2  6F60               	movwf	strtol@sign& (0+255),b
  6390  001AB4  D004               	goto	u9680
  6391  001AB6                     l2355:
  6392                           
  6393                           ; BSR set to: 0
  6394                           
  6395                           ; BSR set to: 0
  6396  001AB6  0E2B               	movlw	43
  6397  001AB8  1965               	xorwf	strtol@c& (0+255),w,b
  6398  001ABA  A4D8               	btfss	status,2,c
  6399  001ABC  D008               	goto	l2357
  6400  001ABE                     u9680:
  6401                           
  6402                           ; BSR set to: 0
  6403  001ABE  C026  FFD9         	movff	strtol@s,fsr2l
  6404  001AC2  C027  FFDA         	movff	strtol@s+1,fsr2h
  6405  001AC6  50DF               	movf	indf2,w,c
  6406  001AC8  6F65               	movwf	strtol@c& (0+255),b
  6407                           
  6408                           ; BSR set to: 0
  6409  001ACA  4A26               	infsnz	strtol@s,f,c
  6410  001ACC  2A27               	incf	strtol@s+1,f,c
  6411  001ACE                     l2357:
  6412                           
  6413                           ; BSR set to: 0
  6414                           
  6415                           ; BSR set to: 0
  6416                           
  6417                           ; BSR set to: 0
  6418  001ACE  0E30               	movlw	48
  6419  001AD0  1965               	xorwf	strtol@c& (0+255),w,b
  6420  001AD2  A4D8               	btfss	status,2,c
  6421  001AD4  D02E               	goto	l2365
  6422                           
  6423                           ; BSR set to: 0
  6424  001AD6  C026  FFD9         	movff	strtol@s,fsr2l
  6425  001ADA  C027  FFDA         	movff	strtol@s+1,fsr2h
  6426  001ADE  50DF               	movf	indf2,w,c
  6427  001AE0  6F65               	movwf	strtol@c& (0+255),b
  6428                           
  6429                           ; BSR set to: 0
  6430  001AE2  4A26               	infsnz	strtol@s,f,c
  6431  001AE4  2A27               	incf	strtol@s+1,f,c
  6432                           
  6433                           ; BSR set to: 0
  6434  001AE6  502A               	movf	strtol@base,w,c
  6435  001AE8  102B               	iorwf	strtol@base+1,w,c
  6436  001AEA  B4D8               	btfsc	status,2,c
  6437  001AEC  D005               	goto	u9710
  6438                           
  6439                           ; BSR set to: 0
  6440  001AEE  0E10               	movlw	16
  6441  001AF0  182A               	xorwf	strtol@base,w,c
  6442  001AF2  102B               	iorwf	strtol@base+1,w,c
  6443  001AF4  A4D8               	btfss	status,2,c
  6444  001AF6  D015               	goto	l2359
  6445  001AF8                     u9710:
  6446                           
  6447                           ; BSR set to: 0
  6448                           
  6449                           ; BSR set to: 0
  6450  001AF8  0E78               	movlw	120
  6451  001AFA  1965               	xorwf	strtol@c& (0+255),w,b
  6452  001AFC  B4D8               	btfsc	status,2,c
  6453  001AFE  D004               	goto	u9730
  6454                           
  6455                           ; BSR set to: 0
  6456  001B00  0E58               	movlw	88
  6457  001B02  1965               	xorwf	strtol@c& (0+255),w,b
  6458  001B04  A4D8               	btfss	status,2,c
  6459  001B06  D00D               	goto	l2359
  6460  001B08                     u9730:
  6461                           
  6462                           ; BSR set to: 0
  6463                           
  6464                           ; BSR set to: 0
  6465  001B08  0E00               	movlw	0
  6466  001B0A  6E2B               	movwf	strtol@base+1,c
  6467  001B0C  0E10               	movlw	16
  6468  001B0E  6E2A               	movwf	strtol@base,c
  6469                           
  6470                           ; BSR set to: 0
  6471  001B10  C026  FFD9         	movff	strtol@s,fsr2l
  6472  001B14  C027  FFDA         	movff	strtol@s+1,fsr2h
  6473  001B18  50DF               	movf	indf2,w,c
  6474  001B1A  6F65               	movwf	strtol@c& (0+255),b
  6475                           
  6476                           ; BSR set to: 0
  6477  001B1C  4A26               	infsnz	strtol@s,f,c
  6478  001B1E  2A27               	incf	strtol@s+1,f,c
  6479  001B20  D008               	goto	l2365
  6480  001B22                     l2359:
  6481                           
  6482                           ; BSR set to: 0
  6483                           
  6484                           ; BSR set to: 0
  6485  001B22  502A               	movf	strtol@base,w,c
  6486  001B24  102B               	iorwf	strtol@base+1,w,c
  6487  001B26  A4D8               	btfss	status,2,c
  6488  001B28  D004               	goto	l2365
  6489                           
  6490                           ; BSR set to: 0
  6491  001B2A  0E00               	movlw	0
  6492  001B2C  6E2B               	movwf	strtol@base+1,c
  6493  001B2E  0E08               	movlw	8
  6494  001B30  6E2A               	movwf	strtol@base,c
  6495  001B32                     l2365:
  6496                           
  6497                           ; BSR set to: 0
  6498                           
  6499                           ; BSR set to: 0
  6500                           
  6501                           ; BSR set to: 0
  6502                           
  6503                           ; BSR set to: 0
  6504  001B32  502A               	movf	strtol@base,w,c
  6505  001B34  102B               	iorwf	strtol@base+1,w,c
  6506  001B36  A4D8               	btfss	status,2,c
  6507  001B38  D004               	goto	l2366
  6508                           
  6509                           ; BSR set to: 0
  6510  001B3A  0E00               	movlw	0
  6511  001B3C  6E2B               	movwf	strtol@base+1,c
  6512  001B3E  0E0A               	movlw	10
  6513  001B40  6E2A               	movwf	strtol@base,c
  6514  001B42                     l2366:
  6515                           
  6516                           ; BSR set to: 0
  6517                           
  6518                           ; BSR set to: 0
  6519                           
  6520                           ; BSR set to: 0
  6521  001B42  5165               	movf	strtol@c& (0+255),w,b
  6522  001B44  ECB3  F021         	call	_isalpha
  6523  001B48  A0D8               	btfss	status,0,c
  6524  001B4A  D008               	goto	l2368
  6525  001B4C  0100               	movlb	0	; () banked
  6526  001B4E  5165               	movf	strtol@c& (0+255),w,b
  6527  001B50  EC8D  F022         	call	_toupper
  6528  001B54  0FC9               	addlw	201
  6529  001B56  0100               	movlb	0	; () banked
  6530  001B58  6F65               	movwf	strtol@c& (0+255),b
  6531  001B5A  D009               	goto	l2371
  6532  001B5C                     l2368:
  6533                           
  6534                           ; BSR set to: 0
  6535  001B5C  0100               	movlb	0	; () banked
  6536  001B5E  5165               	movf	strtol@c& (0+255),w,b
  6537  001B60  EC23  F022         	call	_isdigit
  6538  001B64  A0D8               	btfss	status,0,c
  6539  001B66  D039               	goto	l2372
  6540  001B68  0E30               	movlw	48
  6541  001B6A  0100               	movlb	0	; () banked
  6542  001B6C  5F65               	subwf	strtol@c& (0+255),f,b
  6543  001B6E                     l2371:
  6544                           
  6545                           ; BSR set to: 0
  6546                           
  6547                           ; BSR set to: 0
  6548                           
  6549                           ; BSR set to: 0
  6550  001B6E  5165               	movf	strtol@c& (0+255),w,b
  6551  001B70  6E2C               	movwf	??_strtol& (0+255),c
  6552  001B72  6A2D               	clrf	(??_strtol+1)& (0+255),c
  6553  001B74  502A               	movf	strtol@base,w,c
  6554  001B76  5C2C               	subwf	??_strtol,w,c
  6555  001B78  502D               	movf	??_strtol+1,w,c
  6556  001B7A  0A80               	xorlw	128
  6557  001B7C  6E2E               	movwf	(??_strtol+2)& (0+255),c
  6558  001B7E  502B               	movf	strtol@base+1,w,c
  6559  001B80  0A80               	xorlw	128
  6560  001B82  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  6561  001B84  B0D8               	btfsc	status,0,c
  6562  001B86  D029               	goto	l2372
  6563                           
  6564                           ; BSR set to: 0
  6565                           
  6566                           ; BSR set to: 0
  6567                           
  6568                           ; BSR set to: 0
  6569  001B88  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  6570  001B8C  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  6571  001B90  0E00               	movlw	0
  6572  001B92  BE1B               	btfsc	___lmul@multiplier+1,7,c
  6573  001B94  0EFF               	movlw	-1
  6574  001B96  6E1C               	movwf	___lmul@multiplier+2,c
  6575  001B98  6E1D               	movwf	___lmul@multiplier+3,c
  6576  001B9A  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  6577  001B9E  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  6578  001BA2  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  6579  001BA6  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  6580  001BAA  EC76  F01F         	call	___lmul	;wreg free
  6581  001BAE  0100               	movlb	0	; () banked
  6582  001BB0  5165               	movf	strtol@c& (0+255),w,b
  6583  001BB2  241A               	addwf	?___lmul,w,c
  6584  001BB4  6F61               	movwf	strtol@a& (0+255),b
  6585  001BB6  0E00               	movlw	0
  6586  001BB8  201B               	addwfc	?___lmul+1,w,c
  6587  001BBA  6F62               	movwf	(strtol@a+1)& (0+255),b
  6588  001BBC  0E00               	movlw	0
  6589  001BBE  201C               	addwfc	?___lmul+2,w,c
  6590  001BC0  6F63               	movwf	(strtol@a+2)& (0+255),b
  6591  001BC2  0E00               	movlw	0
  6592  001BC4  201D               	addwfc	?___lmul+3,w,c
  6593  001BC6  6F64               	movwf	(strtol@a+3)& (0+255),b
  6594                           
  6595                           ; BSR set to: 0
  6596  001BC8  C026  FFD9         	movff	strtol@s,fsr2l
  6597  001BCC  C027  FFDA         	movff	strtol@s+1,fsr2h
  6598  001BD0  50DF               	movf	indf2,w,c
  6599  001BD2  6F65               	movwf	strtol@c& (0+255),b
  6600                           
  6601                           ; BSR set to: 0
  6602  001BD4  4A26               	infsnz	strtol@s,f,c
  6603  001BD6  2A27               	incf	strtol@s+1,f,c
  6604  001BD8  D7B4               	goto	l2366
  6605  001BDA                     l2372:
  6606                           
  6607                           ; BSR set to: 0
  6608  001BDA  5028               	movf	strtol@endptr,w,c
  6609  001BDC  1029               	iorwf	strtol@endptr+1,w,c
  6610  001BDE  B4D8               	btfsc	status,2,c
  6611  001BE0  D00E               	goto	l2374
  6612  001BE2  0EFF               	movlw	255
  6613  001BE4  2426               	addwf	strtol@s,w,c
  6614  001BE6  6E2C               	movwf	??_strtol& (0+255),c
  6615  001BE8  0EFF               	movlw	255
  6616  001BEA  2027               	addwfc	strtol@s+1,w,c
  6617  001BEC  6E2D               	movwf	(??_strtol+1)& (0+255),c
  6618  001BEE  C028  FFD9         	movff	strtol@endptr,fsr2l
  6619  001BF2  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  6620  001BF6  C02C  FFDE         	movff	??_strtol,postinc2
  6621  001BFA  C02D  FFDD         	movff	??_strtol+1,postdec2
  6622  001BFE                     l2374:
  6623  001BFE  0100               	movlb	0	; () banked
  6624  001C00  5160               	movf	strtol@sign& (0+255),w,b
  6625  001C02  B4D8               	btfsc	status,2,c
  6626  001C04  D01A               	goto	l2375
  6627                           
  6628                           ; BSR set to: 0
  6629  001C06  C061  F02C         	movff	strtol@a,??_strtol
  6630  001C0A  C062  F02D         	movff	strtol@a+1,??_strtol+1
  6631  001C0E  C063  F02E         	movff	strtol@a+2,??_strtol+2
  6632  001C12  C064  F02F         	movff	strtol@a+3,??_strtol+3
  6633  001C16  1E2C               	comf	??_strtol,f,c
  6634  001C18  1E2D               	comf	??_strtol+1,f,c
  6635  001C1A  1E2E               	comf	??_strtol+2,f,c
  6636  001C1C  1E2F               	comf	??_strtol+3,f,c
  6637  001C1E  2A2C               	incf	??_strtol,f,c
  6638  001C20  0E00               	movlw	0
  6639  001C22  222D               	addwfc	??_strtol+1,f,c
  6640  001C24  222E               	addwfc	??_strtol+2,f,c
  6641  001C26  222F               	addwfc	??_strtol+3,f,c
  6642  001C28  C02C  F026         	movff	??_strtol,?_strtol
  6643  001C2C  C02D  F027         	movff	??_strtol+1,?_strtol+1
  6644  001C30  C02E  F028         	movff	??_strtol+2,?_strtol+2
  6645  001C34  C02F  F029         	movff	??_strtol+3,?_strtol+3
  6646                           
  6647                           ; BSR set to: 0
  6648  001C38  0012               	return	
  6649  001C3A                     l2375:
  6650                           
  6651                           ; BSR set to: 0
  6652  001C3A  C061  F026         	movff	strtol@a,?_strtol
  6653  001C3E  C062  F027         	movff	strtol@a+1,?_strtol+1
  6654  001C42  C063  F028         	movff	strtol@a+2,?_strtol+2
  6655  001C46  C064  F029         	movff	strtol@a+3,?_strtol+3
  6656                           
  6657                           ; BSR set to: 0
  6658  001C4A  0012               	return		;funcret
  6659  001C4C                     __end_of_strtol:
  6660                           	opt stack 0
  6661                           tosu	equ	0xFFF
  6662                           tosh	equ	0xFFE
  6663                           tosl	equ	0xFFD
  6664                           pclath	equ	0xFFA
  6665                           tblptru	equ	0xFF8
  6666                           tblptrh	equ	0xFF7
  6667                           tblptrl	equ	0xFF6
  6668                           tablat	equ	0xFF5
  6669                           prodh	equ	0xFF4
  6670                           prodl	equ	0xFF3
  6671                           postinc0	equ	0xFEE
  6672                           wreg	equ	0xFE8
  6673                           indf1	equ	0xFE7
  6674                           postdec1	equ	0xFE5
  6675                           fsr1h	equ	0xFE2
  6676                           fsr1l	equ	0xFE1
  6677                           indf2	equ	0xFDF
  6678                           postinc2	equ	0xFDE
  6679                           postdec2	equ	0xFDD
  6680                           fsr2h	equ	0xFDA
  6681                           fsr2l	equ	0xFD9
  6682                           status	equ	0xFD8
  6683                           
  6684 ;; *************** function _toupper *****************
  6685 ;; Defined at:
  6686 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;  c               1    wreg     unsigned char 
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  c               1   23[COMRAM] unsigned char 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      unsigned char 
  6693 ;; Registers used:
  6694 ;;		wreg, status,2, status,0
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6700 ;;      Params:         0       0       0       0       0       0       0
  6701 ;;      Locals:         1       0       0       0       0       0       0
  6702 ;;      Temps:          0       0       0       0       0       0       0
  6703 ;;      Totals:         1       0       0       0       0       0       0
  6704 ;;Total ram usage:        1 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    3
  6707 ;; This function calls:
  6708 ;;		Nothing
  6709 ;; This function is called by:
  6710 ;;		_readUartByte
  6711 ;;		_strtol
  6712 ;; This function uses a non-reentrant model
  6713 ;;
  6714                           
  6715                           	psect	text11
  6716  00451A                     __ptext11:
  6717                           	opt stack 0
  6718  00451A                     _toupper:
  6719                           	opt stack 26
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;incstack = 0
  6723                           ;toupper@c stored from wreg
  6724  00451A  6E18               	movwf	toupper@c,c
  6725  00451C  0E7B               	movlw	123
  6726  00451E  6018               	cpfslt	toupper@c,c
  6727  004520  D004               	goto	l2379
  6728  004522  0E60               	movlw	96
  6729  004524  6418               	cpfsgt	toupper@c,c
  6730  004526  D001               	goto	l2379
  6731  004528  9A18               	bcf	toupper@c,5,c
  6732  00452A                     l2379:
  6733  00452A  5018               	movf	toupper@c,w,c
  6734  00452C  0012               	return	
  6735  00452E                     __end_of_toupper:
  6736                           	opt stack 0
  6737                           tosu	equ	0xFFF
  6738                           tosh	equ	0xFFE
  6739                           tosl	equ	0xFFD
  6740                           pclath	equ	0xFFA
  6741                           tblptru	equ	0xFF8
  6742                           tblptrh	equ	0xFF7
  6743                           tblptrl	equ	0xFF6
  6744                           tablat	equ	0xFF5
  6745                           prodh	equ	0xFF4
  6746                           prodl	equ	0xFF3
  6747                           postinc0	equ	0xFEE
  6748                           wreg	equ	0xFE8
  6749                           indf1	equ	0xFE7
  6750                           postdec1	equ	0xFE5
  6751                           fsr1h	equ	0xFE2
  6752                           fsr1l	equ	0xFE1
  6753                           indf2	equ	0xFDF
  6754                           postinc2	equ	0xFDE
  6755                           postdec2	equ	0xFDD
  6756                           fsr2h	equ	0xFDA
  6757                           fsr2l	equ	0xFD9
  6758                           status	equ	0xFD8
  6759                           
  6760 ;; *************** function _isspace *****************
  6761 ;; Defined at:
  6762 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  c               1    wreg     unsigned char 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  c               1   25[COMRAM] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;		None               void
  6769 ;; Registers used:
  6770 ;;		wreg, status,2, status,0
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6776 ;;      Params:         0       0       0       0       0       0       0
  6777 ;;      Locals:         2       0       0       0       0       0       0
  6778 ;;      Temps:          1       0       0       0       0       0       0
  6779 ;;      Totals:         3       0       0       0       0       0       0
  6780 ;;Total ram usage:        3 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:    3
  6783 ;; This function calls:
  6784 ;;		Nothing
  6785 ;; This function is called by:
  6786 ;;		_strtol
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           	psect	text12
  6791  00438E                     __ptext12:
  6792                           	opt stack 0
  6793  00438E                     _isspace:
  6794                           	opt stack 23
  6795                           
  6796                           ;incstack = 0
  6797                           ;isspace@c stored from wreg
  6798  00438E  6E1A               	movwf	isspace@c,c
  6799  004390  0E01               	movlw	1
  6800  004392  6E19               	movwf	_isspace$3619,c
  6801  004394  0E20               	movlw	32
  6802  004396  181A               	xorwf	isspace@c,w,c
  6803  004398  B4D8               	btfsc	status,2,c
  6804  00439A  D008               	goto	l2461
  6805  00439C  0E0E               	movlw	14
  6806  00439E  601A               	cpfslt	isspace@c,c
  6807  0043A0  D003               	goto	u9080
  6808  0043A2  0E09               	movlw	9
  6809  0043A4  601A               	cpfslt	isspace@c,c
  6810  0043A6  D002               	goto	l2461
  6811  0043A8                     u9080:
  6812  0043A8  0E00               	movlw	0
  6813  0043AA  6E19               	movwf	_isspace$3619,c
  6814  0043AC                     l2461:
  6815  0043AC  C019  F018         	movff	_isspace$3619,??_isspace
  6816  0043B0  3018               	rrcf	??_isspace,w,c
  6817  0043B2  0012               	return	
  6818  0043B4                     __end_of_isspace:
  6819                           	opt stack 0
  6820                           tosu	equ	0xFFF
  6821                           tosh	equ	0xFFE
  6822                           tosl	equ	0xFFD
  6823                           pclath	equ	0xFFA
  6824                           tblptru	equ	0xFF8
  6825                           tblptrh	equ	0xFF7
  6826                           tblptrl	equ	0xFF6
  6827                           tablat	equ	0xFF5
  6828                           prodh	equ	0xFF4
  6829                           prodl	equ	0xFF3
  6830                           postinc0	equ	0xFEE
  6831                           wreg	equ	0xFE8
  6832                           indf1	equ	0xFE7
  6833                           postdec1	equ	0xFE5
  6834                           fsr1h	equ	0xFE2
  6835                           fsr1l	equ	0xFE1
  6836                           indf2	equ	0xFDF
  6837                           postinc2	equ	0xFDE
  6838                           postdec2	equ	0xFDD
  6839                           fsr2h	equ	0xFDA
  6840                           fsr2l	equ	0xFD9
  6841                           status	equ	0xFD8
  6842                           
  6843 ;; *************** function _isdigit *****************
  6844 ;; Defined at:
  6845 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;  c               1    wreg     unsigned char 
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;  c               1   25[COMRAM] unsigned char 
  6850 ;; Return value:  Size  Location     Type
  6851 ;;		None               void
  6852 ;; Registers used:
  6853 ;;		wreg, status,2, status,0
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6859 ;;      Params:         0       0       0       0       0       0       0
  6860 ;;      Locals:         2       0       0       0       0       0       0
  6861 ;;      Temps:          1       0       0       0       0       0       0
  6862 ;;      Totals:         3       0       0       0       0       0       0
  6863 ;;Total ram usage:        3 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:    3
  6866 ;; This function calls:
  6867 ;;		Nothing
  6868 ;; This function is called by:
  6869 ;;		_strtol
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           	psect	text13
  6874  004446                     __ptext13:
  6875                           	opt stack 0
  6876  004446                     _isdigit:
  6877                           	opt stack 23
  6878                           
  6879                           ;incstack = 0
  6880                           ;isdigit@c stored from wreg
  6881  004446  6E1A               	movwf	isdigit@c,c
  6882  004448  0E00               	movlw	0
  6883  00444A  6E19               	movwf	_isdigit$3616,c
  6884  00444C  0E3A               	movlw	58
  6885  00444E  601A               	cpfslt	isdigit@c,c
  6886  004450  D005               	goto	l2456
  6887  004452  0E2F               	movlw	47
  6888  004454  641A               	cpfsgt	isdigit@c,c
  6889  004456  D002               	goto	l2456
  6890  004458  0E01               	movlw	1
  6891  00445A  6E19               	movwf	_isdigit$3616,c
  6892  00445C                     l2456:
  6893  00445C  C019  F018         	movff	_isdigit$3616,??_isdigit
  6894  004460  3018               	rrcf	??_isdigit,w,c
  6895  004462  0012               	return	
  6896  004464                     __end_of_isdigit:
  6897                           	opt stack 0
  6898                           tosu	equ	0xFFF
  6899                           tosh	equ	0xFFE
  6900                           tosl	equ	0xFFD
  6901                           pclath	equ	0xFFA
  6902                           tblptru	equ	0xFF8
  6903                           tblptrh	equ	0xFF7
  6904                           tblptrl	equ	0xFF6
  6905                           tablat	equ	0xFF5
  6906                           prodh	equ	0xFF4
  6907                           prodl	equ	0xFF3
  6908                           postinc0	equ	0xFEE
  6909                           wreg	equ	0xFE8
  6910                           indf1	equ	0xFE7
  6911                           postdec1	equ	0xFE5
  6912                           fsr1h	equ	0xFE2
  6913                           fsr1l	equ	0xFE1
  6914                           indf2	equ	0xFDF
  6915                           postinc2	equ	0xFDE
  6916                           postdec2	equ	0xFDD
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _isalpha *****************
  6922 ;; Defined at:
  6923 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;  c               1    wreg     unsigned char 
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;  c               1   28[COMRAM] unsigned char 
  6928 ;; Return value:  Size  Location     Type
  6929 ;;		None               void
  6930 ;; Registers used:
  6931 ;;		wreg, status,2, status,0, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6937 ;;      Params:         0       0       0       0       0       0       0
  6938 ;;      Locals:         2       0       0       0       0       0       0
  6939 ;;      Temps:          1       0       0       0       0       0       0
  6940 ;;      Totals:         3       0       0       0       0       0       0
  6941 ;;Total ram usage:        3 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    4
  6944 ;; This function calls:
  6945 ;;		_isupper
  6946 ;; This function is called by:
  6947 ;;		_strtol
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           	psect	text14
  6952  004366                     __ptext14:
  6953                           	opt stack 0
  6954  004366                     _isalpha:
  6955                           	opt stack 22
  6956                           
  6957                           ;incstack = 0
  6958                           ;isalpha@c stored from wreg
  6959  004366  6E1D               	movwf	isalpha@c,c
  6960  004368  0E01               	movlw	1
  6961  00436A  6E1C               	movwf	_isalpha$3613,c
  6962  00436C  0E7B               	movlw	123
  6963  00436E  601D               	cpfslt	isalpha@c,c
  6964  004370  D003               	goto	u9100
  6965  004372  0E61               	movlw	97
  6966  004374  601D               	cpfslt	isalpha@c,c
  6967  004376  D007               	goto	l2451
  6968  004378                     u9100:
  6969  004378  501D               	movf	isalpha@c,w,c
  6970  00437A  EC32  F022         	call	_isupper
  6971  00437E  B0D8               	btfsc	status,0,c
  6972  004380  D002               	goto	l2451
  6973  004382  0E00               	movlw	0
  6974  004384  6E1C               	movwf	_isalpha$3613,c
  6975  004386                     l2451:
  6976  004386  C01C  F01B         	movff	_isalpha$3613,??_isalpha
  6977  00438A  301B               	rrcf	??_isalpha,w,c
  6978  00438C  0012               	return	
  6979  00438E                     __end_of_isalpha:
  6980                           	opt stack 0
  6981                           tosu	equ	0xFFF
  6982                           tosh	equ	0xFFE
  6983                           tosl	equ	0xFFD
  6984                           pclath	equ	0xFFA
  6985                           tblptru	equ	0xFF8
  6986                           tblptrh	equ	0xFF7
  6987                           tblptrl	equ	0xFF6
  6988                           tablat	equ	0xFF5
  6989                           prodh	equ	0xFF4
  6990                           prodl	equ	0xFF3
  6991                           postinc0	equ	0xFEE
  6992                           wreg	equ	0xFE8
  6993                           indf1	equ	0xFE7
  6994                           postdec1	equ	0xFE5
  6995                           fsr1h	equ	0xFE2
  6996                           fsr1l	equ	0xFE1
  6997                           indf2	equ	0xFDF
  6998                           postinc2	equ	0xFDE
  6999                           postdec2	equ	0xFDD
  7000                           fsr2h	equ	0xFDA
  7001                           fsr2l	equ	0xFD9
  7002                           status	equ	0xFD8
  7003                           
  7004 ;; *************** function _isupper *****************
  7005 ;; Defined at:
  7006 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;  c               1    wreg     unsigned char 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  c               1   25[COMRAM] unsigned char 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;		None               void
  7013 ;; Registers used:
  7014 ;;		wreg, status,2, status,0
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7020 ;;      Params:         0       0       0       0       0       0       0
  7021 ;;      Locals:         2       0       0       0       0       0       0
  7022 ;;      Temps:          1       0       0       0       0       0       0
  7023 ;;      Totals:         3       0       0       0       0       0       0
  7024 ;;Total ram usage:        3 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    3
  7027 ;; This function calls:
  7028 ;;		Nothing
  7029 ;; This function is called by:
  7030 ;;		_isalpha
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           	psect	text15
  7035  004464                     __ptext15:
  7036                           	opt stack 0
  7037  004464                     _isupper:
  7038                           	opt stack 22
  7039                           
  7040                           ;incstack = 0
  7041                           ;isupper@c stored from wreg
  7042  004464  6E1A               	movwf	isupper@c,c
  7043  004466  0E00               	movlw	0
  7044  004468  6E19               	movwf	_isupper$3622,c
  7045  00446A  0E5B               	movlw	91
  7046  00446C  601A               	cpfslt	isupper@c,c
  7047  00446E  D005               	goto	l2466
  7048  004470  0E40               	movlw	64
  7049  004472  641A               	cpfsgt	isupper@c,c
  7050  004474  D002               	goto	l2466
  7051  004476  0E01               	movlw	1
  7052  004478  6E19               	movwf	_isupper$3622,c
  7053  00447A                     l2466:
  7054  00447A  C019  F018         	movff	_isupper$3622,??_isupper
  7055  00447E  3018               	rrcf	??_isupper,w,c
  7056  004480  0012               	return	
  7057  004482                     __end_of_isupper:
  7058                           	opt stack 0
  7059                           tosu	equ	0xFFF
  7060                           tosh	equ	0xFFE
  7061                           tosl	equ	0xFFD
  7062                           pclath	equ	0xFFA
  7063                           tblptru	equ	0xFF8
  7064                           tblptrh	equ	0xFF7
  7065                           tblptrl	equ	0xFF6
  7066                           tablat	equ	0xFF5
  7067                           prodh	equ	0xFF4
  7068                           prodl	equ	0xFF3
  7069                           postinc0	equ	0xFEE
  7070                           wreg	equ	0xFE8
  7071                           indf1	equ	0xFE7
  7072                           postdec1	equ	0xFE5
  7073                           fsr1h	equ	0xFE2
  7074                           fsr1l	equ	0xFE1
  7075                           indf2	equ	0xFDF
  7076                           postinc2	equ	0xFDE
  7077                           postdec2	equ	0xFDD
  7078                           fsr2h	equ	0xFDA
  7079                           fsr2l	equ	0xFD9
  7080                           status	equ	0xFD8
  7081                           
  7082 ;; *************** function _CollectRxStatusParams *****************
  7083 ;; Defined at:
  7084 ;;		line 144 in file "SystemStatus.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;		None
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;		None
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      void 
  7091 ;; Registers used:
  7092 ;;		wreg, status,2, status,0, cstack
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7098 ;;      Params:         0       0       0       0       0       0       0
  7099 ;;      Locals:         0       0       0       0       0       0       0
  7100 ;;      Temps:          0       0       0       0       0       0       0
  7101 ;;      Totals:         0       0       0       0       0       0       0
  7102 ;;Total ram usage:        0 bytes
  7103 ;; Hardware stack levels used:    1
  7104 ;; Hardware stack levels required when called:    5
  7105 ;; This function calls:
  7106 ;;		___lltoft
  7107 ;;		___lwtoft
  7108 ;; This function is called by:
  7109 ;;		_GroupRx
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           	psect	text16
  7114  003AE4                     __ptext16:
  7115                           	opt stack 0
  7116  003AE4                     _CollectRxStatusParams:
  7117                           	opt stack 23
  7118                           
  7119                           ;SystemStatus.c: 146: rxStatistics.Synt = rxFreq;
  7120                           
  7121                           ;incstack = 0
  7122  003AE4  C1CC  F1A3         	movff	_rxFreq,_rxStatistics	;volatile
  7123                           
  7124                           ;SystemStatus.c: 147: rxStatistics.DeviceTemperature = lastAdcTemp;
  7125  003AE8  C1DE  F020         	movff	_lastAdcTemp,___lwtoft@c	;volatile
  7126  003AEC  C1DF  F021         	movff	_lastAdcTemp+1,___lwtoft@c+1	;volatile
  7127  003AF0  ECFF  F021         	call	___lwtoft	;wreg free
  7128  003AF4  C020  F1A9         	movff	?___lwtoft,_rxStatistics+6	;volatile
  7129  003AF8  C021  F1AA         	movff	?___lwtoft+1,_rxStatistics+7	;volatile
  7130  003AFC  C022  F1AB         	movff	?___lwtoft+2,_rxStatistics+8	;volatile
  7131                           
  7132                           ;SystemStatus.c: 148: rxStatistics.InputPowerStatus = PORTDbits.RD6;
  7133  003B00  0E00               	movlw	0
  7134  003B02  BC83               	btfsc	3971,6,c	;volatile
  7135  003B04  0E01               	movlw	1
  7136  003B06  0101               	movlb	1	; () banked
  7137  003B08  6FAC               	movwf	(_rxStatistics+9)& (0+255),b	;volatile
  7138                           
  7139                           ; BSR set to: 1
  7140                           ;SystemStatus.c: 149: rxStatistics.Freq = rxFreq;
  7141  003B0A  C1CC  F020         	movff	_rxFreq,___lltoft@c	;volatile
  7142  003B0E  C1CD  F021         	movff	_rxFreq+1,___lltoft@c+1	;volatile
  7143  003B12  C1CE  F022         	movff	_rxFreq+2,___lltoft@c+2	;volatile
  7144  003B16  C1CF  F023         	movff	_rxFreq+3,___lltoft@c+3	;volatile
  7145  003B1A  EC9A  F01E         	call	___lltoft	;wreg free
  7146  003B1E  C020  F1AD         	movff	?___lltoft,_rxStatistics+10	;volatile
  7147  003B22  C021  F1AE         	movff	?___lltoft+1,_rxStatistics+11	;volatile
  7148  003B26  C022  F1AF         	movff	?___lltoft+2,_rxStatistics+12	;volatile
  7149                           
  7150                           ;SystemStatus.c: 150: rxStatistics.RSSI = lastAdcFfwrRSSI;
  7151  003B2A  C1DC  F1B0         	movff	_lastAdcFfwrRSSI,_rxStatistics+13	;volatile
  7152                           
  7153                           ;SystemStatus.c: 151: rxStatistics.Light = PORTBbits.RB3;
  7154  003B2E  0E00               	movlw	0
  7155  003B30  B681               	btfsc	3969,3,c	;volatile
  7156  003B32  0E01               	movlw	1
  7157  003B34  0101               	movlb	1	; () banked
  7158  003B36  6FB4               	movwf	(_rxStatistics+17)& (0+255),b	;volatile
  7159                           
  7160                           ; BSR set to: 1
  7161                           ;SystemStatus.c: 152: rxStatistics.UnitId = 123;
  7162  003B38  0E7B               	movlw	123
  7163  003B3A  6FB5               	movwf	(_rxStatistics+18)& (0+255),b	;volatile
  7164                           
  7165                           ; BSR set to: 1
  7166                           ;SystemStatus.c: 153: rxStatistics.UnitDc = 1234;
  7167  003B3C  0E04               	movlw	4
  7168  003B3E  6FB7               	movwf	(_rxStatistics+20)& (0+255),b	;volatile
  7169  003B40  0ED2               	movlw	210
  7170  003B42  6FB6               	movwf	(_rxStatistics+19)& (0+255),b	;volatile
  7171                           
  7172                           ; BSR set to: 1
  7173                           ;SystemStatus.c: 154: rxStatistics.SwVersion = "1_002";
  7174  003B44  0EF0               	movlw	low STR_17
  7175  003B46  6FB8               	movwf	(_rxStatistics+21)& (0+255),b	;volatile
  7176  003B48  0E7F               	movlw	high STR_17
  7177  003B4A  6FB9               	movwf	(_rxStatistics+22)& (0+255),b	;volatile
  7178                           
  7179                           ; BSR set to: 1
  7180                           ;SystemStatus.c: 155: rxStatistics.UnitType = 0;
  7181  003B4C  0E00               	movlw	0
  7182  003B4E  6FBA               	movwf	(_rxStatistics+23)& (0+255),b	;volatile
  7183                           
  7184                           ; BSR set to: 1
  7185  003B50  0012               	return		;funcret
  7186  003B52                     __end_of_CollectRxStatusParams:
  7187                           	opt stack 0
  7188                           tosu	equ	0xFFF
  7189                           tosh	equ	0xFFE
  7190                           tosl	equ	0xFFD
  7191                           pclath	equ	0xFFA
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           indf1	equ	0xFE7
  7201                           postdec1	equ	0xFE5
  7202                           fsr1h	equ	0xFE2
  7203                           fsr1l	equ	0xFE1
  7204                           indf2	equ	0xFDF
  7205                           postinc2	equ	0xFDE
  7206                           postdec2	equ	0xFDD
  7207                           fsr2h	equ	0xFDA
  7208                           fsr2l	equ	0xFD9
  7209                           status	equ	0xFD8
  7210                           
  7211 ;; *************** function _AdcSingleSample *****************
  7212 ;; Defined at:
  7213 ;;		line 32 in file "AdcApp.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  cType           1    wreg     enum E177
  7216 ;;  chType          1   30[COMRAM] enum E7691
  7217 ;;  numSamples      4   31[COMRAM] long 
  7218 ;; Auto vars:     Size  Location     Type
  7219 ;;  cType           1   39[COMRAM] enum E177
  7220 ;;  retNum          4   35[COMRAM] unsigned long 
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      void 
  7223 ;; Registers used:
  7224 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7230 ;;      Params:         5       0       0       0       0       0       0
  7231 ;;      Locals:         5       0       0       0       0       0       0
  7232 ;;      Temps:          0       0       0       0       0       0       0
  7233 ;;      Totals:        10       0       0       0       0       0       0
  7234 ;;Total ram usage:       10 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    5
  7237 ;; This function calls:
  7238 ;;		_UART_Write_Text
  7239 ;; This function is called by:
  7240 ;;		_GroupRx
  7241 ;;		_GroupTx
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text17
  7246  002AC8                     __ptext17:
  7247                           	opt stack 0
  7248  002AC8                     _AdcSingleSample:
  7249                           	opt stack 23
  7250                           
  7251                           ; BSR set to: 1
  7252                           ;incstack = 0
  7253                           ;AdcSingleSample@cType stored from wreg
  7254  002AC8  6E28               	movwf	AdcSingleSample@cType,c
  7255                           
  7256                           ;AdcApp.c: 34: uint32_t retNum = 0x0;
  7257  002ACA  0E00               	movlw	0
  7258  002ACC  6E24               	movwf	AdcSingleSample@retNum,c
  7259  002ACE  0E00               	movlw	0
  7260  002AD0  6E25               	movwf	AdcSingleSample@retNum+1,c
  7261  002AD2  0E00               	movlw	0
  7262  002AD4  6E26               	movwf	AdcSingleSample@retNum+2,c
  7263  002AD6  0E00               	movlw	0
  7264  002AD8  6E27               	movwf	AdcSingleSample@retNum+3,c
  7265                           
  7266                           ;AdcApp.c: 36: if(chType == ADC_OFF)
  7267  002ADA  501F               	movf	AdcSingleSample@chType,w,c
  7268  002ADC  A4D8               	btfss	status,2,c
  7269  002ADE  D00B               	goto	l138
  7270                           
  7271                           ;AdcApp.c: 37: {
  7272                           ;AdcApp.c: 38: if(cType == TX_TYPE) txStatistics.AdcValues.OperState = 0;
  7273  002AE0  5028               	movf	AdcSingleSample@cType,w,c
  7274  002AE2  A4D8               	btfss	status,2,c
  7275  002AE4  D004               	goto	l139
  7276  002AE6  0E00               	movlw	0
  7277  002AE8  0101               	movlb	1	; () banked
  7278  002AEA  6F86               	movwf	(_txStatistics+1)& (0+255),b	;volatile
  7279  002AEC  0012               	return	
  7280  002AEE                     l139:
  7281                           
  7282                           ;AdcApp.c: 39: else rxStatistics.AdcValues.OperState = 0;
  7283                           
  7284                           ; BSR set to: 1
  7285  002AEE  0E00               	movlw	0
  7286  002AF0  0101               	movlb	1	; () banked
  7287  002AF2  6FA4               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  7288                           
  7289                           ; BSR set to: 1
  7290                           ;AdcApp.c: 40: }
  7291  002AF4  0012               	return	
  7292  002AF6                     l138:
  7293                           
  7294                           ;AdcApp.c: 41: else
  7295                           ;AdcApp.c: 42: {
  7296                           ;AdcApp.c: 44: if(channelNum > (0x04))
  7297                           
  7298                           ; BSR set to: 1
  7299  002AF6  5038               	movf	_channelNum+1,w,c
  7300  002AF8  E104               	bnz	u9850
  7301  002AFA  0E05               	movlw	5
  7302  002AFC  5C37               	subwf	_channelNum,w,c
  7303  002AFE  A0D8               	btfss	status,0,c
  7304  002B00  D007               	goto	l142
  7305  002B02                     u9850:
  7306                           
  7307                           ;AdcApp.c: 45: {
  7308                           ;AdcApp.c: 46: UART_Write_Text("NOT OK \n\r");
  7309  002B02  0ECD               	movlw	low STR_1
  7310  002B04  6E19               	movwf	UART_Write_Text@text,c
  7311  002B06  0E7F               	movlw	high STR_1
  7312  002B08  6E1A               	movwf	UART_Write_Text@text+1,c
  7313  002B0A  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7314                           
  7315                           ;AdcApp.c: 47: }
  7316  002B0E  0012               	return	
  7317  002B10                     l142:
  7318                           
  7319                           ;AdcApp.c: 48: else
  7320                           ;AdcApp.c: 49: {
  7321                           ;AdcApp.c: 50: if(cType == TX_TYPE)
  7322  002B10  5028               	movf	AdcSingleSample@cType,w,c
  7323  002B12  A4D8               	btfss	status,2,c
  7324  002B14  D031               	goto	l154
  7325                           
  7326                           ;AdcApp.c: 51: {
  7327                           ;AdcApp.c: 52: if(channelNum == 0)
  7328  002B16  5037               	movf	_channelNum,w,c
  7329  002B18  1038               	iorwf	_channelNum+1,w,c
  7330  002B1A  A4D8               	btfss	status,2,c
  7331  002B1C  D004               	goto	l145
  7332                           
  7333                           ;AdcApp.c: 53: {
  7334                           ;AdcApp.c: 54: rxStatistics.AdcValues.OperState = 0;
  7335  002B1E  0E00               	movlw	0
  7336  002B20  0101               	movlb	1	; () banked
  7337  002B22  6FA4               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  7338                           
  7339                           ; BSR set to: 1
  7340                           ;AdcApp.c: 55: return;
  7341  002B24  0012               	return	
  7342  002B26                     l145:
  7343                           
  7344                           ;AdcApp.c: 57: else
  7345                           ;AdcApp.c: 58: {
  7346                           ;AdcApp.c: 59: if(channelNum == 1) UART_Write_Text("TX SAMPLE CHANNEL: TX-ADC_RREV\n\r")
      +                          ;
  7347                           
  7348                           ; BSR set to: 1
  7349  002B26  0437               	decf	_channelNum,w,c
  7350  002B28  1038               	iorwf	_channelNum+1,w,c
  7351  002B2A  A4D8               	btfss	status,2,c
  7352  002B2C  D007               	goto	l148
  7353  002B2E  0EE0               	movlw	low STR_2
  7354  002B30  6E19               	movwf	UART_Write_Text@text,c
  7355  002B32  0E7D               	movlw	high STR_2
  7356  002B34  6E1A               	movwf	UART_Write_Text@text+1,c
  7357  002B36  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7358  002B3A  D00B               	goto	l150
  7359  002B3C                     l148:
  7360                           
  7361                           ;AdcApp.c: 60: else if(channelNum == 2) UART_Write_Text("TX SAMPLE CHANNEL ADC_TEMP\n\r"
      +                          );
  7362  002B3C  0E02               	movlw	2
  7363  002B3E  1837               	xorwf	_channelNum,w,c
  7364  002B40  1038               	iorwf	_channelNum+1,w,c
  7365  002B42  A4D8               	btfss	status,2,c
  7366  002B44  D006               	goto	l150
  7367  002B46  0E5D               	movlw	low STR_3
  7368  002B48  6E19               	movwf	UART_Write_Text@text,c
  7369  002B4A  0E7E               	movlw	high STR_3
  7370  002B4C  6E1A               	movwf	UART_Write_Text@text+1,c
  7371  002B4E  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7372  002B52                     l150:
  7373                           
  7374                           ;AdcApp.c: 61: if(channelNum == 0x1 || channelNum == 0x2)
  7375  002B52  0437               	decf	_channelNum,w,c
  7376  002B54  1038               	iorwf	_channelNum+1,w,c
  7377  002B56  B4D8               	btfsc	status,2,c
  7378  002B58  D005               	goto	u9910
  7379  002B5A  0E02               	movlw	2
  7380  002B5C  1837               	xorwf	_channelNum,w,c
  7381  002B5E  1038               	iorwf	_channelNum+1,w,c
  7382  002B60  A4D8               	btfss	status,2,c
  7383  002B62  D004               	goto	l151
  7384  002B64                     u9910:
  7385                           
  7386                           ;AdcApp.c: 62: {
  7387                           ;AdcApp.c: 63: needToSample = 1;
  7388  002B64  0E01               	movlw	1
  7389  002B66  0101               	movlb	1	; () banked
  7390  002B68  6FEA               	movwf	_needToSample& (0+255),b	;volatile
  7391                           
  7392                           ;AdcApp.c: 64: }
  7393  002B6A  D006               	goto	l154
  7394  002B6C                     l151:
  7395                           
  7396                           ;AdcApp.c: 65: else
  7397                           ;AdcApp.c: 66: {
  7398                           ;AdcApp.c: 67: UART_Write_Text("NOT OK \n\r");
  7399                           
  7400                           ; BSR set to: 1
  7401  002B6C  0ECD               	movlw	low STR_1
  7402  002B6E  6E19               	movwf	UART_Write_Text@text,c
  7403  002B70  0E7F               	movlw	high STR_1
  7404  002B72  6E1A               	movwf	UART_Write_Text@text+1,c
  7405  002B74  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7406  002B78                     l154:
  7407                           
  7408                           ;AdcApp.c: 68: }
  7409                           ;AdcApp.c: 69: }
  7410                           ;AdcApp.c: 70: }
  7411                           ;AdcApp.c: 72: if(cType == RX_TYPE)
  7412  002B78  0428               	decf	AdcSingleSample@cType,w,c
  7413  002B7A  A4D8               	btfss	status,2,c
  7414  002B7C  0012               	return	
  7415                           
  7416                           ;AdcApp.c: 73: {
  7417                           ;AdcApp.c: 74: if(channelNum == 0)
  7418  002B7E  5037               	movf	_channelNum,w,c
  7419  002B80  1038               	iorwf	_channelNum+1,w,c
  7420  002B82  A4D8               	btfss	status,2,c
  7421  002B84  D004               	goto	l156
  7422                           
  7423                           ;AdcApp.c: 75: {
  7424                           ;AdcApp.c: 76: rxStatistics.AdcValues.OperState = 0;
  7425  002B86  0E00               	movlw	0
  7426  002B88  0101               	movlb	1	; () banked
  7427  002B8A  6FA4               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  7428                           
  7429                           ; BSR set to: 1
  7430                           ;AdcApp.c: 78: }
  7431                           
  7432                           ; BSR set to: 1
  7433                           ;AdcApp.c: 77: return;
  7434  002B8C  0012               	return	
  7435  002B8E                     l156:
  7436                           
  7437                           ;AdcApp.c: 79: else
  7438                           ;AdcApp.c: 80: {
  7439                           ;AdcApp.c: 81: if(channelNum == 1) UART_Write_Text("RX SAMPLE CHANNEL RX-ADC_FFWR\n\r");
  7440                           
  7441                           ; BSR set to: 1
  7442  002B8E  0437               	decf	_channelNum,w,c
  7443  002B90  1038               	iorwf	_channelNum+1,w,c
  7444  002B92  A4D8               	btfss	status,2,c
  7445  002B94  D007               	goto	l158
  7446  002B96  0E01               	movlw	low STR_5
  7447  002B98  6E19               	movwf	UART_Write_Text@text,c
  7448  002B9A  0E7E               	movlw	high STR_5
  7449  002B9C  6E1A               	movwf	UART_Write_Text@text+1,c
  7450  002B9E  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7451  002BA2  D00B               	goto	l160
  7452  002BA4                     l158:
  7453                           
  7454                           ;AdcApp.c: 82: else if(channelNum == 2) UART_Write_Text("RX SAMPLE CHANNEL RX-ADC_VG_MON
      +                          \n\r");
  7455  002BA4  0E02               	movlw	2
  7456  002BA6  1837               	xorwf	_channelNum,w,c
  7457  002BA8  1038               	iorwf	_channelNum+1,w,c
  7458  002BAA  A4D8               	btfss	status,2,c
  7459  002BAC  D006               	goto	l160
  7460  002BAE  0EBE               	movlw	low STR_6
  7461  002BB0  6E19               	movwf	UART_Write_Text@text,c
  7462  002BB2  0E7D               	movlw	high STR_6
  7463  002BB4  6E1A               	movwf	UART_Write_Text@text+1,c
  7464  002BB6  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7465  002BBA                     l160:
  7466                           
  7467                           ;AdcApp.c: 83: if(channelNum == 0x1 || channelNum == 0x2)
  7468  002BBA  0437               	decf	_channelNum,w,c
  7469  002BBC  1038               	iorwf	_channelNum+1,w,c
  7470  002BBE  B4D8               	btfsc	status,2,c
  7471  002BC0  D005               	goto	u9970
  7472  002BC2  0E02               	movlw	2
  7473  002BC4  1837               	xorwf	_channelNum,w,c
  7474  002BC6  1038               	iorwf	_channelNum+1,w,c
  7475  002BC8  A4D8               	btfss	status,2,c
  7476  002BCA  D004               	goto	l161
  7477  002BCC                     u9970:
  7478                           
  7479                           ;AdcApp.c: 84: {
  7480                           ;AdcApp.c: 85: needToSample = 1;
  7481  002BCC  0E01               	movlw	1
  7482  002BCE  0101               	movlb	1	; () banked
  7483  002BD0  6FEA               	movwf	_needToSample& (0+255),b	;volatile
  7484                           
  7485                           ;AdcApp.c: 86: }
  7486  002BD2  0012               	return	
  7487  002BD4                     l161:
  7488                           
  7489                           ;AdcApp.c: 87: else
  7490                           ;AdcApp.c: 88: {
  7491                           ;AdcApp.c: 89: UART_Write_Text("NOT OK \n\r");
  7492                           
  7493                           ; BSR set to: 1
  7494  002BD4  0ECD               	movlw	low STR_1
  7495  002BD6  6E19               	movwf	UART_Write_Text@text,c
  7496  002BD8  0E7F               	movlw	high STR_1
  7497  002BDA  6E1A               	movwf	UART_Write_Text@text+1,c
  7498  002BDC  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7499  002BE0  0012               	return	
  7500  002BE2                     __end_of_AdcSingleSample:
  7501                           	opt stack 0
  7502                           tosu	equ	0xFFF
  7503                           tosh	equ	0xFFE
  7504                           tosl	equ	0xFFD
  7505                           pclath	equ	0xFFA
  7506                           tblptru	equ	0xFF8
  7507                           tblptrh	equ	0xFF7
  7508                           tblptrl	equ	0xFF6
  7509                           tablat	equ	0xFF5
  7510                           prodh	equ	0xFF4
  7511                           prodl	equ	0xFF3
  7512                           postinc0	equ	0xFEE
  7513                           wreg	equ	0xFE8
  7514                           indf1	equ	0xFE7
  7515                           postdec1	equ	0xFE5
  7516                           fsr1h	equ	0xFE2
  7517                           fsr1l	equ	0xFE1
  7518                           indf2	equ	0xFDF
  7519                           postinc2	equ	0xFDE
  7520                           postdec2	equ	0xFDD
  7521                           fsr2h	equ	0xFDA
  7522                           fsr2l	equ	0xFD9
  7523                           status	equ	0xFD8
  7524                           
  7525 ;; *************** function _testLeds *****************
  7526 ;; Defined at:
  7527 ;;		line 43 in file "LedsApp.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;		None
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;  idx             2   24[COMRAM] int 
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  1    wreg      void 
  7534 ;; Registers used:
  7535 ;;		wreg, status,2, status,0
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7541 ;;      Params:         0       0       0       0       0       0       0
  7542 ;;      Locals:         2       0       0       0       0       0       0
  7543 ;;      Temps:          1       0       0       0       0       0       0
  7544 ;;      Totals:         3       0       0       0       0       0       0
  7545 ;;Total ram usage:        3 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    3
  7548 ;; This function calls:
  7549 ;;		Nothing
  7550 ;; This function is called by:
  7551 ;;		_GroupCommon
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           	psect	text18
  7556  003C1A                     __ptext18:
  7557                           	opt stack 0
  7558  003C1A                     _testLeds:
  7559                           	opt stack 25
  7560                           
  7561                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7562                           
  7563                           ;incstack = 0
  7564  003C1A  0E00               	movlw	0
  7565  003C1C  6E1A               	movwf	testLeds@idx+1,c
  7566  003C1E  0E00               	movlw	0
  7567  003C20  6E19               	movwf	testLeds@idx,c
  7568  003C22                     l9413:
  7569  003C22  BE1A               	btfsc	testLeds@idx+1,7,c
  7570  003C24  D006               	goto	l66
  7571  003C26  501A               	movf	testLeds@idx+1,w,c
  7572  003C28  E127               	bnz	l68
  7573  003C2A  0E0A               	movlw	10
  7574  003C2C  5C19               	subwf	testLeds@idx,w,c
  7575  003C2E  B0D8               	btfsc	status,0,c
  7576  003C30  0012               	return	
  7577  003C32                     l66:
  7578                           
  7579                           ;LedsApp.c: 47: {
  7580                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7581  003C32  808B               	bsf	3979,0,c	;volatile
  7582                           
  7583                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7584  003C34  0E82               	movlw	130
  7585  003C36  6E18               	movwf	??_testLeds& (0+255),c
  7586  003C38  0EDE               	movlw	222
  7587  003C3A                     u10827:
  7588  003C3A  2EE8               	decfsz	wreg,f,c
  7589  003C3C  D7FE               	bra	u10827
  7590  003C3E  2E18               	decfsz	??_testLeds& (0+255),f,c
  7591  003C40  D7FC               	bra	u10827
  7592                           
  7593                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7594  003C42  888A               	bsf	3978,4,c	;volatile
  7595                           
  7596                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7597  003C44  0E82               	movlw	130
  7598  003C46  6E18               	movwf	??_testLeds& (0+255),c
  7599  003C48  0EDE               	movlw	222
  7600  003C4A                     u10837:
  7601  003C4A  2EE8               	decfsz	wreg,f,c
  7602  003C4C  D7FE               	bra	u10837
  7603  003C4E  2E18               	decfsz	??_testLeds& (0+255),f,c
  7604  003C50  D7FC               	bra	u10837
  7605                           
  7606                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7607  003C52  908B               	bcf	3979,0,c	;volatile
  7608                           
  7609                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7610  003C54  0E82               	movlw	130
  7611  003C56  6E18               	movwf	??_testLeds& (0+255),c
  7612  003C58  0EDE               	movlw	222
  7613  003C5A                     u10847:
  7614  003C5A  2EE8               	decfsz	wreg,f,c
  7615  003C5C  D7FE               	bra	u10847
  7616  003C5E  2E18               	decfsz	??_testLeds& (0+255),f,c
  7617  003C60  D7FC               	bra	u10847
  7618                           
  7619                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7620  003C62  988A               	bcf	3978,4,c	;volatile
  7621                           
  7622                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7623  003C64  0E82               	movlw	130
  7624  003C66  6E18               	movwf	??_testLeds& (0+255),c
  7625  003C68  0EDE               	movlw	222
  7626  003C6A                     u10857:
  7627  003C6A  2EE8               	decfsz	wreg,f,c
  7628  003C6C  D7FE               	bra	u10857
  7629  003C6E  2E18               	decfsz	??_testLeds& (0+255),f,c
  7630  003C70  D7FC               	bra	u10857
  7631  003C72  4A19               	infsnz	testLeds@idx,f,c
  7632  003C74  2A1A               	incf	testLeds@idx+1,f,c
  7633  003C76  D7D5               	goto	l9413
  7634  003C78                     l68:
  7635  003C78  0012               	return		;funcret
  7636  003C7A                     __end_of_testLeds:
  7637                           	opt stack 0
  7638                           tosu	equ	0xFFF
  7639                           tosh	equ	0xFFE
  7640                           tosl	equ	0xFFD
  7641                           pclath	equ	0xFFA
  7642                           tblptru	equ	0xFF8
  7643                           tblptrh	equ	0xFF7
  7644                           tblptrl	equ	0xFF6
  7645                           tablat	equ	0xFF5
  7646                           prodh	equ	0xFF4
  7647                           prodl	equ	0xFF3
  7648                           postinc0	equ	0xFEE
  7649                           wreg	equ	0xFE8
  7650                           indf1	equ	0xFE7
  7651                           postdec1	equ	0xFE5
  7652                           fsr1h	equ	0xFE2
  7653                           fsr1l	equ	0xFE1
  7654                           indf2	equ	0xFDF
  7655                           postinc2	equ	0xFDE
  7656                           postdec2	equ	0xFDD
  7657                           fsr2h	equ	0xFDA
  7658                           fsr2l	equ	0xFD9
  7659                           status	equ	0xFD8
  7660                           
  7661 ;; *************** function _PrintHelpScreen *****************
  7662 ;; Defined at:
  7663 ;;		line 78 in file "SystemStatus.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;		None
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;  dest           50    0[BANK1 ] unsigned char [50]
  7668 ;; Return value:  Size  Location     Type
  7669 ;;                  1    wreg      void 
  7670 ;; Registers used:
  7671 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7677 ;;      Params:         0       0       0       0       0       0       0
  7678 ;;      Locals:         0       0      50       0       0       0       0
  7679 ;;      Temps:          0       0       0       0       0       0       0
  7680 ;;      Totals:         0       0      50       0       0       0       0
  7681 ;;Total ram usage:       50 bytes
  7682 ;; Hardware stack levels used:    1
  7683 ;; Hardware stack levels required when called:    7
  7684 ;; This function calls:
  7685 ;;		_UART_Write_Text
  7686 ;;		_sprintf
  7687 ;; This function is called by:
  7688 ;;		_GroupCommon
  7689 ;; This function uses a non-reentrant model
  7690 ;;
  7691                           
  7692                           	psect	text19
  7693  000F8C                     __ptext19:
  7694                           	opt stack 0
  7695  000F8C                     _PrintHelpScreen:
  7696                           	opt stack 21
  7697                           
  7698                           ;SystemStatus.c: 80: char dest[50];
  7699                           ;SystemStatus.c: 83: sprintf(dest, "<TX system commands>\n\r");
  7700                           
  7701                           ;incstack = 0
  7702  000F8C  0E00               	movlw	low PrintHelpScreen@dest
  7703  000F8E  0100               	movlb	0	; () banked
  7704  000F90  6FBC               	movwf	sprintf@sp& (0+255),b
  7705  000F92  0E01               	movlw	high PrintHelpScreen@dest
  7706  000F94  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7707  000F96  0EDB               	movlw	low STR_23
  7708  000F98  6FBE               	movwf	sprintf@f& (0+255),b
  7709  000F9A  0E7E               	movlw	high STR_23
  7710  000F9C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7711  000F9E  EC70  F000         	call	_sprintf	;wreg free
  7712                           
  7713                           ;SystemStatus.c: 84: UART_Write_Text(dest);
  7714  000FA2  0E00               	movlw	low PrintHelpScreen@dest
  7715  000FA4  6E19               	movwf	UART_Write_Text@text,c
  7716  000FA6  0E01               	movlw	high PrintHelpScreen@dest
  7717  000FA8  6E1A               	movwf	UART_Write_Text@text+1,c
  7718  000FAA  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7719                           
  7720                           ;SystemStatus.c: 86: sprintf(dest, "$TI <XXXX><cr>   Init TX system and set frequency (0
      +                          -9999)[MHz]\r\n");
  7721  000FAE  0E00               	movlw	low PrintHelpScreen@dest
  7722  000FB0  0100               	movlb	0	; () banked
  7723  000FB2  6FBC               	movwf	sprintf@sp& (0+255),b
  7724  000FB4  0E01               	movlw	high PrintHelpScreen@dest
  7725  000FB6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7726  000FB8  0E38               	movlw	low STR_24
  7727  000FBA  6FBE               	movwf	sprintf@f& (0+255),b
  7728  000FBC  0E7B               	movlw	high STR_24
  7729  000FBE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7730  000FC0  EC70  F000         	call	_sprintf	;wreg free
  7731                           
  7732                           ;SystemStatus.c: 87: UART_Write_Text(dest);
  7733  000FC4  0E00               	movlw	low PrintHelpScreen@dest
  7734  000FC6  6E19               	movwf	UART_Write_Text@text,c
  7735  000FC8  0E01               	movlw	high PrintHelpScreen@dest
  7736  000FCA  6E1A               	movwf	UART_Write_Text@text+1,c
  7737  000FCC  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7738                           
  7739                           ;SystemStatus.c: 88: sprintf(dest, "$TF <XXXX><cr>   Set TX system frequency at (0-9999)
      +                          [MHz].\r\n");
  7740  000FD0  0E00               	movlw	low PrintHelpScreen@dest
  7741  000FD2  0100               	movlb	0	; () banked
  7742  000FD4  6FBC               	movwf	sprintf@sp& (0+255),b
  7743  000FD6  0E01               	movlw	high PrintHelpScreen@dest
  7744  000FD8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7745  000FDA  0EB8               	movlw	low STR_25
  7746  000FDC  6FBE               	movwf	sprintf@f& (0+255),b
  7747  000FDE  0E7B               	movlw	high STR_25
  7748  000FE0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7749  000FE2  EC70  F000         	call	_sprintf	;wreg free
  7750                           
  7751                           ;SystemStatus.c: 89: UART_Write_Text(dest);
  7752  000FE6  0E00               	movlw	low PrintHelpScreen@dest
  7753  000FE8  6E19               	movwf	UART_Write_Text@text,c
  7754  000FEA  0E01               	movlw	high PrintHelpScreen@dest
  7755  000FEC  6E1A               	movwf	UART_Write_Text@text+1,c
  7756  000FEE  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7757                           
  7758                           ;SystemStatus.c: 90: sprintf(dest, "$TQ <cr>         Get status from TX system.\r\n");
  7759  000FF2  0E00               	movlw	low PrintHelpScreen@dest
  7760  000FF4  0100               	movlb	0	; () banked
  7761  000FF6  6FBC               	movwf	sprintf@sp& (0+255),b
  7762  000FF8  0E01               	movlw	high PrintHelpScreen@dest
  7763  000FFA  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7764  000FFC  0ED0               	movlw	low STR_26
  7765  000FFE  6FBE               	movwf	sprintf@f& (0+255),b
  7766  001000  0E7C               	movlw	high STR_26
  7767  001002  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7768  001004  EC70  F000         	call	_sprintf	;wreg free
  7769                           
  7770                           ;SystemStatus.c: 91: UART_Write_Text(dest);
  7771  001008  0E00               	movlw	low PrintHelpScreen@dest
  7772  00100A  6E19               	movwf	UART_Write_Text@text,c
  7773  00100C  0E01               	movlw	high PrintHelpScreen@dest
  7774  00100E  6E1A               	movwf	UART_Write_Text@text+1,c
  7775  001010  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7776                           
  7777                           ;SystemStatus.c: 92: sprintf(dest, "$TB <X><cr>      Turn on[1] / off[0] BIT mode at TX 
      +                          system [Default = 0]\r\n");
  7778  001014  0E00               	movlw	low PrintHelpScreen@dest
  7779  001016  0100               	movlb	0	; () banked
  7780  001018  6FBC               	movwf	sprintf@sp& (0+255),b
  7781  00101A  0E01               	movlw	high PrintHelpScreen@dest
  7782  00101C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7783  00101E  0E5A               	movlw	low STR_27
  7784  001020  6FBE               	movwf	sprintf@f& (0+255),b
  7785  001022  0E7A               	movlw	high STR_27
  7786  001024  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7787  001026  EC70  F000         	call	_sprintf	;wreg free
  7788                           
  7789                           ;SystemStatus.c: 93: UART_Write_Text(dest);
  7790  00102A  0E00               	movlw	low PrintHelpScreen@dest
  7791  00102C  6E19               	movwf	UART_Write_Text@text,c
  7792  00102E  0E01               	movlw	high PrintHelpScreen@dest
  7793  001030  6E1A               	movwf	UART_Write_Text@text+1,c
  7794  001032  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7795                           
  7796                           ;SystemStatus.c: 94: sprintf(dest, "$TX <X><cr>      Turn on[1] / off[0] transmission at
      +                           TX system [Default = 0]\r\n");
  7797  001036  0E00               	movlw	low PrintHelpScreen@dest
  7798  001038  0100               	movlb	0	; () banked
  7799  00103A  6FBC               	movwf	sprintf@sp& (0+255),b
  7800  00103C  0E01               	movlw	high PrintHelpScreen@dest
  7801  00103E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7802  001040  0E0B               	movlw	low STR_28
  7803  001042  6FBE               	movwf	sprintf@f& (0+255),b
  7804  001044  0E7A               	movlw	high STR_28
  7805  001046  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7806  001048  EC70  F000         	call	_sprintf	;wreg free
  7807                           
  7808                           ;SystemStatus.c: 95: UART_Write_Text(dest);
  7809  00104C  0E00               	movlw	low PrintHelpScreen@dest
  7810  00104E  6E19               	movwf	UART_Write_Text@text,c
  7811  001050  0E01               	movlw	high PrintHelpScreen@dest
  7812  001052  6E1A               	movwf	UART_Write_Text@text+1,c
  7813  001054  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7814                           
  7815                           ;SystemStatus.c: 98: sprintf(dest, "\n\r<RX system commands>\n\r");
  7816  001058  0E00               	movlw	low PrintHelpScreen@dest
  7817  00105A  0100               	movlb	0	; () banked
  7818  00105C  6FBC               	movwf	sprintf@sp& (0+255),b
  7819  00105E  0E01               	movlw	high PrintHelpScreen@dest
  7820  001060  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7821  001062  0E7A               	movlw	low STR_29
  7822  001064  6FBE               	movwf	sprintf@f& (0+255),b
  7823  001066  0E7E               	movlw	high STR_29
  7824  001068  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7825  00106A  EC70  F000         	call	_sprintf	;wreg free
  7826                           
  7827                           ;SystemStatus.c: 99: UART_Write_Text(dest);
  7828  00106E  0E00               	movlw	low PrintHelpScreen@dest
  7829  001070  6E19               	movwf	UART_Write_Text@text,c
  7830  001072  0E01               	movlw	high PrintHelpScreen@dest
  7831  001074  6E1A               	movwf	UART_Write_Text@text+1,c
  7832  001076  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7833                           
  7834                           ;SystemStatus.c: 100: sprintf(dest, "$RI <XXXX><cr>   Init RX system and set frequency a
      +                          t XXXX (0-9999)[MHz]\r\n");
  7835  00107A  0E00               	movlw	low PrintHelpScreen@dest
  7836  00107C  0100               	movlb	0	; () banked
  7837  00107E  6FBC               	movwf	sprintf@sp& (0+255),b
  7838  001080  0E01               	movlw	high PrintHelpScreen@dest
  7839  001082  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7840  001084  0EA5               	movlw	low STR_30
  7841  001086  6FBE               	movwf	sprintf@f& (0+255),b
  7842  001088  0E7A               	movlw	high STR_30
  7843  00108A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7844  00108C  EC70  F000         	call	_sprintf	;wreg free
  7845                           
  7846                           ;SystemStatus.c: 101: UART_Write_Text(dest);
  7847  001090  0E00               	movlw	low PrintHelpScreen@dest
  7848  001092  6E19               	movwf	UART_Write_Text@text,c
  7849  001094  0E01               	movlw	high PrintHelpScreen@dest
  7850  001096  6E1A               	movwf	UART_Write_Text@text+1,c
  7851  001098  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7852                           
  7853                           ;SystemStatus.c: 102: sprintf(dest, "$RQ <cr>         Get status from RX system\r\n");
  7854  00109C  0E00               	movlw	low PrintHelpScreen@dest
  7855  00109E  0100               	movlb	0	; () banked
  7856  0010A0  6FBC               	movwf	sprintf@sp& (0+255),b
  7857  0010A2  0E01               	movlw	high PrintHelpScreen@dest
  7858  0010A4  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7859  0010A6  0EFE               	movlw	low STR_31
  7860  0010A8  6FBE               	movwf	sprintf@f& (0+255),b
  7861  0010AA  0E7C               	movlw	high STR_31
  7862  0010AC  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7863  0010AE  EC70  F000         	call	_sprintf	;wreg free
  7864                           
  7865                           ;SystemStatus.c: 103: UART_Write_Text(dest);
  7866  0010B2  0E00               	movlw	low PrintHelpScreen@dest
  7867  0010B4  6E19               	movwf	UART_Write_Text@text,c
  7868  0010B6  0E01               	movlw	high PrintHelpScreen@dest
  7869  0010B8  6E1A               	movwf	UART_Write_Text@text+1,c
  7870  0010BA  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7871                           
  7872                           ;SystemStatus.c: 104: sprintf(dest, "$RB <X><cr>      Turn on[1] / off[0] BIT mode at RX
      +                           system.\r\n");
  7873  0010BE  0E00               	movlw	low PrintHelpScreen@dest
  7874  0010C0  0100               	movlb	0	; () banked
  7875  0010C2  6FBC               	movwf	sprintf@sp& (0+255),b
  7876  0010C4  0E01               	movlw	high PrintHelpScreen@dest
  7877  0010C6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7878  0010C8  0E7A               	movlw	low STR_32
  7879  0010CA  6FBE               	movwf	sprintf@f& (0+255),b
  7880  0010CC  0E7B               	movlw	high STR_32
  7881  0010CE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7882  0010D0  EC70  F000         	call	_sprintf	;wreg free
  7883                           
  7884                           ;SystemStatus.c: 105: UART_Write_Text(dest);
  7885  0010D4  0E00               	movlw	low PrintHelpScreen@dest
  7886  0010D6  6E19               	movwf	UART_Write_Text@text,c
  7887  0010D8  0E01               	movlw	high PrintHelpScreen@dest
  7888  0010DA  6E1A               	movwf	UART_Write_Text@text+1,c
  7889  0010DC  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7890                           
  7891                           ;SystemStatus.c: 106: sprintf(dest, "$RX <X><cr>      Turn on[1] / off[0] receive at RX 
      +                          system.\r\n");
  7892  0010E0  0E00               	movlw	low PrintHelpScreen@dest
  7893  0010E2  0100               	movlb	0	; () banked
  7894  0010E4  6FBC               	movwf	sprintf@sp& (0+255),b
  7895  0010E6  0E01               	movlw	high PrintHelpScreen@dest
  7896  0010E8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7897  0010EA  0EF5               	movlw	low STR_33
  7898  0010EC  6FBE               	movwf	sprintf@f& (0+255),b
  7899  0010EE  0E7B               	movlw	high STR_33
  7900  0010F0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7901  0010F2  EC70  F000         	call	_sprintf	;wreg free
  7902                           
  7903                           ;SystemStatus.c: 107: UART_Write_Text(dest);
  7904  0010F6  0E00               	movlw	low PrintHelpScreen@dest
  7905  0010F8  6E19               	movwf	UART_Write_Text@text,c
  7906  0010FA  0E01               	movlw	high PrintHelpScreen@dest
  7907  0010FC  6E1A               	movwf	UART_Write_Text@text+1,c
  7908  0010FE  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7909                           
  7910                           ;SystemStatus.c: 108: sprintf(dest, "$RCR <X><cr>     Set Compression range at RX system
      +                          . High [1] Low [0] [Default = 0]\r\n");
  7911  001102  0E00               	movlw	low PrintHelpScreen@dest
  7912  001104  0100               	movlb	0	; () banked
  7913  001106  6FBC               	movwf	sprintf@sp& (0+255),b
  7914  001108  0E01               	movlw	high PrintHelpScreen@dest
  7915  00110A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7916  00110C  0E5F               	movlw	low STR_34
  7917  00110E  6FBE               	movwf	sprintf@f& (0+255),b
  7918  001110  0E79               	movlw	high STR_34
  7919  001112  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7920  001114  EC70  F000         	call	_sprintf	;wreg free
  7921                           
  7922                           ;SystemStatus.c: 109: UART_Write_Text(dest);
  7923  001118  0E00               	movlw	low PrintHelpScreen@dest
  7924  00111A  6E19               	movwf	UART_Write_Text@text,c
  7925  00111C  0E01               	movlw	high PrintHelpScreen@dest
  7926  00111E  6E1A               	movwf	UART_Write_Text@text+1,c
  7927  001120  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7928                           
  7929                           ;SystemStatus.c: 110: sprintf(dest, "$RCP <X><cr>     Set Compression operation mode at 
      +                          RX system: Automatic[1] Manual[0] [Default = 0]\r\n");
  7930  001124  0E00               	movlw	low PrintHelpScreen@dest
  7931  001126  0100               	movlb	0	; () banked
  7932  001128  6FBC               	movwf	sprintf@sp& (0+255),b
  7933  00112A  0E01               	movlw	high PrintHelpScreen@dest
  7934  00112C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7935  00112E  0EFA               	movlw	low STR_35
  7936  001130  6FBE               	movwf	sprintf@f& (0+255),b
  7937  001132  0E78               	movlw	high STR_35
  7938  001134  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7939  001136  EC70  F000         	call	_sprintf	;wreg free
  7940                           
  7941                           ;SystemStatus.c: 111: UART_Write_Text(dest);
  7942  00113A  0E00               	movlw	low PrintHelpScreen@dest
  7943  00113C  6E19               	movwf	UART_Write_Text@text,c
  7944  00113E  0E01               	movlw	high PrintHelpScreen@dest
  7945  001140  6E1A               	movwf	UART_Write_Text@text+1,c
  7946  001142  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7947                           
  7948                           ;SystemStatus.c: 114: sprintf(dest, "\n\r<Common system commands>\n\r");
  7949  001146  0E00               	movlw	low PrintHelpScreen@dest
  7950  001148  0100               	movlb	0	; () banked
  7951  00114A  6FBC               	movwf	sprintf@sp& (0+255),b
  7952  00114C  0E01               	movlw	high PrintHelpScreen@dest
  7953  00114E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7954  001150  0E40               	movlw	low STR_36
  7955  001152  6FBE               	movwf	sprintf@f& (0+255),b
  7956  001154  0E7E               	movlw	high STR_36
  7957  001156  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7958  001158  EC70  F000         	call	_sprintf	;wreg free
  7959                           
  7960                           ;SystemStatus.c: 115: UART_Write_Text(dest);
  7961  00115C  0E00               	movlw	low PrintHelpScreen@dest
  7962  00115E  6E19               	movwf	UART_Write_Text@text,c
  7963  001160  0E01               	movlw	high PrintHelpScreen@dest
  7964  001162  6E1A               	movwf	UART_Write_Text@text+1,c
  7965  001164  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7966                           
  7967                           ;SystemStatus.c: 116: sprintf(dest, "$SH <cr>         Print system help message.\r\n");
  7968  001168  0E00               	movlw	low PrintHelpScreen@dest
  7969  00116A  0100               	movlb	0	; () banked
  7970  00116C  6FBC               	movwf	sprintf@sp& (0+255),b
  7971  00116E  0E01               	movlw	high PrintHelpScreen@dest
  7972  001170  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7973  001172  0EA2               	movlw	low STR_37
  7974  001174  6FBE               	movwf	sprintf@f& (0+255),b
  7975  001176  0E7C               	movlw	high STR_37
  7976  001178  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7977  00117A  EC70  F000         	call	_sprintf	;wreg free
  7978                           
  7979                           ;SystemStatus.c: 117: UART_Write_Text(dest);
  7980  00117E  0E00               	movlw	low PrintHelpScreen@dest
  7981  001180  6E19               	movwf	UART_Write_Text@text,c
  7982  001182  0E01               	movlw	high PrintHelpScreen@dest
  7983  001184  6E1A               	movwf	UART_Write_Text@text+1,c
  7984  001186  EC01  F01D         	call	_UART_Write_Text	;wreg free
  7985                           
  7986                           ;SystemStatus.c: 118: sprintf(dest, "$SBT <XX><cr>    Set UART refresh rate (1-20)[Hz].\
      +                          r\n");
  7987  00118A  0E00               	movlw	low PrintHelpScreen@dest
  7988  00118C  0100               	movlb	0	; () banked
  7989  00118E  6FBC               	movwf	sprintf@sp& (0+255),b
  7990  001190  0E01               	movlw	high PrintHelpScreen@dest
  7991  001192  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7992  001194  0E6D               	movlw	low STR_38
  7993  001196  6FBE               	movwf	sprintf@f& (0+255),b
  7994  001198  0E7C               	movlw	high STR_38
  7995  00119A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7996  00119C  EC70  F000         	call	_sprintf	;wreg free
  7997                           
  7998                           ;SystemStatus.c: 119: UART_Write_Text(dest);
  7999  0011A0  0E00               	movlw	low PrintHelpScreen@dest
  8000  0011A2  6E19               	movwf	UART_Write_Text@text,c
  8001  0011A4  0E01               	movlw	high PrintHelpScreen@dest
  8002  0011A6  6E1A               	movwf	UART_Write_Text@text+1,c
  8003  0011A8  EC01  F01D         	call	_UART_Write_Text	;wreg free
  8004                           
  8005                           ;SystemStatus.c: 120: sprintf(dest, "$SBU <X><cr>     Set UART automatic operation: Auto
      +                          matic[1] Manual[0] [Default = 0]\r\n");
  8006  0011AC  0E00               	movlw	low PrintHelpScreen@dest
  8007  0011AE  0100               	movlb	0	; () banked
  8008  0011B0  6FBC               	movwf	sprintf@sp& (0+255),b
  8009  0011B2  0E01               	movlw	high PrintHelpScreen@dest
  8010  0011B4  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8011  0011B6  0EB5               	movlw	low STR_39
  8012  0011B8  6FBE               	movwf	sprintf@f& (0+255),b
  8013  0011BA  0E79               	movlw	high STR_39
  8014  0011BC  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8015  0011BE  EC70  F000         	call	_sprintf	;wreg free
  8016                           
  8017                           ;SystemStatus.c: 121: UART_Write_Text(dest);
  8018  0011C2  0E00               	movlw	low PrintHelpScreen@dest
  8019  0011C4  6E19               	movwf	UART_Write_Text@text,c
  8020  0011C6  0E01               	movlw	high PrintHelpScreen@dest
  8021  0011C8  6E1A               	movwf	UART_Write_Text@text+1,c
  8022  0011CA  EC01  F01D         	call	_UART_Write_Text	;wreg free
  8023                           
  8024                           ;SystemStatus.c: 122: sprintf(dest, "$SQ <X><cr>      Get system status.\r\n");
  8025  0011CE  0E00               	movlw	low PrintHelpScreen@dest
  8026  0011D0  0100               	movlb	0	; () banked
  8027  0011D2  6FBC               	movwf	sprintf@sp& (0+255),b
  8028  0011D4  0E01               	movlw	high PrintHelpScreen@dest
  8029  0011D6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8030  0011D8  0E2B               	movlw	low STR_40
  8031  0011DA  6FBE               	movwf	sprintf@f& (0+255),b
  8032  0011DC  0E7D               	movlw	high STR_40
  8033  0011DE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8034  0011E0  EC70  F000         	call	_sprintf	;wreg free
  8035                           
  8036                           ;SystemStatus.c: 123: UART_Write_Text(dest);
  8037  0011E4  0E00               	movlw	low PrintHelpScreen@dest
  8038  0011E6  6E19               	movwf	UART_Write_Text@text,c
  8039  0011E8  0E01               	movlw	high PrintHelpScreen@dest
  8040  0011EA  6E1A               	movwf	UART_Write_Text@text+1,c
  8041  0011EC  EC01  F01D         	call	_UART_Write_Text	;wreg free
  8042                           
  8043                           ;SystemStatus.c: 124: sprintf(dest, "$SL <cr>         Test system LEDs.\r\n");
  8044  0011F0  0E00               	movlw	low PrintHelpScreen@dest
  8045  0011F2  0100               	movlb	0	; () banked
  8046  0011F4  6FBC               	movwf	sprintf@sp& (0+255),b
  8047  0011F6  0E01               	movlw	high PrintHelpScreen@dest
  8048  0011F8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8049  0011FA  0E51               	movlw	low STR_41
  8050  0011FC  6FBE               	movwf	sprintf@f& (0+255),b
  8051  0011FE  0E7D               	movlw	high STR_41
  8052  001200  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8053  001202  EC70  F000         	call	_sprintf	;wreg free
  8054                           
  8055                           ;SystemStatus.c: 125: UART_Write_Text(dest);
  8056  001206  0E00               	movlw	low PrintHelpScreen@dest
  8057  001208  6E19               	movwf	UART_Write_Text@text,c
  8058  00120A  0E01               	movlw	high PrintHelpScreen@dest
  8059  00120C  6E1A               	movwf	UART_Write_Text@text+1,c
  8060  00120E  EC01  F01D         	call	_UART_Write_Text	;wreg free
  8061                           
  8062                           ;SystemStatus.c: 126: sprintf(dest, "$TD <DAC NUM><DAC VALUE><cr>         Set TX DAC <0-
      +                          3> <0-Vref[4 dig]> \r\n");
  8063  001212  0E00               	movlw	low PrintHelpScreen@dest
  8064  001214  0100               	movlb	0	; () banked
  8065  001216  6FBC               	movwf	sprintf@sp& (0+255),b
  8066  001218  0E01               	movlw	high PrintHelpScreen@dest
  8067  00121A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8068  00121C  0EEF               	movlw	low STR_42
  8069  00121E  6FBE               	movwf	sprintf@f& (0+255),b
  8070  001220  0E7A               	movlw	high STR_42
  8071  001222  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8072  001224  EC70  F000         	call	_sprintf	;wreg free
  8073                           
  8074                           ;SystemStatus.c: 127: UART_Write_Text(dest);
  8075  001228  0E00               	movlw	low PrintHelpScreen@dest
  8076  00122A  6E19               	movwf	UART_Write_Text@text,c
  8077  00122C  0E01               	movlw	high PrintHelpScreen@dest
  8078  00122E  6E1A               	movwf	UART_Write_Text@text+1,c
  8079  001230  EC01  F01D         	call	_UART_Write_Text	;wreg free
  8080  001234  0012               	return		;funcret
  8081  001236                     __end_of_PrintHelpScreen:
  8082                           	opt stack 0
  8083                           tosu	equ	0xFFF
  8084                           tosh	equ	0xFFE
  8085                           tosl	equ	0xFFD
  8086                           pclath	equ	0xFFA
  8087                           tblptru	equ	0xFF8
  8088                           tblptrh	equ	0xFF7
  8089                           tblptrl	equ	0xFF6
  8090                           tablat	equ	0xFF5
  8091                           prodh	equ	0xFF4
  8092                           prodl	equ	0xFF3
  8093                           postinc0	equ	0xFEE
  8094                           wreg	equ	0xFE8
  8095                           indf1	equ	0xFE7
  8096                           postdec1	equ	0xFE5
  8097                           fsr1h	equ	0xFE2
  8098                           fsr1l	equ	0xFE1
  8099                           indf2	equ	0xFDF
  8100                           postinc2	equ	0xFDE
  8101                           postdec2	equ	0xFDD
  8102                           fsr2h	equ	0xFDA
  8103                           fsr2l	equ	0xFD9
  8104                           status	equ	0xFD8
  8105                           
  8106 ;; *************** function _EUSART1_Read *****************
  8107 ;; Defined at:
  8108 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;		None
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;  readValue       2   24[COMRAM] unsigned int 
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  1    wreg      unsigned char 
  8115 ;; Registers used:
  8116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8122 ;;      Params:         0       0       0       0       0       0       0
  8123 ;;      Locals:         2       0       0       0       0       0       0
  8124 ;;      Temps:          1       0       0       0       0       0       0
  8125 ;;      Totals:         3       0       0       0       0       0       0
  8126 ;;Total ram usage:        3 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:    3
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		_readUartByte
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           	psect	text20
  8137  004014                     __ptext20:
  8138                           	opt stack 0
  8139  004014                     _EUSART1_Read:
  8140                           	opt stack 26
  8141                           
  8142                           ;eusart1.c: 112: uint16_t readValue = 0;
  8143                           
  8144                           ;incstack = 0
  8145  004014  0E00               	movlw	0
  8146  004016  6E1A               	movwf	EUSART1_Read@readValue+1,c
  8147  004018  0E00               	movlw	0
  8148  00401A  6E19               	movwf	EUSART1_Read@readValue,c
  8149                           
  8150                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  8151  00401C  0101               	movlb	1	; () banked
  8152  00401E  51E7               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  8153  004020  A4D8               	btfss	status,2,c
  8154  004022  D002               	goto	l963
  8155                           
  8156                           ; BSR set to: 1
  8157                           ;eusart1.c: 120: {
  8158                           ;eusart1.c: 121: return readValue;
  8159  004024  5019               	movf	EUSART1_Read@readValue,w,c
  8160                           
  8161                           ; BSR set to: 1
  8162  004026  0012               	return	
  8163  004028                     l963:
  8164                           
  8165                           ; BSR set to: 1
  8166                           ;eusart1.c: 122: }
  8167                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  8168                           
  8169                           ; BSR set to: 1
  8170  004028  5039               	movf	_eusart1RxTail,w,c	;volatile
  8171  00402A  0D01               	mullw	1
  8172  00402C  0E46               	movlw	low _eusart1RxBuffer
  8173  00402E  24F3               	addwf	prodl,w,c
  8174  004030  6ED9               	movwf	fsr2l,c
  8175  004032  0E02               	movlw	high _eusart1RxBuffer
  8176  004034  20F4               	addwfc	prodh,w,c
  8177  004036  6EDA               	movwf	fsr2h,c
  8178  004038  50DF               	movf	indf2,w,c
  8179  00403A  6E18               	movwf	??_EUSART1_Read& (0+255),c
  8180  00403C  5018               	movf	??_EUSART1_Read,w,c
  8181  00403E  6E19               	movwf	EUSART1_Read@readValue,c
  8182  004040  6A1A               	clrf	EUSART1_Read@readValue+1,c
  8183                           
  8184                           ; BSR set to: 1
  8185  004042  2A39               	incf	_eusart1RxTail,f,c	;volatile
  8186                           
  8187                           ; BSR set to: 1
  8188                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  8189  004044  0E27               	movlw	39
  8190  004046  6439               	cpfsgt	_eusart1RxTail,c	;volatile
  8191  004048  D002               	goto	l965
  8192                           
  8193                           ; BSR set to: 1
  8194                           ;eusart1.c: 126: {
  8195                           ;eusart1.c: 127: eusart1RxTail = 0;
  8196  00404A  0E00               	movlw	0
  8197  00404C  6E39               	movwf	_eusart1RxTail,c	;volatile
  8198  00404E                     l965:
  8199                           
  8200                           ; BSR set to: 1
  8201                           ;eusart1.c: 128: }
  8202                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  8203                           
  8204                           ; BSR set to: 1
  8205  00404E  9A9D               	bcf	3997,5,c	;volatile
  8206                           
  8207                           ; BSR set to: 1
  8208                           ;eusart1.c: 130: eusart1RxCount--;
  8209  004050  07E7               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  8210                           
  8211                           ; BSR set to: 1
  8212                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  8213  004052  8A9D               	bsf	3997,5,c	;volatile
  8214                           
  8215                           ; BSR set to: 1
  8216                           ;eusart1.c: 133: return readValue;
  8217  004054  5019               	movf	EUSART1_Read@readValue,w,c
  8218  004056  0012               	return	
  8219  004058                     __end_of_EUSART1_Read:
  8220                           	opt stack 0
  8221                           tosu	equ	0xFFF
  8222                           tosh	equ	0xFFE
  8223                           tosl	equ	0xFFD
  8224                           pclath	equ	0xFFA
  8225                           tblptru	equ	0xFF8
  8226                           tblptrh	equ	0xFF7
  8227                           tblptrl	equ	0xFF6
  8228                           tablat	equ	0xFF5
  8229                           prodh	equ	0xFF4
  8230                           prodl	equ	0xFF3
  8231                           postinc0	equ	0xFEE
  8232                           wreg	equ	0xFE8
  8233                           indf1	equ	0xFE7
  8234                           postdec1	equ	0xFE5
  8235                           fsr1h	equ	0xFE2
  8236                           fsr1l	equ	0xFE1
  8237                           indf2	equ	0xFDF
  8238                           postinc2	equ	0xFDE
  8239                           postdec2	equ	0xFDD
  8240                           fsr2h	equ	0xFDA
  8241                           fsr2l	equ	0xFD9
  8242                           status	equ	0xFD8
  8243                           
  8244 ;; *************** function _keepAliveSignalLed *****************
  8245 ;; Defined at:
  8246 ;;		line 35 in file "LedsApp.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;		None
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;		None
  8251 ;; Return value:  Size  Location     Type
  8252 ;;                  1    wreg      void 
  8253 ;; Registers used:
  8254 ;;		wreg, status,2, status,0
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8260 ;;      Params:         0       0       0       0       0       0       0
  8261 ;;      Locals:         0       0       0       0       0       0       0
  8262 ;;      Temps:          1       0       0       0       0       0       0
  8263 ;;      Totals:         1       0       0       0       0       0       0
  8264 ;;Total ram usage:        1 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    3
  8267 ;; This function calls:
  8268 ;;		Nothing
  8269 ;; This function is called by:
  8270 ;;		_main
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text21
  8275  0044D6                     __ptext21:
  8276                           	opt stack 0
  8277  0044D6                     _keepAliveSignalLed:
  8278                           	opt stack 27
  8279                           
  8280                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  8281                           
  8282                           ; BSR set to: 1
  8283                           ;incstack = 0
  8284  0044D6  B08B               	btfsc	3979,0,c	;volatile
  8285  0044D8  D003               	goto	u6490
  8286  0044DA  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8287  0044DC  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  8288  0044DE  D001               	goto	u6508
  8289  0044E0                     u6490:
  8290  0044E0  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8291  0044E2                     u6508:
  8292  0044E2  508B               	movf	3979,w,c	;volatile
  8293  0044E4  1818               	xorwf	??_keepAliveSignalLed,w,c
  8294  0044E6  0BFE               	andlw	-2
  8295  0044E8  1818               	xorwf	??_keepAliveSignalLed,w,c
  8296  0044EA  6E8B               	movwf	3979,c	;volatile
  8297  0044EC  0012               	return		;funcret
  8298  0044EE                     __end_of_keepAliveSignalLed:
  8299                           	opt stack 0
  8300                           tosu	equ	0xFFF
  8301                           tosh	equ	0xFFE
  8302                           tosl	equ	0xFFD
  8303                           pclath	equ	0xFFA
  8304                           tblptru	equ	0xFF8
  8305                           tblptrh	equ	0xFF7
  8306                           tblptrl	equ	0xFF6
  8307                           tablat	equ	0xFF5
  8308                           prodh	equ	0xFF4
  8309                           prodl	equ	0xFF3
  8310                           postinc0	equ	0xFEE
  8311                           wreg	equ	0xFE8
  8312                           indf1	equ	0xFE7
  8313                           postdec1	equ	0xFE5
  8314                           fsr1h	equ	0xFE2
  8315                           fsr1l	equ	0xFE1
  8316                           indf2	equ	0xFDF
  8317                           postinc2	equ	0xFDE
  8318                           postdec2	equ	0xFDD
  8319                           fsr2h	equ	0xFDA
  8320                           fsr2l	equ	0xFD9
  8321                           status	equ	0xFD8
  8322                           
  8323 ;; *************** function _SetMcuSystem *****************
  8324 ;; Defined at:
  8325 ;;		line 11 in file "SystemSettings.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;		None
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;		None
  8330 ;; Return value:  Size  Location     Type
  8331 ;;                  1    wreg      void 
  8332 ;; Registers used:
  8333 ;;		wreg, status,2, status,0, cstack
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8339 ;;      Params:         0       0       0       0       0       0       0
  8340 ;;      Locals:         0       0       0       0       0       0       0
  8341 ;;      Temps:          0       0       0       0       0       0       0
  8342 ;;      Totals:         0       0       0       0       0       0       0
  8343 ;;Total ram usage:        0 bytes
  8344 ;; Hardware stack levels used:    1
  8345 ;; Hardware stack levels required when called:    6
  8346 ;; This function calls:
  8347 ;;		_SYSTEM_Initialize
  8348 ;; This function is called by:
  8349 ;;		_main
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           	psect	text22
  8354  00457E                     __ptext22:
  8355                           	opt stack 0
  8356  00457E                     _SetMcuSystem:
  8357                           	opt stack 24
  8358                           
  8359                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  8360                           
  8361                           ;incstack = 0
  8362  00457E  EC5E  F022         	call	_SYSTEM_Initialize	;wreg free
  8363                           
  8364                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  8365  004582  8EF2               	bsf	intcon,7,c	;volatile
  8366                           
  8367                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  8368  004584  8CF2               	bsf	intcon,6,c	;volatile
  8369  004586  0012               	return		;funcret
  8370  004588                     __end_of_SetMcuSystem:
  8371                           	opt stack 0
  8372                           tosu	equ	0xFFF
  8373                           tosh	equ	0xFFE
  8374                           tosl	equ	0xFFD
  8375                           pclath	equ	0xFFA
  8376                           tblptru	equ	0xFF8
  8377                           tblptrh	equ	0xFF7
  8378                           tblptrl	equ	0xFF6
  8379                           tablat	equ	0xFF5
  8380                           prodh	equ	0xFF4
  8381                           prodl	equ	0xFF3
  8382                           intcon	equ	0xFF2
  8383                           postinc0	equ	0xFEE
  8384                           wreg	equ	0xFE8
  8385                           indf1	equ	0xFE7
  8386                           postdec1	equ	0xFE5
  8387                           fsr1h	equ	0xFE2
  8388                           fsr1l	equ	0xFE1
  8389                           indf2	equ	0xFDF
  8390                           postinc2	equ	0xFDE
  8391                           postdec2	equ	0xFDD
  8392                           fsr2h	equ	0xFDA
  8393                           fsr2l	equ	0xFD9
  8394                           status	equ	0xFD8
  8395                           
  8396 ;; *************** function _SYSTEM_Initialize *****************
  8397 ;; Defined at:
  8398 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;		None
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;		None
  8403 ;; Return value:  Size  Location     Type
  8404 ;;                  1    wreg      void 
  8405 ;; Registers used:
  8406 ;;		wreg, status,2, status,0, cstack
  8407 ;; Tracked objects:
  8408 ;;		On entry : 0/0
  8409 ;;		On exit  : 0/0
  8410 ;;		Unchanged: 0/0
  8411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8412 ;;      Params:         0       0       0       0       0       0       0
  8413 ;;      Locals:         0       0       0       0       0       0       0
  8414 ;;      Temps:          0       0       0       0       0       0       0
  8415 ;;      Totals:         0       0       0       0       0       0       0
  8416 ;;Total ram usage:        0 bytes
  8417 ;; Hardware stack levels used:    1
  8418 ;; Hardware stack levels required when called:    5
  8419 ;; This function calls:
  8420 ;;		_ADC_Initialize
  8421 ;;		_EUSART1_Initialize
  8422 ;;		_INTERRUPT_Initialize
  8423 ;;		_OSCILLATOR_Initialize
  8424 ;;		_PIN_MANAGER_Initialize
  8425 ;;		_TMR0_Initialize
  8426 ;; This function is called by:
  8427 ;;		_SetMcuSystem
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           	psect	text23
  8432  0044BC                     __ptext23:
  8433                           	opt stack 0
  8434  0044BC                     _SYSTEM_Initialize:
  8435                           	opt stack 24
  8436                           
  8437                           ;mcc.c: 114: INTERRUPT_Initialize();
  8438                           
  8439                           ;incstack = 0
  8440  0044BC  ECD6  F022         	call	_INTERRUPT_Initialize	;wreg free
  8441                           
  8442                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8443  0044C0  ECA1  F01F         	call	_PIN_MANAGER_Initialize	;wreg free
  8444                           
  8445                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8446  0044C4  ECAB  F022         	call	_OSCILLATOR_Initialize	;wreg free
  8447                           
  8448                           ;mcc.c: 117: ADC_Initialize();
  8449  0044C8  EC77  F022         	call	_ADC_Initialize	;wreg free
  8450                           
  8451                           ;mcc.c: 118: TMR0_Initialize();
  8452  0044CC  EC52  F021         	call	_TMR0_Initialize	;wreg free
  8453                           
  8454                           ;mcc.c: 119: EUSART1_Initialize();
  8455  0044D0  EC1C  F021         	call	_EUSART1_Initialize	;wreg free
  8456  0044D4  0012               	return		;funcret
  8457  0044D6                     __end_of_SYSTEM_Initialize:
  8458                           	opt stack 0
  8459                           tosu	equ	0xFFF
  8460                           tosh	equ	0xFFE
  8461                           tosl	equ	0xFFD
  8462                           pclath	equ	0xFFA
  8463                           tblptru	equ	0xFF8
  8464                           tblptrh	equ	0xFF7
  8465                           tblptrl	equ	0xFF6
  8466                           tablat	equ	0xFF5
  8467                           prodh	equ	0xFF4
  8468                           prodl	equ	0xFF3
  8469                           intcon	equ	0xFF2
  8470                           postinc0	equ	0xFEE
  8471                           wreg	equ	0xFE8
  8472                           indf1	equ	0xFE7
  8473                           postdec1	equ	0xFE5
  8474                           fsr1h	equ	0xFE2
  8475                           fsr1l	equ	0xFE1
  8476                           indf2	equ	0xFDF
  8477                           postinc2	equ	0xFDE
  8478                           postdec2	equ	0xFDD
  8479                           fsr2h	equ	0xFDA
  8480                           fsr2l	equ	0xFD9
  8481                           status	equ	0xFD8
  8482                           
  8483 ;; *************** function _TMR0_Initialize *****************
  8484 ;; Defined at:
  8485 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8486 ;; Parameters:    Size  Location     Type
  8487 ;;		None
  8488 ;; Auto vars:     Size  Location     Type
  8489 ;;		None
  8490 ;; Return value:  Size  Location     Type
  8491 ;;                  1    wreg      void 
  8492 ;; Registers used:
  8493 ;;		wreg, status,2, status,0, cstack
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 0/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8499 ;;      Params:         0       0       0       0       0       0       0
  8500 ;;      Locals:         0       0       0       0       0       0       0
  8501 ;;      Temps:          2       0       0       0       0       0       0
  8502 ;;      Totals:         2       0       0       0       0       0       0
  8503 ;;Total ram usage:        2 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    4
  8506 ;; This function calls:
  8507 ;;		_TMR0_SetInterruptHandler
  8508 ;; This function is called by:
  8509 ;;		_SYSTEM_Initialize
  8510 ;; This function uses a non-reentrant model
  8511 ;;
  8512                           
  8513                           	psect	text24
  8514  0042A4                     __ptext24:
  8515                           	opt stack 0
  8516  0042A4                     _TMR0_Initialize:
  8517                           	opt stack 24
  8518                           
  8519                           ;tmr0.c: 71: TMR0H = 0x3C;
  8520                           
  8521                           ;incstack = 0
  8522  0042A4  0E3C               	movlw	60
  8523  0042A6  6ED7               	movwf	4055,c	;volatile
  8524                           
  8525                           ;tmr0.c: 74: TMR0L = 0xAF;
  8526  0042A8  0EAF               	movlw	175
  8527  0042AA  6ED6               	movwf	4054,c	;volatile
  8528                           
  8529                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8530  0042AC  50D6               	movf	4054,w,c	;volatile
  8531  0042AE  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8532  0042B2  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8533  0042B4  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8534  0042B8  6A1A               	clrf	??_TMR0_Initialize,c
  8535  0042BA  101A               	iorwf	??_TMR0_Initialize,w,c
  8536  0042BC  6E46               	movwf	_timer0ReloadVal,c	;volatile
  8537  0042BE  501B               	movf	??_TMR0_Initialize+1,w,c
  8538  0042C0  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  8539                           
  8540                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8541  0042C2  94F2               	bcf	intcon,2,c	;volatile
  8542                           
  8543                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8544  0042C4  8AF2               	bsf	intcon,5,c	;volatile
  8545                           
  8546                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8547  0042C6  0E00               	movlw	0
  8548  0042C8  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8549  0042CA  0E00               	movlw	0
  8550  0042CC  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8551  0042CE  ECC4  F022         	call	_TMR0_SetInterruptHandler	;wreg free
  8552                           
  8553                           ;tmr0.c: 90: T0CON = 0x90;
  8554  0042D2  0E90               	movlw	144
  8555  0042D4  6ED5               	movwf	4053,c	;volatile
  8556  0042D6  0012               	return		;funcret
  8557  0042D8                     __end_of_TMR0_Initialize:
  8558                           	opt stack 0
  8559                           tosu	equ	0xFFF
  8560                           tosh	equ	0xFFE
  8561                           tosl	equ	0xFFD
  8562                           pclath	equ	0xFFA
  8563                           tblptru	equ	0xFF8
  8564                           tblptrh	equ	0xFF7
  8565                           tblptrl	equ	0xFF6
  8566                           tablat	equ	0xFF5
  8567                           prodh	equ	0xFF4
  8568                           prodl	equ	0xFF3
  8569                           intcon	equ	0xFF2
  8570                           postinc0	equ	0xFEE
  8571                           wreg	equ	0xFE8
  8572                           indf1	equ	0xFE7
  8573                           postdec1	equ	0xFE5
  8574                           fsr1h	equ	0xFE2
  8575                           fsr1l	equ	0xFE1
  8576                           indf2	equ	0xFDF
  8577                           postinc2	equ	0xFDE
  8578                           postdec2	equ	0xFDD
  8579                           fsr2h	equ	0xFDA
  8580                           fsr2l	equ	0xFD9
  8581                           status	equ	0xFD8
  8582                           
  8583 ;; *************** function _TMR0_SetInterruptHandler *****************
  8584 ;; Defined at:
  8585 ;;		line 181 in file "mcc_generated_files/tmr0.c"
  8586 ;; Parameters:    Size  Location     Type
  8587 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8588 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8589 ;; Auto vars:     Size  Location     Type
  8590 ;;		None
  8591 ;; Return value:  Size  Location     Type
  8592 ;;                  1    wreg      void 
  8593 ;; Registers used:
  8594 ;;		wreg, status,2, status,0
  8595 ;; Tracked objects:
  8596 ;;		On entry : 0/0
  8597 ;;		On exit  : 0/0
  8598 ;;		Unchanged: 0/0
  8599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8600 ;;      Params:         2       0       0       0       0       0       0
  8601 ;;      Locals:         0       0       0       0       0       0       0
  8602 ;;      Temps:          0       0       0       0       0       0       0
  8603 ;;      Totals:         2       0       0       0       0       0       0
  8604 ;;Total ram usage:        2 bytes
  8605 ;; Hardware stack levels used:    1
  8606 ;; Hardware stack levels required when called:    3
  8607 ;; This function calls:
  8608 ;;		Nothing
  8609 ;; This function is called by:
  8610 ;;		_TMR0_Initialize
  8611 ;; This function uses a non-reentrant model
  8612 ;;
  8613                           
  8614                           	psect	text25
  8615  004588                     __ptext25:
  8616                           	opt stack 0
  8617  004588                     _TMR0_SetInterruptHandler:
  8618                           	opt stack 24
  8619                           
  8620                           ;tmr0.c: 182: TMR0_InterruptHandler = InterruptHandler;
  8621                           
  8622                           ;incstack = 0
  8623  004588  C018  F2E2         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8624  00458C  C019  F2E3         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8625  004590  0012               	return		;funcret
  8626  004592                     __end_of_TMR0_SetInterruptHandler:
  8627                           	opt stack 0
  8628                           tosu	equ	0xFFF
  8629                           tosh	equ	0xFFE
  8630                           tosl	equ	0xFFD
  8631                           pclath	equ	0xFFA
  8632                           tblptru	equ	0xFF8
  8633                           tblptrh	equ	0xFF7
  8634                           tblptrl	equ	0xFF6
  8635                           tablat	equ	0xFF5
  8636                           prodh	equ	0xFF4
  8637                           prodl	equ	0xFF3
  8638                           intcon	equ	0xFF2
  8639                           postinc0	equ	0xFEE
  8640                           wreg	equ	0xFE8
  8641                           indf1	equ	0xFE7
  8642                           postdec1	equ	0xFE5
  8643                           fsr1h	equ	0xFE2
  8644                           fsr1l	equ	0xFE1
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           postdec2	equ	0xFDD
  8648                           fsr2h	equ	0xFDA
  8649                           fsr2l	equ	0xFD9
  8650                           status	equ	0xFD8
  8651                           
  8652 ;; *************** function _PIN_MANAGER_Initialize *****************
  8653 ;; Defined at:
  8654 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;		None
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;		None
  8659 ;; Return value:  Size  Location     Type
  8660 ;;                  1    wreg      void 
  8661 ;; Registers used:
  8662 ;;		wreg, status,2
  8663 ;; Tracked objects:
  8664 ;;		On entry : 0/0
  8665 ;;		On exit  : 0/0
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8668 ;;      Params:         0       0       0       0       0       0       0
  8669 ;;      Locals:         0       0       0       0       0       0       0
  8670 ;;      Temps:          0       0       0       0       0       0       0
  8671 ;;      Totals:         0       0       0       0       0       0       0
  8672 ;;Total ram usage:        0 bytes
  8673 ;; Hardware stack levels used:    1
  8674 ;; Hardware stack levels required when called:    3
  8675 ;; This function calls:
  8676 ;;		Nothing
  8677 ;; This function is called by:
  8678 ;;		_SYSTEM_Initialize
  8679 ;; This function uses a non-reentrant model
  8680 ;;
  8681                           
  8682                           	psect	text26
  8683  003F42                     __ptext26:
  8684                           	opt stack 0
  8685  003F42                     _PIN_MANAGER_Initialize:
  8686                           	opt stack 25
  8687                           
  8688                           ;pin_manager.c: 57: LATE = 0x00;
  8689                           
  8690                           ;incstack = 0
  8691  003F42  0E00               	movlw	0
  8692  003F44  6E8D               	movwf	3981,c	;volatile
  8693                           
  8694                           ;pin_manager.c: 58: LATD = 0x40;
  8695  003F46  0E40               	movlw	64
  8696  003F48  6E8C               	movwf	3980,c	;volatile
  8697                           
  8698                           ;pin_manager.c: 59: LATA = 0x06;
  8699  003F4A  0E06               	movlw	6
  8700  003F4C  6E89               	movwf	3977,c	;volatile
  8701                           
  8702                           ;pin_manager.c: 60: LATB = 0x00;
  8703  003F4E  0E00               	movlw	0
  8704  003F50  6E8A               	movwf	3978,c	;volatile
  8705                           
  8706                           ;pin_manager.c: 61: LATC = 0x00;
  8707  003F52  0E00               	movlw	0
  8708  003F54  6E8B               	movwf	3979,c	;volatile
  8709                           
  8710                           ;pin_manager.c: 66: TRISE = 0x07;
  8711  003F56  0E07               	movlw	7
  8712  003F58  6E96               	movwf	3990,c	;volatile
  8713                           
  8714                           ;pin_manager.c: 67: TRISA = 0xE1;
  8715  003F5A  0EE1               	movlw	225
  8716  003F5C  6E92               	movwf	3986,c	;volatile
  8717                           
  8718                           ;pin_manager.c: 68: TRISB = 0xEE;
  8719  003F5E  0EEE               	movlw	238
  8720  003F60  6E93               	movwf	3987,c	;volatile
  8721                           
  8722                           ;pin_manager.c: 69: TRISC = 0x80;
  8723  003F62  0E80               	movlw	128
  8724  003F64  6E94               	movwf	3988,c	;volatile
  8725                           
  8726                           ;pin_manager.c: 70: TRISD = 0xB2;
  8727  003F66  0EB2               	movlw	178
  8728  003F68  6E95               	movwf	3989,c	;volatile
  8729                           
  8730                           ;pin_manager.c: 75: ANSELC = 0x30;
  8731  003F6A  0E30               	movlw	48
  8732  003F6C  010F               	movlb	15	; () banked
  8733  003F6E  6F3A               	movwf	58,b	;volatile
  8734                           
  8735                           ;pin_manager.c: 76: ANSELB = 0x32;
  8736  003F70  0E32               	movlw	50
  8737  003F72  6F39               	movwf	57,b	;volatile
  8738                           
  8739                           ;pin_manager.c: 77: ANSELD = 0xA4;
  8740  003F74  0EA4               	movlw	164
  8741  003F76  6F3B               	movwf	59,b	;volatile
  8742                           
  8743                           ;pin_manager.c: 78: ANSELE = 0x07;
  8744  003F78  0E07               	movlw	7
  8745  003F7A  6F3C               	movwf	60,b	;volatile
  8746                           
  8747                           ;pin_manager.c: 79: ANSELA = 0x2F;
  8748  003F7C  0E2F               	movlw	47
  8749  003F7E  6F38               	movwf	56,b	;volatile
  8750                           
  8751                           ;pin_manager.c: 84: WPUB = 0xC2;
  8752  003F80  0EC2               	movlw	194
  8753  003F82  6E61               	movwf	3937,c	;volatile
  8754                           
  8755                           ; BSR set to: 15
  8756                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 1;
  8757  003F84  8EF1               	bsf	intcon2,7,c	;volatile
  8758                           
  8759                           ; BSR set to: 15
  8760                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  8761  003F86  86F2               	bsf	intcon,3,c	;volatile
  8762                           
  8763                           ; BSR set to: 15
  8764  003F88  0012               	return		;funcret
  8765  003F8A                     __end_of_PIN_MANAGER_Initialize:
  8766                           	opt stack 0
  8767                           tosu	equ	0xFFF
  8768                           tosh	equ	0xFFE
  8769                           tosl	equ	0xFFD
  8770                           pclath	equ	0xFFA
  8771                           tblptru	equ	0xFF8
  8772                           tblptrh	equ	0xFF7
  8773                           tblptrl	equ	0xFF6
  8774                           tablat	equ	0xFF5
  8775                           prodh	equ	0xFF4
  8776                           prodl	equ	0xFF3
  8777                           intcon	equ	0xFF2
  8778                           intcon2	equ	0xFF1
  8779                           postinc0	equ	0xFEE
  8780                           wreg	equ	0xFE8
  8781                           indf1	equ	0xFE7
  8782                           postdec1	equ	0xFE5
  8783                           fsr1h	equ	0xFE2
  8784                           fsr1l	equ	0xFE1
  8785                           indf2	equ	0xFDF
  8786                           postinc2	equ	0xFDE
  8787                           postdec2	equ	0xFDD
  8788                           fsr2h	equ	0xFDA
  8789                           fsr2l	equ	0xFD9
  8790                           status	equ	0xFD8
  8791                           
  8792 ;; *************** function _OSCILLATOR_Initialize *****************
  8793 ;; Defined at:
  8794 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;		None
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  1    wreg      void 
  8801 ;; Registers used:
  8802 ;;		wreg, status,2
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8808 ;;      Params:         0       0       0       0       0       0       0
  8809 ;;      Locals:         0       0       0       0       0       0       0
  8810 ;;      Temps:          0       0       0       0       0       0       0
  8811 ;;      Totals:         0       0       0       0       0       0       0
  8812 ;;Total ram usage:        0 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    3
  8815 ;; This function calls:
  8816 ;;		Nothing
  8817 ;; This function is called by:
  8818 ;;		_SYSTEM_Initialize
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           	psect	text27
  8823  004556                     __ptext27:
  8824                           	opt stack 0
  8825  004556                     _OSCILLATOR_Initialize:
  8826                           	opt stack 25
  8827                           
  8828                           ;mcc.c: 125: OSCCON = 0x60;
  8829                           
  8830                           ; BSR set to: 15
  8831                           ;incstack = 0
  8832  004556  0E60               	movlw	96
  8833  004558  6ED3               	movwf	4051,c	;volatile
  8834                           
  8835                           ;mcc.c: 127: OSCCON2 = 0x04;
  8836  00455A  0E04               	movlw	4
  8837  00455C  6ED2               	movwf	4050,c	;volatile
  8838                           
  8839                           ;mcc.c: 129: OSCTUNE = 0x00;
  8840  00455E  0E00               	movlw	0
  8841  004560  6E9B               	movwf	3995,c	;volatile
  8842  004562  0012               	return		;funcret
  8843  004564                     __end_of_OSCILLATOR_Initialize:
  8844                           	opt stack 0
  8845                           tosu	equ	0xFFF
  8846                           tosh	equ	0xFFE
  8847                           tosl	equ	0xFFD
  8848                           pclath	equ	0xFFA
  8849                           tblptru	equ	0xFF8
  8850                           tblptrh	equ	0xFF7
  8851                           tblptrl	equ	0xFF6
  8852                           tablat	equ	0xFF5
  8853                           prodh	equ	0xFF4
  8854                           prodl	equ	0xFF3
  8855                           intcon	equ	0xFF2
  8856                           intcon2	equ	0xFF1
  8857                           postinc0	equ	0xFEE
  8858                           wreg	equ	0xFE8
  8859                           indf1	equ	0xFE7
  8860                           postdec1	equ	0xFE5
  8861                           fsr1h	equ	0xFE2
  8862                           fsr1l	equ	0xFE1
  8863                           indf2	equ	0xFDF
  8864                           postinc2	equ	0xFDE
  8865                           postdec2	equ	0xFDD
  8866                           fsr2h	equ	0xFDA
  8867                           fsr2l	equ	0xFD9
  8868                           status	equ	0xFD8
  8869                           
  8870 ;; *************** function _INTERRUPT_Initialize *****************
  8871 ;; Defined at:
  8872 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8873 ;; Parameters:    Size  Location     Type
  8874 ;;		None
  8875 ;; Auto vars:     Size  Location     Type
  8876 ;;		None
  8877 ;; Return value:  Size  Location     Type
  8878 ;;                  1    wreg      void 
  8879 ;; Registers used:
  8880 ;;		None
  8881 ;; Tracked objects:
  8882 ;;		On entry : 0/0
  8883 ;;		On exit  : 0/0
  8884 ;;		Unchanged: 0/0
  8885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8886 ;;      Params:         0       0       0       0       0       0       0
  8887 ;;      Locals:         0       0       0       0       0       0       0
  8888 ;;      Temps:          0       0       0       0       0       0       0
  8889 ;;      Totals:         0       0       0       0       0       0       0
  8890 ;;Total ram usage:        0 bytes
  8891 ;; Hardware stack levels used:    1
  8892 ;; Hardware stack levels required when called:    3
  8893 ;; This function calls:
  8894 ;;		Nothing
  8895 ;; This function is called by:
  8896 ;;		_SYSTEM_Initialize
  8897 ;; This function uses a non-reentrant model
  8898 ;;
  8899                           
  8900                           	psect	text28
  8901  0045AC                     __ptext28:
  8902                           	opt stack 0
  8903  0045AC                     _INTERRUPT_Initialize:
  8904                           	opt stack 25
  8905                           
  8906                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8907                           
  8908                           ;incstack = 0
  8909  0045AC  9ED0               	bcf	4048,7,c	;volatile
  8910  0045AE  0012               	return		;funcret
  8911  0045B0                     __end_of_INTERRUPT_Initialize:
  8912                           	opt stack 0
  8913                           tosu	equ	0xFFF
  8914                           tosh	equ	0xFFE
  8915                           tosl	equ	0xFFD
  8916                           pclath	equ	0xFFA
  8917                           tblptru	equ	0xFF8
  8918                           tblptrh	equ	0xFF7
  8919                           tblptrl	equ	0xFF6
  8920                           tablat	equ	0xFF5
  8921                           prodh	equ	0xFF4
  8922                           prodl	equ	0xFF3
  8923                           intcon	equ	0xFF2
  8924                           intcon2	equ	0xFF1
  8925                           postinc0	equ	0xFEE
  8926                           wreg	equ	0xFE8
  8927                           indf1	equ	0xFE7
  8928                           postdec1	equ	0xFE5
  8929                           fsr1h	equ	0xFE2
  8930                           fsr1l	equ	0xFE1
  8931                           indf2	equ	0xFDF
  8932                           postinc2	equ	0xFDE
  8933                           postdec2	equ	0xFDD
  8934                           fsr2h	equ	0xFDA
  8935                           fsr2l	equ	0xFD9
  8936                           status	equ	0xFD8
  8937                           
  8938 ;; *************** function _EUSART1_Initialize *****************
  8939 ;; Defined at:
  8940 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8941 ;; Parameters:    Size  Location     Type
  8942 ;;		None
  8943 ;; Auto vars:     Size  Location     Type
  8944 ;;		None
  8945 ;; Return value:  Size  Location     Type
  8946 ;;                  1    wreg      void 
  8947 ;; Registers used:
  8948 ;;		wreg, status,2
  8949 ;; Tracked objects:
  8950 ;;		On entry : 0/0
  8951 ;;		On exit  : 0/0
  8952 ;;		Unchanged: 0/0
  8953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8954 ;;      Params:         0       0       0       0       0       0       0
  8955 ;;      Locals:         0       0       0       0       0       0       0
  8956 ;;      Temps:          0       0       0       0       0       0       0
  8957 ;;      Totals:         0       0       0       0       0       0       0
  8958 ;;Total ram usage:        0 bytes
  8959 ;; Hardware stack levels used:    1
  8960 ;; Hardware stack levels required when called:    3
  8961 ;; This function calls:
  8962 ;;		Nothing
  8963 ;; This function is called by:
  8964 ;;		_SYSTEM_Initialize
  8965 ;; This function uses a non-reentrant model
  8966 ;;
  8967                           
  8968                           	psect	text29
  8969  004238                     __ptext29:
  8970                           	opt stack 0
  8971  004238                     _EUSART1_Initialize:
  8972                           	opt stack 25
  8973                           
  8974                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8975                           
  8976                           ;incstack = 0
  8977  004238  9A9D               	bcf	3997,5,c	;volatile
  8978                           
  8979                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8980  00423A  989D               	bcf	3997,4,c	;volatile
  8981                           
  8982                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8983  00423C  0E08               	movlw	8
  8984  00423E  6EB8               	movwf	4024,c	;volatile
  8985                           
  8986                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8987  004240  0E90               	movlw	144
  8988  004242  6EAB               	movwf	4011,c	;volatile
  8989                           
  8990                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8991  004244  0E24               	movlw	36
  8992  004246  6EAC               	movwf	4012,c	;volatile
  8993                           
  8994                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8995  004248  0E10               	movlw	16
  8996  00424A  6EAF               	movwf	4015,c	;volatile
  8997                           
  8998                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8999  00424C  0E00               	movlw	0
  9000  00424E  6EB0               	movwf	4016,c	;volatile
  9001                           
  9002                           ;eusart1.c: 98: eusart1TxHead = 0;
  9003  004250  0E00               	movlw	0
  9004  004252  6E3C               	movwf	_eusart1TxHead,c	;volatile
  9005                           
  9006                           ;eusart1.c: 99: eusart1TxTail = 0;
  9007  004254  0E00               	movlw	0
  9008  004256  6E3B               	movwf	_eusart1TxTail,c	;volatile
  9009                           
  9010                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9011  004258  0E46               	movlw	70
  9012  00425A  0101               	movlb	1	; () banked
  9013  00425C  6FF3               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9014                           
  9015                           ;eusart1.c: 102: eusart1RxHead = 0;
  9016  00425E  0E00               	movlw	0
  9017  004260  6E3A               	movwf	_eusart1RxHead,c	;volatile
  9018                           
  9019                           ;eusart1.c: 103: eusart1RxTail = 0;
  9020  004262  0E00               	movlw	0
  9021  004264  6E39               	movwf	_eusart1RxTail,c	;volatile
  9022                           
  9023                           ;eusart1.c: 104: eusart1RxCount = 0;
  9024  004266  0E00               	movlw	0
  9025  004268  6FE7               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9026                           
  9027                           ; BSR set to: 1
  9028                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9029  00426A  8A9D               	bsf	3997,5,c	;volatile
  9030                           
  9031                           ; BSR set to: 1
  9032  00426C  0012               	return		;funcret
  9033  00426E                     __end_of_EUSART1_Initialize:
  9034                           	opt stack 0
  9035                           tosu	equ	0xFFF
  9036                           tosh	equ	0xFFE
  9037                           tosl	equ	0xFFD
  9038                           pclath	equ	0xFFA
  9039                           tblptru	equ	0xFF8
  9040                           tblptrh	equ	0xFF7
  9041                           tblptrl	equ	0xFF6
  9042                           tablat	equ	0xFF5
  9043                           prodh	equ	0xFF4
  9044                           prodl	equ	0xFF3
  9045                           intcon	equ	0xFF2
  9046                           intcon2	equ	0xFF1
  9047                           postinc0	equ	0xFEE
  9048                           wreg	equ	0xFE8
  9049                           indf1	equ	0xFE7
  9050                           postdec1	equ	0xFE5
  9051                           fsr1h	equ	0xFE2
  9052                           fsr1l	equ	0xFE1
  9053                           indf2	equ	0xFDF
  9054                           postinc2	equ	0xFDE
  9055                           postdec2	equ	0xFDD
  9056                           fsr2h	equ	0xFDA
  9057                           fsr2l	equ	0xFD9
  9058                           status	equ	0xFD8
  9059                           
  9060 ;; *************** function _ADC_Initialize *****************
  9061 ;; Defined at:
  9062 ;;		line 58 in file "mcc_generated_files/adc.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;		None
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;		None
  9067 ;; Return value:  Size  Location     Type
  9068 ;;                  1    wreg      void 
  9069 ;; Registers used:
  9070 ;;		wreg, status,2
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9076 ;;      Params:         0       0       0       0       0       0       0
  9077 ;;      Locals:         0       0       0       0       0       0       0
  9078 ;;      Temps:          0       0       0       0       0       0       0
  9079 ;;      Totals:         0       0       0       0       0       0       0
  9080 ;;Total ram usage:        0 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; Hardware stack levels required when called:    3
  9083 ;; This function calls:
  9084 ;;		Nothing
  9085 ;; This function is called by:
  9086 ;;		_SYSTEM_Initialize
  9087 ;; This function uses a non-reentrant model
  9088 ;;
  9089                           
  9090                           	psect	text30
  9091  0044EE                     __ptext30:
  9092                           	opt stack 0
  9093  0044EE                     _ADC_Initialize:
  9094                           	opt stack 25
  9095                           
  9096                           ;adc.c: 63: ADCON0 = 0x05;
  9097                           
  9098                           ; BSR set to: 1
  9099                           ;incstack = 0
  9100  0044EE  0E05               	movlw	5
  9101  0044F0  6EC2               	movwf	4034,c	;volatile
  9102                           
  9103                           ;adc.c: 66: ADCON1 = 0x00;
  9104  0044F2  0E00               	movlw	0
  9105  0044F4  6EC1               	movwf	4033,c	;volatile
  9106                           
  9107                           ;adc.c: 69: ADCON2 = 0x87;
  9108  0044F6  0E87               	movlw	135
  9109  0044F8  6EC0               	movwf	4032,c	;volatile
  9110                           
  9111                           ;adc.c: 72: ADRESL = 0x00;
  9112  0044FA  0E00               	movlw	0
  9113  0044FC  6EC3               	movwf	4035,c	;volatile
  9114                           
  9115                           ;adc.c: 75: ADRESH = 0x00;
  9116  0044FE  0E00               	movlw	0
  9117  004500  6EC4               	movwf	4036,c	;volatile
  9118  004502  0012               	return		;funcret
  9119  004504                     __end_of_ADC_Initialize:
  9120                           	opt stack 0
  9121                           tosu	equ	0xFFF
  9122                           tosh	equ	0xFFE
  9123                           tosl	equ	0xFFD
  9124                           pclath	equ	0xFFA
  9125                           tblptru	equ	0xFF8
  9126                           tblptrh	equ	0xFF7
  9127                           tblptrl	equ	0xFF6
  9128                           tablat	equ	0xFF5
  9129                           prodh	equ	0xFF4
  9130                           prodl	equ	0xFF3
  9131                           intcon	equ	0xFF2
  9132                           intcon2	equ	0xFF1
  9133                           postinc0	equ	0xFEE
  9134                           wreg	equ	0xFE8
  9135                           indf1	equ	0xFE7
  9136                           postdec1	equ	0xFE5
  9137                           fsr1h	equ	0xFE2
  9138                           fsr1l	equ	0xFE1
  9139                           indf2	equ	0xFDF
  9140                           postinc2	equ	0xFDE
  9141                           postdec2	equ	0xFDD
  9142                           fsr2h	equ	0xFDA
  9143                           fsr2l	equ	0xFD9
  9144                           status	equ	0xFD8
  9145                           
  9146 ;; *************** function _SetMcuRunTime *****************
  9147 ;; Defined at:
  9148 ;;		line 34 in file "SystemStatus.c"
  9149 ;; Parameters:    Size  Location     Type
  9150 ;;		None
  9151 ;; Auto vars:     Size  Location     Type
  9152 ;;		None
  9153 ;; Return value:  Size  Location     Type
  9154 ;;                  1    wreg      void 
  9155 ;; Registers used:
  9156 ;;		wreg, status,2, status,0, cstack
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9162 ;;      Params:         0       0       0       0       0       0       0
  9163 ;;      Locals:         0       0       0       0       0       0       0
  9164 ;;      Temps:          0       0       0       0       0       0       0
  9165 ;;      Totals:         0       0       0       0       0       0       0
  9166 ;;Total ram usage:        0 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    4
  9169 ;; This function calls:
  9170 ;;		___llmod
  9171 ;; This function is called by:
  9172 ;;		_main
  9173 ;; This function uses a non-reentrant model
  9174 ;;
  9175                           
  9176                           	psect	text31
  9177  003F8A                     __ptext31:
  9178                           	opt stack 0
  9179  003F8A                     _SetMcuRunTime:
  9180                           	opt stack 26
  9181                           
  9182                           ;SystemStatus.c: 36: mcuRunTimeIn5SecTicks++;
  9183                           
  9184                           ;incstack = 0
  9185  003F8A  0E01               	movlw	1
  9186  003F8C  0101               	movlb	1	; () banked
  9187  003F8E  27C0               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9188  003F90  0E00               	movlw	0
  9189  003F92  23C1               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9190  003F94  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9191  003F96  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9192                           
  9193                           ; BSR set to: 1
  9194                           ;SystemStatus.c: 37: mcuRunTimeIn5SecTicks %= (17280);
  9195  003F98  C1C0  F0B3         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9196  003F9C  C1C1  F0B4         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9197  003FA0  C1C2  F0B5         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9198  003FA4  C1C3  F0B6         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9199  003FA8  0E80               	movlw	128
  9200  003FAA  0100               	movlb	0	; () banked
  9201  003FAC  6FB7               	movwf	___llmod@divisor& (0+255),b
  9202  003FAE  0E43               	movlw	67
  9203  003FB0  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
  9204  003FB2  0E00               	movlw	0
  9205  003FB4  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  9206  003FB6  0E00               	movlw	0
  9207  003FB8  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  9208  003FBA  ECA9  F01D         	call	___llmod	;wreg free
  9209  003FBE  C0B3  F1C0         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9210  003FC2  C0B4  F1C1         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9211  003FC6  C0B5  F1C2         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9212  003FCA  C0B6  F1C3         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9213  003FCE  0012               	return		;funcret
  9214  003FD0                     __end_of_SetMcuRunTime:
  9215                           	opt stack 0
  9216                           tosu	equ	0xFFF
  9217                           tosh	equ	0xFFE
  9218                           tosl	equ	0xFFD
  9219                           pclath	equ	0xFFA
  9220                           tblptru	equ	0xFF8
  9221                           tblptrh	equ	0xFF7
  9222                           tblptrl	equ	0xFF6
  9223                           tablat	equ	0xFF5
  9224                           prodh	equ	0xFF4
  9225                           prodl	equ	0xFF3
  9226                           intcon	equ	0xFF2
  9227                           intcon2	equ	0xFF1
  9228                           postinc0	equ	0xFEE
  9229                           wreg	equ	0xFE8
  9230                           indf1	equ	0xFE7
  9231                           postdec1	equ	0xFE5
  9232                           fsr1h	equ	0xFE2
  9233                           fsr1l	equ	0xFE1
  9234                           indf2	equ	0xFDF
  9235                           postinc2	equ	0xFDE
  9236                           postdec2	equ	0xFDD
  9237                           fsr2h	equ	0xFDA
  9238                           fsr2l	equ	0xFD9
  9239                           status	equ	0xFD8
  9240                           
  9241 ;; *************** function _SendUartSystemInitMessage *****************
  9242 ;; Defined at:
  9243 ;;		line 55 in file "SystemStatus.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;		None
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;  dest           50    0[BANK1 ] unsigned char [50]
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  1    wreg      void 
  9250 ;; Registers used:
  9251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/0
  9254 ;;		On exit  : 0/0
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9257 ;;      Params:         0       0       0       0       0       0       0
  9258 ;;      Locals:         0       0      50       0       0       0       0
  9259 ;;      Temps:          0       0       0       0       0       0       0
  9260 ;;      Totals:         0       0      50       0       0       0       0
  9261 ;;Total ram usage:       50 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; Hardware stack levels required when called:    7
  9264 ;; This function calls:
  9265 ;;		_UART_Write_Text
  9266 ;;		_sprintf
  9267 ;; This function is called by:
  9268 ;;		_main
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           	psect	text32
  9273  002EB8                     __ptext32:
  9274                           	opt stack 0
  9275  002EB8                     _SendUartSystemInitMessage:
  9276                           	opt stack 23
  9277                           
  9278                           ;SystemStatus.c: 57: char dest[50];
  9279                           ;SystemStatus.c: 59: sprintf(dest, "*************************** \n\r");
  9280                           
  9281                           ;incstack = 0
  9282  002EB8  0E00               	movlw	low SendUartSystemInitMessage@dest
  9283  002EBA  0100               	movlb	0	; () banked
  9284  002EBC  6FBC               	movwf	sprintf@sp& (0+255),b
  9285  002EBE  0E01               	movlw	high SendUartSystemInitMessage@dest
  9286  002EC0  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9287  002EC2  0E21               	movlw	low STR_14
  9288  002EC4  6FBE               	movwf	sprintf@f& (0+255),b
  9289  002EC6  0E7E               	movlw	high STR_14
  9290  002EC8  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9291  002ECA  EC70  F000         	call	_sprintf	;wreg free
  9292                           
  9293                           ;SystemStatus.c: 60: UART_Write_Text(dest);
  9294  002ECE  0E00               	movlw	low SendUartSystemInitMessage@dest
  9295  002ED0  6E19               	movwf	UART_Write_Text@text,c
  9296  002ED2  0E01               	movlw	high SendUartSystemInitMessage@dest
  9297  002ED4  6E1A               	movwf	UART_Write_Text@text+1,c
  9298  002ED6  EC01  F01D         	call	_UART_Write_Text	;wreg free
  9299                           
  9300                           ;SystemStatus.c: 62: sprintf(dest, "FAST LINK SYSTEM \n\r");
  9301  002EDA  0E00               	movlw	low SendUartSystemInitMessage@dest
  9302  002EDC  0100               	movlb	0	; () banked
  9303  002EDE  6FBC               	movwf	sprintf@sp& (0+255),b
  9304  002EE0  0E01               	movlw	high SendUartSystemInitMessage@dest
  9305  002EE2  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9306  002EE4  0E35               	movlw	low STR_15
  9307  002EE6  6FBE               	movwf	sprintf@f& (0+255),b
  9308  002EE8  0E7F               	movlw	high STR_15
  9309  002EEA  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9310  002EEC  EC70  F000         	call	_sprintf	;wreg free
  9311                           
  9312                           ;SystemStatus.c: 63: UART_Write_Text(dest);
  9313  002EF0  0E00               	movlw	low SendUartSystemInitMessage@dest
  9314  002EF2  6E19               	movwf	UART_Write_Text@text,c
  9315  002EF4  0E01               	movlw	high SendUartSystemInitMessage@dest
  9316  002EF6  6E1A               	movwf	UART_Write_Text@text+1,c
  9317  002EF8  EC01  F01D         	call	_UART_Write_Text	;wreg free
  9318                           
  9319                           ;SystemStatus.c: 65: sprintf(dest, "SW VESRION: %s \n\r", "1_002");
  9320  002EFC  0E00               	movlw	low SendUartSystemInitMessage@dest
  9321  002EFE  0100               	movlb	0	; () banked
  9322  002F00  6FBC               	movwf	sprintf@sp& (0+255),b
  9323  002F02  0E01               	movlw	high SendUartSystemInitMessage@dest
  9324  002F04  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9325  002F06  0E71               	movlw	low STR_16
  9326  002F08  6FBE               	movwf	sprintf@f& (0+255),b
  9327  002F0A  0E7F               	movlw	high STR_16
  9328  002F0C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9329  002F0E  0EF0               	movlw	low STR_17
  9330  002F10  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  9331  002F12  0E7F               	movlw	high STR_17
  9332  002F14  6FC1               	movwf	(?_sprintf+5)& (0+255),b
  9333  002F16  EC70  F000         	call	_sprintf	;wreg free
  9334                           
  9335                           ;SystemStatus.c: 66: UART_Write_Text(dest);
  9336  002F1A  0E00               	movlw	low SendUartSystemInitMessage@dest
  9337  002F1C  6E19               	movwf	UART_Write_Text@text,c
  9338  002F1E  0E01               	movlw	high SendUartSystemInitMessage@dest
  9339  002F20  6E1A               	movwf	UART_Write_Text@text+1,c
  9340  002F22  EC01  F01D         	call	_UART_Write_Text	;wreg free
  9341                           
  9342                           ;SystemStatus.c: 68: sprintf(dest, "Compile date: %s \n\r", "Mar 28 2018");
  9343  002F26  0E00               	movlw	low SendUartSystemInitMessage@dest
  9344  002F28  0100               	movlb	0	; () banked
  9345  002F2A  6FBC               	movwf	sprintf@sp& (0+255),b
  9346  002F2C  0E01               	movlw	high SendUartSystemInitMessage@dest
  9347  002F2E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9348  002F30  0E5D               	movlw	low STR_18
  9349  002F32  6FBE               	movwf	sprintf@f& (0+255),b
  9350  002F34  0E7F               	movlw	high STR_18
  9351  002F36  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9352  002F38  0EAC               	movlw	low STR_19
  9353  002F3A  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  9354  002F3C  0E7F               	movlw	high STR_19
  9355  002F3E  6FC1               	movwf	(?_sprintf+5)& (0+255),b
  9356  002F40  EC70  F000         	call	_sprintf	;wreg free
  9357                           
  9358                           ;SystemStatus.c: 69: UART_Write_Text(dest);
  9359  002F44  0E00               	movlw	low SendUartSystemInitMessage@dest
  9360  002F46  6E19               	movwf	UART_Write_Text@text,c
  9361  002F48  0E01               	movlw	high SendUartSystemInitMessage@dest
  9362  002F4A  6E1A               	movwf	UART_Write_Text@text+1,c
  9363  002F4C  EC01  F01D         	call	_UART_Write_Text	;wreg free
  9364                           
  9365                           ;SystemStatus.c: 71: sprintf(dest, "Compile time: %s \n\r", "13:02:30");
  9366  002F50  0E00               	movlw	low SendUartSystemInitMessage@dest
  9367  002F52  0100               	movlb	0	; () banked
  9368  002F54  6FBC               	movwf	sprintf@sp& (0+255),b
  9369  002F56  0E01               	movlw	high SendUartSystemInitMessage@dest
  9370  002F58  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9371  002F5A  0E49               	movlw	low STR_20
  9372  002F5C  6FBE               	movwf	sprintf@f& (0+255),b
  9373  002F5E  0E7F               	movlw	high STR_20
  9374  002F60  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9375  002F62  0ED7               	movlw	low STR_21
  9376  002F64  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  9377  002F66  0E7F               	movlw	high STR_21
  9378  002F68  6FC1               	movwf	(?_sprintf+5)& (0+255),b
  9379  002F6A  EC70  F000         	call	_sprintf	;wreg free
  9380                           
  9381                           ;SystemStatus.c: 72: UART_Write_Text(dest);
  9382  002F6E  0E00               	movlw	low SendUartSystemInitMessage@dest
  9383  002F70  6E19               	movwf	UART_Write_Text@text,c
  9384  002F72  0E01               	movlw	high SendUartSystemInitMessage@dest
  9385  002F74  6E1A               	movwf	UART_Write_Text@text+1,c
  9386  002F76  EC01  F01D         	call	_UART_Write_Text	;wreg free
  9387                           
  9388                           ;SystemStatus.c: 74: sprintf(dest, "*************************** \n\r");
  9389  002F7A  0E00               	movlw	low SendUartSystemInitMessage@dest
  9390  002F7C  0100               	movlb	0	; () banked
  9391  002F7E  6FBC               	movwf	sprintf@sp& (0+255),b
  9392  002F80  0E01               	movlw	high SendUartSystemInitMessage@dest
  9393  002F82  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9394  002F84  0E21               	movlw	low STR_14
  9395  002F86  6FBE               	movwf	sprintf@f& (0+255),b
  9396  002F88  0E7E               	movlw	high STR_14
  9397  002F8A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9398  002F8C  EC70  F000         	call	_sprintf	;wreg free
  9399                           
  9400                           ;SystemStatus.c: 75: UART_Write_Text(dest);
  9401  002F90  0E00               	movlw	low SendUartSystemInitMessage@dest
  9402  002F92  6E19               	movwf	UART_Write_Text@text,c
  9403  002F94  0E01               	movlw	high SendUartSystemInitMessage@dest
  9404  002F96  6E1A               	movwf	UART_Write_Text@text+1,c
  9405  002F98  EC01  F01D         	call	_UART_Write_Text	;wreg free
  9406  002F9C  0012               	return		;funcret
  9407  002F9E                     __end_of_SendUartSystemInitMessage:
  9408                           	opt stack 0
  9409                           tosu	equ	0xFFF
  9410                           tosh	equ	0xFFE
  9411                           tosl	equ	0xFFD
  9412                           pclath	equ	0xFFA
  9413                           tblptru	equ	0xFF8
  9414                           tblptrh	equ	0xFF7
  9415                           tblptrl	equ	0xFF6
  9416                           tablat	equ	0xFF5
  9417                           prodh	equ	0xFF4
  9418                           prodl	equ	0xFF3
  9419                           intcon	equ	0xFF2
  9420                           intcon2	equ	0xFF1
  9421                           postinc0	equ	0xFEE
  9422                           wreg	equ	0xFE8
  9423                           indf1	equ	0xFE7
  9424                           postdec1	equ	0xFE5
  9425                           fsr1h	equ	0xFE2
  9426                           fsr1l	equ	0xFE1
  9427                           indf2	equ	0xFDF
  9428                           postinc2	equ	0xFDE
  9429                           postdec2	equ	0xFDD
  9430                           fsr2h	equ	0xFDA
  9431                           fsr2l	equ	0xFD9
  9432                           status	equ	0xFD8
  9433                           
  9434 ;; *************** function _SampleSingleChannel *****************
  9435 ;; Defined at:
  9436 ;;		line 98 in file "AdcApp.c"
  9437 ;; Parameters:    Size  Location     Type
  9438 ;;		None
  9439 ;; Auto vars:     Size  Location     Type
  9440 ;;  _adcResult      2   53[BANK1 ] unsigned int 
  9441 ;;  dest           50    0[BANK1 ] unsigned char [50]
  9442 ;;  adcRes          2   55[BANK1 ] unsigned int 
  9443 ;; Return value:  Size  Location     Type
  9444 ;;                  1    wreg      unsigned char 
  9445 ;; Registers used:
  9446 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/0
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9452 ;;      Params:         0       0       0       0       0       0       0
  9453 ;;      Locals:         0       0      57       0       0       0       0
  9454 ;;      Temps:          0       2       0       0       0       0       0
  9455 ;;      Totals:         0       2      57       0       0       0       0
  9456 ;;Total ram usage:       59 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; Hardware stack levels required when called:    8
  9459 ;; This function calls:
  9460 ;;		_ADC_GetConversion
  9461 ;;		_UART_Write_Text
  9462 ;;		___ftdiv
  9463 ;;		___ftmul
  9464 ;;		___fttol
  9465 ;;		___lwtoft
  9466 ;;		_pow
  9467 ;;		_sprintf
  9468 ;; This function is called by:
  9469 ;;		_main
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           	psect	text33
  9474  001DFA                     __ptext33:
  9475                           	opt stack 0
  9476  001DFA                     _SampleSingleChannel:
  9477                           	opt stack 22
  9478                           
  9479                           ;AdcApp.c: 100: char dest[50];
  9480                           ;AdcApp.c: 101: uint16_t adcRes = 0x0;
  9481                           
  9482                           ;incstack = 0
  9483  001DFA  0E00               	movlw	0
  9484  001DFC  0101               	movlb	1	; () banked
  9485  001DFE  6F38               	movwf	(SampleSingleChannel@adcRes+1)& (0+255),b
  9486  001E00  0E00               	movlw	0
  9487  001E02  6F37               	movwf	SampleSingleChannel@adcRes& (0+255),b
  9488                           
  9489                           ; BSR set to: 1
  9490                           ;AdcApp.c: 102: if(numSamples > 0)
  9491  001E04  51D4               	movf	_numSamples& (0+255),w,b
  9492  001E06  11D5               	iorwf	(_numSamples+1)& (0+255),w,b
  9493  001E08  B4D8               	btfsc	status,2,c
  9494  001E0A  D0B5               	goto	l167
  9495                           
  9496                           ; BSR set to: 1
  9497                           ;AdcApp.c: 103: {
  9498                           ;AdcApp.c: 104: adc_result_t _adcResult = ADC_GetConversion(channelArr[channelNum]);
  9499  001E0C  0EBD               	movlw	low _channelArr
  9500  001E0E  2437               	addwf	_channelNum,w,c
  9501  001E10  6EF6               	movwf	tblptrl,c
  9502  001E12  0E78               	movlw	high _channelArr
  9503  001E14  2038               	addwfc	_channelNum+1,w,c
  9504  001E16  6EF7               	movwf	tblptrh,c
  9505  001E18                     	if	0	;There are less than 3 active tblptr bytes
  9506  001E18                     	endif
  9507  001E18  0008               	tblrd		*
  9508  001E1A  50F5               	movf	tablat,w,c
  9509  001E1C  EC85  F021         	call	_ADC_GetConversion
  9510  001E20  C018  F135         	movff	?_ADC_GetConversion,SampleSingleChannel@_adcResult
  9511  001E24  C019  F136         	movff	?_ADC_GetConversion+1,SampleSingleChannel@_adcResult+1
  9512                           
  9513                           ;AdcApp.c: 105: adcRes = (_adcResult/pow(2,(10)))*(3340);
  9514  001E28  0E00               	movlw	0
  9515  001E2A  0100               	movlb	0	; () banked
  9516  001E2C  6FA5               	movwf	pow@y& (0+255),b
  9517  001E2E  0E20               	movlw	32
  9518  001E30  6FA6               	movwf	(pow@y+1)& (0+255),b
  9519  001E32  0E41               	movlw	65
  9520  001E34  6FA7               	movwf	(pow@y+2)& (0+255),b
  9521  001E36  0E00               	movlw	0
  9522  001E38  6FA2               	movwf	pow@x& (0+255),b
  9523  001E3A  0E00               	movlw	0
  9524  001E3C  6FA3               	movwf	(pow@x+1)& (0+255),b
  9525  001E3E  0E40               	movlw	64
  9526  001E40  6FA4               	movwf	(pow@x+2)& (0+255),b
  9527  001E42  EC89  F010         	call	_pow	;wreg free
  9528  001E46  C0A2  F132         	movff	?_pow,_SampleSingleChannel$3938
  9529  001E4A  C0A3  F133         	movff	?_pow+1,_SampleSingleChannel$3938+1
  9530  001E4E  C0A4  F134         	movff	?_pow+2,_SampleSingleChannel$3938+2
  9531                           
  9532                           ;AdcApp.c: 105: adcRes = (_adcResult/pow(2,(10)))*(3340);
  9533  001E52  0EC0               	movlw	192
  9534  001E54  0100               	movlb	0	; () banked
  9535  001E56  6F69               	movwf	___ftmul@f2& (0+255),b
  9536  001E58  0E50               	movlw	80
  9537  001E5A  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  9538  001E5C  0E45               	movlw	69
  9539  001E5E  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  9540  001E60  C132  F026         	movff	_SampleSingleChannel$3938,___ftdiv@f2
  9541  001E64  C133  F027         	movff	_SampleSingleChannel$3938+1,___ftdiv@f2+1
  9542  001E68  C134  F028         	movff	_SampleSingleChannel$3938+2,___ftdiv@f2+2
  9543  001E6C  C135  F020         	movff	SampleSingleChannel@_adcResult,___lwtoft@c
  9544  001E70  C136  F021         	movff	SampleSingleChannel@_adcResult+1,___lwtoft@c+1
  9545  001E74  ECFF  F021         	call	___lwtoft	;wreg free
  9546  001E78  C020  F023         	movff	?___lwtoft,___ftdiv@f1
  9547  001E7C  C021  F024         	movff	?___lwtoft+1,___ftdiv@f1+1
  9548  001E80  C022  F025         	movff	?___lwtoft+2,___ftdiv@f1+2
  9549  001E84  ECE8  F016         	call	___ftdiv	;wreg free
  9550  001E88  C023  F066         	movff	?___ftdiv,___ftmul@f1
  9551  001E8C  C024  F067         	movff	?___ftdiv+1,___ftmul@f1+1
  9552  001E90  C025  F068         	movff	?___ftdiv+2,___ftmul@f1+2
  9553  001E94  EC6D  F016         	call	___ftmul	;wreg free
  9554  001E98  C066  F079         	movff	?___ftmul,___fttol@f1
  9555  001E9C  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
  9556  001EA0  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
  9557  001EA4  ECF1  F015         	call	___fttol	;wreg free
  9558  001EA8  C079  F137         	movff	?___fttol,SampleSingleChannel@adcRes
  9559  001EAC  C07A  F138         	movff	?___fttol+1,SampleSingleChannel@adcRes+1
  9560                           
  9561                           ;AdcApp.c: 106: if(channelArr[channelNum] == 0x6) lastAdcTemp = adcRes;
  9562  001EB0  0EBD               	movlw	low _channelArr
  9563  001EB2  2437               	addwf	_channelNum,w,c
  9564  001EB4  6EF6               	movwf	tblptrl,c
  9565  001EB6  0E78               	movlw	high _channelArr
  9566  001EB8  2038               	addwfc	_channelNum+1,w,c
  9567  001EBA  6EF7               	movwf	tblptrh,c
  9568  001EBC                     	if	0	;There are less than 3 active tblptr bytes
  9569  001EBC                     	endif
  9570  001EBC  0008               	tblrd		*
  9571  001EBE  50F5               	movf	tablat,w,c
  9572  001EC0  0A06               	xorlw	6
  9573  001EC2  A4D8               	btfss	status,2,c
  9574  001EC4  D004               	goto	l168
  9575  001EC6  C137  F1DE         	movff	SampleSingleChannel@adcRes,_lastAdcTemp	;volatile
  9576  001ECA  C138  F1DF         	movff	SampleSingleChannel@adcRes+1,_lastAdcTemp+1	;volatile
  9577  001ECE                     l168:
  9578                           
  9579                           ;AdcApp.c: 107: if(channelArr[channelNum] == 0x5) lastAdcFfwrRSSI = adcRes;
  9580  001ECE  0EBD               	movlw	low _channelArr
  9581  001ED0  2437               	addwf	_channelNum,w,c
  9582  001ED2  6EF6               	movwf	tblptrl,c
  9583  001ED4  0E78               	movlw	high _channelArr
  9584  001ED6  2038               	addwfc	_channelNum+1,w,c
  9585  001ED8  6EF7               	movwf	tblptrh,c
  9586  001EDA                     	if	0	;There are less than 3 active tblptr bytes
  9587  001EDA                     	endif
  9588  001EDA  0008               	tblrd		*
  9589  001EDC  50F5               	movf	tablat,w,c
  9590  001EDE  0A05               	xorlw	5
  9591  001EE0  A4D8               	btfss	status,2,c
  9592  001EE2  D004               	goto	l169
  9593  001EE4  C137  F1DC         	movff	SampleSingleChannel@adcRes,_lastAdcFfwrRSSI	;volatile
  9594  001EE8  C138  F1DD         	movff	SampleSingleChannel@adcRes+1,_lastAdcFfwrRSSI+1	;volatile
  9595  001EEC                     l169:
  9596                           
  9597                           ;AdcApp.c: 108: if(channelArr[channelNum] == 0x4) lastAdcRREV = adcRes;
  9598  001EEC  0EBD               	movlw	low _channelArr
  9599  001EEE  2437               	addwf	_channelNum,w,c
  9600  001EF0  6EF6               	movwf	tblptrl,c
  9601  001EF2  0E78               	movlw	high _channelArr
  9602  001EF4  2038               	addwfc	_channelNum+1,w,c
  9603  001EF6  6EF7               	movwf	tblptrh,c
  9604  001EF8                     	if	0	;There are less than 3 active tblptr bytes
  9605  001EF8                     	endif
  9606  001EF8  0008               	tblrd		*
  9607  001EFA  50F5               	movf	tablat,w,c
  9608  001EFC  0A04               	xorlw	4
  9609  001EFE  A4D8               	btfss	status,2,c
  9610  001F00  D004               	goto	l170
  9611  001F02  C137  F1DA         	movff	SampleSingleChannel@adcRes,_lastAdcRREV	;volatile
  9612  001F06  C138  F1DB         	movff	SampleSingleChannel@adcRes+1,_lastAdcRREV+1	;volatile
  9613  001F0A                     l170:
  9614                           
  9615                           ;AdcApp.c: 109: if(channelArr[channelNum] == 0x7) lastAdcVgMon = adcRes;
  9616  001F0A  0EBD               	movlw	low _channelArr
  9617  001F0C  2437               	addwf	_channelNum,w,c
  9618  001F0E  6EF6               	movwf	tblptrl,c
  9619  001F10  0E78               	movlw	high _channelArr
  9620  001F12  2038               	addwfc	_channelNum+1,w,c
  9621  001F14  6EF7               	movwf	tblptrh,c
  9622  001F16                     	if	0	;There are less than 3 active tblptr bytes
  9623  001F16                     	endif
  9624  001F16  0008               	tblrd		*
  9625  001F18  50F5               	movf	tablat,w,c
  9626  001F1A  0A07               	xorlw	7
  9627  001F1C  A4D8               	btfss	status,2,c
  9628  001F1E  D004               	goto	l171
  9629  001F20  C137  F1D8         	movff	SampleSingleChannel@adcRes,_lastAdcVgMon	;volatile
  9630  001F24  C138  F1D9         	movff	SampleSingleChannel@adcRes+1,_lastAdcVgMon+1	;volatile
  9631  001F28                     l171:
  9632                           
  9633                           ;AdcApp.c: 110: sprintf(dest, "%d \t", adcRes);
  9634  001F28  0E00               	movlw	low SampleSingleChannel@dest
  9635  001F2A  0100               	movlb	0	; () banked
  9636  001F2C  6FBC               	movwf	sprintf@sp& (0+255),b
  9637  001F2E  0E01               	movlw	high SampleSingleChannel@dest
  9638  001F30  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9639  001F32  0EF6               	movlw	low STR_8
  9640  001F34  6FBE               	movwf	sprintf@f& (0+255),b
  9641  001F36  0E7F               	movlw	high STR_8
  9642  001F38  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9643  001F3A  C137  F0C0         	movff	SampleSingleChannel@adcRes,?_sprintf+4
  9644  001F3E  C138  F0C1         	movff	SampleSingleChannel@adcRes+1,?_sprintf+5
  9645  001F42  EC70  F000         	call	_sprintf	;wreg free
  9646                           
  9647                           ;AdcApp.c: 111: UART_Write_Text(dest);
  9648  001F46  0E00               	movlw	low SampleSingleChannel@dest
  9649  001F48  6E19               	movwf	UART_Write_Text@text,c
  9650  001F4A  0E01               	movlw	high SampleSingleChannel@dest
  9651  001F4C  6E1A               	movwf	UART_Write_Text@text+1,c
  9652  001F4E  EC01  F01D         	call	_UART_Write_Text	;wreg free
  9653                           
  9654                           ;AdcApp.c: 112: _delay((unsigned long)((100)*(8000000/4000.0)));
  9655  001F52  0E02               	movlw	2
  9656  001F54  0100               	movlb	0	; () banked
  9657  001F56  6FE3               	movwf	(??_SampleSingleChannel+1)& (0+255),b
  9658  001F58  0E04               	movlw	4
  9659  001F5A  6FE2               	movwf	??_SampleSingleChannel& (0+255),b
  9660  001F5C  0EBA               	movlw	186
  9661  001F5E                     u10867:
  9662  001F5E  2EE8               	decfsz	wreg,f,c
  9663  001F60  D7FE               	bra	u10867
  9664  001F62  2FE2               	decfsz	??_SampleSingleChannel& (0+255),f,b
  9665  001F64  D7FC               	bra	u10867
  9666  001F66  2FE3               	decfsz	(??_SampleSingleChannel+1)& (0+255),f,b
  9667  001F68  D7FA               	bra	u10867
  9668  001F6A  F000               	nop	
  9669                           
  9670                           ;AdcApp.c: 113: numSamples--;
  9671  001F6C  0101               	movlb	1	; () banked
  9672  001F6E  07D4               	decf	_numSamples& (0+255),f,b
  9673  001F70  A0D8               	btfss	status,0,c
  9674  001F72  07D5               	decf	(_numSamples+1)& (0+255),f,b
  9675                           
  9676                           ;AdcApp.c: 114: }
  9677  001F74  0012               	return	
  9678  001F76                     l167:
  9679                           
  9680                           ; BSR set to: 1
  9681                           ;AdcApp.c: 115: else
  9682                           ;AdcApp.c: 116: {
  9683                           ;AdcApp.c: 117: needToSample = 0;
  9684                           
  9685                           ; BSR set to: 1
  9686  001F76  0E00               	movlw	0
  9687  001F78  6FEA               	movwf	_needToSample& (0+255),b	;volatile
  9688                           
  9689                           ; BSR set to: 1
  9690                           ;AdcApp.c: 118: UART_Write_Text("\n\r OK \n\r");
  9691  001F7A  0EE0               	movlw	low STR_9
  9692  001F7C  6E19               	movwf	UART_Write_Text@text,c
  9693  001F7E  0E7F               	movlw	high STR_9
  9694  001F80  6E1A               	movwf	UART_Write_Text@text+1,c
  9695  001F82  EC01  F01D         	call	_UART_Write_Text	;wreg free
  9696  001F86  0012               	return	
  9697  001F88                     __end_of_SampleSingleChannel:
  9698                           	opt stack 0
  9699                           tosu	equ	0xFFF
  9700                           tosh	equ	0xFFE
  9701                           tosl	equ	0xFFD
  9702                           pclath	equ	0xFFA
  9703                           tblptru	equ	0xFF8
  9704                           tblptrh	equ	0xFF7
  9705                           tblptrl	equ	0xFF6
  9706                           tablat	equ	0xFF5
  9707                           prodh	equ	0xFF4
  9708                           prodl	equ	0xFF3
  9709                           intcon	equ	0xFF2
  9710                           intcon2	equ	0xFF1
  9711                           postinc0	equ	0xFEE
  9712                           wreg	equ	0xFE8
  9713                           indf1	equ	0xFE7
  9714                           postdec1	equ	0xFE5
  9715                           fsr1h	equ	0xFE2
  9716                           fsr1l	equ	0xFE1
  9717                           indf2	equ	0xFDF
  9718                           postinc2	equ	0xFDE
  9719                           postdec2	equ	0xFDD
  9720                           fsr2h	equ	0xFDA
  9721                           fsr2l	equ	0xFD9
  9722                           status	equ	0xFD8
  9723                           
  9724 ;; *************** function _sprintf *****************
  9725 ;; Defined at:
  9726 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  9727 ;; Parameters:    Size  Location     Type
  9728 ;;  sp              2   92[BANK0 ] PTR unsigned char 
  9729 ;;		 -> PrintTxStatus@dest(80), PrintRxStatus@dest(80), PrintSystemStatus@dest(50), PrintHelpScreen@dest(50), 
  9730 ;;		 -> SendUartSystemInitMessage@dest(50), readUartByte@dest(50), SampleSingleChannel@dest(50), 
  9731 ;;  f               2   94[BANK0 ] PTR const unsigned char 
  9732 ;;		 -> STR_69(22), STR_68(15), STR_67(22), STR_66(13), 
  9733 ;;		 -> STR_65(13), STR_64(23), STR_63(10), STR_62(24), 
  9734 ;;		 -> STR_61(36), STR_60(24), STR_59(36), STR_58(22), 
  9735 ;;		 -> STR_57(22), STR_56(15), STR_55(22), STR_54(13), 
  9736 ;;		 -> STR_53(13), STR_52(23), STR_51(10), STR_50(24), 
  9737 ;;		 -> STR_49(36), STR_48(24), STR_47(59), STR_46(22), 
  9738 ;;		 -> STR_43(4), STR_42(73), STR_41(37), STR_40(38), 
  9739 ;;		 -> STR_39(86), STR_38(53), STR_37(46), STR_36(29), 
  9740 ;;		 -> STR_35(101), STR_34(86), STR_33(61), STR_32(62), 
  9741 ;;		 -> STR_31(45), STR_30(74), STR_29(25), STR_28(79), 
  9742 ;;		 -> STR_27(75), STR_26(46), STR_25(61), STR_24(66), 
  9743 ;;		 -> STR_23(23), STR_22(31), STR_20(20), STR_18(20), 
  9744 ;;		 -> STR_16(18), STR_15(20), STR_14(31), STR_10(11), 
  9745 ;;		 -> STR_8(5), 
  9746 ;; Auto vars:     Size  Location     Type
  9747 ;;  tmpval          4  122[BANK0 ] struct .
  9748 ;;  val             4  116[BANK0 ] unsigned long 
  9749 ;;  fval            3  126[BANK0 ] unsigned long 
  9750 ;;  exp             2  120[BANK0 ] int 
  9751 ;;  prec            2  114[BANK0 ] int 
  9752 ;;  flag            2  112[BANK0 ] unsigned short 
  9753 ;;  ap              2  110[BANK0 ] PTR void [1]
  9754 ;;		 -> ?_sprintf(2), 
  9755 ;;  cp              2  108[BANK0 ] PTR const unsigned char 
  9756 ;;		 -> STR_70(7), STR_45(6), STR_44(6), STR_21(9), 
  9757 ;;		 -> STR_19(12), STR_17(6), 
  9758 ;;  len             2    0        unsigned int 
  9759 ;;  width           2    0        int 
  9760 ;;  c               1  129[BANK0 ] char 
  9761 ;;  d               1    0        unsigned char 
  9762 ;; Return value:  Size  Location     Type
  9763 ;;                  2   92[BANK0 ] int 
  9764 ;; Registers used:
  9765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9766 ;; Tracked objects:
  9767 ;;		On entry : 0/0
  9768 ;;		On exit  : 0/0
  9769 ;;		Unchanged: 0/0
  9770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9771 ;;      Params:         0       7       0       0       0       0       0
  9772 ;;      Locals:         0      25       0       0       0       0       0
  9773 ;;      Temps:          0       6       0       0       0       0       0
  9774 ;;      Totals:         0      38       0       0       0       0       0
  9775 ;;Total ram usage:       38 bytes
  9776 ;; Hardware stack levels used:    1
  9777 ;; Hardware stack levels required when called:    6
  9778 ;; This function calls:
  9779 ;;		___awdiv
  9780 ;;		___ftadd
  9781 ;;		___ftge
  9782 ;;		___ftmul
  9783 ;;		___ftneg
  9784 ;;		___ftsub
  9785 ;;		___fttol
  9786 ;;		___lldiv
  9787 ;;		___llmod
  9788 ;;		___lltoft
  9789 ;;		___wmul
  9790 ;;		__div_to_l_
  9791 ;;		__tdiv_to_l_
  9792 ;;		_fround
  9793 ;;		_scale
  9794 ;; This function is called by:
  9795 ;;		_SampleSingleChannel
  9796 ;;		_readUartByte
  9797 ;;		_SendUartSystemInitMessage
  9798 ;;		_PrintHelpScreen
  9799 ;;		_PrintRxStatus
  9800 ;;		_PrintTxStatus
  9801 ;;		_PrintSystemStatus
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           	psect	text34
  9806  0000E0                     __ptext34:
  9807                           	opt stack 0
  9808  0000E0                     _sprintf:
  9809                           	opt stack 23
  9810                           
  9811                           ;doprnt.c: 494: va_list ap;
  9812                           ;doprnt.c: 499: signed char c;
  9813                           ;doprnt.c: 501: int width;
  9814                           ;doprnt.c: 504: int prec;
  9815                           ;doprnt.c: 508: unsigned short flag;
  9816                           ;doprnt.c: 515: char d;
  9817                           ;doprnt.c: 516: double fval;
  9818                           ;doprnt.c: 517: int exp;
  9819                           ;doprnt.c: 523: union {
  9820                           ;doprnt.c: 524: unsigned long vd;
  9821                           ;doprnt.c: 525: double integ;
  9822                           ;doprnt.c: 526: } tmpval;
  9823                           ;doprnt.c: 528: unsigned long val;
  9824                           ;doprnt.c: 529: unsigned len;
  9825                           ;doprnt.c: 530: const char * cp;
  9826                           ;doprnt.c: 533: *ap = __va_start();
  9827                           
  9828                           ;incstack = 0
  9829  0000E0  0EC0               	movlw	low (?_sprintf+4)
  9830  0000E2  0100               	movlb	0	; () banked
  9831  0000E4  6FCE               	movwf	sprintf@ap& (0+255),b
  9832  0000E6  0E00               	movlw	high (?_sprintf+4)
  9833  0000E8  6FCF               	movwf	(sprintf@ap+1)& (0+255),b
  9834                           
  9835                           ;doprnt.c: 536: while(c = *f++) {
  9836  0000EA  D3C8               	goto	u9540
  9837  0000EC                     
  9838                           ; BSR set to: 0
  9839                           ;doprnt.c: 538: if(c != '%')
  9840                           
  9841                           ; BSR set to: 0
  9842  0000EC  0E25               	movlw	37
  9843  0000EE  19E1               	xorwf	sprintf@c& (0+255),w,b
  9844  0000F0  B4D8               	btfsc	status,2,c
  9845  0000F2  D009               	goto	l1674
  9846                           
  9847                           ; BSR set to: 0
  9848                           ;doprnt.c: 540: {
  9849                           ;doprnt.c: 541: ((*sp++ = (c)));
  9850  0000F4  C0BC  FFD9         	movff	sprintf@sp,fsr2l
  9851  0000F8  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
  9852  0000FC  C0E1  FFDF         	movff	sprintf@c,indf2
  9853                           
  9854                           ; BSR set to: 0
  9855  000100  4BBC               	infsnz	sprintf@sp& (0+255),f,b
  9856  000102  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
  9857                           
  9858                           ;doprnt.c: 542: continue;
  9859  000104  D3BB               	goto	u9540
  9860  000106                     l1674:
  9861                           
  9862                           ; BSR set to: 0
  9863                           ;doprnt.c: 543: }
  9864                           ;doprnt.c: 548: flag = 0;
  9865                           
  9866                           ; BSR set to: 0
  9867  000106  0E00               	movlw	0
  9868  000108  6FD1               	movwf	(sprintf@flag+1)& (0+255),b
  9869  00010A  0E00               	movlw	0
  9870  00010C  6FD0               	movwf	sprintf@flag& (0+255),b
  9871                           
  9872                           ;doprnt.c: 635: switch(c = *f++) {
  9873  00010E  D030               	goto	l1675
  9874  000110                     
  9875                           ; BSR set to: 0
  9876                           ;doprnt.c: 663: flag |= 0x400;
  9877                           
  9878                           ; BSR set to: 0
  9879  000110  85D1               	bsf	(sprintf@flag+1)& (0+255),2,b
  9880                           
  9881                           ; BSR set to: 0
  9882                           ;doprnt.c: 698: case 'i':
  9883                           ;doprnt.c: 699: break;
  9884                           
  9885                           ; BSR set to: 0
  9886                           
  9887                           ;doprnt.c: 697: case 'd':
  9888                           
  9889                           ;doprnt.c: 664: break;
  9890  000112  D048               	goto	l1679
  9891  000114                     
  9892                           ; BSR set to: 0
  9893                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  9894                           
  9895                           ; BSR set to: 0
  9896  000114  C0CE  FFD9         	movff	sprintf@ap,fsr2l
  9897  000118  C0CF  FFDA         	movff	sprintf@ap+1,fsr2h
  9898  00011C  CFDE F0CC          	movff	postinc2,sprintf@cp
  9899  000120  CFDD F0CD          	movff	postdec2,sprintf@cp+1
  9900                           
  9901                           ; BSR set to: 0
  9902  000124  0E02               	movlw	2
  9903  000126  27CE               	addwf	sprintf@ap& (0+255),f,b
  9904  000128  0E00               	movlw	0
  9905  00012A  23CF               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9906                           
  9907                           ; BSR set to: 0
  9908                           ;doprnt.c: 740: if(!cp)
  9909  00012C  51CC               	movf	sprintf@cp& (0+255),w,b
  9910  00012E  11CD               	iorwf	(sprintf@cp+1)& (0+255),w,b
  9911  000130  A4D8               	btfss	status,2,c
  9912  000132  D014               	goto	l1684
  9913                           
  9914                           ; BSR set to: 0
  9915                           ;doprnt.c: 741: cp = "(null)";
  9916  000134  0EE9               	movlw	low STR_70
  9917  000136  6FCC               	movwf	sprintf@cp& (0+255),b
  9918  000138  0E7F               	movlw	high STR_70
  9919  00013A  6FCD               	movwf	(sprintf@cp+1)& (0+255),b
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;doprnt.c: 777: while(*cp)
  9923  00013C  D00F               	goto	l1684
  9924  00013E                     
  9925                           ; BSR set to: 0
  9926                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  9927                           
  9928                           ; BSR set to: 0
  9929  00013E  C0CC  FFF6         	movff	sprintf@cp,tblptrl
  9930  000142  C0CD  FFF7         	movff	sprintf@cp+1,tblptrh
  9931  000146                     	if	0	;tblptru may be non-zero
  9932  000146                     	endif
  9933  000146                     	if	0	;tblptru may be non-zero
  9934  000146                     	endif
  9935  000146  C0BC  FFD9         	movff	sprintf@sp,fsr2l
  9936  00014A  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
  9937  00014E  0008               	tblrd		*
  9938  000150  CFF5 FFDF          	movff	tablat,indf2
  9939                           
  9940                           ; BSR set to: 0
  9941  000154  4BCC               	infsnz	sprintf@cp& (0+255),f,b
  9942  000156  2BCD               	incf	(sprintf@cp+1)& (0+255),f,b
  9943                           
  9944                           ; BSR set to: 0
  9945  000158  4BBC               	infsnz	sprintf@sp& (0+255),f,b
  9946  00015A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
  9947  00015C                     l1684:
  9948                           
  9949                           ; BSR set to: 0
  9950                           
  9951                           ; BSR set to: 0
  9952  00015C  C0CC  FFF6         	movff	sprintf@cp,tblptrl
  9953  000160  C0CD  FFF7         	movff	sprintf@cp+1,tblptrh
  9954  000164                     	if	0	;tblptru may be non-zero
  9955  000164                     	endif
  9956  000164                     	if	0	;tblptru may be non-zero
  9957  000164                     	endif
  9958  000164  0008               	tblrd		*
  9959  000166  50F5               	movf	tablat,w,c
  9960  000168  0900               	iorlw	0
  9961  00016A  B4D8               	btfsc	status,2,c
  9962  00016C  D387               	goto	u9540
  9963  00016E  D7E7               	goto	l1685
  9964  000170                     l1675:
  9965                           
  9966                           ; BSR set to: 0
  9967                           
  9968                           ; BSR set to: 0
  9969  000170  C0BE  FFF6         	movff	sprintf@f,tblptrl
  9970  000174  C0BF  FFF7         	movff	sprintf@f+1,tblptrh
  9971  000178  4BBE               	infsnz	sprintf@f& (0+255),f,b
  9972  00017A  2BBF               	incf	(sprintf@f+1)& (0+255),f,b
  9973  00017C                     	if	0	;tblptru may be non-zero
  9974  00017C                     	endif
  9975  00017C                     	if	0	;tblptru may be non-zero
  9976  00017C                     	endif
  9977  00017C  0008               	tblrd		*
  9978  00017E  CFF5 F0E1          	movff	tablat,sprintf@c
  9979  000182  51E1               	movf	sprintf@c& (0+255),w,b
  9980                           
  9981                           ; Switch size 1, requested type "space"
  9982                           ; Number of cases is 5, Range of values is 0 to 115
  9983                           ; switch strategies available:
  9984                           ; Name         Instructions Cycles
  9985                           ; simple_byte           16     9 (average)
  9986                           ;	Chosen strategy is simple_byte
  9987  000184  0A00               	xorlw	0	; case 0
  9988  000186  B4D8               	btfsc	status,2,c
  9989  000188  D385               	goto	u9550
  9990  00018A  0A64               	xorlw	100	; case 100
  9991  00018C  B4D8               	btfsc	status,2,c
  9992  00018E  D00A               	goto	l1679
  9993  000190  0A02               	xorlw	2	; case 102
  9994  000192  B4D8               	btfsc	status,2,c
  9995  000194  D7BD               	goto	l1678
  9996  000196  0A0F               	xorlw	15	; case 105
  9997  000198  B4D8               	btfsc	status,2,c
  9998  00019A  D004               	goto	l1679
  9999  00019C  0A1A               	xorlw	26	; case 115
 10000  00019E  B4D8               	btfsc	status,2,c
 10001  0001A0  D7B9               	goto	l1682
 10002  0001A2  D36C               	goto	u9540
 10003  0001A4                     l1679:
 10004                           
 10005                           ; BSR set to: 0
 10006                           ;doprnt.c: 825: if(flag & (0x700)) {
 10007                           
 10008                           ; BSR set to: 0
 10009  0001A4  0E07               	movlw	7
 10010  0001A6  15D1               	andwf	(sprintf@flag+1)& (0+255),w,b
 10011  0001A8  B4D8               	btfsc	status,2,c
 10012  0001AA  D2C8               	goto	l1688
 10013                           
 10014                           ; BSR set to: 0
 10015                           ;doprnt.c: 829: prec = 6;
 10016  0001AC  0E00               	movlw	0
 10017  0001AE  6FD3               	movwf	(sprintf@prec+1)& (0+255),b
 10018  0001B0  0E06               	movlw	6
 10019  0001B2  6FD2               	movwf	sprintf@prec& (0+255),b
 10020                           
 10021                           ; BSR set to: 0
 10022                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 10023  0001B4  C0CE  FFD9         	movff	sprintf@ap,fsr2l
 10024  0001B8  C0CF  FFDA         	movff	sprintf@ap+1,fsr2h
 10025  0001BC  CFDE F0DE          	movff	postinc2,sprintf@fval
 10026  0001C0  CFDE F0DF          	movff	postinc2,sprintf@fval+1
 10027  0001C4  CFDD F0E0          	movff	postdec2,sprintf@fval+2
 10028                           
 10029                           ; BSR set to: 0
 10030  0001C8  0E03               	movlw	3
 10031  0001CA  27CE               	addwf	sprintf@ap& (0+255),f,b
 10032  0001CC  0E00               	movlw	0
 10033  0001CE  23CF               	addwfc	(sprintf@ap+1)& (0+255),f,b
 10034                           
 10035                           ; BSR set to: 0
 10036                           ;doprnt.c: 831: if(fval < 0.0) {
 10037  0001D0  AFE0               	btfss	(sprintf@fval+2)& (0+255),7,b
 10038  0001D2  D011               	goto	l1689
 10039                           
 10040                           ; BSR set to: 0
 10041                           ;doprnt.c: 832: fval = -fval;
 10042  0001D4  C0DE  F018         	movff	sprintf@fval,___ftneg@f1
 10043  0001D8  C0DF  F019         	movff	sprintf@fval+1,___ftneg@f1+1
 10044  0001DC  C0E0  F01A         	movff	sprintf@fval+2,___ftneg@f1+2
 10045  0001E0  EC11  F022         	call	___ftneg	;wreg free
 10046  0001E4  C018  F0DE         	movff	?___ftneg,sprintf@fval
 10047  0001E8  C019  F0DF         	movff	?___ftneg+1,sprintf@fval+1
 10048  0001EC  C01A  F0E0         	movff	?___ftneg+2,sprintf@fval+2
 10049                           
 10050                           ;doprnt.c: 833: flag |= 0x03;
 10051  0001F0  0E03               	movlw	3
 10052  0001F2  0100               	movlb	0	; () banked
 10053  0001F4  13D0               	iorwf	sprintf@flag& (0+255),f,b
 10054  0001F6                     l1689:
 10055                           
 10056                           ; BSR set to: 0
 10057                           ;doprnt.c: 834: }
 10058                           ;doprnt.c: 835: exp = 0;
 10059                           
 10060                           ; BSR set to: 0
 10061  0001F6  0E00               	movlw	0
 10062  0001F8  6FD9               	movwf	(sprintf@exp+1)& (0+255),b
 10063  0001FA  0E00               	movlw	0
 10064  0001FC  6FD8               	movwf	sprintf@exp& (0+255),b
 10065                           
 10066                           ; BSR set to: 0
 10067                           ;doprnt.c: 836: if( fval!=0) {
 10068  0001FE  51DE               	movf	sprintf@fval& (0+255),w,b
 10069  000200  11DF               	iorwf	(sprintf@fval+1)& (0+255),w,b
 10070  000202  11E0               	iorwf	(sprintf@fval+2)& (0+255),w,b
 10071  000204  B4D8               	btfsc	status,2,c
 10072  000206  D086               	goto	l1694
 10073                           
 10074                           ; BSR set to: 0
 10075                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 10076  000208  0E82               	movlw	130
 10077  00020A  6FC3               	movwf	??_sprintf& (0+255),b
 10078  00020C  0EFF               	movlw	255
 10079  00020E  6FC4               	movwf	(??_sprintf+1)& (0+255),b
 10080  000210  C0DE  F0C5         	movff	sprintf@fval,??_sprintf+2
 10081  000214  C0DF  F0C6         	movff	sprintf@fval+1,??_sprintf+3
 10082  000218  C0E0  F0C7         	movff	sprintf@fval+2,??_sprintf+4
 10083  00021C  C0E1  F0C8         	movff	sprintf@fval+3,??_sprintf+5
 10084  000220  0E10               	movlw	16
 10085  000222  D005               	goto	u9290
 10086  000224                     u9295:
 10087  000224  90D8               	bcf	status,0,c
 10088  000226  33C8               	rrcf	(??_sprintf+5)& (0+255),f,b
 10089  000228  33C7               	rrcf	(??_sprintf+4)& (0+255),f,b
 10090  00022A  33C6               	rrcf	(??_sprintf+3)& (0+255),f,b
 10091  00022C  33C5               	rrcf	(??_sprintf+2)& (0+255),f,b
 10092  00022E                     u9290:
 10093  00022E  2EE8               	decfsz	wreg,f,c
 10094  000230  D7F9               	goto	u9295
 10095  000232  51C5               	movf	(??_sprintf+2)& (0+255),w,b
 10096  000234  25C3               	addwf	??_sprintf& (0+255),w,b
 10097  000236  6FD8               	movwf	sprintf@exp& (0+255),b
 10098  000238  0E00               	movlw	0
 10099  00023A  21C4               	addwfc	(??_sprintf+1)& (0+255),w,b
 10100  00023C  6FD9               	movwf	(sprintf@exp+1)& (0+255),b
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;doprnt.c: 838: exp--;
 10104  00023E  07D8               	decf	sprintf@exp& (0+255),f,b
 10105  000240  A0D8               	btfss	status,0,c
 10106  000242  07D9               	decf	(sprintf@exp+1)& (0+255),f,b
 10107                           
 10108                           ; BSR set to: 0
 10109                           ;doprnt.c: 839: exp *= 3;
 10110  000244  C0D8  F026         	movff	sprintf@exp,___wmul@multiplier
 10111  000248  C0D9  F027         	movff	sprintf@exp+1,___wmul@multiplier+1
 10112  00024C  0E00               	movlw	0
 10113  00024E  6E29               	movwf	___wmul@multiplicand+1,c
 10114  000250  0E03               	movlw	3
 10115  000252  6E28               	movwf	___wmul@multiplicand,c
 10116  000254  ECDA  F021         	call	___wmul	;wreg free
 10117  000258  C026  F0D8         	movff	?___wmul,sprintf@exp
 10118  00025C  C027  F0D9         	movff	?___wmul+1,sprintf@exp+1
 10119                           
 10120                           ;doprnt.c: 840: exp /= 10;
 10121  000260  C0D8  F01E         	movff	sprintf@exp,___awdiv@dividend
 10122  000264  C0D9  F01F         	movff	sprintf@exp+1,___awdiv@dividend+1
 10123  000268  0E00               	movlw	0
 10124  00026A  6E21               	movwf	___awdiv@divisor+1,c
 10125  00026C  0E0A               	movlw	10
 10126  00026E  6E20               	movwf	___awdiv@divisor,c
 10127  000270  EC06  F01C         	call	___awdiv	;wreg free
 10128  000274  C01E  F0D8         	movff	?___awdiv,sprintf@exp
 10129  000278  C01F  F0D9         	movff	?___awdiv+1,sprintf@exp+1
 10130                           
 10131                           ;doprnt.c: 841: if(exp < 0)
 10132  00027C  0100               	movlb	0	; () banked
 10133  00027E  AFD9               	btfss	(sprintf@exp+1)& (0+255),7,b
 10134  000280  D003               	goto	l1691
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;doprnt.c: 842: exp--;
 10138  000282  07D8               	decf	sprintf@exp& (0+255),f,b
 10139  000284  A0D8               	btfss	status,0,c
 10140  000286  07D9               	decf	(sprintf@exp+1)& (0+255),f,b
 10141  000288                     l1691:
 10142                           
 10143                           ; BSR set to: 0
 10144                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 10145                           
 10146                           ; BSR set to: 0
 10147  000288  51D8               	movf	sprintf@exp& (0+255),w,b
 10148  00028A  0800               	sublw	0
 10149  00028C  EC51  F004         	call	_scale
 10150  000290  C072  F0DA         	movff	?_scale,sprintf@tmpval
 10151  000294  C073  F0DB         	movff	?_scale+1,sprintf@tmpval+1
 10152  000298  C074  F0DC         	movff	?_scale+2,sprintf@tmpval+2
 10153                           
 10154                           ;doprnt.c: 847: tmpval.integ *= fval;
 10155  00029C  C0DA  F066         	movff	sprintf@tmpval,___ftmul@f1
 10156  0002A0  C0DB  F067         	movff	sprintf@tmpval+1,___ftmul@f1+1
 10157  0002A4  C0DC  F068         	movff	sprintf@tmpval+2,___ftmul@f1+2
 10158  0002A8  C0DE  F069         	movff	sprintf@fval,___ftmul@f2
 10159  0002AC  C0DF  F06A         	movff	sprintf@fval+1,___ftmul@f2+1
 10160  0002B0  C0E0  F06B         	movff	sprintf@fval+2,___ftmul@f2+2
 10161  0002B4  EC6D  F016         	call	___ftmul	;wreg free
 10162  0002B8  C066  F0DA         	movff	?___ftmul,sprintf@tmpval
 10163  0002BC  C067  F0DB         	movff	?___ftmul+1,sprintf@tmpval+1
 10164  0002C0  C068  F0DC         	movff	?___ftmul+2,sprintf@tmpval+2
 10165                           
 10166                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 10167  0002C4  C0DA  F018         	movff	sprintf@tmpval,___ftge@ff1
 10168  0002C8  C0DB  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 10169  0002CC  C0DC  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 10170  0002D0  0E00               	movlw	0
 10171  0002D2  6E1B               	movwf	___ftge@ff2,c
 10172  0002D4  0E80               	movlw	128
 10173  0002D6  6E1C               	movwf	___ftge@ff2+1,c
 10174  0002D8  0E3F               	movlw	63
 10175  0002DA  6E1D               	movwf	___ftge@ff2+2,c
 10176  0002DC  ECBE  F01B         	call	___ftge	;wreg free
 10177  0002E0  B0D8               	btfsc	status,0,c
 10178  0002E2  D005               	goto	l1692
 10179                           
 10180                           ;doprnt.c: 849: exp--;
 10181  0002E4  0100               	movlb	0	; () banked
 10182  0002E6  07D8               	decf	sprintf@exp& (0+255),f,b
 10183  0002E8  A0D8               	btfss	status,0,c
 10184  0002EA  07D9               	decf	(sprintf@exp+1)& (0+255),f,b
 10185  0002EC  D013               	goto	l1694
 10186  0002EE                     l1692:
 10187                           
 10188                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 10189                           
 10190                           ; BSR set to: 0
 10191  0002EE  C0DA  F018         	movff	sprintf@tmpval,___ftge@ff1
 10192  0002F2  C0DB  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 10193  0002F6  C0DC  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 10194  0002FA  0E00               	movlw	0
 10195  0002FC  6E1B               	movwf	___ftge@ff2,c
 10196  0002FE  0E20               	movlw	32
 10197  000300  6E1C               	movwf	___ftge@ff2+1,c
 10198  000302  0E41               	movlw	65
 10199  000304  6E1D               	movwf	___ftge@ff2+2,c
 10200  000306  ECBE  F01B         	call	___ftge	;wreg free
 10201  00030A  A0D8               	btfss	status,0,c
 10202  00030C  D003               	goto	l1694
 10203                           
 10204                           ;doprnt.c: 851: exp++;
 10205  00030E  0100               	movlb	0	; () banked
 10206  000310  4BD8               	infsnz	sprintf@exp& (0+255),f,b
 10207  000312  2BD9               	incf	(sprintf@exp+1)& (0+255),f,b
 10208  000314                     l1694:
 10209                           
 10210                           ;doprnt.c: 852: }
 10211                           ;doprnt.c: 1112: if(prec <= 12)
 10212                           
 10213                           ; BSR set to: 0
 10214                           
 10215                           ; BSR set to: 0
 10216                           
 10217                           ; BSR set to: 0
 10218  000314  0100               	movlb	0	; () banked
 10219  000316  BFD3               	btfsc	(sprintf@prec+1)& (0+255),7,b
 10220  000318  D006               	goto	u9330
 10221  00031A  51D3               	movf	(sprintf@prec+1)& (0+255),w,b
 10222  00031C  E11B               	bnz	l9089
 10223  00031E  0E0D               	movlw	13
 10224  000320  5DD2               	subwf	sprintf@prec& (0+255),w,b
 10225  000322  B0D8               	btfsc	status,0,c
 10226  000324  D017               	goto	l1695
 10227  000326                     u9330:
 10228                           
 10229                           ; BSR set to: 0
 10230                           ;doprnt.c: 1113: fval += fround(prec);
 10231  000326  C0DE  F07C         	movff	sprintf@fval,___ftadd@f1
 10232  00032A  C0DF  F07D         	movff	sprintf@fval+1,___ftadd@f1+1
 10233  00032E  C0E0  F07E         	movff	sprintf@fval+2,___ftadd@f1+2
 10234  000332  51D2               	movf	sprintf@prec& (0+255),w,b
 10235  000334  EC1B  F009         	call	_fround
 10236  000338  C072  F07F         	movff	?_fround,___ftadd@f2
 10237  00033C  C073  F080         	movff	?_fround+1,___ftadd@f2+1
 10238  000340  C074  F081         	movff	?_fround+2,___ftadd@f2+2
 10239  000344  EC26  F00E         	call	___ftadd	;wreg free
 10240  000348  C07C  F0DE         	movff	?___ftadd,sprintf@fval
 10241  00034C  C07D  F0DF         	movff	?___ftadd+1,sprintf@fval+1
 10242  000350  C07E  F0E0         	movff	?___ftadd+2,sprintf@fval+2
 10243  000354                     l1695:
 10244  000354                     l9089:
 10245                           
 10246                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 10247  000354  0100               	movlb	0	; () banked
 10248  000356  BFD9               	btfsc	(sprintf@exp+1)& (0+255),7,b
 10249  000358  D006               	goto	u9340
 10250  00035A  51D9               	movf	(sprintf@exp+1)& (0+255),w,b
 10251  00035C  E11F               	bnz	l9097
 10252  00035E  0E0A               	movlw	10
 10253  000360  5DD8               	subwf	sprintf@exp& (0+255),w,b
 10254  000362  B0D8               	btfsc	status,0,c
 10255  000364  D01B               	goto	u9370
 10256  000366                     u9340:
 10257                           
 10258                           ; BSR set to: 0
 10259  000366  51DE               	movf	sprintf@fval& (0+255),w,b
 10260  000368  11DF               	iorwf	(sprintf@fval+1)& (0+255),w,b
 10261  00036A  11E0               	iorwf	(sprintf@fval+2)& (0+255),w,b
 10262  00036C  B4D8               	btfsc	status,2,c
 10263  00036E  D055               	goto	l1696
 10264                           
 10265                           ; BSR set to: 0
 10266  000370  C0DE  F079         	movff	sprintf@fval,___fttol@f1
 10267  000374  C0DF  F07A         	movff	sprintf@fval+1,___fttol@f1+1
 10268  000378  C0E0  F07B         	movff	sprintf@fval+2,___fttol@f1+2
 10269  00037C  ECF1  F015         	call	___fttol	;wreg free
 10270  000380  0100               	movlb	0	; () banked
 10271  000382  5179               	movf	?___fttol& (0+255),w,b
 10272  000384  117A               	iorwf	(?___fttol+1)& (0+255),w,b
 10273  000386  117B               	iorwf	(?___fttol+2)& (0+255),w,b
 10274  000388  117C               	iorwf	(?___fttol+3)& (0+255),w,b
 10275  00038A  B4D8               	btfsc	status,2,c
 10276                           
 10277                           ; BSR set to: 0
 10278  00038C  BFD9               	btfsc	(sprintf@exp+1)& (0+255),7,b
 10279  00038E  D045               	goto	l1696
 10280  000390  51D9               	movf	(sprintf@exp+1)& (0+255),w,b
 10281  000392  E104               	bnz	l9097
 10282  000394  0E02               	movlw	2
 10283  000396  5DD8               	subwf	sprintf@exp& (0+255),w,b
 10284  000398  A0D8               	btfss	status,0,c
 10285  00039A  D03F               	goto	l1696
 10286  00039C                     u9370:
 10287  00039C                     l9097:
 10288                           
 10289                           ; BSR set to: 0
 10290                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 10291  00039C  C0DA  F018         	movff	sprintf@tmpval,___ftge@ff1
 10292  0003A0  C0DB  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 10293  0003A4  C0DC  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 10294  0003A8  0E70               	movlw	112
 10295  0003AA  6E1B               	movwf	___ftge@ff2,c
 10296  0003AC  0E89               	movlw	137
 10297  0003AE  6E1C               	movwf	___ftge@ff2+1,c
 10298  0003B0  0E40               	movlw	64
 10299  0003B2  6E1D               	movwf	___ftge@ff2+2,c
 10300  0003B4  ECBE  F01B         	call	___ftge	;wreg free
 10301  0003B8  B0D8               	btfsc	status,0,c
 10302  0003BA  D003               	goto	l1699
 10303                           
 10304                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 10305  0003BC  0100               	movlb	0	; () banked
 10306  0003BE  0EF7               	movlw	247
 10307  0003C0  D002               	goto	L1
 10308  0003C2                     l1699:
 10309                           
 10310                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 10311                           
 10312                           ; BSR set to: 0
 10313  0003C2  0100               	movlb	0	; () banked
 10314  0003C4  0EF8               	movlw	248
 10315  0003C6                     L1:
 10316  0003C6  27D8               	addwf	sprintf@exp& (0+255),f,b
 10317  0003C8  0EFF               	movlw	255
 10318  0003CA  23D9               	addwfc	(sprintf@exp+1)& (0+255),f,b
 10319                           
 10320                           ; BSR set to: 0
 10321                           ;doprnt.c: 1124: }
 10322                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 10323                           
 10324                           ; BSR set to: 0
 10325  0003CC  51D8               	movf	sprintf@exp& (0+255),w,b
 10326  0003CE  EC51  F004         	call	_scale
 10327  0003D2  C072  F0DA         	movff	?_scale,sprintf@tmpval
 10328  0003D6  C073  F0DB         	movff	?_scale+1,sprintf@tmpval+1
 10329  0003DA  C074  F0DC         	movff	?_scale+2,sprintf@tmpval+2
 10330                           
 10331                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 10332  0003DE  C0DE  F018         	movff	sprintf@fval,__tdiv_to_l_@f1
 10333  0003E2  C0DF  F019         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
 10334  0003E6  C0E0  F01A         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
 10335  0003EA  C0DA  F01B         	movff	sprintf@tmpval,__tdiv_to_l_@f2
 10336  0003EE  C0DB  F01C         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
 10337  0003F2  C0DC  F01D         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
 10338  0003F6  ECEF  F011         	call	__tdiv_to_l_	;wreg free
 10339  0003FA  C018  F0D4         	movff	?__tdiv_to_l_,sprintf@val
 10340  0003FE  C019  F0D5         	movff	?__tdiv_to_l_+1,sprintf@val+1
 10341  000402  C01A  F0D6         	movff	?__tdiv_to_l_+2,sprintf@val+2
 10342  000406  C01B  F0D7         	movff	?__tdiv_to_l_+3,sprintf@val+3
 10343                           
 10344                           ;doprnt.c: 1129: fval = 0.0;
 10345  00040A  0E00               	movlw	0
 10346  00040C  0100               	movlb	0	; () banked
 10347  00040E  6FDE               	movwf	sprintf@fval& (0+255),b
 10348  000410  0E00               	movlw	0
 10349  000412  6FDF               	movwf	(sprintf@fval+1)& (0+255),b
 10350  000414  0E00               	movlw	0
 10351  000416  6FE0               	movwf	(sprintf@fval+2)& (0+255),b
 10352                           
 10353                           ;doprnt.c: 1130: } else {
 10354  000418  D033               	goto	l1705
 10355  00041A                     l1696:
 10356                           
 10357                           ; BSR set to: 0
 10358                           ;doprnt.c: 1131: val = (unsigned long)fval;
 10359                           
 10360                           ; BSR set to: 0
 10361  00041A  C0DE  F079         	movff	sprintf@fval,___fttol@f1
 10362  00041E  C0DF  F07A         	movff	sprintf@fval+1,___fttol@f1+1
 10363  000422  C0E0  F07B         	movff	sprintf@fval+2,___fttol@f1+2
 10364  000426  ECF1  F015         	call	___fttol	;wreg free
 10365  00042A  C079  F0D4         	movff	?___fttol,sprintf@val
 10366  00042E  C07A  F0D5         	movff	?___fttol+1,sprintf@val+1
 10367  000432  C07B  F0D6         	movff	?___fttol+2,sprintf@val+2
 10368  000436  C07C  F0D7         	movff	?___fttol+3,sprintf@val+3
 10369                           
 10370                           ;doprnt.c: 1132: fval -= (double)val;
 10371  00043A  C0DE  F088         	movff	sprintf@fval,___ftsub@f1
 10372  00043E  C0DF  F089         	movff	sprintf@fval+1,___ftsub@f1+1
 10373  000442  C0E0  F08A         	movff	sprintf@fval+2,___ftsub@f1+2
 10374  000446  C0D4  F020         	movff	sprintf@val,___lltoft@c
 10375  00044A  C0D5  F021         	movff	sprintf@val+1,___lltoft@c+1
 10376  00044E  C0D6  F022         	movff	sprintf@val+2,___lltoft@c+2
 10377  000452  C0D7  F023         	movff	sprintf@val+3,___lltoft@c+3
 10378  000456  EC9A  F01E         	call	___lltoft	;wreg free
 10379  00045A  C020  F08B         	movff	?___lltoft,___ftsub@f2
 10380  00045E  C021  F08C         	movff	?___lltoft+1,___ftsub@f2+1
 10381  000462  C022  F08D         	movff	?___lltoft+2,___ftsub@f2+2
 10382  000466  EC2C  F020         	call	___ftsub	;wreg free
 10383  00046A  C088  F0DE         	movff	?___ftsub,sprintf@fval
 10384  00046E  C089  F0DF         	movff	?___ftsub+1,sprintf@fval+1
 10385  000472  C08A  F0E0         	movff	?___ftsub+2,sprintf@fval+2
 10386                           
 10387                           ;doprnt.c: 1133: exp = 0;
 10388  000476  0E00               	movlw	0
 10389  000478  0100               	movlb	0	; () banked
 10390  00047A  6FD9               	movwf	(sprintf@exp+1)& (0+255),b
 10391  00047C  0E00               	movlw	0
 10392  00047E  6FD8               	movwf	sprintf@exp& (0+255),b
 10393  000480                     l1705:
 10394                           
 10395                           ; BSR set to: 0
 10396                           ;doprnt.c: 1134: }
 10397                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 10398                           
 10399                           ; BSR set to: 0
 10400  000480  0E01               	movlw	1
 10401  000482  6FE1               	movwf	sprintf@c& (0+255),b
 10402  000484                     l9117:
 10403                           
 10404                           ; BSR set to: 0
 10405  000484  0E0A               	movlw	10
 10406  000486  19E1               	xorwf	sprintf@c& (0+255),w,b
 10407  000488  B4D8               	btfsc	status,2,c
 10408  00048A  D018               	goto	u9410
 10409                           
 10410                           ; BSR set to: 0
 10411                           ;doprnt.c: 1137: if(val < dpowers[c])
 10412                           
 10413                           ; BSR set to: 0
 10414                           
 10415                           ; BSR set to: 0
 10416  00048C  51E1               	movf	sprintf@c& (0+255),w,b
 10417  00048E  0D04               	mullw	4
 10418  000490  0E3B               	movlw	low _dpowers
 10419  000492  24F3               	addwf	prodl,w,c
 10420  000494  6EF6               	movwf	tblptrl,c
 10421  000496  0E78               	movlw	high _dpowers
 10422  000498  20F4               	addwfc	prodh,w,c
 10423  00049A  6EF7               	movwf	tblptrh,c
 10424  00049C                     	if	0	;There are less than 3 active tblptr bytes
 10425  00049C                     	endif
 10426  00049C  0009               	tblrd		*+
 10427  00049E  50F5               	movf	tablat,w,c
 10428  0004A0  5DD4               	subwf	sprintf@val& (0+255),w,b
 10429  0004A2  0009               	tblrd		*+
 10430  0004A4  50F5               	movf	tablat,w,c
 10431  0004A6  59D5               	subwfb	(sprintf@val+1)& (0+255),w,b
 10432  0004A8  0009               	tblrd		*+
 10433  0004AA  50F5               	movf	tablat,w,c
 10434  0004AC  59D6               	subwfb	(sprintf@val+2)& (0+255),w,b
 10435  0004AE  0009               	tblrd		*+
 10436  0004B0  50F5               	movf	tablat,w,c
 10437  0004B2  59D7               	subwfb	(sprintf@val+3)& (0+255),w,b
 10438  0004B4  A0D8               	btfss	status,0,c
 10439  0004B6  D002               	goto	u9410
 10440                           
 10441                           ; BSR set to: 0
 10442                           
 10443                           ; BSR set to: 0
 10444                           
 10445                           ; BSR set to: 0
 10446                           ;doprnt.c: 1138: break;
 10447  0004B8  2BE1               	incf	sprintf@c& (0+255),f,b
 10448  0004BA  D7E4               	goto	l9117
 10449  0004BC                     u9410:
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;doprnt.c: 1175: {
 10453                           ;doprnt.c: 1188: if(flag & 0x03)
 10454                           
 10455                           ; BSR set to: 0
 10456  0004BC  0E03               	movlw	3
 10457  0004BE  15D0               	andwf	sprintf@flag& (0+255),w,b
 10458  0004C0  6FC3               	movwf	??_sprintf& (0+255),b
 10459  0004C2  0E00               	movlw	0
 10460  0004C4  15D1               	andwf	(sprintf@flag+1)& (0+255),w,b
 10461  0004C6  6FC4               	movwf	(??_sprintf+1)& (0+255),b
 10462  0004C8  51C3               	movf	??_sprintf& (0+255),w,b
 10463  0004CA  11C4               	iorwf	(??_sprintf+1)& (0+255),w,b
 10464  0004CC  B4D8               	btfsc	status,2,c
 10465  0004CE  D051               	goto	l1710
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;doprnt.c: 1190: ((*sp++ = ('-')));
 10469  0004D0  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10470  0004D4  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10471  0004D8  0E2D               	movlw	45
 10472  0004DA  D048               	goto	L2
 10473  0004DC                     
 10474                           ; BSR set to: 0
 10475                           ;doprnt.c: 1200: {
 10476                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 10477                           
 10478                           ; BSR set to: 0
 10479  0004DC  C0D4  F018         	movff	sprintf@val,___lldiv@dividend
 10480  0004E0  C0D5  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 10481  0004E4  C0D6  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 10482  0004E8  C0D7  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 10483  0004EC  51E1               	movf	sprintf@c& (0+255),w,b
 10484  0004EE  0D04               	mullw	4
 10485  0004F0  0E3B               	movlw	low _dpowers
 10486  0004F2  24F3               	addwf	prodl,w,c
 10487  0004F4  6EF6               	movwf	tblptrl,c
 10488  0004F6  0E78               	movlw	high _dpowers
 10489  0004F8  20F4               	addwfc	prodh,w,c
 10490  0004FA  6EF7               	movwf	tblptrh,c
 10491  0004FC                     	if	0	;There are less than 3 active tblptr bytes
 10492  0004FC                     	endif
 10493  0004FC  0009               	tblrd		*+
 10494  0004FE  CFF5 F01C          	movff	tablat,___lldiv@divisor
 10495  000502  0009               	tblrd		*+
 10496  000504  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 10497  000508  0009               	tblrd		*+
 10498  00050A  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 10499  00050E  000A               	tblrd		*-
 10500  000510  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 10501  000514  EC48  F01C         	call	___lldiv	;wreg free
 10502  000518  C018  F0DA         	movff	?___lldiv,sprintf@tmpval
 10503  00051C  C019  F0DB         	movff	?___lldiv+1,sprintf@tmpval+1
 10504  000520  C01A  F0DC         	movff	?___lldiv+2,sprintf@tmpval+2
 10505  000524  C01B  F0DD         	movff	?___lldiv+3,sprintf@tmpval+3
 10506                           
 10507                           ;doprnt.c: 1202: tmpval.vd %= 10;
 10508  000528  C0DA  F0B3         	movff	sprintf@tmpval,___llmod@dividend
 10509  00052C  C0DB  F0B4         	movff	sprintf@tmpval+1,___llmod@dividend+1
 10510  000530  C0DC  F0B5         	movff	sprintf@tmpval+2,___llmod@dividend+2
 10511  000534  C0DD  F0B6         	movff	sprintf@tmpval+3,___llmod@dividend+3
 10512  000538  0E0A               	movlw	10
 10513  00053A  0100               	movlb	0	; () banked
 10514  00053C  6FB7               	movwf	___llmod@divisor& (0+255),b
 10515  00053E  0E00               	movlw	0
 10516  000540  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 10517  000542  0E00               	movlw	0
 10518  000544  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 10519  000546  0E00               	movlw	0
 10520  000548  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 10521  00054A  ECA9  F01D         	call	___llmod	;wreg free
 10522  00054E  C0B3  F0DA         	movff	?___llmod,sprintf@tmpval
 10523  000552  C0B4  F0DB         	movff	?___llmod+1,sprintf@tmpval+1
 10524  000556  C0B5  F0DC         	movff	?___llmod+2,sprintf@tmpval+2
 10525  00055A  C0B6  F0DD         	movff	?___llmod+3,sprintf@tmpval+3
 10526                           
 10527                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
 10528  00055E  0100               	movlb	0	; () banked
 10529  000560  51DA               	movf	sprintf@tmpval& (0+255),w,b
 10530  000562  0F30               	addlw	48
 10531  000564  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10532  000568  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10533  00056C                     L2:
 10534  00056C  6EDF               	movwf	indf2,c
 10535                           
 10536                           ; BSR set to: 0
 10537  00056E  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10538  000570  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10539  000572                     l1710:
 10540                           
 10541                           ; BSR set to: 0
 10542                           
 10543                           ; BSR set to: 0
 10544  000572  07E1               	decf	sprintf@c& (0+255),f,b
 10545  000574  29E1               	incf	sprintf@c& (0+255),w,b
 10546  000576  B4D8               	btfsc	status,2,c
 10547  000578  D00C               	goto	l1713
 10548  00057A  D7B0               	goto	l1711
 10549  00057C                     l9145:
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;doprnt.c: 1208: ((*sp++ = ('0')));
 10553  00057C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10554  000580  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10555  000584  0E30               	movlw	48
 10556  000586  6EDF               	movwf	indf2,c
 10557                           
 10558                           ; BSR set to: 0
 10559  000588  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10560  00058A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10561                           
 10562                           ; BSR set to: 0
 10563                           ;doprnt.c: 1209: exp--;
 10564  00058C  07D8               	decf	sprintf@exp& (0+255),f,b
 10565  00058E  A0D8               	btfss	status,0,c
 10566  000590  07D9               	decf	(sprintf@exp+1)& (0+255),f,b
 10567  000592                     l1713:
 10568                           
 10569                           ; BSR set to: 0
 10570                           
 10571                           ; BSR set to: 0
 10572  000592  BFD9               	btfsc	(sprintf@exp+1)& (0+255),7,b
 10573  000594  D005               	goto	u9440
 10574  000596  51D9               	movf	(sprintf@exp+1)& (0+255),w,b
 10575  000598  E1F1               	bnz	l9145
 10576  00059A  05D8               	decf	sprintf@exp& (0+255),w,b
 10577  00059C  B0D8               	btfsc	status,0,c
 10578  00059E  D7EE               	goto	l1714
 10579  0005A0                     u9440:
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;doprnt.c: 1210: }
 10583                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 10584                           
 10585                           ; BSR set to: 0
 10586  0005A0  BFD3               	btfsc	(sprintf@prec+1)& (0+255),7,b
 10587  0005A2  D009               	goto	l1716
 10588  0005A4  51D3               	movf	(sprintf@prec+1)& (0+255),w,b
 10589  0005A6  E104               	bnz	u9450
 10590  0005A8  0E09               	movlw	9
 10591  0005AA  5DD2               	subwf	sprintf@prec& (0+255),w,b
 10592  0005AC  A0D8               	btfss	status,0,c
 10593  0005AE  D003               	goto	l1716
 10594  0005B0                     u9450:
 10595                           
 10596                           ; BSR set to: 0
 10597                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 10598  0005B0  0E08               	movlw	8
 10599  0005B2  6FE1               	movwf	sprintf@c& (0+255),b
 10600  0005B4  D002               	goto	l1717
 10601  0005B6                     l1716:
 10602                           
 10603                           ; BSR set to: 0
 10604                           ;doprnt.c: 1213: else
 10605                           ;doprnt.c: 1214: c = prec;
 10606  0005B6  C0D2  F0E1         	movff	sprintf@prec,sprintf@c
 10607  0005BA                     l1717:
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;doprnt.c: 1215: prec -= c;
 10611                           
 10612                           ; BSR set to: 0
 10613  0005BA  51E1               	movf	sprintf@c& (0+255),w,b
 10614  0005BC  5FD2               	subwf	sprintf@prec& (0+255),f,b
 10615  0005BE  0E00               	movlw	0
 10616  0005C0  BFE1               	btfsc	sprintf@c& (0+255),7,b
 10617  0005C2  0EFF               	movlw	255
 10618  0005C4  5BD3               	subwfb	(sprintf@prec+1)& (0+255),f,b
 10619                           
 10620                           ; BSR set to: 0
 10621                           ;doprnt.c: 1219: if(c)
 10622  0005C6  51E1               	movf	sprintf@c& (0+255),w,b
 10623  0005C8  B4D8               	btfsc	status,2,c
 10624  0005CA  D008               	goto	l1718
 10625                           
 10626                           ; BSR set to: 0
 10627                           ;doprnt.c: 1221: ((*sp++ = ('.')));
 10628  0005CC  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10629  0005D0  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10630  0005D4  0E2E               	movlw	46
 10631  0005D6  6EDF               	movwf	indf2,c
 10632                           
 10633                           ; BSR set to: 0
 10634  0005D8  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10635  0005DA  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10636  0005DC                     l1718:
 10637                           
 10638                           ; BSR set to: 0
 10639                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 10640                           
 10641                           ; BSR set to: 0
 10642  0005DC  51E1               	movf	sprintf@c& (0+255),w,b
 10643  0005DE  EC51  F004         	call	_scale
 10644  0005E2  C072  F0C9         	movff	?_scale,_sprintf$3955
 10645  0005E6  C073  F0CA         	movff	?_scale+1,_sprintf$3955+1
 10646  0005EA  C074  F0CB         	movff	?_scale+2,_sprintf$3955+2
 10647                           
 10648                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 10649  0005EE  C0DE  F069         	movff	sprintf@fval,___ftmul@f2
 10650  0005F2  C0DF  F06A         	movff	sprintf@fval+1,___ftmul@f2+1
 10651  0005F6  C0E0  F06B         	movff	sprintf@fval+2,___ftmul@f2+2
 10652  0005FA  C0C9  F066         	movff	_sprintf$3955,___ftmul@f1
 10653  0005FE  C0CA  F067         	movff	_sprintf$3955+1,___ftmul@f1+1
 10654  000602  C0CB  F068         	movff	_sprintf$3955+2,___ftmul@f1+2
 10655  000606  EC6D  F016         	call	___ftmul	;wreg free
 10656  00060A  C066  F079         	movff	?___ftmul,___fttol@f1
 10657  00060E  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
 10658  000612  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
 10659  000616  ECF1  F015         	call	___fttol	;wreg free
 10660  00061A  C079  F0D4         	movff	?___fttol,sprintf@val
 10661  00061E  C07A  F0D5         	movff	?___fttol+1,sprintf@val+1
 10662  000622  C07B  F0D6         	movff	?___fttol+2,sprintf@val+2
 10663  000626  C07C  F0D7         	movff	?___fttol+3,sprintf@val+3
 10664                           
 10665                           ;doprnt.c: 1228: while(c--) {
 10666  00062A  D072               	goto	l1719
 10667  00062C                     
 10668                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 10669  00062C  C0D4  F018         	movff	sprintf@val,___lldiv@dividend
 10670  000630  C0D5  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 10671  000634  C0D6  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 10672  000638  C0D7  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 10673  00063C  0100               	movlb	0	; () banked
 10674  00063E  51E1               	movf	sprintf@c& (0+255),w,b
 10675  000640  0D04               	mullw	4
 10676  000642  0E3B               	movlw	low _dpowers
 10677  000644  24F3               	addwf	prodl,w,c
 10678  000646  6EF6               	movwf	tblptrl,c
 10679  000648  0E78               	movlw	high _dpowers
 10680  00064A  20F4               	addwfc	prodh,w,c
 10681  00064C  6EF7               	movwf	tblptrh,c
 10682  00064E                     	if	0	;There are less than 3 active tblptr bytes
 10683  00064E                     	endif
 10684  00064E  0009               	tblrd		*+
 10685  000650  CFF5 F01C          	movff	tablat,___lldiv@divisor
 10686  000654  0009               	tblrd		*+
 10687  000656  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 10688  00065A  0009               	tblrd		*+
 10689  00065C  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 10690  000660  000A               	tblrd		*-
 10691  000662  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 10692  000666  EC48  F01C         	call	___lldiv	;wreg free
 10693  00066A  C018  F0DA         	movff	?___lldiv,sprintf@tmpval
 10694  00066E  C019  F0DB         	movff	?___lldiv+1,sprintf@tmpval+1
 10695  000672  C01A  F0DC         	movff	?___lldiv+2,sprintf@tmpval+2
 10696  000676  C01B  F0DD         	movff	?___lldiv+3,sprintf@tmpval+3
 10697                           
 10698                           ;doprnt.c: 1230: tmpval.vd %= 10;
 10699  00067A  C0DA  F0B3         	movff	sprintf@tmpval,___llmod@dividend
 10700  00067E  C0DB  F0B4         	movff	sprintf@tmpval+1,___llmod@dividend+1
 10701  000682  C0DC  F0B5         	movff	sprintf@tmpval+2,___llmod@dividend+2
 10702  000686  C0DD  F0B6         	movff	sprintf@tmpval+3,___llmod@dividend+3
 10703  00068A  0E0A               	movlw	10
 10704  00068C  0100               	movlb	0	; () banked
 10705  00068E  6FB7               	movwf	___llmod@divisor& (0+255),b
 10706  000690  0E00               	movlw	0
 10707  000692  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 10708  000694  0E00               	movlw	0
 10709  000696  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 10710  000698  0E00               	movlw	0
 10711  00069A  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 10712  00069C  ECA9  F01D         	call	___llmod	;wreg free
 10713  0006A0  C0B3  F0DA         	movff	?___llmod,sprintf@tmpval
 10714  0006A4  C0B4  F0DB         	movff	?___llmod+1,sprintf@tmpval+1
 10715  0006A8  C0B5  F0DC         	movff	?___llmod+2,sprintf@tmpval+2
 10716  0006AC  C0B6  F0DD         	movff	?___llmod+3,sprintf@tmpval+3
 10717                           
 10718                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
 10719  0006B0  0100               	movlb	0	; () banked
 10720  0006B2  51DA               	movf	sprintf@tmpval& (0+255),w,b
 10721  0006B4  0F30               	addlw	48
 10722  0006B6  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10723  0006BA  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10724  0006BE  6EDF               	movwf	indf2,c
 10725                           
 10726                           ; BSR set to: 0
 10727  0006C0  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10728  0006C2  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10729                           
 10730                           ; BSR set to: 0
 10731                           ;doprnt.c: 1232: val %= dpowers[c];
 10732  0006C4  C0D4  F0B3         	movff	sprintf@val,___llmod@dividend
 10733  0006C8  C0D5  F0B4         	movff	sprintf@val+1,___llmod@dividend+1
 10734  0006CC  C0D6  F0B5         	movff	sprintf@val+2,___llmod@dividend+2
 10735  0006D0  C0D7  F0B6         	movff	sprintf@val+3,___llmod@dividend+3
 10736  0006D4  51E1               	movf	sprintf@c& (0+255),w,b
 10737  0006D6  0D04               	mullw	4
 10738  0006D8  0E3B               	movlw	low _dpowers
 10739  0006DA  24F3               	addwf	prodl,w,c
 10740  0006DC  6EF6               	movwf	tblptrl,c
 10741  0006DE  0E78               	movlw	high _dpowers
 10742  0006E0  20F4               	addwfc	prodh,w,c
 10743  0006E2  6EF7               	movwf	tblptrh,c
 10744  0006E4                     	if	0	;There are less than 3 active tblptr bytes
 10745  0006E4                     	endif
 10746  0006E4  0009               	tblrd		*+
 10747  0006E6  CFF5 F0B7          	movff	tablat,___llmod@divisor
 10748  0006EA  0009               	tblrd		*+
 10749  0006EC  CFF5 F0B8          	movff	tablat,___llmod@divisor+1
 10750  0006F0  0009               	tblrd		*+
 10751  0006F2  CFF5 F0B9          	movff	tablat,___llmod@divisor+2
 10752  0006F6  000A               	tblrd		*-
 10753  0006F8  CFF5 F0BA          	movff	tablat,___llmod@divisor+3
 10754  0006FC  ECA9  F01D         	call	___llmod	;wreg free
 10755  000700  C0B3  F0D4         	movff	?___llmod,sprintf@val
 10756  000704  C0B4  F0D5         	movff	?___llmod+1,sprintf@val+1
 10757  000708  C0B5  F0D6         	movff	?___llmod+2,sprintf@val+2
 10758  00070C  C0B6  F0D7         	movff	?___llmod+3,sprintf@val+3
 10759  000710                     l1719:
 10760  000710  0100               	movlb	0	; () banked
 10761  000712  07E1               	decf	sprintf@c& (0+255),f,b
 10762  000714  29E1               	incf	sprintf@c& (0+255),w,b
 10763  000716  B4D8               	btfsc	status,2,c
 10764  000718  D00C               	goto	l1722
 10765  00071A  D788               	goto	l1720
 10766  00071C                     
 10767                           ; BSR set to: 0
 10768                           ;doprnt.c: 1236: ((*sp++ = ('0')));
 10769                           
 10770                           ; BSR set to: 0
 10771  00071C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10772  000720  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10773  000724  0E30               	movlw	48
 10774  000726  6EDF               	movwf	indf2,c
 10775                           
 10776                           ; BSR set to: 0
 10777  000728  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10778  00072A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;doprnt.c: 1237: prec--;
 10782  00072C  07D2               	decf	sprintf@prec& (0+255),f,b
 10783  00072E  A0D8               	btfss	status,0,c
 10784  000730  07D3               	decf	(sprintf@prec+1)& (0+255),f,b
 10785  000732                     l1722:
 10786                           
 10787                           ; BSR set to: 0
 10788                           
 10789                           ; BSR set to: 0
 10790  000732  51D2               	movf	sprintf@prec& (0+255),w,b
 10791  000734  11D3               	iorwf	(sprintf@prec+1)& (0+255),w,b
 10792  000736  B4D8               	btfsc	status,2,c
 10793  000738  D0A1               	goto	u9540
 10794  00073A  D7F0               	goto	l1723
 10795  00073C                     l1688:
 10796                           
 10797                           ; BSR set to: 0
 10798                           ;doprnt.c: 1246: }
 10799                           ;doprnt.c: 1253: {
 10800                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 10801                           
 10802                           ; BSR set to: 0
 10803  00073C  C0CE  FFD9         	movff	sprintf@ap,fsr2l
 10804  000740  C0CF  FFDA         	movff	sprintf@ap+1,fsr2h
 10805  000744  CFDE F0D4          	movff	postinc2,sprintf@val
 10806  000748  CFDD F0D5          	movff	postdec2,sprintf@val+1
 10807  00074C  0E00               	movlw	0
 10808  00074E  BFD5               	btfsc	(sprintf@val+1)& (0+255),7,b
 10809  000750  0EFF               	movlw	-1
 10810  000752  6FD6               	movwf	(sprintf@val+2)& (0+255),b
 10811  000754  6FD7               	movwf	(sprintf@val+3)& (0+255),b
 10812                           
 10813                           ; BSR set to: 0
 10814  000756  0E02               	movlw	2
 10815  000758  27CE               	addwf	sprintf@ap& (0+255),f,b
 10816  00075A  0E00               	movlw	0
 10817  00075C  23CF               	addwfc	(sprintf@ap+1)& (0+255),f,b
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;doprnt.c: 1261: if((long)val < 0) {
 10821  00075E  AFD7               	btfss	(sprintf@val+3)& (0+255),7,b
 10822  000760  D00A               	goto	l1725
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;doprnt.c: 1262: flag |= 0x03;
 10826  000762  0E03               	movlw	3
 10827  000764  13D0               	iorwf	sprintf@flag& (0+255),f,b
 10828                           
 10829                           ; BSR set to: 0
 10830                           ;doprnt.c: 1263: val = -val;
 10831  000766  1FD7               	comf	(sprintf@val+3)& (0+255),f,b
 10832  000768  1FD6               	comf	(sprintf@val+2)& (0+255),f,b
 10833  00076A  1FD5               	comf	(sprintf@val+1)& (0+255),f,b
 10834  00076C  6DD4               	negf	sprintf@val& (0+255),b
 10835  00076E  0E00               	movlw	0
 10836  000770  23D5               	addwfc	(sprintf@val+1)& (0+255),f,b
 10837  000772  23D6               	addwfc	(sprintf@val+2)& (0+255),f,b
 10838  000774  23D7               	addwfc	(sprintf@val+3)& (0+255),f,b
 10839  000776                     l1725:
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;doprnt.c: 1264: }
 10843                           ;doprnt.c: 1266: }
 10844                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10845                           
 10846                           ; BSR set to: 0
 10847  000776  0E01               	movlw	1
 10848  000778  6FE1               	movwf	sprintf@c& (0+255),b
 10849  00077A                     l9201:
 10850                           
 10851                           ; BSR set to: 0
 10852  00077A  0E0A               	movlw	10
 10853  00077C  19E1               	xorwf	sprintf@c& (0+255),w,b
 10854  00077E  B4D8               	btfsc	status,2,c
 10855  000780  D018               	goto	u9520
 10856                           
 10857                           ; BSR set to: 0
 10858                           ;doprnt.c: 1306: if(val < dpowers[c])
 10859                           
 10860                           ; BSR set to: 0
 10861                           
 10862                           ; BSR set to: 0
 10863  000782  51E1               	movf	sprintf@c& (0+255),w,b
 10864  000784  0D04               	mullw	4
 10865  000786  0E3B               	movlw	low _dpowers
 10866  000788  24F3               	addwf	prodl,w,c
 10867  00078A  6EF6               	movwf	tblptrl,c
 10868  00078C  0E78               	movlw	high _dpowers
 10869  00078E  20F4               	addwfc	prodh,w,c
 10870  000790  6EF7               	movwf	tblptrh,c
 10871  000792                     	if	0	;There are less than 3 active tblptr bytes
 10872  000792                     	endif
 10873  000792  0009               	tblrd		*+
 10874  000794  50F5               	movf	tablat,w,c
 10875  000796  5DD4               	subwf	sprintf@val& (0+255),w,b
 10876  000798  0009               	tblrd		*+
 10877  00079A  50F5               	movf	tablat,w,c
 10878  00079C  59D5               	subwfb	(sprintf@val+1)& (0+255),w,b
 10879  00079E  0009               	tblrd		*+
 10880  0007A0  50F5               	movf	tablat,w,c
 10881  0007A2  59D6               	subwfb	(sprintf@val+2)& (0+255),w,b
 10882  0007A4  0009               	tblrd		*+
 10883  0007A6  50F5               	movf	tablat,w,c
 10884  0007A8  59D7               	subwfb	(sprintf@val+3)& (0+255),w,b
 10885  0007AA  A0D8               	btfss	status,0,c
 10886  0007AC  D002               	goto	u9520
 10887                           
 10888                           ; BSR set to: 0
 10889                           
 10890                           ; BSR set to: 0
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;doprnt.c: 1307: break;
 10894  0007AE  2BE1               	incf	sprintf@c& (0+255),f,b
 10895  0007B0  D7E4               	goto	l9201
 10896  0007B2                     u9520:
 10897                           
 10898                           ; BSR set to: 0
 10899                           ;doprnt.c: 1422: {
 10900                           ;doprnt.c: 1438: if(flag & 0x03)
 10901                           
 10902                           ; BSR set to: 0
 10903  0007B2  0E03               	movlw	3
 10904  0007B4  15D0               	andwf	sprintf@flag& (0+255),w,b
 10905  0007B6  6FC3               	movwf	??_sprintf& (0+255),b
 10906  0007B8  0E00               	movlw	0
 10907  0007BA  15D1               	andwf	(sprintf@flag+1)& (0+255),w,b
 10908  0007BC  6FC4               	movwf	(??_sprintf+1)& (0+255),b
 10909  0007BE  51C3               	movf	??_sprintf& (0+255),w,b
 10910  0007C0  11C4               	iorwf	(??_sprintf+1)& (0+255),w,b
 10911  0007C2  B4D8               	btfsc	status,2,c
 10912  0007C4  D008               	goto	l1729
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10916  0007C6  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10917  0007CA  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10918  0007CE  0E2D               	movlw	45
 10919  0007D0  6EDF               	movwf	indf2,c
 10920                           
 10921                           ; BSR set to: 0
 10922  0007D2  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10923  0007D4  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10924  0007D6                     l1729:
 10925                           
 10926                           ; BSR set to: 0
 10927                           ;doprnt.c: 1469: }
 10928                           ;doprnt.c: 1472: prec = c;
 10929                           
 10930                           ; BSR set to: 0
 10931  0007D6  51E1               	movf	sprintf@c& (0+255),w,b
 10932  0007D8  6FD2               	movwf	sprintf@prec& (0+255),b
 10933  0007DA  6BD3               	clrf	(sprintf@prec+1)& (0+255),b
 10934  0007DC  BFD2               	btfsc	sprintf@prec& (0+255),7,b
 10935  0007DE  07D3               	decf	(sprintf@prec+1)& (0+255),f,b
 10936                           
 10937                           ;doprnt.c: 1474: while(prec--) {
 10938  0007E0  D045               	goto	l1730
 10939  0007E2                     l9221:
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;doprnt.c: 1478: {
 10943                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10944  0007E2  C0D2  F0C3         	movff	sprintf@prec,??_sprintf
 10945  0007E6  C0D3  F0C4         	movff	sprintf@prec+1,??_sprintf+1
 10946  0007EA  90D8               	bcf	status,0,c
 10947  0007EC  37C3               	rlcf	??_sprintf& (0+255),f,b
 10948  0007EE  37C4               	rlcf	(??_sprintf+1)& (0+255),f,b
 10949  0007F0  90D8               	bcf	status,0,c
 10950  0007F2  37C3               	rlcf	??_sprintf& (0+255),f,b
 10951  0007F4  37C4               	rlcf	(??_sprintf+1)& (0+255),f,b
 10952  0007F6  0E3B               	movlw	low _dpowers
 10953  0007F8  25C3               	addwf	??_sprintf& (0+255),w,b
 10954  0007FA  6EF6               	movwf	tblptrl,c
 10955  0007FC  0E78               	movlw	high _dpowers
 10956  0007FE  21C4               	addwfc	(??_sprintf+1)& (0+255),w,b
 10957  000800  6EF7               	movwf	tblptrh,c
 10958  000802                     	if	0	;There are less than 3 active tblptr bytes
 10959  000802                     	endif
 10960  000802  0009               	tblrd		*+
 10961  000804  CFF5 F01C          	movff	tablat,___lldiv@divisor
 10962  000808  0009               	tblrd		*+
 10963  00080A  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 10964  00080E  0009               	tblrd		*+
 10965  000810  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 10966  000814  000A               	tblrd		*-
 10967  000816  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 10968  00081A  C0D4  F018         	movff	sprintf@val,___lldiv@dividend
 10969  00081E  C0D5  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 10970  000822  C0D6  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 10971  000826  C0D7  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 10972  00082A  EC48  F01C         	call	___lldiv	;wreg free
 10973  00082E  C018  F0B3         	movff	?___lldiv,___llmod@dividend
 10974  000832  C019  F0B4         	movff	?___lldiv+1,___llmod@dividend+1
 10975  000836  C01A  F0B5         	movff	?___lldiv+2,___llmod@dividend+2
 10976  00083A  C01B  F0B6         	movff	?___lldiv+3,___llmod@dividend+3
 10977  00083E  0E0A               	movlw	10
 10978  000840  0100               	movlb	0	; () banked
 10979  000842  6FB7               	movwf	___llmod@divisor& (0+255),b
 10980  000844  0E00               	movlw	0
 10981  000846  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 10982  000848  0E00               	movlw	0
 10983  00084A  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 10984  00084C  0E00               	movlw	0
 10985  00084E  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 10986  000850  ECA9  F01D         	call	___llmod	;wreg free
 10987  000854  0100               	movlb	0	; () banked
 10988  000856  51B3               	movf	?___llmod& (0+255),w,b
 10989  000858  0F30               	addlw	48
 10990  00085A  6FE1               	movwf	sprintf@c& (0+255),b
 10991                           
 10992                           ; BSR set to: 0
 10993                           ;doprnt.c: 1523: }
 10994                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10995  00085C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10996  000860  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10997  000864  C0E1  FFDF         	movff	sprintf@c,indf2
 10998                           
 10999                           ; BSR set to: 0
 11000  000868  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11001  00086A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11002  00086C                     l1730:
 11003                           
 11004                           ; BSR set to: 0
 11005                           
 11006                           ; BSR set to: 0
 11007  00086C  07D2               	decf	sprintf@prec& (0+255),f,b
 11008  00086E  A0D8               	btfss	status,0,c
 11009  000870  07D3               	decf	(sprintf@prec+1)& (0+255),f,b
 11010  000872  29D2               	incf	sprintf@prec& (0+255),w,b
 11011  000874  E1B6               	bnz	l9221
 11012  000876  29D3               	incf	(sprintf@prec+1)& (0+255),w,b
 11013  000878  A4D8               	btfss	status,2,c
 11014  00087A  D7B3               	goto	l1731
 11015  00087C                     u9540:
 11016                           
 11017                           ; BSR set to: 0
 11018                           
 11019                           ; BSR set to: 0
 11020                           
 11021                           ; BSR set to: 0
 11022  00087C  C0BE  FFF6         	movff	sprintf@f,tblptrl
 11023  000880  C0BF  FFF7         	movff	sprintf@f+1,tblptrh
 11024  000884  4BBE               	infsnz	sprintf@f& (0+255),f,b
 11025  000886  2BBF               	incf	(sprintf@f+1)& (0+255),f,b
 11026  000888                     	if	0	;tblptru may be non-zero
 11027  000888                     	endif
 11028  000888                     	if	0	;tblptru may be non-zero
 11029  000888                     	endif
 11030  000888  0008               	tblrd		*
 11031  00088A  CFF5 F0E1          	movff	tablat,sprintf@c
 11032  00088E  51E1               	movf	sprintf@c& (0+255),w,b
 11033  000890  A4D8               	btfss	status,2,c
 11034  000892  D42C               	goto	l1673
 11035  000894                     u9550:
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;doprnt.c: 1538: *sp = 0;
 11039                           
 11040                           ; BSR set to: 0
 11041                           
 11042                           ;doprnt.c: 1525: }
 11043                           ;doprnt.c: 1533: }
 11044                           ;doprnt.c: 1535: alldone:
 11045                           
 11046                           ; BSR set to: 0
 11047  000894  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11048  000898  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11049  00089C  0E00               	movlw	0
 11050  00089E  6EDF               	movwf	indf2,c
 11051  0008A0  0012               	return	
 11052  0008A2                     __end_of_sprintf:
 11053                           	opt stack 0
 11054                           tosu	equ	0xFFF
 11055                           tosh	equ	0xFFE
 11056                           tosl	equ	0xFFD
 11057                           pclath	equ	0xFFA
 11058                           tblptru	equ	0xFF8
 11059                           tblptrh	equ	0xFF7
 11060                           tblptrl	equ	0xFF6
 11061                           tablat	equ	0xFF5
 11062                           prodh	equ	0xFF4
 11063                           prodl	equ	0xFF3
 11064                           intcon	equ	0xFF2
 11065                           intcon2	equ	0xFF1
 11066                           postinc0	equ	0xFEE
 11067                           wreg	equ	0xFE8
 11068                           indf1	equ	0xFE7
 11069                           postdec1	equ	0xFE5
 11070                           fsr1h	equ	0xFE2
 11071                           fsr1l	equ	0xFE1
 11072                           indf2	equ	0xFDF
 11073                           postinc2	equ	0xFDE
 11074                           postdec2	equ	0xFDD
 11075                           fsr2h	equ	0xFDA
 11076                           fsr2l	equ	0xFD9
 11077                           status	equ	0xFD8
 11078                           
 11079 ;; *************** function _scale *****************
 11080 ;; Defined at:
 11081 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 11082 ;; Parameters:    Size  Location     Type
 11083 ;;  scl             1    wreg     char 
 11084 ;; Auto vars:     Size  Location     Type
 11085 ;;  scl             1   24[BANK0 ] char 
 11086 ;; Return value:  Size  Location     Type
 11087 ;;                  3   18[BANK0 ] char 
 11088 ;; Registers used:
 11089 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11090 ;; Tracked objects:
 11091 ;;		On entry : 0/0
 11092 ;;		On exit  : 0/0
 11093 ;;		Unchanged: 0/0
 11094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11095 ;;      Params:         0       3       0       0       0       0       0
 11096 ;;      Locals:         0       4       0       0       0       0       0
 11097 ;;      Temps:          0       0       0       0       0       0       0
 11098 ;;      Totals:         0       7       0       0       0       0       0
 11099 ;;Total ram usage:        7 bytes
 11100 ;; Hardware stack levels used:    1
 11101 ;; Hardware stack levels required when called:    5
 11102 ;; This function calls:
 11103 ;;		___awdiv
 11104 ;;		___awmod
 11105 ;;		___ftmul
 11106 ;;		___wmul
 11107 ;; This function is called by:
 11108 ;;		_sprintf
 11109 ;; This function uses a non-reentrant model
 11110 ;;
 11111                           
 11112                           	psect	text35
 11113  0008A2                     __ptext35:
 11114                           	opt stack 0
 11115  0008A2                     _scale:
 11116                           	opt stack 23
 11117                           
 11118                           ; BSR set to: 0
 11119                           ;incstack = 0
 11120                           ;scale@scl stored from wreg
 11121  0008A2  0100               	movlb	0	; () banked
 11122  0008A4  6F78               	movwf	scale@scl& (0+255),b
 11123                           
 11124                           ;doprnt.c: 428: if(scl < 0) {
 11125  0008A6  0100               	movlb	0	; () banked
 11126  0008A8  AF78               	btfss	scale@scl& (0+255),7,b
 11127  0008AA  D106               	goto	l1662
 11128                           
 11129                           ; BSR set to: 0
 11130                           ;doprnt.c: 429: scl = -scl;
 11131  0008AC  6D78               	negf	scale@scl& (0+255),b
 11132                           
 11133                           ;doprnt.c: 430: if(scl>=110)
 11134  0008AE  5178               	movf	scale@scl& (0+255),w,b
 11135  0008B0  0A80               	xorlw	128
 11136  0008B2  0F12               	addlw	-238
 11137  0008B4  A0D8               	btfss	status,0,c
 11138  0008B6  D093               	goto	l1663
 11139                           
 11140                           ; BSR set to: 0
 11141                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 11142  0008B8  0E00               	movlw	0
 11143  0008BA  6E29               	movwf	___wmul@multiplicand+1,c
 11144  0008BC  0E03               	movlw	3
 11145  0008BE  6E28               	movwf	___wmul@multiplicand,c
 11146  0008C0  0E00               	movlw	0
 11147  0008C2  6E21               	movwf	___awdiv@divisor+1,c
 11148  0008C4  0E0A               	movlw	10
 11149  0008C6  6E20               	movwf	___awdiv@divisor,c
 11150  0008C8  0E00               	movlw	0
 11151  0008CA  6E1B               	movwf	___awmod@divisor+1,c
 11152  0008CC  0E64               	movlw	100
 11153  0008CE  6E1A               	movwf	___awmod@divisor,c
 11154  0008D0  5178               	movf	scale@scl& (0+255),w,b
 11155  0008D2  6E18               	movwf	___awmod@dividend,c
 11156  0008D4  6A19               	clrf	___awmod@dividend+1,c
 11157  0008D6  BE18               	btfsc	___awmod@dividend,7,c
 11158  0008D8  0619               	decf	___awmod@dividend+1,f,c
 11159  0008DA  EC3A  F01D         	call	___awmod	;wreg free
 11160  0008DE  C018  F01E         	movff	?___awmod,___awdiv@dividend
 11161  0008E2  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 11162  0008E6  EC06  F01C         	call	___awdiv	;wreg free
 11163  0008EA  0E09               	movlw	9
 11164  0008EC  241E               	addwf	?___awdiv,w,c
 11165  0008EE  6E26               	movwf	___wmul@multiplier,c
 11166  0008F0  0E00               	movlw	0
 11167  0008F2  201F               	addwfc	?___awdiv+1,w,c
 11168  0008F4  6E27               	movwf	___wmul@multiplier+1,c
 11169  0008F6  ECDA  F021         	call	___wmul	;wreg free
 11170  0008FA  0E8A               	movlw	low __npowers_
 11171  0008FC  2426               	addwf	?___wmul,w,c
 11172  0008FE  6EF6               	movwf	tblptrl,c
 11173  000900  0E78               	movlw	high __npowers_
 11174  000902  2027               	addwfc	?___wmul+1,w,c
 11175  000904  6EF7               	movwf	tblptrh,c
 11176  000906                     	if	0	;There are less than 3 active tblptr bytes
 11177  000906                     	endif
 11178  000906  0009               	tblrd		*+
 11179  000908  CFF5 F069          	movff	tablat,___ftmul@f2
 11180  00090C  0009               	tblrd		*+
 11181  00090E  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11182  000912  000A               	tblrd		*-
 11183  000914  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11184  000918  0E00               	movlw	0
 11185  00091A  6E21               	movwf	___awdiv@divisor+1,c
 11186  00091C  0E64               	movlw	100
 11187  00091E  6E20               	movwf	___awdiv@divisor,c
 11188  000920  0100               	movlb	0	; () banked
 11189  000922  5178               	movf	scale@scl& (0+255),w,b
 11190  000924  6E1E               	movwf	___awdiv@dividend,c
 11191  000926  6A1F               	clrf	___awdiv@dividend+1,c
 11192  000928  BE1E               	btfsc	___awdiv@dividend,7,c
 11193  00092A  061F               	decf	___awdiv@dividend+1,f,c
 11194  00092C  EC06  F01C         	call	___awdiv	;wreg free
 11195  000930  0E12               	movlw	18
 11196  000932  241E               	addwf	?___awdiv,w,c
 11197  000934  6E26               	movwf	___wmul@multiplier,c
 11198  000936  0E00               	movlw	0
 11199  000938  201F               	addwfc	?___awdiv+1,w,c
 11200  00093A  6E27               	movwf	___wmul@multiplier+1,c
 11201  00093C  0E00               	movlw	0
 11202  00093E  6E29               	movwf	___wmul@multiplicand+1,c
 11203  000940  0E03               	movlw	3
 11204  000942  6E28               	movwf	___wmul@multiplicand,c
 11205  000944  ECDA  F021         	call	___wmul	;wreg free
 11206  000948  0E8A               	movlw	low __npowers_
 11207  00094A  2426               	addwf	?___wmul,w,c
 11208  00094C  6EF6               	movwf	tblptrl,c
 11209  00094E  0E78               	movlw	high __npowers_
 11210  000950  2027               	addwfc	?___wmul+1,w,c
 11211  000952  6EF7               	movwf	tblptrh,c
 11212  000954                     	if	0	;There are less than 3 active tblptr bytes
 11213  000954                     	endif
 11214  000954  0009               	tblrd		*+
 11215  000956  CFF5 F066          	movff	tablat,___ftmul@f1
 11216  00095A  0009               	tblrd		*+
 11217  00095C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11218  000960  000A               	tblrd		*-
 11219  000962  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11220  000966  EC6D  F016         	call	___ftmul	;wreg free
 11221  00096A  C066  F075         	movff	?___ftmul,_scale$3954
 11222  00096E  C067  F076         	movff	?___ftmul+1,_scale$3954+1
 11223  000972  C068  F077         	movff	?___ftmul+2,_scale$3954+2
 11224                           
 11225                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 11226  000976  C075  F066         	movff	_scale$3954,___ftmul@f1
 11227  00097A  C076  F067         	movff	_scale$3954+1,___ftmul@f1+1
 11228  00097E  C077  F068         	movff	_scale$3954+2,___ftmul@f1+2
 11229  000982  0E00               	movlw	0
 11230  000984  6E29               	movwf	___wmul@multiplicand+1,c
 11231  000986  0E03               	movlw	3
 11232  000988  6E28               	movwf	___wmul@multiplicand,c
 11233  00098A  0E00               	movlw	0
 11234  00098C  6E1B               	movwf	___awmod@divisor+1,c
 11235  00098E  0E0A               	movlw	10
 11236  000990  6E1A               	movwf	___awmod@divisor,c
 11237  000992  0100               	movlb	0	; () banked
 11238  000994  5178               	movf	scale@scl& (0+255),w,b
 11239  000996  6E18               	movwf	___awmod@dividend,c
 11240  000998  6A19               	clrf	___awmod@dividend+1,c
 11241  00099A  BE18               	btfsc	___awmod@dividend,7,c
 11242  00099C  0619               	decf	___awmod@dividend+1,f,c
 11243  00099E  EC3A  F01D         	call	___awmod	;wreg free
 11244  0009A2  C018  F026         	movff	?___awmod,___wmul@multiplier
 11245  0009A6  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11246  0009AA  ECDA  F021         	call	___wmul	;wreg free
 11247  0009AE  0E8A               	movlw	low __npowers_
 11248  0009B0  2426               	addwf	?___wmul,w,c
 11249  0009B2  6EF6               	movwf	tblptrl,c
 11250  0009B4  0E78               	movlw	high __npowers_
 11251  0009B6  2027               	addwfc	?___wmul+1,w,c
 11252  0009B8  6EF7               	movwf	tblptrh,c
 11253  0009BA                     	if	0	;There are less than 3 active tblptr bytes
 11254  0009BA                     	endif
 11255  0009BA  0009               	tblrd		*+
 11256  0009BC  CFF5 F069          	movff	tablat,___ftmul@f2
 11257  0009C0  0009               	tblrd		*+
 11258  0009C2  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11259  0009C6  000A               	tblrd		*-
 11260  0009C8  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11261  0009CC  EC6D  F016         	call	___ftmul	;wreg free
 11262  0009D0  C066  F072         	movff	?___ftmul,?_scale
 11263  0009D4  C067  F073         	movff	?___ftmul+1,?_scale+1
 11264  0009D8  C068  F074         	movff	?___ftmul+2,?_scale+2
 11265  0009DC  0012               	return	
 11266  0009DE                     l1663:
 11267                           
 11268                           ;doprnt.c: 432: else if(scl > 10)
 11269  0009DE  0100               	movlb	0	; () banked
 11270  0009E0  5178               	movf	scale@scl& (0+255),w,b
 11271  0009E2  0A80               	xorlw	128
 11272  0009E4  0F75               	addlw	-139
 11273  0009E6  A0D8               	btfss	status,0,c
 11274  0009E8  D054               	goto	l1666
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 11278  0009EA  0E00               	movlw	0
 11279  0009EC  6E21               	movwf	___awdiv@divisor+1,c
 11280  0009EE  0E0A               	movlw	10
 11281  0009F0  6E20               	movwf	___awdiv@divisor,c
 11282  0009F2  5178               	movf	scale@scl& (0+255),w,b
 11283  0009F4  6E1E               	movwf	___awdiv@dividend,c
 11284  0009F6  6A1F               	clrf	___awdiv@dividend+1,c
 11285  0009F8  BE1E               	btfsc	___awdiv@dividend,7,c
 11286  0009FA  061F               	decf	___awdiv@dividend+1,f,c
 11287  0009FC  EC06  F01C         	call	___awdiv	;wreg free
 11288  000A00  0E09               	movlw	9
 11289  000A02  241E               	addwf	?___awdiv,w,c
 11290  000A04  6E26               	movwf	___wmul@multiplier,c
 11291  000A06  0E00               	movlw	0
 11292  000A08  201F               	addwfc	?___awdiv+1,w,c
 11293  000A0A  6E27               	movwf	___wmul@multiplier+1,c
 11294  000A0C  0E00               	movlw	0
 11295  000A0E  6E29               	movwf	___wmul@multiplicand+1,c
 11296  000A10  0E03               	movlw	3
 11297  000A12  6E28               	movwf	___wmul@multiplicand,c
 11298  000A14  ECDA  F021         	call	___wmul	;wreg free
 11299  000A18  0E8A               	movlw	low __npowers_
 11300  000A1A  2426               	addwf	?___wmul,w,c
 11301  000A1C  6EF6               	movwf	tblptrl,c
 11302  000A1E  0E78               	movlw	high __npowers_
 11303  000A20  2027               	addwfc	?___wmul+1,w,c
 11304  000A22  6EF7               	movwf	tblptrh,c
 11305  000A24                     	if	0	;There are less than 3 active tblptr bytes
 11306  000A24                     	endif
 11307  000A24  0009               	tblrd		*+
 11308  000A26  CFF5 F066          	movff	tablat,___ftmul@f1
 11309  000A2A  0009               	tblrd		*+
 11310  000A2C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11311  000A30  000A               	tblrd		*-
 11312  000A32  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11313  000A36  0E00               	movlw	0
 11314  000A38  6E29               	movwf	___wmul@multiplicand+1,c
 11315  000A3A  0E03               	movlw	3
 11316  000A3C  6E28               	movwf	___wmul@multiplicand,c
 11317  000A3E  0E00               	movlw	0
 11318  000A40  6E1B               	movwf	___awmod@divisor+1,c
 11319  000A42  0E0A               	movlw	10
 11320  000A44  6E1A               	movwf	___awmod@divisor,c
 11321  000A46  0100               	movlb	0	; () banked
 11322  000A48  5178               	movf	scale@scl& (0+255),w,b
 11323  000A4A  6E18               	movwf	___awmod@dividend,c
 11324  000A4C  6A19               	clrf	___awmod@dividend+1,c
 11325  000A4E  BE18               	btfsc	___awmod@dividend,7,c
 11326  000A50  0619               	decf	___awmod@dividend+1,f,c
 11327  000A52  EC3A  F01D         	call	___awmod	;wreg free
 11328  000A56  C018  F026         	movff	?___awmod,___wmul@multiplier
 11329  000A5A  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11330  000A5E  ECDA  F021         	call	___wmul	;wreg free
 11331  000A62  0E8A               	movlw	low __npowers_
 11332  000A64  2426               	addwf	?___wmul,w,c
 11333  000A66  6EF6               	movwf	tblptrl,c
 11334  000A68  0E78               	movlw	high __npowers_
 11335  000A6A  2027               	addwfc	?___wmul+1,w,c
 11336  000A6C  6EF7               	movwf	tblptrh,c
 11337  000A6E                     	if	0	;There are less than 3 active tblptr bytes
 11338  000A6E                     	endif
 11339  000A6E  0009               	tblrd		*+
 11340  000A70  CFF5 F069          	movff	tablat,___ftmul@f2
 11341  000A74  0009               	tblrd		*+
 11342  000A76  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11343  000A7A  000A               	tblrd		*-
 11344  000A7C  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11345  000A80  EC6D  F016         	call	___ftmul	;wreg free
 11346  000A84  C066  F072         	movff	?___ftmul,?_scale
 11347  000A88  C067  F073         	movff	?___ftmul+1,?_scale+1
 11348  000A8C  C068  F074         	movff	?___ftmul+2,?_scale+2
 11349  000A90  0012               	return	
 11350  000A92                     l1666:
 11351                           
 11352                           ;doprnt.c: 434: return _npowers_[scl];
 11353  000A92  0100               	movlb	0	; () banked
 11354  000A94  5178               	movf	scale@scl& (0+255),w,b
 11355  000A96  0D03               	mullw	3
 11356  000A98  0E8A               	movlw	low __npowers_
 11357  000A9A  24F3               	addwf	prodl,w,c
 11358  000A9C  6EF6               	movwf	tblptrl,c
 11359  000A9E  0E78               	movlw	high __npowers_
 11360  000AA0  20F4               	addwfc	prodh,w,c
 11361  000AA2  6EF7               	movwf	tblptrh,c
 11362  000AA4                     	if	0	;There are less than 3 active tblptr bytes
 11363  000AA4                     	endif
 11364  000AA4  0009               	tblrd		*+
 11365  000AA6  CFF5 F072          	movff	tablat,?_scale
 11366  000AAA  0009               	tblrd		*+
 11367  000AAC  CFF5 F073          	movff	tablat,?_scale+1
 11368  000AB0  000A               	tblrd		*-
 11369  000AB2  CFF5 F074          	movff	tablat,?_scale+2
 11370                           
 11371                           ; BSR set to: 0
 11372  000AB6  0012               	return	
 11373  000AB8                     l1662:
 11374                           
 11375                           ; BSR set to: 0
 11376                           ;doprnt.c: 435: }
 11377                           ;doprnt.c: 436: if(scl>=110)
 11378                           
 11379                           ; BSR set to: 0
 11380  000AB8  5178               	movf	scale@scl& (0+255),w,b
 11381  000ABA  0A80               	xorlw	128
 11382  000ABC  0F12               	addlw	-238
 11383  000ABE  A0D8               	btfss	status,0,c
 11384  000AC0  D093               	goto	l1667
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 11388  000AC2  0E00               	movlw	0
 11389  000AC4  6E29               	movwf	___wmul@multiplicand+1,c
 11390  000AC6  0E03               	movlw	3
 11391  000AC8  6E28               	movwf	___wmul@multiplicand,c
 11392  000ACA  0E00               	movlw	0
 11393  000ACC  6E21               	movwf	___awdiv@divisor+1,c
 11394  000ACE  0E0A               	movlw	10
 11395  000AD0  6E20               	movwf	___awdiv@divisor,c
 11396  000AD2  0E00               	movlw	0
 11397  000AD4  6E1B               	movwf	___awmod@divisor+1,c
 11398  000AD6  0E64               	movlw	100
 11399  000AD8  6E1A               	movwf	___awmod@divisor,c
 11400  000ADA  5178               	movf	scale@scl& (0+255),w,b
 11401  000ADC  6E18               	movwf	___awmod@dividend,c
 11402  000ADE  6A19               	clrf	___awmod@dividend+1,c
 11403  000AE0  BE18               	btfsc	___awmod@dividend,7,c
 11404  000AE2  0619               	decf	___awmod@dividend+1,f,c
 11405  000AE4  EC3A  F01D         	call	___awmod	;wreg free
 11406  000AE8  C018  F01E         	movff	?___awmod,___awdiv@dividend
 11407  000AEC  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 11408  000AF0  EC06  F01C         	call	___awdiv	;wreg free
 11409  000AF4  0E09               	movlw	9
 11410  000AF6  241E               	addwf	?___awdiv,w,c
 11411  000AF8  6E26               	movwf	___wmul@multiplier,c
 11412  000AFA  0E00               	movlw	0
 11413  000AFC  201F               	addwfc	?___awdiv+1,w,c
 11414  000AFE  6E27               	movwf	___wmul@multiplier+1,c
 11415  000B00  ECDA  F021         	call	___wmul	;wreg free
 11416  000B04  0E63               	movlw	low __powers_
 11417  000B06  2426               	addwf	?___wmul,w,c
 11418  000B08  6EF6               	movwf	tblptrl,c
 11419  000B0A  0E78               	movlw	high __powers_
 11420  000B0C  2027               	addwfc	?___wmul+1,w,c
 11421  000B0E  6EF7               	movwf	tblptrh,c
 11422  000B10                     	if	0	;There are less than 3 active tblptr bytes
 11423  000B10                     	endif
 11424  000B10  0009               	tblrd		*+
 11425  000B12  CFF5 F069          	movff	tablat,___ftmul@f2
 11426  000B16  0009               	tblrd		*+
 11427  000B18  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11428  000B1C  000A               	tblrd		*-
 11429  000B1E  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11430  000B22  0E00               	movlw	0
 11431  000B24  6E21               	movwf	___awdiv@divisor+1,c
 11432  000B26  0E64               	movlw	100
 11433  000B28  6E20               	movwf	___awdiv@divisor,c
 11434  000B2A  0100               	movlb	0	; () banked
 11435  000B2C  5178               	movf	scale@scl& (0+255),w,b
 11436  000B2E  6E1E               	movwf	___awdiv@dividend,c
 11437  000B30  6A1F               	clrf	___awdiv@dividend+1,c
 11438  000B32  BE1E               	btfsc	___awdiv@dividend,7,c
 11439  000B34  061F               	decf	___awdiv@dividend+1,f,c
 11440  000B36  EC06  F01C         	call	___awdiv	;wreg free
 11441  000B3A  0E12               	movlw	18
 11442  000B3C  241E               	addwf	?___awdiv,w,c
 11443  000B3E  6E26               	movwf	___wmul@multiplier,c
 11444  000B40  0E00               	movlw	0
 11445  000B42  201F               	addwfc	?___awdiv+1,w,c
 11446  000B44  6E27               	movwf	___wmul@multiplier+1,c
 11447  000B46  0E00               	movlw	0
 11448  000B48  6E29               	movwf	___wmul@multiplicand+1,c
 11449  000B4A  0E03               	movlw	3
 11450  000B4C  6E28               	movwf	___wmul@multiplicand,c
 11451  000B4E  ECDA  F021         	call	___wmul	;wreg free
 11452  000B52  0E63               	movlw	low __powers_
 11453  000B54  2426               	addwf	?___wmul,w,c
 11454  000B56  6EF6               	movwf	tblptrl,c
 11455  000B58  0E78               	movlw	high __powers_
 11456  000B5A  2027               	addwfc	?___wmul+1,w,c
 11457  000B5C  6EF7               	movwf	tblptrh,c
 11458  000B5E                     	if	0	;There are less than 3 active tblptr bytes
 11459  000B5E                     	endif
 11460  000B5E  0009               	tblrd		*+
 11461  000B60  CFF5 F066          	movff	tablat,___ftmul@f1
 11462  000B64  0009               	tblrd		*+
 11463  000B66  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11464  000B6A  000A               	tblrd		*-
 11465  000B6C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11466  000B70  EC6D  F016         	call	___ftmul	;wreg free
 11467  000B74  C066  F075         	movff	?___ftmul,_scale$3954
 11468  000B78  C067  F076         	movff	?___ftmul+1,_scale$3954+1
 11469  000B7C  C068  F077         	movff	?___ftmul+2,_scale$3954+2
 11470                           
 11471                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 11472  000B80  C075  F066         	movff	_scale$3954,___ftmul@f1
 11473  000B84  C076  F067         	movff	_scale$3954+1,___ftmul@f1+1
 11474  000B88  C077  F068         	movff	_scale$3954+2,___ftmul@f1+2
 11475  000B8C  0E00               	movlw	0
 11476  000B8E  6E29               	movwf	___wmul@multiplicand+1,c
 11477  000B90  0E03               	movlw	3
 11478  000B92  6E28               	movwf	___wmul@multiplicand,c
 11479  000B94  0E00               	movlw	0
 11480  000B96  6E1B               	movwf	___awmod@divisor+1,c
 11481  000B98  0E0A               	movlw	10
 11482  000B9A  6E1A               	movwf	___awmod@divisor,c
 11483  000B9C  0100               	movlb	0	; () banked
 11484  000B9E  5178               	movf	scale@scl& (0+255),w,b
 11485  000BA0  6E18               	movwf	___awmod@dividend,c
 11486  000BA2  6A19               	clrf	___awmod@dividend+1,c
 11487  000BA4  BE18               	btfsc	___awmod@dividend,7,c
 11488  000BA6  0619               	decf	___awmod@dividend+1,f,c
 11489  000BA8  EC3A  F01D         	call	___awmod	;wreg free
 11490  000BAC  C018  F026         	movff	?___awmod,___wmul@multiplier
 11491  000BB0  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11492  000BB4  ECDA  F021         	call	___wmul	;wreg free
 11493  000BB8  0E63               	movlw	low __powers_
 11494  000BBA  2426               	addwf	?___wmul,w,c
 11495  000BBC  6EF6               	movwf	tblptrl,c
 11496  000BBE  0E78               	movlw	high __powers_
 11497  000BC0  2027               	addwfc	?___wmul+1,w,c
 11498  000BC2  6EF7               	movwf	tblptrh,c
 11499  000BC4                     	if	0	;There are less than 3 active tblptr bytes
 11500  000BC4                     	endif
 11501  000BC4  0009               	tblrd		*+
 11502  000BC6  CFF5 F069          	movff	tablat,___ftmul@f2
 11503  000BCA  0009               	tblrd		*+
 11504  000BCC  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11505  000BD0  000A               	tblrd		*-
 11506  000BD2  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11507  000BD6  EC6D  F016         	call	___ftmul	;wreg free
 11508  000BDA  C066  F072         	movff	?___ftmul,?_scale
 11509  000BDE  C067  F073         	movff	?___ftmul+1,?_scale+1
 11510  000BE2  C068  F074         	movff	?___ftmul+2,?_scale+2
 11511  000BE6  0012               	return	
 11512  000BE8                     l1667:
 11513                           
 11514                           ;doprnt.c: 438: else if(scl > 10)
 11515  000BE8  0100               	movlb	0	; () banked
 11516  000BEA  5178               	movf	scale@scl& (0+255),w,b
 11517  000BEC  0A80               	xorlw	128
 11518  000BEE  0F75               	addlw	-139
 11519  000BF0  A0D8               	btfss	status,0,c
 11520  000BF2  D054               	goto	l1669
 11521                           
 11522                           ; BSR set to: 0
 11523                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 11524  000BF4  0E00               	movlw	0
 11525  000BF6  6E21               	movwf	___awdiv@divisor+1,c
 11526  000BF8  0E0A               	movlw	10
 11527  000BFA  6E20               	movwf	___awdiv@divisor,c
 11528  000BFC  5178               	movf	scale@scl& (0+255),w,b
 11529  000BFE  6E1E               	movwf	___awdiv@dividend,c
 11530  000C00  6A1F               	clrf	___awdiv@dividend+1,c
 11531  000C02  BE1E               	btfsc	___awdiv@dividend,7,c
 11532  000C04  061F               	decf	___awdiv@dividend+1,f,c
 11533  000C06  EC06  F01C         	call	___awdiv	;wreg free
 11534  000C0A  0E09               	movlw	9
 11535  000C0C  241E               	addwf	?___awdiv,w,c
 11536  000C0E  6E26               	movwf	___wmul@multiplier,c
 11537  000C10  0E00               	movlw	0
 11538  000C12  201F               	addwfc	?___awdiv+1,w,c
 11539  000C14  6E27               	movwf	___wmul@multiplier+1,c
 11540  000C16  0E00               	movlw	0
 11541  000C18  6E29               	movwf	___wmul@multiplicand+1,c
 11542  000C1A  0E03               	movlw	3
 11543  000C1C  6E28               	movwf	___wmul@multiplicand,c
 11544  000C1E  ECDA  F021         	call	___wmul	;wreg free
 11545  000C22  0E63               	movlw	low __powers_
 11546  000C24  2426               	addwf	?___wmul,w,c
 11547  000C26  6EF6               	movwf	tblptrl,c
 11548  000C28  0E78               	movlw	high __powers_
 11549  000C2A  2027               	addwfc	?___wmul+1,w,c
 11550  000C2C  6EF7               	movwf	tblptrh,c
 11551  000C2E                     	if	0	;There are less than 3 active tblptr bytes
 11552  000C2E                     	endif
 11553  000C2E  0009               	tblrd		*+
 11554  000C30  CFF5 F066          	movff	tablat,___ftmul@f1
 11555  000C34  0009               	tblrd		*+
 11556  000C36  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11557  000C3A  000A               	tblrd		*-
 11558  000C3C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11559  000C40  0E00               	movlw	0
 11560  000C42  6E29               	movwf	___wmul@multiplicand+1,c
 11561  000C44  0E03               	movlw	3
 11562  000C46  6E28               	movwf	___wmul@multiplicand,c
 11563  000C48  0E00               	movlw	0
 11564  000C4A  6E1B               	movwf	___awmod@divisor+1,c
 11565  000C4C  0E0A               	movlw	10
 11566  000C4E  6E1A               	movwf	___awmod@divisor,c
 11567  000C50  0100               	movlb	0	; () banked
 11568  000C52  5178               	movf	scale@scl& (0+255),w,b
 11569  000C54  6E18               	movwf	___awmod@dividend,c
 11570  000C56  6A19               	clrf	___awmod@dividend+1,c
 11571  000C58  BE18               	btfsc	___awmod@dividend,7,c
 11572  000C5A  0619               	decf	___awmod@dividend+1,f,c
 11573  000C5C  EC3A  F01D         	call	___awmod	;wreg free
 11574  000C60  C018  F026         	movff	?___awmod,___wmul@multiplier
 11575  000C64  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11576  000C68  ECDA  F021         	call	___wmul	;wreg free
 11577  000C6C  0E63               	movlw	low __powers_
 11578  000C6E  2426               	addwf	?___wmul,w,c
 11579  000C70  6EF6               	movwf	tblptrl,c
 11580  000C72  0E78               	movlw	high __powers_
 11581  000C74  2027               	addwfc	?___wmul+1,w,c
 11582  000C76  6EF7               	movwf	tblptrh,c
 11583  000C78                     	if	0	;There are less than 3 active tblptr bytes
 11584  000C78                     	endif
 11585  000C78  0009               	tblrd		*+
 11586  000C7A  CFF5 F069          	movff	tablat,___ftmul@f2
 11587  000C7E  0009               	tblrd		*+
 11588  000C80  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11589  000C84  000A               	tblrd		*-
 11590  000C86  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11591  000C8A  EC6D  F016         	call	___ftmul	;wreg free
 11592  000C8E  C066  F072         	movff	?___ftmul,?_scale
 11593  000C92  C067  F073         	movff	?___ftmul+1,?_scale+1
 11594  000C96  C068  F074         	movff	?___ftmul+2,?_scale+2
 11595  000C9A  0012               	return	
 11596  000C9C                     l1669:
 11597                           
 11598                           ;doprnt.c: 440: return _powers_[scl];
 11599  000C9C  0100               	movlb	0	; () banked
 11600  000C9E  5178               	movf	scale@scl& (0+255),w,b
 11601  000CA0  0D03               	mullw	3
 11602  000CA2  0E63               	movlw	low __powers_
 11603  000CA4  24F3               	addwf	prodl,w,c
 11604  000CA6  6EF6               	movwf	tblptrl,c
 11605  000CA8  0E78               	movlw	high __powers_
 11606  000CAA  20F4               	addwfc	prodh,w,c
 11607  000CAC  6EF7               	movwf	tblptrh,c
 11608  000CAE                     	if	0	;There are less than 3 active tblptr bytes
 11609  000CAE                     	endif
 11610  000CAE  0009               	tblrd		*+
 11611  000CB0  CFF5 F072          	movff	tablat,?_scale
 11612  000CB4  0009               	tblrd		*+
 11613  000CB6  CFF5 F073          	movff	tablat,?_scale+1
 11614  000CBA  000A               	tblrd		*-
 11615  000CBC  CFF5 F074          	movff	tablat,?_scale+2
 11616  000CC0  0012               	return	
 11617  000CC2                     __end_of_scale:
 11618                           	opt stack 0
 11619                           tosu	equ	0xFFF
 11620                           tosh	equ	0xFFE
 11621                           tosl	equ	0xFFD
 11622                           pclath	equ	0xFFA
 11623                           tblptru	equ	0xFF8
 11624                           tblptrh	equ	0xFF7
 11625                           tblptrl	equ	0xFF6
 11626                           tablat	equ	0xFF5
 11627                           prodh	equ	0xFF4
 11628                           prodl	equ	0xFF3
 11629                           intcon	equ	0xFF2
 11630                           intcon2	equ	0xFF1
 11631                           postinc0	equ	0xFEE
 11632                           wreg	equ	0xFE8
 11633                           indf1	equ	0xFE7
 11634                           postdec1	equ	0xFE5
 11635                           fsr1h	equ	0xFE2
 11636                           fsr1l	equ	0xFE1
 11637                           indf2	equ	0xFDF
 11638                           postinc2	equ	0xFDE
 11639                           postdec2	equ	0xFDD
 11640                           fsr2h	equ	0xFDA
 11641                           fsr2l	equ	0xFD9
 11642                           status	equ	0xFD8
 11643                           
 11644 ;; *************** function _fround *****************
 11645 ;; Defined at:
 11646 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 11647 ;; Parameters:    Size  Location     Type
 11648 ;;  prec            1    wreg     unsigned char 
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;  prec            1   27[BANK0 ] unsigned char 
 11651 ;; Return value:  Size  Location     Type
 11652 ;;                  3   18[BANK0 ] unsigned char 
 11653 ;; Registers used:
 11654 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11655 ;; Tracked objects:
 11656 ;;		On entry : 0/0
 11657 ;;		On exit  : 0/0
 11658 ;;		Unchanged: 0/0
 11659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11660 ;;      Params:         0       3       0       0       0       0       0
 11661 ;;      Locals:         0       7       0       0       0       0       0
 11662 ;;      Temps:          0       0       0       0       0       0       0
 11663 ;;      Totals:         0      10       0       0       0       0       0
 11664 ;;Total ram usage:       10 bytes
 11665 ;; Hardware stack levels used:    1
 11666 ;; Hardware stack levels required when called:    5
 11667 ;; This function calls:
 11668 ;;		___awdiv
 11669 ;;		___awmod
 11670 ;;		___ftmul
 11671 ;;		___wmul
 11672 ;; This function is called by:
 11673 ;;		_sprintf
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           	psect	text36
 11678  001236                     __ptext36:
 11679                           	opt stack 0
 11680  001236                     _fround:
 11681                           	opt stack 23
 11682                           
 11683                           ;incstack = 0
 11684                           ;fround@prec stored from wreg
 11685  001236  0100               	movlb	0	; () banked
 11686  001238  6F7B               	movwf	fround@prec& (0+255),b
 11687                           
 11688                           ;doprnt.c: 413: if(prec>=110)
 11689  00123A  0E6D               	movlw	109
 11690  00123C  0100               	movlb	0	; () banked
 11691  00123E  657B               	cpfsgt	fround@prec& (0+255),b
 11692  001240  D0A0               	goto	l1656
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 11696  001242  0E00               	movlw	0
 11697  001244  6E29               	movwf	___wmul@multiplicand+1,c
 11698  001246  0E03               	movlw	3
 11699  001248  6E28               	movwf	___wmul@multiplicand,c
 11700  00124A  0E00               	movlw	0
 11701  00124C  6E21               	movwf	___awdiv@divisor+1,c
 11702  00124E  0E0A               	movlw	10
 11703  001250  6E20               	movwf	___awdiv@divisor,c
 11704  001252  0E00               	movlw	0
 11705  001254  6E1B               	movwf	___awmod@divisor+1,c
 11706  001256  0E64               	movlw	100
 11707  001258  6E1A               	movwf	___awmod@divisor,c
 11708  00125A  C07B  F018         	movff	fround@prec,___awmod@dividend
 11709  00125E  6A19               	clrf	___awmod@dividend+1,c
 11710  001260  EC3A  F01D         	call	___awmod	;wreg free
 11711  001264  C018  F01E         	movff	?___awmod,___awdiv@dividend
 11712  001268  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 11713  00126C  EC06  F01C         	call	___awdiv	;wreg free
 11714  001270  0E09               	movlw	9
 11715  001272  241E               	addwf	?___awdiv,w,c
 11716  001274  6E26               	movwf	___wmul@multiplier,c
 11717  001276  0E00               	movlw	0
 11718  001278  201F               	addwfc	?___awdiv+1,w,c
 11719  00127A  6E27               	movwf	___wmul@multiplier+1,c
 11720  00127C  ECDA  F021         	call	___wmul	;wreg free
 11721  001280  0E8A               	movlw	low __npowers_
 11722  001282  2426               	addwf	?___wmul,w,c
 11723  001284  6EF6               	movwf	tblptrl,c
 11724  001286  0E78               	movlw	high __npowers_
 11725  001288  2027               	addwfc	?___wmul+1,w,c
 11726  00128A  6EF7               	movwf	tblptrh,c
 11727  00128C                     	if	0	;There are less than 3 active tblptr bytes
 11728  00128C                     	endif
 11729  00128C  0009               	tblrd		*+
 11730  00128E  CFF5 F069          	movff	tablat,___ftmul@f2
 11731  001292  0009               	tblrd		*+
 11732  001294  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11733  001298  000A               	tblrd		*-
 11734  00129A  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11735  00129E  0E00               	movlw	0
 11736  0012A0  6E21               	movwf	___awdiv@divisor+1,c
 11737  0012A2  0E64               	movlw	100
 11738  0012A4  6E20               	movwf	___awdiv@divisor,c
 11739  0012A6  C07B  F01E         	movff	fround@prec,___awdiv@dividend
 11740  0012AA  6A1F               	clrf	___awdiv@dividend+1,c
 11741  0012AC  EC06  F01C         	call	___awdiv	;wreg free
 11742  0012B0  0E12               	movlw	18
 11743  0012B2  241E               	addwf	?___awdiv,w,c
 11744  0012B4  6E26               	movwf	___wmul@multiplier,c
 11745  0012B6  0E00               	movlw	0
 11746  0012B8  201F               	addwfc	?___awdiv+1,w,c
 11747  0012BA  6E27               	movwf	___wmul@multiplier+1,c
 11748  0012BC  0E00               	movlw	0
 11749  0012BE  6E29               	movwf	___wmul@multiplicand+1,c
 11750  0012C0  0E03               	movlw	3
 11751  0012C2  6E28               	movwf	___wmul@multiplicand,c
 11752  0012C4  ECDA  F021         	call	___wmul	;wreg free
 11753  0012C8  0E8A               	movlw	low __npowers_
 11754  0012CA  2426               	addwf	?___wmul,w,c
 11755  0012CC  6EF6               	movwf	tblptrl,c
 11756  0012CE  0E78               	movlw	high __npowers_
 11757  0012D0  2027               	addwfc	?___wmul+1,w,c
 11758  0012D2  6EF7               	movwf	tblptrh,c
 11759  0012D4                     	if	0	;There are less than 3 active tblptr bytes
 11760  0012D4                     	endif
 11761  0012D4  0009               	tblrd		*+
 11762  0012D6  CFF5 F066          	movff	tablat,___ftmul@f1
 11763  0012DA  0009               	tblrd		*+
 11764  0012DC  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11765  0012E0  000A               	tblrd		*-
 11766  0012E2  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11767  0012E6  EC6D  F016         	call	___ftmul	;wreg free
 11768  0012EA  C066  F078         	movff	?___ftmul,_fround$3952
 11769  0012EE  C067  F079         	movff	?___ftmul+1,_fround$3952+1
 11770  0012F2  C068  F07A         	movff	?___ftmul+2,_fround$3952+2
 11771                           
 11772                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 11773  0012F6  0E00               	movlw	0
 11774  0012F8  6E29               	movwf	___wmul@multiplicand+1,c
 11775  0012FA  0E03               	movlw	3
 11776  0012FC  6E28               	movwf	___wmul@multiplicand,c
 11777  0012FE  0E00               	movlw	0
 11778  001300  6E1B               	movwf	___awmod@divisor+1,c
 11779  001302  0E0A               	movlw	10
 11780  001304  6E1A               	movwf	___awmod@divisor,c
 11781  001306  C07B  F018         	movff	fround@prec,___awmod@dividend
 11782  00130A  6A19               	clrf	___awmod@dividend+1,c
 11783  00130C  EC3A  F01D         	call	___awmod	;wreg free
 11784  001310  C018  F026         	movff	?___awmod,___wmul@multiplier
 11785  001314  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11786  001318  ECDA  F021         	call	___wmul	;wreg free
 11787  00131C  0E8A               	movlw	low __npowers_
 11788  00131E  2426               	addwf	?___wmul,w,c
 11789  001320  6EF6               	movwf	tblptrl,c
 11790  001322  0E78               	movlw	high __npowers_
 11791  001324  2027               	addwfc	?___wmul+1,w,c
 11792  001326  6EF7               	movwf	tblptrh,c
 11793  001328                     	if	0	;There are less than 3 active tblptr bytes
 11794  001328                     	endif
 11795  001328  0009               	tblrd		*+
 11796  00132A  CFF5 F069          	movff	tablat,___ftmul@f2
 11797  00132E  0009               	tblrd		*+
 11798  001330  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11799  001334  000A               	tblrd		*-
 11800  001336  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11801  00133A  C078  F066         	movff	_fround$3952,___ftmul@f1
 11802  00133E  C079  F067         	movff	_fround$3952+1,___ftmul@f1+1
 11803  001342  C07A  F068         	movff	_fround$3952+2,___ftmul@f1+2
 11804  001346  EC6D  F016         	call	___ftmul	;wreg free
 11805  00134A  C066  F075         	movff	?___ftmul,_fround$3953
 11806  00134E  C067  F076         	movff	?___ftmul+1,_fround$3953+1
 11807  001352  C068  F077         	movff	?___ftmul+2,_fround$3953+2
 11808                           
 11809                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 11810  001356  C075  F066         	movff	_fround$3953,___ftmul@f1
 11811  00135A  C076  F067         	movff	_fround$3953+1,___ftmul@f1+1
 11812  00135E  C077  F068         	movff	_fround$3953+2,___ftmul@f1+2
 11813  001362  0E00               	movlw	0
 11814  001364  0100               	movlb	0	; () banked
 11815  001366  6F69               	movwf	___ftmul@f2& (0+255),b
 11816  001368  0E00               	movlw	0
 11817  00136A  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 11818  00136C  0E3F               	movlw	63
 11819  00136E  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 11820  001370  EC6D  F016         	call	___ftmul	;wreg free
 11821  001374  C066  F072         	movff	?___ftmul,?_fround
 11822  001378  C067  F073         	movff	?___ftmul+1,?_fround+1
 11823  00137C  C068  F074         	movff	?___ftmul+2,?_fround+2
 11824  001380  0012               	return	
 11825  001382                     l1656:
 11826                           
 11827                           ;doprnt.c: 415: else if(prec > 10)
 11828  001382  0E0A               	movlw	10
 11829  001384  0100               	movlb	0	; () banked
 11830  001386  657B               	cpfsgt	fround@prec& (0+255),b
 11831  001388  D064               	goto	l1659
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 11835  00138A  0E00               	movlw	0
 11836  00138C  6E29               	movwf	___wmul@multiplicand+1,c
 11837  00138E  0E03               	movlw	3
 11838  001390  6E28               	movwf	___wmul@multiplicand,c
 11839  001392  0E00               	movlw	0
 11840  001394  6E1B               	movwf	___awmod@divisor+1,c
 11841  001396  0E0A               	movlw	10
 11842  001398  6E1A               	movwf	___awmod@divisor,c
 11843  00139A  C07B  F018         	movff	fround@prec,___awmod@dividend
 11844  00139E  6A19               	clrf	___awmod@dividend+1,c
 11845  0013A0  EC3A  F01D         	call	___awmod	;wreg free
 11846  0013A4  C018  F026         	movff	?___awmod,___wmul@multiplier
 11847  0013A8  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11848  0013AC  ECDA  F021         	call	___wmul	;wreg free
 11849  0013B0  0E8A               	movlw	low __npowers_
 11850  0013B2  2426               	addwf	?___wmul,w,c
 11851  0013B4  6EF6               	movwf	tblptrl,c
 11852  0013B6  0E78               	movlw	high __npowers_
 11853  0013B8  2027               	addwfc	?___wmul+1,w,c
 11854  0013BA  6EF7               	movwf	tblptrh,c
 11855  0013BC                     	if	0	;There are less than 3 active tblptr bytes
 11856  0013BC                     	endif
 11857  0013BC  0009               	tblrd		*+
 11858  0013BE  CFF5 F069          	movff	tablat,___ftmul@f2
 11859  0013C2  0009               	tblrd		*+
 11860  0013C4  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11861  0013C8  000A               	tblrd		*-
 11862  0013CA  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11863  0013CE  0E00               	movlw	0
 11864  0013D0  6E21               	movwf	___awdiv@divisor+1,c
 11865  0013D2  0E0A               	movlw	10
 11866  0013D4  6E20               	movwf	___awdiv@divisor,c
 11867  0013D6  C07B  F01E         	movff	fround@prec,___awdiv@dividend
 11868  0013DA  6A1F               	clrf	___awdiv@dividend+1,c
 11869  0013DC  EC06  F01C         	call	___awdiv	;wreg free
 11870  0013E0  0E09               	movlw	9
 11871  0013E2  241E               	addwf	?___awdiv,w,c
 11872  0013E4  6E26               	movwf	___wmul@multiplier,c
 11873  0013E6  0E00               	movlw	0
 11874  0013E8  201F               	addwfc	?___awdiv+1,w,c
 11875  0013EA  6E27               	movwf	___wmul@multiplier+1,c
 11876  0013EC  0E00               	movlw	0
 11877  0013EE  6E29               	movwf	___wmul@multiplicand+1,c
 11878  0013F0  0E03               	movlw	3
 11879  0013F2  6E28               	movwf	___wmul@multiplicand,c
 11880  0013F4  ECDA  F021         	call	___wmul	;wreg free
 11881  0013F8  0E8A               	movlw	low __npowers_
 11882  0013FA  2426               	addwf	?___wmul,w,c
 11883  0013FC  6EF6               	movwf	tblptrl,c
 11884  0013FE  0E78               	movlw	high __npowers_
 11885  001400  2027               	addwfc	?___wmul+1,w,c
 11886  001402  6EF7               	movwf	tblptrh,c
 11887  001404                     	if	0	;There are less than 3 active tblptr bytes
 11888  001404                     	endif
 11889  001404  0009               	tblrd		*+
 11890  001406  CFF5 F066          	movff	tablat,___ftmul@f1
 11891  00140A  0009               	tblrd		*+
 11892  00140C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11893  001410  000A               	tblrd		*-
 11894  001412  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11895  001416  EC6D  F016         	call	___ftmul	;wreg free
 11896  00141A  C066  F078         	movff	?___ftmul,_fround$3952
 11897  00141E  C067  F079         	movff	?___ftmul+1,_fround$3952+1
 11898  001422  C068  F07A         	movff	?___ftmul+2,_fround$3952+2
 11899                           
 11900                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 11901  001426  C078  F066         	movff	_fround$3952,___ftmul@f1
 11902  00142A  C079  F067         	movff	_fround$3952+1,___ftmul@f1+1
 11903  00142E  C07A  F068         	movff	_fround$3952+2,___ftmul@f1+2
 11904  001432  0E00               	movlw	0
 11905  001434  0100               	movlb	0	; () banked
 11906  001436  6F69               	movwf	___ftmul@f2& (0+255),b
 11907  001438  0E00               	movlw	0
 11908  00143A  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 11909  00143C  0E3F               	movlw	63
 11910  00143E  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 11911  001440  EC6D  F016         	call	___ftmul	;wreg free
 11912  001444  C066  F072         	movff	?___ftmul,?_fround
 11913  001448  C067  F073         	movff	?___ftmul+1,?_fround+1
 11914  00144C  C068  F074         	movff	?___ftmul+2,?_fround+2
 11915  001450  0012               	return	
 11916  001452                     l1659:
 11917                           
 11918                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 11919  001452  0100               	movlb	0	; () banked
 11920  001454  517B               	movf	fround@prec& (0+255),w,b
 11921  001456  0D03               	mullw	3
 11922  001458  0E8A               	movlw	low __npowers_
 11923  00145A  24F3               	addwf	prodl,w,c
 11924  00145C  6EF6               	movwf	tblptrl,c
 11925  00145E  0E78               	movlw	high __npowers_
 11926  001460  20F4               	addwfc	prodh,w,c
 11927  001462  6EF7               	movwf	tblptrh,c
 11928  001464                     	if	0	;There are less than 3 active tblptr bytes
 11929  001464                     	endif
 11930  001464  0009               	tblrd		*+
 11931  001466  CFF5 F066          	movff	tablat,___ftmul@f1
 11932  00146A  0009               	tblrd		*+
 11933  00146C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11934  001470  000A               	tblrd		*-
 11935  001472  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11936  001476  0E00               	movlw	0
 11937  001478  6F69               	movwf	___ftmul@f2& (0+255),b
 11938  00147A  0E00               	movlw	0
 11939  00147C  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 11940  00147E  0E3F               	movlw	63
 11941  001480  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 11942  001482  EC6D  F016         	call	___ftmul	;wreg free
 11943  001486  C066  F072         	movff	?___ftmul,?_fround
 11944  00148A  C067  F073         	movff	?___ftmul+1,?_fround+1
 11945  00148E  C068  F074         	movff	?___ftmul+2,?_fround+2
 11946  001492  0012               	return	
 11947  001494                     __end_of_fround:
 11948                           	opt stack 0
 11949                           tosu	equ	0xFFF
 11950                           tosh	equ	0xFFE
 11951                           tosl	equ	0xFFD
 11952                           pclath	equ	0xFFA
 11953                           tblptru	equ	0xFF8
 11954                           tblptrh	equ	0xFF7
 11955                           tblptrl	equ	0xFF6
 11956                           tablat	equ	0xFF5
 11957                           prodh	equ	0xFF4
 11958                           prodl	equ	0xFF3
 11959                           intcon	equ	0xFF2
 11960                           intcon2	equ	0xFF1
 11961                           postinc0	equ	0xFEE
 11962                           wreg	equ	0xFE8
 11963                           indf1	equ	0xFE7
 11964                           postdec1	equ	0xFE5
 11965                           fsr1h	equ	0xFE2
 11966                           fsr1l	equ	0xFE1
 11967                           indf2	equ	0xFDF
 11968                           postinc2	equ	0xFDE
 11969                           postdec2	equ	0xFDD
 11970                           fsr2h	equ	0xFDA
 11971                           fsr2l	equ	0xFD9
 11972                           status	equ	0xFD8
 11973                           
 11974 ;; *************** function ___awmod *****************
 11975 ;; Defined at:
 11976 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 11977 ;; Parameters:    Size  Location     Type
 11978 ;;  dividend        2   23[COMRAM] int 
 11979 ;;  divisor         2   25[COMRAM] int 
 11980 ;; Auto vars:     Size  Location     Type
 11981 ;;  sign            1   28[COMRAM] unsigned char 
 11982 ;;  counter         1   27[COMRAM] unsigned char 
 11983 ;; Return value:  Size  Location     Type
 11984 ;;                  2   23[COMRAM] int 
 11985 ;; Registers used:
 11986 ;;		wreg, status,2, status,0
 11987 ;; Tracked objects:
 11988 ;;		On entry : 0/0
 11989 ;;		On exit  : 0/0
 11990 ;;		Unchanged: 0/0
 11991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11992 ;;      Params:         4       0       0       0       0       0       0
 11993 ;;      Locals:         2       0       0       0       0       0       0
 11994 ;;      Temps:          0       0       0       0       0       0       0
 11995 ;;      Totals:         6       0       0       0       0       0       0
 11996 ;;Total ram usage:        6 bytes
 11997 ;; Hardware stack levels used:    1
 11998 ;; Hardware stack levels required when called:    3
 11999 ;; This function calls:
 12000 ;;		Nothing
 12001 ;; This function is called by:
 12002 ;;		_fround
 12003 ;;		_scale
 12004 ;; This function uses a non-reentrant model
 12005 ;;
 12006                           
 12007                           	psect	text37
 12008  003A74                     __ptext37:
 12009                           	opt stack 0
 12010  003A74                     ___awmod:
 12011                           	opt stack 24
 12012                           
 12013                           ;incstack = 0
 12014  003A74  0E00               	movlw	0
 12015  003A76  6E1D               	movwf	___awmod@sign,c
 12016  003A78  AE19               	btfss	___awmod@dividend+1,7,c
 12017  003A7A  D006               	goto	l1919
 12018  003A7C  6C18               	negf	___awmod@dividend,c
 12019  003A7E  1E19               	comf	___awmod@dividend+1,f,c
 12020  003A80  B0D8               	btfsc	status,0,c
 12021  003A82  2A19               	incf	___awmod@dividend+1,f,c
 12022  003A84  0E01               	movlw	1
 12023  003A86  6E1D               	movwf	___awmod@sign,c
 12024  003A88                     l1919:
 12025  003A88  AE1B               	btfss	___awmod@divisor+1,7,c
 12026  003A8A  D004               	goto	l1920
 12027  003A8C  6C1A               	negf	___awmod@divisor,c
 12028  003A8E  1E1B               	comf	___awmod@divisor+1,f,c
 12029  003A90  B0D8               	btfsc	status,0,c
 12030  003A92  2A1B               	incf	___awmod@divisor+1,f,c
 12031  003A94                     l1920:
 12032  003A94  501A               	movf	___awmod@divisor,w,c
 12033  003A96  101B               	iorwf	___awmod@divisor+1,w,c
 12034  003A98  B4D8               	btfsc	status,2,c
 12035  003A9A  D018               	goto	l1927
 12036  003A9C  0E01               	movlw	1
 12037  003A9E  6E1C               	movwf	___awmod@counter,c
 12038  003AA0  D004               	goto	l1922
 12039  003AA2  90D8               	bcf	status,0,c
 12040  003AA4  361A               	rlcf	___awmod@divisor,f,c
 12041  003AA6  361B               	rlcf	___awmod@divisor+1,f,c
 12042  003AA8  2A1C               	incf	___awmod@counter,f,c
 12043  003AAA                     l1922:
 12044  003AAA  AE1B               	btfss	___awmod@divisor+1,7,c
 12045  003AAC  D7FA               	goto	l1923
 12046  003AAE                     u8280:
 12047  003AAE  501A               	movf	___awmod@divisor,w,c
 12048  003AB0  5C18               	subwf	___awmod@dividend,w,c
 12049  003AB2  501B               	movf	___awmod@divisor+1,w,c
 12050  003AB4  5819               	subwfb	___awmod@dividend+1,w,c
 12051  003AB6  A0D8               	btfss	status,0,c
 12052  003AB8  D004               	goto	l1926
 12053  003ABA  501A               	movf	___awmod@divisor,w,c
 12054  003ABC  5E18               	subwf	___awmod@dividend,f,c
 12055  003ABE  501B               	movf	___awmod@divisor+1,w,c
 12056  003AC0  5A19               	subwfb	___awmod@dividend+1,f,c
 12057  003AC2                     l1926:
 12058  003AC2  90D8               	bcf	status,0,c
 12059  003AC4  321B               	rrcf	___awmod@divisor+1,f,c
 12060  003AC6  321A               	rrcf	___awmod@divisor,f,c
 12061  003AC8  2E1C               	decfsz	___awmod@counter,f,c
 12062  003ACA  D7F1               	goto	u8280
 12063  003ACC                     l1927:
 12064  003ACC  501D               	movf	___awmod@sign,w,c
 12065  003ACE  B4D8               	btfsc	status,2,c
 12066  003AD0  D004               	goto	l1928
 12067  003AD2  6C18               	negf	___awmod@dividend,c
 12068  003AD4  1E19               	comf	___awmod@dividend+1,f,c
 12069  003AD6  B0D8               	btfsc	status,0,c
 12070  003AD8  2A19               	incf	___awmod@dividend+1,f,c
 12071  003ADA                     l1928:
 12072  003ADA  C018  F018         	movff	___awmod@dividend,?___awmod
 12073  003ADE  C019  F019         	movff	___awmod@dividend+1,?___awmod+1
 12074  003AE2  0012               	return	
 12075  003AE4                     __end_of___awmod:
 12076                           	opt stack 0
 12077                           tosu	equ	0xFFF
 12078                           tosh	equ	0xFFE
 12079                           tosl	equ	0xFFD
 12080                           pclath	equ	0xFFA
 12081                           tblptru	equ	0xFF8
 12082                           tblptrh	equ	0xFF7
 12083                           tblptrl	equ	0xFF6
 12084                           tablat	equ	0xFF5
 12085                           prodh	equ	0xFF4
 12086                           prodl	equ	0xFF3
 12087                           intcon	equ	0xFF2
 12088                           intcon2	equ	0xFF1
 12089                           postinc0	equ	0xFEE
 12090                           wreg	equ	0xFE8
 12091                           indf1	equ	0xFE7
 12092                           postdec1	equ	0xFE5
 12093                           fsr1h	equ	0xFE2
 12094                           fsr1l	equ	0xFE1
 12095                           indf2	equ	0xFDF
 12096                           postinc2	equ	0xFDE
 12097                           postdec2	equ	0xFDD
 12098                           fsr2h	equ	0xFDA
 12099                           fsr2l	equ	0xFD9
 12100                           status	equ	0xFD8
 12101                           
 12102 ;; *************** function ___awdiv *****************
 12103 ;; Defined at:
 12104 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12105 ;; Parameters:    Size  Location     Type
 12106 ;;  dividend        2   29[COMRAM] int 
 12107 ;;  divisor         2   31[COMRAM] int 
 12108 ;; Auto vars:     Size  Location     Type
 12109 ;;  quotient        2   35[COMRAM] int 
 12110 ;;  sign            1   34[COMRAM] unsigned char 
 12111 ;;  counter         1   33[COMRAM] unsigned char 
 12112 ;; Return value:  Size  Location     Type
 12113 ;;                  2   29[COMRAM] int 
 12114 ;; Registers used:
 12115 ;;		wreg, status,2, status,0
 12116 ;; Tracked objects:
 12117 ;;		On entry : 0/0
 12118 ;;		On exit  : 0/0
 12119 ;;		Unchanged: 0/0
 12120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12121 ;;      Params:         4       0       0       0       0       0       0
 12122 ;;      Locals:         4       0       0       0       0       0       0
 12123 ;;      Temps:          0       0       0       0       0       0       0
 12124 ;;      Totals:         8       0       0       0       0       0       0
 12125 ;;Total ram usage:        8 bytes
 12126 ;; Hardware stack levels used:    1
 12127 ;; Hardware stack levels required when called:    3
 12128 ;; This function calls:
 12129 ;;		Nothing
 12130 ;; This function is called by:
 12131 ;;		_fround
 12132 ;;		_scale
 12133 ;;		_sprintf
 12134 ;; This function uses a non-reentrant model
 12135 ;;
 12136                           
 12137                           	psect	text38
 12138  00380C                     __ptext38:
 12139                           	opt stack 0
 12140  00380C                     ___awdiv:
 12141                           	opt stack 24
 12142                           
 12143                           ;incstack = 0
 12144  00380C  0E00               	movlw	0
 12145  00380E  6E23               	movwf	___awdiv@sign,c
 12146  003810  AE21               	btfss	___awdiv@divisor+1,7,c
 12147  003812  D006               	goto	l1906
 12148  003814  6C20               	negf	___awdiv@divisor,c
 12149  003816  1E21               	comf	___awdiv@divisor+1,f,c
 12150  003818  B0D8               	btfsc	status,0,c
 12151  00381A  2A21               	incf	___awdiv@divisor+1,f,c
 12152  00381C  0E01               	movlw	1
 12153  00381E  6E23               	movwf	___awdiv@sign,c
 12154  003820                     l1906:
 12155  003820  AE1F               	btfss	___awdiv@dividend+1,7,c
 12156  003822  D006               	goto	l1907
 12157  003824  6C1E               	negf	___awdiv@dividend,c
 12158  003826  1E1F               	comf	___awdiv@dividend+1,f,c
 12159  003828  B0D8               	btfsc	status,0,c
 12160  00382A  2A1F               	incf	___awdiv@dividend+1,f,c
 12161  00382C  0E01               	movlw	1
 12162  00382E  1A23               	xorwf	___awdiv@sign,f,c
 12163  003830                     l1907:
 12164  003830  0E00               	movlw	0
 12165  003832  6E25               	movwf	___awdiv@quotient+1,c
 12166  003834  0E00               	movlw	0
 12167  003836  6E24               	movwf	___awdiv@quotient,c
 12168  003838  5020               	movf	___awdiv@divisor,w,c
 12169  00383A  1021               	iorwf	___awdiv@divisor+1,w,c
 12170  00383C  B4D8               	btfsc	status,2,c
 12171  00383E  D01C               	goto	l1914
 12172  003840  0E01               	movlw	1
 12173  003842  6E22               	movwf	___awdiv@counter,c
 12174  003844  D004               	goto	l1909
 12175  003846  90D8               	bcf	status,0,c
 12176  003848  3620               	rlcf	___awdiv@divisor,f,c
 12177  00384A  3621               	rlcf	___awdiv@divisor+1,f,c
 12178  00384C  2A22               	incf	___awdiv@counter,f,c
 12179  00384E                     l1909:
 12180  00384E  AE21               	btfss	___awdiv@divisor+1,7,c
 12181  003850  D7FA               	goto	l1910
 12182  003852                     u8220:
 12183  003852  90D8               	bcf	status,0,c
 12184  003854  3624               	rlcf	___awdiv@quotient,f,c
 12185  003856  3625               	rlcf	___awdiv@quotient+1,f,c
 12186  003858  5020               	movf	___awdiv@divisor,w,c
 12187  00385A  5C1E               	subwf	___awdiv@dividend,w,c
 12188  00385C  5021               	movf	___awdiv@divisor+1,w,c
 12189  00385E  581F               	subwfb	___awdiv@dividend+1,w,c
 12190  003860  A0D8               	btfss	status,0,c
 12191  003862  D005               	goto	l1913
 12192  003864  5020               	movf	___awdiv@divisor,w,c
 12193  003866  5E1E               	subwf	___awdiv@dividend,f,c
 12194  003868  5021               	movf	___awdiv@divisor+1,w,c
 12195  00386A  5A1F               	subwfb	___awdiv@dividend+1,f,c
 12196  00386C  8024               	bsf	___awdiv@quotient,0,c
 12197  00386E                     l1913:
 12198  00386E  90D8               	bcf	status,0,c
 12199  003870  3221               	rrcf	___awdiv@divisor+1,f,c
 12200  003872  3220               	rrcf	___awdiv@divisor,f,c
 12201  003874  2E22               	decfsz	___awdiv@counter,f,c
 12202  003876  D7ED               	goto	u8220
 12203  003878                     l1914:
 12204  003878  5023               	movf	___awdiv@sign,w,c
 12205  00387A  B4D8               	btfsc	status,2,c
 12206  00387C  D004               	goto	l1915
 12207  00387E  6C24               	negf	___awdiv@quotient,c
 12208  003880  1E25               	comf	___awdiv@quotient+1,f,c
 12209  003882  B0D8               	btfsc	status,0,c
 12210  003884  2A25               	incf	___awdiv@quotient+1,f,c
 12211  003886                     l1915:
 12212  003886  C024  F01E         	movff	___awdiv@quotient,?___awdiv
 12213  00388A  C025  F01F         	movff	___awdiv@quotient+1,?___awdiv+1
 12214  00388E  0012               	return	
 12215  003890                     __end_of___awdiv:
 12216                           	opt stack 0
 12217                           tosu	equ	0xFFF
 12218                           tosh	equ	0xFFE
 12219                           tosl	equ	0xFFD
 12220                           pclath	equ	0xFFA
 12221                           tblptru	equ	0xFF8
 12222                           tblptrh	equ	0xFF7
 12223                           tblptrl	equ	0xFF6
 12224                           tablat	equ	0xFF5
 12225                           prodh	equ	0xFF4
 12226                           prodl	equ	0xFF3
 12227                           intcon	equ	0xFF2
 12228                           intcon2	equ	0xFF1
 12229                           postinc0	equ	0xFEE
 12230                           wreg	equ	0xFE8
 12231                           indf1	equ	0xFE7
 12232                           postdec1	equ	0xFE5
 12233                           fsr1h	equ	0xFE2
 12234                           fsr1l	equ	0xFE1
 12235                           indf2	equ	0xFDF
 12236                           postinc2	equ	0xFDE
 12237                           postdec2	equ	0xFDD
 12238                           fsr2h	equ	0xFDA
 12239                           fsr2l	equ	0xFD9
 12240                           status	equ	0xFD8
 12241                           
 12242 ;; *************** function __tdiv_to_l_ *****************
 12243 ;; Defined at:
 12244 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
 12245 ;; Parameters:    Size  Location     Type
 12246 ;;  f1              3   23[COMRAM] float 
 12247 ;;  f2              3   26[COMRAM] float 
 12248 ;; Auto vars:     Size  Location     Type
 12249 ;;  quot            4   32[COMRAM] unsigned long 
 12250 ;;  exp1            1   37[COMRAM] unsigned char 
 12251 ;;  cntr            1   36[COMRAM] unsigned char 
 12252 ;; Return value:  Size  Location     Type
 12253 ;;                  4   23[COMRAM] unsigned long 
 12254 ;; Registers used:
 12255 ;;		wreg, status,2, status,0
 12256 ;; Tracked objects:
 12257 ;;		On entry : 0/0
 12258 ;;		On exit  : 0/0
 12259 ;;		Unchanged: 0/0
 12260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12261 ;;      Params:         6       0       0       0       0       0       0
 12262 ;;      Locals:         6       0       0       0       0       0       0
 12263 ;;      Temps:          3       0       0       0       0       0       0
 12264 ;;      Totals:        15       0       0       0       0       0       0
 12265 ;;Total ram usage:       15 bytes
 12266 ;; Hardware stack levels used:    1
 12267 ;; Hardware stack levels required when called:    3
 12268 ;; This function calls:
 12269 ;;		Nothing
 12270 ;; This function is called by:
 12271 ;;		_sprintf
 12272 ;; This function uses a non-reentrant model
 12273 ;;
 12274                           
 12275                           	psect	text39
 12276  0023DE                     __ptext39:
 12277                           	opt stack 0
 12278  0023DE                     __tdiv_to_l_:
 12279                           	opt stack 25
 12280                           
 12281                           ;incstack = 0
 12282  0023DE  C01A  F01E         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 12283  0023E2  6A1F               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 12284  0023E4  6A20               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 12285  0023E6  3419               	rlcf	__tdiv_to_l_@f1+1,w,c
 12286  0023E8  361E               	rlcf	??__tdiv_to_l_& (0+255),f,c
 12287  0023EA  E301               	bnc	u8711
 12288  0023EC  801F               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 12289  0023EE                     u8711:
 12290  0023EE  501E               	movf	??__tdiv_to_l_,w,c
 12291  0023F0  6E26               	movwf	__tdiv_to_l_@exp1,c
 12292  0023F2  5026               	movf	__tdiv_to_l_@exp1,w,c
 12293  0023F4  A4D8               	btfss	status,2,c
 12294  0023F6  D009               	goto	l2042
 12295  0023F8  0E00               	movlw	0
 12296  0023FA  6E18               	movwf	?__tdiv_to_l_,c
 12297  0023FC  0E00               	movlw	0
 12298  0023FE  6E19               	movwf	?__tdiv_to_l_+1,c
 12299  002400  0E00               	movlw	0
 12300  002402  6E1A               	movwf	?__tdiv_to_l_+2,c
 12301  002404  0E00               	movlw	0
 12302  002406  6E1B               	movwf	?__tdiv_to_l_+3,c
 12303  002408  0012               	return	
 12304  00240A                     l2042:
 12305  00240A  C01D  F01E         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 12306  00240E  6A1F               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 12307  002410  6A20               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 12308  002412  341C               	rlcf	__tdiv_to_l_@f2+1,w,c
 12309  002414  361E               	rlcf	??__tdiv_to_l_& (0+255),f,c
 12310  002416  E301               	bnc	u8731
 12311  002418  801F               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 12312  00241A                     u8731:
 12313  00241A  501E               	movf	??__tdiv_to_l_,w,c
 12314  00241C  6E25               	movwf	__tdiv_to_l_@cntr,c
 12315  00241E  5025               	movf	__tdiv_to_l_@cntr,w,c
 12316  002420  A4D8               	btfss	status,2,c
 12317  002422  D009               	goto	l2044
 12318  002424  0E00               	movlw	0
 12319  002426  6E18               	movwf	?__tdiv_to_l_,c
 12320  002428  0E00               	movlw	0
 12321  00242A  6E19               	movwf	?__tdiv_to_l_+1,c
 12322  00242C  0E00               	movlw	0
 12323  00242E  6E1A               	movwf	?__tdiv_to_l_+2,c
 12324  002430  0E00               	movlw	0
 12325  002432  6E1B               	movwf	?__tdiv_to_l_+3,c
 12326  002434  0012               	return	
 12327  002436                     l2044:
 12328  002436  8E19               	bsf	__tdiv_to_l_@f1+1,7,c
 12329  002438  0EFF               	movlw	255
 12330  00243A  1618               	andwf	__tdiv_to_l_@f1,f,c
 12331  00243C  0EFF               	movlw	255
 12332  00243E  1619               	andwf	__tdiv_to_l_@f1+1,f,c
 12333  002440  0E00               	movlw	0
 12334  002442  161A               	andwf	__tdiv_to_l_@f1+2,f,c
 12335  002444  8E1C               	bsf	__tdiv_to_l_@f2+1,7,c
 12336  002446  0EFF               	movlw	255
 12337  002448  161B               	andwf	__tdiv_to_l_@f2,f,c
 12338  00244A  0EFF               	movlw	255
 12339  00244C  161C               	andwf	__tdiv_to_l_@f2+1,f,c
 12340  00244E  0E00               	movlw	0
 12341  002450  161D               	andwf	__tdiv_to_l_@f2+2,f,c
 12342  002452  0E00               	movlw	0
 12343  002454  6E21               	movwf	__tdiv_to_l_@quot,c
 12344  002456  0E00               	movlw	0
 12345  002458  6E22               	movwf	__tdiv_to_l_@quot+1,c
 12346  00245A  0E00               	movlw	0
 12347  00245C  6E23               	movwf	__tdiv_to_l_@quot+2,c
 12348  00245E  0E00               	movlw	0
 12349  002460  6E24               	movwf	__tdiv_to_l_@quot+3,c
 12350  002462  0E7F               	movlw	127
 12351  002464  5E26               	subwf	__tdiv_to_l_@exp1,f,c
 12352  002466  5025               	movf	__tdiv_to_l_@cntr,w,c
 12353  002468  0F98               	addlw	152
 12354  00246A  5E26               	subwf	__tdiv_to_l_@exp1,f,c
 12355  00246C  0E18               	movlw	24
 12356  00246E  6E25               	movwf	__tdiv_to_l_@cntr,c
 12357  002470                     l2045:
 12358  002470  90D8               	bcf	status,0,c
 12359  002472  3621               	rlcf	__tdiv_to_l_@quot,f,c
 12360  002474  3622               	rlcf	__tdiv_to_l_@quot+1,f,c
 12361  002476  3623               	rlcf	__tdiv_to_l_@quot+2,f,c
 12362  002478  3624               	rlcf	__tdiv_to_l_@quot+3,f,c
 12363  00247A  501B               	movf	__tdiv_to_l_@f2,w,c
 12364  00247C  5C18               	subwf	__tdiv_to_l_@f1,w,c
 12365  00247E  501C               	movf	__tdiv_to_l_@f2+1,w,c
 12366  002480  5819               	subwfb	__tdiv_to_l_@f1+1,w,c
 12367  002482  501D               	movf	__tdiv_to_l_@f2+2,w,c
 12368  002484  581A               	subwfb	__tdiv_to_l_@f1+2,w,c
 12369  002486  A0D8               	btfss	status,0,c
 12370  002488  D007               	goto	l2046
 12371  00248A  501B               	movf	__tdiv_to_l_@f2,w,c
 12372  00248C  5E18               	subwf	__tdiv_to_l_@f1,f,c
 12373  00248E  501C               	movf	__tdiv_to_l_@f2+1,w,c
 12374  002490  5A19               	subwfb	__tdiv_to_l_@f1+1,f,c
 12375  002492  501D               	movf	__tdiv_to_l_@f2+2,w,c
 12376  002494  5A1A               	subwfb	__tdiv_to_l_@f1+2,f,c
 12377  002496  8021               	bsf	__tdiv_to_l_@quot,0,c
 12378  002498                     l2046:
 12379  002498  90D8               	bcf	status,0,c
 12380  00249A  3618               	rlcf	__tdiv_to_l_@f1,f,c
 12381  00249C  3619               	rlcf	__tdiv_to_l_@f1+1,f,c
 12382  00249E  361A               	rlcf	__tdiv_to_l_@f1+2,f,c
 12383  0024A0  2E25               	decfsz	__tdiv_to_l_@cntr,f,c
 12384  0024A2  D7E6               	goto	l2045
 12385  0024A4  AE26               	btfss	__tdiv_to_l_@exp1,7,c
 12386  0024A6  D016               	goto	l2048
 12387  0024A8  5026               	movf	__tdiv_to_l_@exp1,w,c
 12388  0024AA  0A80               	xorlw	128
 12389  0024AC  0F97               	addlw	151
 12390  0024AE  B0D8               	btfsc	status,0,c
 12391  0024B0  D009               	goto	l2049
 12392  0024B2  0E00               	movlw	0
 12393  0024B4  6E18               	movwf	?__tdiv_to_l_,c
 12394  0024B6  0E00               	movlw	0
 12395  0024B8  6E19               	movwf	?__tdiv_to_l_+1,c
 12396  0024BA  0E00               	movlw	0
 12397  0024BC  6E1A               	movwf	?__tdiv_to_l_+2,c
 12398  0024BE  0E00               	movlw	0
 12399  0024C0  6E1B               	movwf	?__tdiv_to_l_+3,c
 12400  0024C2  0012               	return	
 12401  0024C4                     l2049:
 12402  0024C4  90D8               	bcf	status,0,c
 12403  0024C6  3224               	rrcf	__tdiv_to_l_@quot+3,f,c
 12404  0024C8  3223               	rrcf	__tdiv_to_l_@quot+2,f,c
 12405  0024CA  3222               	rrcf	__tdiv_to_l_@quot+1,f,c
 12406  0024CC  3221               	rrcf	__tdiv_to_l_@quot,f,c
 12407  0024CE  3E26               	incfsz	__tdiv_to_l_@exp1,f,c
 12408  0024D0  D7F9               	goto	l2049
 12409  0024D2  D015               	goto	u8790
 12410  0024D4                     l2048:
 12411  0024D4  0E17               	movlw	23
 12412  0024D6  6426               	cpfsgt	__tdiv_to_l_@exp1,c
 12413  0024D8  D00F               	goto	l2054
 12414  0024DA  0E00               	movlw	0
 12415  0024DC  6E18               	movwf	?__tdiv_to_l_,c
 12416  0024DE  0E00               	movlw	0
 12417  0024E0  6E19               	movwf	?__tdiv_to_l_+1,c
 12418  0024E2  0E00               	movlw	0
 12419  0024E4  6E1A               	movwf	?__tdiv_to_l_+2,c
 12420  0024E6  0E00               	movlw	0
 12421  0024E8  6E1B               	movwf	?__tdiv_to_l_+3,c
 12422  0024EA  0012               	return	
 12423  0024EC  90D8               	bcf	status,0,c
 12424  0024EE  3621               	rlcf	__tdiv_to_l_@quot,f,c
 12425  0024F0  3622               	rlcf	__tdiv_to_l_@quot+1,f,c
 12426  0024F2  3623               	rlcf	__tdiv_to_l_@quot+2,f,c
 12427  0024F4  3624               	rlcf	__tdiv_to_l_@quot+3,f,c
 12428  0024F6  0626               	decf	__tdiv_to_l_@exp1,f,c
 12429  0024F8                     l2054:
 12430  0024F8  5026               	movf	__tdiv_to_l_@exp1,w,c
 12431  0024FA  A4D8               	btfss	status,2,c
 12432  0024FC  D7F7               	goto	l2055
 12433  0024FE                     u8790:
 12434  0024FE  C021  F018         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 12435  002502  C022  F019         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 12436  002506  C023  F01A         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 12437  00250A  C024  F01B         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 12438  00250E  0012               	return		;funcret
 12439  002510                     __end_of__tdiv_to_l_:
 12440                           	opt stack 0
 12441                           tosu	equ	0xFFF
 12442                           tosh	equ	0xFFE
 12443                           tosl	equ	0xFFD
 12444                           pclath	equ	0xFFA
 12445                           tblptru	equ	0xFF8
 12446                           tblptrh	equ	0xFF7
 12447                           tblptrl	equ	0xFF6
 12448                           tablat	equ	0xFF5
 12449                           prodh	equ	0xFF4
 12450                           prodl	equ	0xFF3
 12451                           intcon	equ	0xFF2
 12452                           intcon2	equ	0xFF1
 12453                           postinc0	equ	0xFEE
 12454                           wreg	equ	0xFE8
 12455                           indf1	equ	0xFE7
 12456                           postdec1	equ	0xFE5
 12457                           fsr1h	equ	0xFE2
 12458                           fsr1l	equ	0xFE1
 12459                           indf2	equ	0xFDF
 12460                           postinc2	equ	0xFDE
 12461                           postdec2	equ	0xFDD
 12462                           fsr2h	equ	0xFDA
 12463                           fsr2l	equ	0xFD9
 12464                           status	equ	0xFD8
 12465                           
 12466 ;; *************** function __div_to_l_ *****************
 12467 ;; Defined at:
 12468 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
 12469 ;; Parameters:    Size  Location     Type
 12470 ;;  f1              3   23[COMRAM] unsigned long 
 12471 ;;  f2              3   26[COMRAM] unsigned long 
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;  quot            4   29[COMRAM] unsigned long 
 12474 ;;  exp1            1   34[COMRAM] unsigned char 
 12475 ;;  cntr            1   33[COMRAM] unsigned char 
 12476 ;; Return value:  Size  Location     Type
 12477 ;;                  4   23[COMRAM] unsigned long 
 12478 ;; Registers used:
 12479 ;;		wreg, status,2, status,0
 12480 ;; Tracked objects:
 12481 ;;		On entry : 0/0
 12482 ;;		On exit  : 0/0
 12483 ;;		Unchanged: 0/0
 12484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12485 ;;      Params:         6       0       0       0       0       0       0
 12486 ;;      Locals:         6       0       0       0       0       0       0
 12487 ;;      Temps:          0       0       0       0       0       0       0
 12488 ;;      Totals:        12       0       0       0       0       0       0
 12489 ;;Total ram usage:       12 bytes
 12490 ;; Hardware stack levels used:    1
 12491 ;; Hardware stack levels required when called:    3
 12492 ;; This function calls:
 12493 ;;		Nothing
 12494 ;; This function is called by:
 12495 ;;		_sprintf
 12496 ;; This function uses a non-reentrant model
 12497 ;;
 12498                           
 12499                           	psect	text40
 12500  00263A                     __ptext40:
 12501                           	opt stack 0
 12502  00263A                     __div_to_l_:
 12503                           	opt stack 25
 12504                           
 12505                           ;incstack = 0
 12506  00263A  341A               	rlcf	__div_to_l_@f1+2,w,c
 12507  00263C  341B               	rlcf	__div_to_l_@f1+3,w,c
 12508  00263E  6E23               	movwf	__div_to_l_@exp1,c
 12509  002640  5023               	movf	__div_to_l_@exp1,w,c
 12510  002642  A4D8               	btfss	status,2,c
 12511  002644  D009               	goto	l1938
 12512  002646  0E00               	movlw	0
 12513  002648  6E18               	movwf	?__div_to_l_,c
 12514  00264A  0E00               	movlw	0
 12515  00264C  6E19               	movwf	?__div_to_l_+1,c
 12516  00264E  0E00               	movlw	0
 12517  002650  6E1A               	movwf	?__div_to_l_+2,c
 12518  002652  0E00               	movlw	0
 12519  002654  6E1B               	movwf	?__div_to_l_+3,c
 12520  002656  0012               	return	
 12521  002658                     l1938:
 12522  002658  341D               	rlcf	__div_to_l_@f2+2,w,c
 12523  00265A  341E               	rlcf	__div_to_l_@f2+3,w,c
 12524  00265C  6E22               	movwf	__div_to_l_@cntr,c
 12525  00265E  5022               	movf	__div_to_l_@cntr,w,c
 12526  002660  A4D8               	btfss	status,2,c
 12527  002662  D009               	goto	l1940
 12528  002664  0E00               	movlw	0
 12529  002666  6E18               	movwf	?__div_to_l_,c
 12530  002668  0E00               	movlw	0
 12531  00266A  6E19               	movwf	?__div_to_l_+1,c
 12532  00266C  0E00               	movlw	0
 12533  00266E  6E1A               	movwf	?__div_to_l_+2,c
 12534  002670  0E00               	movlw	0
 12535  002672  6E1B               	movwf	?__div_to_l_+3,c
 12536  002674  0012               	return	
 12537  002676                     l1940:
 12538  002676  8E1A               	bsf	__div_to_l_@f1+2,7,c
 12539  002678  0EFF               	movlw	255
 12540  00267A  1618               	andwf	__div_to_l_@f1,f,c
 12541  00267C  0EFF               	movlw	255
 12542  00267E  1619               	andwf	__div_to_l_@f1+1,f,c
 12543  002680  0EFF               	movlw	255
 12544  002682  161A               	andwf	__div_to_l_@f1+2,f,c
 12545  002684  0E00               	movlw	0
 12546  002686  161B               	andwf	__div_to_l_@f1+3,f,c
 12547  002688  8E1D               	bsf	__div_to_l_@f2+2,7,c
 12548  00268A  0EFF               	movlw	255
 12549  00268C  161B               	andwf	__div_to_l_@f2,f,c
 12550  00268E  0EFF               	movlw	255
 12551  002690  161C               	andwf	__div_to_l_@f2+1,f,c
 12552  002692  0EFF               	movlw	255
 12553  002694  161D               	andwf	__div_to_l_@f2+2,f,c
 12554  002696  0E00               	movlw	0
 12555  002698  161E               	andwf	__div_to_l_@f2+3,f,c
 12556  00269A  0E00               	movlw	0
 12557  00269C  6E1E               	movwf	__div_to_l_@quot,c
 12558  00269E  0E00               	movlw	0
 12559  0026A0  6E1F               	movwf	__div_to_l_@quot+1,c
 12560  0026A2  0E00               	movlw	0
 12561  0026A4  6E20               	movwf	__div_to_l_@quot+2,c
 12562  0026A6  0E00               	movlw	0
 12563  0026A8  6E21               	movwf	__div_to_l_@quot+3,c
 12564  0026AA  0E7F               	movlw	127
 12565  0026AC  5E23               	subwf	__div_to_l_@exp1,f,c
 12566  0026AE  5022               	movf	__div_to_l_@cntr,w,c
 12567  0026B0  0FA0               	addlw	160
 12568  0026B2  5E23               	subwf	__div_to_l_@exp1,f,c
 12569  0026B4  0E20               	movlw	32
 12570  0026B6  6E22               	movwf	__div_to_l_@cntr,c
 12571  0026B8  90D8               	bcf	status,0,c
 12572  0026BA  361E               	rlcf	__div_to_l_@quot,f,c
 12573  0026BC  361F               	rlcf	__div_to_l_@quot+1,f,c
 12574  0026BE  3620               	rlcf	__div_to_l_@quot+2,f,c
 12575  0026C0  3621               	rlcf	__div_to_l_@quot+3,f,c
 12576  0026C2  501B               	movf	__div_to_l_@f2,w,c
 12577  0026C4  5C18               	subwf	__div_to_l_@f1,w,c
 12578  0026C6  501C               	movf	__div_to_l_@f2+1,w,c
 12579  0026C8  5819               	subwfb	__div_to_l_@f1+1,w,c
 12580  0026CA  501D               	movf	__div_to_l_@f2+2,w,c
 12581  0026CC  581A               	subwfb	__div_to_l_@f1+2,w,c
 12582  0026CE  501E               	movf	__div_to_l_@f2+3,w,c
 12583  0026D0  581B               	subwfb	__div_to_l_@f1+3,w,c
 12584  0026D2  A0D8               	btfss	status,0,c
 12585  0026D4  D009               	goto	l1942
 12586  0026D6  501B               	movf	__div_to_l_@f2,w,c
 12587  0026D8  5E18               	subwf	__div_to_l_@f1,f,c
 12588  0026DA  501C               	movf	__div_to_l_@f2+1,w,c
 12589  0026DC  5A19               	subwfb	__div_to_l_@f1+1,f,c
 12590  0026DE  501D               	movf	__div_to_l_@f2+2,w,c
 12591  0026E0  5A1A               	subwfb	__div_to_l_@f1+2,f,c
 12592  0026E2  501E               	movf	__div_to_l_@f2+3,w,c
 12593  0026E4  5A1B               	subwfb	__div_to_l_@f1+3,f,c
 12594  0026E6  801E               	bsf	__div_to_l_@quot,0,c
 12595  0026E8                     l1942:
 12596  0026E8  90D8               	bcf	status,0,c
 12597  0026EA  3618               	rlcf	__div_to_l_@f1,f,c
 12598  0026EC  3619               	rlcf	__div_to_l_@f1+1,f,c
 12599  0026EE  361A               	rlcf	__div_to_l_@f1+2,f,c
 12600  0026F0  361B               	rlcf	__div_to_l_@f1+3,f,c
 12601  0026F2  2E22               	decfsz	__div_to_l_@cntr,f,c
 12602  0026F4  D7E1               	goto	l1941
 12603  0026F6  AE23               	btfss	__div_to_l_@exp1,7,c
 12604  0026F8  D016               	goto	l1944
 12605  0026FA  5023               	movf	__div_to_l_@exp1,w,c
 12606  0026FC  0A80               	xorlw	128
 12607  0026FE  0F9F               	addlw	159
 12608  002700  B0D8               	btfsc	status,0,c
 12609  002702  D009               	goto	l1945
 12610  002704  0E00               	movlw	0
 12611  002706  6E18               	movwf	?__div_to_l_,c
 12612  002708  0E00               	movlw	0
 12613  00270A  6E19               	movwf	?__div_to_l_+1,c
 12614  00270C  0E00               	movlw	0
 12615  00270E  6E1A               	movwf	?__div_to_l_+2,c
 12616  002710  0E00               	movlw	0
 12617  002712  6E1B               	movwf	?__div_to_l_+3,c
 12618  002714  0012               	return	
 12619  002716                     l1945:
 12620  002716  90D8               	bcf	status,0,c
 12621  002718  3221               	rrcf	__div_to_l_@quot+3,f,c
 12622  00271A  3220               	rrcf	__div_to_l_@quot+2,f,c
 12623  00271C  321F               	rrcf	__div_to_l_@quot+1,f,c
 12624  00271E  321E               	rrcf	__div_to_l_@quot,f,c
 12625  002720  3E23               	incfsz	__div_to_l_@exp1,f,c
 12626  002722  D7F9               	goto	l1945
 12627  002724  D015               	goto	u8860
 12628  002726                     l1944:
 12629  002726  0E1F               	movlw	31
 12630  002728  6423               	cpfsgt	__div_to_l_@exp1,c
 12631  00272A  D00F               	goto	l1950
 12632  00272C  0E00               	movlw	0
 12633  00272E  6E18               	movwf	?__div_to_l_,c
 12634  002730  0E00               	movlw	0
 12635  002732  6E19               	movwf	?__div_to_l_+1,c
 12636  002734  0E00               	movlw	0
 12637  002736  6E1A               	movwf	?__div_to_l_+2,c
 12638  002738  0E00               	movlw	0
 12639  00273A  6E1B               	movwf	?__div_to_l_+3,c
 12640  00273C  0012               	return	
 12641  00273E  90D8               	bcf	status,0,c
 12642  002740  361E               	rlcf	__div_to_l_@quot,f,c
 12643  002742  361F               	rlcf	__div_to_l_@quot+1,f,c
 12644  002744  3620               	rlcf	__div_to_l_@quot+2,f,c
 12645  002746  3621               	rlcf	__div_to_l_@quot+3,f,c
 12646  002748  0623               	decf	__div_to_l_@exp1,f,c
 12647  00274A                     l1950:
 12648  00274A  5023               	movf	__div_to_l_@exp1,w,c
 12649  00274C  A4D8               	btfss	status,2,c
 12650  00274E  D7F7               	goto	l1951
 12651  002750                     u8860:
 12652  002750  C01E  F018         	movff	__div_to_l_@quot,?__div_to_l_
 12653  002754  C01F  F019         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 12654  002758  C020  F01A         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 12655  00275C  C021  F01B         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 12656  002760  0012               	return		;funcret
 12657  002762                     __end_of__div_to_l_:
 12658                           	opt stack 0
 12659                           tosu	equ	0xFFF
 12660                           tosh	equ	0xFFE
 12661                           tosl	equ	0xFFD
 12662                           pclath	equ	0xFFA
 12663                           tblptru	equ	0xFF8
 12664                           tblptrh	equ	0xFF7
 12665                           tblptrl	equ	0xFF6
 12666                           tablat	equ	0xFF5
 12667                           prodh	equ	0xFF4
 12668                           prodl	equ	0xFF3
 12669                           intcon	equ	0xFF2
 12670                           intcon2	equ	0xFF1
 12671                           postinc0	equ	0xFEE
 12672                           wreg	equ	0xFE8
 12673                           indf1	equ	0xFE7
 12674                           postdec1	equ	0xFE5
 12675                           fsr1h	equ	0xFE2
 12676                           fsr1l	equ	0xFE1
 12677                           indf2	equ	0xFDF
 12678                           postinc2	equ	0xFDE
 12679                           postdec2	equ	0xFDD
 12680                           fsr2h	equ	0xFDA
 12681                           fsr2l	equ	0xFD9
 12682                           status	equ	0xFD8
 12683                           
 12684 ;; *************** function ___llmod *****************
 12685 ;; Defined at:
 12686 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 12687 ;; Parameters:    Size  Location     Type
 12688 ;;  dividend        4   83[BANK0 ] unsigned long 
 12689 ;;  divisor         4   87[BANK0 ] unsigned long 
 12690 ;; Auto vars:     Size  Location     Type
 12691 ;;  counter         1   91[BANK0 ] unsigned char 
 12692 ;; Return value:  Size  Location     Type
 12693 ;;                  4   83[BANK0 ] unsigned long 
 12694 ;; Registers used:
 12695 ;;		wreg, status,2, status,0
 12696 ;; Tracked objects:
 12697 ;;		On entry : 0/0
 12698 ;;		On exit  : 0/0
 12699 ;;		Unchanged: 0/0
 12700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12701 ;;      Params:         0       8       0       0       0       0       0
 12702 ;;      Locals:         0       1       0       0       0       0       0
 12703 ;;      Temps:          0       0       0       0       0       0       0
 12704 ;;      Totals:         0       9       0       0       0       0       0
 12705 ;;Total ram usage:        9 bytes
 12706 ;; Hardware stack levels used:    1
 12707 ;; Hardware stack levels required when called:    3
 12708 ;; This function calls:
 12709 ;;		Nothing
 12710 ;; This function is called by:
 12711 ;;		_GroupRx
 12712 ;;		_GroupTx
 12713 ;;		_SetMcuRunTime
 12714 ;;		_sprintf
 12715 ;;		_DacSetValue
 12716 ;; This function uses a non-reentrant model
 12717 ;;
 12718                           
 12719                           	psect	text41
 12720  003B52                     __ptext41:
 12721                           	opt stack 0
 12722  003B52                     ___llmod:
 12723                           	opt stack 25
 12724                           
 12725                           ;incstack = 0
 12726  003B52  0100               	movlb	0	; () banked
 12727  003B54  51B7               	movf	___llmod@divisor& (0+255),w,b
 12728  003B56  11B8               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 12729  003B58  11B9               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 12730  003B5A  11BA               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 12731  003B5C  B4D8               	btfsc	status,2,c
 12732  003B5E  D024               	goto	l2138
 12733                           
 12734                           ; BSR set to: 0
 12735  003B60  0E01               	movlw	1
 12736  003B62  6FBB               	movwf	___llmod@counter& (0+255),b
 12737  003B64  D006               	goto	l2133
 12738  003B66                     
 12739                           ; BSR set to: 0
 12740                           
 12741                           ; BSR set to: 0
 12742  003B66  90D8               	bcf	status,0,c
 12743  003B68  37B7               	rlcf	___llmod@divisor& (0+255),f,b
 12744  003B6A  37B8               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 12745  003B6C  37B9               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 12746  003B6E  37BA               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 12747  003B70  2BBB               	incf	___llmod@counter& (0+255),f,b
 12748  003B72                     l2133:
 12749                           
 12750                           ; BSR set to: 0
 12751                           
 12752                           ; BSR set to: 0
 12753  003B72  AFBA               	btfss	(___llmod@divisor+3)& (0+255),7,b
 12754  003B74  D7F8               	goto	l2134
 12755  003B76                     u8930:
 12756                           
 12757                           ; BSR set to: 0
 12758                           
 12759                           ; BSR set to: 0
 12760                           
 12761                           ; BSR set to: 0
 12762  003B76  51B7               	movf	___llmod@divisor& (0+255),w,b
 12763  003B78  5DB3               	subwf	___llmod@dividend& (0+255),w,b
 12764  003B7A  51B8               	movf	(___llmod@divisor+1)& (0+255),w,b
 12765  003B7C  59B4               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 12766  003B7E  51B9               	movf	(___llmod@divisor+2)& (0+255),w,b
 12767  003B80  59B5               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 12768  003B82  51BA               	movf	(___llmod@divisor+3)& (0+255),w,b
 12769  003B84  59B6               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 12770  003B86  A0D8               	btfss	status,0,c
 12771  003B88  D008               	goto	l2137
 12772                           
 12773                           ; BSR set to: 0
 12774  003B8A  51B7               	movf	___llmod@divisor& (0+255),w,b
 12775  003B8C  5FB3               	subwf	___llmod@dividend& (0+255),f,b
 12776  003B8E  51B8               	movf	(___llmod@divisor+1)& (0+255),w,b
 12777  003B90  5BB4               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 12778  003B92  51B9               	movf	(___llmod@divisor+2)& (0+255),w,b
 12779  003B94  5BB5               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 12780  003B96  51BA               	movf	(___llmod@divisor+3)& (0+255),w,b
 12781  003B98  5BB6               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 12782  003B9A                     l2137:
 12783                           
 12784                           ; BSR set to: 0
 12785                           
 12786                           ; BSR set to: 0
 12787  003B9A  90D8               	bcf	status,0,c
 12788  003B9C  33BA               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 12789  003B9E  33B9               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 12790  003BA0  33B8               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 12791  003BA2  33B7               	rrcf	___llmod@divisor& (0+255),f,b
 12792                           
 12793                           ; BSR set to: 0
 12794  003BA4  2FBB               	decfsz	___llmod@counter& (0+255),f,b
 12795  003BA6  D7E7               	goto	u8930
 12796  003BA8                     l2138:
 12797                           
 12798                           ; BSR set to: 0
 12799                           
 12800                           ; BSR set to: 0
 12801  003BA8  C0B3  F0B3         	movff	___llmod@dividend,?___llmod
 12802  003BAC  C0B4  F0B4         	movff	___llmod@dividend+1,?___llmod+1
 12803  003BB0  C0B5  F0B5         	movff	___llmod@dividend+2,?___llmod+2
 12804  003BB4  C0B6  F0B6         	movff	___llmod@dividend+3,?___llmod+3
 12805                           
 12806                           ; BSR set to: 0
 12807  003BB8  0012               	return		;funcret
 12808  003BBA                     __end_of___llmod:
 12809                           	opt stack 0
 12810                           tosu	equ	0xFFF
 12811                           tosh	equ	0xFFE
 12812                           tosl	equ	0xFFD
 12813                           pclath	equ	0xFFA
 12814                           tblptru	equ	0xFF8
 12815                           tblptrh	equ	0xFF7
 12816                           tblptrl	equ	0xFF6
 12817                           tablat	equ	0xFF5
 12818                           prodh	equ	0xFF4
 12819                           prodl	equ	0xFF3
 12820                           intcon	equ	0xFF2
 12821                           intcon2	equ	0xFF1
 12822                           postinc0	equ	0xFEE
 12823                           wreg	equ	0xFE8
 12824                           indf1	equ	0xFE7
 12825                           postdec1	equ	0xFE5
 12826                           fsr1h	equ	0xFE2
 12827                           fsr1l	equ	0xFE1
 12828                           indf2	equ	0xFDF
 12829                           postinc2	equ	0xFDE
 12830                           postdec2	equ	0xFDD
 12831                           fsr2h	equ	0xFDA
 12832                           fsr2l	equ	0xFD9
 12833                           status	equ	0xFD8
 12834                           
 12835 ;; *************** function ___lldiv *****************
 12836 ;; Defined at:
 12837 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 12838 ;; Parameters:    Size  Location     Type
 12839 ;;  dividend        4   23[COMRAM] unsigned long 
 12840 ;;  divisor         4   27[COMRAM] unsigned long 
 12841 ;; Auto vars:     Size  Location     Type
 12842 ;;  quotient        4   31[COMRAM] unsigned long 
 12843 ;;  counter         1   35[COMRAM] unsigned char 
 12844 ;; Return value:  Size  Location     Type
 12845 ;;                  4   23[COMRAM] unsigned long 
 12846 ;; Registers used:
 12847 ;;		wreg, status,2, status,0
 12848 ;; Tracked objects:
 12849 ;;		On entry : 0/0
 12850 ;;		On exit  : 0/0
 12851 ;;		Unchanged: 0/0
 12852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12853 ;;      Params:         8       0       0       0       0       0       0
 12854 ;;      Locals:         5       0       0       0       0       0       0
 12855 ;;      Temps:          0       0       0       0       0       0       0
 12856 ;;      Totals:        13       0       0       0       0       0       0
 12857 ;;Total ram usage:       13 bytes
 12858 ;; Hardware stack levels used:    1
 12859 ;; Hardware stack levels required when called:    3
 12860 ;; This function calls:
 12861 ;;		Nothing
 12862 ;; This function is called by:
 12863 ;;		_sprintf
 12864 ;; This function uses a non-reentrant model
 12865 ;;
 12866                           
 12867                           	psect	text42
 12868  003890                     __ptext42:
 12869                           	opt stack 0
 12870  003890                     ___lldiv:
 12871                           	opt stack 25
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;incstack = 0
 12875  003890  0E00               	movlw	0
 12876  003892  6E20               	movwf	___lldiv@quotient,c
 12877  003894  0E00               	movlw	0
 12878  003896  6E21               	movwf	___lldiv@quotient+1,c
 12879  003898  0E00               	movlw	0
 12880  00389A  6E22               	movwf	___lldiv@quotient+2,c
 12881  00389C  0E00               	movlw	0
 12882  00389E  6E23               	movwf	___lldiv@quotient+3,c
 12883  0038A0  501C               	movf	___lldiv@divisor,w,c
 12884  0038A2  101D               	iorwf	___lldiv@divisor+1,w,c
 12885  0038A4  101E               	iorwf	___lldiv@divisor+2,w,c
 12886  0038A6  101F               	iorwf	___lldiv@divisor+3,w,c
 12887  0038A8  B4D8               	btfsc	status,2,c
 12888  0038AA  D02A               	goto	l2128
 12889  0038AC  0E01               	movlw	1
 12890  0038AE  6E24               	movwf	___lldiv@counter,c
 12891  0038B0  D006               	goto	l2123
 12892  0038B2  90D8               	bcf	status,0,c
 12893  0038B4  361C               	rlcf	___lldiv@divisor,f,c
 12894  0038B6  361D               	rlcf	___lldiv@divisor+1,f,c
 12895  0038B8  361E               	rlcf	___lldiv@divisor+2,f,c
 12896  0038BA  361F               	rlcf	___lldiv@divisor+3,f,c
 12897  0038BC  2A24               	incf	___lldiv@counter,f,c
 12898  0038BE                     l2123:
 12899  0038BE  AE1F               	btfss	___lldiv@divisor+3,7,c
 12900  0038C0  D7F8               	goto	l2124
 12901  0038C2                     u8900:
 12902  0038C2  90D8               	bcf	status,0,c
 12903  0038C4  3620               	rlcf	___lldiv@quotient,f,c
 12904  0038C6  3621               	rlcf	___lldiv@quotient+1,f,c
 12905  0038C8  3622               	rlcf	___lldiv@quotient+2,f,c
 12906  0038CA  3623               	rlcf	___lldiv@quotient+3,f,c
 12907  0038CC  501C               	movf	___lldiv@divisor,w,c
 12908  0038CE  5C18               	subwf	___lldiv@dividend,w,c
 12909  0038D0  501D               	movf	___lldiv@divisor+1,w,c
 12910  0038D2  5819               	subwfb	___lldiv@dividend+1,w,c
 12911  0038D4  501E               	movf	___lldiv@divisor+2,w,c
 12912  0038D6  581A               	subwfb	___lldiv@dividend+2,w,c
 12913  0038D8  501F               	movf	___lldiv@divisor+3,w,c
 12914  0038DA  581B               	subwfb	___lldiv@dividend+3,w,c
 12915  0038DC  A0D8               	btfss	status,0,c
 12916  0038DE  D009               	goto	l2127
 12917  0038E0  501C               	movf	___lldiv@divisor,w,c
 12918  0038E2  5E18               	subwf	___lldiv@dividend,f,c
 12919  0038E4  501D               	movf	___lldiv@divisor+1,w,c
 12920  0038E6  5A19               	subwfb	___lldiv@dividend+1,f,c
 12921  0038E8  501E               	movf	___lldiv@divisor+2,w,c
 12922  0038EA  5A1A               	subwfb	___lldiv@dividend+2,f,c
 12923  0038EC  501F               	movf	___lldiv@divisor+3,w,c
 12924  0038EE  5A1B               	subwfb	___lldiv@dividend+3,f,c
 12925  0038F0  8020               	bsf	___lldiv@quotient,0,c
 12926  0038F2                     l2127:
 12927  0038F2  90D8               	bcf	status,0,c
 12928  0038F4  321F               	rrcf	___lldiv@divisor+3,f,c
 12929  0038F6  321E               	rrcf	___lldiv@divisor+2,f,c
 12930  0038F8  321D               	rrcf	___lldiv@divisor+1,f,c
 12931  0038FA  321C               	rrcf	___lldiv@divisor,f,c
 12932  0038FC  2E24               	decfsz	___lldiv@counter,f,c
 12933  0038FE  D7E1               	goto	u8900
 12934  003900                     l2128:
 12935  003900  C020  F018         	movff	___lldiv@quotient,?___lldiv
 12936  003904  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
 12937  003908  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
 12938  00390C  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
 12939  003910  0012               	return		;funcret
 12940  003912                     __end_of___lldiv:
 12941                           	opt stack 0
 12942                           tosu	equ	0xFFF
 12943                           tosh	equ	0xFFE
 12944                           tosl	equ	0xFFD
 12945                           pclath	equ	0xFFA
 12946                           tblptru	equ	0xFF8
 12947                           tblptrh	equ	0xFF7
 12948                           tblptrl	equ	0xFF6
 12949                           tablat	equ	0xFF5
 12950                           prodh	equ	0xFF4
 12951                           prodl	equ	0xFF3
 12952                           intcon	equ	0xFF2
 12953                           intcon2	equ	0xFF1
 12954                           postinc0	equ	0xFEE
 12955                           wreg	equ	0xFE8
 12956                           indf1	equ	0xFE7
 12957                           postdec1	equ	0xFE5
 12958                           fsr1h	equ	0xFE2
 12959                           fsr1l	equ	0xFE1
 12960                           indf2	equ	0xFDF
 12961                           postinc2	equ	0xFDE
 12962                           postdec2	equ	0xFDD
 12963                           fsr2h	equ	0xFDA
 12964                           fsr2l	equ	0xFD9
 12965                           status	equ	0xFD8
 12966                           
 12967 ;; *************** function _UART_Write_Text *****************
 12968 ;; Defined at:
 12969 ;;		line 223 in file "EusartApp.c"
 12970 ;; Parameters:    Size  Location     Type
 12971 ;;  text            2   24[COMRAM] PTR unsigned char 
 12972 ;;		 -> PrintTxStatus@dest(80), PrintRxStatus@dest(80), PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), 
 12973 ;;		 -> STR_13(10), STR_12(10), STR_11(10), readUartByte@dest(50), 
 12974 ;;		 -> STR_9(9), SampleSingleChannel@dest(50), STR_7(10), STR_6(34), 
 12975 ;;		 -> STR_5(32), STR_4(10), STR_3(29), STR_2(33), 
 12976 ;;		 -> STR_1(10), 
 12977 ;; Auto vars:     Size  Location     Type
 12978 ;;  i               2   28[COMRAM] int 
 12979 ;; Return value:  Size  Location     Type
 12980 ;;                  1    wreg      void 
 12981 ;; Registers used:
 12982 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12983 ;; Tracked objects:
 12984 ;;		On entry : 0/0
 12985 ;;		On exit  : 0/0
 12986 ;;		Unchanged: 0/0
 12987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12988 ;;      Params:         2       0       0       0       0       0       0
 12989 ;;      Locals:         2       0       0       0       0       0       0
 12990 ;;      Temps:          2       0       0       0       0       0       0
 12991 ;;      Totals:         6       0       0       0       0       0       0
 12992 ;;Total ram usage:        6 bytes
 12993 ;; Hardware stack levels used:    1
 12994 ;; Hardware stack levels required when called:    4
 12995 ;; This function calls:
 12996 ;;		_EUSART1_Write
 12997 ;; This function is called by:
 12998 ;;		_AdcSingleSample
 12999 ;;		_SampleSingleChannel
 13000 ;;		_readUartByte
 13001 ;;		_SendUartSystemInitMessage
 13002 ;;		_PrintHelpScreen
 13003 ;;		_PrintRxStatus
 13004 ;;		_PrintTxStatus
 13005 ;; This function uses a non-reentrant model
 13006 ;;
 13007                           
 13008                           	psect	text43
 13009  003A02                     __ptext43:
 13010                           	opt stack 0
 13011  003A02                     _UART_Write_Text:
 13012                           	opt stack 25
 13013                           
 13014                           ;EusartApp.c: 225: for(int i =0;text[i]!='\0';i++)
 13015                           
 13016                           ;incstack = 0
 13017  003A02  0E00               	movlw	0
 13018  003A04  6E1E               	movwf	UART_Write_Text@i+1,c
 13019  003A06  0E00               	movlw	0
 13020  003A08  6E1D               	movwf	UART_Write_Text@i,c
 13021  003A0A  D01A               	goto	l323
 13022  003A0C                     
 13023                           ;EusartApp.c: 226: {
 13024                           ;EusartApp.c: 227: EUSART1_Write(text[i]);
 13025  003A0C  501D               	movf	UART_Write_Text@i,w,c
 13026  003A0E  2419               	addwf	UART_Write_Text@text,w,c
 13027  003A10  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 13028  003A12  501E               	movf	UART_Write_Text@i+1,w,c
 13029  003A14  201A               	addwfc	UART_Write_Text@text+1,w,c
 13030  003A16  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 13031  003A18  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 13032  003A1C  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 13033  003A20  6AF8               	clrf	tblptru,c
 13034  003A22  0E05               	movlw	(high __ramtop+-1)
 13035  003A24  64F7               	cpfsgt	tblptrh,c
 13036  003A26  D003               	bra	u9147
 13037  003A28  0008               	tblrd		*
 13038  003A2A  50F5               	movf	tablat,w,c
 13039  003A2C  D005               	bra	u9140
 13040  003A2E                     u9147:
 13041  003A2E  CFF6 FFE9          	movff	tblptrl,fsr0l
 13042  003A32  CFF7 FFEA          	movff	tblptrh,fsr0h
 13043  003A36  50EF               	movf	indf0,w,c
 13044  003A38                     u9140:
 13045  003A38  EC6E  F020         	call	_EUSART1_Write
 13046  003A3C  4A1D               	infsnz	UART_Write_Text@i,f,c
 13047  003A3E  2A1E               	incf	UART_Write_Text@i+1,f,c
 13048  003A40                     l323:
 13049  003A40  501D               	movf	UART_Write_Text@i,w,c
 13050  003A42  2419               	addwf	UART_Write_Text@text,w,c
 13051  003A44  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 13052  003A46  501E               	movf	UART_Write_Text@i+1,w,c
 13053  003A48  201A               	addwfc	UART_Write_Text@text+1,w,c
 13054  003A4A  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 13055  003A4C  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 13056  003A50  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 13057  003A54  6AF8               	clrf	tblptru,c
 13058  003A56  0E05               	movlw	(high __ramtop+-1)
 13059  003A58  64F7               	cpfsgt	tblptrh,c
 13060  003A5A  D003               	bra	u9157
 13061  003A5C  0008               	tblrd		*
 13062  003A5E  50F5               	movf	tablat,w,c
 13063  003A60  D005               	bra	u9150
 13064  003A62                     u9157:
 13065  003A62  CFF6 FFE9          	movff	tblptrl,fsr0l
 13066  003A66  CFF7 FFEA          	movff	tblptrh,fsr0h
 13067  003A6A  50EF               	movf	indf0,w,c
 13068  003A6C                     u9150:
 13069  003A6C  0900               	iorlw	0
 13070  003A6E  B4D8               	btfsc	status,2,c
 13071  003A70  0012               	return	
 13072  003A72  D7CC               	goto	l324
 13073  003A74                     __end_of_UART_Write_Text:
 13074                           	opt stack 0
 13075                           tosu	equ	0xFFF
 13076                           tosh	equ	0xFFE
 13077                           tosl	equ	0xFFD
 13078                           pclath	equ	0xFFA
 13079                           tblptru	equ	0xFF8
 13080                           tblptrh	equ	0xFF7
 13081                           tblptrl	equ	0xFF6
 13082                           tablat	equ	0xFF5
 13083                           prodh	equ	0xFF4
 13084                           prodl	equ	0xFF3
 13085                           intcon	equ	0xFF2
 13086                           intcon2	equ	0xFF1
 13087                           indf0	equ	0xFEF
 13088                           postinc0	equ	0xFEE
 13089                           fsr0h	equ	0xFEA
 13090                           fsr0l	equ	0xFE9
 13091                           wreg	equ	0xFE8
 13092                           indf1	equ	0xFE7
 13093                           postdec1	equ	0xFE5
 13094                           fsr1h	equ	0xFE2
 13095                           fsr1l	equ	0xFE1
 13096                           indf2	equ	0xFDF
 13097                           postinc2	equ	0xFDE
 13098                           postdec2	equ	0xFDD
 13099                           fsr2h	equ	0xFDA
 13100                           fsr2l	equ	0xFD9
 13101                           status	equ	0xFD8
 13102                           
 13103 ;; *************** function _EUSART1_Write *****************
 13104 ;; Defined at:
 13105 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 13106 ;; Parameters:    Size  Location     Type
 13107 ;;  txData          1    wreg     unsigned char 
 13108 ;; Auto vars:     Size  Location     Type
 13109 ;;  txData          1   23[COMRAM] unsigned char 
 13110 ;; Return value:  Size  Location     Type
 13111 ;;                  1    wreg      void 
 13112 ;; Registers used:
 13113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13114 ;; Tracked objects:
 13115 ;;		On entry : 0/0
 13116 ;;		On exit  : 0/0
 13117 ;;		Unchanged: 0/0
 13118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13119 ;;      Params:         0       0       0       0       0       0       0
 13120 ;;      Locals:         1       0       0       0       0       0       0
 13121 ;;      Temps:          0       0       0       0       0       0       0
 13122 ;;      Totals:         1       0       0       0       0       0       0
 13123 ;;Total ram usage:        1 bytes
 13124 ;; Hardware stack levels used:    1
 13125 ;; Hardware stack levels required when called:    3
 13126 ;; This function calls:
 13127 ;;		Nothing
 13128 ;; This function is called by:
 13129 ;;		_UART_Write_Text
 13130 ;;		_WriteUartMessage
 13131 ;; This function uses a non-reentrant model
 13132 ;;
 13133                           
 13134                           	psect	text44
 13135  0040DC                     __ptext44:
 13136                           	opt stack 0
 13137  0040DC                     _EUSART1_Write:
 13138                           	opt stack 25
 13139                           
 13140                           ;incstack = 0
 13141                           ;EUSART1_Write@txData stored from wreg
 13142  0040DC  6E18               	movwf	EUSART1_Write@txData,c
 13143  0040DE                     
 13144                           ;eusart1.c: 160: {
 13145                           
 13146                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 13147  0040DE  0101               	movlb	1	; () banked
 13148  0040E0  51F3               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 13149  0040E2  B4D8               	btfsc	status,2,c
 13150  0040E4  D7FC               	goto	l8555
 13151                           
 13152                           ; BSR set to: 1
 13153                           ;eusart1.c: 161: }
 13154                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 13155  0040E6  B89D               	btfsc	3997,4,c	;volatile
 13156  0040E8  D003               	goto	l976
 13157                           
 13158                           ; BSR set to: 1
 13159                           ;eusart1.c: 164: {
 13160                           ;eusart1.c: 165: TXREG1 = txData;
 13161  0040EA  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 13162                           
 13163                           ;eusart1.c: 166: }
 13164  0040EE  D012               	goto	l977
 13165  0040F0                     l976:
 13166                           
 13167                           ; BSR set to: 1
 13168                           ;eusart1.c: 167: else
 13169                           ;eusart1.c: 168: {
 13170                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 13171  0040F0  989D               	bcf	3997,4,c	;volatile
 13172                           
 13173                           ; BSR set to: 1
 13174                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 13175  0040F2  503C               	movf	_eusart1TxHead,w,c	;volatile
 13176  0040F4  0D01               	mullw	1
 13177  0040F6  0E00               	movlw	low _eusart1TxBuffer
 13178  0040F8  24F3               	addwf	prodl,w,c
 13179  0040FA  6ED9               	movwf	fsr2l,c
 13180  0040FC  0E02               	movlw	high _eusart1TxBuffer
 13181  0040FE  20F4               	addwfc	prodh,w,c
 13182  004100  6EDA               	movwf	fsr2h,c
 13183  004102  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 13184                           
 13185                           ; BSR set to: 1
 13186  004106  2A3C               	incf	_eusart1TxHead,f,c	;volatile
 13187                           
 13188                           ; BSR set to: 1
 13189                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 13190  004108  0E45               	movlw	69
 13191  00410A  643C               	cpfsgt	_eusart1TxHead,c	;volatile
 13192  00410C  D002               	goto	l978
 13193                           
 13194                           ; BSR set to: 1
 13195                           ;eusart1.c: 172: {
 13196                           ;eusart1.c: 173: eusart1TxHead = 0;
 13197  00410E  0E00               	movlw	0
 13198  004110  6E3C               	movwf	_eusart1TxHead,c	;volatile
 13199  004112                     l978:
 13200                           
 13201                           ; BSR set to: 1
 13202                           ;eusart1.c: 174: }
 13203                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 13204                           
 13205                           ; BSR set to: 1
 13206  004112  07F3               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 13207  004114                     l977:
 13208                           
 13209                           ; BSR set to: 1
 13210                           ;eusart1.c: 176: }
 13211                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 13212                           
 13213                           ; BSR set to: 1
 13214  004114  889D               	bsf	3997,4,c	;volatile
 13215                           
 13216                           ; BSR set to: 1
 13217  004116  0012               	return		;funcret
 13218  004118                     __end_of_EUSART1_Write:
 13219                           	opt stack 0
 13220                           tosu	equ	0xFFF
 13221                           tosh	equ	0xFFE
 13222                           tosl	equ	0xFFD
 13223                           pclath	equ	0xFFA
 13224                           tblptru	equ	0xFF8
 13225                           tblptrh	equ	0xFF7
 13226                           tblptrl	equ	0xFF6
 13227                           tablat	equ	0xFF5
 13228                           prodh	equ	0xFF4
 13229                           prodl	equ	0xFF3
 13230                           intcon	equ	0xFF2
 13231                           intcon2	equ	0xFF1
 13232                           indf0	equ	0xFEF
 13233                           postinc0	equ	0xFEE
 13234                           fsr0h	equ	0xFEA
 13235                           fsr0l	equ	0xFE9
 13236                           wreg	equ	0xFE8
 13237                           indf1	equ	0xFE7
 13238                           postdec1	equ	0xFE5
 13239                           fsr1h	equ	0xFE2
 13240                           fsr1l	equ	0xFE1
 13241                           indf2	equ	0xFDF
 13242                           postinc2	equ	0xFDE
 13243                           postdec2	equ	0xFDD
 13244                           fsr2h	equ	0xFDA
 13245                           fsr2l	equ	0xFD9
 13246                           status	equ	0xFD8
 13247                           
 13248 ;; *************** function _SampleAllChannels *****************
 13249 ;; Defined at:
 13250 ;;		line 122 in file "AdcApp.c"
 13251 ;; Parameters:    Size  Location     Type
 13252 ;;		None
 13253 ;; Auto vars:     Size  Location     Type
 13254 ;;  _adcResult      2   86[BANK0 ] unsigned int 
 13255 ;;  adcRes          2   88[BANK0 ] unsigned int 
 13256 ;;  i               1   90[BANK0 ] unsigned char 
 13257 ;; Return value:  Size  Location     Type
 13258 ;;                  1    wreg      void 
 13259 ;; Registers used:
 13260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13261 ;; Tracked objects:
 13262 ;;		On entry : 0/0
 13263 ;;		On exit  : 0/0
 13264 ;;		Unchanged: 0/0
 13265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13266 ;;      Params:         0       0       0       0       0       0       0
 13267 ;;      Locals:         0       8       0       0       0       0       0
 13268 ;;      Temps:          0       0       0       0       0       0       0
 13269 ;;      Totals:         0       8       0       0       0       0       0
 13270 ;;Total ram usage:        8 bytes
 13271 ;; Hardware stack levels used:    1
 13272 ;; Hardware stack levels required when called:    8
 13273 ;; This function calls:
 13274 ;;		_ADC_GetConversion
 13275 ;;		___ftdiv
 13276 ;;		___ftmul
 13277 ;;		___fttol
 13278 ;;		___lwtoft
 13279 ;;		_pow
 13280 ;; This function is called by:
 13281 ;;		_main
 13282 ;; This function uses a non-reentrant model
 13283 ;;
 13284                           
 13285                           	psect	text45
 13286  002292                     __ptext45:
 13287                           	opt stack 0
 13288  002292                     _SampleAllChannels:
 13289                           	opt stack 22
 13290                           
 13291                           ;AdcApp.c: 124: uint16_t adcRes = 0x0;
 13292                           
 13293                           ; BSR set to: 1
 13294                           ;incstack = 0
 13295  002292  0E00               	movlw	0
 13296  002294  0100               	movlb	0	; () banked
 13297  002296  6FB9               	movwf	(SampleAllChannels@adcRes+1)& (0+255),b
 13298  002298  0E00               	movlw	0
 13299  00229A  6FB8               	movwf	SampleAllChannels@adcRes& (0+255),b
 13300                           
 13301                           ;AdcApp.c: 125: uint8_t i;
 13302                           ;AdcApp.c: 126: for (i=1;i<=4;i++)
 13303  00229C  0E01               	movlw	1
 13304  00229E  6FBA               	movwf	SampleAllChannels@i& (0+255),b
 13305  0022A0                     l9903:
 13306                           
 13307                           ; BSR set to: 0
 13308  0022A0  0E04               	movlw	4
 13309  0022A2  65BA               	cpfsgt	SampleAllChannels@i& (0+255),b
 13310  0022A4  D001               	goto	l176
 13311  0022A6  0012               	return	
 13312  0022A8                     l176:
 13313                           
 13314                           ; BSR set to: 0
 13315                           ;AdcApp.c: 127: {
 13316                           ;AdcApp.c: 128: adc_result_t _adcResult = ADC_GetConversion(channelArr[i]);
 13317                           
 13318                           ; BSR set to: 0
 13319  0022A8  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 13320  0022AA  0D01               	mullw	1
 13321  0022AC  0EBD               	movlw	low _channelArr
 13322  0022AE  24F3               	addwf	prodl,w,c
 13323  0022B0  6EF6               	movwf	tblptrl,c
 13324  0022B2  0E78               	movlw	high _channelArr
 13325  0022B4  20F4               	addwfc	prodh,w,c
 13326  0022B6  6EF7               	movwf	tblptrh,c
 13327  0022B8                     	if	0	;There are less than 3 active tblptr bytes
 13328  0022B8                     	endif
 13329  0022B8  0008               	tblrd		*
 13330  0022BA  50F5               	movf	tablat,w,c
 13331  0022BC  EC85  F021         	call	_ADC_GetConversion
 13332  0022C0  C018  F0B6         	movff	?_ADC_GetConversion,SampleAllChannels@_adcResult
 13333  0022C4  C019  F0B7         	movff	?_ADC_GetConversion+1,SampleAllChannels@_adcResult+1
 13334                           
 13335                           ;AdcApp.c: 129: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13336  0022C8  0E00               	movlw	0
 13337  0022CA  0100               	movlb	0	; () banked
 13338  0022CC  6FA5               	movwf	pow@y& (0+255),b
 13339  0022CE  0E20               	movlw	32
 13340  0022D0  6FA6               	movwf	(pow@y+1)& (0+255),b
 13341  0022D2  0E41               	movlw	65
 13342  0022D4  6FA7               	movwf	(pow@y+2)& (0+255),b
 13343  0022D6  0E00               	movlw	0
 13344  0022D8  6FA2               	movwf	pow@x& (0+255),b
 13345  0022DA  0E00               	movlw	0
 13346  0022DC  6FA3               	movwf	(pow@x+1)& (0+255),b
 13347  0022DE  0E40               	movlw	64
 13348  0022E0  6FA4               	movwf	(pow@x+2)& (0+255),b
 13349  0022E2  EC89  F010         	call	_pow	;wreg free
 13350  0022E6  C0A2  F0B3         	movff	?_pow,_SampleAllChannels$3939
 13351  0022EA  C0A3  F0B4         	movff	?_pow+1,_SampleAllChannels$3939+1
 13352  0022EE  C0A4  F0B5         	movff	?_pow+2,_SampleAllChannels$3939+2
 13353                           
 13354                           ;AdcApp.c: 129: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13355  0022F2  0EC0               	movlw	192
 13356  0022F4  0100               	movlb	0	; () banked
 13357  0022F6  6F69               	movwf	___ftmul@f2& (0+255),b
 13358  0022F8  0E50               	movlw	80
 13359  0022FA  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 13360  0022FC  0E45               	movlw	69
 13361  0022FE  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 13362  002300  C0B3  F026         	movff	_SampleAllChannels$3939,___ftdiv@f2
 13363  002304  C0B4  F027         	movff	_SampleAllChannels$3939+1,___ftdiv@f2+1
 13364  002308  C0B5  F028         	movff	_SampleAllChannels$3939+2,___ftdiv@f2+2
 13365  00230C  C0B6  F020         	movff	SampleAllChannels@_adcResult,___lwtoft@c
 13366  002310  C0B7  F021         	movff	SampleAllChannels@_adcResult+1,___lwtoft@c+1
 13367  002314  ECFF  F021         	call	___lwtoft	;wreg free
 13368  002318  C020  F023         	movff	?___lwtoft,___ftdiv@f1
 13369  00231C  C021  F024         	movff	?___lwtoft+1,___ftdiv@f1+1
 13370  002320  C022  F025         	movff	?___lwtoft+2,___ftdiv@f1+2
 13371  002324  ECE8  F016         	call	___ftdiv	;wreg free
 13372  002328  C023  F066         	movff	?___ftdiv,___ftmul@f1
 13373  00232C  C024  F067         	movff	?___ftdiv+1,___ftmul@f1+1
 13374  002330  C025  F068         	movff	?___ftdiv+2,___ftmul@f1+2
 13375  002334  EC6D  F016         	call	___ftmul	;wreg free
 13376  002338  C066  F079         	movff	?___ftmul,___fttol@f1
 13377  00233C  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
 13378  002340  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
 13379  002344  ECF1  F015         	call	___fttol	;wreg free
 13380  002348  C079  F0B8         	movff	?___fttol,SampleAllChannels@adcRes
 13381  00234C  C07A  F0B9         	movff	?___fttol+1,SampleAllChannels@adcRes+1
 13382                           
 13383                           ;AdcApp.c: 130: if(channelArr[i] == 0x6) lastAdcTemp = adcRes;
 13384  002350  0100               	movlb	0	; () banked
 13385  002352  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 13386  002354  0D01               	mullw	1
 13387  002356  0EBD               	movlw	low _channelArr
 13388  002358  24F3               	addwf	prodl,w,c
 13389  00235A  6EF6               	movwf	tblptrl,c
 13390  00235C  0E78               	movlw	high _channelArr
 13391  00235E  20F4               	addwfc	prodh,w,c
 13392  002360  6EF7               	movwf	tblptrh,c
 13393  002362                     	if	0	;There are less than 3 active tblptr bytes
 13394  002362                     	endif
 13395  002362  0008               	tblrd		*
 13396  002364  50F5               	movf	tablat,w,c
 13397  002366  0A06               	xorlw	6
 13398  002368  A4D8               	btfss	status,2,c
 13399  00236A  D004               	goto	l178
 13400                           
 13401                           ; BSR set to: 0
 13402  00236C  C0B8  F1DE         	movff	SampleAllChannels@adcRes,_lastAdcTemp	;volatile
 13403  002370  C0B9  F1DF         	movff	SampleAllChannels@adcRes+1,_lastAdcTemp+1	;volatile
 13404  002374                     l178:
 13405                           
 13406                           ; BSR set to: 0
 13407                           ;AdcApp.c: 131: if(channelArr[i] == 0x5) lastAdcFfwrRSSI = adcRes;
 13408                           
 13409                           ; BSR set to: 0
 13410  002374  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 13411  002376  0D01               	mullw	1
 13412  002378  0EBD               	movlw	low _channelArr
 13413  00237A  24F3               	addwf	prodl,w,c
 13414  00237C  6EF6               	movwf	tblptrl,c
 13415  00237E  0E78               	movlw	high _channelArr
 13416  002380  20F4               	addwfc	prodh,w,c
 13417  002382  6EF7               	movwf	tblptrh,c
 13418  002384                     	if	0	;There are less than 3 active tblptr bytes
 13419  002384                     	endif
 13420  002384  0008               	tblrd		*
 13421  002386  50F5               	movf	tablat,w,c
 13422  002388  0A05               	xorlw	5
 13423  00238A  A4D8               	btfss	status,2,c
 13424  00238C  D004               	goto	l179
 13425                           
 13426                           ; BSR set to: 0
 13427  00238E  C0B8  F1DC         	movff	SampleAllChannels@adcRes,_lastAdcFfwrRSSI	;volatile
 13428  002392  C0B9  F1DD         	movff	SampleAllChannels@adcRes+1,_lastAdcFfwrRSSI+1	;volatile
 13429  002396                     l179:
 13430                           
 13431                           ; BSR set to: 0
 13432                           ;AdcApp.c: 132: if(channelArr[i] == 0x4) lastAdcRREV = adcRes;
 13433                           
 13434                           ; BSR set to: 0
 13435  002396  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 13436  002398  0D01               	mullw	1
 13437  00239A  0EBD               	movlw	low _channelArr
 13438  00239C  24F3               	addwf	prodl,w,c
 13439  00239E  6EF6               	movwf	tblptrl,c
 13440  0023A0  0E78               	movlw	high _channelArr
 13441  0023A2  20F4               	addwfc	prodh,w,c
 13442  0023A4  6EF7               	movwf	tblptrh,c
 13443  0023A6                     	if	0	;There are less than 3 active tblptr bytes
 13444  0023A6                     	endif
 13445  0023A6  0008               	tblrd		*
 13446  0023A8  50F5               	movf	tablat,w,c
 13447  0023AA  0A04               	xorlw	4
 13448  0023AC  A4D8               	btfss	status,2,c
 13449  0023AE  D004               	goto	l180
 13450                           
 13451                           ; BSR set to: 0
 13452  0023B0  C0B8  F1DA         	movff	SampleAllChannels@adcRes,_lastAdcRREV	;volatile
 13453  0023B4  C0B9  F1DB         	movff	SampleAllChannels@adcRes+1,_lastAdcRREV+1	;volatile
 13454  0023B8                     l180:
 13455                           
 13456                           ; BSR set to: 0
 13457                           ;AdcApp.c: 133: if(channelArr[i] == 0x7) lastAdcVgMon = adcRes;
 13458                           
 13459                           ; BSR set to: 0
 13460  0023B8  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 13461  0023BA  0D01               	mullw	1
 13462  0023BC  0EBD               	movlw	low _channelArr
 13463  0023BE  24F3               	addwf	prodl,w,c
 13464  0023C0  6EF6               	movwf	tblptrl,c
 13465  0023C2  0E78               	movlw	high _channelArr
 13466  0023C4  20F4               	addwfc	prodh,w,c
 13467  0023C6  6EF7               	movwf	tblptrh,c
 13468  0023C8                     	if	0	;There are less than 3 active tblptr bytes
 13469  0023C8                     	endif
 13470  0023C8  0008               	tblrd		*
 13471  0023CA  50F5               	movf	tablat,w,c
 13472  0023CC  0A07               	xorlw	7
 13473  0023CE  A4D8               	btfss	status,2,c
 13474  0023D0  D004               	goto	l181
 13475                           
 13476                           ; BSR set to: 0
 13477  0023D2  C0B8  F1D8         	movff	SampleAllChannels@adcRes,_lastAdcVgMon	;volatile
 13478  0023D6  C0B9  F1D9         	movff	SampleAllChannels@adcRes+1,_lastAdcVgMon+1	;volatile
 13479  0023DA                     l181:
 13480                           
 13481                           ; BSR set to: 0
 13482                           
 13483                           ; BSR set to: 0
 13484  0023DA  2BBA               	incf	SampleAllChannels@i& (0+255),f,b
 13485  0023DC  D761               	goto	l9903
 13486  0023DE                     __end_of_SampleAllChannels:
 13487                           	opt stack 0
 13488                           tosu	equ	0xFFF
 13489                           tosh	equ	0xFFE
 13490                           tosl	equ	0xFFD
 13491                           pclath	equ	0xFFA
 13492                           tblptru	equ	0xFF8
 13493                           tblptrh	equ	0xFF7
 13494                           tblptrl	equ	0xFF6
 13495                           tablat	equ	0xFF5
 13496                           prodh	equ	0xFF4
 13497                           prodl	equ	0xFF3
 13498                           intcon	equ	0xFF2
 13499                           intcon2	equ	0xFF1
 13500                           indf0	equ	0xFEF
 13501                           postinc0	equ	0xFEE
 13502                           fsr0h	equ	0xFEA
 13503                           fsr0l	equ	0xFE9
 13504                           wreg	equ	0xFE8
 13505                           indf1	equ	0xFE7
 13506                           postdec1	equ	0xFE5
 13507                           fsr1h	equ	0xFE2
 13508                           fsr1l	equ	0xFE1
 13509                           indf2	equ	0xFDF
 13510                           postinc2	equ	0xFDE
 13511                           postdec2	equ	0xFDD
 13512                           fsr2h	equ	0xFDA
 13513                           fsr2l	equ	0xFD9
 13514                           status	equ	0xFD8
 13515                           
 13516 ;; *************** function ___lwtoft *****************
 13517 ;; Defined at:
 13518 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 13519 ;; Parameters:    Size  Location     Type
 13520 ;;  c               2   31[COMRAM] unsigned int 
 13521 ;; Auto vars:     Size  Location     Type
 13522 ;;		None
 13523 ;; Return value:  Size  Location     Type
 13524 ;;                  3   31[COMRAM] float 
 13525 ;; Registers used:
 13526 ;;		wreg, status,2, status,0, cstack
 13527 ;; Tracked objects:
 13528 ;;		On entry : 0/0
 13529 ;;		On exit  : 0/0
 13530 ;;		Unchanged: 0/0
 13531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13532 ;;      Params:         3       0       0       0       0       0       0
 13533 ;;      Locals:         0       0       0       0       0       0       0
 13534 ;;      Temps:          0       0       0       0       0       0       0
 13535 ;;      Totals:         3       0       0       0       0       0       0
 13536 ;;Total ram usage:        3 bytes
 13537 ;; Hardware stack levels used:    1
 13538 ;; Hardware stack levels required when called:    4
 13539 ;; This function calls:
 13540 ;;		___ftpack
 13541 ;; This function is called by:
 13542 ;;		_SampleSingleChannel
 13543 ;;		_SampleAllChannels
 13544 ;;		_CollectRxStatusParams
 13545 ;;		_CollectTxStatusParams
 13546 ;;		_DacAnalogToDigitalSpi
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           	psect	text46
 13551  0043FE                     __ptext46:
 13552                           	opt stack 0
 13553  0043FE                     ___lwtoft:
 13554                           	opt stack 23
 13555                           
 13556                           ; BSR set to: 0
 13557                           ;incstack = 0
 13558  0043FE  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 13559  004402  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 13560  004406  6A1A               	clrf	___ftpack@arg+2,c
 13561  004408  0E8E               	movlw	142
 13562  00440A  6E1B               	movwf	___ftpack@exp,c
 13563  00440C  0E00               	movlw	0
 13564  00440E  6E1C               	movwf	___ftpack@sign,c
 13565  004410  EC3F  F01A         	call	___ftpack	;wreg free
 13566  004414  C018  F020         	movff	?___ftpack,?___lwtoft
 13567  004418  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 13568  00441C  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 13569  004420  0012               	return	
 13570  004422                     __end_of___lwtoft:
 13571                           	opt stack 0
 13572                           tosu	equ	0xFFF
 13573                           tosh	equ	0xFFE
 13574                           tosl	equ	0xFFD
 13575                           pclath	equ	0xFFA
 13576                           tblptru	equ	0xFF8
 13577                           tblptrh	equ	0xFF7
 13578                           tblptrl	equ	0xFF6
 13579                           tablat	equ	0xFF5
 13580                           prodh	equ	0xFF4
 13581                           prodl	equ	0xFF3
 13582                           intcon	equ	0xFF2
 13583                           intcon2	equ	0xFF1
 13584                           indf0	equ	0xFEF
 13585                           postinc0	equ	0xFEE
 13586                           fsr0h	equ	0xFEA
 13587                           fsr0l	equ	0xFE9
 13588                           wreg	equ	0xFE8
 13589                           indf1	equ	0xFE7
 13590                           postdec1	equ	0xFE5
 13591                           fsr1h	equ	0xFE2
 13592                           fsr1l	equ	0xFE1
 13593                           indf2	equ	0xFDF
 13594                           postinc2	equ	0xFDE
 13595                           postdec2	equ	0xFDD
 13596                           fsr2h	equ	0xFDA
 13597                           fsr2l	equ	0xFD9
 13598                           status	equ	0xFD8
 13599                           
 13600 ;; *************** function _ADC_GetConversion *****************
 13601 ;; Defined at:
 13602 ;;		line 106 in file "mcc_generated_files/adc.c"
 13603 ;; Parameters:    Size  Location     Type
 13604 ;;  channel         1    wreg     enum E6975
 13605 ;; Auto vars:     Size  Location     Type
 13606 ;;  channel         1   27[COMRAM] enum E6975
 13607 ;; Return value:  Size  Location     Type
 13608 ;;                  2   23[COMRAM] unsigned int 
 13609 ;; Registers used:
 13610 ;;		wreg, status,2, status,0
 13611 ;; Tracked objects:
 13612 ;;		On entry : 0/0
 13613 ;;		On exit  : 0/0
 13614 ;;		Unchanged: 0/0
 13615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13616 ;;      Params:         2       0       0       0       0       0       0
 13617 ;;      Locals:         1       0       0       0       0       0       0
 13618 ;;      Temps:          2       0       0       0       0       0       0
 13619 ;;      Totals:         5       0       0       0       0       0       0
 13620 ;;Total ram usage:        5 bytes
 13621 ;; Hardware stack levels used:    1
 13622 ;; Hardware stack levels required when called:    3
 13623 ;; This function calls:
 13624 ;;		Nothing
 13625 ;; This function is called by:
 13626 ;;		_SampleSingleChannel
 13627 ;;		_SampleAllChannels
 13628 ;; This function uses a non-reentrant model
 13629 ;;
 13630                           
 13631                           	psect	text47
 13632  00430A                     __ptext47:
 13633                           	opt stack 0
 13634  00430A                     _ADC_GetConversion:
 13635                           	opt stack 26
 13636                           
 13637                           ;incstack = 0
 13638                           ;ADC_GetConversion@channel stored from wreg
 13639  00430A  6E1C               	movwf	ADC_GetConversion@channel,c
 13640                           
 13641                           ;adc.c: 109: ADCON0bits.CHS = channel;
 13642  00430C  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 13643  004310  461A               	rlncf	??_ADC_GetConversion,f,c
 13644  004312  461A               	rlncf	??_ADC_GetConversion,f,c
 13645  004314  50C2               	movf	4034,w,c	;volatile
 13646  004316  181A               	xorwf	??_ADC_GetConversion,w,c
 13647  004318  0B83               	andlw	-125
 13648  00431A  181A               	xorwf	??_ADC_GetConversion,w,c
 13649  00431C  6EC2               	movwf	4034,c	;volatile
 13650                           
 13651                           ;adc.c: 112: ADCON0bits.ADON = 1;
 13652  00431E  80C2               	bsf	4034,0,c	;volatile
 13653                           
 13654                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 13655  004320  82C2               	bsf	4034,1,c	;volatile
 13656  004322                     
 13657                           ;adc.c: 119: {
 13658  004322  B2C2               	btfsc	4034,1,c	;volatile
 13659  004324  D7FE               	goto	l1189
 13660                           
 13661                           ;adc.c: 120: }
 13662                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 13663  004326  50C4               	movf	4036,w,c	;volatile
 13664  004328  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 13665  00432A  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 13666  00432C  50C3               	movf	4035,w,c	;volatile
 13667  00432E  241A               	addwf	??_ADC_GetConversion,w,c
 13668  004330  6E18               	movwf	?_ADC_GetConversion,c
 13669  004332  0E00               	movlw	0
 13670  004334  201B               	addwfc	??_ADC_GetConversion+1,w,c
 13671  004336  6E19               	movwf	?_ADC_GetConversion+1,c
 13672  004338  0012               	return	
 13673  00433A                     __end_of_ADC_GetConversion:
 13674                           	opt stack 0
 13675                           tosu	equ	0xFFF
 13676                           tosh	equ	0xFFE
 13677                           tosl	equ	0xFFD
 13678                           pclath	equ	0xFFA
 13679                           tblptru	equ	0xFF8
 13680                           tblptrh	equ	0xFF7
 13681                           tblptrl	equ	0xFF6
 13682                           tablat	equ	0xFF5
 13683                           prodh	equ	0xFF4
 13684                           prodl	equ	0xFF3
 13685                           intcon	equ	0xFF2
 13686                           intcon2	equ	0xFF1
 13687                           indf0	equ	0xFEF
 13688                           postinc0	equ	0xFEE
 13689                           fsr0h	equ	0xFEA
 13690                           fsr0l	equ	0xFE9
 13691                           wreg	equ	0xFE8
 13692                           indf1	equ	0xFE7
 13693                           postdec1	equ	0xFE5
 13694                           fsr1h	equ	0xFE2
 13695                           fsr1l	equ	0xFE1
 13696                           indf2	equ	0xFDF
 13697                           postinc2	equ	0xFDE
 13698                           postdec2	equ	0xFDD
 13699                           fsr2h	equ	0xFDA
 13700                           fsr2l	equ	0xFD9
 13701                           status	equ	0xFD8
 13702                           
 13703 ;; *************** function _InitSystemApplicationManagers *****************
 13704 ;; Defined at:
 13705 ;;		line 33 in file "SystemSettings.c"
 13706 ;; Parameters:    Size  Location     Type
 13707 ;;		None
 13708 ;; Auto vars:     Size  Location     Type
 13709 ;;		None
 13710 ;; Return value:  Size  Location     Type
 13711 ;;                  1    wreg      void 
 13712 ;; Registers used:
 13713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13714 ;; Tracked objects:
 13715 ;;		On entry : 0/0
 13716 ;;		On exit  : 0/0
 13717 ;;		Unchanged: 0/0
 13718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13719 ;;      Params:         0       0       0       0       0       0       0
 13720 ;;      Locals:         0       0       0       0       0       0       0
 13721 ;;      Temps:          0       0       0       0       0       0       0
 13722 ;;      Totals:         0       0       0       0       0       0       0
 13723 ;;Total ram usage:        0 bytes
 13724 ;; Hardware stack levels used:    1
 13725 ;; Hardware stack levels required when called:   10
 13726 ;; This function calls:
 13727 ;;		_ClearMcuRunTime
 13728 ;;		_DacInit
 13729 ;;		_InitAdcApplicationMgr
 13730 ;;		_PLLInitialize
 13731 ;;		_TMR0_StartTimer
 13732 ;; This function is called by:
 13733 ;;		_main
 13734 ;; This function uses a non-reentrant model
 13735 ;;
 13736                           
 13737                           	psect	text48
 13738  004504                     __ptext48:
 13739                           	opt stack 0
 13740  004504                     _InitSystemApplicationManagers:
 13741                           	opt stack 20
 13742                           
 13743                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 13744                           
 13745                           ;incstack = 0
 13746  004504  ECCE  F022         	call	_InitAdcApplicationMgr	;wreg free
 13747                           
 13748                           ;SystemSettings.c: 39: TMR0_StartTimer();
 13749  004508  ECD8  F022         	call	_TMR0_StartTimer	;wreg free
 13750                           
 13751                           ;SystemSettings.c: 42: PLLInitialize();
 13752  00450C  ECC4  F00F         	call	_PLLInitialize	;wreg free
 13753                           
 13754                           ;SystemSettings.c: 45: ClearMcuRunTime();
 13755  004510  ECA1  F022         	call	_ClearMcuRunTime	;wreg free
 13756                           
 13757                           ;SystemSettings.c: 48: DacInit();
 13758  004514  ECCF  F017         	call	_DacInit	;wreg free
 13759  004518  0012               	return		;funcret
 13760  00451A                     __end_of_InitSystemApplicationManagers:
 13761                           	opt stack 0
 13762                           tosu	equ	0xFFF
 13763                           tosh	equ	0xFFE
 13764                           tosl	equ	0xFFD
 13765                           pclath	equ	0xFFA
 13766                           tblptru	equ	0xFF8
 13767                           tblptrh	equ	0xFF7
 13768                           tblptrl	equ	0xFF6
 13769                           tablat	equ	0xFF5
 13770                           prodh	equ	0xFF4
 13771                           prodl	equ	0xFF3
 13772                           intcon	equ	0xFF2
 13773                           intcon2	equ	0xFF1
 13774                           indf0	equ	0xFEF
 13775                           postinc0	equ	0xFEE
 13776                           fsr0h	equ	0xFEA
 13777                           fsr0l	equ	0xFE9
 13778                           wreg	equ	0xFE8
 13779                           indf1	equ	0xFE7
 13780                           postdec1	equ	0xFE5
 13781                           fsr1h	equ	0xFE2
 13782                           fsr1l	equ	0xFE1
 13783                           indf2	equ	0xFDF
 13784                           postinc2	equ	0xFDE
 13785                           postdec2	equ	0xFDD
 13786                           fsr2h	equ	0xFDA
 13787                           fsr2l	equ	0xFD9
 13788                           status	equ	0xFD8
 13789                           
 13790 ;; *************** function _TMR0_StartTimer *****************
 13791 ;; Defined at:
 13792 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 13793 ;; Parameters:    Size  Location     Type
 13794 ;;		None
 13795 ;; Auto vars:     Size  Location     Type
 13796 ;;		None
 13797 ;; Return value:  Size  Location     Type
 13798 ;;                  1    wreg      void 
 13799 ;; Registers used:
 13800 ;;		None
 13801 ;; Tracked objects:
 13802 ;;		On entry : 0/0
 13803 ;;		On exit  : 0/0
 13804 ;;		Unchanged: 0/0
 13805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13806 ;;      Params:         0       0       0       0       0       0       0
 13807 ;;      Locals:         0       0       0       0       0       0       0
 13808 ;;      Temps:          0       0       0       0       0       0       0
 13809 ;;      Totals:         0       0       0       0       0       0       0
 13810 ;;Total ram usage:        0 bytes
 13811 ;; Hardware stack levels used:    1
 13812 ;; Hardware stack levels required when called:    3
 13813 ;; This function calls:
 13814 ;;		Nothing
 13815 ;; This function is called by:
 13816 ;;		_InitSystemApplicationManagers
 13817 ;; This function uses a non-reentrant model
 13818 ;;
 13819                           
 13820                           	psect	text49
 13821  0045B0                     __ptext49:
 13822                           	opt stack 0
 13823  0045B0                     _TMR0_StartTimer:
 13824                           	opt stack 26
 13825                           
 13826                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 13827                           
 13828                           ;incstack = 0
 13829  0045B0  8ED5               	bsf	4053,7,c	;volatile
 13830  0045B2  0012               	return		;funcret
 13831  0045B4                     __end_of_TMR0_StartTimer:
 13832                           	opt stack 0
 13833                           tosu	equ	0xFFF
 13834                           tosh	equ	0xFFE
 13835                           tosl	equ	0xFFD
 13836                           pclath	equ	0xFFA
 13837                           tblptru	equ	0xFF8
 13838                           tblptrh	equ	0xFF7
 13839                           tblptrl	equ	0xFF6
 13840                           tablat	equ	0xFF5
 13841                           prodh	equ	0xFF4
 13842                           prodl	equ	0xFF3
 13843                           intcon	equ	0xFF2
 13844                           intcon2	equ	0xFF1
 13845                           indf0	equ	0xFEF
 13846                           postinc0	equ	0xFEE
 13847                           fsr0h	equ	0xFEA
 13848                           fsr0l	equ	0xFE9
 13849                           wreg	equ	0xFE8
 13850                           indf1	equ	0xFE7
 13851                           postdec1	equ	0xFE5
 13852                           fsr1h	equ	0xFE2
 13853                           fsr1l	equ	0xFE1
 13854                           indf2	equ	0xFDF
 13855                           postinc2	equ	0xFDE
 13856                           postdec2	equ	0xFDD
 13857                           fsr2h	equ	0xFDA
 13858                           fsr2l	equ	0xFD9
 13859                           status	equ	0xFD8
 13860                           
 13861 ;; *************** function _PLLInitialize *****************
 13862 ;; Defined at:
 13863 ;;		line 19 in file "SyntApp.c"
 13864 ;; Parameters:    Size  Location     Type
 13865 ;;		None
 13866 ;; Auto vars:     Size  Location     Type
 13867 ;;  idx             2   42[BANK0 ] int 
 13868 ;;  idx             2   40[BANK0 ] int 
 13869 ;; Return value:  Size  Location     Type
 13870 ;;                  1    wreg      void 
 13871 ;; Registers used:
 13872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13873 ;; Tracked objects:
 13874 ;;		On entry : 0/0
 13875 ;;		On exit  : 0/0
 13876 ;;		Unchanged: 0/0
 13877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13878 ;;      Params:         0       0       0       0       0       0       0
 13879 ;;      Locals:         0       4       0       0       0       0       0
 13880 ;;      Temps:          0       2       0       0       0       0       0
 13881 ;;      Totals:         0       6       0       0       0       0       0
 13882 ;;Total ram usage:        6 bytes
 13883 ;; Hardware stack levels used:    1
 13884 ;; Hardware stack levels required when called:    7
 13885 ;; This function calls:
 13886 ;;		_SWSPI_send_word
 13887 ;;		_SwSpi_Set_CE_Pin
 13888 ;; This function is called by:
 13889 ;;		_InitSystemApplicationManagers
 13890 ;; This function uses a non-reentrant model
 13891 ;;
 13892                           
 13893                           	psect	text50
 13894  001F88                     __ptext50:
 13895                           	opt stack 0
 13896  001F88                     _PLLInitialize:
 13897                           	opt stack 22
 13898                           
 13899                           ;SyntApp.c: 22: IOCB = 0b10000000;
 13900                           
 13901                           ;incstack = 0
 13902  001F88  0E80               	movlw	128
 13903  001F8A  6E62               	movwf	3938,c	;volatile
 13904                           
 13905                           ;SyntApp.c: 25: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
 13906  001F8C  0E01               	movlw	1
 13907  001F8E  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 13908  001F90  0E00               	movlw	0
 13909  001F92  EC8C  F020         	call	_SwSpi_Set_CE_Pin
 13910                           
 13911                           ;SyntApp.c: 29: for(int idx = 0; idx < 13; idx++)
 13912  001F96  0E00               	movlw	0
 13913  001F98  0100               	movlb	0	; () banked
 13914  001F9A  6F89               	movwf	(PLLInitialize@idx+1)& (0+255),b
 13915  001F9C  0E00               	movlw	0
 13916  001F9E  6F88               	movwf	PLLInitialize@idx& (0+255),b
 13917  001FA0                     l9783:
 13918                           
 13919                           ; BSR set to: 0
 13920  001FA0  BF89               	btfsc	(PLLInitialize@idx+1)& (0+255),7,b
 13921  001FA2  D006               	goto	l609
 13922  001FA4  5189               	movf	(PLLInitialize@idx+1)& (0+255),w,b
 13923  001FA6  E129               	bnz	l9793
 13924  001FA8  0E0D               	movlw	13
 13925  001FAA  5D88               	subwf	PLLInitialize@idx& (0+255),w,b
 13926  001FAC  B0D8               	btfsc	status,0,c
 13927  001FAE  D025               	goto	u10160
 13928  001FB0                     l609:
 13929                           
 13930                           ; BSR set to: 0
 13931                           ;SyntApp.c: 30: {
 13932                           ;SyntApp.c: 31: SWSPI_send_word(SYNTH_TX, TEST_PLL_REGISTERS[idx], 3);
 13933                           
 13934                           ; BSR set to: 0
 13935  001FB0  C088  F086         	movff	PLLInitialize@idx,??_PLLInitialize
 13936  001FB4  C089  F087         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
 13937  001FB8  90D8               	bcf	status,0,c
 13938  001FBA  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 13939  001FBC  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 13940  001FBE  90D8               	bcf	status,0,c
 13941  001FC0  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 13942  001FC2  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 13943  001FC4  0ED3               	movlw	low _TEST_PLL_REGISTERS
 13944  001FC6  2586               	addwf	??_PLLInitialize& (0+255),w,b
 13945  001FC8  6EF6               	movwf	tblptrl,c
 13946  001FCA  0E77               	movlw	high _TEST_PLL_REGISTERS
 13947  001FCC  2187               	addwfc	(??_PLLInitialize+1)& (0+255),w,b
 13948  001FCE  6EF7               	movwf	tblptrh,c
 13949  001FD0                     	if	0	;There are less than 3 active tblptr bytes
 13950  001FD0                     	endif
 13951  001FD0  0009               	tblrd		*+
 13952  001FD2  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 13953  001FD6  0009               	tblrd		*+
 13954  001FD8  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 13955  001FDC  0009               	tblrd		*+
 13956  001FDE  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 13957  001FE2  000A               	tblrd		*-
 13958  001FE4  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 13959  001FE8  0E03               	movlw	3
 13960  001FEA  6E2C               	movwf	SWSPI_send_word@dataSize,c
 13961  001FEC  0E00               	movlw	0
 13962  001FEE  EC96  F01A         	call	_SWSPI_send_word
 13963  001FF2  0100               	movlb	0	; () banked
 13964  001FF4  4B88               	infsnz	PLLInitialize@idx& (0+255),f,b
 13965  001FF6  2B89               	incf	(PLLInitialize@idx+1)& (0+255),f,b
 13966  001FF8  D7D3               	goto	l9783
 13967  001FFA                     u10160:
 13968  001FFA                     l9793:
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;SyntApp.c: 32: }
 13972                           ;SyntApp.c: 41: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
 13973  001FFA  0E01               	movlw	1
 13974  001FFC  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 13975  001FFE  0E01               	movlw	1
 13976  002000  EC8C  F020         	call	_SwSpi_Set_CE_Pin
 13977                           
 13978                           ;SyntApp.c: 44: for(int idx = 0; idx < 13; idx++)
 13979  002004  0E00               	movlw	0
 13980  002006  0100               	movlb	0	; () banked
 13981  002008  6F8B               	movwf	(PLLInitialize@idx_945+1)& (0+255),b
 13982  00200A  0E00               	movlw	0
 13983  00200C  6F8A               	movwf	PLLInitialize@idx_945& (0+255),b
 13984  00200E                     l9797:
 13985                           
 13986                           ; BSR set to: 0
 13987  00200E  BF8B               	btfsc	(PLLInitialize@idx_945+1)& (0+255),7,b
 13988  002010  D006               	goto	l611
 13989  002012  518B               	movf	(PLLInitialize@idx_945+1)& (0+255),w,b
 13990  002014  E129               	bnz	l9807
 13991  002016  0E0D               	movlw	13
 13992  002018  5D8A               	subwf	PLLInitialize@idx_945& (0+255),w,b
 13993  00201A  B0D8               	btfsc	status,0,c
 13994  00201C  D025               	goto	u10180
 13995  00201E                     l611:
 13996                           
 13997                           ; BSR set to: 0
 13998                           ;SyntApp.c: 45: {
 13999                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
 14000                           
 14001                           ; BSR set to: 0
 14002  00201E  C08A  F086         	movff	PLLInitialize@idx_945,??_PLLInitialize
 14003  002022  C08B  F087         	movff	PLLInitialize@idx_945+1,??_PLLInitialize+1
 14004  002026  90D8               	bcf	status,0,c
 14005  002028  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 14006  00202A  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 14007  00202C  90D8               	bcf	status,0,c
 14008  00202E  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 14009  002030  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 14010  002032  0E07               	movlw	low _PLL_INIT_REGISTERS
 14011  002034  2586               	addwf	??_PLLInitialize& (0+255),w,b
 14012  002036  6EF6               	movwf	tblptrl,c
 14013  002038  0E78               	movlw	high _PLL_INIT_REGISTERS
 14014  00203A  2187               	addwfc	(??_PLLInitialize+1)& (0+255),w,b
 14015  00203C  6EF7               	movwf	tblptrh,c
 14016  00203E                     	if	0	;There are less than 3 active tblptr bytes
 14017  00203E                     	endif
 14018  00203E  0009               	tblrd		*+
 14019  002040  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14020  002044  0009               	tblrd		*+
 14021  002046  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14022  00204A  0009               	tblrd		*+
 14023  00204C  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14024  002050  000A               	tblrd		*-
 14025  002052  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14026  002056  0E03               	movlw	3
 14027  002058  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14028  00205A  0E01               	movlw	1
 14029  00205C  EC96  F01A         	call	_SWSPI_send_word
 14030  002060  0100               	movlb	0	; () banked
 14031  002062  4B8A               	infsnz	PLLInitialize@idx_945& (0+255),f,b
 14032  002064  2B8B               	incf	(PLLInitialize@idx_945+1)& (0+255),f,b
 14033  002066  D7D3               	goto	l9797
 14034  002068                     u10180:
 14035  002068                     l9807:
 14036                           
 14037                           ; BSR set to: 0
 14038                           ;SyntApp.c: 47: }
 14039                           ;SyntApp.c: 50: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
 14040  002068  0E17               	movlw	low (_PLL_INIT_REGISTERS+16)
 14041  00206A  6EF6               	movwf	tblptrl,c
 14042  00206C  0E78               	movlw	high (_PLL_INIT_REGISTERS+16)
 14043  00206E  6EF7               	movwf	tblptrh,c
 14044  002070                     	if	0	;tblptru may be non-zero
 14045  002070                     	endif
 14046  002070                     	if	0	;tblptru may be non-zero
 14047  002070                     	endif
 14048  002070  0009               	tblrd		*+
 14049  002072  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14050  002076  0009               	tblrd		*+
 14051  002078  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14052  00207C  0009               	tblrd		*+
 14053  00207E  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14054  002082  000A               	tblrd		*-
 14055  002084  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14056  002088  0E03               	movlw	3
 14057  00208A  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14058  00208C  0E01               	movlw	1
 14059  00208E  EC96  F01A         	call	_SWSPI_send_word
 14060                           
 14061                           ;SyntApp.c: 51: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
 14062  002092  0E0F               	movlw	low (_PLL_INIT_REGISTERS+8)
 14063  002094  6EF6               	movwf	tblptrl,c
 14064  002096  0E78               	movlw	high (_PLL_INIT_REGISTERS+8)
 14065  002098  6EF7               	movwf	tblptrh,c
 14066  00209A                     	if	0	;tblptru may be non-zero
 14067  00209A                     	endif
 14068  00209A                     	if	0	;tblptru may be non-zero
 14069  00209A                     	endif
 14070  00209A  0009               	tblrd		*+
 14071  00209C  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14072  0020A0  0009               	tblrd		*+
 14073  0020A2  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14074  0020A6  0009               	tblrd		*+
 14075  0020A8  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14076  0020AC  000A               	tblrd		*-
 14077  0020AE  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14078  0020B2  0E03               	movlw	3
 14079  0020B4  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14080  0020B6  0E01               	movlw	1
 14081  0020B8  EC96  F01A         	call	_SWSPI_send_word
 14082                           
 14083                           ;SyntApp.c: 52: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
 14084  0020BC  0E0B               	movlw	low (_PLL_INIT_REGISTERS+4)
 14085  0020BE  6EF6               	movwf	tblptrl,c
 14086  0020C0  0E78               	movlw	high (_PLL_INIT_REGISTERS+4)
 14087  0020C2  6EF7               	movwf	tblptrh,c
 14088  0020C4                     	if	0	;tblptru may be non-zero
 14089  0020C4                     	endif
 14090  0020C4                     	if	0	;tblptru may be non-zero
 14091  0020C4                     	endif
 14092  0020C4  0009               	tblrd		*+
 14093  0020C6  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14094  0020CA  0009               	tblrd		*+
 14095  0020CC  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14096  0020D0  0009               	tblrd		*+
 14097  0020D2  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14098  0020D6  000A               	tblrd		*-
 14099  0020D8  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14100  0020DC  0E03               	movlw	3
 14101  0020DE  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14102  0020E0  0E01               	movlw	1
 14103  0020E2  EC96  F01A         	call	_SWSPI_send_word
 14104                           
 14105                           ;SyntApp.c: 53: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
 14106  0020E6  0E07               	movlw	low _PLL_INIT_REGISTERS
 14107  0020E8  6EF6               	movwf	tblptrl,c
 14108  0020EA                     	if	1	;There is more than 1 active tblptr byte
 14109  0020EA  0E78               	movlw	high _PLL_INIT_REGISTERS
 14110  0020EC  6EF7               	movwf	tblptrh,c
 14111  0020EE                     	endif
 14112  0020EE                     	if	0	;There are less than 3 active tblptr bytes
 14113  0020EE                     	endif
 14114  0020EE  0009               	tblrd		*+
 14115  0020F0  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14116  0020F4  0009               	tblrd		*+
 14117  0020F6  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14118  0020FA  0009               	tblrd		*+
 14119  0020FC  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14120  002100  000A               	tblrd		*-
 14121  002102  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14122  002106  0E03               	movlw	3
 14123  002108  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14124  00210A  0E01               	movlw	1
 14125  00210C  EC96  F01A         	call	_SWSPI_send_word
 14126  002110  0012               	return		;funcret
 14127  002112                     __end_of_PLLInitialize:
 14128                           	opt stack 0
 14129                           tosu	equ	0xFFF
 14130                           tosh	equ	0xFFE
 14131                           tosl	equ	0xFFD
 14132                           pclath	equ	0xFFA
 14133                           tblptru	equ	0xFF8
 14134                           tblptrh	equ	0xFF7
 14135                           tblptrl	equ	0xFF6
 14136                           tablat	equ	0xFF5
 14137                           prodh	equ	0xFF4
 14138                           prodl	equ	0xFF3
 14139                           intcon	equ	0xFF2
 14140                           intcon2	equ	0xFF1
 14141                           indf0	equ	0xFEF
 14142                           postinc0	equ	0xFEE
 14143                           fsr0h	equ	0xFEA
 14144                           fsr0l	equ	0xFE9
 14145                           wreg	equ	0xFE8
 14146                           indf1	equ	0xFE7
 14147                           postdec1	equ	0xFE5
 14148                           fsr1h	equ	0xFE2
 14149                           fsr1l	equ	0xFE1
 14150                           indf2	equ	0xFDF
 14151                           postinc2	equ	0xFDE
 14152                           postdec2	equ	0xFDD
 14153                           fsr2h	equ	0xFDA
 14154                           fsr2l	equ	0xFD9
 14155                           status	equ	0xFD8
 14156                           
 14157 ;; *************** function _SwSpi_Set_CE_Pin *****************
 14158 ;; Defined at:
 14159 ;;		line 201 in file "SwSpiApp.c"
 14160 ;; Parameters:    Size  Location     Type
 14161 ;;  phrType         1    wreg     enum E181
 14162 ;;  cPinMode        1   23[COMRAM] unsigned char 
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;  phrType         1   24[COMRAM] enum E181
 14165 ;; Return value:  Size  Location     Type
 14166 ;;                  1    wreg      void 
 14167 ;; Registers used:
 14168 ;;		wreg, status,2, status,0
 14169 ;; Tracked objects:
 14170 ;;		On entry : 0/0
 14171 ;;		On exit  : 0/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14174 ;;      Params:         1       0       0       0       0       0       0
 14175 ;;      Locals:         1       0       0       0       0       0       0
 14176 ;;      Temps:          0       0       0       0       0       0       0
 14177 ;;      Totals:         2       0       0       0       0       0       0
 14178 ;;Total ram usage:        2 bytes
 14179 ;; Hardware stack levels used:    1
 14180 ;; Hardware stack levels required when called:    3
 14181 ;; This function calls:
 14182 ;;		Nothing
 14183 ;; This function is called by:
 14184 ;;		_PLLInitialize
 14185 ;; This function uses a non-reentrant model
 14186 ;;
 14187                           
 14188                           	psect	text51
 14189  004118                     __ptext51:
 14190                           	opt stack 0
 14191  004118                     _SwSpi_Set_CE_Pin:
 14192                           	opt stack 25
 14193                           
 14194                           ;incstack = 0
 14195                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 14196  004118  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 14197                           
 14198                           ;SwSpiApp.c: 203: switch(phrType)
 14199  00411A  D014               	goto	l791
 14200  00411C                     
 14201                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 14202  00411C  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 14203  00411E  A4D8               	btfss	status,2,c
 14204  004120  D002               	goto	l793
 14205                           
 14206                           ;SwSpiApp.c: 207: {
 14207                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 14208  004122  828B               	bsf	3979,1,c	;volatile
 14209                           
 14210                           ;SwSpiApp.c: 209: }
 14211  004124  0012               	return	
 14212  004126                     l793:
 14213                           
 14214                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 14215  004126  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 14216  004128  A4D8               	btfss	status,2,c
 14217  00412A  0012               	return	
 14218                           
 14219                           ;SwSpiApp.c: 211: {
 14220                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 14221  00412C  928B               	bcf	3979,1,c	;volatile
 14222                           
 14223                           ;SwSpiApp.c: 213: }
 14224                           ;SwSpiApp.c: 214: break;
 14225  00412E  0012               	return	
 14226  004130                     
 14227                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 14228  004130  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 14229  004132  A4D8               	btfss	status,2,c
 14230  004134  D002               	goto	l802
 14231                           
 14232                           ;SwSpiApp.c: 218: {
 14233                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 14234  004136  848C               	bsf	3980,2,c	;volatile
 14235                           
 14236                           ;SwSpiApp.c: 220: }
 14237  004138  0012               	return	
 14238  00413A                     l802:
 14239                           
 14240                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 14241  00413A  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 14242  00413C  A4D8               	btfss	status,2,c
 14243  00413E  0012               	return	
 14244                           
 14245                           ;SwSpiApp.c: 222: {
 14246                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 14247  004140  948C               	bcf	3980,2,c	;volatile
 14248                           
 14249                           ;SwSpiApp.c: 226: }
 14250                           
 14251                           ;SwSpiApp.c: 224: }
 14252                           ;SwSpiApp.c: 225: break;
 14253  004142  0012               	return	
 14254  004144                     l791:
 14255  004144  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 14256                           
 14257                           ; Switch size 1, requested type "space"
 14258                           ; Number of cases is 2, Range of values is 0 to 1
 14259                           ; switch strategies available:
 14260                           ; Name         Instructions Cycles
 14261                           ; simple_byte            7     4 (average)
 14262                           ;	Chosen strategy is simple_byte
 14263  004146  0A00               	xorlw	0	; case 0
 14264  004148  B4D8               	btfsc	status,2,c
 14265  00414A  D7E8               	goto	l792
 14266  00414C  0A01               	xorlw	1	; case 1
 14267  00414E  A4D8               	btfss	status,2,c
 14268  004150  0012               	return	
 14269  004152  D7EE               	goto	l801
 14270  004154                     __end_of_SwSpi_Set_CE_Pin:
 14271                           	opt stack 0
 14272                           tosu	equ	0xFFF
 14273                           tosh	equ	0xFFE
 14274                           tosl	equ	0xFFD
 14275                           pclath	equ	0xFFA
 14276                           tblptru	equ	0xFF8
 14277                           tblptrh	equ	0xFF7
 14278                           tblptrl	equ	0xFF6
 14279                           tablat	equ	0xFF5
 14280                           prodh	equ	0xFF4
 14281                           prodl	equ	0xFF3
 14282                           intcon	equ	0xFF2
 14283                           intcon2	equ	0xFF1
 14284                           indf0	equ	0xFEF
 14285                           postinc0	equ	0xFEE
 14286                           fsr0h	equ	0xFEA
 14287                           fsr0l	equ	0xFE9
 14288                           wreg	equ	0xFE8
 14289                           indf1	equ	0xFE7
 14290                           postdec1	equ	0xFE5
 14291                           fsr1h	equ	0xFE2
 14292                           fsr1l	equ	0xFE1
 14293                           indf2	equ	0xFDF
 14294                           postinc2	equ	0xFDE
 14295                           postdec2	equ	0xFDD
 14296                           fsr2h	equ	0xFDA
 14297                           fsr2l	equ	0xFD9
 14298                           status	equ	0xFD8
 14299                           
 14300 ;; *************** function _InitAdcApplicationMgr *****************
 14301 ;; Defined at:
 14302 ;;		line 23 in file "AdcApp.c"
 14303 ;; Parameters:    Size  Location     Type
 14304 ;;		None
 14305 ;; Auto vars:     Size  Location     Type
 14306 ;;		None
 14307 ;; Return value:  Size  Location     Type
 14308 ;;                  1    wreg      void 
 14309 ;; Registers used:
 14310 ;;		wreg, status,2
 14311 ;; Tracked objects:
 14312 ;;		On entry : 0/0
 14313 ;;		On exit  : 0/0
 14314 ;;		Unchanged: 0/0
 14315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14316 ;;      Params:         0       0       0       0       0       0       0
 14317 ;;      Locals:         0       0       0       0       0       0       0
 14318 ;;      Temps:          0       0       0       0       0       0       0
 14319 ;;      Totals:         0       0       0       0       0       0       0
 14320 ;;Total ram usage:        0 bytes
 14321 ;; Hardware stack levels used:    1
 14322 ;; Hardware stack levels required when called:    3
 14323 ;; This function calls:
 14324 ;;		Nothing
 14325 ;; This function is called by:
 14326 ;;		_InitSystemApplicationManagers
 14327 ;; This function uses a non-reentrant model
 14328 ;;
 14329                           
 14330                           	psect	text52
 14331  00459C                     __ptext52:
 14332                           	opt stack 0
 14333  00459C                     _InitAdcApplicationMgr:
 14334                           	opt stack 26
 14335                           
 14336                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 14337                           
 14338                           ;incstack = 0
 14339  00459C  0E00               	movlw	0
 14340  00459E  0101               	movlb	1	; () banked
 14341  0045A0  6FE9               	movwf	_adcSampleMode& (0+255),b
 14342                           
 14343                           ; BSR set to: 1
 14344  0045A2  0012               	return		;funcret
 14345  0045A4                     __end_of_InitAdcApplicationMgr:
 14346                           	opt stack 0
 14347                           tosu	equ	0xFFF
 14348                           tosh	equ	0xFFE
 14349                           tosl	equ	0xFFD
 14350                           pclath	equ	0xFFA
 14351                           tblptru	equ	0xFF8
 14352                           tblptrh	equ	0xFF7
 14353                           tblptrl	equ	0xFF6
 14354                           tablat	equ	0xFF5
 14355                           prodh	equ	0xFF4
 14356                           prodl	equ	0xFF3
 14357                           intcon	equ	0xFF2
 14358                           intcon2	equ	0xFF1
 14359                           indf0	equ	0xFEF
 14360                           postinc0	equ	0xFEE
 14361                           fsr0h	equ	0xFEA
 14362                           fsr0l	equ	0xFE9
 14363                           wreg	equ	0xFE8
 14364                           indf1	equ	0xFE7
 14365                           postdec1	equ	0xFE5
 14366                           fsr1h	equ	0xFE2
 14367                           fsr1l	equ	0xFE1
 14368                           indf2	equ	0xFDF
 14369                           postinc2	equ	0xFDE
 14370                           postdec2	equ	0xFDD
 14371                           fsr2h	equ	0xFDA
 14372                           fsr2l	equ	0xFD9
 14373                           status	equ	0xFD8
 14374                           
 14375 ;; *************** function _DacInit *****************
 14376 ;; Defined at:
 14377 ;;		line 12 in file "DacApp.c"
 14378 ;; Parameters:    Size  Location     Type
 14379 ;;		None
 14380 ;; Auto vars:     Size  Location     Type
 14381 ;;  dacInput        2  108[BANK0 ] unsigned int 
 14382 ;;  idx             1  110[BANK0 ] char 
 14383 ;; Return value:  Size  Location     Type
 14384 ;;                  1    wreg      void 
 14385 ;; Registers used:
 14386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14387 ;; Tracked objects:
 14388 ;;		On entry : 0/0
 14389 ;;		On exit  : 0/0
 14390 ;;		Unchanged: 0/0
 14391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14392 ;;      Params:         0       0       0       0       0       0       0
 14393 ;;      Locals:         0       3       0       0       0       0       0
 14394 ;;      Temps:          0       2       0       0       0       0       0
 14395 ;;      Totals:         0       5       0       0       0       0       0
 14396 ;;Total ram usage:        5 bytes
 14397 ;; Hardware stack levels used:    1
 14398 ;; Hardware stack levels required when called:    9
 14399 ;; This function calls:
 14400 ;;		_ReadIntFromEeprom
 14401 ;;		_SWSPI_send_word
 14402 ;;		_StoreIntInEeprom
 14403 ;; This function is called by:
 14404 ;;		_InitSystemApplicationManagers
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           	psect	text53
 14409  002F9E                     __ptext53:
 14410                           	opt stack 0
 14411  002F9E                     _DacInit:
 14412                           	opt stack 20
 14413                           
 14414                           ;DacApp.c: 14: for(int8_t idx = 0; idx < (4); idx++)
 14415                           
 14416                           ; BSR set to: 1
 14417                           ;incstack = 0
 14418  002F9E  0E00               	movlw	0
 14419  002FA0  0100               	movlb	0	; () banked
 14420  002FA2  6FCE               	movwf	DacInit@idx& (0+255),b
 14421  002FA4                     l9759:
 14422                           
 14423                           ; BSR set to: 0
 14424  002FA4  51CE               	movf	DacInit@idx& (0+255),w,b
 14425  002FA6  0A80               	xorlw	128
 14426  002FA8  0F7C               	addlw	-132
 14427  002FAA  B0D8               	btfsc	status,0,c
 14428  002FAC  0012               	return	
 14429                           
 14430                           ; BSR set to: 0
 14431                           ;DacApp.c: 15: {
 14432                           ;DacApp.c: 16: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 14433                           
 14434                           ; BSR set to: 0
 14435                           
 14436                           ; BSR set to: 0
 14437  002FAE  0E00               	movlw	0
 14438  002FB0  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 14439  002FB2  0E02               	movlw	2
 14440  002FB4  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 14441  002FB6  51CE               	movf	DacInit@idx& (0+255),w,b
 14442  002FB8  0D01               	mullw	1
 14443  002FBA  0EB9               	movlw	low _DAC_ADDRES
 14444  002FBC  24F3               	addwf	prodl,w,c
 14445  002FBE  6EF6               	movwf	tblptrl,c
 14446  002FC0  0E78               	movlw	high _DAC_ADDRES
 14447  002FC2  20F4               	addwfc	prodh,w,c
 14448  002FC4  6EF7               	movwf	tblptrh,c
 14449  002FC6                     	if	0	;There are less than 3 active tblptr bytes
 14450  002FC6                     	endif
 14451  002FC6  0008               	tblrd		*
 14452  002FC8  50F5               	movf	tablat,w,c
 14453  002FCA  0940               	iorlw	64
 14454  002FCC  EC44  F014         	call	_ReadIntFromEeprom
 14455  002FD0  C0B3  F0CC         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 14456  002FD4  C0B4  F0CD         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 14457                           
 14458                           ;DacApp.c: 17: if(dacInput == 0xFFFF)
 14459  002FD8  0100               	movlb	0	; () banked
 14460  002FDA  29CC               	incf	DacInit@dacInput& (0+255),w,b
 14461  002FDC  E144               	bnz	l9771
 14462  002FDE  29CD               	incf	(DacInit@dacInput+1)& (0+255),w,b
 14463  002FE0  A4D8               	btfss	status,2,c
 14464  002FE2  D041               	goto	l543
 14465                           
 14466                           ; BSR set to: 0
 14467                           ;DacApp.c: 18: {
 14468                           ;DacApp.c: 19: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 14469  002FE4  51CE               	movf	DacInit@idx& (0+255),w,b
 14470  002FE6  0D02               	mullw	2
 14471  002FE8  0EB1               	movlw	low _DAC_DEFAULT_INIT_VALUES
 14472  002FEA  24F3               	addwf	prodl,w,c
 14473  002FEC  6EF6               	movwf	tblptrl,c
 14474  002FEE  0E78               	movlw	high _DAC_DEFAULT_INIT_VALUES
 14475  002FF0  20F4               	addwfc	prodh,w,c
 14476  002FF2  6EF7               	movwf	tblptrh,c
 14477  002FF4                     	if	0	;There are less than 3 active tblptr bytes
 14478  002FF4                     	endif
 14479  002FF4  0009               	tblrd		*+
 14480  002FF6  CFF5 F0CA          	movff	tablat,??_DacInit
 14481  002FFA  0009               	tblrd		*+
 14482  002FFC  CFF5 F0CB          	movff	tablat,??_DacInit+1
 14483  003000  C0CA  F028         	movff	??_DacInit,SWSPI_send_word@data
 14484  003004  C0CB  F029         	movff	??_DacInit+1,SWSPI_send_word@data+1
 14485  003008  6A2A               	clrf	SWSPI_send_word@data+2,c
 14486  00300A  6A2B               	clrf	SWSPI_send_word@data+3,c
 14487  00300C  0E01               	movlw	1
 14488  00300E  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14489  003010  0E02               	movlw	2
 14490  003012  EC96  F01A         	call	_SWSPI_send_word
 14491                           
 14492                           ;DacApp.c: 20: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 14493  003016  0100               	movlb	0	; () banked
 14494  003018  51CE               	movf	DacInit@idx& (0+255),w,b
 14495  00301A  0D02               	mullw	2
 14496  00301C  0EB1               	movlw	low _DAC_DEFAULT_INIT_VALUES
 14497  00301E  24F3               	addwf	prodl,w,c
 14498  003020  6EF6               	movwf	tblptrl,c
 14499  003022  0E78               	movlw	high _DAC_DEFAULT_INIT_VALUES
 14500  003024  20F4               	addwfc	prodh,w,c
 14501  003026  6EF7               	movwf	tblptrh,c
 14502  003028                     	if	0	;There are less than 3 active tblptr bytes
 14503  003028                     	endif
 14504  003028  0009               	tblrd		*+
 14505  00302A  CFF5 F0CA          	movff	tablat,??_DacInit
 14506  00302E  0009               	tblrd		*+
 14507  003030  CFF5 F0CB          	movff	tablat,??_DacInit+1
 14508  003034  C0CA  F021         	movff	??_DacInit,StoreIntInEeprom@data
 14509  003038  C0CB  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 14510  00303C  6A23               	clrf	StoreIntInEeprom@data+2,c
 14511  00303E  6A24               	clrf	StoreIntInEeprom@data+3,c
 14512  003040  51CE               	movf	DacInit@idx& (0+255),w,b
 14513  003042  0D01               	mullw	1
 14514  003044  0EB9               	movlw	low _DAC_ADDRES
 14515  003046  24F3               	addwf	prodl,w,c
 14516  003048  6EF6               	movwf	tblptrl,c
 14517  00304A  0E78               	movlw	high _DAC_ADDRES
 14518  00304C  20F4               	addwfc	prodh,w,c
 14519  00304E  6EF7               	movwf	tblptrh,c
 14520  003050                     	if	0	;There are less than 3 active tblptr bytes
 14521  003050                     	endif
 14522  003050  0008               	tblrd		*
 14523  003052  50F5               	movf	tablat,w,c
 14524  003054  0940               	iorlw	64
 14525  003056  6E25               	movwf	StoreIntInEeprom@address,c
 14526  003058  0E00               	movlw	0
 14527  00305A  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 14528  00305C  0E02               	movlw	2
 14529  00305E  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 14530  003060  ECC8  F020         	call	_StoreIntInEeprom	;wreg free
 14531                           
 14532                           ;DacApp.c: 21: }
 14533  003064  D00B               	goto	l544
 14534  003066                     l543:
 14535  003066                     l9771:
 14536                           
 14537                           ;DacApp.c: 22: else
 14538                           ;DacApp.c: 23: {
 14539                           ;DacApp.c: 24: SWSPI_send_word(EXT_DAC, dacInput, 1);
 14540  003066  C0CC  F028         	movff	DacInit@dacInput,SWSPI_send_word@data
 14541  00306A  C0CD  F029         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 14542  00306E  6A2A               	clrf	SWSPI_send_word@data+2,c
 14543  003070  6A2B               	clrf	SWSPI_send_word@data+3,c
 14544  003072  0E01               	movlw	1
 14545  003074  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14546  003076  0E02               	movlw	2
 14547  003078  EC96  F01A         	call	_SWSPI_send_word
 14548  00307C                     l544:
 14549  00307C  0100               	movlb	0	; () banked
 14550  00307E  2BCE               	incf	DacInit@idx& (0+255),f,b
 14551  003080  D791               	goto	l9759
 14552  003082                     __end_of_DacInit:
 14553                           	opt stack 0
 14554                           tosu	equ	0xFFF
 14555                           tosh	equ	0xFFE
 14556                           tosl	equ	0xFFD
 14557                           pclath	equ	0xFFA
 14558                           tblptru	equ	0xFF8
 14559                           tblptrh	equ	0xFF7
 14560                           tblptrl	equ	0xFF6
 14561                           tablat	equ	0xFF5
 14562                           prodh	equ	0xFF4
 14563                           prodl	equ	0xFF3
 14564                           intcon	equ	0xFF2
 14565                           intcon2	equ	0xFF1
 14566                           indf0	equ	0xFEF
 14567                           postinc0	equ	0xFEE
 14568                           fsr0h	equ	0xFEA
 14569                           fsr0l	equ	0xFE9
 14570                           wreg	equ	0xFE8
 14571                           indf1	equ	0xFE7
 14572                           postdec1	equ	0xFE5
 14573                           fsr1h	equ	0xFE2
 14574                           fsr1l	equ	0xFE1
 14575                           indf2	equ	0xFDF
 14576                           postinc2	equ	0xFDE
 14577                           postdec2	equ	0xFDD
 14578                           fsr2h	equ	0xFDA
 14579                           fsr2l	equ	0xFD9
 14580                           status	equ	0xFD8
 14581                           
 14582 ;; *************** function _StoreIntInEeprom *****************
 14583 ;; Defined at:
 14584 ;;		line 38 in file "SystemCommon.c"
 14585 ;; Parameters:    Size  Location     Type
 14586 ;;  data            4   32[COMRAM] unsigned long 
 14587 ;;  address         1   36[COMRAM] unsigned char 
 14588 ;;  numOfByes       2   37[COMRAM] int 
 14589 ;; Auto vars:     Size  Location     Type
 14590 ;;  val             1   39[COMRAM] unsigned char 
 14591 ;;  idx             1   40[COMRAM] unsigned char 
 14592 ;; Return value:  Size  Location     Type
 14593 ;;                  1    wreg      void 
 14594 ;; Registers used:
 14595 ;;		wreg, status,2, status,0, cstack
 14596 ;; Tracked objects:
 14597 ;;		On entry : 0/0
 14598 ;;		On exit  : 0/0
 14599 ;;		Unchanged: 0/0
 14600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14601 ;;      Params:         7       0       0       0       0       0       0
 14602 ;;      Locals:         2       0       0       0       0       0       0
 14603 ;;      Temps:          0       0       0       0       0       0       0
 14604 ;;      Totals:         9       0       0       0       0       0       0
 14605 ;;Total ram usage:        9 bytes
 14606 ;; Hardware stack levels used:    1
 14607 ;; Hardware stack levels required when called:    5
 14608 ;; This function calls:
 14609 ;;		_EepromWrite
 14610 ;;		_make8
 14611 ;; This function is called by:
 14612 ;;		_DacInit
 14613 ;;		_DacSetValue
 14614 ;; This function uses a non-reentrant model
 14615 ;;
 14616                           
 14617                           	psect	text54
 14618  004190                     __ptext54:
 14619                           	opt stack 0
 14620  004190                     _StoreIntInEeprom:
 14621                           	opt stack 23
 14622                           
 14623                           ;SystemCommon.c: 40: for(uint8_t idx = numOfByes; idx; idx--)
 14624                           
 14625                           ; BSR set to: 0
 14626                           ;incstack = 0
 14627  004190  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 14628  004194  D015               	goto	l1430
 14629  004196                     
 14630                           ;SystemCommon.c: 41: {
 14631                           ;SystemCommon.c: 42: uint8_t val = make8(data, idx - 1);
 14632  004196  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 14633  00419A  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 14634  00419E  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 14635  0041A2  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 14636  0041A6  0429               	decf	StoreIntInEeprom@idx,w,c
 14637  0041A8  6E1C               	movwf	make8@dataLocation,c
 14638  0041AA  EC6C  F01E         	call	_make8	;wreg free
 14639  0041AE  6E28               	movwf	StoreIntInEeprom@val,c
 14640                           
 14641                           ;SystemCommon.c: 43: EepromWrite(address - idx, val);
 14642  0041B0  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 14643  0041B4  5029               	movf	StoreIntInEeprom@idx,w,c
 14644  0041B6  0800               	sublw	0
 14645  0041B8  2425               	addwf	StoreIntInEeprom@address,w,c
 14646  0041BA  ECB2  F022         	call	_EepromWrite
 14647  0041BE  0629               	decf	StoreIntInEeprom@idx,f,c
 14648  0041C0                     l1430:
 14649  0041C0  5029               	movf	StoreIntInEeprom@idx,w,c
 14650  0041C2  B4D8               	btfsc	status,2,c
 14651  0041C4  0012               	return	
 14652  0041C6  D7E7               	goto	l1431
 14653  0041C8                     __end_of_StoreIntInEeprom:
 14654                           	opt stack 0
 14655                           tosu	equ	0xFFF
 14656                           tosh	equ	0xFFE
 14657                           tosl	equ	0xFFD
 14658                           pclath	equ	0xFFA
 14659                           tblptru	equ	0xFF8
 14660                           tblptrh	equ	0xFF7
 14661                           tblptrl	equ	0xFF6
 14662                           tablat	equ	0xFF5
 14663                           prodh	equ	0xFF4
 14664                           prodl	equ	0xFF3
 14665                           intcon	equ	0xFF2
 14666                           intcon2	equ	0xFF1
 14667                           indf0	equ	0xFEF
 14668                           postinc0	equ	0xFEE
 14669                           fsr0h	equ	0xFEA
 14670                           fsr0l	equ	0xFE9
 14671                           wreg	equ	0xFE8
 14672                           indf1	equ	0xFE7
 14673                           postdec1	equ	0xFE5
 14674                           fsr1h	equ	0xFE2
 14675                           fsr1l	equ	0xFE1
 14676                           indf2	equ	0xFDF
 14677                           postinc2	equ	0xFDE
 14678                           postdec2	equ	0xFDD
 14679                           fsr2h	equ	0xFDA
 14680                           fsr2l	equ	0xFD9
 14681                           status	equ	0xFD8
 14682                           
 14683 ;; *************** function _EepromWrite *****************
 14684 ;; Defined at:
 14685 ;;		line 220 in file "FlashApp.c"
 14686 ;; Parameters:    Size  Location     Type
 14687 ;;  address         1    wreg     unsigned char 
 14688 ;;  data            1   26[COMRAM] unsigned char 
 14689 ;; Auto vars:     Size  Location     Type
 14690 ;;  address         1   27[COMRAM] unsigned char 
 14691 ;; Return value:  Size  Location     Type
 14692 ;;                  1    wreg      void 
 14693 ;; Registers used:
 14694 ;;		wreg, status,2, cstack
 14695 ;; Tracked objects:
 14696 ;;		On entry : 0/0
 14697 ;;		On exit  : 0/0
 14698 ;;		Unchanged: 0/0
 14699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14700 ;;      Params:         1       0       0       0       0       0       0
 14701 ;;      Locals:         1       0       0       0       0       0       0
 14702 ;;      Temps:          0       0       0       0       0       0       0
 14703 ;;      Totals:         2       0       0       0       0       0       0
 14704 ;;Total ram usage:        2 bytes
 14705 ;; Hardware stack levels used:    1
 14706 ;; Hardware stack levels required when called:    4
 14707 ;; This function calls:
 14708 ;;		_DATAEE_WriteByte
 14709 ;; This function is called by:
 14710 ;;		_StoreIntInEeprom
 14711 ;; This function uses a non-reentrant model
 14712 ;;
 14713                           
 14714                           	psect	text55
 14715  004564                     __ptext55:
 14716                           	opt stack 0
 14717  004564                     _EepromWrite:
 14718                           	opt stack 23
 14719                           
 14720                           ;incstack = 0
 14721                           ;EepromWrite@address stored from wreg
 14722  004564  6E1C               	movwf	EepromWrite@address,c
 14723                           
 14724                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
 14725  004566  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 14726  00456A  501C               	movf	EepromWrite@address,w,c
 14727  00456C  EC37  F021         	call	_DATAEE_WriteByte
 14728  004570  0012               	return		;funcret
 14729  004572                     __end_of_EepromWrite:
 14730                           	opt stack 0
 14731                           tosu	equ	0xFFF
 14732                           tosh	equ	0xFFE
 14733                           tosl	equ	0xFFD
 14734                           pclath	equ	0xFFA
 14735                           tblptru	equ	0xFF8
 14736                           tblptrh	equ	0xFF7
 14737                           tblptrl	equ	0xFF6
 14738                           tablat	equ	0xFF5
 14739                           prodh	equ	0xFF4
 14740                           prodl	equ	0xFF3
 14741                           intcon	equ	0xFF2
 14742                           intcon2	equ	0xFF1
 14743                           indf0	equ	0xFEF
 14744                           postinc0	equ	0xFEE
 14745                           fsr0h	equ	0xFEA
 14746                           fsr0l	equ	0xFE9
 14747                           wreg	equ	0xFE8
 14748                           indf1	equ	0xFE7
 14749                           postdec1	equ	0xFE5
 14750                           fsr1h	equ	0xFE2
 14751                           fsr1l	equ	0xFE1
 14752                           indf2	equ	0xFDF
 14753                           postinc2	equ	0xFDE
 14754                           postdec2	equ	0xFDD
 14755                           fsr2h	equ	0xFDA
 14756                           fsr2l	equ	0xFD9
 14757                           status	equ	0xFD8
 14758                           
 14759 ;; *************** function _DATAEE_WriteByte *****************
 14760 ;; Defined at:
 14761 ;;		line 167 in file "mcc_generated_files/memory.c"
 14762 ;; Parameters:    Size  Location     Type
 14763 ;;  bAdd            1    wreg     unsigned char 
 14764 ;;  bData           1   23[COMRAM] unsigned char 
 14765 ;; Auto vars:     Size  Location     Type
 14766 ;;  bAdd            1   24[COMRAM] unsigned char 
 14767 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 14768 ;; Return value:  Size  Location     Type
 14769 ;;                  1    wreg      void 
 14770 ;; Registers used:
 14771 ;;		wreg, status,2
 14772 ;; Tracked objects:
 14773 ;;		On entry : 0/0
 14774 ;;		On exit  : 0/0
 14775 ;;		Unchanged: 0/0
 14776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14777 ;;      Params:         1       0       0       0       0       0       0
 14778 ;;      Locals:         2       0       0       0       0       0       0
 14779 ;;      Temps:          0       0       0       0       0       0       0
 14780 ;;      Totals:         3       0       0       0       0       0       0
 14781 ;;Total ram usage:        3 bytes
 14782 ;; Hardware stack levels used:    1
 14783 ;; Hardware stack levels required when called:    3
 14784 ;; This function calls:
 14785 ;;		Nothing
 14786 ;; This function is called by:
 14787 ;;		_EepromWrite
 14788 ;;		_EepromTest
 14789 ;; This function uses a non-reentrant model
 14790 ;;
 14791                           
 14792                           	psect	text56
 14793  00426E                     __ptext56:
 14794                           	opt stack 0
 14795  00426E                     _DATAEE_WriteByte:
 14796                           	opt stack 23
 14797                           
 14798                           ;incstack = 0
 14799                           ;DATAEE_WriteByte@bAdd stored from wreg
 14800  00426E  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 14801                           
 14802                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 14803  004270  0E00               	movlw	0
 14804  004272  BEF2               	btfsc	intcon,7,c	;volatile
 14805  004274  0E01               	movlw	1
 14806  004276  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 14807                           
 14808                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 14809  004278  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 14810                           
 14811                           ;memory.c: 172: EEDATA = bData;
 14812  00427C  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 14813                           
 14814                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 14815  004280  9EA6               	bcf	4006,7,c	;volsfr
 14816                           
 14817                           ;memory.c: 174: EECON1bits.CFGS = 0;
 14818  004282  9CA6               	bcf	4006,6,c	;volsfr
 14819                           
 14820                           ;memory.c: 175: EECON1bits.WREN = 1;
 14821  004284  84A6               	bsf	4006,2,c	;volsfr
 14822                           
 14823                           ;memory.c: 176: INTCONbits.GIE = 0;
 14824  004286  9EF2               	bcf	intcon,7,c	;volatile
 14825                           
 14826                           ;memory.c: 177: EECON2 = 0x55;
 14827  004288  0E55               	movlw	85
 14828  00428A  6EA7               	movwf	4007,c	;volsfr
 14829                           
 14830                           ;memory.c: 178: EECON2 = 0xAA;
 14831  00428C  0EAA               	movlw	170
 14832  00428E  6EA7               	movwf	4007,c	;volsfr
 14833                           
 14834                           ;memory.c: 179: EECON1bits.WR = 1;
 14835  004290  82A6               	bsf	4006,1,c	;volsfr
 14836  004292                     
 14837                           ;memory.c: 182: {
 14838  004292  B2A6               	btfsc	4006,1,c	;volsfr
 14839  004294  D7FE               	goto	l1084
 14840                           
 14841                           ;memory.c: 183: }
 14842                           ;memory.c: 185: EECON1bits.WREN = 0;
 14843  004296  94A6               	bcf	4006,2,c	;volsfr
 14844                           
 14845                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 14846  004298  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 14847  00429A  D002               	bra	u4715
 14848  00429C  9EF2               	bcf	intcon,7,c	;volatile
 14849  00429E  D001               	bra	u4716
 14850  0042A0                     u4715:
 14851  0042A0  8EF2               	bsf	intcon,7,c	;volatile
 14852  0042A2                     u4716:
 14853  0042A2  0012               	return		;funcret
 14854  0042A4                     __end_of_DATAEE_WriteByte:
 14855                           	opt stack 0
 14856                           tosu	equ	0xFFF
 14857                           tosh	equ	0xFFE
 14858                           tosl	equ	0xFFD
 14859                           pclath	equ	0xFFA
 14860                           tblptru	equ	0xFF8
 14861                           tblptrh	equ	0xFF7
 14862                           tblptrl	equ	0xFF6
 14863                           tablat	equ	0xFF5
 14864                           prodh	equ	0xFF4
 14865                           prodl	equ	0xFF3
 14866                           intcon	equ	0xFF2
 14867                           intcon2	equ	0xFF1
 14868                           indf0	equ	0xFEF
 14869                           postinc0	equ	0xFEE
 14870                           fsr0h	equ	0xFEA
 14871                           fsr0l	equ	0xFE9
 14872                           wreg	equ	0xFE8
 14873                           indf1	equ	0xFE7
 14874                           postdec1	equ	0xFE5
 14875                           fsr1h	equ	0xFE2
 14876                           fsr1l	equ	0xFE1
 14877                           indf2	equ	0xFDF
 14878                           postinc2	equ	0xFDE
 14879                           postdec2	equ	0xFDD
 14880                           fsr2h	equ	0xFDA
 14881                           fsr2l	equ	0xFD9
 14882                           status	equ	0xFD8
 14883                           
 14884 ;; *************** function _SWSPI_send_word *****************
 14885 ;; Defined at:
 14886 ;;		line 17 in file "SwSpiApp.c"
 14887 ;; Parameters:    Size  Location     Type
 14888 ;;  phrType         1    wreg     enum E181
 14889 ;;  data            4   39[COMRAM] unsigned long 
 14890 ;;  dataSize        1   43[COMRAM] unsigned char 
 14891 ;; Auto vars:     Size  Location     Type
 14892 ;;  phrType         1   47[COMRAM] enum E181
 14893 ;;  datac           1   44[COMRAM] unsigned char 
 14894 ;;  idx             2   45[COMRAM] int 
 14895 ;; Return value:  Size  Location     Type
 14896 ;;                  1    wreg      void 
 14897 ;; Registers used:
 14898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14899 ;; Tracked objects:
 14900 ;;		On entry : 0/0
 14901 ;;		On exit  : 0/0
 14902 ;;		Unchanged: 0/0
 14903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14904 ;;      Params:         5       0       0       0       0       0       0
 14905 ;;      Locals:         4       0       0       0       0       0       0
 14906 ;;      Temps:          0       0       0       0       0       0       0
 14907 ;;      Totals:         9       0       0       0       0       0       0
 14908 ;;Total ram usage:        9 bytes
 14909 ;; Hardware stack levels used:    1
 14910 ;; Hardware stack levels required when called:    6
 14911 ;; This function calls:
 14912 ;;		_SWSPI_DAC_send_bits
 14913 ;;		_SWSPI_Synth_send_bits
 14914 ;;		_SwSpi_Set_Dac_Sync_Pin
 14915 ;;		_SwSpi_Set_Synth_Le_Pin
 14916 ;;		_make8
 14917 ;; This function is called by:
 14918 ;;		_DacInit
 14919 ;;		_PLLInitialize
 14920 ;;		_DacSetValue
 14921 ;;		_UpdateTxFreq
 14922 ;;		_UpdateRxFreq
 14923 ;; This function uses a non-reentrant model
 14924 ;;
 14925                           
 14926                           	psect	text57
 14927  00352C                     __ptext57:
 14928                           	opt stack 0
 14929  00352C                     _SWSPI_send_word:
 14930                           	opt stack 22
 14931                           
 14932                           ;incstack = 0
 14933                           ;SWSPI_send_word@phrType stored from wreg
 14934  00352C  6E30               	movwf	SWSPI_send_word@phrType,c
 14935                           
 14936                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 14937  00352E  9EF2               	bcf	intcon,7,c	;volatile
 14938                           
 14939                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 14940  003530  5030               	movf	SWSPI_send_word@phrType,w,c
 14941  003532  B4D8               	btfsc	status,2,c
 14942  003534  D003               	goto	u10000
 14943  003536  0430               	decf	SWSPI_send_word@phrType,w,c
 14944  003538  A4D8               	btfss	status,2,c
 14945  00353A  D016               	goto	l700
 14946  00353C                     u10000:
 14947                           
 14948                           ;SwSpiApp.c: 24: {
 14949                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 14950  00353C  0E00               	movlw	0
 14951  00353E  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 14952  003540  5030               	movf	SWSPI_send_word@phrType,w,c
 14953  003542  ECAA  F020         	call	_SwSpi_Set_Synth_Le_Pin
 14954                           
 14955                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 14956  003546  C028  F024         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 14957  00354A  C029  F025         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 14958  00354E  C02A  F026         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 14959  003552  C02B  F027         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 14960  003556  5030               	movf	SWSPI_send_word@phrType,w,c
 14961  003558  EC84  F019         	call	_SWSPI_Synth_send_bits
 14962                           
 14963                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 14964  00355C  0E01               	movlw	1
 14965  00355E  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 14966  003560  5030               	movf	SWSPI_send_word@phrType,w,c
 14967  003562  ECAA  F020         	call	_SwSpi_Set_Synth_Le_Pin
 14968                           
 14969                           ;SwSpiApp.c: 28: }
 14970  003566  D02D               	goto	l704
 14971  003568                     l700:
 14972                           
 14973                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 14974  003568  0E02               	movlw	2
 14975  00356A  1830               	xorwf	SWSPI_send_word@phrType,w,c
 14976  00356C  A4D8               	btfss	status,2,c
 14977  00356E  D029               	goto	l704
 14978                           
 14979                           ;SwSpiApp.c: 30: {
 14980                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 14981  003570  0E00               	movlw	0
 14982  003572  EC50  F022         	call	_SwSpi_Set_Dac_Sync_Pin
 14983                           
 14984                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 14985  003576  0E01               	movlw	1
 14986  003578  242C               	addwf	SWSPI_send_word@dataSize,w,c
 14987  00357A  6E2E               	movwf	SWSPI_send_word@idx,c
 14988  00357C  6A2F               	clrf	SWSPI_send_word@idx+1,c
 14989  00357E  0E00               	movlw	0
 14990  003580  222F               	addwfc	SWSPI_send_word@idx+1,f,c
 14991  003582                     l9529:
 14992  003582  BE2F               	btfsc	SWSPI_send_word@idx+1,7,c
 14993  003584  D01B               	goto	u10030
 14994  003586  502F               	movf	SWSPI_send_word@idx+1,w,c
 14995  003588  E103               	bnz	l9533
 14996  00358A  042E               	decf	SWSPI_send_word@idx,w,c
 14997  00358C  A0D8               	btfss	status,0,c
 14998  00358E  D016               	goto	u10030
 14999  003590                     l9533:
 15000                           
 15001                           ;SwSpiApp.c: 33: {
 15002                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 15003  003590  C028  F018         	movff	SWSPI_send_word@data,make8@data
 15004  003594  C029  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 15005  003598  C02A  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 15006  00359C  C02B  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 15007  0035A0  042E               	decf	SWSPI_send_word@idx,w,c
 15008  0035A2  6E1C               	movwf	make8@dataLocation,c
 15009  0035A4  EC6C  F01E         	call	_make8	;wreg free
 15010  0035A8  6E2D               	movwf	SWSPI_send_word@datac,c
 15011                           
 15012                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 15013  0035AA  C02D  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 15014  0035AE  5030               	movf	SWSPI_send_word@phrType,w,c
 15015  0035B0  ECF4  F01E         	call	_SWSPI_DAC_send_bits
 15016  0035B4  062E               	decf	SWSPI_send_word@idx,f,c
 15017  0035B6  A0D8               	btfss	status,0,c
 15018  0035B8  062F               	decf	SWSPI_send_word@idx+1,f,c
 15019  0035BA  D7E3               	goto	l9529
 15020  0035BC                     u10030:
 15021                           
 15022                           ;SwSpiApp.c: 36: }
 15023                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 15024  0035BC  0E01               	movlw	1
 15025  0035BE  EC50  F022         	call	_SwSpi_Set_Dac_Sync_Pin
 15026  0035C2                     l704:
 15027                           
 15028                           ;SwSpiApp.c: 38: }
 15029                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 15030  0035C2  8EF2               	bsf	intcon,7,c	;volatile
 15031  0035C4  0012               	return		;funcret
 15032  0035C6                     __end_of_SWSPI_send_word:
 15033                           	opt stack 0
 15034                           tosu	equ	0xFFF
 15035                           tosh	equ	0xFFE
 15036                           tosl	equ	0xFFD
 15037                           pclath	equ	0xFFA
 15038                           tblptru	equ	0xFF8
 15039                           tblptrh	equ	0xFF7
 15040                           tblptrl	equ	0xFF6
 15041                           tablat	equ	0xFF5
 15042                           prodh	equ	0xFF4
 15043                           prodl	equ	0xFF3
 15044                           intcon	equ	0xFF2
 15045                           intcon2	equ	0xFF1
 15046                           indf0	equ	0xFEF
 15047                           postinc0	equ	0xFEE
 15048                           fsr0h	equ	0xFEA
 15049                           fsr0l	equ	0xFE9
 15050                           wreg	equ	0xFE8
 15051                           indf1	equ	0xFE7
 15052                           postdec1	equ	0xFE5
 15053                           fsr1h	equ	0xFE2
 15054                           fsr1l	equ	0xFE1
 15055                           indf2	equ	0xFDF
 15056                           postinc2	equ	0xFDE
 15057                           postdec2	equ	0xFDD
 15058                           fsr2h	equ	0xFDA
 15059                           fsr2l	equ	0xFD9
 15060                           status	equ	0xFD8
 15061                           
 15062 ;; *************** function _make8 *****************
 15063 ;; Defined at:
 15064 ;;		line 81 in file "SystemCommon.c"
 15065 ;; Parameters:    Size  Location     Type
 15066 ;;  data            4   23[COMRAM] unsigned long 
 15067 ;;  dataLocation    1   27[COMRAM] unsigned char 
 15068 ;; Auto vars:     Size  Location     Type
 15069 ;;		None
 15070 ;; Return value:  Size  Location     Type
 15071 ;;                  1    wreg      unsigned char 
 15072 ;; Registers used:
 15073 ;;		wreg, status,2, status,0
 15074 ;; Tracked objects:
 15075 ;;		On entry : 0/0
 15076 ;;		On exit  : 0/0
 15077 ;;		Unchanged: 0/0
 15078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15079 ;;      Params:         5       0       0       0       0       0       0
 15080 ;;      Locals:         0       0       0       0       0       0       0
 15081 ;;      Temps:          4       0       0       0       0       0       0
 15082 ;;      Totals:         9       0       0       0       0       0       0
 15083 ;;Total ram usage:        9 bytes
 15084 ;; Hardware stack levels used:    1
 15085 ;; Hardware stack levels required when called:    3
 15086 ;; This function calls:
 15087 ;;		Nothing
 15088 ;; This function is called by:
 15089 ;;		_SWSPI_send_word
 15090 ;;		_StoreIntInEeprom
 15091 ;;		_FlashReadCondition
 15092 ;; This function uses a non-reentrant model
 15093 ;;
 15094                           
 15095                           	psect	text58
 15096  003CD8                     __ptext58:
 15097                           	opt stack 0
 15098  003CD8                     _make8:
 15099                           	opt stack 24
 15100                           
 15101                           ;SystemCommon.c: 83: switch(dataLocation)
 15102                           
 15103                           ;incstack = 0
 15104  003CD8  D01F               	goto	l1449
 15105  003CDA                     
 15106                           ;SystemCommon.c: 86: return (data & 0x000000ff);
 15107  003CDA  5018               	movf	make8@data,w,c
 15108  003CDC  0012               	return	
 15109  003CDE                     
 15110                           ;SystemCommon.c: 89: return (data & 0x0000ff00) >> 8;
 15111  003CDE  5019               	movf	make8@data+1,w,c
 15112  003CE0  0012               	return	
 15113  003CE2                     
 15114                           ;SystemCommon.c: 92: return (data & 0x00ff0000) >> 16;
 15115  003CE2  501A               	movf	make8@data+2,w,c
 15116  003CE4  0012               	return	
 15117  003CE6                     
 15118                           ;SystemCommon.c: 95: return (data & 0xff000000) >> 24;
 15119  003CE6  0E00               	movlw	0
 15120  003CE8  1418               	andwf	make8@data,w,c
 15121  003CEA  6E1D               	movwf	??_make8& (0+255),c
 15122  003CEC  0E00               	movlw	0
 15123  003CEE  1419               	andwf	make8@data+1,w,c
 15124  003CF0  6E1E               	movwf	(??_make8+1)& (0+255),c
 15125  003CF2  0E00               	movlw	0
 15126  003CF4  141A               	andwf	make8@data+2,w,c
 15127  003CF6  6E1F               	movwf	(??_make8+2)& (0+255),c
 15128  003CF8  0EFF               	movlw	255
 15129  003CFA  141B               	andwf	make8@data+3,w,c
 15130  003CFC  6E20               	movwf	(??_make8+3)& (0+255),c
 15131  003CFE  0E19               	movlw	25
 15132  003D00  D005               	goto	u9560
 15133  003D02                     u9565:
 15134  003D02  90D8               	bcf	status,0,c
 15135  003D04  3220               	rrcf	??_make8+3,f,c
 15136  003D06  321F               	rrcf	??_make8+2,f,c
 15137  003D08  321E               	rrcf	??_make8+1,f,c
 15138  003D0A  321D               	rrcf	??_make8,f,c
 15139  003D0C                     u9560:
 15140  003D0C  2EE8               	decfsz	wreg,f,c
 15141  003D0E  D7F9               	goto	u9565
 15142  003D10  501D               	movf	??_make8,w,c
 15143  003D12  0012               	return	
 15144  003D14                     
 15145                           ;SystemCommon.c: 98: return (0);
 15146  003D14  0E00               	movlw	0
 15147                           
 15148                           ;SystemCommon.c: 99: }
 15149  003D16  0012               	return	
 15150  003D18                     l1449:
 15151  003D18  501C               	movf	make8@dataLocation,w,c
 15152                           
 15153                           ; Switch size 1, requested type "space"
 15154                           ; Number of cases is 4, Range of values is 0 to 3
 15155                           ; switch strategies available:
 15156                           ; Name         Instructions Cycles
 15157                           ; simple_byte           13     7 (average)
 15158                           ;	Chosen strategy is simple_byte
 15159  003D1A  0A00               	xorlw	0	; case 0
 15160  003D1C  B4D8               	btfsc	status,2,c
 15161  003D1E  D7DD               	goto	l1450
 15162  003D20  0A01               	xorlw	1	; case 1
 15163  003D22  B4D8               	btfsc	status,2,c
 15164  003D24  D7DC               	goto	l1452
 15165  003D26  0A03               	xorlw	3	; case 2
 15166  003D28  B4D8               	btfsc	status,2,c
 15167  003D2A  D7DB               	goto	l1453
 15168  003D2C  0A01               	xorlw	1	; case 3
 15169  003D2E  B4D8               	btfsc	status,2,c
 15170  003D30  D7DA               	goto	l1454
 15171  003D32  D7F0               	goto	l1455
 15172  003D34                     __end_of_make8:
 15173                           	opt stack 0
 15174                           tosu	equ	0xFFF
 15175                           tosh	equ	0xFFE
 15176                           tosl	equ	0xFFD
 15177                           pclath	equ	0xFFA
 15178                           tblptru	equ	0xFF8
 15179                           tblptrh	equ	0xFF7
 15180                           tblptrl	equ	0xFF6
 15181                           tablat	equ	0xFF5
 15182                           prodh	equ	0xFF4
 15183                           prodl	equ	0xFF3
 15184                           intcon	equ	0xFF2
 15185                           intcon2	equ	0xFF1
 15186                           indf0	equ	0xFEF
 15187                           postinc0	equ	0xFEE
 15188                           fsr0h	equ	0xFEA
 15189                           fsr0l	equ	0xFE9
 15190                           wreg	equ	0xFE8
 15191                           indf1	equ	0xFE7
 15192                           postdec1	equ	0xFE5
 15193                           fsr1h	equ	0xFE2
 15194                           fsr1l	equ	0xFE1
 15195                           indf2	equ	0xFDF
 15196                           postinc2	equ	0xFDE
 15197                           postdec2	equ	0xFDD
 15198                           fsr2h	equ	0xFDA
 15199                           fsr2l	equ	0xFD9
 15200                           status	equ	0xFD8
 15201                           
 15202 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 15203 ;; Defined at:
 15204 ;;		line 232 in file "SwSpiApp.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;  phrType         1    wreg     enum E181
 15207 ;;  cPinMode        1   23[COMRAM] unsigned char 
 15208 ;; Auto vars:     Size  Location     Type
 15209 ;;  phrType         1   24[COMRAM] enum E181
 15210 ;; Return value:  Size  Location     Type
 15211 ;;                  1    wreg      void 
 15212 ;; Registers used:
 15213 ;;		wreg, status,2, status,0
 15214 ;; Tracked objects:
 15215 ;;		On entry : 0/0
 15216 ;;		On exit  : 0/0
 15217 ;;		Unchanged: 0/0
 15218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15219 ;;      Params:         1       0       0       0       0       0       0
 15220 ;;      Locals:         1       0       0       0       0       0       0
 15221 ;;      Temps:          0       0       0       0       0       0       0
 15222 ;;      Totals:         2       0       0       0       0       0       0
 15223 ;;Total ram usage:        2 bytes
 15224 ;; Hardware stack levels used:    1
 15225 ;; Hardware stack levels required when called:    3
 15226 ;; This function calls:
 15227 ;;		Nothing
 15228 ;; This function is called by:
 15229 ;;		_SWSPI_send_word
 15230 ;; This function uses a non-reentrant model
 15231 ;;
 15232                           
 15233                           	psect	text59
 15234  004154                     __ptext59:
 15235                           	opt stack 0
 15236  004154                     _SwSpi_Set_Synth_Le_Pin:
 15237                           	opt stack 24
 15238                           
 15239                           ;incstack = 0
 15240                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 15241  004154  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 15242                           
 15243                           ;SwSpiApp.c: 234: switch(phrType)
 15244  004156  D014               	goto	l812
 15245  004158                     
 15246                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 15247  004158  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15248  00415A  A4D8               	btfss	status,2,c
 15249  00415C  D002               	goto	l814
 15250                           
 15251                           ;SwSpiApp.c: 238: {
 15252                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 15253  00415E  848B               	bsf	3979,2,c	;volatile
 15254                           
 15255                           ;SwSpiApp.c: 240: }
 15256  004160  0012               	return	
 15257  004162                     l814:
 15258                           
 15259                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 15260  004162  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15261  004164  A4D8               	btfss	status,2,c
 15262  004166  0012               	return	
 15263                           
 15264                           ;SwSpiApp.c: 242: {
 15265                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 15266  004168  948B               	bcf	3979,2,c	;volatile
 15267                           
 15268                           ;SwSpiApp.c: 244: }
 15269                           ;SwSpiApp.c: 245: break;
 15270  00416A  0012               	return	
 15271  00416C                     
 15272                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 15273  00416C  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15274  00416E  A4D8               	btfss	status,2,c
 15275  004170  D002               	goto	l823
 15276                           
 15277                           ;SwSpiApp.c: 249: {
 15278                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 15279  004172  868C               	bsf	3980,3,c	;volatile
 15280                           
 15281                           ;SwSpiApp.c: 251: }
 15282  004174  0012               	return	
 15283  004176                     l823:
 15284                           
 15285                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 15286  004176  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15287  004178  A4D8               	btfss	status,2,c
 15288  00417A  0012               	return	
 15289                           
 15290                           ;SwSpiApp.c: 253: {
 15291                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 15292  00417C  968C               	bcf	3980,3,c	;volatile
 15293                           
 15294                           ;SwSpiApp.c: 257: }
 15295                           
 15296                           ;SwSpiApp.c: 255: }
 15297                           ;SwSpiApp.c: 256: break;
 15298  00417E  0012               	return	
 15299  004180                     l812:
 15300  004180  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 15301                           
 15302                           ; Switch size 1, requested type "space"
 15303                           ; Number of cases is 2, Range of values is 0 to 1
 15304                           ; switch strategies available:
 15305                           ; Name         Instructions Cycles
 15306                           ; simple_byte            7     4 (average)
 15307                           ;	Chosen strategy is simple_byte
 15308  004182  0A00               	xorlw	0	; case 0
 15309  004184  B4D8               	btfsc	status,2,c
 15310  004186  D7E8               	goto	l813
 15311  004188  0A01               	xorlw	1	; case 1
 15312  00418A  A4D8               	btfss	status,2,c
 15313  00418C  0012               	return	
 15314  00418E  D7EE               	goto	l822
 15315  004190                     __end_of_SwSpi_Set_Synth_Le_Pin:
 15316                           	opt stack 0
 15317                           tosu	equ	0xFFF
 15318                           tosh	equ	0xFFE
 15319                           tosl	equ	0xFFD
 15320                           pclath	equ	0xFFA
 15321                           tblptru	equ	0xFF8
 15322                           tblptrh	equ	0xFF7
 15323                           tblptrl	equ	0xFF6
 15324                           tablat	equ	0xFF5
 15325                           prodh	equ	0xFF4
 15326                           prodl	equ	0xFF3
 15327                           intcon	equ	0xFF2
 15328                           intcon2	equ	0xFF1
 15329                           indf0	equ	0xFEF
 15330                           postinc0	equ	0xFEE
 15331                           fsr0h	equ	0xFEA
 15332                           fsr0l	equ	0xFE9
 15333                           wreg	equ	0xFE8
 15334                           indf1	equ	0xFE7
 15335                           postdec1	equ	0xFE5
 15336                           fsr1h	equ	0xFE2
 15337                           fsr1l	equ	0xFE1
 15338                           indf2	equ	0xFDF
 15339                           postinc2	equ	0xFDE
 15340                           postdec2	equ	0xFDD
 15341                           fsr2h	equ	0xFDA
 15342                           fsr2l	equ	0xFD9
 15343                           status	equ	0xFD8
 15344                           
 15345 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 15346 ;; Defined at:
 15347 ;;		line 260 in file "SwSpiApp.c"
 15348 ;; Parameters:    Size  Location     Type
 15349 ;;  cPinMode        1    wreg     unsigned char 
 15350 ;; Auto vars:     Size  Location     Type
 15351 ;;  cPinMode        1   23[COMRAM] unsigned char 
 15352 ;; Return value:  Size  Location     Type
 15353 ;;                  1    wreg      void 
 15354 ;; Registers used:
 15355 ;;		wreg, status,2, status,0
 15356 ;; Tracked objects:
 15357 ;;		On entry : 0/0
 15358 ;;		On exit  : 0/0
 15359 ;;		Unchanged: 0/0
 15360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15361 ;;      Params:         0       0       0       0       0       0       0
 15362 ;;      Locals:         1       0       0       0       0       0       0
 15363 ;;      Temps:          0       0       0       0       0       0       0
 15364 ;;      Totals:         1       0       0       0       0       0       0
 15365 ;;Total ram usage:        1 bytes
 15366 ;; Hardware stack levels used:    1
 15367 ;; Hardware stack levels required when called:    3
 15368 ;; This function calls:
 15369 ;;		Nothing
 15370 ;; This function is called by:
 15371 ;;		_SWSPI_send_word
 15372 ;; This function uses a non-reentrant model
 15373 ;;
 15374                           
 15375                           	psect	text60
 15376  0044A0                     __ptext60:
 15377                           	opt stack 0
 15378  0044A0                     _SwSpi_Set_Dac_Sync_Pin:
 15379                           	opt stack 24
 15380                           
 15381                           ;incstack = 0
 15382                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 15383  0044A0  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 15384                           
 15385                           ;SwSpiApp.c: 262: switch(cPinMode)
 15386  0044A2  D004               	goto	l833
 15387  0044A4                     
 15388                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 15389  0044A4  9489               	bcf	3977,2,c	;volatile
 15390                           
 15391                           ;SwSpiApp.c: 266: break;
 15392  0044A6  0012               	return	
 15393  0044A8                     
 15394                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 15395  0044A8  8489               	bsf	3977,2,c	;volatile
 15396                           
 15397                           ;SwSpiApp.c: 271: }
 15398                           
 15399                           ;SwSpiApp.c: 270: break;
 15400  0044AA  0012               	return	
 15401  0044AC                     l833:
 15402  0044AC  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 15403                           
 15404                           ; Switch size 1, requested type "space"
 15405                           ; Number of cases is 2, Range of values is 0 to 1
 15406                           ; switch strategies available:
 15407                           ; Name         Instructions Cycles
 15408                           ; simple_byte            7     4 (average)
 15409                           ;	Chosen strategy is simple_byte
 15410  0044AE  0A00               	xorlw	0	; case 0
 15411  0044B0  B4D8               	btfsc	status,2,c
 15412  0044B2  D7F8               	goto	l834
 15413  0044B4  0A01               	xorlw	1	; case 1
 15414  0044B6  A4D8               	btfss	status,2,c
 15415  0044B8  0012               	return	
 15416  0044BA  D7F6               	goto	l838
 15417  0044BC                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 15418                           	opt stack 0
 15419                           tosu	equ	0xFFF
 15420                           tosh	equ	0xFFE
 15421                           tosl	equ	0xFFD
 15422                           pclath	equ	0xFFA
 15423                           tblptru	equ	0xFF8
 15424                           tblptrh	equ	0xFF7
 15425                           tblptrl	equ	0xFF6
 15426                           tablat	equ	0xFF5
 15427                           prodh	equ	0xFF4
 15428                           prodl	equ	0xFF3
 15429                           intcon	equ	0xFF2
 15430                           intcon2	equ	0xFF1
 15431                           indf0	equ	0xFEF
 15432                           postinc0	equ	0xFEE
 15433                           fsr0h	equ	0xFEA
 15434                           fsr0l	equ	0xFE9
 15435                           wreg	equ	0xFE8
 15436                           indf1	equ	0xFE7
 15437                           postdec1	equ	0xFE5
 15438                           fsr1h	equ	0xFE2
 15439                           fsr1l	equ	0xFE1
 15440                           indf2	equ	0xFDF
 15441                           postinc2	equ	0xFDE
 15442                           postdec2	equ	0xFDD
 15443                           fsr2h	equ	0xFDA
 15444                           fsr2l	equ	0xFD9
 15445                           status	equ	0xFD8
 15446                           
 15447 ;; *************** function _SWSPI_Synth_send_bits *****************
 15448 ;; Defined at:
 15449 ;;		line 67 in file "SwSpiApp.c"
 15450 ;; Parameters:    Size  Location     Type
 15451 ;;  phrType         1    wreg     enum E181
 15452 ;;  data            4   35[COMRAM] unsigned long 
 15453 ;; Auto vars:     Size  Location     Type
 15454 ;;  phrType         1   37[BANK0 ] enum E181
 15455 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 15456 ;;  mask            4   32[BANK0 ] unsigned long 
 15457 ;;  count           1   36[BANK0 ] unsigned char 
 15458 ;; Return value:  Size  Location     Type
 15459 ;;                  1    wreg      void 
 15460 ;; Registers used:
 15461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15462 ;; Tracked objects:
 15463 ;;		On entry : 0/0
 15464 ;;		On exit  : 0/0
 15465 ;;		Unchanged: 0/0
 15466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15467 ;;      Params:         4       0       0       0       0       0       0
 15468 ;;      Locals:         0      38       0       0       0       0       0
 15469 ;;      Temps:          0       0       0       0       0       0       0
 15470 ;;      Totals:         4      38       0       0       0       0       0
 15471 ;;Total ram usage:       42 bytes
 15472 ;; Hardware stack levels used:    1
 15473 ;; Hardware stack levels required when called:    5
 15474 ;; This function calls:
 15475 ;;		_Make32bitsArray
 15476 ;;		_SwSpi_Clk_Pin
 15477 ;;		_SwSpi_Data_Pin
 15478 ;;		_ZeroArray
 15479 ;; This function is called by:
 15480 ;;		_SWSPI_send_word
 15481 ;; This function uses a non-reentrant model
 15482 ;;
 15483                           
 15484                           	psect	text61
 15485  003308                     __ptext61:
 15486                           	opt stack 0
 15487  003308                     _SWSPI_Synth_send_bits:
 15488                           	opt stack 22
 15489                           
 15490                           ;incstack = 0
 15491                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 15492  003308  0100               	movlb	0	; () banked
 15493  00330A  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 15494                           
 15495                           ;SwSpiApp.c: 69: uint8_t count;
 15496                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 15497  00330C  0E01               	movlw	1
 15498  00330E  0100               	movlb	0	; () banked
 15499  003310  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 15500  003312  0E00               	movlw	0
 15501  003314  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 15502  003316  0E00               	movlw	0
 15503  003318  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 15504  00331A  0E00               	movlw	0
 15505  00331C  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 15506                           
 15507                           ; BSR set to: 0
 15508                           ;SwSpiApp.c: 72: bool bitArray[32];
 15509                           ;SwSpiApp.c: 73: ZeroArray(bitArray, sizeof(bitArray));
 15510  00331E  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 15511  003320  6E20               	movwf	ZeroArray@array,c
 15512  003322  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 15513  003324  6E21               	movwf	ZeroArray@array+1,c
 15514  003326  0E00               	movlw	0
 15515  003328  6E23               	movwf	ZeroArray@size+1,c
 15516  00332A  0E20               	movlw	32
 15517  00332C  6E22               	movwf	ZeroArray@size,c
 15518  00332E  EC41  F022         	call	_ZeroArray	;wreg free
 15519                           
 15520                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 15521  003332  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 15522  003334  6E18               	movwf	Make32bitsArray@array,c
 15523  003336  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 15524  003338  6E19               	movwf	Make32bitsArray@array+1,c
 15525  00333A  C024  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 15526  00333E  C025  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 15527  003342  C026  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 15528  003346  C027  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 15529  00334A  ECC8  F01E         	call	_Make32bitsArray	;wreg free
 15530                           
 15531                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 15532  00334E  0E00               	movlw	0
 15533  003350  0100               	movlb	0	; () banked
 15534  003352  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 15535  003354                     l9283:
 15536                           
 15537                           ; BSR set to: 0
 15538  003354  0E1F               	movlw	31
 15539  003356  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 15540  003358  D001               	goto	l718
 15541  00335A  D026               	goto	u9630
 15542  00335C                     l718:
 15543                           
 15544                           ; BSR set to: 0
 15545                           ;SwSpiApp.c: 78: {
 15546                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 15547                           
 15548                           ; BSR set to: 0
 15549  00335C  0E00               	movlw	0
 15550  00335E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15551  003360  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15552  003362  EC4B  F01F         	call	_SwSpi_Clk_Pin
 15553                           
 15554                           ;SwSpiApp.c: 82: if (bitArray[count])
 15555  003366  0100               	movlb	0	; () banked
 15556  003368  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 15557  00336A  0D01               	mullw	1
 15558  00336C  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 15559  00336E  24F3               	addwf	prodl,w,c
 15560  003370  6ED9               	movwf	fsr2l,c
 15561  003372  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 15562  003374  20F4               	addwfc	prodh,w,c
 15563  003376  6EDA               	movwf	fsr2h,c
 15564  003378  50DF               	movf	indf2,w,c
 15565  00337A  B4D8               	btfsc	status,2,c
 15566  00337C  D006               	goto	l720
 15567                           
 15568                           ; BSR set to: 0
 15569                           ;SwSpiApp.c: 83: {
 15570                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 15571  00337E  0E01               	movlw	1
 15572  003380  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15573  003382  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15574  003384  EC20  F01F         	call	_SwSpi_Data_Pin
 15575                           
 15576                           ;SwSpiApp.c: 85: }
 15577  003388  D006               	goto	l721
 15578  00338A                     l720:
 15579                           
 15580                           ;SwSpiApp.c: 86: else
 15581                           ;SwSpiApp.c: 87: {
 15582                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 15583  00338A  0E00               	movlw	0
 15584  00338C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15585  00338E  0100               	movlb	0	; () banked
 15586  003390  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15587  003392  EC20  F01F         	call	_SwSpi_Data_Pin
 15588  003396                     l721:
 15589                           
 15590                           ;SwSpiApp.c: 89: }
 15591                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 15592  003396  0E01               	movlw	1
 15593  003398  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15594  00339A  0100               	movlb	0	; () banked
 15595  00339C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15596  00339E  EC4B  F01F         	call	_SwSpi_Clk_Pin
 15597  0033A2  0100               	movlb	0	; () banked
 15598  0033A4  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 15599  0033A6  D7D6               	goto	l9283
 15600  0033A8                     u9630:
 15601                           
 15602                           ; BSR set to: 0
 15603                           ;SwSpiApp.c: 92: }
 15604                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 15605                           
 15606                           ; BSR set to: 0
 15607  0033A8  0E21               	movlw	33
 15608  0033AA                     u10877:
 15609  0033AA  2EE8               	decfsz	wreg,f,c
 15610  0033AC  D7FE               	bra	u10877
 15611  0033AE  F000               	nop	
 15612                           
 15613                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 15614  0033B0  0E00               	movlw	0
 15615  0033B2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15616  0033B4  0100               	movlb	0	; () banked
 15617  0033B6  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15618  0033B8  EC20  F01F         	call	_SwSpi_Data_Pin
 15619                           
 15620                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 15621  0033BC  0E00               	movlw	0
 15622  0033BE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15623  0033C0  0100               	movlb	0	; () banked
 15624  0033C2  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15625  0033C4  EC4B  F01F         	call	_SwSpi_Clk_Pin
 15626  0033C8  0012               	return		;funcret
 15627  0033CA                     __end_of_SWSPI_Synth_send_bits:
 15628                           	opt stack 0
 15629                           tosu	equ	0xFFF
 15630                           tosh	equ	0xFFE
 15631                           tosl	equ	0xFFD
 15632                           pclath	equ	0xFFA
 15633                           tblptru	equ	0xFF8
 15634                           tblptrh	equ	0xFF7
 15635                           tblptrl	equ	0xFF6
 15636                           tablat	equ	0xFF5
 15637                           prodh	equ	0xFF4
 15638                           prodl	equ	0xFF3
 15639                           intcon	equ	0xFF2
 15640                           intcon2	equ	0xFF1
 15641                           indf0	equ	0xFEF
 15642                           postinc0	equ	0xFEE
 15643                           fsr0h	equ	0xFEA
 15644                           fsr0l	equ	0xFE9
 15645                           wreg	equ	0xFE8
 15646                           indf1	equ	0xFE7
 15647                           postdec1	equ	0xFE5
 15648                           fsr1h	equ	0xFE2
 15649                           fsr1l	equ	0xFE1
 15650                           indf2	equ	0xFDF
 15651                           postinc2	equ	0xFDE
 15652                           postdec2	equ	0xFDD
 15653                           fsr2h	equ	0xFDA
 15654                           fsr2l	equ	0xFD9
 15655                           status	equ	0xFD8
 15656                           
 15657 ;; *************** function _ZeroArray *****************
 15658 ;; Defined at:
 15659 ;;		line 33 in file "SystemCommon.c"
 15660 ;; Parameters:    Size  Location     Type
 15661 ;;  array           2   31[COMRAM] PTR unsigned char 
 15662 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), FlashReadCondition@TxMsg(7), FlashReadUart
      +@TxMsg(67), 
 15663 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 15664 ;;  size            2   33[COMRAM] int 
 15665 ;; Auto vars:     Size  Location     Type
 15666 ;;		None
 15667 ;; Return value:  Size  Location     Type
 15668 ;;                  1    wreg      void 
 15669 ;; Registers used:
 15670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15671 ;; Tracked objects:
 15672 ;;		On entry : 0/0
 15673 ;;		On exit  : 0/0
 15674 ;;		Unchanged: 0/0
 15675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15676 ;;      Params:         4       0       0       0       0       0       0
 15677 ;;      Locals:         0       0       0       0       0       0       0
 15678 ;;      Temps:          0       0       0       0       0       0       0
 15679 ;;      Totals:         4       0       0       0       0       0       0
 15680 ;;Total ram usage:        4 bytes
 15681 ;; Hardware stack levels used:    1
 15682 ;; Hardware stack levels required when called:    4
 15683 ;; This function calls:
 15684 ;;		_memset
 15685 ;; This function is called by:
 15686 ;;		_InitRxMessageParams
 15687 ;;		_SWSPI_Synth_send_bits
 15688 ;;		_GetIntFromUartData
 15689 ;;		_SendAckMessage
 15690 ;;		_FlashReadUart
 15691 ;;		_FlashEreaseMem
 15692 ;;		_FlashReadCondition
 15693 ;; This function uses a non-reentrant model
 15694 ;;
 15695                           
 15696                           	psect	text62
 15697  004482                     __ptext62:
 15698                           	opt stack 0
 15699  004482                     _ZeroArray:
 15700                           	opt stack 24
 15701                           
 15702                           ;SystemCommon.c: 35: memset(array, 0x0, size);
 15703                           
 15704                           ;incstack = 0
 15705  004482  C020  F018         	movff	ZeroArray@array,memset@p1
 15706  004486  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 15707  00448A  0E00               	movlw	0
 15708  00448C  6E1B               	movwf	memset@c+1,c
 15709  00448E  0E00               	movlw	0
 15710  004490  6E1A               	movwf	memset@c,c
 15711  004492  C022  F01C         	movff	ZeroArray@size,memset@n
 15712  004496  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 15713  00449A  EC9D  F021         	call	_memset	;wreg free
 15714  00449E  0012               	return		;funcret
 15715  0044A0                     __end_of_ZeroArray:
 15716                           	opt stack 0
 15717                           tosu	equ	0xFFF
 15718                           tosh	equ	0xFFE
 15719                           tosl	equ	0xFFD
 15720                           pclath	equ	0xFFA
 15721                           tblptru	equ	0xFF8
 15722                           tblptrh	equ	0xFF7
 15723                           tblptrl	equ	0xFF6
 15724                           tablat	equ	0xFF5
 15725                           prodh	equ	0xFF4
 15726                           prodl	equ	0xFF3
 15727                           intcon	equ	0xFF2
 15728                           intcon2	equ	0xFF1
 15729                           indf0	equ	0xFEF
 15730                           postinc0	equ	0xFEE
 15731                           fsr0h	equ	0xFEA
 15732                           fsr0l	equ	0xFE9
 15733                           wreg	equ	0xFE8
 15734                           indf1	equ	0xFE7
 15735                           postdec1	equ	0xFE5
 15736                           fsr1h	equ	0xFE2
 15737                           fsr1l	equ	0xFE1
 15738                           indf2	equ	0xFDF
 15739                           postinc2	equ	0xFDE
 15740                           postdec2	equ	0xFDD
 15741                           fsr2h	equ	0xFDA
 15742                           fsr2l	equ	0xFD9
 15743                           status	equ	0xFD8
 15744                           
 15745 ;; *************** function _memset *****************
 15746 ;; Defined at:
 15747 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 15748 ;; Parameters:    Size  Location     Type
 15749 ;;  p1              2   23[COMRAM] PTR void 
 15750 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), FlashReadCondition@TxMsg(7), FlashReadUart
      +@TxMsg(67), 
 15751 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 15752 ;;  c               2   25[COMRAM] int 
 15753 ;;  n               2   27[COMRAM] unsigned int 
 15754 ;; Auto vars:     Size  Location     Type
 15755 ;;  p               2   29[COMRAM] PTR unsigned char 
 15756 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), FlashReadCondition@TxMsg(7), FlashReadUart
      +@TxMsg(67), 
 15757 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 15758 ;; Return value:  Size  Location     Type
 15759 ;;                  2   23[COMRAM] PTR void 
 15760 ;; Registers used:
 15761 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15762 ;; Tracked objects:
 15763 ;;		On entry : 0/0
 15764 ;;		On exit  : 0/0
 15765 ;;		Unchanged: 0/0
 15766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15767 ;;      Params:         6       0       0       0       0       0       0
 15768 ;;      Locals:         2       0       0       0       0       0       0
 15769 ;;      Temps:          0       0       0       0       0       0       0
 15770 ;;      Totals:         8       0       0       0       0       0       0
 15771 ;;Total ram usage:        8 bytes
 15772 ;; Hardware stack levels used:    1
 15773 ;; Hardware stack levels required when called:    3
 15774 ;; This function calls:
 15775 ;;		Nothing
 15776 ;; This function is called by:
 15777 ;;		_ZeroArray
 15778 ;; This function uses a non-reentrant model
 15779 ;;
 15780                           
 15781                           	psect	text63
 15782  00433A                     __ptext63:
 15783                           	opt stack 0
 15784  00433A                     _memset:
 15785                           	opt stack 24
 15786                           
 15787                           ;incstack = 0
 15788  00433A  C018  F01E         	movff	memset@p1,memset@p
 15789  00433E  C019  F01F         	movff	memset@p1+1,memset@p+1
 15790  004342  D008               	goto	l2200
 15791  004344                     l8309:
 15792  004344  C01E  FFD9         	movff	memset@p,fsr2l
 15793  004348  C01F  FFDA         	movff	memset@p+1,fsr2h
 15794  00434C  C01A  FFDF         	movff	memset@c,indf2
 15795  004350  4A1E               	infsnz	memset@p,f,c
 15796  004352  2A1F               	incf	memset@p+1,f,c
 15797  004354                     l2200:
 15798  004354  061C               	decf	memset@n,f,c
 15799  004356  A0D8               	btfss	status,0,c
 15800  004358  061D               	decf	memset@n+1,f,c
 15801  00435A  281C               	incf	memset@n,w,c
 15802  00435C  E1F3               	bnz	l8309
 15803  00435E  281D               	incf	memset@n+1,w,c
 15804  004360  B4D8               	btfsc	status,2,c
 15805  004362  0012               	return	
 15806  004364  D7EF               	goto	l2201
 15807  004366                     __end_of_memset:
 15808                           	opt stack 0
 15809                           tosu	equ	0xFFF
 15810                           tosh	equ	0xFFE
 15811                           tosl	equ	0xFFD
 15812                           pclath	equ	0xFFA
 15813                           tblptru	equ	0xFF8
 15814                           tblptrh	equ	0xFF7
 15815                           tblptrl	equ	0xFF6
 15816                           tablat	equ	0xFF5
 15817                           prodh	equ	0xFF4
 15818                           prodl	equ	0xFF3
 15819                           intcon	equ	0xFF2
 15820                           intcon2	equ	0xFF1
 15821                           indf0	equ	0xFEF
 15822                           postinc0	equ	0xFEE
 15823                           fsr0h	equ	0xFEA
 15824                           fsr0l	equ	0xFE9
 15825                           wreg	equ	0xFE8
 15826                           indf1	equ	0xFE7
 15827                           postdec1	equ	0xFE5
 15828                           fsr1h	equ	0xFE2
 15829                           fsr1l	equ	0xFE1
 15830                           indf2	equ	0xFDF
 15831                           postinc2	equ	0xFDE
 15832                           postdec2	equ	0xFDD
 15833                           fsr2h	equ	0xFDA
 15834                           fsr2l	equ	0xFD9
 15835                           status	equ	0xFD8
 15836                           
 15837 ;; *************** function _Make32bitsArray *****************
 15838 ;; Defined at:
 15839 ;;		line 24 in file "SystemCommon.c"
 15840 ;; Parameters:    Size  Location     Type
 15841 ;;  array           2   23[COMRAM] PTR unsigned char 
 15842 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 15843 ;;  data            4   25[COMRAM] unsigned long 
 15844 ;; Auto vars:     Size  Location     Type
 15845 ;;  idx             2   31[COMRAM] int 
 15846 ;; Return value:  Size  Location     Type
 15847 ;;                  1    wreg      void 
 15848 ;; Registers used:
 15849 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15850 ;; Tracked objects:
 15851 ;;		On entry : 0/0
 15852 ;;		On exit  : 0/0
 15853 ;;		Unchanged: 0/0
 15854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15855 ;;      Params:         6       0       0       0       0       0       0
 15856 ;;      Locals:         2       0       0       0       0       0       0
 15857 ;;      Temps:          2       0       0       0       0       0       0
 15858 ;;      Totals:        10       0       0       0       0       0       0
 15859 ;;Total ram usage:       10 bytes
 15860 ;; Hardware stack levels used:    1
 15861 ;; Hardware stack levels required when called:    3
 15862 ;; This function calls:
 15863 ;;		Nothing
 15864 ;; This function is called by:
 15865 ;;		_SWSPI_Synth_send_bits
 15866 ;; This function uses a non-reentrant model
 15867 ;;
 15868                           
 15869                           	psect	text64
 15870  003D90                     __ptext64:
 15871                           	opt stack 0
 15872  003D90                     _Make32bitsArray:
 15873                           	opt stack 23
 15874                           
 15875                           ;SystemCommon.c: 26: for(int idx = 0; idx <= 32; idx++)
 15876                           
 15877                           ;incstack = 0
 15878  003D90  0E00               	movlw	0
 15879  003D92  6E21               	movwf	Make32bitsArray@idx+1,c
 15880  003D94  0E00               	movlw	0
 15881  003D96  6E20               	movwf	Make32bitsArray@idx,c
 15882  003D98                     l8611:
 15883  003D98  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 15884  003D9A  D006               	goto	l1422
 15885  003D9C  5021               	movf	Make32bitsArray@idx+1,w,c
 15886  003D9E  E123               	bnz	l1424
 15887  003DA0  0E21               	movlw	33
 15888  003DA2  5C20               	subwf	Make32bitsArray@idx,w,c
 15889  003DA4  B0D8               	btfsc	status,0,c
 15890  003DA6  0012               	return	
 15891  003DA8                     l1422:
 15892                           
 15893                           ;SystemCommon.c: 27: {
 15894                           ;SystemCommon.c: 28: array[32 - idx - 1] = data % 2;
 15895  003DA8  0E01               	movlw	1
 15896  003DAA  2420               	addwf	Make32bitsArray@idx,w,c
 15897  003DAC  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 15898  003DAE  0E00               	movlw	0
 15899  003DB0  2021               	addwfc	Make32bitsArray@idx+1,w,c
 15900  003DB2  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 15901  003DB4  1E1E               	comf	??_Make32bitsArray,f,c
 15902  003DB6  1E1F               	comf	??_Make32bitsArray+1,f,c
 15903  003DB8  4A1E               	infsnz	??_Make32bitsArray,f,c
 15904  003DBA  2A1F               	incf	??_Make32bitsArray+1,f,c
 15905  003DBC  0E20               	movlw	32
 15906  003DBE  261E               	addwf	??_Make32bitsArray,f,c
 15907  003DC0  0E00               	movlw	0
 15908  003DC2  221F               	addwfc	??_Make32bitsArray+1,f,c
 15909  003DC4  501E               	movf	??_Make32bitsArray,w,c
 15910  003DC6  2418               	addwf	Make32bitsArray@array,w,c
 15911  003DC8  6ED9               	movwf	fsr2l,c
 15912  003DCA  501F               	movf	??_Make32bitsArray+1,w,c
 15913  003DCC  2019               	addwfc	Make32bitsArray@array+1,w,c
 15914  003DCE  6EDA               	movwf	fsr2h,c
 15915  003DD0  501A               	movf	Make32bitsArray@data,w,c
 15916  003DD2  0B01               	andlw	1
 15917  003DD4  6EDF               	movwf	indf2,c
 15918                           
 15919                           ;SystemCommon.c: 29: data /= 2;
 15920  003DD6  90D8               	bcf	status,0,c
 15921  003DD8  321D               	rrcf	Make32bitsArray@data+3,f,c
 15922  003DDA  321C               	rrcf	Make32bitsArray@data+2,f,c
 15923  003DDC  321B               	rrcf	Make32bitsArray@data+1,f,c
 15924  003DDE  321A               	rrcf	Make32bitsArray@data,f,c
 15925  003DE0  4A20               	infsnz	Make32bitsArray@idx,f,c
 15926  003DE2  2A21               	incf	Make32bitsArray@idx+1,f,c
 15927  003DE4  D7D9               	goto	l8611
 15928  003DE6                     l1424:
 15929  003DE6  0012               	return		;funcret
 15930  003DE8                     __end_of_Make32bitsArray:
 15931                           	opt stack 0
 15932                           tosu	equ	0xFFF
 15933                           tosh	equ	0xFFE
 15934                           tosl	equ	0xFFD
 15935                           pclath	equ	0xFFA
 15936                           tblptru	equ	0xFF8
 15937                           tblptrh	equ	0xFF7
 15938                           tblptrl	equ	0xFF6
 15939                           tablat	equ	0xFF5
 15940                           prodh	equ	0xFF4
 15941                           prodl	equ	0xFF3
 15942                           intcon	equ	0xFF2
 15943                           intcon2	equ	0xFF1
 15944                           indf0	equ	0xFEF
 15945                           postinc0	equ	0xFEE
 15946                           fsr0h	equ	0xFEA
 15947                           fsr0l	equ	0xFE9
 15948                           wreg	equ	0xFE8
 15949                           indf1	equ	0xFE7
 15950                           postdec1	equ	0xFE5
 15951                           fsr1h	equ	0xFE2
 15952                           fsr1l	equ	0xFE1
 15953                           indf2	equ	0xFDF
 15954                           postinc2	equ	0xFDE
 15955                           postdec2	equ	0xFDD
 15956                           fsr2h	equ	0xFDA
 15957                           fsr2l	equ	0xFD9
 15958                           status	equ	0xFD8
 15959                           
 15960 ;; *************** function _SWSPI_DAC_send_bits *****************
 15961 ;; Defined at:
 15962 ;;		line 43 in file "SwSpiApp.c"
 15963 ;; Parameters:    Size  Location     Type
 15964 ;;  phrType         1    wreg     enum E181
 15965 ;;  data            1   25[COMRAM] unsigned char 
 15966 ;; Auto vars:     Size  Location     Type
 15967 ;;  phrType         1   27[COMRAM] enum E181
 15968 ;;  count           1   26[COMRAM] unsigned char 
 15969 ;; Return value:  Size  Location     Type
 15970 ;;                  1    wreg      void 
 15971 ;; Registers used:
 15972 ;;		wreg, status,2, status,0, cstack
 15973 ;; Tracked objects:
 15974 ;;		On entry : 0/0
 15975 ;;		On exit  : 0/0
 15976 ;;		Unchanged: 0/0
 15977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15978 ;;      Params:         1       0       0       0       0       0       0
 15979 ;;      Locals:         2       0       0       0       0       0       0
 15980 ;;      Temps:          0       0       0       0       0       0       0
 15981 ;;      Totals:         3       0       0       0       0       0       0
 15982 ;;Total ram usage:        3 bytes
 15983 ;; Hardware stack levels used:    1
 15984 ;; Hardware stack levels required when called:    4
 15985 ;; This function calls:
 15986 ;;		_SwSpi_Clk_Pin
 15987 ;;		_SwSpi_Data_Pin
 15988 ;; This function is called by:
 15989 ;;		_SWSPI_send_word
 15990 ;; This function uses a non-reentrant model
 15991 ;;
 15992                           
 15993                           	psect	text65
 15994  003DE8                     __ptext65:
 15995                           	opt stack 0
 15996  003DE8                     _SWSPI_DAC_send_bits:
 15997                           	opt stack 23
 15998                           
 15999                           ;incstack = 0
 16000                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 16001  003DE8  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 16002                           
 16003                           ;SwSpiApp.c: 45: uint8_t count;
 16004                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 16005  003DEA  0E08               	movlw	8
 16006  003DEC  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 16007  003DEE  D01A               	goto	l710
 16008  003DF0                     
 16009                           ;SwSpiApp.c: 47: {
 16010                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 16011  003DF0  0E01               	movlw	1
 16012  003DF2  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16013  003DF4  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16014  003DF6  EC4B  F01F         	call	_SwSpi_Clk_Pin
 16015                           
 16016                           ;SwSpiApp.c: 50: if (data & 0X80)
 16017  003DFA  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 16018  003DFC  D006               	goto	l712
 16019                           
 16020                           ;SwSpiApp.c: 51: {
 16021                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 16022  003DFE  0E01               	movlw	1
 16023  003E00  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16024  003E02  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16025  003E04  EC20  F01F         	call	_SwSpi_Data_Pin
 16026                           
 16027                           ;SwSpiApp.c: 54: }
 16028  003E08  D005               	goto	l713
 16029  003E0A                     l712:
 16030                           
 16031                           ;SwSpiApp.c: 55: else
 16032                           ;SwSpiApp.c: 56: {
 16033                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 16034  003E0A  0E00               	movlw	0
 16035  003E0C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16036  003E0E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16037  003E10  EC20  F01F         	call	_SwSpi_Data_Pin
 16038  003E14                     l713:
 16039                           
 16040                           ;SwSpiApp.c: 58: }
 16041                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 16042  003E14  0E00               	movlw	0
 16043  003E16  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16044  003E18  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16045  003E1A  EC4B  F01F         	call	_SwSpi_Clk_Pin
 16046  003E1E  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 16047  003E20  90D8               	bcf	status,0,c
 16048  003E22  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 16049  003E24                     l710:
 16050  003E24  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 16051  003E26  A4D8               	btfss	status,2,c
 16052  003E28  D7E3               	goto	l711
 16053                           
 16054                           ;SwSpiApp.c: 61: }
 16055                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 16056  003E2A  0E00               	movlw	0
 16057  003E2C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16058  003E2E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16059  003E30  EC20  F01F         	call	_SwSpi_Data_Pin
 16060                           
 16061                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 16062  003E34  0E00               	movlw	0
 16063  003E36  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16064  003E38  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16065  003E3A  EC4B  F01F         	call	_SwSpi_Clk_Pin
 16066  003E3E  0012               	return		;funcret
 16067  003E40                     __end_of_SWSPI_DAC_send_bits:
 16068                           	opt stack 0
 16069                           tosu	equ	0xFFF
 16070                           tosh	equ	0xFFE
 16071                           tosl	equ	0xFFD
 16072                           pclath	equ	0xFFA
 16073                           tblptru	equ	0xFF8
 16074                           tblptrh	equ	0xFF7
 16075                           tblptrl	equ	0xFF6
 16076                           tablat	equ	0xFF5
 16077                           prodh	equ	0xFF4
 16078                           prodl	equ	0xFF3
 16079                           intcon	equ	0xFF2
 16080                           intcon2	equ	0xFF1
 16081                           indf0	equ	0xFEF
 16082                           postinc0	equ	0xFEE
 16083                           fsr0h	equ	0xFEA
 16084                           fsr0l	equ	0xFE9
 16085                           wreg	equ	0xFE8
 16086                           indf1	equ	0xFE7
 16087                           postdec1	equ	0xFE5
 16088                           fsr1h	equ	0xFE2
 16089                           fsr1l	equ	0xFE1
 16090                           indf2	equ	0xFDF
 16091                           postinc2	equ	0xFDE
 16092                           postdec2	equ	0xFDD
 16093                           fsr2h	equ	0xFDA
 16094                           fsr2l	equ	0xFD9
 16095                           status	equ	0xFD8
 16096                           
 16097 ;; *************** function _SwSpi_Data_Pin *****************
 16098 ;; Defined at:
 16099 ;;		line 103 in file "SwSpiApp.c"
 16100 ;; Parameters:    Size  Location     Type
 16101 ;;  phrType         1    wreg     enum E181
 16102 ;;  cPinMode        1   23[COMRAM] unsigned char 
 16103 ;; Auto vars:     Size  Location     Type
 16104 ;;  phrType         1   24[COMRAM] enum E181
 16105 ;; Return value:  Size  Location     Type
 16106 ;;                  1    wreg      void 
 16107 ;; Registers used:
 16108 ;;		wreg, status,2, status,0
 16109 ;; Tracked objects:
 16110 ;;		On entry : 0/0
 16111 ;;		On exit  : 0/0
 16112 ;;		Unchanged: 0/0
 16113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16114 ;;      Params:         1       0       0       0       0       0       0
 16115 ;;      Locals:         1       0       0       0       0       0       0
 16116 ;;      Temps:          0       0       0       0       0       0       0
 16117 ;;      Totals:         2       0       0       0       0       0       0
 16118 ;;Total ram usage:        2 bytes
 16119 ;; Hardware stack levels used:    1
 16120 ;; Hardware stack levels required when called:    3
 16121 ;; This function calls:
 16122 ;;		Nothing
 16123 ;; This function is called by:
 16124 ;;		_SWSPI_DAC_send_bits
 16125 ;;		_SWSPI_Synth_send_bits
 16126 ;; This function uses a non-reentrant model
 16127 ;;
 16128                           
 16129                           	psect	text66
 16130  003E40                     __ptext66:
 16131                           	opt stack 0
 16132  003E40                     _SwSpi_Data_Pin:
 16133                           	opt stack 23
 16134                           
 16135                           ;incstack = 0
 16136                           ;SwSpi_Data_Pin@phrType stored from wreg
 16137  003E40  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 16138                           
 16139                           ;SwSpiApp.c: 105: switch(phrType)
 16140  003E42  D01E               	goto	l725
 16141  003E44                     
 16142                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 16143  003E44  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 16144  003E46  A4D8               	btfss	status,2,c
 16145  003E48  D002               	goto	l727
 16146                           
 16147                           ;SwSpiApp.c: 109: {
 16148                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 16149  003E4A  808C               	bsf	3980,0,c	;volatile
 16150                           
 16151                           ;SwSpiApp.c: 111: }
 16152  003E4C  0012               	return	
 16153  003E4E                     l727:
 16154                           
 16155                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 16156  003E4E  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 16157  003E50  A4D8               	btfss	status,2,c
 16158  003E52  0012               	return	
 16159                           
 16160                           ;SwSpiApp.c: 113: {
 16161                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 16162  003E54  908C               	bcf	3980,0,c	;volatile
 16163                           
 16164                           ;SwSpiApp.c: 115: }
 16165                           ;SwSpiApp.c: 116: break;
 16166  003E56  0012               	return	
 16167  003E58                     
 16168                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 16169  003E58  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 16170  003E5A  A4D8               	btfss	status,2,c
 16171  003E5C  D002               	goto	l736
 16172                           
 16173                           ;SwSpiApp.c: 120: {
 16174                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 16175  003E5E  8A8B               	bsf	3979,5,c	;volatile
 16176                           
 16177                           ;SwSpiApp.c: 122: }
 16178  003E60  0012               	return	
 16179  003E62                     l736:
 16180                           
 16181                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 16182  003E62  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 16183  003E64  A4D8               	btfss	status,2,c
 16184  003E66  0012               	return	
 16185                           
 16186                           ;SwSpiApp.c: 124: {
 16187                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 16188  003E68  9A8B               	bcf	3979,5,c	;volatile
 16189                           
 16190                           ;SwSpiApp.c: 126: }
 16191                           ;SwSpiApp.c: 127: break;
 16192  003E6A  0012               	return	
 16193  003E6C                     
 16194                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 16195  003E6C  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 16196  003E6E  A4D8               	btfss	status,2,c
 16197  003E70  D002               	goto	l744
 16198                           
 16199                           ;SwSpiApp.c: 131: {
 16200                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 16201  003E72  8889               	bsf	3977,4,c	;volatile
 16202                           
 16203                           ;SwSpiApp.c: 133: }
 16204  003E74  0012               	return	
 16205  003E76                     l744:
 16206                           
 16207                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 16208  003E76  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 16209  003E78  A4D8               	btfss	status,2,c
 16210  003E7A  0012               	return	
 16211                           
 16212                           ;SwSpiApp.c: 135: {
 16213                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 16214  003E7C  9889               	bcf	3977,4,c	;volatile
 16215                           
 16216                           ;SwSpiApp.c: 139: }
 16217                           
 16218                           ;SwSpiApp.c: 137: }
 16219                           ;SwSpiApp.c: 138: break;
 16220  003E7E  0012               	return	
 16221  003E80                     l725:
 16222  003E80  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 16223                           
 16224                           ; Switch size 1, requested type "space"
 16225                           ; Number of cases is 3, Range of values is 0 to 2
 16226                           ; switch strategies available:
 16227                           ; Name         Instructions Cycles
 16228                           ; simple_byte           10     6 (average)
 16229                           ;	Chosen strategy is simple_byte
 16230  003E82  0A00               	xorlw	0	; case 0
 16231  003E84  B4D8               	btfsc	status,2,c
 16232  003E86  D7DE               	goto	l726
 16233  003E88  0A01               	xorlw	1	; case 1
 16234  003E8A  B4D8               	btfsc	status,2,c
 16235  003E8C  D7E5               	goto	l735
 16236  003E8E  0A03               	xorlw	3	; case 2
 16237  003E90  A4D8               	btfss	status,2,c
 16238  003E92  0012               	return	
 16239  003E94  D7EB               	goto	l743
 16240  003E96                     __end_of_SwSpi_Data_Pin:
 16241                           	opt stack 0
 16242                           tosu	equ	0xFFF
 16243                           tosh	equ	0xFFE
 16244                           tosl	equ	0xFFD
 16245                           pclath	equ	0xFFA
 16246                           tblptru	equ	0xFF8
 16247                           tblptrh	equ	0xFF7
 16248                           tblptrl	equ	0xFF6
 16249                           tablat	equ	0xFF5
 16250                           prodh	equ	0xFF4
 16251                           prodl	equ	0xFF3
 16252                           intcon	equ	0xFF2
 16253                           intcon2	equ	0xFF1
 16254                           indf0	equ	0xFEF
 16255                           postinc0	equ	0xFEE
 16256                           fsr0h	equ	0xFEA
 16257                           fsr0l	equ	0xFE9
 16258                           wreg	equ	0xFE8
 16259                           indf1	equ	0xFE7
 16260                           postdec1	equ	0xFE5
 16261                           fsr1h	equ	0xFE2
 16262                           fsr1l	equ	0xFE1
 16263                           indf2	equ	0xFDF
 16264                           postinc2	equ	0xFDE
 16265                           postdec2	equ	0xFDD
 16266                           fsr2h	equ	0xFDA
 16267                           fsr2l	equ	0xFD9
 16268                           status	equ	0xFD8
 16269                           
 16270 ;; *************** function _SwSpi_Clk_Pin *****************
 16271 ;; Defined at:
 16272 ;;		line 142 in file "SwSpiApp.c"
 16273 ;; Parameters:    Size  Location     Type
 16274 ;;  phrType         1    wreg     enum E181
 16275 ;;  cPinMode        1   23[COMRAM] unsigned char 
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;  phrType         1   24[COMRAM] enum E181
 16278 ;; Return value:  Size  Location     Type
 16279 ;;                  1    wreg      void 
 16280 ;; Registers used:
 16281 ;;		wreg, status,2, status,0
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16287 ;;      Params:         1       0       0       0       0       0       0
 16288 ;;      Locals:         1       0       0       0       0       0       0
 16289 ;;      Temps:          0       0       0       0       0       0       0
 16290 ;;      Totals:         2       0       0       0       0       0       0
 16291 ;;Total ram usage:        2 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:    3
 16294 ;; This function calls:
 16295 ;;		Nothing
 16296 ;; This function is called by:
 16297 ;;		_SWSPI_DAC_send_bits
 16298 ;;		_SWSPI_Synth_send_bits
 16299 ;;		_SwSpi_Synth_Toggle_Clock
 16300 ;; This function uses a non-reentrant model
 16301 ;;
 16302                           
 16303                           	psect	text67
 16304  003E96                     __ptext67:
 16305                           	opt stack 0
 16306  003E96                     _SwSpi_Clk_Pin:
 16307                           	opt stack 23
 16308                           
 16309                           ;incstack = 0
 16310                           ;SwSpi_Clk_Pin@phrType stored from wreg
 16311  003E96  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 16312                           
 16313                           ;SwSpiApp.c: 144: switch(phrType)
 16314  003E98  D01E               	goto	l754
 16315  003E9A                     
 16316                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 16317  003E9A  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 16318  003E9C  A4D8               	btfss	status,2,c
 16319  003E9E  D002               	goto	l756
 16320                           
 16321                           ;SwSpiApp.c: 148: {
 16322                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 16323  003EA0  868B               	bsf	3979,3,c	;volatile
 16324                           
 16325                           ;SwSpiApp.c: 150: }
 16326  003EA2  0012               	return	
 16327  003EA4                     l756:
 16328                           
 16329                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 16330  003EA4  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 16331  003EA6  A4D8               	btfss	status,2,c
 16332  003EA8  0012               	return	
 16333                           
 16334                           ;SwSpiApp.c: 152: {
 16335                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 16336  003EAA  968B               	bcf	3979,3,c	;volatile
 16337                           
 16338                           ;SwSpiApp.c: 154: }
 16339                           ;SwSpiApp.c: 155: break;
 16340  003EAC  0012               	return	
 16341  003EAE                     
 16342                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 16343  003EAE  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 16344  003EB0  A4D8               	btfss	status,2,c
 16345  003EB2  D002               	goto	l765
 16346                           
 16347                           ;SwSpiApp.c: 159: {
 16348                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 16349  003EB4  888B               	bsf	3979,4,c	;volatile
 16350                           
 16351                           ;SwSpiApp.c: 161: }
 16352  003EB6  0012               	return	
 16353  003EB8                     l765:
 16354                           
 16355                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 16356  003EB8  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 16357  003EBA  A4D8               	btfss	status,2,c
 16358  003EBC  0012               	return	
 16359                           
 16360                           ;SwSpiApp.c: 163: {
 16361                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 16362  003EBE  988B               	bcf	3979,4,c	;volatile
 16363                           
 16364                           ;SwSpiApp.c: 165: }
 16365                           ;SwSpiApp.c: 167: break;
 16366  003EC0  0012               	return	
 16367  003EC2                     
 16368                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 16369  003EC2  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 16370  003EC4  A4D8               	btfss	status,2,c
 16371  003EC6  D002               	goto	l773
 16372                           
 16373                           ;SwSpiApp.c: 171: {
 16374                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 16375  003EC8  8689               	bsf	3977,3,c	;volatile
 16376                           
 16377                           ;SwSpiApp.c: 173: }
 16378  003ECA  0012               	return	
 16379  003ECC                     l773:
 16380                           
 16381                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 16382  003ECC  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 16383  003ECE  A4D8               	btfss	status,2,c
 16384  003ED0  0012               	return	
 16385                           
 16386                           ;SwSpiApp.c: 175: {
 16387                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 16388  003ED2  9689               	bcf	3977,3,c	;volatile
 16389                           
 16390                           ;SwSpiApp.c: 179: }
 16391                           
 16392                           ;SwSpiApp.c: 177: }
 16393                           ;SwSpiApp.c: 178: break;
 16394  003ED4  0012               	return	
 16395  003ED6                     l754:
 16396  003ED6  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 16397                           
 16398                           ; Switch size 1, requested type "space"
 16399                           ; Number of cases is 3, Range of values is 0 to 2
 16400                           ; switch strategies available:
 16401                           ; Name         Instructions Cycles
 16402                           ; simple_byte           10     6 (average)
 16403                           ;	Chosen strategy is simple_byte
 16404  003ED8  0A00               	xorlw	0	; case 0
 16405  003EDA  B4D8               	btfsc	status,2,c
 16406  003EDC  D7DE               	goto	l755
 16407  003EDE  0A01               	xorlw	1	; case 1
 16408  003EE0  B4D8               	btfsc	status,2,c
 16409  003EE2  D7E5               	goto	l764
 16410  003EE4  0A03               	xorlw	3	; case 2
 16411  003EE6  A4D8               	btfss	status,2,c
 16412  003EE8  0012               	return	
 16413  003EEA  D7EB               	goto	l772
 16414  003EEC                     __end_of_SwSpi_Clk_Pin:
 16415                           	opt stack 0
 16416                           tosu	equ	0xFFF
 16417                           tosh	equ	0xFFE
 16418                           tosl	equ	0xFFD
 16419                           pclath	equ	0xFFA
 16420                           tblptru	equ	0xFF8
 16421                           tblptrh	equ	0xFF7
 16422                           tblptrl	equ	0xFF6
 16423                           tablat	equ	0xFF5
 16424                           prodh	equ	0xFF4
 16425                           prodl	equ	0xFF3
 16426                           intcon	equ	0xFF2
 16427                           intcon2	equ	0xFF1
 16428                           indf0	equ	0xFEF
 16429                           postinc0	equ	0xFEE
 16430                           fsr0h	equ	0xFEA
 16431                           fsr0l	equ	0xFE9
 16432                           wreg	equ	0xFE8
 16433                           indf1	equ	0xFE7
 16434                           postdec1	equ	0xFE5
 16435                           fsr1h	equ	0xFE2
 16436                           fsr1l	equ	0xFE1
 16437                           indf2	equ	0xFDF
 16438                           postinc2	equ	0xFDE
 16439                           postdec2	equ	0xFDD
 16440                           fsr2h	equ	0xFDA
 16441                           fsr2l	equ	0xFD9
 16442                           status	equ	0xFD8
 16443                           
 16444 ;; *************** function _ReadIntFromEeprom *****************
 16445 ;; Defined at:
 16446 ;;		line 47 in file "SystemCommon.c"
 16447 ;; Parameters:    Size  Location     Type
 16448 ;;  address         1    wreg     unsigned char 
 16449 ;;  numOfByes       2   83[BANK0 ] int 
 16450 ;; Auto vars:     Size  Location     Type
 16451 ;;  address         1  100[BANK0 ] unsigned char 
 16452 ;;  base            4   90[BANK0 ] unsigned long 
 16453 ;;  idx             1  105[BANK0 ] unsigned char 
 16454 ;;  retVal          4  101[BANK0 ] unsigned long 
 16455 ;; Return value:  Size  Location     Type
 16456 ;;                  4   83[BANK0 ] unsigned long 
 16457 ;; Registers used:
 16458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16459 ;; Tracked objects:
 16460 ;;		On entry : 0/0
 16461 ;;		On exit  : 0/0
 16462 ;;		Unchanged: 0/0
 16463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16464 ;;      Params:         0       4       0       0       0       0       0
 16465 ;;      Locals:         0      16       0       0       0       0       0
 16466 ;;      Temps:          0       3       0       0       0       0       0
 16467 ;;      Totals:         0      23       0       0       0       0       0
 16468 ;;Total ram usage:       23 bytes
 16469 ;; Hardware stack levels used:    1
 16470 ;; Hardware stack levels required when called:    8
 16471 ;; This function calls:
 16472 ;;		_EepromRead
 16473 ;;		___awtoft
 16474 ;;		___fttol
 16475 ;;		___lmul
 16476 ;;		_pow
 16477 ;; This function is called by:
 16478 ;;		_DacInit
 16479 ;;		_DacReadValue
 16480 ;; This function uses a non-reentrant model
 16481 ;;
 16482                           
 16483                           	psect	text68
 16484  002888                     __ptext68:
 16485                           	opt stack 0
 16486  002888                     _ReadIntFromEeprom:
 16487                           	opt stack 20
 16488                           
 16489                           ;incstack = 0
 16490                           ;ReadIntFromEeprom@address stored from wreg
 16491  002888  0100               	movlb	0	; () banked
 16492  00288A  6FC4               	movwf	ReadIntFromEeprom@address& (0+255),b
 16493                           
 16494                           ;SystemCommon.c: 49: uint32_t retVal = 0x00;
 16495  00288C  0E00               	movlw	0
 16496  00288E  0100               	movlb	0	; () banked
 16497  002890  6FC5               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 16498  002892  0E00               	movlw	0
 16499  002894  6FC6               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 16500  002896  0E00               	movlw	0
 16501  002898  6FC7               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 16502  00289A  0E00               	movlw	0
 16503  00289C  6FC8               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 16504                           
 16505                           ; BSR set to: 0
 16506                           ;SystemCommon.c: 50: address -= numOfByes;
 16507  00289E  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 16508  0028A0  5FC4               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 16509                           
 16510                           ; BSR set to: 0
 16511                           ;SystemCommon.c: 52: for(uint8_t idx = 0; idx < numOfByes; idx++)
 16512  0028A2  0E00               	movlw	0
 16513  0028A4  6FC9               	movwf	ReadIntFromEeprom@idx& (0+255),b
 16514  0028A6  D06D               	goto	l1436
 16515  0028A8                     
 16516                           ; BSR set to: 0
 16517                           ;SystemCommon.c: 53: {
 16518                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 16519                           
 16520                           ; BSR set to: 0
 16521  0028A8  51C9               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 16522  0028AA  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 16523  0028AC  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 16524  0028AE  0E01               	movlw	1
 16525  0028B0  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 16526  0028B2  0E00               	movlw	0
 16527  0028B4  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16528  0028B6  1FB7               	comf	??_ReadIntFromEeprom& (0+255),f,b
 16529  0028B8  1FB8               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16530  0028BA  4BB7               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 16531  0028BC  2BB8               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16532  0028BE  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 16533  0028C0  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 16534  0028C2  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 16535  0028C4  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16536  0028C6  90D8               	bcf	status,0,c
 16537  0028C8  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 16538  0028CA  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16539  0028CC  90D8               	bcf	status,0,c
 16540  0028CE  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 16541  0028D0  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16542  0028D2  90D8               	bcf	status,0,c
 16543  0028D4  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 16544  0028D6  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16545  0028D8  C0B7  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 16546  0028DC  C0B8  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 16547  0028E0  ECE4  F020         	call	___awtoft	;wreg free
 16548  0028E4  C020  F0BE         	movff	?___awtoft,_ReadIntFromEeprom$3950
 16549  0028E8  C021  F0BF         	movff	?___awtoft+1,_ReadIntFromEeprom$3950+1
 16550  0028EC  C022  F0C0         	movff	?___awtoft+2,_ReadIntFromEeprom$3950+2
 16551                           
 16552                           ;SystemCommon.c: 53: {
 16553                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 16554  0028F0  C0BE  F0A5         	movff	_ReadIntFromEeprom$3950,pow@y
 16555  0028F4  C0BF  F0A6         	movff	_ReadIntFromEeprom$3950+1,pow@y+1
 16556  0028F8  C0C0  F0A7         	movff	_ReadIntFromEeprom$3950+2,pow@y+2
 16557  0028FC  0E00               	movlw	0
 16558  0028FE  0100               	movlb	0	; () banked
 16559  002900  6FA2               	movwf	pow@x& (0+255),b
 16560  002902  0E00               	movlw	0
 16561  002904  6FA3               	movwf	(pow@x+1)& (0+255),b
 16562  002906  0E40               	movlw	64
 16563  002908  6FA4               	movwf	(pow@x+2)& (0+255),b
 16564  00290A  EC89  F010         	call	_pow	;wreg free
 16565  00290E  C0A2  F0C1         	movff	?_pow,_ReadIntFromEeprom$3951
 16566  002912  C0A3  F0C2         	movff	?_pow+1,_ReadIntFromEeprom$3951+1
 16567  002916  C0A4  F0C3         	movff	?_pow+2,_ReadIntFromEeprom$3951+2
 16568                           
 16569                           ;SystemCommon.c: 53: {
 16570                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 16571  00291A  C0C1  F079         	movff	_ReadIntFromEeprom$3951,___fttol@f1
 16572  00291E  C0C2  F07A         	movff	_ReadIntFromEeprom$3951+1,___fttol@f1+1
 16573  002922  C0C3  F07B         	movff	_ReadIntFromEeprom$3951+2,___fttol@f1+2
 16574  002926  ECF1  F015         	call	___fttol	;wreg free
 16575  00292A  C079  F0BA         	movff	?___fttol,ReadIntFromEeprom@base
 16576  00292E  C07A  F0BB         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 16577  002932  C07B  F0BC         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 16578  002936  C07C  F0BD         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 16579                           
 16580                           ;SystemCommon.c: 55: retVal = retVal | EepromRead(address + idx) * base;
 16581  00293A  0100               	movlb	0	; () banked
 16582  00293C  51C4               	movf	ReadIntFromEeprom@address& (0+255),w,b
 16583  00293E  25C9               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 16584  002940  ECC9  F022         	call	_EepromRead
 16585  002944  0100               	movlb	0	; () banked
 16586  002946  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 16587  002948  51B7               	movf	??_ReadIntFromEeprom& (0+255),w,b
 16588  00294A  6E1A               	movwf	___lmul@multiplier,c
 16589  00294C  6A1B               	clrf	___lmul@multiplier+1,c
 16590  00294E  6A1C               	clrf	___lmul@multiplier+2,c
 16591  002950  6A1D               	clrf	___lmul@multiplier+3,c
 16592  002952  C0BA  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 16593  002956  C0BB  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 16594  00295A  C0BC  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 16595  00295E  C0BD  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 16596  002962  EC76  F01F         	call	___lmul	;wreg free
 16597  002966  0100               	movlb	0	; () banked
 16598  002968  51C5               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 16599  00296A  101A               	iorwf	?___lmul,w,c
 16600  00296C  6FC5               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 16601  00296E  51C6               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 16602  002970  101B               	iorwf	?___lmul+1,w,c
 16603  002972  6FC6               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 16604  002974  51C7               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 16605  002976  101C               	iorwf	?___lmul+2,w,c
 16606  002978  6FC7               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 16607  00297A  51C8               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 16608  00297C  101D               	iorwf	?___lmul+3,w,c
 16609  00297E  6FC8               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 16610                           
 16611                           ; BSR set to: 0
 16612  002980  2BC9               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 16613  002982                     l1436:
 16614                           
 16615                           ; BSR set to: 0
 16616                           
 16617                           ; BSR set to: 0
 16618  002982  51C9               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 16619  002984  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 16620  002986  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 16621  002988  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 16622  00298A  5DB7               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 16623  00298C  51B8               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 16624  00298E  0A80               	xorlw	128
 16625  002990  6FB9               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 16626  002992  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 16627  002994  0A80               	xorlw	128
 16628  002996  59B9               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 16629  002998  A0D8               	btfss	status,0,c
 16630  00299A  D786               	goto	l1437
 16631                           
 16632                           ; BSR set to: 0
 16633                           ;SystemCommon.c: 56: }
 16634                           ;SystemCommon.c: 57: return retVal;
 16635  00299C  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 16636  0029A0  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 16637  0029A4  C0C7  F0B5         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 16638  0029A8  C0C8  F0B6         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 16639                           
 16640                           ; BSR set to: 0
 16641  0029AC  0012               	return		;funcret
 16642  0029AE                     __end_of_ReadIntFromEeprom:
 16643                           	opt stack 0
 16644                           tosu	equ	0xFFF
 16645                           tosh	equ	0xFFE
 16646                           tosl	equ	0xFFD
 16647                           pclath	equ	0xFFA
 16648                           tblptru	equ	0xFF8
 16649                           tblptrh	equ	0xFF7
 16650                           tblptrl	equ	0xFF6
 16651                           tablat	equ	0xFF5
 16652                           prodh	equ	0xFF4
 16653                           prodl	equ	0xFF3
 16654                           intcon	equ	0xFF2
 16655                           intcon2	equ	0xFF1
 16656                           indf0	equ	0xFEF
 16657                           postinc0	equ	0xFEE
 16658                           fsr0h	equ	0xFEA
 16659                           fsr0l	equ	0xFE9
 16660                           wreg	equ	0xFE8
 16661                           indf1	equ	0xFE7
 16662                           postdec1	equ	0xFE5
 16663                           fsr1h	equ	0xFE2
 16664                           fsr1l	equ	0xFE1
 16665                           indf2	equ	0xFDF
 16666                           postinc2	equ	0xFDE
 16667                           postdec2	equ	0xFDD
 16668                           fsr2h	equ	0xFDA
 16669                           fsr2l	equ	0xFD9
 16670                           status	equ	0xFD8
 16671                           
 16672 ;; *************** function _pow *****************
 16673 ;; Defined at:
 16674 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 16675 ;; Parameters:    Size  Location     Type
 16676 ;;  x               3   66[BANK0 ] unsigned long 
 16677 ;;  y               3   69[BANK0 ] unsigned long 
 16678 ;; Auto vars:     Size  Location     Type
 16679 ;;  yi              4   79[BANK0 ] unsigned long 
 16680 ;;  sign            1   78[BANK0 ] unsigned char 
 16681 ;; Return value:  Size  Location     Type
 16682 ;;                  3   66[BANK0 ] unsigned char 
 16683 ;; Registers used:
 16684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16685 ;; Tracked objects:
 16686 ;;		On entry : 0/0
 16687 ;;		On exit  : 0/0
 16688 ;;		Unchanged: 0/0
 16689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16690 ;;      Params:         0       6       0       0       0       0       0
 16691 ;;      Locals:         0      11       0       0       0       0       0
 16692 ;;      Temps:          0       0       0       0       0       0       0
 16693 ;;      Totals:         0      17       0       0       0       0       0
 16694 ;;Total ram usage:       17 bytes
 16695 ;; Hardware stack levels used:    1
 16696 ;; Hardware stack levels required when called:    7
 16697 ;; This function calls:
 16698 ;;		___ftge
 16699 ;;		___ftmul
 16700 ;;		___ftneg
 16701 ;;		___fttol
 16702 ;;		___lltoft
 16703 ;;		_exp
 16704 ;;		_log
 16705 ;; This function is called by:
 16706 ;;		_SampleSingleChannel
 16707 ;;		_SampleAllChannels
 16708 ;;		_GroupRx
 16709 ;;		_GroupTx
 16710 ;;		_ReadIntFromEeprom
 16711 ;;		_DacSetValue
 16712 ;;		_DacAnalogToDigitalSpi
 16713 ;; This function uses a non-reentrant model
 16714 ;;
 16715                           
 16716                           	psect	text69
 16717  002112                     __ptext69:
 16718                           	opt stack 0
 16719  002112                     _pow:
 16720                           	opt stack 21
 16721                           
 16722                           ; BSR set to: 0
 16723                           ;incstack = 0
 16724  002112  0E00               	movlw	0
 16725  002114  0100               	movlb	0	; () banked
 16726  002116  6FAE               	movwf	pow@sign& (0+255),b
 16727                           
 16728                           ; BSR set to: 0
 16729  002118  51A2               	movf	pow@x& (0+255),w,b
 16730  00211A  11A3               	iorwf	(pow@x+1)& (0+255),w,b
 16731  00211C  11A4               	iorwf	(pow@x+2)& (0+255),w,b
 16732  00211E  A4D8               	btfss	status,2,c
 16733  002120  D01D               	goto	l2212
 16734                           
 16735                           ; BSR set to: 0
 16736  002122  0E00               	movlw	0
 16737  002124  6E18               	movwf	___ftge@ff1,c
 16738  002126  0E00               	movlw	0
 16739  002128  6E19               	movwf	___ftge@ff1+1,c
 16740  00212A  0E00               	movlw	0
 16741  00212C  6E1A               	movwf	___ftge@ff1+2,c
 16742  00212E  C0A5  F01B         	movff	pow@y,___ftge@ff2
 16743  002132  C0A6  F01C         	movff	pow@y+1,___ftge@ff2+1
 16744  002136  C0A7  F01D         	movff	pow@y+2,___ftge@ff2+2
 16745  00213A  ECBE  F01B         	call	___ftge	;wreg free
 16746  00213E  A0D8               	btfss	status,0,c
 16747  002140  D005               	goto	l2213
 16748  002142  0E00               	movlw	0
 16749  002144  0101               	movlb	1	; () banked
 16750  002146  6FD1               	movwf	(_errno+1)& (0+255),b
 16751  002148  0E21               	movlw	33
 16752  00214A  6FD0               	movwf	_errno& (0+255),b
 16753  00214C                     l2213:
 16754  00214C  0E00               	movlw	0
 16755  00214E  0100               	movlb	0	; () banked
 16756  002150  6FA2               	movwf	?_pow& (0+255),b
 16757  002152  0E00               	movlw	0
 16758  002154  6FA3               	movwf	(?_pow+1)& (0+255),b
 16759  002156  0E00               	movlw	0
 16760  002158  6FA4               	movwf	(?_pow+2)& (0+255),b
 16761                           
 16762                           ; BSR set to: 0
 16763  00215A  0012               	return	
 16764  00215C                     l2212:
 16765                           
 16766                           ; BSR set to: 0
 16767                           
 16768                           ; BSR set to: 0
 16769  00215C  51A5               	movf	pow@y& (0+255),w,b
 16770  00215E  11A6               	iorwf	(pow@y+1)& (0+255),w,b
 16771  002160  11A7               	iorwf	(pow@y+2)& (0+255),w,b
 16772  002162  A4D8               	btfss	status,2,c
 16773  002164  D007               	goto	l2215
 16774                           
 16775                           ; BSR set to: 0
 16776  002166  0E00               	movlw	0
 16777  002168  6FA2               	movwf	?_pow& (0+255),b
 16778  00216A  0E80               	movlw	128
 16779  00216C  6FA3               	movwf	(?_pow+1)& (0+255),b
 16780  00216E  0E3F               	movlw	63
 16781  002170  6FA4               	movwf	(?_pow+2)& (0+255),b
 16782                           
 16783                           ; BSR set to: 0
 16784  002172  0012               	return	
 16785  002174                     l2215:
 16786                           
 16787                           ; BSR set to: 0
 16788                           
 16789                           ; BSR set to: 0
 16790  002174  AFA4               	btfss	(pow@x+2)& (0+255),7,b
 16791  002176  D043               	goto	l2216
 16792                           
 16793                           ; BSR set to: 0
 16794  002178  C0A5  F079         	movff	pow@y,___fttol@f1
 16795  00217C  C0A6  F07A         	movff	pow@y+1,___fttol@f1+1
 16796  002180  C0A7  F07B         	movff	pow@y+2,___fttol@f1+2
 16797  002184  ECF1  F015         	call	___fttol	;wreg free
 16798  002188  C079  F0AF         	movff	?___fttol,pow@yi
 16799  00218C  C07A  F0B0         	movff	?___fttol+1,pow@yi+1
 16800  002190  C07B  F0B1         	movff	?___fttol+2,pow@yi+2
 16801  002194  C07C  F0B2         	movff	?___fttol+3,pow@yi+3
 16802  002198  C0AF  F020         	movff	pow@yi,___lltoft@c
 16803  00219C  C0B0  F021         	movff	pow@yi+1,___lltoft@c+1
 16804  0021A0  C0B1  F022         	movff	pow@yi+2,___lltoft@c+2
 16805  0021A4  C0B2  F023         	movff	pow@yi+3,___lltoft@c+3
 16806  0021A8  EC9A  F01E         	call	___lltoft	;wreg free
 16807  0021AC  0100               	movlb	0	; () banked
 16808  0021AE  51A5               	movf	pow@y& (0+255),w,b
 16809  0021B0  1820               	xorwf	?___lltoft,w,c
 16810  0021B2  E107               	bnz	u9210
 16811  0021B4  51A6               	movf	(pow@y+1)& (0+255),w,b
 16812  0021B6  1821               	xorwf	?___lltoft+1,w,c
 16813  0021B8  E104               	bnz	u9210
 16814  0021BA  51A7               	movf	(pow@y+2)& (0+255),w,b
 16815  0021BC  1822               	xorwf	?___lltoft+2,w,c
 16816  0021BE  B4D8               	btfsc	status,2,c
 16817  0021C0  D00D               	goto	l2217
 16818  0021C2                     u9210:
 16819                           
 16820                           ; BSR set to: 0
 16821  0021C2  0E00               	movlw	0
 16822  0021C4  0101               	movlb	1	; () banked
 16823  0021C6  6FD1               	movwf	(_errno+1)& (0+255),b
 16824  0021C8  0E21               	movlw	33
 16825  0021CA  6FD0               	movwf	_errno& (0+255),b
 16826  0021CC  0E00               	movlw	0
 16827  0021CE  0100               	movlb	0	; () banked
 16828  0021D0  6FA2               	movwf	?_pow& (0+255),b
 16829  0021D2  0E00               	movlw	0
 16830  0021D4  6FA3               	movwf	(?_pow+1)& (0+255),b
 16831  0021D6  0E00               	movlw	0
 16832  0021D8  6FA4               	movwf	(?_pow+2)& (0+255),b
 16833                           
 16834                           ; BSR set to: 0
 16835  0021DA  0012               	return	
 16836  0021DC                     l2217:
 16837                           
 16838                           ; BSR set to: 0
 16839                           
 16840                           ; BSR set to: 0
 16841  0021DC  51AF               	movf	pow@yi& (0+255),w,b
 16842  0021DE  0B01               	andlw	1
 16843  0021E0  6FAE               	movwf	pow@sign& (0+255),b
 16844                           
 16845                           ; BSR set to: 0
 16846  0021E2  C0A2  F018         	movff	pow@x,___ftneg@f1
 16847  0021E6  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 16848  0021EA  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 16849  0021EE  EC11  F022         	call	___ftneg	;wreg free
 16850  0021F2  C018  F0A2         	movff	?___ftneg,pow@x
 16851  0021F6  C019  F0A3         	movff	?___ftneg+1,pow@x+1
 16852  0021FA  C01A  F0A4         	movff	?___ftneg+2,pow@x+2
 16853  0021FE                     l2216:
 16854  0021FE  C0A2  F092         	movff	pow@x,log@x
 16855  002202  C0A3  F093         	movff	pow@x+1,log@x+1
 16856  002206  C0A4  F094         	movff	pow@x+2,log@x+2
 16857  00220A  EC88  F012         	call	_log	;wreg free
 16858  00220E  C092  F0A8         	movff	?_log,_pow$3956
 16859  002212  C093  F0A9         	movff	?_log+1,_pow$3956+1
 16860  002216  C094  F0AA         	movff	?_log+2,_pow$3956+2
 16861  00221A  C0A8  F066         	movff	_pow$3956,___ftmul@f1
 16862  00221E  C0A9  F067         	movff	_pow$3956+1,___ftmul@f1+1
 16863  002222  C0AA  F068         	movff	_pow$3956+2,___ftmul@f1+2
 16864  002226  C0A5  F069         	movff	pow@y,___ftmul@f2
 16865  00222A  C0A6  F06A         	movff	pow@y+1,___ftmul@f2+1
 16866  00222E  C0A7  F06B         	movff	pow@y+2,___ftmul@f2+2
 16867  002232  EC6D  F016         	call	___ftmul	;wreg free
 16868  002236  C066  F0AB         	movff	?___ftmul,_pow$3957
 16869  00223A  C067  F0AC         	movff	?___ftmul+1,_pow$3957+1
 16870  00223E  C068  F0AD         	movff	?___ftmul+2,_pow$3957+2
 16871  002242  C0AB  F099         	movff	_pow$3957,exp@x
 16872  002246  C0AC  F09A         	movff	_pow$3957+1,exp@x+1
 16873  00224A  C0AD  F09B         	movff	_pow$3957+2,exp@x+2
 16874  00224E  EC40  F00C         	call	_exp	;wreg free
 16875  002252  C099  F0A2         	movff	?_exp,pow@x
 16876  002256  C09A  F0A3         	movff	?_exp+1,pow@x+1
 16877  00225A  C09B  F0A4         	movff	?_exp+2,pow@x+2
 16878  00225E  0100               	movlb	0	; () banked
 16879  002260  51AE               	movf	pow@sign& (0+255),w,b
 16880  002262  B4D8               	btfsc	status,2,c
 16881  002264  D00F               	goto	l2218
 16882                           
 16883                           ; BSR set to: 0
 16884  002266  C0A2  F018         	movff	pow@x,___ftneg@f1
 16885  00226A  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 16886  00226E  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 16887  002272  EC11  F022         	call	___ftneg	;wreg free
 16888  002276  C018  F0A2         	movff	?___ftneg,?_pow
 16889  00227A  C019  F0A3         	movff	?___ftneg+1,?_pow+1
 16890  00227E  C01A  F0A4         	movff	?___ftneg+2,?_pow+2
 16891  002282  0012               	return	
 16892  002284                     l2218:
 16893                           
 16894                           ; BSR set to: 0
 16895  002284  C0A2  F0A2         	movff	pow@x,?_pow
 16896  002288  C0A3  F0A3         	movff	pow@x+1,?_pow+1
 16897  00228C  C0A4  F0A4         	movff	pow@x+2,?_pow+2
 16898  002290  0012               	return		;funcret
 16899  002292                     __end_of_pow:
 16900                           	opt stack 0
 16901                           tosu	equ	0xFFF
 16902                           tosh	equ	0xFFE
 16903                           tosl	equ	0xFFD
 16904                           pclath	equ	0xFFA
 16905                           tblptru	equ	0xFF8
 16906                           tblptrh	equ	0xFF7
 16907                           tblptrl	equ	0xFF6
 16908                           tablat	equ	0xFF5
 16909                           prodh	equ	0xFF4
 16910                           prodl	equ	0xFF3
 16911                           intcon	equ	0xFF2
 16912                           intcon2	equ	0xFF1
 16913                           indf0	equ	0xFEF
 16914                           postinc0	equ	0xFEE
 16915                           fsr0h	equ	0xFEA
 16916                           fsr0l	equ	0xFE9
 16917                           wreg	equ	0xFE8
 16918                           indf1	equ	0xFE7
 16919                           postdec1	equ	0xFE5
 16920                           fsr1h	equ	0xFE2
 16921                           fsr1l	equ	0xFE1
 16922                           indf2	equ	0xFDF
 16923                           postinc2	equ	0xFDE
 16924                           postdec2	equ	0xFDD
 16925                           fsr2h	equ	0xFDA
 16926                           fsr2l	equ	0xFD9
 16927                           status	equ	0xFD8
 16928                           
 16929 ;; *************** function _log *****************
 16930 ;; Defined at:
 16931 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 16932 ;; Parameters:    Size  Location     Type
 16933 ;;  x               3   50[BANK0 ] unsigned char 
 16934 ;; Auto vars:     Size  Location     Type
 16935 ;;  exponent        2   53[BANK0 ] int 
 16936 ;; Return value:  Size  Location     Type
 16937 ;;                  3   50[BANK0 ] int 
 16938 ;; Registers used:
 16939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16940 ;; Tracked objects:
 16941 ;;		On entry : 0/0
 16942 ;;		On exit  : 0/0
 16943 ;;		Unchanged: 0/0
 16944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16945 ;;      Params:         0       3       0       0       0       0       0
 16946 ;;      Locals:         0       2       0       0       0       0       0
 16947 ;;      Temps:          0       0       0       0       0       0       0
 16948 ;;      Totals:         0       5       0       0       0       0       0
 16949 ;;Total ram usage:        5 bytes
 16950 ;; Hardware stack levels used:    1
 16951 ;; Hardware stack levels required when called:    6
 16952 ;; This function calls:
 16953 ;;		___awtoft
 16954 ;;		___ftadd
 16955 ;;		___ftmul
 16956 ;;		_eval_poly
 16957 ;;		_frexp
 16958 ;; This function is called by:
 16959 ;;		_pow
 16960 ;; This function uses a non-reentrant model
 16961 ;;
 16962                           
 16963                           	psect	text70
 16964  002510                     __ptext70:
 16965                           	opt stack 0
 16966  002510                     _log:
 16967                           	opt stack 21
 16968                           
 16969                           ;incstack = 0
 16970  002510  0100               	movlb	0	; () banked
 16971  002512  AF94               	btfss	(log@x+2)& (0+255),7,b
 16972  002514  D00D               	goto	l2478
 16973                           
 16974                           ; BSR set to: 0
 16975  002516  0E00               	movlw	0
 16976  002518  0101               	movlb	1	; () banked
 16977  00251A  6FD1               	movwf	(_errno+1)& (0+255),b
 16978  00251C  0E21               	movlw	33
 16979  00251E  6FD0               	movwf	_errno& (0+255),b
 16980  002520  0E00               	movlw	0
 16981  002522  0100               	movlb	0	; () banked
 16982  002524  6F92               	movwf	?_log& (0+255),b
 16983  002526  0E00               	movlw	0
 16984  002528  6F93               	movwf	(?_log+1)& (0+255),b
 16985  00252A  0E00               	movlw	0
 16986  00252C  6F94               	movwf	(?_log+2)& (0+255),b
 16987                           
 16988                           ; BSR set to: 0
 16989  00252E  0012               	return	
 16990  002530                     l2478:
 16991                           
 16992                           ; BSR set to: 0
 16993                           
 16994                           ; BSR set to: 0
 16995  002530  5192               	movf	log@x& (0+255),w,b
 16996  002532  1193               	iorwf	(log@x+1)& (0+255),w,b
 16997  002534  1194               	iorwf	(log@x+2)& (0+255),w,b
 16998  002536  A4D8               	btfss	status,2,c
 16999  002538  D00D               	goto	l2480
 17000                           
 17001                           ; BSR set to: 0
 17002  00253A  0E00               	movlw	0
 17003  00253C  0101               	movlb	1	; () banked
 17004  00253E  6FD1               	movwf	(_errno+1)& (0+255),b
 17005  002540  0E22               	movlw	34
 17006  002542  6FD0               	movwf	_errno& (0+255),b
 17007  002544  0E00               	movlw	0
 17008  002546  0100               	movlb	0	; () banked
 17009  002548  6F92               	movwf	?_log& (0+255),b
 17010  00254A  0E00               	movlw	0
 17011  00254C  6F93               	movwf	(?_log+1)& (0+255),b
 17012  00254E  0E00               	movlw	0
 17013  002550  6F94               	movwf	(?_log+2)& (0+255),b
 17014                           
 17015                           ; BSR set to: 0
 17016  002552  0012               	return	
 17017  002554                     l2480:
 17018                           
 17019                           ; BSR set to: 0
 17020                           
 17021                           ; BSR set to: 0
 17022  002554  0E00               	movlw	0
 17023  002556  6F69               	movwf	___ftmul@f2& (0+255),b
 17024  002558  0E00               	movlw	0
 17025  00255A  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 17026  00255C  0E40               	movlw	64
 17027  00255E  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 17028  002560  0E95               	movlw	low log@exponent
 17029  002562  6E1B               	movwf	frexp@eptr,c
 17030  002564  0E00               	movlw	high log@exponent
 17031  002566  6E1C               	movwf	frexp@eptr+1,c
 17032  002568  C092  F018         	movff	log@x,frexp@value
 17033  00256C  C093  F019         	movff	log@x+1,frexp@value+1
 17034  002570  C094  F01A         	movff	log@x+2,frexp@value+2
 17035  002574  EC76  F01B         	call	_frexp	;wreg free
 17036  002578  C018  F066         	movff	?_frexp,___ftmul@f1
 17037  00257C  C019  F067         	movff	?_frexp+1,___ftmul@f1+1
 17038  002580  C01A  F068         	movff	?_frexp+2,___ftmul@f1+2
 17039  002584  EC6D  F016         	call	___ftmul	;wreg free
 17040  002588  C066  F07C         	movff	?___ftmul,___ftadd@f1
 17041  00258C  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 17042  002590  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 17043  002594  0E00               	movlw	0
 17044  002596  0100               	movlb	0	; () banked
 17045  002598  6F7F               	movwf	___ftadd@f2& (0+255),b
 17046  00259A  0E80               	movlw	128
 17047  00259C  6F80               	movwf	(___ftadd@f2+1)& (0+255),b
 17048  00259E  0EBF               	movlw	191
 17049  0025A0  6F81               	movwf	(___ftadd@f2+2)& (0+255),b
 17050  0025A2  EC26  F00E         	call	___ftadd	;wreg free
 17051  0025A6  C07C  F092         	movff	?___ftadd,log@x
 17052  0025AA  C07D  F093         	movff	?___ftadd+1,log@x+1
 17053  0025AE  C07E  F094         	movff	?___ftadd+2,log@x+2
 17054  0025B2  0100               	movlb	0	; () banked
 17055  0025B4  0795               	decf	log@exponent& (0+255),f,b
 17056  0025B6  A0D8               	btfss	status,0,c
 17057  0025B8  0796               	decf	(log@exponent+1)& (0+255),f,b
 17058                           
 17059                           ; BSR set to: 0
 17060  0025BA  C092  F088         	movff	log@x,eval_poly@x
 17061  0025BE  C093  F089         	movff	log@x+1,eval_poly@x+1
 17062  0025C2  C094  F08A         	movff	log@x+2,eval_poly@x+2
 17063  0025C6  0EDF               	movlw	low log@coeff
 17064  0025C8  6F8B               	movwf	eval_poly@d& (0+255),b
 17065  0025CA  0E78               	movlw	high log@coeff
 17066  0025CC  6F8C               	movwf	(eval_poly@d+1)& (0+255),b
 17067  0025CE  0E00               	movlw	0
 17068  0025D0  6F8E               	movwf	(eval_poly@n+1)& (0+255),b
 17069  0025D2  0E08               	movlw	8
 17070  0025D4  6F8D               	movwf	eval_poly@n& (0+255),b
 17071  0025D6  ECB2  F018         	call	_eval_poly	;wreg free
 17072  0025DA  C088  F092         	movff	?_eval_poly,log@x
 17073  0025DE  C089  F093         	movff	?_eval_poly+1,log@x+1
 17074  0025E2  C08A  F094         	movff	?_eval_poly+2,log@x+2
 17075  0025E6  0E72               	movlw	114
 17076  0025E8  0100               	movlb	0	; () banked
 17077  0025EA  6F69               	movwf	___ftmul@f2& (0+255),b
 17078  0025EC  0E31               	movlw	49
 17079  0025EE  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 17080  0025F0  0E3F               	movlw	63
 17081  0025F2  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 17082  0025F4  C095  F020         	movff	log@exponent,___awtoft@c
 17083  0025F8  C096  F021         	movff	log@exponent+1,___awtoft@c+1
 17084  0025FC  ECE4  F020         	call	___awtoft	;wreg free
 17085  002600  C020  F066         	movff	?___awtoft,___ftmul@f1
 17086  002604  C021  F067         	movff	?___awtoft+1,___ftmul@f1+1
 17087  002608  C022  F068         	movff	?___awtoft+2,___ftmul@f1+2
 17088  00260C  EC6D  F016         	call	___ftmul	;wreg free
 17089  002610  C066  F07C         	movff	?___ftmul,___ftadd@f1
 17090  002614  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 17091  002618  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 17092  00261C  C092  F07F         	movff	log@x,___ftadd@f2
 17093  002620  C093  F080         	movff	log@x+1,___ftadd@f2+1
 17094  002624  C094  F081         	movff	log@x+2,___ftadd@f2+2
 17095  002628  EC26  F00E         	call	___ftadd	;wreg free
 17096  00262C  C07C  F092         	movff	?___ftadd,?_log
 17097  002630  C07D  F093         	movff	?___ftadd+1,?_log+1
 17098  002634  C07E  F094         	movff	?___ftadd+2,?_log+2
 17099  002638  0012               	return	
 17100  00263A                     __end_of_log:
 17101                           	opt stack 0
 17102                           tosu	equ	0xFFF
 17103                           tosh	equ	0xFFE
 17104                           tosl	equ	0xFFD
 17105                           pclath	equ	0xFFA
 17106                           tblptru	equ	0xFF8
 17107                           tblptrh	equ	0xFF7
 17108                           tblptrl	equ	0xFF6
 17109                           tablat	equ	0xFF5
 17110                           prodh	equ	0xFF4
 17111                           prodl	equ	0xFF3
 17112                           intcon	equ	0xFF2
 17113                           intcon2	equ	0xFF1
 17114                           indf0	equ	0xFEF
 17115                           postinc0	equ	0xFEE
 17116                           fsr0h	equ	0xFEA
 17117                           fsr0l	equ	0xFE9
 17118                           wreg	equ	0xFE8
 17119                           indf1	equ	0xFE7
 17120                           postdec1	equ	0xFE5
 17121                           fsr1h	equ	0xFE2
 17122                           fsr1l	equ	0xFE1
 17123                           indf2	equ	0xFDF
 17124                           postinc2	equ	0xFDE
 17125                           postdec2	equ	0xFDD
 17126                           fsr2h	equ	0xFDA
 17127                           fsr2l	equ	0xFD9
 17128                           status	equ	0xFD8
 17129                           
 17130 ;; *************** function _exp *****************
 17131 ;; Defined at:
 17132 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 17133 ;; Parameters:    Size  Location     Type
 17134 ;;  x               3   57[BANK0 ] int 
 17135 ;; Auto vars:     Size  Location     Type
 17136 ;;  exponent        2   63[BANK0 ] int 
 17137 ;;  sign            1   65[BANK0 ] unsigned char 
 17138 ;; Return value:  Size  Location     Type
 17139 ;;                  3   57[BANK0 ] unsigned char 
 17140 ;; Registers used:
 17141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17142 ;; Tracked objects:
 17143 ;;		On entry : 0/0
 17144 ;;		On exit  : 0/0
 17145 ;;		Unchanged: 0/0
 17146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17147 ;;      Params:         0       3       0       0       0       0       0
 17148 ;;      Locals:         0       6       0       0       0       0       0
 17149 ;;      Temps:          0       0       0       0       0       0       0
 17150 ;;      Totals:         0       9       0       0       0       0       0
 17151 ;;Total ram usage:        9 bytes
 17152 ;; Hardware stack levels used:    1
 17153 ;; Hardware stack levels required when called:    6
 17154 ;; This function calls:
 17155 ;;		___awtoft
 17156 ;;		___ftdiv
 17157 ;;		___ftge
 17158 ;;		___ftmul
 17159 ;;		___ftneg
 17160 ;;		___ftsub
 17161 ;;		___fttol
 17162 ;;		_eval_poly
 17163 ;;		_floor
 17164 ;;		_ldexp
 17165 ;; This function is called by:
 17166 ;;		_pow
 17167 ;; This function uses a non-reentrant model
 17168 ;;
 17169                           
 17170                           	psect	text71
 17171  001880                     __ptext71:
 17172                           	opt stack 0
 17173  001880                     _exp:
 17174                           	opt stack 21
 17175                           
 17176                           ;incstack = 0
 17177  001880  0100               	movlb	0	; () banked
 17178  001882  5199               	movf	exp@x& (0+255),w,b
 17179  001884  119A               	iorwf	(exp@x+1)& (0+255),w,b
 17180  001886  119B               	iorwf	(exp@x+2)& (0+255),w,b
 17181  001888  A4D8               	btfss	status,2,c
 17182  00188A  D007               	goto	l2414
 17183                           
 17184                           ; BSR set to: 0
 17185  00188C  0E00               	movlw	0
 17186  00188E  6F99               	movwf	?_exp& (0+255),b
 17187  001890  0E80               	movlw	128
 17188  001892  6F9A               	movwf	(?_exp+1)& (0+255),b
 17189  001894  0E3F               	movlw	63
 17190  001896  6F9B               	movwf	(?_exp+2)& (0+255),b
 17191                           
 17192                           ; BSR set to: 0
 17193  001898  0012               	return	
 17194  00189A                     l2414:
 17195                           
 17196                           ; BSR set to: 0
 17197                           
 17198                           ; BSR set to: 0
 17199  00189A  0E72               	movlw	114
 17200  00189C  6E18               	movwf	___ftge@ff1,c
 17201  00189E  0E31               	movlw	49
 17202  0018A0  6E19               	movwf	___ftge@ff1+1,c
 17203  0018A2  0E44               	movlw	68
 17204  0018A4  6E1A               	movwf	___ftge@ff1+2,c
 17205  0018A6  C099  F01B         	movff	exp@x,___ftge@ff2
 17206  0018AA  C09A  F01C         	movff	exp@x+1,___ftge@ff2+1
 17207  0018AE  C09B  F01D         	movff	exp@x+2,___ftge@ff2+2
 17208  0018B2  ECBE  F01B         	call	___ftge	;wreg free
 17209  0018B6  B0D8               	btfsc	status,0,c
 17210  0018B8  D00D               	goto	l2416
 17211  0018BA  0E00               	movlw	0
 17212  0018BC  0101               	movlb	1	; () banked
 17213  0018BE  6FD1               	movwf	(_errno+1)& (0+255),b
 17214  0018C0  0E22               	movlw	34
 17215  0018C2  6FD0               	movwf	_errno& (0+255),b
 17216  0018C4  0EFF               	movlw	255
 17217  0018C6  0100               	movlb	0	; () banked
 17218  0018C8  6F99               	movwf	?_exp& (0+255),b
 17219  0018CA  0E7F               	movlw	127
 17220  0018CC  6F9A               	movwf	(?_exp+1)& (0+255),b
 17221  0018CE  0E7F               	movlw	127
 17222  0018D0  6F9B               	movwf	(?_exp+2)& (0+255),b
 17223                           
 17224                           ; BSR set to: 0
 17225  0018D2  0012               	return	
 17226  0018D4                     l2416:
 17227                           
 17228                           ; BSR set to: 0
 17229  0018D4  C099  F018         	movff	exp@x,___ftge@ff1
 17230  0018D8  C09A  F019         	movff	exp@x+1,___ftge@ff1+1
 17231  0018DC  C09B  F01A         	movff	exp@x+2,___ftge@ff1+2
 17232  0018E0  0E49               	movlw	73
 17233  0018E2  6E1B               	movwf	___ftge@ff2,c
 17234  0018E4  0E3A               	movlw	58
 17235  0018E6  6E1C               	movwf	___ftge@ff2+1,c
 17236  0018E8  0EC4               	movlw	196
 17237  0018EA  6E1D               	movwf	___ftge@ff2+2,c
 17238  0018EC  ECBE  F01B         	call	___ftge	;wreg free
 17239  0018F0  B0D8               	btfsc	status,0,c
 17240  0018F2  D00D               	goto	l2417
 17241  0018F4  0E00               	movlw	0
 17242  0018F6  0101               	movlb	1	; () banked
 17243  0018F8  6FD1               	movwf	(_errno+1)& (0+255),b
 17244  0018FA  0E22               	movlw	34
 17245  0018FC  6FD0               	movwf	_errno& (0+255),b
 17246  0018FE  0E00               	movlw	0
 17247  001900  0100               	movlb	0	; () banked
 17248  001902  6F99               	movwf	?_exp& (0+255),b
 17249  001904  0E00               	movlw	0
 17250  001906  6F9A               	movwf	(?_exp+1)& (0+255),b
 17251  001908  0E00               	movlw	0
 17252  00190A  6F9B               	movwf	(?_exp+2)& (0+255),b
 17253                           
 17254                           ; BSR set to: 0
 17255  00190C  0012               	return	
 17256  00190E                     l2417:
 17257                           
 17258                           ; BSR set to: 0
 17259  00190E  0100               	movlb	0	; () banked
 17260  001910  AF9B               	btfss	(exp@x+2)& (0+255),7,b
 17261  001912  D002               	goto	u9010
 17262  001914  0E01               	movlw	1
 17263  001916  D001               	goto	u9020
 17264  001918                     u9010:
 17265  001918  0E00               	movlw	0
 17266  00191A                     u9020:
 17267  00191A  6FA1               	movwf	exp@sign& (0+255),b
 17268                           
 17269                           ; BSR set to: 0
 17270  00191C  51A1               	movf	exp@sign& (0+255),w,b
 17271  00191E  B4D8               	btfsc	status,2,c
 17272  001920  D00E               	goto	l2418
 17273                           
 17274                           ; BSR set to: 0
 17275  001922  C099  F018         	movff	exp@x,___ftneg@f1
 17276  001926  C09A  F019         	movff	exp@x+1,___ftneg@f1+1
 17277  00192A  C09B  F01A         	movff	exp@x+2,___ftneg@f1+2
 17278  00192E  EC11  F022         	call	___ftneg	;wreg free
 17279  001932  C018  F099         	movff	?___ftneg,exp@x
 17280  001936  C019  F09A         	movff	?___ftneg+1,exp@x+1
 17281  00193A  C01A  F09B         	movff	?___ftneg+2,exp@x+2
 17282  00193E                     l2418:
 17283  00193E  C099  F066         	movff	exp@x,___ftmul@f1
 17284  001942  C09A  F067         	movff	exp@x+1,___ftmul@f1+1
 17285  001946  C09B  F068         	movff	exp@x+2,___ftmul@f1+2
 17286  00194A  0EAA               	movlw	170
 17287  00194C  0100               	movlb	0	; () banked
 17288  00194E  6F69               	movwf	___ftmul@f2& (0+255),b
 17289  001950  0EB8               	movlw	184
 17290  001952  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 17291  001954  0E3F               	movlw	63
 17292  001956  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 17293  001958  EC6D  F016         	call	___ftmul	;wreg free
 17294  00195C  C066  F099         	movff	?___ftmul,exp@x
 17295  001960  C067  F09A         	movff	?___ftmul+1,exp@x+1
 17296  001964  C068  F09B         	movff	?___ftmul+2,exp@x+2
 17297  001968  C099  F090         	movff	exp@x,floor@x
 17298  00196C  C09A  F091         	movff	exp@x+1,floor@x+1
 17299  001970  C09B  F092         	movff	exp@x+2,floor@x+2
 17300  001974  EC41  F018         	call	_floor	;wreg free
 17301  001978  C090  F09C         	movff	?_floor,_exp$3958
 17302  00197C  C091  F09D         	movff	?_floor+1,_exp$3958+1
 17303  001980  C092  F09E         	movff	?_floor+2,_exp$3958+2
 17304  001984  C09C  F079         	movff	_exp$3958,___fttol@f1
 17305  001988  C09D  F07A         	movff	_exp$3958+1,___fttol@f1+1
 17306  00198C  C09E  F07B         	movff	_exp$3958+2,___fttol@f1+2
 17307  001990  ECF1  F015         	call	___fttol	;wreg free
 17308  001994  C079  F09F         	movff	?___fttol,exp@exponent
 17309  001998  C07A  F0A0         	movff	?___fttol+1,exp@exponent+1
 17310  00199C  C099  F088         	movff	exp@x,___ftsub@f1
 17311  0019A0  C09A  F089         	movff	exp@x+1,___ftsub@f1+1
 17312  0019A4  C09B  F08A         	movff	exp@x+2,___ftsub@f1+2
 17313  0019A8  C09F  F020         	movff	exp@exponent,___awtoft@c
 17314  0019AC  C0A0  F021         	movff	exp@exponent+1,___awtoft@c+1
 17315  0019B0  ECE4  F020         	call	___awtoft	;wreg free
 17316  0019B4  C020  F08B         	movff	?___awtoft,___ftsub@f2
 17317  0019B8  C021  F08C         	movff	?___awtoft+1,___ftsub@f2+1
 17318  0019BC  C022  F08D         	movff	?___awtoft+2,___ftsub@f2+2
 17319  0019C0  EC2C  F020         	call	___ftsub	;wreg free
 17320  0019C4  C088  F099         	movff	?___ftsub,exp@x
 17321  0019C8  C089  F09A         	movff	?___ftsub+1,exp@x+1
 17322  0019CC  C08A  F09B         	movff	?___ftsub+2,exp@x+2
 17323  0019D0  C099  F088         	movff	exp@x,eval_poly@x
 17324  0019D4  C09A  F089         	movff	exp@x+1,eval_poly@x+1
 17325  0019D8  C09B  F08A         	movff	exp@x+2,eval_poly@x+2
 17326  0019DC  0EC1               	movlw	low exp@coeff
 17327  0019DE  0100               	movlb	0	; () banked
 17328  0019E0  6F8B               	movwf	eval_poly@d& (0+255),b
 17329  0019E2  0E78               	movlw	high exp@coeff
 17330  0019E4  6F8C               	movwf	(eval_poly@d+1)& (0+255),b
 17331  0019E6  0E00               	movlw	0
 17332  0019E8  6F8E               	movwf	(eval_poly@n+1)& (0+255),b
 17333  0019EA  0E09               	movlw	9
 17334  0019EC  6F8D               	movwf	eval_poly@n& (0+255),b
 17335  0019EE  ECB2  F018         	call	_eval_poly	;wreg free
 17336  0019F2  C088  F092         	movff	?_eval_poly,ldexp@value
 17337  0019F6  C089  F093         	movff	?_eval_poly+1,ldexp@value+1
 17338  0019FA  C08A  F094         	movff	?_eval_poly+2,ldexp@value+2
 17339  0019FE  C09F  F095         	movff	exp@exponent,ldexp@newexp
 17340  001A02  C0A0  F096         	movff	exp@exponent+1,ldexp@newexp+1
 17341  001A06  EC1D  F019         	call	_ldexp	;wreg free
 17342  001A0A  C092  F099         	movff	?_ldexp,exp@x
 17343  001A0E  C093  F09A         	movff	?_ldexp+1,exp@x+1
 17344  001A12  C094  F09B         	movff	?_ldexp+2,exp@x+2
 17345  001A16  0100               	movlb	0	; () banked
 17346  001A18  51A1               	movf	exp@sign& (0+255),w,b
 17347  001A1A  B4D8               	btfsc	status,2,c
 17348  001A1C  D025               	goto	l2419
 17349                           
 17350                           ; BSR set to: 0
 17351  001A1E  2999               	incf	exp@x& (0+255),w,b
 17352  001A20  E10E               	bnz	l8919
 17353  001A22  0E7F               	movlw	127
 17354  001A24  199A               	xorwf	(exp@x+1)& (0+255),w,b
 17355  001A26  E10B               	bnz	l8919
 17356  001A28  0E7F               	movlw	127
 17357  001A2A  199B               	xorwf	(exp@x+2)& (0+255),w,b
 17358  001A2C  A4D8               	btfss	status,2,c
 17359  001A2E  D007               	goto	l2420
 17360                           
 17361                           ; BSR set to: 0
 17362  001A30  0E00               	movlw	0
 17363  001A32  6F99               	movwf	?_exp& (0+255),b
 17364  001A34  0E00               	movlw	0
 17365  001A36  6F9A               	movwf	(?_exp+1)& (0+255),b
 17366  001A38  0E00               	movlw	0
 17367  001A3A  6F9B               	movwf	(?_exp+2)& (0+255),b
 17368                           
 17369                           ; BSR set to: 0
 17370  001A3C  0012               	return	
 17371  001A3E                     l2420:
 17372  001A3E                     l8919:
 17373                           
 17374                           ; BSR set to: 0
 17375  001A3E  0E00               	movlw	0
 17376  001A40  6E23               	movwf	___ftdiv@f1,c
 17377  001A42  0E80               	movlw	128
 17378  001A44  6E24               	movwf	___ftdiv@f1+1,c
 17379  001A46  0E3F               	movlw	63
 17380  001A48  6E25               	movwf	___ftdiv@f1+2,c
 17381  001A4A  C099  F026         	movff	exp@x,___ftdiv@f2
 17382  001A4E  C09A  F027         	movff	exp@x+1,___ftdiv@f2+1
 17383  001A52  C09B  F028         	movff	exp@x+2,___ftdiv@f2+2
 17384  001A56  ECE8  F016         	call	___ftdiv	;wreg free
 17385  001A5A  C023  F099         	movff	?___ftdiv,?_exp
 17386  001A5E  C024  F09A         	movff	?___ftdiv+1,?_exp+1
 17387  001A62  C025  F09B         	movff	?___ftdiv+2,?_exp+2
 17388  001A66  0012               	return	
 17389  001A68                     l2419:
 17390                           
 17391                           ; BSR set to: 0
 17392  001A68  C099  F099         	movff	exp@x,?_exp
 17393  001A6C  C09A  F09A         	movff	exp@x+1,?_exp+1
 17394  001A70  C09B  F09B         	movff	exp@x+2,?_exp+2
 17395  001A74  0012               	return		;funcret
 17396  001A76                     __end_of_exp:
 17397                           	opt stack 0
 17398                           tosu	equ	0xFFF
 17399                           tosh	equ	0xFFE
 17400                           tosl	equ	0xFFD
 17401                           pclath	equ	0xFFA
 17402                           tblptru	equ	0xFF8
 17403                           tblptrh	equ	0xFF7
 17404                           tblptrl	equ	0xFF6
 17405                           tablat	equ	0xFF5
 17406                           prodh	equ	0xFF4
 17407                           prodl	equ	0xFF3
 17408                           intcon	equ	0xFF2
 17409                           intcon2	equ	0xFF1
 17410                           indf0	equ	0xFEF
 17411                           postinc0	equ	0xFEE
 17412                           fsr0h	equ	0xFEA
 17413                           fsr0l	equ	0xFE9
 17414                           wreg	equ	0xFE8
 17415                           indf1	equ	0xFE7
 17416                           postdec1	equ	0xFE5
 17417                           fsr1h	equ	0xFE2
 17418                           fsr1l	equ	0xFE1
 17419                           indf2	equ	0xFDF
 17420                           postinc2	equ	0xFDE
 17421                           postdec2	equ	0xFDD
 17422                           fsr2h	equ	0xFDA
 17423                           fsr2l	equ	0xFD9
 17424                           status	equ	0xFD8
 17425                           
 17426 ;; *************** function _ldexp *****************
 17427 ;; Defined at:
 17428 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 17429 ;; Parameters:    Size  Location     Type
 17430 ;;  value           3   50[BANK0 ] unsigned char 
 17431 ;;  newexp          2   53[BANK0 ] int 
 17432 ;; Auto vars:     Size  Location     Type
 17433 ;;		None
 17434 ;; Return value:  Size  Location     Type
 17435 ;;                  3   50[BANK0 ] int 
 17436 ;; Registers used:
 17437 ;;		wreg, status,2, status,0
 17438 ;; Tracked objects:
 17439 ;;		On entry : 0/0
 17440 ;;		On exit  : 0/0
 17441 ;;		Unchanged: 0/0
 17442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17443 ;;      Params:         0       5       0       0       0       0       0
 17444 ;;      Locals:         0       0       0       0       0       0       0
 17445 ;;      Temps:          0       2       0       0       0       0       0
 17446 ;;      Totals:         0       7       0       0       0       0       0
 17447 ;;Total ram usage:        7 bytes
 17448 ;; Hardware stack levels used:    1
 17449 ;; Hardware stack levels required when called:    3
 17450 ;; This function calls:
 17451 ;;		Nothing
 17452 ;; This function is called by:
 17453 ;;		_exp
 17454 ;; This function uses a non-reentrant model
 17455 ;;
 17456                           
 17457                           	psect	text72
 17458  00323A                     __ptext72:
 17459                           	opt stack 0
 17460  00323A                     _ldexp:
 17461                           	opt stack 23
 17462                           
 17463                           ;incstack = 0
 17464  00323A  0100               	movlb	0	; () banked
 17465  00323C  5192               	movf	ldexp@value& (0+255),w,b
 17466  00323E  1193               	iorwf	(ldexp@value+1)& (0+255),w,b
 17467  003240  1194               	iorwf	(ldexp@value+2)& (0+255),w,b
 17468  003242  A4D8               	btfss	status,2,c
 17469  003244  D007               	goto	l2438
 17470                           
 17471                           ; BSR set to: 0
 17472  003246  0E00               	movlw	0
 17473  003248  6F92               	movwf	?_ldexp& (0+255),b
 17474  00324A  0E00               	movlw	0
 17475  00324C  6F93               	movwf	(?_ldexp+1)& (0+255),b
 17476  00324E  0E00               	movlw	0
 17477  003250  6F94               	movwf	(?_ldexp+2)& (0+255),b
 17478                           
 17479                           ; BSR set to: 0
 17480  003252  0012               	return	
 17481  003254                     l2438:
 17482                           
 17483                           ; BSR set to: 0
 17484                           
 17485                           ; BSR set to: 0
 17486  003254  5194               	movf	(ldexp@value+2)& (0+255),w,b
 17487  003256  0B7F               	andlw	127
 17488  003258  6F97               	movwf	??_ldexp& (0+255),b
 17489  00325A  6B98               	clrf	(??_ldexp+1)& (0+255),b
 17490  00325C  90D8               	bcf	status,0,c
 17491  00325E  3797               	rlcf	??_ldexp& (0+255),f,b
 17492  003260  3798               	rlcf	(??_ldexp+1)& (0+255),f,b
 17493  003262  5197               	movf	??_ldexp& (0+255),w,b
 17494  003264  2795               	addwf	ldexp@newexp& (0+255),f,b
 17495  003266  5198               	movf	(??_ldexp+1)& (0+255),w,b
 17496  003268  2396               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 17497  00326A  AF93               	btfss	(ldexp@value+1)& (0+255),7,b
 17498  00326C  D003               	goto	u8390
 17499  00326E  6B97               	clrf	??_ldexp& (0+255),b
 17500  003270  2B97               	incf	??_ldexp& (0+255),f,b
 17501  003272  D002               	goto	u8398
 17502  003274                     u8390:
 17503  003274  0100               	movlb	0	; () banked
 17504  003276  6B97               	clrf	??_ldexp& (0+255),b
 17505  003278                     u8398:
 17506  003278  5197               	movf	??_ldexp& (0+255),w,b
 17507  00327A  2795               	addwf	ldexp@newexp& (0+255),f,b
 17508  00327C  0E00               	movlw	0
 17509  00327E  2396               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 17510  003280  AF96               	btfss	(ldexp@newexp+1)& (0+255),7,b
 17511  003282  D00D               	goto	l2440
 17512                           
 17513                           ; BSR set to: 0
 17514  003284  0E00               	movlw	0
 17515  003286  0101               	movlb	1	; () banked
 17516  003288  6FD1               	movwf	(_errno+1)& (0+255),b
 17517  00328A  0E22               	movlw	34
 17518  00328C  6FD0               	movwf	_errno& (0+255),b
 17519  00328E  0E00               	movlw	0
 17520  003290  0100               	movlb	0	; () banked
 17521  003292  6F92               	movwf	?_ldexp& (0+255),b
 17522  003294  0E00               	movlw	0
 17523  003296  6F93               	movwf	(?_ldexp+1)& (0+255),b
 17524  003298  0E00               	movlw	0
 17525  00329A                     L3:
 17526  00329A  6F94               	movwf	(?_ldexp+2)& (0+255),b
 17527                           
 17528                           ; BSR set to: 0
 17529  00329C  0012               	return	
 17530  00329E                     l2440:
 17531                           
 17532                           ; BSR set to: 0
 17533                           
 17534                           ; BSR set to: 0
 17535  00329E  BF96               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 17536  0032A0  D017               	goto	l2442
 17537  0032A2  0596               	decf	(ldexp@newexp+1)& (0+255),w,b
 17538  0032A4  A0D8               	btfss	status,0,c
 17539  0032A6  D014               	goto	l2442
 17540                           
 17541                           ; BSR set to: 0
 17542  0032A8  0E00               	movlw	0
 17543  0032AA  0101               	movlb	1	; () banked
 17544  0032AC  6FD1               	movwf	(_errno+1)& (0+255),b
 17545  0032AE  0E22               	movlw	34
 17546  0032B0  6FD0               	movwf	_errno& (0+255),b
 17547                           
 17548                           ; BSR set to: 1
 17549  0032B2  0100               	movlb	0	; () banked
 17550  0032B4  AF94               	btfss	(ldexp@value+2)& (0+255),7,b
 17551  0032B6  D006               	goto	l2443
 17552                           
 17553                           ; BSR set to: 0
 17554  0032B8  0EFF               	movlw	255
 17555  0032BA  6F92               	movwf	?_ldexp& (0+255),b
 17556  0032BC  0E7F               	movlw	127
 17557  0032BE  6F93               	movwf	(?_ldexp+1)& (0+255),b
 17558  0032C0  0EFF               	movlw	255
 17559  0032C2  D7EB               	goto	L3
 17560  0032C4                     l2443:
 17561                           
 17562                           ; BSR set to: 0
 17563                           
 17564                           ; BSR set to: 0
 17565  0032C4  0EFF               	movlw	255
 17566  0032C6  6F92               	movwf	?_ldexp& (0+255),b
 17567  0032C8  0E7F               	movlw	127
 17568  0032CA  6F93               	movwf	(?_ldexp+1)& (0+255),b
 17569  0032CC  0E7F               	movlw	127
 17570  0032CE  D7E5               	goto	L3
 17571  0032D0                     l2442:
 17572                           
 17573                           ; BSR set to: 0
 17574                           
 17575                           ; BSR set to: 0
 17576  0032D0  3596               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 17577  0032D2  3196               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 17578  0032D4  6F98               	movwf	(??_ldexp+1)& (0+255),b
 17579  0032D6  3195               	rrcf	ldexp@newexp& (0+255),w,b
 17580  0032D8  6F97               	movwf	??_ldexp& (0+255),b
 17581  0032DA  5194               	movf	(ldexp@value+2)& (0+255),w,b
 17582  0032DC  1997               	xorwf	??_ldexp& (0+255),w,b
 17583  0032DE  0B80               	andlw	-128
 17584  0032E0  1997               	xorwf	??_ldexp& (0+255),w,b
 17585  0032E2  6F94               	movwf	(ldexp@value+2)& (0+255),b
 17586  0032E4  C095  F097         	movff	ldexp@newexp,??_ldexp
 17587  0032E8  0E01               	movlw	1
 17588  0032EA  1797               	andwf	??_ldexp& (0+255),f,b
 17589  0032EC  3397               	rrcf	??_ldexp& (0+255),f,b
 17590  0032EE  3397               	rrcf	??_ldexp& (0+255),f,b
 17591  0032F0  5193               	movf	(ldexp@value+1)& (0+255),w,b
 17592  0032F2  1997               	xorwf	??_ldexp& (0+255),w,b
 17593  0032F4  0B7F               	andlw	-129
 17594  0032F6  1997               	xorwf	??_ldexp& (0+255),w,b
 17595  0032F8  6F93               	movwf	(ldexp@value+1)& (0+255),b
 17596                           
 17597                           ; BSR set to: 0
 17598                           
 17599                           ; BSR set to: 0
 17600                           
 17601                           ; BSR set to: 0
 17602  0032FA  C092  F092         	movff	ldexp@value,?_ldexp
 17603  0032FE  C093  F093         	movff	ldexp@value+1,?_ldexp+1
 17604  003302  C094  F094         	movff	ldexp@value+2,?_ldexp+2
 17605  003306  0012               	return	
 17606  003308                     __end_of_ldexp:
 17607                           	opt stack 0
 17608                           tosu	equ	0xFFF
 17609                           tosh	equ	0xFFE
 17610                           tosl	equ	0xFFD
 17611                           pclath	equ	0xFFA
 17612                           tblptru	equ	0xFF8
 17613                           tblptrh	equ	0xFF7
 17614                           tblptrl	equ	0xFF6
 17615                           tablat	equ	0xFF5
 17616                           prodh	equ	0xFF4
 17617                           prodl	equ	0xFF3
 17618                           intcon	equ	0xFF2
 17619                           intcon2	equ	0xFF1
 17620                           indf0	equ	0xFEF
 17621                           postinc0	equ	0xFEE
 17622                           fsr0h	equ	0xFEA
 17623                           fsr0l	equ	0xFE9
 17624                           wreg	equ	0xFE8
 17625                           indf1	equ	0xFE7
 17626                           postdec1	equ	0xFE5
 17627                           fsr1h	equ	0xFE2
 17628                           fsr1l	equ	0xFE1
 17629                           indf2	equ	0xFDF
 17630                           postinc2	equ	0xFDE
 17631                           postdec2	equ	0xFDD
 17632                           fsr2h	equ	0xFDA
 17633                           fsr2l	equ	0xFD9
 17634                           status	equ	0xFD8
 17635                           
 17636 ;; *************** function _floor *****************
 17637 ;; Defined at:
 17638 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 17639 ;; Parameters:    Size  Location     Type
 17640 ;;  x               3   48[BANK0 ] int 
 17641 ;; Auto vars:     Size  Location     Type
 17642 ;;  i               3   51[BANK0 ] int 
 17643 ;;  expon           2   54[BANK0 ] int 
 17644 ;; Return value:  Size  Location     Type
 17645 ;;                  3   48[BANK0 ] int 
 17646 ;; Registers used:
 17647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17648 ;; Tracked objects:
 17649 ;;		On entry : 0/0
 17650 ;;		On exit  : 0/0
 17651 ;;		Unchanged: 0/0
 17652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17653 ;;      Params:         0       3       0       0       0       0       0
 17654 ;;      Locals:         0       5       0       0       0       0       0
 17655 ;;      Temps:          0       0       0       0       0       0       0
 17656 ;;      Totals:         0       8       0       0       0       0       0
 17657 ;;Total ram usage:        8 bytes
 17658 ;; Hardware stack levels used:    1
 17659 ;; Hardware stack levels required when called:    5
 17660 ;; This function calls:
 17661 ;;		___altoft
 17662 ;;		___ftadd
 17663 ;;		___ftge
 17664 ;;		___fttol
 17665 ;;		_frexp
 17666 ;; This function is called by:
 17667 ;;		_exp
 17668 ;; This function uses a non-reentrant model
 17669 ;;
 17670                           
 17671                           	psect	text73
 17672  003082                     __ptext73:
 17673                           	opt stack 0
 17674  003082                     _floor:
 17675                           	opt stack 21
 17676                           
 17677                           ; BSR set to: 0
 17678                           ;incstack = 0
 17679  003082  C090  F018         	movff	floor@x,frexp@value
 17680  003086  C091  F019         	movff	floor@x+1,frexp@value+1
 17681  00308A  C092  F01A         	movff	floor@x+2,frexp@value+2
 17682  00308E  0E96               	movlw	low floor@expon
 17683  003090  6E1B               	movwf	frexp@eptr,c
 17684  003092  0E00               	movlw	high floor@expon
 17685  003094  6E1C               	movwf	frexp@eptr+1,c
 17686  003096  EC76  F01B         	call	_frexp	;wreg free
 17687  00309A  0100               	movlb	0	; () banked
 17688  00309C  AF97               	btfss	(floor@expon+1)& (0+255),7,b
 17689  00309E  D010               	goto	l2425
 17690                           
 17691                           ; BSR set to: 0
 17692  0030A0  AF92               	btfss	(floor@x+2)& (0+255),7,b
 17693  0030A2  D007               	goto	l2426
 17694                           
 17695                           ; BSR set to: 0
 17696  0030A4  0E00               	movlw	0
 17697  0030A6  6F90               	movwf	?_floor& (0+255),b
 17698  0030A8  0E80               	movlw	128
 17699  0030AA  6F91               	movwf	(?_floor+1)& (0+255),b
 17700  0030AC  0EBF               	movlw	191
 17701  0030AE  6F92               	movwf	(?_floor+2)& (0+255),b
 17702                           
 17703                           ; BSR set to: 0
 17704  0030B0  0012               	return	
 17705  0030B2                     l2426:
 17706                           
 17707                           ; BSR set to: 0
 17708                           
 17709                           ; BSR set to: 0
 17710  0030B2  0E00               	movlw	0
 17711  0030B4  6F90               	movwf	?_floor& (0+255),b
 17712  0030B6  0E00               	movlw	0
 17713  0030B8  6F91               	movwf	(?_floor+1)& (0+255),b
 17714  0030BA  0E00               	movlw	0
 17715  0030BC  6F92               	movwf	(?_floor+2)& (0+255),b
 17716                           
 17717                           ; BSR set to: 0
 17718  0030BE  0012               	return	
 17719  0030C0                     l2425:
 17720                           
 17721                           ; BSR set to: 0
 17722                           
 17723                           ; BSR set to: 0
 17724  0030C0  5197               	movf	(floor@expon+1)& (0+255),w,b
 17725  0030C2  E104               	bnz	u8350
 17726  0030C4  0E15               	movlw	21
 17727  0030C6  5D96               	subwf	floor@expon& (0+255),w,b
 17728  0030C8  A0D8               	btfss	status,0,c
 17729  0030CA  D007               	goto	l2428
 17730  0030CC                     u8350:
 17731                           
 17732                           ; BSR set to: 0
 17733  0030CC  C090  F090         	movff	floor@x,?_floor
 17734  0030D0  C091  F091         	movff	floor@x+1,?_floor+1
 17735  0030D4  C092  F092         	movff	floor@x+2,?_floor+2
 17736  0030D8  0012               	return	
 17737  0030DA                     l2428:
 17738                           
 17739                           ; BSR set to: 0
 17740                           
 17741                           ; BSR set to: 0
 17742  0030DA  C090  F079         	movff	floor@x,___fttol@f1
 17743  0030DE  C091  F07A         	movff	floor@x+1,___fttol@f1+1
 17744  0030E2  C092  F07B         	movff	floor@x+2,___fttol@f1+2
 17745  0030E6  ECF1  F015         	call	___fttol	;wreg free
 17746  0030EA  C079  F088         	movff	?___fttol,___altoft@c
 17747  0030EE  C07A  F089         	movff	?___fttol+1,___altoft@c+1
 17748  0030F2  C07B  F08A         	movff	?___fttol+2,___altoft@c+2
 17749  0030F6  C07C  F08B         	movff	?___fttol+3,___altoft@c+3
 17750  0030FA  EC89  F01C         	call	___altoft	;wreg free
 17751  0030FE  C088  F093         	movff	?___altoft,floor@i
 17752  003102  C089  F094         	movff	?___altoft+1,floor@i+1
 17753  003106  C08A  F095         	movff	?___altoft+2,floor@i+2
 17754  00310A  C090  F018         	movff	floor@x,___ftge@ff1
 17755  00310E  C091  F019         	movff	floor@x+1,___ftge@ff1+1
 17756  003112  C092  F01A         	movff	floor@x+2,___ftge@ff1+2
 17757  003116  C093  F01B         	movff	floor@i,___ftge@ff2
 17758  00311A  C094  F01C         	movff	floor@i+1,___ftge@ff2+1
 17759  00311E  C095  F01D         	movff	floor@i+2,___ftge@ff2+2
 17760  003122  ECBE  F01B         	call	___ftge	;wreg free
 17761  003126  B0D8               	btfsc	status,0,c
 17762  003128  D016               	goto	l2429
 17763  00312A  C093  F07C         	movff	floor@i,___ftadd@f1
 17764  00312E  C094  F07D         	movff	floor@i+1,___ftadd@f1+1
 17765  003132  C095  F07E         	movff	floor@i+2,___ftadd@f1+2
 17766  003136  0E00               	movlw	0
 17767  003138  0100               	movlb	0	; () banked
 17768  00313A  6F7F               	movwf	___ftadd@f2& (0+255),b
 17769  00313C  0E80               	movlw	128
 17770  00313E  6F80               	movwf	(___ftadd@f2+1)& (0+255),b
 17771  003140  0EBF               	movlw	191
 17772  003142  6F81               	movwf	(___ftadd@f2+2)& (0+255),b
 17773  003144  EC26  F00E         	call	___ftadd	;wreg free
 17774  003148  C07C  F090         	movff	?___ftadd,?_floor
 17775  00314C  C07D  F091         	movff	?___ftadd+1,?_floor+1
 17776  003150  C07E  F092         	movff	?___ftadd+2,?_floor+2
 17777  003154  0012               	return	
 17778  003156                     l2429:
 17779  003156  C093  F090         	movff	floor@i,?_floor
 17780  00315A  C094  F091         	movff	floor@i+1,?_floor+1
 17781  00315E  C095  F092         	movff	floor@i+2,?_floor+2
 17782  003162  0012               	return		;funcret
 17783  003164                     __end_of_floor:
 17784                           	opt stack 0
 17785                           tosu	equ	0xFFF
 17786                           tosh	equ	0xFFE
 17787                           tosl	equ	0xFFD
 17788                           pclath	equ	0xFFA
 17789                           tblptru	equ	0xFF8
 17790                           tblptrh	equ	0xFF7
 17791                           tblptrl	equ	0xFF6
 17792                           tablat	equ	0xFF5
 17793                           prodh	equ	0xFF4
 17794                           prodl	equ	0xFF3
 17795                           intcon	equ	0xFF2
 17796                           intcon2	equ	0xFF1
 17797                           indf0	equ	0xFEF
 17798                           postinc0	equ	0xFEE
 17799                           fsr0h	equ	0xFEA
 17800                           fsr0l	equ	0xFE9
 17801                           wreg	equ	0xFE8
 17802                           indf1	equ	0xFE7
 17803                           postdec1	equ	0xFE5
 17804                           fsr1h	equ	0xFE2
 17805                           fsr1l	equ	0xFE1
 17806                           indf2	equ	0xFDF
 17807                           postinc2	equ	0xFDE
 17808                           postdec2	equ	0xFDD
 17809                           fsr2h	equ	0xFDA
 17810                           fsr2l	equ	0xFD9
 17811                           status	equ	0xFD8
 17812                           
 17813 ;; *************** function _frexp *****************
 17814 ;; Defined at:
 17815 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 17816 ;; Parameters:    Size  Location     Type
 17817 ;;  value           3   23[COMRAM] int 
 17818 ;;  eptr            2   26[COMRAM] PTR int 
 17819 ;;		 -> log@exponent(2), floor@expon(2), 
 17820 ;; Auto vars:     Size  Location     Type
 17821 ;;		None
 17822 ;; Return value:  Size  Location     Type
 17823 ;;                  3   23[COMRAM] PTR int 
 17824 ;; Registers used:
 17825 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17826 ;; Tracked objects:
 17827 ;;		On entry : 0/0
 17828 ;;		On exit  : 0/0
 17829 ;;		Unchanged: 0/0
 17830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17831 ;;      Params:         5       0       0       0       0       0       0
 17832 ;;      Locals:         0       0       0       0       0       0       0
 17833 ;;      Temps:          2       0       0       0       0       0       0
 17834 ;;      Totals:         7       0       0       0       0       0       0
 17835 ;;Total ram usage:        7 bytes
 17836 ;; Hardware stack levels used:    1
 17837 ;; Hardware stack levels required when called:    3
 17838 ;; This function calls:
 17839 ;;		Nothing
 17840 ;; This function is called by:
 17841 ;;		_floor
 17842 ;;		_log
 17843 ;; This function uses a non-reentrant model
 17844 ;;
 17845                           
 17846                           	psect	text74
 17847  0036EC                     __ptext74:
 17848                           	opt stack 0
 17849  0036EC                     _frexp:
 17850                           	opt stack 23
 17851                           
 17852                           ;incstack = 0
 17853  0036EC  5018               	movf	frexp@value,w,c
 17854  0036EE  1019               	iorwf	frexp@value+1,w,c
 17855  0036F0  101A               	iorwf	frexp@value+2,w,c
 17856  0036F2  A4D8               	btfss	status,2,c
 17857  0036F4  D00F               	goto	l2434
 17858  0036F6  C01B  FFD9         	movff	frexp@eptr,fsr2l
 17859  0036FA  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 17860  0036FE  0E00               	movlw	0
 17861  003700  6EDE               	movwf	postinc2,c
 17862  003702  0E00               	movlw	0
 17863  003704  6EDD               	movwf	postdec2,c
 17864  003706  0E00               	movlw	0
 17865  003708  6E18               	movwf	?_frexp,c
 17866  00370A  0E00               	movlw	0
 17867  00370C  6E19               	movwf	?_frexp+1,c
 17868  00370E  0E00               	movlw	0
 17869  003710  6E1A               	movwf	?_frexp+2,c
 17870  003712  0012               	return	
 17871  003714                     l2434:
 17872  003714  501A               	movf	frexp@value+2,w,c
 17873  003716  0B7F               	andlw	127
 17874  003718  6E1D               	movwf	??_frexp& (0+255),c
 17875  00371A  6A1E               	clrf	(??_frexp+1)& (0+255),c
 17876  00371C  90D8               	bcf	status,0,c
 17877  00371E  361D               	rlcf	??_frexp,f,c
 17878  003720  361E               	rlcf	??_frexp+1,f,c
 17879  003722  C01B  FFD9         	movff	frexp@eptr,fsr2l
 17880  003726  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 17881  00372A  C01D  FFDE         	movff	??_frexp,postinc2
 17882  00372E  C01E  FFDD         	movff	??_frexp+1,postdec2
 17883  003732  AE19               	btfss	frexp@value+1,7,c
 17884  003734  D003               	goto	u8110
 17885  003736  6A1D               	clrf	??_frexp& (0+255),c
 17886  003738  2A1D               	incf	??_frexp& (0+255),f,c
 17887  00373A  D001               	goto	u8118
 17888  00373C                     u8110:
 17889  00373C  6A1D               	clrf	??_frexp& (0+255),c
 17890  00373E                     u8118:
 17891  00373E  501D               	movf	??_frexp,w,c
 17892  003740  C01B  FFD9         	movff	frexp@eptr,fsr2l
 17893  003744  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 17894  003748  12DE               	iorwf	postinc2,f,c
 17895  00374A  0E00               	movlw	0
 17896  00374C  12DD               	iorwf	postdec2,f,c
 17897  00374E  C01B  FFD9         	movff	frexp@eptr,fsr2l
 17898  003752  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 17899  003756  0E82               	movlw	130
 17900  003758  26DE               	addwf	postinc2,f,c
 17901  00375A  0EFF               	movlw	255
 17902  00375C  22DD               	addwfc	postdec2,f,c
 17903  00375E  801A               	bsf	frexp@value+2,0,c
 17904  003760  821A               	bsf	frexp@value+2,1,c
 17905  003762  841A               	bsf	frexp@value+2,2,c
 17906  003764  861A               	bsf	frexp@value+2,3,c
 17907  003766  881A               	bsf	frexp@value+2,4,c
 17908  003768  8A1A               	bsf	frexp@value+2,5,c
 17909  00376A  9C1A               	bcf	frexp@value+2,6,c
 17910  00376C  9E19               	bcf	frexp@value+1,7,c
 17911  00376E  C018  F018         	movff	frexp@value,?_frexp
 17912  003772  C019  F019         	movff	frexp@value+1,?_frexp+1
 17913  003776  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 17914  00377A  0012               	return	
 17915  00377C                     __end_of_frexp:
 17916                           	opt stack 0
 17917                           tosu	equ	0xFFF
 17918                           tosh	equ	0xFFE
 17919                           tosl	equ	0xFFD
 17920                           pclath	equ	0xFFA
 17921                           tblptru	equ	0xFF8
 17922                           tblptrh	equ	0xFF7
 17923                           tblptrl	equ	0xFF6
 17924                           tablat	equ	0xFF5
 17925                           prodh	equ	0xFF4
 17926                           prodl	equ	0xFF3
 17927                           intcon	equ	0xFF2
 17928                           intcon2	equ	0xFF1
 17929                           indf0	equ	0xFEF
 17930                           postinc0	equ	0xFEE
 17931                           fsr0h	equ	0xFEA
 17932                           fsr0l	equ	0xFE9
 17933                           wreg	equ	0xFE8
 17934                           indf1	equ	0xFE7
 17935                           postdec1	equ	0xFE5
 17936                           fsr1h	equ	0xFE2
 17937                           fsr1l	equ	0xFE1
 17938                           indf2	equ	0xFDF
 17939                           postinc2	equ	0xFDE
 17940                           postdec2	equ	0xFDD
 17941                           fsr2h	equ	0xFDA
 17942                           fsr2l	equ	0xFD9
 17943                           status	equ	0xFD8
 17944                           
 17945 ;; *************** function ___fttol *****************
 17946 ;; Defined at:
 17947 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 17948 ;; Parameters:    Size  Location     Type
 17949 ;;  f1              3   25[BANK0 ] float 
 17950 ;; Auto vars:     Size  Location     Type
 17951 ;;  lval            4   35[BANK0 ] unsigned long 
 17952 ;;  exp1            1   39[BANK0 ] unsigned char 
 17953 ;;  sign1           1   34[BANK0 ] unsigned char 
 17954 ;; Return value:  Size  Location     Type
 17955 ;;                  4   25[BANK0 ] long 
 17956 ;; Registers used:
 17957 ;;		wreg, status,2, status,0
 17958 ;; Tracked objects:
 17959 ;;		On entry : 0/0
 17960 ;;		On exit  : 0/0
 17961 ;;		Unchanged: 0/0
 17962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17963 ;;      Params:         0       4       0       0       0       0       0
 17964 ;;      Locals:         0       6       0       0       0       0       0
 17965 ;;      Temps:          0       5       0       0       0       0       0
 17966 ;;      Totals:         0      15       0       0       0       0       0
 17967 ;;Total ram usage:       15 bytes
 17968 ;; Hardware stack levels used:    1
 17969 ;; Hardware stack levels required when called:    3
 17970 ;; This function calls:
 17971 ;;		Nothing
 17972 ;; This function is called by:
 17973 ;;		_SampleSingleChannel
 17974 ;;		_SampleAllChannels
 17975 ;;		_GroupRx
 17976 ;;		_GroupTx
 17977 ;;		_ReadIntFromEeprom
 17978 ;;		_sprintf
 17979 ;;		_pow
 17980 ;;		_exp
 17981 ;;		_floor
 17982 ;;		_DacSetValue
 17983 ;;		_DacAnalogToDigitalSpi
 17984 ;; This function uses a non-reentrant model
 17985 ;;
 17986                           
 17987                           	psect	text75
 17988  002BE2                     __ptext75:
 17989                           	opt stack 0
 17990  002BE2                     ___fttol:
 17991                           	opt stack 25
 17992                           
 17993                           ;incstack = 0
 17994  002BE2  C07B  F07D         	movff	___fttol@f1+2,??___fttol
 17995  002BE6  0100               	movlb	0	; () banked
 17996  002BE8  6B7E               	clrf	(??___fttol+1)& (0+255),b
 17997  002BEA  6B7F               	clrf	(??___fttol+2)& (0+255),b
 17998  002BEC  357A               	rlcf	(___fttol@f1+1)& (0+255),w,b
 17999  002BEE  377D               	rlcf	??___fttol& (0+255),f,b
 18000  002BF0  E301               	bnc	u8021
 18001  002BF2  817E               	bsf	(??___fttol+1)& (0+255),0,b
 18002  002BF4                     u8021:
 18003  002BF4  517D               	movf	??___fttol& (0+255),w,b
 18004  002BF6  6F87               	movwf	___fttol@exp1& (0+255),b
 18005  002BF8  5187               	movf	___fttol@exp1& (0+255),w,b
 18006  002BFA  A4D8               	btfss	status,2,c
 18007  002BFC  D009               	goto	l2087
 18008                           
 18009                           ; BSR set to: 0
 18010  002BFE  0E00               	movlw	0
 18011  002C00  6F79               	movwf	?___fttol& (0+255),b
 18012  002C02  0E00               	movlw	0
 18013  002C04  6F7A               	movwf	(?___fttol+1)& (0+255),b
 18014  002C06  0E00               	movlw	0
 18015  002C08  6F7B               	movwf	(?___fttol+2)& (0+255),b
 18016  002C0A  0E00               	movlw	0
 18017  002C0C  6F7C               	movwf	(?___fttol+3)& (0+255),b
 18018                           
 18019                           ; BSR set to: 0
 18020  002C0E  0012               	return	
 18021  002C10                     l2087:
 18022                           
 18023                           ; BSR set to: 0
 18024                           
 18025                           ; BSR set to: 0
 18026  002C10  0E17               	movlw	23
 18027  002C12  6F7D               	movwf	??___fttol& (0+255),b
 18028  002C14  C079  F07E         	movff	___fttol@f1,??___fttol+1
 18029  002C18  C07A  F07F         	movff	___fttol@f1+1,??___fttol+2
 18030  002C1C  C07B  F080         	movff	___fttol@f1+2,??___fttol+3
 18031  002C20  297D               	incf	??___fttol& (0+255),w,b
 18032  002C22  6F81               	movwf	(??___fttol+4)& (0+255),b
 18033  002C24  D004               	goto	u8040
 18034  002C26                     u8045:
 18035  002C26  90D8               	bcf	status,0,c
 18036  002C28  3380               	rrcf	(??___fttol+3)& (0+255),f,b
 18037  002C2A  337F               	rrcf	(??___fttol+2)& (0+255),f,b
 18038  002C2C  337E               	rrcf	(??___fttol+1)& (0+255),f,b
 18039  002C2E                     u8040:
 18040  002C2E  2F81               	decfsz	(??___fttol+4)& (0+255),f,b
 18041  002C30  D7FA               	goto	u8045
 18042  002C32  0100               	movlb	0	; () banked
 18043  002C34  517E               	movf	(??___fttol+1)& (0+255),w,b
 18044  002C36  6F82               	movwf	___fttol@sign1& (0+255),b
 18045                           
 18046                           ; BSR set to: 0
 18047  002C38  8F7A               	bsf	(___fttol@f1+1)& (0+255),7,b
 18048                           
 18049                           ; BSR set to: 0
 18050  002C3A  0EFF               	movlw	255
 18051  002C3C  1779               	andwf	___fttol@f1& (0+255),f,b
 18052  002C3E  0EFF               	movlw	255
 18053  002C40  177A               	andwf	(___fttol@f1+1)& (0+255),f,b
 18054  002C42  0E00               	movlw	0
 18055  002C44  177B               	andwf	(___fttol@f1+2)& (0+255),f,b
 18056                           
 18057                           ; BSR set to: 0
 18058  002C46  5179               	movf	___fttol@f1& (0+255),w,b
 18059  002C48  6F83               	movwf	___fttol@lval& (0+255),b
 18060  002C4A  517A               	movf	(___fttol@f1+1)& (0+255),w,b
 18061  002C4C  6F84               	movwf	(___fttol@lval+1)& (0+255),b
 18062  002C4E  517B               	movf	(___fttol@f1+2)& (0+255),w,b
 18063  002C50  6F85               	movwf	(___fttol@lval+2)& (0+255),b
 18064  002C52  6B86               	clrf	(___fttol@lval+3)& (0+255),b
 18065                           
 18066                           ; BSR set to: 0
 18067  002C54  0E8E               	movlw	142
 18068  002C56  5F87               	subwf	___fttol@exp1& (0+255),f,b
 18069                           
 18070                           ; BSR set to: 0
 18071  002C58  AF87               	btfss	___fttol@exp1& (0+255),7,b
 18072  002C5A  D016               	goto	l2089
 18073                           
 18074                           ; BSR set to: 0
 18075  002C5C  5187               	movf	___fttol@exp1& (0+255),w,b
 18076  002C5E  0A80               	xorlw	128
 18077  002C60  0F8F               	addlw	143
 18078  002C62  B0D8               	btfsc	status,0,c
 18079  002C64  D009               	goto	l2090
 18080                           
 18081                           ; BSR set to: 0
 18082  002C66  0E00               	movlw	0
 18083  002C68  6F79               	movwf	?___fttol& (0+255),b
 18084  002C6A  0E00               	movlw	0
 18085  002C6C  6F7A               	movwf	(?___fttol+1)& (0+255),b
 18086  002C6E  0E00               	movlw	0
 18087  002C70  6F7B               	movwf	(?___fttol+2)& (0+255),b
 18088  002C72  0E00               	movlw	0
 18089  002C74  6F7C               	movwf	(?___fttol+3)& (0+255),b
 18090                           
 18091                           ; BSR set to: 0
 18092  002C76  0012               	return	
 18093  002C78                     l2090:
 18094                           
 18095                           ; BSR set to: 0
 18096                           
 18097                           ; BSR set to: 0
 18098                           
 18099                           ; BSR set to: 0
 18100  002C78  90D8               	bcf	status,0,c
 18101  002C7A  3386               	rrcf	(___fttol@lval+3)& (0+255),f,b
 18102  002C7C  3385               	rrcf	(___fttol@lval+2)& (0+255),f,b
 18103  002C7E  3384               	rrcf	(___fttol@lval+1)& (0+255),f,b
 18104  002C80  3383               	rrcf	___fttol@lval& (0+255),f,b
 18105                           
 18106                           ; BSR set to: 0
 18107  002C82  3F87               	incfsz	___fttol@exp1& (0+255),f,b
 18108  002C84  D7F9               	goto	l2090
 18109                           
 18110                           ; BSR set to: 0
 18111  002C86  D015               	goto	u8080
 18112  002C88                     l2089:
 18113                           
 18114                           ; BSR set to: 0
 18115                           
 18116                           ; BSR set to: 0
 18117  002C88  0E17               	movlw	23
 18118  002C8A  6587               	cpfsgt	___fttol@exp1& (0+255),b
 18119  002C8C  D00F               	goto	l2095
 18120                           
 18121                           ; BSR set to: 0
 18122  002C8E  0E00               	movlw	0
 18123  002C90  6F79               	movwf	?___fttol& (0+255),b
 18124  002C92  0E00               	movlw	0
 18125  002C94  6F7A               	movwf	(?___fttol+1)& (0+255),b
 18126  002C96  0E00               	movlw	0
 18127  002C98  6F7B               	movwf	(?___fttol+2)& (0+255),b
 18128  002C9A  0E00               	movlw	0
 18129  002C9C  6F7C               	movwf	(?___fttol+3)& (0+255),b
 18130                           
 18131                           ; BSR set to: 0
 18132  002C9E  0012               	return	
 18133  002CA0                     
 18134                           ; BSR set to: 0
 18135                           
 18136                           ; BSR set to: 0
 18137  002CA0  90D8               	bcf	status,0,c
 18138  002CA2  3783               	rlcf	___fttol@lval& (0+255),f,b
 18139  002CA4  3784               	rlcf	(___fttol@lval+1)& (0+255),f,b
 18140  002CA6  3785               	rlcf	(___fttol@lval+2)& (0+255),f,b
 18141  002CA8  3786               	rlcf	(___fttol@lval+3)& (0+255),f,b
 18142  002CAA  0787               	decf	___fttol@exp1& (0+255),f,b
 18143  002CAC                     l2095:
 18144                           
 18145                           ; BSR set to: 0
 18146                           
 18147                           ; BSR set to: 0
 18148  002CAC  5187               	movf	___fttol@exp1& (0+255),w,b
 18149  002CAE  A4D8               	btfss	status,2,c
 18150  002CB0  D7F7               	goto	l2096
 18151  002CB2                     u8080:
 18152                           
 18153                           ; BSR set to: 0
 18154                           
 18155                           ; BSR set to: 0
 18156                           
 18157                           ; BSR set to: 0
 18158  002CB2  5182               	movf	___fttol@sign1& (0+255),w,b
 18159  002CB4  B4D8               	btfsc	status,2,c
 18160  002CB6  D008               	goto	l2098
 18161                           
 18162                           ; BSR set to: 0
 18163  002CB8  1F86               	comf	(___fttol@lval+3)& (0+255),f,b
 18164  002CBA  1F85               	comf	(___fttol@lval+2)& (0+255),f,b
 18165  002CBC  1F84               	comf	(___fttol@lval+1)& (0+255),f,b
 18166  002CBE  6D83               	negf	___fttol@lval& (0+255),b
 18167  002CC0  0E00               	movlw	0
 18168  002CC2  2384               	addwfc	(___fttol@lval+1)& (0+255),f,b
 18169  002CC4  2385               	addwfc	(___fttol@lval+2)& (0+255),f,b
 18170  002CC6  2386               	addwfc	(___fttol@lval+3)& (0+255),f,b
 18171  002CC8                     l2098:
 18172                           
 18173                           ; BSR set to: 0
 18174                           
 18175                           ; BSR set to: 0
 18176  002CC8  C083  F079         	movff	___fttol@lval,?___fttol
 18177  002CCC  C084  F07A         	movff	___fttol@lval+1,?___fttol+1
 18178  002CD0  C085  F07B         	movff	___fttol@lval+2,?___fttol+2
 18179  002CD4  C086  F07C         	movff	___fttol@lval+3,?___fttol+3
 18180  002CD8  0012               	return	
 18181  002CDA                     __end_of___fttol:
 18182                           	opt stack 0
 18183                           tosu	equ	0xFFF
 18184                           tosh	equ	0xFFE
 18185                           tosl	equ	0xFFD
 18186                           pclath	equ	0xFFA
 18187                           tblptru	equ	0xFF8
 18188                           tblptrh	equ	0xFF7
 18189                           tblptrl	equ	0xFF6
 18190                           tablat	equ	0xFF5
 18191                           prodh	equ	0xFF4
 18192                           prodl	equ	0xFF3
 18193                           intcon	equ	0xFF2
 18194                           intcon2	equ	0xFF1
 18195                           indf0	equ	0xFEF
 18196                           postinc0	equ	0xFEE
 18197                           fsr0h	equ	0xFEA
 18198                           fsr0l	equ	0xFE9
 18199                           wreg	equ	0xFE8
 18200                           indf1	equ	0xFE7
 18201                           postdec1	equ	0xFE5
 18202                           fsr1h	equ	0xFE2
 18203                           fsr1l	equ	0xFE1
 18204                           indf2	equ	0xFDF
 18205                           postinc2	equ	0xFDE
 18206                           postdec2	equ	0xFDD
 18207                           fsr2h	equ	0xFDA
 18208                           fsr2l	equ	0xFD9
 18209                           status	equ	0xFD8
 18210                           
 18211 ;; *************** function ___ftge *****************
 18212 ;; Defined at:
 18213 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 18214 ;; Parameters:    Size  Location     Type
 18215 ;;  ff1             3   23[COMRAM] float 
 18216 ;;  ff2             3   26[COMRAM] float 
 18217 ;; Auto vars:     Size  Location     Type
 18218 ;;		None
 18219 ;; Return value:  Size  Location     Type
 18220 ;;		None               void
 18221 ;; Registers used:
 18222 ;;		wreg, status,2, status,0
 18223 ;; Tracked objects:
 18224 ;;		On entry : 0/0
 18225 ;;		On exit  : 0/0
 18226 ;;		Unchanged: 0/0
 18227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18228 ;;      Params:         6       0       0       0       0       0       0
 18229 ;;      Locals:         0       0       0       0       0       0       0
 18230 ;;      Temps:          3       0       0       0       0       0       0
 18231 ;;      Totals:         9       0       0       0       0       0       0
 18232 ;;Total ram usage:        9 bytes
 18233 ;; Hardware stack levels used:    1
 18234 ;; Hardware stack levels required when called:    3
 18235 ;; This function calls:
 18236 ;;		Nothing
 18237 ;; This function is called by:
 18238 ;;		_sprintf
 18239 ;;		_pow
 18240 ;;		_exp
 18241 ;;		_floor
 18242 ;;		_CheckFlashPrecentage
 18243 ;; This function uses a non-reentrant model
 18244 ;;
 18245                           
 18246                           	psect	text76
 18247  00377C                     __ptext76:
 18248                           	opt stack 0
 18249  00377C                     ___ftge:
 18250                           	opt stack 25
 18251                           
 18252                           ; BSR set to: 0
 18253                           ;incstack = 0
 18254  00377C  AE1A               	btfss	___ftge@ff1+2,7,c
 18255  00377E  D016               	goto	l2059
 18256  003780  C018  F01E         	movff	___ftge@ff1,??___ftge
 18257  003784  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 18258  003788  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 18259  00378C  1E1E               	comf	??___ftge,f,c
 18260  00378E  1E1F               	comf	??___ftge+1,f,c
 18261  003790  1E20               	comf	??___ftge+2,f,c
 18262  003792  2A1E               	incf	??___ftge,f,c
 18263  003794  0E00               	movlw	0
 18264  003796  221F               	addwfc	??___ftge+1,f,c
 18265  003798  2220               	addwfc	??___ftge+2,f,c
 18266  00379A  0E00               	movlw	0
 18267  00379C  241E               	addwf	??___ftge,w,c
 18268  00379E  6E18               	movwf	___ftge@ff1,c
 18269  0037A0  0E00               	movlw	0
 18270  0037A2  201F               	addwfc	??___ftge+1,w,c
 18271  0037A4  6E19               	movwf	___ftge@ff1+1,c
 18272  0037A6  0E80               	movlw	128
 18273  0037A8  2020               	addwfc	??___ftge+2,w,c
 18274  0037AA  6E1A               	movwf	___ftge@ff1+2,c
 18275  0037AC                     l2059:
 18276  0037AC  AE1D               	btfss	___ftge@ff2+2,7,c
 18277  0037AE  D016               	goto	l2060
 18278  0037B0  C01B  F01E         	movff	___ftge@ff2,??___ftge
 18279  0037B4  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 18280  0037B8  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 18281  0037BC  1E1E               	comf	??___ftge,f,c
 18282  0037BE  1E1F               	comf	??___ftge+1,f,c
 18283  0037C0  1E20               	comf	??___ftge+2,f,c
 18284  0037C2  2A1E               	incf	??___ftge,f,c
 18285  0037C4  0E00               	movlw	0
 18286  0037C6  221F               	addwfc	??___ftge+1,f,c
 18287  0037C8  2220               	addwfc	??___ftge+2,f,c
 18288  0037CA  0E00               	movlw	0
 18289  0037CC  241E               	addwf	??___ftge,w,c
 18290  0037CE  6E1B               	movwf	___ftge@ff2,c
 18291  0037D0  0E00               	movlw	0
 18292  0037D2  201F               	addwfc	??___ftge+1,w,c
 18293  0037D4  6E1C               	movwf	___ftge@ff2+1,c
 18294  0037D6  0E80               	movlw	128
 18295  0037D8  2020               	addwfc	??___ftge+2,w,c
 18296  0037DA  6E1D               	movwf	___ftge@ff2+2,c
 18297  0037DC                     l2060:
 18298  0037DC  0E00               	movlw	0
 18299  0037DE  1A18               	xorwf	___ftge@ff1,f,c
 18300  0037E0  0E00               	movlw	0
 18301  0037E2  1A19               	xorwf	___ftge@ff1+1,f,c
 18302  0037E4  0E80               	movlw	128
 18303  0037E6  1A1A               	xorwf	___ftge@ff1+2,f,c
 18304  0037E8  0E00               	movlw	0
 18305  0037EA  1A1B               	xorwf	___ftge@ff2,f,c
 18306  0037EC  0E00               	movlw	0
 18307  0037EE  1A1C               	xorwf	___ftge@ff2+1,f,c
 18308  0037F0  0E80               	movlw	128
 18309  0037F2  1A1D               	xorwf	___ftge@ff2+2,f,c
 18310  0037F4  501B               	movf	___ftge@ff2,w,c
 18311  0037F6  5C18               	subwf	___ftge@ff1,w,c
 18312  0037F8  501C               	movf	___ftge@ff2+1,w,c
 18313  0037FA  5819               	subwfb	___ftge@ff1+1,w,c
 18314  0037FC  501D               	movf	___ftge@ff2+2,w,c
 18315  0037FE  581A               	subwfb	___ftge@ff1+2,w,c
 18316  003800  B0D8               	btfsc	status,0,c
 18317  003802  D002               	goto	l8043
 18318  003804  90D8               	bcf	status,0,c
 18319  003806  0012               	return	
 18320  003808                     l8043:
 18321  003808  80D8               	bsf	status,0,c
 18322  00380A  0012               	return	
 18323  00380C                     __end_of___ftge:
 18324                           	opt stack 0
 18325                           tosu	equ	0xFFF
 18326                           tosh	equ	0xFFE
 18327                           tosl	equ	0xFFD
 18328                           pclath	equ	0xFFA
 18329                           tblptru	equ	0xFF8
 18330                           tblptrh	equ	0xFF7
 18331                           tblptrl	equ	0xFF6
 18332                           tablat	equ	0xFF5
 18333                           prodh	equ	0xFF4
 18334                           prodl	equ	0xFF3
 18335                           intcon	equ	0xFF2
 18336                           intcon2	equ	0xFF1
 18337                           indf0	equ	0xFEF
 18338                           postinc0	equ	0xFEE
 18339                           fsr0h	equ	0xFEA
 18340                           fsr0l	equ	0xFE9
 18341                           wreg	equ	0xFE8
 18342                           indf1	equ	0xFE7
 18343                           postdec1	equ	0xFE5
 18344                           fsr1h	equ	0xFE2
 18345                           fsr1l	equ	0xFE1
 18346                           indf2	equ	0xFDF
 18347                           postinc2	equ	0xFDE
 18348                           postdec2	equ	0xFDD
 18349                           fsr2h	equ	0xFDA
 18350                           fsr2l	equ	0xFD9
 18351                           status	equ	0xFD8
 18352                           
 18353 ;; *************** function ___altoft *****************
 18354 ;; Defined at:
 18355 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 18356 ;; Parameters:    Size  Location     Type
 18357 ;;  c               4   40[BANK0 ] long 
 18358 ;; Auto vars:     Size  Location     Type
 18359 ;;  sign            1   47[COMRAM] unsigned char 
 18360 ;;  exp             1   46[COMRAM] unsigned char 
 18361 ;; Return value:  Size  Location     Type
 18362 ;;                  3   40[BANK0 ] float 
 18363 ;; Registers used:
 18364 ;;		wreg, status,2, status,0, cstack
 18365 ;; Tracked objects:
 18366 ;;		On entry : 0/0
 18367 ;;		On exit  : 0/0
 18368 ;;		Unchanged: 0/0
 18369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18370 ;;      Params:         0       4       0       0       0       0       0
 18371 ;;      Locals:         2       0       0       0       0       0       0
 18372 ;;      Temps:          0       4       0       0       0       0       0
 18373 ;;      Totals:         2       8       0       0       0       0       0
 18374 ;;Total ram usage:       10 bytes
 18375 ;; Hardware stack levels used:    1
 18376 ;; Hardware stack levels required when called:    4
 18377 ;; This function calls:
 18378 ;;		___ftpack
 18379 ;; This function is called by:
 18380 ;;		_floor
 18381 ;; This function uses a non-reentrant model
 18382 ;;
 18383                           
 18384                           	psect	text77
 18385  003912                     __ptext77:
 18386                           	opt stack 0
 18387  003912                     ___altoft:
 18388                           	opt stack 21
 18389                           
 18390                           ;incstack = 0
 18391  003912  0E00               	movlw	0
 18392  003914  6E30               	movwf	___altoft@sign,c
 18393  003916  0E8E               	movlw	142
 18394  003918  6E2F               	movwf	___altoft@exp,c
 18395  00391A  0100               	movlb	0	; () banked
 18396  00391C  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
 18397  00391E  D011               	goto	l1823
 18398                           
 18399                           ; BSR set to: 0
 18400  003920  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
 18401  003922  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
 18402  003924  1F89               	comf	(___altoft@c+1)& (0+255),f,b
 18403  003926  6D88               	negf	___altoft@c& (0+255),b
 18404  003928  0E00               	movlw	0
 18405  00392A  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
 18406  00392C  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
 18407  00392E  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
 18408                           
 18409                           ; BSR set to: 0
 18410  003930  0E01               	movlw	1
 18411  003932  6E30               	movwf	___altoft@sign,c
 18412                           
 18413                           ; BSR set to: 0
 18414  003934  D006               	goto	l1823
 18415  003936                     
 18416                           ; BSR set to: 0
 18417                           
 18418                           ; BSR set to: 0
 18419  003936  90D8               	bcf	status,0,c
 18420  003938  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
 18421  00393A  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
 18422  00393C  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
 18423  00393E  3388               	rrcf	___altoft@c& (0+255),f,b
 18424  003940  2A2F               	incf	___altoft@exp,f,c
 18425  003942                     l1823:
 18426                           
 18427                           ; BSR set to: 0
 18428                           
 18429                           ; BSR set to: 0
 18430  003942  0E00               	movlw	0
 18431  003944  1588               	andwf	___altoft@c& (0+255),w,b
 18432  003946  6F8C               	movwf	??___altoft& (0+255),b
 18433  003948  0E00               	movlw	0
 18434  00394A  1589               	andwf	(___altoft@c+1)& (0+255),w,b
 18435  00394C  6F8D               	movwf	(??___altoft+1)& (0+255),b
 18436  00394E  0E00               	movlw	0
 18437  003950  158A               	andwf	(___altoft@c+2)& (0+255),w,b
 18438  003952  6F8E               	movwf	(??___altoft+2)& (0+255),b
 18439  003954  0EFF               	movlw	255
 18440  003956  158B               	andwf	(___altoft@c+3)& (0+255),w,b
 18441  003958  6F8F               	movwf	(??___altoft+3)& (0+255),b
 18442  00395A  518C               	movf	??___altoft& (0+255),w,b
 18443  00395C  118D               	iorwf	(??___altoft+1)& (0+255),w,b
 18444  00395E  118E               	iorwf	(??___altoft+2)& (0+255),w,b
 18445  003960  118F               	iorwf	(??___altoft+3)& (0+255),w,b
 18446  003962  A4D8               	btfss	status,2,c
 18447  003964  D7E8               	goto	l1824
 18448                           
 18449                           ; BSR set to: 0
 18450                           
 18451                           ; BSR set to: 0
 18452  003966  C088  F018         	movff	___altoft@c,___ftpack@arg
 18453  00396A  C089  F019         	movff	___altoft@c+1,___ftpack@arg+1
 18454  00396E  C08A  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 18455  003972  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 18456  003976  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 18457  00397A  EC3F  F01A         	call	___ftpack	;wreg free
 18458  00397E  C018  F088         	movff	?___ftpack,?___altoft
 18459  003982  C019  F089         	movff	?___ftpack+1,?___altoft+1
 18460  003986  C01A  F08A         	movff	?___ftpack+2,?___altoft+2
 18461  00398A  0012               	return	
 18462  00398C                     __end_of___altoft:
 18463                           	opt stack 0
 18464                           tosu	equ	0xFFF
 18465                           tosh	equ	0xFFE
 18466                           tosl	equ	0xFFD
 18467                           pclath	equ	0xFFA
 18468                           tblptru	equ	0xFF8
 18469                           tblptrh	equ	0xFF7
 18470                           tblptrl	equ	0xFF6
 18471                           tablat	equ	0xFF5
 18472                           prodh	equ	0xFF4
 18473                           prodl	equ	0xFF3
 18474                           intcon	equ	0xFF2
 18475                           intcon2	equ	0xFF1
 18476                           indf0	equ	0xFEF
 18477                           postinc0	equ	0xFEE
 18478                           fsr0h	equ	0xFEA
 18479                           fsr0l	equ	0xFE9
 18480                           wreg	equ	0xFE8
 18481                           indf1	equ	0xFE7
 18482                           postdec1	equ	0xFE5
 18483                           fsr1h	equ	0xFE2
 18484                           fsr1l	equ	0xFE1
 18485                           indf2	equ	0xFDF
 18486                           postinc2	equ	0xFDE
 18487                           postdec2	equ	0xFDD
 18488                           fsr2h	equ	0xFDA
 18489                           fsr2l	equ	0xFD9
 18490                           status	equ	0xFD8
 18491                           
 18492 ;; *************** function _eval_poly *****************
 18493 ;; Defined at:
 18494 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 18495 ;; Parameters:    Size  Location     Type
 18496 ;;  x               3   40[BANK0 ] float 
 18497 ;;  d               2   43[BANK0 ] PTR const 
 18498 ;;		 -> log@coeff(27), exp@coeff(30), 
 18499 ;;  n               2   45[BANK0 ] int 
 18500 ;; Auto vars:     Size  Location     Type
 18501 ;;  res             3   47[BANK0 ] int 
 18502 ;; Return value:  Size  Location     Type
 18503 ;;                  3   40[BANK0 ] int 
 18504 ;; Registers used:
 18505 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18506 ;; Tracked objects:
 18507 ;;		On entry : 0/0
 18508 ;;		On exit  : 0/0
 18509 ;;		Unchanged: 0/0
 18510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18511 ;;      Params:         0       7       0       0       0       0       0
 18512 ;;      Locals:         0       3       0       0       0       0       0
 18513 ;;      Temps:          2       0       0       0       0       0       0
 18514 ;;      Totals:         2      10       0       0       0       0       0
 18515 ;;Total ram usage:       12 bytes
 18516 ;; Hardware stack levels used:    1
 18517 ;; Hardware stack levels required when called:    5
 18518 ;; This function calls:
 18519 ;;		___ftadd
 18520 ;;		___ftmul
 18521 ;;		___wmul
 18522 ;; This function is called by:
 18523 ;;		_exp
 18524 ;;		_log
 18525 ;; This function uses a non-reentrant model
 18526 ;;
 18527                           
 18528                           	psect	text78
 18529  003164                     __ptext78:
 18530                           	opt stack 0
 18531  003164                     _eval_poly:
 18532                           	opt stack 21
 18533                           
 18534                           ;incstack = 0
 18535  003164  C08D  F026         	movff	eval_poly@n,___wmul@multiplier
 18536  003168  C08E  F027         	movff	eval_poly@n+1,___wmul@multiplier+1
 18537  00316C  0E00               	movlw	0
 18538  00316E  6E29               	movwf	___wmul@multiplicand+1,c
 18539  003170  0E03               	movlw	3
 18540  003172  6E28               	movwf	___wmul@multiplicand,c
 18541  003174  ECDA  F021         	call	___wmul	;wreg free
 18542  003178  C08B  F02F         	movff	eval_poly@d,??_eval_poly
 18543  00317C  C08C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 18544  003180  5026               	movf	?___wmul,w,c
 18545  003182  262F               	addwf	??_eval_poly,f,c
 18546  003184  5027               	movf	?___wmul+1,w,c
 18547  003186  2230               	addwfc	??_eval_poly+1,f,c
 18548  003188  C02F  FFF6         	movff	??_eval_poly,tblptrl
 18549  00318C  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 18550  003190                     	if	0	;tblptru may be non-zero
 18551  003190                     	endif
 18552  003190                     	if	0	;tblptru may be non-zero
 18553  003190                     	endif
 18554  003190  0009               	tblrd		*+
 18555  003192  CFF5 F08F          	movff	tablat,eval_poly@res
 18556  003196  0009               	tblrd		*+
 18557  003198  CFF5 F090          	movff	tablat,eval_poly@res+1
 18558  00319C  000A               	tblrd		*-
 18559  00319E  CFF5 F091          	movff	tablat,eval_poly@res+2
 18560  0031A2  D03F               	goto	l2486
 18561  0031A4  C08F  F069         	movff	eval_poly@res,___ftmul@f2
 18562  0031A8  C090  F06A         	movff	eval_poly@res+1,___ftmul@f2+1
 18563  0031AC  C091  F06B         	movff	eval_poly@res+2,___ftmul@f2+2
 18564  0031B0  C088  F066         	movff	eval_poly@x,___ftmul@f1
 18565  0031B4  C089  F067         	movff	eval_poly@x+1,___ftmul@f1+1
 18566  0031B8  C08A  F068         	movff	eval_poly@x+2,___ftmul@f1+2
 18567  0031BC  EC6D  F016         	call	___ftmul	;wreg free
 18568  0031C0  C066  F07C         	movff	?___ftmul,___ftadd@f1
 18569  0031C4  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 18570  0031C8  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 18571  0031CC  0E00               	movlw	0
 18572  0031CE  6E29               	movwf	___wmul@multiplicand+1,c
 18573  0031D0  0E03               	movlw	3
 18574  0031D2  6E28               	movwf	___wmul@multiplicand,c
 18575  0031D4  0100               	movlb	0	; () banked
 18576  0031D6  078D               	decf	eval_poly@n& (0+255),f,b
 18577  0031D8  A0D8               	btfss	status,0,c
 18578  0031DA  078E               	decf	(eval_poly@n+1)& (0+255),f,b
 18579  0031DC  C08D  F026         	movff	eval_poly@n,___wmul@multiplier
 18580  0031E0  C08E  F027         	movff	eval_poly@n+1,___wmul@multiplier+1
 18581  0031E4  ECDA  F021         	call	___wmul	;wreg free
 18582  0031E8  C08B  F02F         	movff	eval_poly@d,??_eval_poly
 18583  0031EC  C08C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 18584  0031F0  5026               	movf	?___wmul,w,c
 18585  0031F2  262F               	addwf	??_eval_poly,f,c
 18586  0031F4  5027               	movf	?___wmul+1,w,c
 18587  0031F6  2230               	addwfc	??_eval_poly+1,f,c
 18588  0031F8  C02F  FFF6         	movff	??_eval_poly,tblptrl
 18589  0031FC  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 18590  003200                     	if	0	;tblptru may be non-zero
 18591  003200                     	endif
 18592  003200                     	if	0	;tblptru may be non-zero
 18593  003200                     	endif
 18594  003200  0009               	tblrd		*+
 18595  003202  CFF5 F07F          	movff	tablat,___ftadd@f2
 18596  003206  0009               	tblrd		*+
 18597  003208  CFF5 F080          	movff	tablat,___ftadd@f2+1
 18598  00320C  000A               	tblrd		*-
 18599  00320E  CFF5 F081          	movff	tablat,___ftadd@f2+2
 18600  003212  EC26  F00E         	call	___ftadd	;wreg free
 18601  003216  C07C  F08F         	movff	?___ftadd,eval_poly@res
 18602  00321A  C07D  F090         	movff	?___ftadd+1,eval_poly@res+1
 18603  00321E  C07E  F091         	movff	?___ftadd+2,eval_poly@res+2
 18604  003222                     l2486:
 18605  003222  0100               	movlb	0	; () banked
 18606  003224  518D               	movf	eval_poly@n& (0+255),w,b
 18607  003226  118E               	iorwf	(eval_poly@n+1)& (0+255),w,b
 18608  003228  A4D8               	btfss	status,2,c
 18609  00322A  D7BC               	goto	l2487
 18610                           
 18611                           ; BSR set to: 0
 18612  00322C  C08F  F088         	movff	eval_poly@res,?_eval_poly
 18613  003230  C090  F089         	movff	eval_poly@res+1,?_eval_poly+1
 18614  003234  C091  F08A         	movff	eval_poly@res+2,?_eval_poly+2
 18615                           
 18616                           ; BSR set to: 0
 18617  003238  0012               	return		;funcret
 18618  00323A                     __end_of_eval_poly:
 18619                           	opt stack 0
 18620                           tosu	equ	0xFFF
 18621                           tosh	equ	0xFFE
 18622                           tosl	equ	0xFFD
 18623                           pclath	equ	0xFFA
 18624                           tblptru	equ	0xFF8
 18625                           tblptrh	equ	0xFF7
 18626                           tblptrl	equ	0xFF6
 18627                           tablat	equ	0xFF5
 18628                           prodh	equ	0xFF4
 18629                           prodl	equ	0xFF3
 18630                           intcon	equ	0xFF2
 18631                           intcon2	equ	0xFF1
 18632                           indf0	equ	0xFEF
 18633                           postinc0	equ	0xFEE
 18634                           fsr0h	equ	0xFEA
 18635                           fsr0l	equ	0xFE9
 18636                           wreg	equ	0xFE8
 18637                           indf1	equ	0xFE7
 18638                           postdec1	equ	0xFE5
 18639                           fsr1h	equ	0xFE2
 18640                           fsr1l	equ	0xFE1
 18641                           indf2	equ	0xFDF
 18642                           postinc2	equ	0xFDE
 18643                           postdec2	equ	0xFDD
 18644                           fsr2h	equ	0xFDA
 18645                           fsr2l	equ	0xFD9
 18646                           status	equ	0xFD8
 18647                           
 18648 ;; *************** function ___wmul *****************
 18649 ;; Defined at:
 18650 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 18651 ;; Parameters:    Size  Location     Type
 18652 ;;  multiplier      2   37[COMRAM] unsigned int 
 18653 ;;  multiplicand    2   39[COMRAM] unsigned int 
 18654 ;; Auto vars:     Size  Location     Type
 18655 ;;  product         2   41[COMRAM] unsigned int 
 18656 ;; Return value:  Size  Location     Type
 18657 ;;                  2   37[COMRAM] unsigned int 
 18658 ;; Registers used:
 18659 ;;		wreg, status,2, status,0, prodl, prodh
 18660 ;; Tracked objects:
 18661 ;;		On entry : 0/0
 18662 ;;		On exit  : 0/0
 18663 ;;		Unchanged: 0/0
 18664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18665 ;;      Params:         4       0       0       0       0       0       0
 18666 ;;      Locals:         2       0       0       0       0       0       0
 18667 ;;      Temps:          0       0       0       0       0       0       0
 18668 ;;      Totals:         6       0       0       0       0       0       0
 18669 ;;Total ram usage:        6 bytes
 18670 ;; Hardware stack levels used:    1
 18671 ;; Hardware stack levels required when called:    3
 18672 ;; This function calls:
 18673 ;;		Nothing
 18674 ;; This function is called by:
 18675 ;;		_fround
 18676 ;;		_scale
 18677 ;;		_sprintf
 18678 ;;		_eval_poly
 18679 ;; This function uses a non-reentrant model
 18680 ;;
 18681                           
 18682                           	psect	text79
 18683  0043B4                     __ptext79:
 18684                           	opt stack 0
 18685  0043B4                     ___wmul:
 18686                           	opt stack 24
 18687                           
 18688                           ; BSR set to: 0
 18689                           ;incstack = 0
 18690  0043B4  5026               	movf	___wmul@multiplier,w,c
 18691  0043B6  0228               	mulwf	___wmul@multiplicand,c
 18692  0043B8  CFF3 F02A          	movff	prodl,___wmul@product
 18693  0043BC  CFF4 F02B          	movff	prodh,___wmul@product+1
 18694  0043C0  5026               	movf	___wmul@multiplier,w,c
 18695  0043C2  0229               	mulwf	___wmul@multiplicand+1,c
 18696  0043C4  50F3               	movf	prodl,w,c
 18697  0043C6  262B               	addwf	___wmul@product+1,f,c
 18698  0043C8  5027               	movf	___wmul@multiplier+1,w,c
 18699  0043CA  0228               	mulwf	___wmul@multiplicand,c
 18700  0043CC  50F3               	movf	prodl,w,c
 18701  0043CE  262B               	addwf	___wmul@product+1,f,c
 18702  0043D0  C02A  F026         	movff	___wmul@product,?___wmul
 18703  0043D4  C02B  F027         	movff	___wmul@product+1,?___wmul+1
 18704  0043D8  0012               	return	
 18705  0043DA                     __end_of___wmul:
 18706                           	opt stack 0
 18707                           tosu	equ	0xFFF
 18708                           tosh	equ	0xFFE
 18709                           tosl	equ	0xFFD
 18710                           pclath	equ	0xFFA
 18711                           tblptru	equ	0xFF8
 18712                           tblptrh	equ	0xFF7
 18713                           tblptrl	equ	0xFF6
 18714                           tablat	equ	0xFF5
 18715                           prodh	equ	0xFF4
 18716                           prodl	equ	0xFF3
 18717                           intcon	equ	0xFF2
 18718                           intcon2	equ	0xFF1
 18719                           indf0	equ	0xFEF
 18720                           postinc0	equ	0xFEE
 18721                           fsr0h	equ	0xFEA
 18722                           fsr0l	equ	0xFE9
 18723                           wreg	equ	0xFE8
 18724                           indf1	equ	0xFE7
 18725                           postdec1	equ	0xFE5
 18726                           fsr1h	equ	0xFE2
 18727                           fsr1l	equ	0xFE1
 18728                           indf2	equ	0xFDF
 18729                           postinc2	equ	0xFDE
 18730                           postdec2	equ	0xFDD
 18731                           fsr2h	equ	0xFDA
 18732                           fsr2l	equ	0xFD9
 18733                           status	equ	0xFD8
 18734                           
 18735 ;; *************** function ___ftmul *****************
 18736 ;; Defined at:
 18737 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 18738 ;; Parameters:    Size  Location     Type
 18739 ;;  f1              3    6[BANK0 ] float 
 18740 ;;  f2              3    9[BANK0 ] float 
 18741 ;; Auto vars:     Size  Location     Type
 18742 ;;  f3_as_produc    3   13[BANK0 ] unsigned um
 18743 ;;  sign            1   17[BANK0 ] unsigned char 
 18744 ;;  cntr            1   16[BANK0 ] unsigned char 
 18745 ;;  exp             1   12[BANK0 ] unsigned char 
 18746 ;; Return value:  Size  Location     Type
 18747 ;;                  3    6[BANK0 ] float 
 18748 ;; Registers used:
 18749 ;;		wreg, status,2, status,0, cstack
 18750 ;; Tracked objects:
 18751 ;;		On entry : 0/0
 18752 ;;		On exit  : 0/0
 18753 ;;		Unchanged: 0/0
 18754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18755 ;;      Params:         0       6       0       0       0       0       0
 18756 ;;      Locals:         0       6       0       0       0       0       0
 18757 ;;      Temps:          3       0       0       0       0       0       0
 18758 ;;      Totals:         3      12       0       0       0       0       0
 18759 ;;Total ram usage:       15 bytes
 18760 ;; Hardware stack levels used:    1
 18761 ;; Hardware stack levels required when called:    4
 18762 ;; This function calls:
 18763 ;;		___ftpack
 18764 ;; This function is called by:
 18765 ;;		_SampleSingleChannel
 18766 ;;		_SampleAllChannels
 18767 ;;		_fround
 18768 ;;		_scale
 18769 ;;		_sprintf
 18770 ;;		_pow
 18771 ;;		_exp
 18772 ;;		_log
 18773 ;;		_eval_poly
 18774 ;;		_CheckFlashPrecentage
 18775 ;;		_DacAnalogToDigitalSpi
 18776 ;; This function uses a non-reentrant model
 18777 ;;
 18778                           
 18779                           	psect	text80
 18780  002CDA                     __ptext80:
 18781                           	opt stack 0
 18782  002CDA                     ___ftmul:
 18783                           	opt stack 23
 18784                           
 18785                           ;incstack = 0
 18786  002CDA  C068  F02C         	movff	___ftmul@f1+2,??___ftmul
 18787  002CDE  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 18788  002CE0  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 18789  002CE2  0100               	movlb	0	; () banked
 18790  002CE4  3567               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 18791  002CE6  362C               	rlcf	??___ftmul& (0+255),f,c
 18792  002CE8  E301               	bnc	u7931
 18793  002CEA  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 18794  002CEC                     u7931:
 18795  002CEC  502C               	movf	??___ftmul,w,c
 18796  002CEE  6F6C               	movwf	___ftmul@exp& (0+255),b
 18797  002CF0  516C               	movf	___ftmul@exp& (0+255),w,b
 18798  002CF2  A4D8               	btfss	status,2,c
 18799  002CF4  D007               	goto	l2066
 18800                           
 18801                           ; BSR set to: 0
 18802  002CF6  0E00               	movlw	0
 18803  002CF8  6F66               	movwf	?___ftmul& (0+255),b
 18804  002CFA  0E00               	movlw	0
 18805  002CFC  6F67               	movwf	(?___ftmul+1)& (0+255),b
 18806  002CFE  0E00               	movlw	0
 18807  002D00  6F68               	movwf	(?___ftmul+2)& (0+255),b
 18808                           
 18809                           ; BSR set to: 0
 18810  002D02  0012               	return	
 18811  002D04                     l2066:
 18812                           
 18813                           ; BSR set to: 0
 18814                           
 18815                           ; BSR set to: 0
 18816  002D04  C06B  F02C         	movff	___ftmul@f2+2,??___ftmul
 18817  002D08  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 18818  002D0A  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 18819  002D0C  356A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 18820  002D0E  362C               	rlcf	??___ftmul& (0+255),f,c
 18821  002D10  E301               	bnc	u7951
 18822  002D12  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 18823  002D14                     u7951:
 18824  002D14  502C               	movf	??___ftmul,w,c
 18825  002D16  6F71               	movwf	___ftmul@sign& (0+255),b
 18826  002D18  5171               	movf	___ftmul@sign& (0+255),w,b
 18827  002D1A  A4D8               	btfss	status,2,c
 18828  002D1C  D007               	goto	l2068
 18829                           
 18830                           ; BSR set to: 0
 18831  002D1E  0E00               	movlw	0
 18832  002D20  6F66               	movwf	?___ftmul& (0+255),b
 18833  002D22  0E00               	movlw	0
 18834  002D24  6F67               	movwf	(?___ftmul+1)& (0+255),b
 18835  002D26  0E00               	movlw	0
 18836  002D28  6F68               	movwf	(?___ftmul+2)& (0+255),b
 18837                           
 18838                           ; BSR set to: 0
 18839  002D2A  0012               	return	
 18840  002D2C                     l2068:
 18841                           
 18842                           ; BSR set to: 0
 18843                           
 18844                           ; BSR set to: 0
 18845  002D2C  5171               	movf	___ftmul@sign& (0+255),w,b
 18846  002D2E  0F7B               	addlw	123
 18847  002D30  276C               	addwf	___ftmul@exp& (0+255),f,b
 18848                           
 18849                           ; BSR set to: 0
 18850  002D32  C068  F071         	movff	___ftmul@f1+2,___ftmul@sign
 18851  002D36  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 18852  002D38  1B71               	xorwf	___ftmul@sign& (0+255),f,b
 18853  002D3A  0E80               	movlw	128
 18854  002D3C  1771               	andwf	___ftmul@sign& (0+255),f,b
 18855                           
 18856                           ; BSR set to: 0
 18857  002D3E  8F67               	bsf	(___ftmul@f1+1)& (0+255),7,b
 18858                           
 18859                           ; BSR set to: 0
 18860  002D40  8F6A               	bsf	(___ftmul@f2+1)& (0+255),7,b
 18861                           
 18862                           ; BSR set to: 0
 18863  002D42  0EFF               	movlw	255
 18864  002D44  1769               	andwf	___ftmul@f2& (0+255),f,b
 18865  002D46  0EFF               	movlw	255
 18866  002D48  176A               	andwf	(___ftmul@f2+1)& (0+255),f,b
 18867  002D4A  0E00               	movlw	0
 18868  002D4C  176B               	andwf	(___ftmul@f2+2)& (0+255),f,b
 18869                           
 18870                           ; BSR set to: 0
 18871  002D4E  0E00               	movlw	0
 18872  002D50  6F6D               	movwf	___ftmul@f3_as_product& (0+255),b
 18873  002D52  0E00               	movlw	0
 18874  002D54  6F6E               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 18875  002D56  0E00               	movlw	0
 18876  002D58  6F6F               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 18877                           
 18878                           ; BSR set to: 0
 18879  002D5A  0E07               	movlw	7
 18880  002D5C  6F70               	movwf	___ftmul@cntr& (0+255),b
 18881  002D5E                     
 18882                           ; BSR set to: 0
 18883                           
 18884                           ; BSR set to: 0
 18885  002D5E  A166               	btfss	___ftmul@f1& (0+255),0,b
 18886  002D60  D006               	goto	l2070
 18887                           
 18888                           ; BSR set to: 0
 18889  002D62  5169               	movf	___ftmul@f2& (0+255),w,b
 18890  002D64  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 18891  002D66  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 18892  002D68  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 18893  002D6A  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 18894  002D6C  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 18895  002D6E                     l2070:
 18896                           
 18897                           ; BSR set to: 0
 18898                           
 18899                           ; BSR set to: 0
 18900  002D6E  90D8               	bcf	status,0,c
 18901  002D70  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 18902  002D72  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 18903  002D74  3366               	rrcf	___ftmul@f1& (0+255),f,b
 18904  002D76  90D8               	bcf	status,0,c
 18905  002D78  3769               	rlcf	___ftmul@f2& (0+255),f,b
 18906  002D7A  376A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 18907  002D7C  376B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 18908                           
 18909                           ; BSR set to: 0
 18910  002D7E  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 18911  002D80  D7EE               	goto	l2069
 18912                           
 18913                           ; BSR set to: 0
 18914                           
 18915                           ; BSR set to: 0
 18916  002D82  0E09               	movlw	9
 18917  002D84  6F70               	movwf	___ftmul@cntr& (0+255),b
 18918  002D86                     
 18919                           ; BSR set to: 0
 18920                           
 18921                           ; BSR set to: 0
 18922  002D86  A166               	btfss	___ftmul@f1& (0+255),0,b
 18923  002D88  D006               	goto	l2073
 18924                           
 18925                           ; BSR set to: 0
 18926  002D8A  5169               	movf	___ftmul@f2& (0+255),w,b
 18927  002D8C  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 18928  002D8E  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 18929  002D90  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 18930  002D92  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 18931  002D94  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 18932  002D96                     l2073:
 18933                           
 18934                           ; BSR set to: 0
 18935                           
 18936                           ; BSR set to: 0
 18937  002D96  90D8               	bcf	status,0,c
 18938  002D98  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 18939  002D9A  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 18940  002D9C  3366               	rrcf	___ftmul@f1& (0+255),f,b
 18941  002D9E  90D8               	bcf	status,0,c
 18942  002DA0  336F               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 18943  002DA2  336E               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 18944  002DA4  336D               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 18945                           
 18946                           ; BSR set to: 0
 18947  002DA6  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 18948  002DA8  D7EE               	goto	l2072
 18949                           
 18950                           ; BSR set to: 0
 18951                           
 18952                           ; BSR set to: 0
 18953  002DAA  C06D  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 18954  002DAE  C06E  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 18955  002DB2  C06F  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 18956  002DB6  C06C  F01B         	movff	___ftmul@exp,___ftpack@exp
 18957  002DBA  C071  F01C         	movff	___ftmul@sign,___ftpack@sign
 18958  002DBE  EC3F  F01A         	call	___ftpack	;wreg free
 18959  002DC2  C018  F066         	movff	?___ftpack,?___ftmul
 18960  002DC6  C019  F067         	movff	?___ftpack+1,?___ftmul+1
 18961  002DCA  C01A  F068         	movff	?___ftpack+2,?___ftmul+2
 18962  002DCE  0012               	return	
 18963  002DD0                     __end_of___ftmul:
 18964                           	opt stack 0
 18965                           tosu	equ	0xFFF
 18966                           tosh	equ	0xFFE
 18967                           tosl	equ	0xFFD
 18968                           pclath	equ	0xFFA
 18969                           tblptru	equ	0xFF8
 18970                           tblptrh	equ	0xFF7
 18971                           tblptrl	equ	0xFF6
 18972                           tablat	equ	0xFF5
 18973                           prodh	equ	0xFF4
 18974                           prodl	equ	0xFF3
 18975                           intcon	equ	0xFF2
 18976                           intcon2	equ	0xFF1
 18977                           indf0	equ	0xFEF
 18978                           postinc0	equ	0xFEE
 18979                           fsr0h	equ	0xFEA
 18980                           fsr0l	equ	0xFE9
 18981                           wreg	equ	0xFE8
 18982                           indf1	equ	0xFE7
 18983                           postdec1	equ	0xFE5
 18984                           fsr1h	equ	0xFE2
 18985                           fsr1l	equ	0xFE1
 18986                           indf2	equ	0xFDF
 18987                           postinc2	equ	0xFDE
 18988                           postdec2	equ	0xFDD
 18989                           fsr2h	equ	0xFDA
 18990                           fsr2l	equ	0xFD9
 18991                           status	equ	0xFD8
 18992                           
 18993 ;; *************** function ___ftsub *****************
 18994 ;; Defined at:
 18995 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 18996 ;; Parameters:    Size  Location     Type
 18997 ;;  f1              3   40[BANK0 ] float 
 18998 ;;  f2              3   43[BANK0 ] float 
 18999 ;; Auto vars:     Size  Location     Type
 19000 ;;		None
 19001 ;; Return value:  Size  Location     Type
 19002 ;;                  3   40[BANK0 ] float 
 19003 ;; Registers used:
 19004 ;;		wreg, status,2, status,0, cstack
 19005 ;; Tracked objects:
 19006 ;;		On entry : 0/0
 19007 ;;		On exit  : 0/0
 19008 ;;		Unchanged: 0/0
 19009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19010 ;;      Params:         0       6       0       0       0       0       0
 19011 ;;      Locals:         0       0       0       0       0       0       0
 19012 ;;      Temps:          0       0       0       0       0       0       0
 19013 ;;      Totals:         0       6       0       0       0       0       0
 19014 ;;Total ram usage:        6 bytes
 19015 ;; Hardware stack levels used:    1
 19016 ;; Hardware stack levels required when called:    5
 19017 ;; This function calls:
 19018 ;;		___ftadd
 19019 ;; This function is called by:
 19020 ;;		_sprintf
 19021 ;;		_exp
 19022 ;; This function uses a non-reentrant model
 19023 ;;
 19024                           
 19025                           	psect	text81
 19026  004058                     __ptext81:
 19027                           	opt stack 0
 19028  004058                     ___ftsub:
 19029                           	opt stack 23
 19030                           
 19031                           ;incstack = 0
 19032  004058  0100               	movlb	0	; () banked
 19033  00405A  518B               	movf	___ftsub@f2& (0+255),w,b
 19034  00405C  118C               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 19035  00405E  118D               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 19036  004060  B4D8               	btfsc	status,2,c
 19037  004062  D006               	goto	l2083
 19038                           
 19039                           ; BSR set to: 0
 19040  004064  0E00               	movlw	0
 19041  004066  1B8B               	xorwf	___ftsub@f2& (0+255),f,b
 19042  004068  0E00               	movlw	0
 19043  00406A  1B8C               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 19044  00406C  0E80               	movlw	128
 19045  00406E  1B8D               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 19046  004070                     l2083:
 19047                           
 19048                           ; BSR set to: 0
 19049                           
 19050                           ; BSR set to: 0
 19051  004070  C088  F07C         	movff	___ftsub@f1,___ftadd@f1
 19052  004074  C089  F07D         	movff	___ftsub@f1+1,___ftadd@f1+1
 19053  004078  C08A  F07E         	movff	___ftsub@f1+2,___ftadd@f1+2
 19054  00407C  C08B  F07F         	movff	___ftsub@f2,___ftadd@f2
 19055  004080  C08C  F080         	movff	___ftsub@f2+1,___ftadd@f2+1
 19056  004084  C08D  F081         	movff	___ftsub@f2+2,___ftadd@f2+2
 19057  004088  EC26  F00E         	call	___ftadd	;wreg free
 19058  00408C  C07C  F088         	movff	?___ftadd,?___ftsub
 19059  004090  C07D  F089         	movff	?___ftadd+1,?___ftsub+1
 19060  004094  C07E  F08A         	movff	?___ftadd+2,?___ftsub+2
 19061  004098  0012               	return	
 19062  00409A                     __end_of___ftsub:
 19063                           	opt stack 0
 19064                           tosu	equ	0xFFF
 19065                           tosh	equ	0xFFE
 19066                           tosl	equ	0xFFD
 19067                           pclath	equ	0xFFA
 19068                           tblptru	equ	0xFF8
 19069                           tblptrh	equ	0xFF7
 19070                           tblptrl	equ	0xFF6
 19071                           tablat	equ	0xFF5
 19072                           prodh	equ	0xFF4
 19073                           prodl	equ	0xFF3
 19074                           intcon	equ	0xFF2
 19075                           intcon2	equ	0xFF1
 19076                           indf0	equ	0xFEF
 19077                           postinc0	equ	0xFEE
 19078                           fsr0h	equ	0xFEA
 19079                           fsr0l	equ	0xFE9
 19080                           wreg	equ	0xFE8
 19081                           indf1	equ	0xFE7
 19082                           postdec1	equ	0xFE5
 19083                           fsr1h	equ	0xFE2
 19084                           fsr1l	equ	0xFE1
 19085                           indf2	equ	0xFDF
 19086                           postinc2	equ	0xFDE
 19087                           postdec2	equ	0xFDD
 19088                           fsr2h	equ	0xFDA
 19089                           fsr2l	equ	0xFD9
 19090                           status	equ	0xFD8
 19091                           
 19092 ;; *************** function ___ftadd *****************
 19093 ;; Defined at:
 19094 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 19095 ;; Parameters:    Size  Location     Type
 19096 ;;  f1              3   28[BANK0 ] float 
 19097 ;;  f2              3   31[BANK0 ] float 
 19098 ;; Auto vars:     Size  Location     Type
 19099 ;;  exp1            1   39[BANK0 ] unsigned char 
 19100 ;;  exp2            1   38[BANK0 ] unsigned char 
 19101 ;;  sign            1   37[BANK0 ] unsigned char 
 19102 ;; Return value:  Size  Location     Type
 19103 ;;                  3   28[BANK0 ] float 
 19104 ;; Registers used:
 19105 ;;		wreg, status,2, status,0, cstack
 19106 ;; Tracked objects:
 19107 ;;		On entry : 0/0
 19108 ;;		On exit  : 0/0
 19109 ;;		Unchanged: 0/0
 19110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19111 ;;      Params:         0       6       0       0       0       0       0
 19112 ;;      Locals:         0       3       0       0       0       0       0
 19113 ;;      Temps:          0       3       0       0       0       0       0
 19114 ;;      Totals:         0      12       0       0       0       0       0
 19115 ;;Total ram usage:       12 bytes
 19116 ;; Hardware stack levels used:    1
 19117 ;; Hardware stack levels required when called:    4
 19118 ;; This function calls:
 19119 ;;		___ftpack
 19120 ;; This function is called by:
 19121 ;;		_sprintf
 19122 ;;		___ftsub
 19123 ;;		_floor
 19124 ;;		_log
 19125 ;;		_eval_poly
 19126 ;;		_DacAnalogToDigitalSpi
 19127 ;; This function uses a non-reentrant model
 19128 ;;
 19129                           
 19130                           	psect	text82
 19131  001C4C                     __ptext82:
 19132                           	opt stack 0
 19133  001C4C                     ___ftadd:
 19134                           	opt stack 23
 19135                           
 19136                           ;incstack = 0
 19137  001C4C  C07E  F082         	movff	___ftadd@f1+2,??___ftadd
 19138  001C50  0100               	movlb	0	; () banked
 19139  001C52  6B83               	clrf	(??___ftadd+1)& (0+255),b
 19140  001C54  6B84               	clrf	(??___ftadd+2)& (0+255),b
 19141  001C56  357D               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 19142  001C58  3782               	rlcf	??___ftadd& (0+255),f,b
 19143  001C5A  E301               	bnc	u7721
 19144  001C5C  8183               	bsf	(??___ftadd+1)& (0+255),0,b
 19145  001C5E                     u7721:
 19146  001C5E  5182               	movf	??___ftadd& (0+255),w,b
 19147  001C60  6F87               	movwf	___ftadd@exp1& (0+255),b
 19148  001C62  C081  F082         	movff	___ftadd@f2+2,??___ftadd
 19149  001C66  6B83               	clrf	(??___ftadd+1)& (0+255),b
 19150  001C68  6B84               	clrf	(??___ftadd+2)& (0+255),b
 19151  001C6A  3580               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 19152  001C6C  3782               	rlcf	??___ftadd& (0+255),f,b
 19153  001C6E  E301               	bnc	u7731
 19154  001C70  8183               	bsf	(??___ftadd+1)& (0+255),0,b
 19155  001C72                     u7731:
 19156  001C72  5182               	movf	??___ftadd& (0+255),w,b
 19157  001C74  6F86               	movwf	___ftadd@exp2& (0+255),b
 19158                           
 19159                           ; BSR set to: 0
 19160  001C76  5187               	movf	___ftadd@exp1& (0+255),w,b
 19161  001C78  B4D8               	btfsc	status,2,c
 19162  001C7A  D00B               	goto	u7760
 19163                           
 19164                           ; BSR set to: 0
 19165  001C7C  5186               	movf	___ftadd@exp2& (0+255),w,b
 19166  001C7E  5D87               	subwf	___ftadd@exp1& (0+255),w,b
 19167  001C80  B0D8               	btfsc	status,0,c
 19168  001C82  D00E               	goto	l2001
 19169                           
 19170                           ; BSR set to: 0
 19171  001C84  5187               	movf	___ftadd@exp1& (0+255),w,b
 19172  001C86  0800               	sublw	0
 19173  001C88  2586               	addwf	___ftadd@exp2& (0+255),w,b
 19174  001C8A  6F82               	movwf	??___ftadd& (0+255),b
 19175  001C8C  0E18               	movlw	24
 19176  001C8E  6582               	cpfsgt	??___ftadd& (0+255),b
 19177  001C90  D007               	goto	l2001
 19178  001C92                     u7760:
 19179                           
 19180                           ; BSR set to: 0
 19181  001C92  C07F  F07C         	movff	___ftadd@f2,?___ftadd
 19182  001C96  C080  F07D         	movff	___ftadd@f2+1,?___ftadd+1
 19183  001C9A  C081  F07E         	movff	___ftadd@f2+2,?___ftadd+2
 19184  001C9E  0012               	return	
 19185  001CA0                     l2001:
 19186                           
 19187                           ; BSR set to: 0
 19188                           
 19189                           ; BSR set to: 0
 19190  001CA0  5186               	movf	___ftadd@exp2& (0+255),w,b
 19191  001CA2  B4D8               	btfsc	status,2,c
 19192  001CA4  D00B               	goto	u7790
 19193                           
 19194                           ; BSR set to: 0
 19195  001CA6  5187               	movf	___ftadd@exp1& (0+255),w,b
 19196  001CA8  5D86               	subwf	___ftadd@exp2& (0+255),w,b
 19197  001CAA  B0D8               	btfsc	status,0,c
 19198  001CAC  D00E               	goto	l2005
 19199                           
 19200                           ; BSR set to: 0
 19201  001CAE  5186               	movf	___ftadd@exp2& (0+255),w,b
 19202  001CB0  0800               	sublw	0
 19203  001CB2  2587               	addwf	___ftadd@exp1& (0+255),w,b
 19204  001CB4  6F82               	movwf	??___ftadd& (0+255),b
 19205  001CB6  0E18               	movlw	24
 19206  001CB8  6582               	cpfsgt	??___ftadd& (0+255),b
 19207  001CBA  D007               	goto	l2005
 19208  001CBC                     u7790:
 19209                           
 19210                           ; BSR set to: 0
 19211  001CBC  C07C  F07C         	movff	___ftadd@f1,?___ftadd
 19212  001CC0  C07D  F07D         	movff	___ftadd@f1+1,?___ftadd+1
 19213  001CC4  C07E  F07E         	movff	___ftadd@f1+2,?___ftadd+2
 19214  001CC8  0012               	return	
 19215  001CCA                     l2005:
 19216                           
 19217                           ; BSR set to: 0
 19218                           
 19219                           ; BSR set to: 0
 19220  001CCA  0E06               	movlw	6
 19221  001CCC  6F85               	movwf	___ftadd@sign& (0+255),b
 19222                           
 19223                           ; BSR set to: 0
 19224  001CCE  BF7E               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 19225                           
 19226                           ; BSR set to: 0
 19227  001CD0  8F85               	bsf	___ftadd@sign& (0+255),7,b
 19228                           
 19229                           ; BSR set to: 0
 19230                           
 19231                           ; BSR set to: 0
 19232  001CD2  BF81               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 19233                           
 19234                           ; BSR set to: 0
 19235  001CD4  8D85               	bsf	___ftadd@sign& (0+255),6,b
 19236                           
 19237                           ; BSR set to: 0
 19238  001CD6  8F7D               	bsf	(___ftadd@f1+1)& (0+255),7,b
 19239                           
 19240                           ; BSR set to: 0
 19241  001CD8  0EFF               	movlw	255
 19242  001CDA  177C               	andwf	___ftadd@f1& (0+255),f,b
 19243  001CDC  0EFF               	movlw	255
 19244  001CDE  177D               	andwf	(___ftadd@f1+1)& (0+255),f,b
 19245  001CE0  0E00               	movlw	0
 19246  001CE2  177E               	andwf	(___ftadd@f1+2)& (0+255),f,b
 19247  001CE4  8F80               	bsf	(___ftadd@f2+1)& (0+255),7,b
 19248                           
 19249                           ; BSR set to: 0
 19250  001CE6  0EFF               	movlw	255
 19251  001CE8  177F               	andwf	___ftadd@f2& (0+255),f,b
 19252  001CEA  0EFF               	movlw	255
 19253  001CEC  1780               	andwf	(___ftadd@f2+1)& (0+255),f,b
 19254  001CEE  0E00               	movlw	0
 19255  001CF0  1781               	andwf	(___ftadd@f2+2)& (0+255),f,b
 19256                           
 19257                           ; BSR set to: 0
 19258  001CF2  5186               	movf	___ftadd@exp2& (0+255),w,b
 19259  001CF4  5D87               	subwf	___ftadd@exp1& (0+255),w,b
 19260  001CF6  B0D8               	btfsc	status,0,c
 19261  001CF8  D01B               	goto	l2010
 19262  001CFA                     u7820:
 19263                           
 19264                           ; BSR set to: 0
 19265                           
 19266                           ; BSR set to: 0
 19267  001CFA  90D8               	bcf	status,0,c
 19268  001CFC  377F               	rlcf	___ftadd@f2& (0+255),f,b
 19269  001CFE  3780               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 19270  001D00  3781               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 19271  001D02  0786               	decf	___ftadd@exp2& (0+255),f,b
 19272                           
 19273                           ; BSR set to: 0
 19274  001D04  5187               	movf	___ftadd@exp1& (0+255),w,b
 19275  001D06  1986               	xorwf	___ftadd@exp2& (0+255),w,b
 19276  001D08  B4D8               	btfsc	status,2,c
 19277  001D0A  D00D               	goto	l2015
 19278                           
 19279                           ; BSR set to: 0
 19280  001D0C  0785               	decf	___ftadd@sign& (0+255),f,b
 19281  001D0E  C085  F082         	movff	___ftadd@sign,??___ftadd
 19282  001D12  0E07               	movlw	7
 19283  001D14  1782               	andwf	??___ftadd& (0+255),f,b
 19284  001D16  B4D8               	btfsc	status,2,c
 19285  001D18  D006               	goto	l2015
 19286  001D1A  D7EF               	goto	u7820
 19287  001D1C                     
 19288                           ; BSR set to: 0
 19289                           
 19290                           ; BSR set to: 0
 19291  001D1C  90D8               	bcf	status,0,c
 19292  001D1E  337E               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 19293  001D20  337D               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 19294  001D22  337C               	rrcf	___ftadd@f1& (0+255),f,b
 19295  001D24  2B87               	incf	___ftadd@exp1& (0+255),f,b
 19296  001D26                     l2015:
 19297                           
 19298                           ; BSR set to: 0
 19299                           
 19300                           ; BSR set to: 0
 19301  001D26  5186               	movf	___ftadd@exp2& (0+255),w,b
 19302  001D28  1987               	xorwf	___ftadd@exp1& (0+255),w,b
 19303  001D2A  B4D8               	btfsc	status,2,c
 19304  001D2C  D01F               	goto	u7890
 19305  001D2E  D7F6               	goto	l2016
 19306  001D30                     l2010:
 19307                           
 19308                           ; BSR set to: 0
 19309                           
 19310                           ; BSR set to: 0
 19311  001D30  5187               	movf	___ftadd@exp1& (0+255),w,b
 19312  001D32  5D86               	subwf	___ftadd@exp2& (0+255),w,b
 19313  001D34  B0D8               	btfsc	status,0,c
 19314  001D36  D01A               	goto	u7890
 19315  001D38                     u7860:
 19316                           
 19317                           ; BSR set to: 0
 19318                           
 19319                           ; BSR set to: 0
 19320  001D38  90D8               	bcf	status,0,c
 19321  001D3A  377C               	rlcf	___ftadd@f1& (0+255),f,b
 19322  001D3C  377D               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 19323  001D3E  377E               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 19324  001D40  0787               	decf	___ftadd@exp1& (0+255),f,b
 19325                           
 19326                           ; BSR set to: 0
 19327  001D42  5187               	movf	___ftadd@exp1& (0+255),w,b
 19328  001D44  1986               	xorwf	___ftadd@exp2& (0+255),w,b
 19329  001D46  B4D8               	btfsc	status,2,c
 19330  001D48  D00D               	goto	l2024
 19331                           
 19332                           ; BSR set to: 0
 19333  001D4A  0785               	decf	___ftadd@sign& (0+255),f,b
 19334  001D4C  C085  F082         	movff	___ftadd@sign,??___ftadd
 19335  001D50  0E07               	movlw	7
 19336  001D52  1782               	andwf	??___ftadd& (0+255),f,b
 19337  001D54  B4D8               	btfsc	status,2,c
 19338  001D56  D006               	goto	l2024
 19339  001D58  D7EF               	goto	u7860
 19340  001D5A                     
 19341                           ; BSR set to: 0
 19342                           
 19343                           ; BSR set to: 0
 19344  001D5A  90D8               	bcf	status,0,c
 19345  001D5C  3381               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 19346  001D5E  3380               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 19347  001D60  337F               	rrcf	___ftadd@f2& (0+255),f,b
 19348  001D62  2B86               	incf	___ftadd@exp2& (0+255),f,b
 19349  001D64                     l2024:
 19350                           
 19351                           ; BSR set to: 0
 19352                           
 19353                           ; BSR set to: 0
 19354  001D64  5186               	movf	___ftadd@exp2& (0+255),w,b
 19355  001D66  1987               	xorwf	___ftadd@exp1& (0+255),w,b
 19356  001D68  A4D8               	btfss	status,2,c
 19357  001D6A  D7F7               	goto	l2025
 19358  001D6C                     u7890:
 19359                           
 19360                           ; BSR set to: 0
 19361                           
 19362                           ; BSR set to: 0
 19363                           
 19364                           ; BSR set to: 0
 19365  001D6C  AF85               	btfss	___ftadd@sign& (0+255),7,b
 19366  001D6E  D00C               	goto	l2027
 19367                           
 19368                           ; BSR set to: 0
 19369  001D70  0EFF               	movlw	255
 19370  001D72  1B7C               	xorwf	___ftadd@f1& (0+255),f,b
 19371  001D74  0EFF               	movlw	255
 19372  001D76  1B7D               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 19373  001D78  0EFF               	movlw	255
 19374  001D7A  1B7E               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 19375  001D7C  0E01               	movlw	1
 19376  001D7E  277C               	addwf	___ftadd@f1& (0+255),f,b
 19377  001D80  0E00               	movlw	0
 19378  001D82  237D               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 19379  001D84  0E00               	movlw	0
 19380  001D86  237E               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 19381  001D88                     l2027:
 19382                           
 19383                           ; BSR set to: 0
 19384  001D88  AD85               	btfss	___ftadd@sign& (0+255),6,b
 19385  001D8A  D00C               	goto	l2028
 19386                           
 19387                           ; BSR set to: 0
 19388  001D8C  0EFF               	movlw	255
 19389  001D8E  1B7F               	xorwf	___ftadd@f2& (0+255),f,b
 19390  001D90  0EFF               	movlw	255
 19391  001D92  1B80               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 19392  001D94  0EFF               	movlw	255
 19393  001D96  1B81               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 19394  001D98  0E01               	movlw	1
 19395  001D9A  277F               	addwf	___ftadd@f2& (0+255),f,b
 19396  001D9C  0E00               	movlw	0
 19397  001D9E  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19398  001DA0  0E00               	movlw	0
 19399  001DA2  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19400  001DA4                     l2028:
 19401                           
 19402                           ; BSR set to: 0
 19403                           
 19404                           ; BSR set to: 0
 19405  001DA4  0E00               	movlw	0
 19406  001DA6  6F85               	movwf	___ftadd@sign& (0+255),b
 19407                           
 19408                           ; BSR set to: 0
 19409  001DA8  517C               	movf	___ftadd@f1& (0+255),w,b
 19410  001DAA  277F               	addwf	___ftadd@f2& (0+255),f,b
 19411  001DAC  517D               	movf	(___ftadd@f1+1)& (0+255),w,b
 19412  001DAE  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19413  001DB0  517E               	movf	(___ftadd@f1+2)& (0+255),w,b
 19414  001DB2  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19415                           
 19416                           ; BSR set to: 0
 19417  001DB4  AF81               	btfss	(___ftadd@f2+2)& (0+255),7,b
 19418  001DB6  D00E               	goto	l2029
 19419                           
 19420                           ; BSR set to: 0
 19421  001DB8  0EFF               	movlw	255
 19422  001DBA  1B7F               	xorwf	___ftadd@f2& (0+255),f,b
 19423  001DBC  0EFF               	movlw	255
 19424  001DBE  1B80               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 19425  001DC0  0EFF               	movlw	255
 19426  001DC2  1B81               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 19427  001DC4  0E01               	movlw	1
 19428  001DC6  277F               	addwf	___ftadd@f2& (0+255),f,b
 19429  001DC8  0E00               	movlw	0
 19430  001DCA  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19431  001DCC  0E00               	movlw	0
 19432  001DCE  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19433                           
 19434                           ; BSR set to: 0
 19435  001DD0  0E01               	movlw	1
 19436  001DD2  6F85               	movwf	___ftadd@sign& (0+255),b
 19437  001DD4                     l2029:
 19438                           
 19439                           ; BSR set to: 0
 19440                           
 19441                           ; BSR set to: 0
 19442  001DD4  C07F  F018         	movff	___ftadd@f2,___ftpack@arg
 19443  001DD8  C080  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 19444  001DDC  C081  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 19445  001DE0  C087  F01B         	movff	___ftadd@exp1,___ftpack@exp
 19446  001DE4  C085  F01C         	movff	___ftadd@sign,___ftpack@sign
 19447  001DE8  EC3F  F01A         	call	___ftpack	;wreg free
 19448  001DEC  C018  F07C         	movff	?___ftpack,?___ftadd
 19449  001DF0  C019  F07D         	movff	?___ftpack+1,?___ftadd+1
 19450  001DF4  C01A  F07E         	movff	?___ftpack+2,?___ftadd+2
 19451  001DF8  0012               	return	
 19452  001DFA                     __end_of___ftadd:
 19453                           	opt stack 0
 19454                           tosu	equ	0xFFF
 19455                           tosh	equ	0xFFE
 19456                           tosl	equ	0xFFD
 19457                           pclath	equ	0xFFA
 19458                           tblptru	equ	0xFF8
 19459                           tblptrh	equ	0xFF7
 19460                           tblptrl	equ	0xFF6
 19461                           tablat	equ	0xFF5
 19462                           prodh	equ	0xFF4
 19463                           prodl	equ	0xFF3
 19464                           intcon	equ	0xFF2
 19465                           intcon2	equ	0xFF1
 19466                           indf0	equ	0xFEF
 19467                           postinc0	equ	0xFEE
 19468                           fsr0h	equ	0xFEA
 19469                           fsr0l	equ	0xFE9
 19470                           wreg	equ	0xFE8
 19471                           indf1	equ	0xFE7
 19472                           postdec1	equ	0xFE5
 19473                           fsr1h	equ	0xFE2
 19474                           fsr1l	equ	0xFE1
 19475                           indf2	equ	0xFDF
 19476                           postinc2	equ	0xFDE
 19477                           postdec2	equ	0xFDD
 19478                           fsr2h	equ	0xFDA
 19479                           fsr2l	equ	0xFD9
 19480                           status	equ	0xFD8
 19481                           
 19482 ;; *************** function ___ftneg *****************
 19483 ;; Defined at:
 19484 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 19485 ;; Parameters:    Size  Location     Type
 19486 ;;  f1              3   23[COMRAM] float 
 19487 ;; Auto vars:     Size  Location     Type
 19488 ;;		None
 19489 ;; Return value:  Size  Location     Type
 19490 ;;                  3   23[COMRAM] float 
 19491 ;; Registers used:
 19492 ;;		wreg, status,2, status,0
 19493 ;; Tracked objects:
 19494 ;;		On entry : 0/0
 19495 ;;		On exit  : 0/0
 19496 ;;		Unchanged: 0/0
 19497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19498 ;;      Params:         3       0       0       0       0       0       0
 19499 ;;      Locals:         0       0       0       0       0       0       0
 19500 ;;      Temps:          0       0       0       0       0       0       0
 19501 ;;      Totals:         3       0       0       0       0       0       0
 19502 ;;Total ram usage:        3 bytes
 19503 ;; Hardware stack levels used:    1
 19504 ;; Hardware stack levels required when called:    3
 19505 ;; This function calls:
 19506 ;;		Nothing
 19507 ;; This function is called by:
 19508 ;;		_sprintf
 19509 ;;		_pow
 19510 ;;		_exp
 19511 ;; This function uses a non-reentrant model
 19512 ;;
 19513                           
 19514                           	psect	text83
 19515  004422                     __ptext83:
 19516                           	opt stack 0
 19517  004422                     ___ftneg:
 19518                           	opt stack 25
 19519                           
 19520                           ;incstack = 0
 19521  004422  5018               	movf	___ftneg@f1,w,c
 19522  004424  1019               	iorwf	___ftneg@f1+1,w,c
 19523  004426  101A               	iorwf	___ftneg@f1+2,w,c
 19524  004428  B4D8               	btfsc	status,2,c
 19525  00442A  D006               	goto	l2077
 19526  00442C  0E00               	movlw	0
 19527  00442E  1A18               	xorwf	___ftneg@f1,f,c
 19528  004430  0E00               	movlw	0
 19529  004432  1A19               	xorwf	___ftneg@f1+1,f,c
 19530  004434  0E80               	movlw	128
 19531  004436  1A1A               	xorwf	___ftneg@f1+2,f,c
 19532  004438                     l2077:
 19533  004438  C018  F018         	movff	___ftneg@f1,?___ftneg
 19534  00443C  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 19535  004440  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 19536  004444  0012               	return		;funcret
 19537  004446                     __end_of___ftneg:
 19538                           	opt stack 0
 19539                           tosu	equ	0xFFF
 19540                           tosh	equ	0xFFE
 19541                           tosl	equ	0xFFD
 19542                           pclath	equ	0xFFA
 19543                           tblptru	equ	0xFF8
 19544                           tblptrh	equ	0xFF7
 19545                           tblptrl	equ	0xFF6
 19546                           tablat	equ	0xFF5
 19547                           prodh	equ	0xFF4
 19548                           prodl	equ	0xFF3
 19549                           intcon	equ	0xFF2
 19550                           intcon2	equ	0xFF1
 19551                           indf0	equ	0xFEF
 19552                           postinc0	equ	0xFEE
 19553                           fsr0h	equ	0xFEA
 19554                           fsr0l	equ	0xFE9
 19555                           wreg	equ	0xFE8
 19556                           indf1	equ	0xFE7
 19557                           postdec1	equ	0xFE5
 19558                           fsr1h	equ	0xFE2
 19559                           fsr1l	equ	0xFE1
 19560                           indf2	equ	0xFDF
 19561                           postinc2	equ	0xFDE
 19562                           postdec2	equ	0xFDD
 19563                           fsr2h	equ	0xFDA
 19564                           fsr2l	equ	0xFD9
 19565                           status	equ	0xFD8
 19566                           
 19567 ;; *************** function ___ftdiv *****************
 19568 ;; Defined at:
 19569 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 19570 ;; Parameters:    Size  Location     Type
 19571 ;;  f1              3   34[COMRAM] float 
 19572 ;;  f2              3   37[COMRAM] float 
 19573 ;; Auto vars:     Size  Location     Type
 19574 ;;  f3              3    1[BANK0 ] float 
 19575 ;;  sign            1    5[BANK0 ] unsigned char 
 19576 ;;  exp             1    4[BANK0 ] unsigned char 
 19577 ;;  cntr            1    0[BANK0 ] unsigned char 
 19578 ;; Return value:  Size  Location     Type
 19579 ;;                  3   34[COMRAM] float 
 19580 ;; Registers used:
 19581 ;;		wreg, status,2, status,0, cstack
 19582 ;; Tracked objects:
 19583 ;;		On entry : 0/0
 19584 ;;		On exit  : 0/0
 19585 ;;		Unchanged: 0/0
 19586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19587 ;;      Params:         6       0       0       0       0       0       0
 19588 ;;      Locals:         0       6       0       0       0       0       0
 19589 ;;      Temps:          3       0       0       0       0       0       0
 19590 ;;      Totals:         9       6       0       0       0       0       0
 19591 ;;Total ram usage:       15 bytes
 19592 ;; Hardware stack levels used:    1
 19593 ;; Hardware stack levels required when called:    4
 19594 ;; This function calls:
 19595 ;;		___ftpack
 19596 ;; This function is called by:
 19597 ;;		_SampleSingleChannel
 19598 ;;		_SampleAllChannels
 19599 ;;		_exp
 19600 ;;		_CheckFlashPrecentage
 19601 ;;		_DacAnalogToDigitalSpi
 19602 ;; This function uses a non-reentrant model
 19603 ;;
 19604                           
 19605                           	psect	text84
 19606  002DD0                     __ptext84:
 19607                           	opt stack 0
 19608  002DD0                     ___ftdiv:
 19609                           	opt stack 22
 19610                           
 19611                           ;incstack = 0
 19612  002DD0  C025  F029         	movff	___ftdiv@f1+2,??___ftdiv
 19613  002DD4  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 19614  002DD6  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 19615  002DD8  3424               	rlcf	___ftdiv@f1+1,w,c
 19616  002DDA  3629               	rlcf	??___ftdiv& (0+255),f,c
 19617  002DDC  E301               	bnc	u8131
 19618  002DDE  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 19619  002DE0                     u8131:
 19620  002DE0  5029               	movf	??___ftdiv,w,c
 19621  002DE2  0100               	movlb	0	; () banked
 19622  002DE4  6F64               	movwf	___ftdiv@exp& (0+255),b
 19623  002DE6  5164               	movf	___ftdiv@exp& (0+255),w,b
 19624  002DE8  A4D8               	btfss	status,2,c
 19625  002DEA  D007               	goto	l2034
 19626                           
 19627                           ; BSR set to: 0
 19628  002DEC  0E00               	movlw	0
 19629  002DEE  6E23               	movwf	?___ftdiv,c
 19630  002DF0  0E00               	movlw	0
 19631  002DF2  6E24               	movwf	?___ftdiv+1,c
 19632  002DF4  0E00               	movlw	0
 19633  002DF6  6E25               	movwf	?___ftdiv+2,c
 19634                           
 19635                           ; BSR set to: 0
 19636  002DF8  0012               	return	
 19637  002DFA                     l2034:
 19638                           
 19639                           ; BSR set to: 0
 19640                           
 19641                           ; BSR set to: 0
 19642  002DFA  C028  F029         	movff	___ftdiv@f2+2,??___ftdiv
 19643  002DFE  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 19644  002E00  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 19645  002E02  3427               	rlcf	___ftdiv@f2+1,w,c
 19646  002E04  3629               	rlcf	??___ftdiv& (0+255),f,c
 19647  002E06  E301               	bnc	u8151
 19648  002E08  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 19649  002E0A                     u8151:
 19650  002E0A  5029               	movf	??___ftdiv,w,c
 19651  002E0C  6F65               	movwf	___ftdiv@sign& (0+255),b
 19652  002E0E  5165               	movf	___ftdiv@sign& (0+255),w,b
 19653  002E10  A4D8               	btfss	status,2,c
 19654  002E12  D007               	goto	l2036
 19655                           
 19656                           ; BSR set to: 0
 19657  002E14  0E00               	movlw	0
 19658  002E16  6E23               	movwf	?___ftdiv,c
 19659  002E18  0E00               	movlw	0
 19660  002E1A  6E24               	movwf	?___ftdiv+1,c
 19661  002E1C  0E00               	movlw	0
 19662  002E1E  6E25               	movwf	?___ftdiv+2,c
 19663                           
 19664                           ; BSR set to: 0
 19665  002E20  0012               	return	
 19666  002E22                     l2036:
 19667                           
 19668                           ; BSR set to: 0
 19669                           
 19670                           ; BSR set to: 0
 19671  002E22  0E00               	movlw	0
 19672  002E24  6F61               	movwf	___ftdiv@f3& (0+255),b
 19673  002E26  0E00               	movlw	0
 19674  002E28  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
 19675  002E2A  0E00               	movlw	0
 19676  002E2C  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
 19677                           
 19678                           ; BSR set to: 0
 19679  002E2E  5165               	movf	___ftdiv@sign& (0+255),w,b
 19680  002E30  0F89               	addlw	137
 19681  002E32  5F64               	subwf	___ftdiv@exp& (0+255),f,b
 19682                           
 19683                           ; BSR set to: 0
 19684  002E34  C025  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
 19685                           
 19686                           ; BSR set to: 0
 19687  002E38  5028               	movf	___ftdiv@f2+2,w,c
 19688  002E3A  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
 19689                           
 19690                           ; BSR set to: 0
 19691  002E3C  0E80               	movlw	128
 19692  002E3E  1765               	andwf	___ftdiv@sign& (0+255),f,b
 19693                           
 19694                           ; BSR set to: 0
 19695  002E40  8E24               	bsf	___ftdiv@f1+1,7,c
 19696                           
 19697                           ; BSR set to: 0
 19698  002E42  0EFF               	movlw	255
 19699  002E44  1623               	andwf	___ftdiv@f1,f,c
 19700  002E46  0EFF               	movlw	255
 19701  002E48  1624               	andwf	___ftdiv@f1+1,f,c
 19702  002E4A  0E00               	movlw	0
 19703  002E4C  1625               	andwf	___ftdiv@f1+2,f,c
 19704                           
 19705                           ; BSR set to: 0
 19706  002E4E  8E27               	bsf	___ftdiv@f2+1,7,c
 19707                           
 19708                           ; BSR set to: 0
 19709  002E50  0EFF               	movlw	255
 19710  002E52  1626               	andwf	___ftdiv@f2,f,c
 19711  002E54  0EFF               	movlw	255
 19712  002E56  1627               	andwf	___ftdiv@f2+1,f,c
 19713  002E58  0E00               	movlw	0
 19714  002E5A  1628               	andwf	___ftdiv@f2+2,f,c
 19715                           
 19716                           ; BSR set to: 0
 19717  002E5C  0E18               	movlw	24
 19718  002E5E  6F60               	movwf	___ftdiv@cntr& (0+255),b
 19719  002E60                     
 19720                           ; BSR set to: 0
 19721                           
 19722                           ; BSR set to: 0
 19723  002E60  90D8               	bcf	status,0,c
 19724  002E62  3761               	rlcf	___ftdiv@f3& (0+255),f,b
 19725  002E64  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 19726  002E66  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 19727                           
 19728                           ; BSR set to: 0
 19729  002E68  5026               	movf	___ftdiv@f2,w,c
 19730  002E6A  5C23               	subwf	___ftdiv@f1,w,c
 19731  002E6C  5027               	movf	___ftdiv@f2+1,w,c
 19732  002E6E  5824               	subwfb	___ftdiv@f1+1,w,c
 19733  002E70  5028               	movf	___ftdiv@f2+2,w,c
 19734  002E72  5825               	subwfb	___ftdiv@f1+2,w,c
 19735  002E74  A0D8               	btfss	status,0,c
 19736  002E76  D007               	goto	l2038
 19737                           
 19738                           ; BSR set to: 0
 19739  002E78  5026               	movf	___ftdiv@f2,w,c
 19740  002E7A  5E23               	subwf	___ftdiv@f1,f,c
 19741  002E7C  5027               	movf	___ftdiv@f2+1,w,c
 19742  002E7E  5A24               	subwfb	___ftdiv@f1+1,f,c
 19743  002E80  5028               	movf	___ftdiv@f2+2,w,c
 19744  002E82  5A25               	subwfb	___ftdiv@f1+2,f,c
 19745                           
 19746                           ; BSR set to: 0
 19747  002E84  8161               	bsf	___ftdiv@f3& (0+255),0,b
 19748  002E86                     l2038:
 19749                           
 19750                           ; BSR set to: 0
 19751  002E86  90D8               	bcf	status,0,c
 19752  002E88  3623               	rlcf	___ftdiv@f1,f,c
 19753  002E8A  3624               	rlcf	___ftdiv@f1+1,f,c
 19754  002E8C  3625               	rlcf	___ftdiv@f1+2,f,c
 19755                           
 19756                           ; BSR set to: 0
 19757  002E8E  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
 19758  002E90  D7E7               	goto	l2037
 19759                           
 19760                           ; BSR set to: 0
 19761                           
 19762                           ; BSR set to: 0
 19763  002E92  C061  F018         	movff	___ftdiv@f3,___ftpack@arg
 19764  002E96  C062  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 19765  002E9A  C063  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 19766  002E9E  C064  F01B         	movff	___ftdiv@exp,___ftpack@exp
 19767  002EA2  C065  F01C         	movff	___ftdiv@sign,___ftpack@sign
 19768  002EA6  EC3F  F01A         	call	___ftpack	;wreg free
 19769  002EAA  C018  F023         	movff	?___ftpack,?___ftdiv
 19770  002EAE  C019  F024         	movff	?___ftpack+1,?___ftdiv+1
 19771  002EB2  C01A  F025         	movff	?___ftpack+2,?___ftdiv+2
 19772  002EB6  0012               	return	
 19773  002EB8                     __end_of___ftdiv:
 19774                           	opt stack 0
 19775                           tosu	equ	0xFFF
 19776                           tosh	equ	0xFFE
 19777                           tosl	equ	0xFFD
 19778                           pclath	equ	0xFFA
 19779                           tblptru	equ	0xFF8
 19780                           tblptrh	equ	0xFF7
 19781                           tblptrl	equ	0xFF6
 19782                           tablat	equ	0xFF5
 19783                           prodh	equ	0xFF4
 19784                           prodl	equ	0xFF3
 19785                           intcon	equ	0xFF2
 19786                           intcon2	equ	0xFF1
 19787                           indf0	equ	0xFEF
 19788                           postinc0	equ	0xFEE
 19789                           fsr0h	equ	0xFEA
 19790                           fsr0l	equ	0xFE9
 19791                           wreg	equ	0xFE8
 19792                           indf1	equ	0xFE7
 19793                           postdec1	equ	0xFE5
 19794                           fsr1h	equ	0xFE2
 19795                           fsr1l	equ	0xFE1
 19796                           indf2	equ	0xFDF
 19797                           postinc2	equ	0xFDE
 19798                           postdec2	equ	0xFDD
 19799                           fsr2h	equ	0xFDA
 19800                           fsr2l	equ	0xFD9
 19801                           status	equ	0xFD8
 19802                           
 19803 ;; *************** function ___awtoft *****************
 19804 ;; Defined at:
 19805 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 19806 ;; Parameters:    Size  Location     Type
 19807 ;;  c               2   31[COMRAM] int 
 19808 ;; Auto vars:     Size  Location     Type
 19809 ;;  sign            1   34[COMRAM] unsigned char 
 19810 ;; Return value:  Size  Location     Type
 19811 ;;                  3   31[COMRAM] float 
 19812 ;; Registers used:
 19813 ;;		wreg, status,2, status,0, cstack
 19814 ;; Tracked objects:
 19815 ;;		On entry : 0/0
 19816 ;;		On exit  : 0/0
 19817 ;;		Unchanged: 0/0
 19818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19819 ;;      Params:         3       0       0       0       0       0       0
 19820 ;;      Locals:         1       0       0       0       0       0       0
 19821 ;;      Temps:          0       0       0       0       0       0       0
 19822 ;;      Totals:         4       0       0       0       0       0       0
 19823 ;;Total ram usage:        4 bytes
 19824 ;; Hardware stack levels used:    1
 19825 ;; Hardware stack levels required when called:    4
 19826 ;; This function calls:
 19827 ;;		___ftpack
 19828 ;; This function is called by:
 19829 ;;		_GroupRx
 19830 ;;		_GroupTx
 19831 ;;		_ReadIntFromEeprom
 19832 ;;		_exp
 19833 ;;		_log
 19834 ;;		_DacSetValue
 19835 ;; This function uses a non-reentrant model
 19836 ;;
 19837                           
 19838                           	psect	text85
 19839  0041C8                     __ptext85:
 19840                           	opt stack 0
 19841  0041C8                     ___awtoft:
 19842                           	opt stack 22
 19843                           
 19844                           ;incstack = 0
 19845  0041C8  0E00               	movlw	0
 19846  0041CA  6E23               	movwf	___awtoft@sign,c
 19847  0041CC  AE21               	btfss	___awtoft@c+1,7,c
 19848  0041CE  D006               	goto	l1934
 19849  0041D0  6C20               	negf	___awtoft@c,c
 19850  0041D2  1E21               	comf	___awtoft@c+1,f,c
 19851  0041D4  B0D8               	btfsc	status,0,c
 19852  0041D6  2A21               	incf	___awtoft@c+1,f,c
 19853  0041D8  0E01               	movlw	1
 19854  0041DA  6E23               	movwf	___awtoft@sign,c
 19855  0041DC                     l1934:
 19856  0041DC  C020  F018         	movff	___awtoft@c,___ftpack@arg
 19857  0041E0  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 19858  0041E4  6A1A               	clrf	___ftpack@arg+2,c
 19859  0041E6  0E8E               	movlw	142
 19860  0041E8  6E1B               	movwf	___ftpack@exp,c
 19861  0041EA  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 19862  0041EE  EC3F  F01A         	call	___ftpack	;wreg free
 19863  0041F2  C018  F020         	movff	?___ftpack,?___awtoft
 19864  0041F6  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 19865  0041FA  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 19866  0041FE  0012               	return	
 19867  004200                     __end_of___awtoft:
 19868                           	opt stack 0
 19869                           tosu	equ	0xFFF
 19870                           tosh	equ	0xFFE
 19871                           tosl	equ	0xFFD
 19872                           pclath	equ	0xFFA
 19873                           tblptru	equ	0xFF8
 19874                           tblptrh	equ	0xFF7
 19875                           tblptrl	equ	0xFF6
 19876                           tablat	equ	0xFF5
 19877                           prodh	equ	0xFF4
 19878                           prodl	equ	0xFF3
 19879                           intcon	equ	0xFF2
 19880                           intcon2	equ	0xFF1
 19881                           indf0	equ	0xFEF
 19882                           postinc0	equ	0xFEE
 19883                           fsr0h	equ	0xFEA
 19884                           fsr0l	equ	0xFE9
 19885                           wreg	equ	0xFE8
 19886                           indf1	equ	0xFE7
 19887                           postdec1	equ	0xFE5
 19888                           fsr1h	equ	0xFE2
 19889                           fsr1l	equ	0xFE1
 19890                           indf2	equ	0xFDF
 19891                           postinc2	equ	0xFDE
 19892                           postdec2	equ	0xFDD
 19893                           fsr2h	equ	0xFDA
 19894                           fsr2l	equ	0xFD9
 19895                           status	equ	0xFD8
 19896                           
 19897 ;; *************** function ___lltoft *****************
 19898 ;; Defined at:
 19899 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 19900 ;; Parameters:    Size  Location     Type
 19901 ;;  c               4   31[COMRAM] unsigned long 
 19902 ;; Auto vars:     Size  Location     Type
 19903 ;;  exp             1   39[COMRAM] unsigned char 
 19904 ;; Return value:  Size  Location     Type
 19905 ;;                  3   31[COMRAM] float 
 19906 ;; Registers used:
 19907 ;;		wreg, status,2, status,0, cstack
 19908 ;; Tracked objects:
 19909 ;;		On entry : 0/0
 19910 ;;		On exit  : 0/0
 19911 ;;		Unchanged: 0/0
 19912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19913 ;;      Params:         4       0       0       0       0       0       0
 19914 ;;      Locals:         1       0       0       0       0       0       0
 19915 ;;      Temps:          4       0       0       0       0       0       0
 19916 ;;      Totals:         9       0       0       0       0       0       0
 19917 ;;Total ram usage:        9 bytes
 19918 ;; Hardware stack levels used:    1
 19919 ;; Hardware stack levels required when called:    4
 19920 ;; This function calls:
 19921 ;;		___ftpack
 19922 ;; This function is called by:
 19923 ;;		_CollectRxStatusParams
 19924 ;;		_CollectTxStatusParams
 19925 ;;		_sprintf
 19926 ;;		_pow
 19927 ;;		_CheckFlashPrecentage
 19928 ;; This function uses a non-reentrant model
 19929 ;;
 19930                           
 19931                           	psect	text86
 19932  003D34                     __ptext86:
 19933                           	opt stack 0
 19934  003D34                     ___lltoft:
 19935                           	opt stack 24
 19936                           
 19937                           ;incstack = 0
 19938  003D34  0E8E               	movlw	142
 19939  003D36  6E28               	movwf	___lltoft@exp,c
 19940  003D38  D006               	goto	l2144
 19941  003D3A  90D8               	bcf	status,0,c
 19942  003D3C  3223               	rrcf	___lltoft@c+3,f,c
 19943  003D3E  3222               	rrcf	___lltoft@c+2,f,c
 19944  003D40  3221               	rrcf	___lltoft@c+1,f,c
 19945  003D42  3220               	rrcf	___lltoft@c,f,c
 19946  003D44  2A28               	incf	___lltoft@exp,f,c
 19947  003D46                     l2144:
 19948  003D46  0E00               	movlw	0
 19949  003D48  1420               	andwf	___lltoft@c,w,c
 19950  003D4A  6E24               	movwf	??___lltoft& (0+255),c
 19951  003D4C  0E00               	movlw	0
 19952  003D4E  1421               	andwf	___lltoft@c+1,w,c
 19953  003D50  6E25               	movwf	(??___lltoft+1)& (0+255),c
 19954  003D52  0E00               	movlw	0
 19955  003D54  1422               	andwf	___lltoft@c+2,w,c
 19956  003D56  6E26               	movwf	(??___lltoft+2)& (0+255),c
 19957  003D58  0EFF               	movlw	255
 19958  003D5A  1423               	andwf	___lltoft@c+3,w,c
 19959  003D5C  6E27               	movwf	(??___lltoft+3)& (0+255),c
 19960  003D5E  5024               	movf	??___lltoft,w,c
 19961  003D60  1025               	iorwf	??___lltoft+1,w,c
 19962  003D62  1026               	iorwf	??___lltoft+2,w,c
 19963  003D64  1027               	iorwf	??___lltoft+3,w,c
 19964  003D66  A4D8               	btfss	status,2,c
 19965  003D68  D7E8               	goto	l2145
 19966  003D6A  C020  F018         	movff	___lltoft@c,___ftpack@arg
 19967  003D6E  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 19968  003D72  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 19969  003D76  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 19970  003D7A  0E00               	movlw	0
 19971  003D7C  6E1C               	movwf	___ftpack@sign,c
 19972  003D7E  EC3F  F01A         	call	___ftpack	;wreg free
 19973  003D82  C018  F020         	movff	?___ftpack,?___lltoft
 19974  003D86  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 19975  003D8A  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 19976  003D8E  0012               	return	
 19977  003D90                     __end_of___lltoft:
 19978                           	opt stack 0
 19979                           tosu	equ	0xFFF
 19980                           tosh	equ	0xFFE
 19981                           tosl	equ	0xFFD
 19982                           pclath	equ	0xFFA
 19983                           tblptru	equ	0xFF8
 19984                           tblptrh	equ	0xFF7
 19985                           tblptrl	equ	0xFF6
 19986                           tablat	equ	0xFF5
 19987                           prodh	equ	0xFF4
 19988                           prodl	equ	0xFF3
 19989                           intcon	equ	0xFF2
 19990                           intcon2	equ	0xFF1
 19991                           indf0	equ	0xFEF
 19992                           postinc0	equ	0xFEE
 19993                           fsr0h	equ	0xFEA
 19994                           fsr0l	equ	0xFE9
 19995                           wreg	equ	0xFE8
 19996                           indf1	equ	0xFE7
 19997                           postdec1	equ	0xFE5
 19998                           fsr1h	equ	0xFE2
 19999                           fsr1l	equ	0xFE1
 20000                           indf2	equ	0xFDF
 20001                           postinc2	equ	0xFDE
 20002                           postdec2	equ	0xFDD
 20003                           fsr2h	equ	0xFDA
 20004                           fsr2l	equ	0xFD9
 20005                           status	equ	0xFD8
 20006                           
 20007 ;; *************** function ___ftpack *****************
 20008 ;; Defined at:
 20009 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 20010 ;; Parameters:    Size  Location     Type
 20011 ;;  arg             3   23[COMRAM] unsigned um
 20012 ;;  exp             1   26[COMRAM] unsigned char 
 20013 ;;  sign            1   27[COMRAM] unsigned char 
 20014 ;; Auto vars:     Size  Location     Type
 20015 ;;		None
 20016 ;; Return value:  Size  Location     Type
 20017 ;;                  3   23[COMRAM] float 
 20018 ;; Registers used:
 20019 ;;		wreg, status,2, status,0
 20020 ;; Tracked objects:
 20021 ;;		On entry : 0/0
 20022 ;;		On exit  : 0/0
 20023 ;;		Unchanged: 0/0
 20024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20025 ;;      Params:         5       0       0       0       0       0       0
 20026 ;;      Locals:         0       0       0       0       0       0       0
 20027 ;;      Temps:          3       0       0       0       0       0       0
 20028 ;;      Totals:         8       0       0       0       0       0       0
 20029 ;;Total ram usage:        8 bytes
 20030 ;; Hardware stack levels used:    1
 20031 ;; Hardware stack levels required when called:    3
 20032 ;; This function calls:
 20033 ;;		Nothing
 20034 ;; This function is called by:
 20035 ;;		___altoft
 20036 ;;		___awtoft
 20037 ;;		___ftadd
 20038 ;;		___ftdiv
 20039 ;;		___ftmul
 20040 ;;		___lltoft
 20041 ;;		___lwtoft
 20042 ;; This function uses a non-reentrant model
 20043 ;;
 20044                           
 20045                           	psect	text87
 20046  00347E                     __ptext87:
 20047                           	opt stack 0
 20048  00347E                     ___ftpack:
 20049                           	opt stack 23
 20050                           
 20051                           ;incstack = 0
 20052  00347E  501B               	movf	___ftpack@exp,w,c
 20053  003480  B4D8               	btfsc	status,2,c
 20054  003482  D005               	goto	u7630
 20055  003484  5018               	movf	___ftpack@arg,w,c
 20056  003486  1019               	iorwf	___ftpack@arg+1,w,c
 20057  003488  101A               	iorwf	___ftpack@arg+2,w,c
 20058  00348A  A4D8               	btfss	status,2,c
 20059  00348C  D00C               	goto	l1970
 20060  00348E                     u7630:
 20061  00348E  0E00               	movlw	0
 20062  003490  6E18               	movwf	?___ftpack,c
 20063  003492  0E00               	movlw	0
 20064  003494  6E19               	movwf	?___ftpack+1,c
 20065  003496  0E00               	movlw	0
 20066  003498  6E1A               	movwf	?___ftpack+2,c
 20067  00349A  0012               	return	
 20068  00349C  2A1B               	incf	___ftpack@exp,f,c
 20069  00349E  90D8               	bcf	status,0,c
 20070  0034A0  321A               	rrcf	___ftpack@arg+2,f,c
 20071  0034A2  3219               	rrcf	___ftpack@arg+1,f,c
 20072  0034A4  3218               	rrcf	___ftpack@arg,f,c
 20073  0034A6                     l1970:
 20074  0034A6  0E00               	movlw	0
 20075  0034A8  1418               	andwf	___ftpack@arg,w,c
 20076  0034AA  6E1D               	movwf	??___ftpack& (0+255),c
 20077  0034AC  0E00               	movlw	0
 20078  0034AE  1419               	andwf	___ftpack@arg+1,w,c
 20079  0034B0  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 20080  0034B2  0EFE               	movlw	254
 20081  0034B4  141A               	andwf	___ftpack@arg+2,w,c
 20082  0034B6  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 20083  0034B8  501D               	movf	??___ftpack,w,c
 20084  0034BA  101E               	iorwf	??___ftpack+1,w,c
 20085  0034BC  101F               	iorwf	??___ftpack+2,w,c
 20086  0034BE  B4D8               	btfsc	status,2,c
 20087  0034C0  D00C               	goto	l1973
 20088  0034C2  D7EC               	goto	l1971
 20089  0034C4  2A1B               	incf	___ftpack@exp,f,c
 20090  0034C6  0E01               	movlw	1
 20091  0034C8  2618               	addwf	___ftpack@arg,f,c
 20092  0034CA  0E00               	movlw	0
 20093  0034CC  2219               	addwfc	___ftpack@arg+1,f,c
 20094  0034CE  0E00               	movlw	0
 20095  0034D0  221A               	addwfc	___ftpack@arg+2,f,c
 20096  0034D2  90D8               	bcf	status,0,c
 20097  0034D4  321A               	rrcf	___ftpack@arg+2,f,c
 20098  0034D6  3219               	rrcf	___ftpack@arg+1,f,c
 20099  0034D8  3218               	rrcf	___ftpack@arg,f,c
 20100  0034DA                     l1973:
 20101  0034DA  0E00               	movlw	0
 20102  0034DC  1418               	andwf	___ftpack@arg,w,c
 20103  0034DE  6E1D               	movwf	??___ftpack& (0+255),c
 20104  0034E0  0E00               	movlw	0
 20105  0034E2  1419               	andwf	___ftpack@arg+1,w,c
 20106  0034E4  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 20107  0034E6  0EFF               	movlw	255
 20108  0034E8  141A               	andwf	___ftpack@arg+2,w,c
 20109  0034EA  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 20110  0034EC  501D               	movf	??___ftpack,w,c
 20111  0034EE  101E               	iorwf	??___ftpack+1,w,c
 20112  0034F0  101F               	iorwf	??___ftpack+2,w,c
 20113  0034F2  B4D8               	btfsc	status,2,c
 20114  0034F4  D006               	goto	l1976
 20115  0034F6  D7E6               	goto	l1974
 20116  0034F8  061B               	decf	___ftpack@exp,f,c
 20117  0034FA  90D8               	bcf	status,0,c
 20118  0034FC  3618               	rlcf	___ftpack@arg,f,c
 20119  0034FE  3619               	rlcf	___ftpack@arg+1,f,c
 20120  003500  361A               	rlcf	___ftpack@arg+2,f,c
 20121  003502                     l1976:
 20122  003502  BE19               	btfsc	___ftpack@arg+1,7,c
 20123  003504  D003               	goto	u7670
 20124  003506  0E02               	movlw	2
 20125  003508  601B               	cpfslt	___ftpack@exp,c
 20126  00350A  D7F6               	goto	l1977
 20127  00350C                     u7670:
 20128  00350C  A01B               	btfss	___ftpack@exp,0,c
 20129  00350E  9E19               	bcf	___ftpack@arg+1,7,c
 20130  003510  90D8               	bcf	status,0,c
 20131  003512  321B               	rrcf	___ftpack@exp,f,c
 20132  003514  501B               	movf	___ftpack@exp,w,c
 20133  003516  121A               	iorwf	___ftpack@arg+2,f,c
 20134  003518  501C               	movf	___ftpack@sign,w,c
 20135  00351A  A4D8               	btfss	status,2,c
 20136  00351C  8E1A               	bsf	___ftpack@arg+2,7,c
 20137  00351E  C018  F018         	movff	___ftpack@arg,?___ftpack
 20138  003522  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 20139  003526  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 20140  00352A  0012               	return	
 20141  00352C                     __end_of___ftpack:
 20142                           	opt stack 0
 20143                           tosu	equ	0xFFF
 20144                           tosh	equ	0xFFE
 20145                           tosl	equ	0xFFD
 20146                           pclath	equ	0xFFA
 20147                           tblptru	equ	0xFF8
 20148                           tblptrh	equ	0xFF7
 20149                           tblptrl	equ	0xFF6
 20150                           tablat	equ	0xFF5
 20151                           prodh	equ	0xFF4
 20152                           prodl	equ	0xFF3
 20153                           intcon	equ	0xFF2
 20154                           intcon2	equ	0xFF1
 20155                           indf0	equ	0xFEF
 20156                           postinc0	equ	0xFEE
 20157                           fsr0h	equ	0xFEA
 20158                           fsr0l	equ	0xFE9
 20159                           wreg	equ	0xFE8
 20160                           indf1	equ	0xFE7
 20161                           postdec1	equ	0xFE5
 20162                           fsr1h	equ	0xFE2
 20163                           fsr1l	equ	0xFE1
 20164                           indf2	equ	0xFDF
 20165                           postinc2	equ	0xFDE
 20166                           postdec2	equ	0xFDD
 20167                           fsr2h	equ	0xFDA
 20168                           fsr2l	equ	0xFD9
 20169                           status	equ	0xFD8
 20170                           
 20171 ;; *************** function ___lmul *****************
 20172 ;; Defined at:
 20173 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 20174 ;; Parameters:    Size  Location     Type
 20175 ;;  multiplier      4   25[COMRAM] unsigned long 
 20176 ;;  multiplicand    4   29[COMRAM] unsigned long 
 20177 ;; Auto vars:     Size  Location     Type
 20178 ;;  product         4   33[COMRAM] unsigned long 
 20179 ;; Return value:  Size  Location     Type
 20180 ;;                  4   25[COMRAM] unsigned long 
 20181 ;; Registers used:
 20182 ;;		wreg, status,2, status,0
 20183 ;; Tracked objects:
 20184 ;;		On entry : 0/0
 20185 ;;		On exit  : 0/0
 20186 ;;		Unchanged: 0/0
 20187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20188 ;;      Params:         8       0       0       0       0       0       0
 20189 ;;      Locals:         4       0       0       0       0       0       0
 20190 ;;      Temps:          0       0       0       0       0       0       0
 20191 ;;      Totals:        12       0       0       0       0       0       0
 20192 ;;Total ram usage:       12 bytes
 20193 ;; Hardware stack levels used:    1
 20194 ;; Hardware stack levels required when called:    3
 20195 ;; This function calls:
 20196 ;;		Nothing
 20197 ;; This function is called by:
 20198 ;;		_ReadIntFromEeprom
 20199 ;;		_strtol
 20200 ;; This function uses a non-reentrant model
 20201 ;;
 20202                           
 20203                           	psect	text88
 20204  003EEC                     __ptext88:
 20205                           	opt stack 0
 20206  003EEC                     ___lmul:
 20207                           	opt stack 23
 20208                           
 20209                           ;incstack = 0
 20210  003EEC  0E00               	movlw	0
 20211  003EEE  6E22               	movwf	___lmul@product,c
 20212  003EF0  0E00               	movlw	0
 20213  003EF2  6E23               	movwf	___lmul@product+1,c
 20214  003EF4  0E00               	movlw	0
 20215  003EF6  6E24               	movwf	___lmul@product+2,c
 20216  003EF8  0E00               	movlw	0
 20217  003EFA  6E25               	movwf	___lmul@product+3,c
 20218  003EFC  A01A               	btfss	___lmul@multiplier,0,c
 20219  003EFE  D008               	goto	l1747
 20220  003F00  501E               	movf	___lmul@multiplicand,w,c
 20221  003F02  2622               	addwf	___lmul@product,f,c
 20222  003F04  501F               	movf	___lmul@multiplicand+1,w,c
 20223  003F06  2223               	addwfc	___lmul@product+1,f,c
 20224  003F08  5020               	movf	___lmul@multiplicand+2,w,c
 20225  003F0A  2224               	addwfc	___lmul@product+2,f,c
 20226  003F0C  5021               	movf	___lmul@multiplicand+3,w,c
 20227  003F0E  2225               	addwfc	___lmul@product+3,f,c
 20228  003F10                     l1747:
 20229  003F10  90D8               	bcf	status,0,c
 20230  003F12  361E               	rlcf	___lmul@multiplicand,f,c
 20231  003F14  361F               	rlcf	___lmul@multiplicand+1,f,c
 20232  003F16  3620               	rlcf	___lmul@multiplicand+2,f,c
 20233  003F18  3621               	rlcf	___lmul@multiplicand+3,f,c
 20234  003F1A  90D8               	bcf	status,0,c
 20235  003F1C  321D               	rrcf	___lmul@multiplier+3,f,c
 20236  003F1E  321C               	rrcf	___lmul@multiplier+2,f,c
 20237  003F20  321B               	rrcf	___lmul@multiplier+1,f,c
 20238  003F22  321A               	rrcf	___lmul@multiplier,f,c
 20239  003F24  501A               	movf	___lmul@multiplier,w,c
 20240  003F26  101B               	iorwf	___lmul@multiplier+1,w,c
 20241  003F28  101C               	iorwf	___lmul@multiplier+2,w,c
 20242  003F2A  101D               	iorwf	___lmul@multiplier+3,w,c
 20243  003F2C  A4D8               	btfss	status,2,c
 20244  003F2E  D7E6               	goto	l1746
 20245  003F30  C022  F01A         	movff	___lmul@product,?___lmul
 20246  003F34  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 20247  003F38  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 20248  003F3C  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 20249  003F40  0012               	return		;funcret
 20250  003F42                     __end_of___lmul:
 20251                           	opt stack 0
 20252                           tosu	equ	0xFFF
 20253                           tosh	equ	0xFFE
 20254                           tosl	equ	0xFFD
 20255                           pclath	equ	0xFFA
 20256                           tblptru	equ	0xFF8
 20257                           tblptrh	equ	0xFF7
 20258                           tblptrl	equ	0xFF6
 20259                           tablat	equ	0xFF5
 20260                           prodh	equ	0xFF4
 20261                           prodl	equ	0xFF3
 20262                           intcon	equ	0xFF2
 20263                           intcon2	equ	0xFF1
 20264                           indf0	equ	0xFEF
 20265                           postinc0	equ	0xFEE
 20266                           fsr0h	equ	0xFEA
 20267                           fsr0l	equ	0xFE9
 20268                           wreg	equ	0xFE8
 20269                           indf1	equ	0xFE7
 20270                           postdec1	equ	0xFE5
 20271                           fsr1h	equ	0xFE2
 20272                           fsr1l	equ	0xFE1
 20273                           indf2	equ	0xFDF
 20274                           postinc2	equ	0xFDE
 20275                           postdec2	equ	0xFDD
 20276                           fsr2h	equ	0xFDA
 20277                           fsr2l	equ	0xFD9
 20278                           status	equ	0xFD8
 20279                           
 20280 ;; *************** function _EepromRead *****************
 20281 ;; Defined at:
 20282 ;;		line 215 in file "FlashApp.c"
 20283 ;; Parameters:    Size  Location     Type
 20284 ;;  address         1    wreg     unsigned char 
 20285 ;; Auto vars:     Size  Location     Type
 20286 ;;  address         1   24[COMRAM] unsigned char 
 20287 ;; Return value:  Size  Location     Type
 20288 ;;                  1    wreg      unsigned char 
 20289 ;; Registers used:
 20290 ;;		wreg, status,2, cstack
 20291 ;; Tracked objects:
 20292 ;;		On entry : 0/0
 20293 ;;		On exit  : 0/0
 20294 ;;		Unchanged: 0/0
 20295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20296 ;;      Params:         0       0       0       0       0       0       0
 20297 ;;      Locals:         1       0       0       0       0       0       0
 20298 ;;      Temps:          0       0       0       0       0       0       0
 20299 ;;      Totals:         1       0       0       0       0       0       0
 20300 ;;Total ram usage:        1 bytes
 20301 ;; Hardware stack levels used:    1
 20302 ;; Hardware stack levels required when called:    4
 20303 ;; This function calls:
 20304 ;;		_DATAEE_ReadByte
 20305 ;; This function is called by:
 20306 ;;		_ReadIntFromEeprom
 20307 ;; This function uses a non-reentrant model
 20308 ;;
 20309                           
 20310                           	psect	text89
 20311  004592                     __ptext89:
 20312                           	opt stack 0
 20313  004592                     _EepromRead:
 20314                           	opt stack 23
 20315                           
 20316                           ;incstack = 0
 20317                           ;EepromRead@address stored from wreg
 20318  004592  6E19               	movwf	EepromRead@address,c
 20319                           
 20320                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
 20321  004594  5019               	movf	EepromRead@address,w,c
 20322  004596  EC97  F022         	call	_DATAEE_ReadByte
 20323  00459A  0012               	return	
 20324  00459C                     __end_of_EepromRead:
 20325                           	opt stack 0
 20326                           tosu	equ	0xFFF
 20327                           tosh	equ	0xFFE
 20328                           tosl	equ	0xFFD
 20329                           pclath	equ	0xFFA
 20330                           tblptru	equ	0xFF8
 20331                           tblptrh	equ	0xFF7
 20332                           tblptrl	equ	0xFF6
 20333                           tablat	equ	0xFF5
 20334                           prodh	equ	0xFF4
 20335                           prodl	equ	0xFF3
 20336                           intcon	equ	0xFF2
 20337                           intcon2	equ	0xFF1
 20338                           indf0	equ	0xFEF
 20339                           postinc0	equ	0xFEE
 20340                           fsr0h	equ	0xFEA
 20341                           fsr0l	equ	0xFE9
 20342                           wreg	equ	0xFE8
 20343                           indf1	equ	0xFE7
 20344                           postdec1	equ	0xFE5
 20345                           fsr1h	equ	0xFE2
 20346                           fsr1l	equ	0xFE1
 20347                           indf2	equ	0xFDF
 20348                           postinc2	equ	0xFDE
 20349                           postdec2	equ	0xFDD
 20350                           fsr2h	equ	0xFDA
 20351                           fsr2l	equ	0xFD9
 20352                           status	equ	0xFD8
 20353                           
 20354 ;; *************** function _DATAEE_ReadByte *****************
 20355 ;; Defined at:
 20356 ;;		line 194 in file "mcc_generated_files/memory.c"
 20357 ;; Parameters:    Size  Location     Type
 20358 ;;  bAdd            1    wreg     unsigned char 
 20359 ;; Auto vars:     Size  Location     Type
 20360 ;;  bAdd            1   23[COMRAM] unsigned char 
 20361 ;; Return value:  Size  Location     Type
 20362 ;;                  1    wreg      unsigned char 
 20363 ;; Registers used:
 20364 ;;		wreg, status,2
 20365 ;; Tracked objects:
 20366 ;;		On entry : 0/0
 20367 ;;		On exit  : 0/0
 20368 ;;		Unchanged: 0/0
 20369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20370 ;;      Params:         0       0       0       0       0       0       0
 20371 ;;      Locals:         1       0       0       0       0       0       0
 20372 ;;      Temps:          0       0       0       0       0       0       0
 20373 ;;      Totals:         1       0       0       0       0       0       0
 20374 ;;Total ram usage:        1 bytes
 20375 ;; Hardware stack levels used:    1
 20376 ;; Hardware stack levels required when called:    3
 20377 ;; This function calls:
 20378 ;;		Nothing
 20379 ;; This function is called by:
 20380 ;;		_EepromRead
 20381 ;;		_EepromTest
 20382 ;; This function uses a non-reentrant model
 20383 ;;
 20384                           
 20385                           	psect	text90
 20386  00452E                     __ptext90:
 20387                           	opt stack 0
 20388  00452E                     _DATAEE_ReadByte:
 20389                           	opt stack 23
 20390                           
 20391                           ;incstack = 0
 20392                           ;DATAEE_ReadByte@bAdd stored from wreg
 20393  00452E  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 20394                           
 20395                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 20396  004530  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 20397                           
 20398                           ;memory.c: 198: EECON1bits.CFGS = 0;
 20399  004534  9CA6               	bcf	4006,6,c	;volsfr
 20400                           
 20401                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 20402  004536  9EA6               	bcf	4006,7,c	;volsfr
 20403                           
 20404                           ;memory.c: 200: EECON1bits.RD = 1;
 20405  004538  80A6               	bsf	4006,0,c	;volsfr
 20406                           
 20407                           ;memory.c: 201: __nop();
 20408  00453A  F000               	nop	
 20409                           
 20410                           ;memory.c: 202: __nop();
 20411  00453C  F000               	nop	
 20412                           
 20413                           ;memory.c: 204: return (EEDATA);
 20414  00453E  50A8               	movf	4008,w,c	;volatile
 20415  004540  0012               	return	
 20416  004542                     __end_of_DATAEE_ReadByte:
 20417                           	opt stack 0
 20418                           tosu	equ	0xFFF
 20419                           tosh	equ	0xFFE
 20420                           tosl	equ	0xFFD
 20421                           pclath	equ	0xFFA
 20422                           tblptru	equ	0xFF8
 20423                           tblptrh	equ	0xFF7
 20424                           tblptrl	equ	0xFF6
 20425                           tablat	equ	0xFF5
 20426                           prodh	equ	0xFF4
 20427                           prodl	equ	0xFF3
 20428                           intcon	equ	0xFF2
 20429                           intcon2	equ	0xFF1
 20430                           indf0	equ	0xFEF
 20431                           postinc0	equ	0xFEE
 20432                           fsr0h	equ	0xFEA
 20433                           fsr0l	equ	0xFE9
 20434                           wreg	equ	0xFE8
 20435                           indf1	equ	0xFE7
 20436                           postdec1	equ	0xFE5
 20437                           fsr1h	equ	0xFE2
 20438                           fsr1l	equ	0xFE1
 20439                           indf2	equ	0xFDF
 20440                           postinc2	equ	0xFDE
 20441                           postdec2	equ	0xFDD
 20442                           fsr2h	equ	0xFDA
 20443                           fsr2l	equ	0xFD9
 20444                           status	equ	0xFD8
 20445                           
 20446 ;; *************** function _ClearMcuRunTime *****************
 20447 ;; Defined at:
 20448 ;;		line 40 in file "SystemStatus.c"
 20449 ;; Parameters:    Size  Location     Type
 20450 ;;		None
 20451 ;; Auto vars:     Size  Location     Type
 20452 ;;		None
 20453 ;; Return value:  Size  Location     Type
 20454 ;;                  1    wreg      void 
 20455 ;; Registers used:
 20456 ;;		wreg, status,2
 20457 ;; Tracked objects:
 20458 ;;		On entry : 0/0
 20459 ;;		On exit  : 0/0
 20460 ;;		Unchanged: 0/0
 20461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20462 ;;      Params:         0       0       0       0       0       0       0
 20463 ;;      Locals:         0       0       0       0       0       0       0
 20464 ;;      Temps:          0       0       0       0       0       0       0
 20465 ;;      Totals:         0       0       0       0       0       0       0
 20466 ;;Total ram usage:        0 bytes
 20467 ;; Hardware stack levels used:    1
 20468 ;; Hardware stack levels required when called:    3
 20469 ;; This function calls:
 20470 ;;		Nothing
 20471 ;; This function is called by:
 20472 ;;		_InitSystemApplicationManagers
 20473 ;; This function uses a non-reentrant model
 20474 ;;
 20475                           
 20476                           	psect	text91
 20477  004542                     __ptext91:
 20478                           	opt stack 0
 20479  004542                     _ClearMcuRunTime:
 20480                           	opt stack 26
 20481                           
 20482                           ;SystemStatus.c: 42: mcuRunTimeIn5SecTicks = 0;
 20483                           
 20484                           ;incstack = 0
 20485  004542  0E00               	movlw	0
 20486  004544  0101               	movlb	1	; () banked
 20487  004546  6FC0               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 20488  004548  0E00               	movlw	0
 20489  00454A  6FC1               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 20490  00454C  0E00               	movlw	0
 20491  00454E  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 20492  004550  0E00               	movlw	0
 20493  004552  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 20494                           
 20495                           ; BSR set to: 1
 20496  004554  0012               	return		;funcret
 20497  004556                     __end_of_ClearMcuRunTime:
 20498                           	opt stack 0
 20499                           tosu	equ	0xFFF
 20500                           tosh	equ	0xFFE
 20501                           tosl	equ	0xFFD
 20502                           pclath	equ	0xFFA
 20503                           tblptru	equ	0xFF8
 20504                           tblptrh	equ	0xFF7
 20505                           tblptrl	equ	0xFF6
 20506                           tablat	equ	0xFF5
 20507                           prodh	equ	0xFF4
 20508                           prodl	equ	0xFF3
 20509                           intcon	equ	0xFF2
 20510                           intcon2	equ	0xFF1
 20511                           indf0	equ	0xFEF
 20512                           postinc0	equ	0xFEE
 20513                           fsr0h	equ	0xFEA
 20514                           fsr0l	equ	0xFE9
 20515                           wreg	equ	0xFE8
 20516                           indf1	equ	0xFE7
 20517                           postdec1	equ	0xFE5
 20518                           fsr1h	equ	0xFE2
 20519                           fsr1l	equ	0xFE1
 20520                           indf2	equ	0xFDF
 20521                           postinc2	equ	0xFDE
 20522                           postdec2	equ	0xFDD
 20523                           fsr2h	equ	0xFDA
 20524                           fsr2l	equ	0xFD9
 20525                           status	equ	0xFD8
 20526                           
 20527 ;; *************** function _BlinkOkLeds *****************
 20528 ;; Defined at:
 20529 ;;		line 24 in file "LedsApp.c"
 20530 ;; Parameters:    Size  Location     Type
 20531 ;;  state           1    wreg     enum E7699
 20532 ;; Auto vars:     Size  Location     Type
 20533 ;;  state           1   26[COMRAM] enum E7699
 20534 ;;  idx             2   27[COMRAM] int 
 20535 ;; Return value:  Size  Location     Type
 20536 ;;                  1    wreg      void 
 20537 ;; Registers used:
 20538 ;;		wreg, status,2, status,0
 20539 ;; Tracked objects:
 20540 ;;		On entry : 0/0
 20541 ;;		On exit  : 0/0
 20542 ;;		Unchanged: 0/0
 20543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20544 ;;      Params:         0       0       0       0       0       0       0
 20545 ;;      Locals:         3       0       0       0       0       0       0
 20546 ;;      Temps:          3       0       0       0       0       0       0
 20547 ;;      Totals:         6       0       0       0       0       0       0
 20548 ;;Total ram usage:        6 bytes
 20549 ;; Hardware stack levels used:    1
 20550 ;; Hardware stack levels required when called:    3
 20551 ;; This function calls:
 20552 ;;		Nothing
 20553 ;; This function is called by:
 20554 ;;		_main
 20555 ;; This function uses a non-reentrant model
 20556 ;;
 20557                           
 20558                           	psect	text92
 20559  003C7A                     __ptext92:
 20560                           	opt stack 0
 20561  003C7A                     _BlinkOkLeds:
 20562                           	opt stack 27
 20563                           
 20564                           ; BSR set to: 1
 20565                           ;incstack = 0
 20566                           ;BlinkOkLeds@state stored from wreg
 20567  003C7A  6E1B               	movwf	BlinkOkLeds@state,c
 20568                           
 20569                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 20570  003C7C  0E00               	movlw	0
 20571  003C7E  6E1D               	movwf	BlinkOkLeds@idx+1,c
 20572  003C80  0E00               	movlw	0
 20573  003C82  6E1C               	movwf	BlinkOkLeds@idx,c
 20574  003C84                     l7247:
 20575  003C84  501B               	movf	BlinkOkLeds@state,w,c
 20576  003C86  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 20577  003C88  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 20578  003C8A  5018               	movf	??_BlinkOkLeds,w,c
 20579  003C8C  5C1C               	subwf	BlinkOkLeds@idx,w,c
 20580  003C8E  501D               	movf	BlinkOkLeds@idx+1,w,c
 20581  003C90  0A80               	xorlw	128
 20582  003C92  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 20583  003C94  5019               	movf	??_BlinkOkLeds+1,w,c
 20584  003C96  0A80               	xorlw	128
 20585  003C98  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 20586  003C9A  B0D8               	btfsc	status,0,c
 20587  003C9C  0012               	return	
 20588                           
 20589                           ;LedsApp.c: 27: {
 20590                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 20591  003C9E  908B               	bcf	3979,0,c	;volatile
 20592                           
 20593                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 20594  003CA0  0E02               	movlw	2
 20595  003CA2  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 20596  003CA4  0E04               	movlw	4
 20597  003CA6  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 20598  003CA8  0EBA               	movlw	186
 20599  003CAA                     u10887:
 20600  003CAA  2EE8               	decfsz	wreg,f,c
 20601  003CAC  D7FE               	bra	u10887
 20602  003CAE  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 20603  003CB0  D7FC               	bra	u10887
 20604  003CB2  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 20605  003CB4  D7FA               	bra	u10887
 20606  003CB6  D000               	nop2	
 20607                           
 20608                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 20609  003CB8  808B               	bsf	3979,0,c	;volatile
 20610                           
 20611                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 20612  003CBA  0E02               	movlw	2
 20613  003CBC  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 20614  003CBE  0E04               	movlw	4
 20615  003CC0  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 20616  003CC2  0EBA               	movlw	186
 20617  003CC4                     u10897:
 20618  003CC4  2EE8               	decfsz	wreg,f,c
 20619  003CC6  D7FE               	bra	u10897
 20620  003CC8  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 20621  003CCA  D7FC               	bra	u10897
 20622  003CCC  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 20623  003CCE  D7FA               	bra	u10897
 20624  003CD0  D000               	nop2	
 20625  003CD2  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 20626  003CD4  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 20627  003CD6  D7D6               	goto	l7247
 20628  003CD8                     __end_of_BlinkOkLeds:
 20629                           	opt stack 0
 20630                           tosu	equ	0xFFF
 20631                           tosh	equ	0xFFE
 20632                           tosl	equ	0xFFD
 20633                           pclath	equ	0xFFA
 20634                           tblptru	equ	0xFF8
 20635                           tblptrh	equ	0xFF7
 20636                           tblptrl	equ	0xFF6
 20637                           tablat	equ	0xFF5
 20638                           prodh	equ	0xFF4
 20639                           prodl	equ	0xFF3
 20640                           intcon	equ	0xFF2
 20641                           intcon2	equ	0xFF1
 20642                           indf0	equ	0xFEF
 20643                           postinc0	equ	0xFEE
 20644                           fsr0h	equ	0xFEA
 20645                           fsr0l	equ	0xFE9
 20646                           wreg	equ	0xFE8
 20647                           indf1	equ	0xFE7
 20648                           postdec1	equ	0xFE5
 20649                           fsr1h	equ	0xFE2
 20650                           fsr1l	equ	0xFE1
 20651                           indf2	equ	0xFDF
 20652                           postinc2	equ	0xFDE
 20653                           postdec2	equ	0xFDD
 20654                           fsr2h	equ	0xFDA
 20655                           fsr2l	equ	0xFD9
 20656                           status	equ	0xFD8
 20657                           
 20658 ;; *************** function _INTERRUPT_InterruptManager *****************
 20659 ;; Defined at:
 20660 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 20661 ;; Parameters:    Size  Location     Type
 20662 ;;		None
 20663 ;; Auto vars:     Size  Location     Type
 20664 ;;		None
 20665 ;; Return value:  Size  Location     Type
 20666 ;;                  1    wreg      void 
 20667 ;; Registers used:
 20668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20669 ;; Tracked objects:
 20670 ;;		On entry : 0/0
 20671 ;;		On exit  : 0/0
 20672 ;;		Unchanged: 0/0
 20673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20674 ;;      Params:         0       0       0       0       0       0       0
 20675 ;;      Locals:         0       0       0       0       0       0       0
 20676 ;;      Temps:         18       0       0       0       0       0       0
 20677 ;;      Totals:        18       0       0       0       0       0       0
 20678 ;;Total ram usage:       18 bytes
 20679 ;; Hardware stack levels used:    1
 20680 ;; Hardware stack levels required when called:    2
 20681 ;; This function calls:
 20682 ;;		_EUSART1_Receive_ISR
 20683 ;;		_EUSART1_Transmit_ISR
 20684 ;;		_MEMORY_ISR
 20685 ;;		_PIN_MANAGER_IOC
 20686 ;;		_TMR0_ISR
 20687 ;; This function is called by:
 20688 ;;		Interrupt level 2
 20689 ;; This function uses a non-reentrant model
 20690 ;;
 20691                           
 20692                           	psect	intcode
 20693  000008                     __pintcode:
 20694                           	opt stack 0
 20695  000008                     _INTERRUPT_InterruptManager:
 20696                           	opt stack 20
 20697                           
 20698                           ;incstack = 0
 20699  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20700  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 20701  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 20702  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 20703  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 20704  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 20705  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 20706  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 20707  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 20708  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 20709  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 20710  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 20711  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 20712  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 20713  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 20714  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 20715  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 20716  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 20717  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 20718                           
 20719                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 20720  000052  B6F2               	btfsc	intcon,3,c	;volatile
 20721  000054  A0F2               	btfss	intcon,0,c	;volatile
 20722  000056  D003               	goto	i2l911
 20723                           
 20724                           ;interrupt_manager.c: 61: {
 20725                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 20726  000058  ECDA  F022         	call	_PIN_MANAGER_IOC	;wreg free
 20727                           
 20728                           ;interrupt_manager.c: 63: }
 20729  00005C  D019               	goto	i2l920
 20730  00005E                     i2l911:
 20731                           
 20732                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 20733  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 20734  000060  A4F2               	btfss	intcon,2,c	;volatile
 20735  000062  D003               	goto	i2l913
 20736                           
 20737                           ;interrupt_manager.c: 65: {
 20738                           ;interrupt_manager.c: 66: TMR0_ISR();
 20739  000064  ECE5  F019         	call	_TMR0_ISR	;wreg free
 20740                           
 20741                           ;interrupt_manager.c: 67: }
 20742  000068  D013               	goto	i2l920
 20743  00006A                     i2l913:
 20744                           
 20745                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 20746  00006A  ACF2               	btfss	intcon,6,c	;volatile
 20747  00006C  D011               	goto	i2l920
 20748                           
 20749                           ;interrupt_manager.c: 69: {
 20750                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 20751  00006E  B8A0               	btfsc	4000,4,c	;volatile
 20752  000070  A8A1               	btfss	4001,4,c	;volatile
 20753  000072  D003               	goto	i2l916
 20754                           
 20755                           ;interrupt_manager.c: 71: {
 20756                           ;interrupt_manager.c: 72: MEMORY_ISR();
 20757  000074  ECDC  F022         	call	_MEMORY_ISR	;wreg free
 20758                           
 20759                           ;interrupt_manager.c: 73: }
 20760  000078  D00B               	goto	i2l920
 20761  00007A                     i2l916:
 20762                           
 20763                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 20764  00007A  B89D               	btfsc	3997,4,c	;volatile
 20765  00007C  A89E               	btfss	3998,4,c	;volatile
 20766  00007E  D003               	goto	i2l918
 20767                           
 20768                           ;interrupt_manager.c: 75: {
 20769                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 20770  000080  EC00  F021         	call	_EUSART1_Transmit_ISR	;wreg free
 20771                           
 20772                           ;interrupt_manager.c: 77: }
 20773  000084  D005               	goto	i2l920
 20774  000086                     i2l918:
 20775                           
 20776                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 20777  000086  BA9D               	btfsc	3997,5,c	;volatile
 20778  000088  AA9E               	btfss	3998,5,c	;volatile
 20779  00008A  D002               	goto	i2l920
 20780                           
 20781                           ;interrupt_manager.c: 79: {
 20782                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 20783  00008C  EC6C  F021         	call	_EUSART1_Receive_ISR	;wreg free
 20784  000090                     i2l920:
 20785                           
 20786                           ;interrupt_manager.c: 87: else
 20787                           ;interrupt_manager.c: 88: {
 20788                           
 20789                           ;interrupt_manager.c: 85: }
 20790                           ;interrupt_manager.c: 86: }
 20791                           
 20792                           ;interrupt_manager.c: 82: else
 20793                           ;interrupt_manager.c: 83: {
 20794  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 20795  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 20796  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 20797  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 20798  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 20799  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 20800  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 20801  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 20802  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 20803  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 20804  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 20805  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 20806  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 20807  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 20808  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 20809  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 20810  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 20811  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 20812  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20813  0000DA  0011               	retfie		f
 20814  0000DC                     __end_of_INTERRUPT_InterruptManager:
 20815                           	opt stack 0
 20816                           tosu	equ	0xFFF
 20817                           tosh	equ	0xFFE
 20818                           tosl	equ	0xFFD
 20819                           pclatu	equ	0xFFB
 20820                           pclath	equ	0xFFA
 20821                           tblptru	equ	0xFF8
 20822                           tblptrh	equ	0xFF7
 20823                           tblptrl	equ	0xFF6
 20824                           tablat	equ	0xFF5
 20825                           prodh	equ	0xFF4
 20826                           prodl	equ	0xFF3
 20827                           intcon	equ	0xFF2
 20828                           intcon2	equ	0xFF1
 20829                           indf0	equ	0xFEF
 20830                           postinc0	equ	0xFEE
 20831                           fsr0h	equ	0xFEA
 20832                           fsr0l	equ	0xFE9
 20833                           wreg	equ	0xFE8
 20834                           indf1	equ	0xFE7
 20835                           postdec1	equ	0xFE5
 20836                           fsr1h	equ	0xFE2
 20837                           fsr1l	equ	0xFE1
 20838                           indf2	equ	0xFDF
 20839                           postinc2	equ	0xFDE
 20840                           postdec2	equ	0xFDD
 20841                           fsr2h	equ	0xFDA
 20842                           fsr2l	equ	0xFD9
 20843                           status	equ	0xFD8
 20844                           
 20845 ;; *************** function _TMR0_ISR *****************
 20846 ;; Defined at:
 20847 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 20848 ;; Parameters:    Size  Location     Type
 20849 ;;		None
 20850 ;; Auto vars:     Size  Location     Type
 20851 ;;		None
 20852 ;; Return value:  Size  Location     Type
 20853 ;;                  1    wreg      void 
 20854 ;; Registers used:
 20855 ;;		wreg, status,2, status,0, cstack
 20856 ;; Tracked objects:
 20857 ;;		On entry : 0/0
 20858 ;;		On exit  : 0/0
 20859 ;;		Unchanged: 0/0
 20860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20861 ;;      Params:         0       0       0       0       0       0       0
 20862 ;;      Locals:         0       0       0       0       0       0       0
 20863 ;;      Temps:          0       0       0       0       0       0       0
 20864 ;;      Totals:         0       0       0       0       0       0       0
 20865 ;;Total ram usage:        0 bytes
 20866 ;; Hardware stack levels used:    1
 20867 ;; Hardware stack levels required when called:    1
 20868 ;; This function calls:
 20869 ;;		___lwmod
 20870 ;; This function is called by:
 20871 ;;		_INTERRUPT_InterruptManager
 20872 ;; This function uses a non-reentrant model
 20873 ;;
 20874                           
 20875                           	psect	text94
 20876  0033CA                     __ptext94:
 20877                           	opt stack 0
 20878  0033CA                     _TMR0_ISR:
 20879                           	opt stack 20
 20880                           
 20881                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 20882                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 20883                           
 20884                           ;incstack = 0
 20885  0033CA  94F2               	bcf	intcon,2,c	;volatile
 20886                           
 20887                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 20888  0033CC  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 20889  0033CE  6ED7               	movwf	4055,c	;volatile
 20890                           
 20891                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 20892  0033D0  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 20893                           
 20894                           ;tmr0.c: 146: CountCallBack ++;
 20895  0033D4  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 20896  0033D6  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 20897                           
 20898                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 20899  0033D8  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 20900  0033DC  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 20901  0033E0  0E00               	movlw	0
 20902  0033E2  6E04               	movwf	___lwmod@divisor+1,c
 20903  0033E4  0E14               	movlw	20
 20904  0033E6  6E03               	movwf	___lwmod@divisor,c
 20905  0033E8  EC4D  F020         	call	___lwmod	;wreg free
 20906  0033EC  5001               	movf	?___lwmod,w,c
 20907  0033EE  1002               	iorwf	?___lwmod+1,w,c
 20908  0033F0  A4D8               	btfss	status,2,c
 20909  0033F2  D003               	goto	i2l1144
 20910                           
 20911                           ;tmr0.c: 148: {
 20912                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 20913  0033F4  0E01               	movlw	1
 20914  0033F6  0101               	movlb	1	; () banked
 20915  0033F8  6FEE               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 20916  0033FA                     i2l1144:
 20917                           
 20918                           ;tmr0.c: 150: }
 20919                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 20920                           
 20921                           ; BSR set to: 1
 20922  0033FA  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 20923  0033FE  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 20924  003402  0E00               	movlw	0
 20925  003404  6E04               	movwf	___lwmod@divisor+1,c
 20926  003406  0E32               	movlw	50
 20927  003408  6E03               	movwf	___lwmod@divisor,c
 20928  00340A  EC4D  F020         	call	___lwmod	;wreg free
 20929  00340E  5001               	movf	?___lwmod,w,c
 20930  003410  1002               	iorwf	?___lwmod+1,w,c
 20931  003412  A4D8               	btfss	status,2,c
 20932  003414  D003               	goto	i2l1145
 20933                           
 20934                           ;tmr0.c: 153: {
 20935                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 20936  003416  0E01               	movlw	1
 20937  003418  0101               	movlb	1	; () banked
 20938  00341A  6FED               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 20939  00341C                     i2l1145:
 20940                           
 20941                           ;tmr0.c: 155: }
 20942                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 20943                           
 20944                           ; BSR set to: 1
 20945  00341C  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 20946  003420  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 20947  003424  0E01               	movlw	1
 20948  003426  6E04               	movwf	___lwmod@divisor+1,c
 20949  003428  0E2C               	movlw	44
 20950  00342A  6E03               	movwf	___lwmod@divisor,c
 20951  00342C  EC4D  F020         	call	___lwmod	;wreg free
 20952  003430  5001               	movf	?___lwmod,w,c
 20953  003432  1002               	iorwf	?___lwmod+1,w,c
 20954  003434  A4D8               	btfss	status,2,c
 20955  003436  D003               	goto	i2l1146
 20956                           
 20957                           ;tmr0.c: 157: {
 20958                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 20959  003438  0E01               	movlw	1
 20960  00343A  0101               	movlb	1	; () banked
 20961  00343C  6FEC               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 20962  00343E                     i2l1146:
 20963                           
 20964                           ;tmr0.c: 159: }
 20965                           ;tmr0.c: 160: if ((CountCallBack % 200) == 0)
 20966                           
 20967                           ; BSR set to: 1
 20968  00343E  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 20969  003442  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 20970  003446  0E00               	movlw	0
 20971  003448  6E04               	movwf	___lwmod@divisor+1,c
 20972  00344A  0EC8               	movlw	200
 20973  00344C  6E03               	movwf	___lwmod@divisor,c
 20974  00344E  EC4D  F020         	call	___lwmod	;wreg free
 20975  003452  5001               	movf	?___lwmod,w,c
 20976  003454  1002               	iorwf	?___lwmod+1,w,c
 20977  003456  A4D8               	btfss	status,2,c
 20978  003458  D003               	goto	i2l1147
 20979                           
 20980                           ;tmr0.c: 161: {
 20981                           ;tmr0.c: 162: TimertenSecFlag = 1;
 20982  00345A  0E01               	movlw	1
 20983  00345C  0101               	movlb	1	; () banked
 20984  00345E  6FEB               	movwf	_TimertenSecFlag& (0+255),b	;volatile
 20985  003460                     i2l1147:
 20986                           
 20987                           ;tmr0.c: 163: }
 20988                           ;tmr0.c: 165: CountCallBack %= 300;
 20989                           
 20990                           ; BSR set to: 1
 20991  003460  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 20992  003464  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 20993  003468  0E01               	movlw	1
 20994  00346A  6E04               	movwf	___lwmod@divisor+1,c
 20995  00346C  0E2C               	movlw	44
 20996  00346E  6E03               	movwf	___lwmod@divisor,c
 20997  003470  EC4D  F020         	call	___lwmod	;wreg free
 20998  003474  C001  F035         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 20999  003478  C002  F036         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 21000  00347C  0012               	return		;funcret
 21001  00347E                     __end_of_TMR0_ISR:
 21002                           	opt stack 0
 21003                           tosu	equ	0xFFF
 21004                           tosh	equ	0xFFE
 21005                           tosl	equ	0xFFD
 21006                           pclatu	equ	0xFFB
 21007                           pclath	equ	0xFFA
 21008                           tblptru	equ	0xFF8
 21009                           tblptrh	equ	0xFF7
 21010                           tblptrl	equ	0xFF6
 21011                           tablat	equ	0xFF5
 21012                           prodh	equ	0xFF4
 21013                           prodl	equ	0xFF3
 21014                           intcon	equ	0xFF2
 21015                           intcon2	equ	0xFF1
 21016                           indf0	equ	0xFEF
 21017                           postinc0	equ	0xFEE
 21018                           fsr0h	equ	0xFEA
 21019                           fsr0l	equ	0xFE9
 21020                           wreg	equ	0xFE8
 21021                           indf1	equ	0xFE7
 21022                           postdec1	equ	0xFE5
 21023                           fsr1h	equ	0xFE2
 21024                           fsr1l	equ	0xFE1
 21025                           indf2	equ	0xFDF
 21026                           postinc2	equ	0xFDE
 21027                           postdec2	equ	0xFDD
 21028                           fsr2h	equ	0xFDA
 21029                           fsr2l	equ	0xFD9
 21030                           status	equ	0xFD8
 21031                           
 21032 ;; *************** function ___lwmod *****************
 21033 ;; Defined at:
 21034 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 21035 ;; Parameters:    Size  Location     Type
 21036 ;;  dividend        2    0[COMRAM] unsigned int 
 21037 ;;  divisor         2    2[COMRAM] unsigned int 
 21038 ;; Auto vars:     Size  Location     Type
 21039 ;;  counter         1    4[COMRAM] unsigned char 
 21040 ;; Return value:  Size  Location     Type
 21041 ;;                  2    0[COMRAM] unsigned int 
 21042 ;; Registers used:
 21043 ;;		wreg, status,2, status,0
 21044 ;; Tracked objects:
 21045 ;;		On entry : 0/0
 21046 ;;		On exit  : 0/0
 21047 ;;		Unchanged: 0/0
 21048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21049 ;;      Params:         4       0       0       0       0       0       0
 21050 ;;      Locals:         1       0       0       0       0       0       0
 21051 ;;      Temps:          0       0       0       0       0       0       0
 21052 ;;      Totals:         5       0       0       0       0       0       0
 21053 ;;Total ram usage:        5 bytes
 21054 ;; Hardware stack levels used:    1
 21055 ;; This function calls:
 21056 ;;		Nothing
 21057 ;; This function is called by:
 21058 ;;		_TMR0_ISR
 21059 ;; This function uses a non-reentrant model
 21060 ;;
 21061                           
 21062                           	psect	text95
 21063  00409A                     __ptext95:
 21064                           	opt stack 0
 21065  00409A                     ___lwmod:
 21066                           	opt stack 20
 21067                           
 21068                           ;incstack = 0
 21069  00409A  5003               	movf	___lwmod@divisor,w,c
 21070  00409C  1004               	iorwf	___lwmod@divisor+1,w,c
 21071  00409E  B4D8               	btfsc	status,2,c
 21072  0040A0  D018               	goto	i2l2191
 21073  0040A2  0E01               	movlw	1
 21074  0040A4  6E05               	movwf	___lwmod@counter,c
 21075  0040A6  D004               	goto	i2l2186
 21076  0040A8  90D8               	bcf	status,0,c
 21077  0040AA  3603               	rlcf	___lwmod@divisor,f,c
 21078  0040AC  3604               	rlcf	___lwmod@divisor+1,f,c
 21079  0040AE  2A05               	incf	___lwmod@counter,f,c
 21080  0040B0                     i2l2186:
 21081  0040B0  AE04               	btfss	___lwmod@divisor+1,7,c
 21082  0040B2  D7FA               	goto	i2l2187
 21083  0040B4                     i2u645_40:
 21084  0040B4  5003               	movf	___lwmod@divisor,w,c
 21085  0040B6  5C01               	subwf	___lwmod@dividend,w,c
 21086  0040B8  5004               	movf	___lwmod@divisor+1,w,c
 21087  0040BA  5802               	subwfb	___lwmod@dividend+1,w,c
 21088  0040BC  A0D8               	btfss	status,0,c
 21089  0040BE  D004               	goto	i2l2190
 21090  0040C0  5003               	movf	___lwmod@divisor,w,c
 21091  0040C2  5E01               	subwf	___lwmod@dividend,f,c
 21092  0040C4  5004               	movf	___lwmod@divisor+1,w,c
 21093  0040C6  5A02               	subwfb	___lwmod@dividend+1,f,c
 21094  0040C8                     i2l2190:
 21095  0040C8  90D8               	bcf	status,0,c
 21096  0040CA  3204               	rrcf	___lwmod@divisor+1,f,c
 21097  0040CC  3203               	rrcf	___lwmod@divisor,f,c
 21098  0040CE  2E05               	decfsz	___lwmod@counter,f,c
 21099  0040D0  D7F1               	goto	i2u645_40
 21100  0040D2                     i2l2191:
 21101  0040D2  C001  F001         	movff	___lwmod@dividend,?___lwmod
 21102  0040D6  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 21103  0040DA  0012               	return		;funcret
 21104  0040DC                     __end_of___lwmod:
 21105                           	opt stack 0
 21106                           tosu	equ	0xFFF
 21107                           tosh	equ	0xFFE
 21108                           tosl	equ	0xFFD
 21109                           pclatu	equ	0xFFB
 21110                           pclath	equ	0xFFA
 21111                           tblptru	equ	0xFF8
 21112                           tblptrh	equ	0xFF7
 21113                           tblptrl	equ	0xFF6
 21114                           tablat	equ	0xFF5
 21115                           prodh	equ	0xFF4
 21116                           prodl	equ	0xFF3
 21117                           intcon	equ	0xFF2
 21118                           intcon2	equ	0xFF1
 21119                           indf0	equ	0xFEF
 21120                           postinc0	equ	0xFEE
 21121                           fsr0h	equ	0xFEA
 21122                           fsr0l	equ	0xFE9
 21123                           wreg	equ	0xFE8
 21124                           indf1	equ	0xFE7
 21125                           postdec1	equ	0xFE5
 21126                           fsr1h	equ	0xFE2
 21127                           fsr1l	equ	0xFE1
 21128                           indf2	equ	0xFDF
 21129                           postinc2	equ	0xFDE
 21130                           postdec2	equ	0xFDD
 21131                           fsr2h	equ	0xFDA
 21132                           fsr2l	equ	0xFD9
 21133                           status	equ	0xFD8
 21134                           
 21135 ;; *************** function _PIN_MANAGER_IOC *****************
 21136 ;; Defined at:
 21137 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 21138 ;; Parameters:    Size  Location     Type
 21139 ;;		None
 21140 ;; Auto vars:     Size  Location     Type
 21141 ;;		None
 21142 ;; Return value:  Size  Location     Type
 21143 ;;                  1    wreg      void 
 21144 ;; Registers used:
 21145 ;;		None
 21146 ;; Tracked objects:
 21147 ;;		On entry : 0/0
 21148 ;;		On exit  : 0/0
 21149 ;;		Unchanged: 0/0
 21150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21151 ;;      Params:         0       0       0       0       0       0       0
 21152 ;;      Locals:         0       0       0       0       0       0       0
 21153 ;;      Temps:          0       0       0       0       0       0       0
 21154 ;;      Totals:         0       0       0       0       0       0       0
 21155 ;;Total ram usage:        0 bytes
 21156 ;; Hardware stack levels used:    1
 21157 ;; This function calls:
 21158 ;;		Nothing
 21159 ;; This function is called by:
 21160 ;;		_INTERRUPT_InterruptManager
 21161 ;; This function uses a non-reentrant model
 21162 ;;
 21163                           
 21164                           	psect	text96
 21165  0045B4                     __ptext96:
 21166                           	opt stack 0
 21167  0045B4                     _PIN_MANAGER_IOC:
 21168                           	opt stack 21
 21169                           
 21170                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 21171                           
 21172                           ;incstack = 0
 21173  0045B4  90F2               	bcf	intcon,0,c	;volatile
 21174  0045B6  0012               	return		;funcret
 21175  0045B8                     __end_of_PIN_MANAGER_IOC:
 21176                           	opt stack 0
 21177                           tosu	equ	0xFFF
 21178                           tosh	equ	0xFFE
 21179                           tosl	equ	0xFFD
 21180                           pclatu	equ	0xFFB
 21181                           pclath	equ	0xFFA
 21182                           tblptru	equ	0xFF8
 21183                           tblptrh	equ	0xFF7
 21184                           tblptrl	equ	0xFF6
 21185                           tablat	equ	0xFF5
 21186                           prodh	equ	0xFF4
 21187                           prodl	equ	0xFF3
 21188                           intcon	equ	0xFF2
 21189                           intcon2	equ	0xFF1
 21190                           indf0	equ	0xFEF
 21191                           postinc0	equ	0xFEE
 21192                           fsr0h	equ	0xFEA
 21193                           fsr0l	equ	0xFE9
 21194                           wreg	equ	0xFE8
 21195                           indf1	equ	0xFE7
 21196                           postdec1	equ	0xFE5
 21197                           fsr1h	equ	0xFE2
 21198                           fsr1l	equ	0xFE1
 21199                           indf2	equ	0xFDF
 21200                           postinc2	equ	0xFDE
 21201                           postdec2	equ	0xFDD
 21202                           fsr2h	equ	0xFDA
 21203                           fsr2l	equ	0xFD9
 21204                           status	equ	0xFD8
 21205                           
 21206 ;; *************** function _MEMORY_ISR *****************
 21207 ;; Defined at:
 21208 ;;		line 206 in file "mcc_generated_files/memory.c"
 21209 ;; Parameters:    Size  Location     Type
 21210 ;;		None
 21211 ;; Auto vars:     Size  Location     Type
 21212 ;;		None
 21213 ;; Return value:  Size  Location     Type
 21214 ;;                  1    wreg      void 
 21215 ;; Registers used:
 21216 ;;		None
 21217 ;; Tracked objects:
 21218 ;;		On entry : 0/0
 21219 ;;		On exit  : 0/0
 21220 ;;		Unchanged: 0/0
 21221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21222 ;;      Params:         0       0       0       0       0       0       0
 21223 ;;      Locals:         0       0       0       0       0       0       0
 21224 ;;      Temps:          0       0       0       0       0       0       0
 21225 ;;      Totals:         0       0       0       0       0       0       0
 21226 ;;Total ram usage:        0 bytes
 21227 ;; Hardware stack levels used:    1
 21228 ;; This function calls:
 21229 ;;		Nothing
 21230 ;; This function is called by:
 21231 ;;		_INTERRUPT_InterruptManager
 21232 ;; This function uses a non-reentrant model
 21233 ;;
 21234                           
 21235                           	psect	text97
 21236  0045B8                     __ptext97:
 21237                           	opt stack 0
 21238  0045B8                     _MEMORY_ISR:
 21239                           	opt stack 21
 21240                           
 21241                           ;memory.c: 209: PIR2bits.EEIF = 0;
 21242                           
 21243                           ;incstack = 0
 21244  0045B8  98A1               	bcf	4001,4,c	;volatile
 21245  0045BA  0012               	return		;funcret
 21246  0045BC                     __end_of_MEMORY_ISR:
 21247                           	opt stack 0
 21248                           tosu	equ	0xFFF
 21249                           tosh	equ	0xFFE
 21250                           tosl	equ	0xFFD
 21251                           pclatu	equ	0xFFB
 21252                           pclath	equ	0xFFA
 21253                           tblptru	equ	0xFF8
 21254                           tblptrh	equ	0xFF7
 21255                           tblptrl	equ	0xFF6
 21256                           tablat	equ	0xFF5
 21257                           prodh	equ	0xFF4
 21258                           prodl	equ	0xFF3
 21259                           intcon	equ	0xFF2
 21260                           intcon2	equ	0xFF1
 21261                           indf0	equ	0xFEF
 21262                           postinc0	equ	0xFEE
 21263                           fsr0h	equ	0xFEA
 21264                           fsr0l	equ	0xFE9
 21265                           wreg	equ	0xFE8
 21266                           indf1	equ	0xFE7
 21267                           postdec1	equ	0xFE5
 21268                           fsr1h	equ	0xFE2
 21269                           fsr1l	equ	0xFE1
 21270                           indf2	equ	0xFDF
 21271                           postinc2	equ	0xFDE
 21272                           postdec2	equ	0xFDD
 21273                           fsr2h	equ	0xFDA
 21274                           fsr2l	equ	0xFD9
 21275                           status	equ	0xFD8
 21276                           
 21277 ;; *************** function _EUSART1_Transmit_ISR *****************
 21278 ;; Defined at:
 21279 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 21280 ;; Parameters:    Size  Location     Type
 21281 ;;		None
 21282 ;; Auto vars:     Size  Location     Type
 21283 ;;		None
 21284 ;; Return value:  Size  Location     Type
 21285 ;;                  1    wreg      void 
 21286 ;; Registers used:
 21287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21288 ;; Tracked objects:
 21289 ;;		On entry : 0/0
 21290 ;;		On exit  : 0/0
 21291 ;;		Unchanged: 0/0
 21292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21293 ;;      Params:         0       0       0       0       0       0       0
 21294 ;;      Locals:         0       0       0       0       0       0       0
 21295 ;;      Temps:          0       0       0       0       0       0       0
 21296 ;;      Totals:         0       0       0       0       0       0       0
 21297 ;;Total ram usage:        0 bytes
 21298 ;; Hardware stack levels used:    1
 21299 ;; This function calls:
 21300 ;;		Nothing
 21301 ;; This function is called by:
 21302 ;;		_INTERRUPT_InterruptManager
 21303 ;; This function uses a non-reentrant model
 21304 ;;
 21305                           
 21306                           	psect	text98
 21307  004200                     __ptext98:
 21308                           	opt stack 0
 21309  004200                     _EUSART1_Transmit_ISR:
 21310                           	opt stack 21
 21311                           
 21312                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 21313                           
 21314                           ;incstack = 0
 21315  004200  0E46               	movlw	70
 21316  004202  0101               	movlb	1	; () banked
 21317  004204  61F3               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 21318  004206  D012               	goto	i2l982
 21319                           
 21320                           ; BSR set to: 1
 21321                           ;eusart1.c: 186: {
 21322                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 21323  004208  503B               	movf	_eusart1TxTail,w,c	;volatile
 21324  00420A  0D01               	mullw	1
 21325  00420C  0E00               	movlw	low _eusart1TxBuffer
 21326  00420E  24F3               	addwf	prodl,w,c
 21327  004210  6ED9               	movwf	fsr2l,c
 21328  004212  0E02               	movlw	high _eusart1TxBuffer
 21329  004214  20F4               	addwfc	prodh,w,c
 21330  004216  6EDA               	movwf	fsr2h,c
 21331  004218  50DF               	movf	indf2,w,c
 21332  00421A  6EAD               	movwf	4013,c	;volatile
 21333                           
 21334                           ; BSR set to: 1
 21335  00421C  2A3B               	incf	_eusart1TxTail,f,c	;volatile
 21336                           
 21337                           ; BSR set to: 1
 21338                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 21339  00421E  0E45               	movlw	69
 21340  004220  643B               	cpfsgt	_eusart1TxTail,c	;volatile
 21341  004222  D002               	goto	i2l983
 21342                           
 21343                           ; BSR set to: 1
 21344                           ;eusart1.c: 189: {
 21345                           ;eusart1.c: 190: eusart1TxTail = 0;
 21346  004224  0E00               	movlw	0
 21347  004226  6E3B               	movwf	_eusart1TxTail,c	;volatile
 21348  004228                     i2l983:
 21349                           
 21350                           ; BSR set to: 1
 21351                           ;eusart1.c: 191: }
 21352                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 21353                           
 21354                           ; BSR set to: 1
 21355  004228  2BF3               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 21356                           
 21357                           ;eusart1.c: 193: }
 21358  00422A  0012               	return	
 21359  00422C                     i2l982:
 21360                           
 21361                           ; BSR set to: 1
 21362                           ;eusart1.c: 194: else
 21363                           ;eusart1.c: 195: {
 21364                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 21365  00422C  989D               	bcf	3997,4,c	;volatile
 21366                           
 21367                           ; BSR set to: 1
 21368                           ;eusart1.c: 197: eusart1TxTail = 0;
 21369  00422E  0E00               	movlw	0
 21370  004230  6E3B               	movwf	_eusart1TxTail,c	;volatile
 21371                           
 21372                           ;eusart1.c: 198: eusart1TxHead = 0;
 21373  004232  0E00               	movlw	0
 21374  004234  6E3C               	movwf	_eusart1TxHead,c	;volatile
 21375  004236  0012               	return	
 21376  004238                     __end_of_EUSART1_Transmit_ISR:
 21377                           	opt stack 0
 21378                           tosu	equ	0xFFF
 21379                           tosh	equ	0xFFE
 21380                           tosl	equ	0xFFD
 21381                           pclatu	equ	0xFFB
 21382                           pclath	equ	0xFFA
 21383                           tblptru	equ	0xFF8
 21384                           tblptrh	equ	0xFF7
 21385                           tblptrl	equ	0xFF6
 21386                           tablat	equ	0xFF5
 21387                           prodh	equ	0xFF4
 21388                           prodl	equ	0xFF3
 21389                           intcon	equ	0xFF2
 21390                           intcon2	equ	0xFF1
 21391                           indf0	equ	0xFEF
 21392                           postinc0	equ	0xFEE
 21393                           fsr0h	equ	0xFEA
 21394                           fsr0l	equ	0xFE9
 21395                           wreg	equ	0xFE8
 21396                           indf1	equ	0xFE7
 21397                           postdec1	equ	0xFE5
 21398                           fsr1h	equ	0xFE2
 21399                           fsr1l	equ	0xFE1
 21400                           indf2	equ	0xFDF
 21401                           postinc2	equ	0xFDE
 21402                           postdec2	equ	0xFDD
 21403                           fsr2h	equ	0xFDA
 21404                           fsr2l	equ	0xFD9
 21405                           status	equ	0xFD8
 21406                           
 21407 ;; *************** function _EUSART1_Receive_ISR *****************
 21408 ;; Defined at:
 21409 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 21410 ;; Parameters:    Size  Location     Type
 21411 ;;		None
 21412 ;; Auto vars:     Size  Location     Type
 21413 ;;		None
 21414 ;; Return value:  Size  Location     Type
 21415 ;;                  1    wreg      void 
 21416 ;; Registers used:
 21417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21418 ;; Tracked objects:
 21419 ;;		On entry : 0/0
 21420 ;;		On exit  : 0/0
 21421 ;;		Unchanged: 0/0
 21422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21423 ;;      Params:         0       0       0       0       0       0       0
 21424 ;;      Locals:         0       0       0       0       0       0       0
 21425 ;;      Temps:          0       0       0       0       0       0       0
 21426 ;;      Totals:         0       0       0       0       0       0       0
 21427 ;;Total ram usage:        0 bytes
 21428 ;; Hardware stack levels used:    1
 21429 ;; This function calls:
 21430 ;;		Nothing
 21431 ;; This function is called by:
 21432 ;;		_INTERRUPT_InterruptManager
 21433 ;; This function uses a non-reentrant model
 21434 ;;
 21435                           
 21436                           	psect	text99
 21437  0042D8                     __ptext99:
 21438                           	opt stack 0
 21439  0042D8                     _EUSART1_Receive_ISR:
 21440                           	opt stack 21
 21441                           
 21442                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 21443                           
 21444                           ; BSR set to: 1
 21445                           ;incstack = 0
 21446  0042D8  A2AB               	btfss	4011,1,c	;volatile
 21447  0042DA  D002               	goto	i2l988
 21448                           
 21449                           ;eusart1.c: 206: {
 21450                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 21451  0042DC  98AB               	bcf	4011,4,c	;volatile
 21452                           
 21453                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 21454  0042DE  88AB               	bsf	4011,4,c	;volatile
 21455  0042E0                     i2l988:
 21456                           
 21457                           ;eusart1.c: 210: }
 21458                           ;eusart1.c: 212: TXREG1 = RCREG1;
 21459  0042E0  CFAE FFAD          	movff	4014,4013	;volatile
 21460                           
 21461                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 21462  0042E4  503A               	movf	_eusart1RxHead,w,c	;volatile
 21463  0042E6  0D01               	mullw	1
 21464  0042E8  0E46               	movlw	low _eusart1RxBuffer
 21465  0042EA  24F3               	addwf	prodl,w,c
 21466  0042EC  6ED9               	movwf	fsr2l,c
 21467  0042EE  0E02               	movlw	high _eusart1RxBuffer
 21468  0042F0  20F4               	addwfc	prodh,w,c
 21469  0042F2  6EDA               	movwf	fsr2h,c
 21470  0042F4  CFAE FFDF          	movff	4014,indf2	;volatile
 21471  0042F8  2A3A               	incf	_eusart1RxHead,f,c	;volatile
 21472                           
 21473                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 21474  0042FA  0E27               	movlw	39
 21475  0042FC  643A               	cpfsgt	_eusart1RxHead,c	;volatile
 21476  0042FE  D002               	goto	i2l989
 21477                           
 21478                           ;eusart1.c: 217: {
 21479                           ;eusart1.c: 218: eusart1RxHead = 0;
 21480  004300  0E00               	movlw	0
 21481  004302  6E3A               	movwf	_eusart1RxHead,c	;volatile
 21482  004304                     i2l989:
 21483                           
 21484                           ;eusart1.c: 219: }
 21485                           ;eusart1.c: 220: eusart1RxCount++;
 21486  004304  0101               	movlb	1	; () banked
 21487  004306  2BE7               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 21488                           
 21489                           ; BSR set to: 1
 21490  004308  0012               	return		;funcret
 21491  00430A                     __end_of_EUSART1_Receive_ISR:
 21492                           	opt stack 0
 21493                           tosu	equ	0xFFF
 21494                           tosh	equ	0xFFE
 21495                           tosl	equ	0xFFD
 21496                           pclatu	equ	0xFFB
 21497                           pclath	equ	0xFFA
 21498                           tblptru	equ	0xFF8
 21499                           tblptrh	equ	0xFF7
 21500                           tblptrl	equ	0xFF6
 21501                           tablat	equ	0xFF5
 21502                           prodh	equ	0xFF4
 21503                           prodl	equ	0xFF3
 21504                           intcon	equ	0xFF2
 21505                           intcon2	equ	0xFF1
 21506                           indf0	equ	0xFEF
 21507                           postinc0	equ	0xFEE
 21508                           fsr0h	equ	0xFEA
 21509                           fsr0l	equ	0xFE9
 21510                           wreg	equ	0xFE8
 21511                           indf1	equ	0xFE7
 21512                           postdec1	equ	0xFE5
 21513                           fsr1h	equ	0xFE2
 21514                           fsr1l	equ	0xFE1
 21515                           indf2	equ	0xFDF
 21516                           postinc2	equ	0xFDE
 21517                           postdec2	equ	0xFDD
 21518                           fsr2h	equ	0xFDA
 21519                           fsr2l	equ	0xFD9
 21520                           status	equ	0xFD8
 21521                           tosu	equ	0xFFF
 21522                           tosh	equ	0xFFE
 21523                           tosl	equ	0xFFD
 21524                           pclatu	equ	0xFFB
 21525                           pclath	equ	0xFFA
 21526                           tblptru	equ	0xFF8
 21527                           tblptrh	equ	0xFF7
 21528                           tblptrl	equ	0xFF6
 21529                           tablat	equ	0xFF5
 21530                           prodh	equ	0xFF4
 21531                           prodl	equ	0xFF3
 21532                           intcon	equ	0xFF2
 21533                           intcon2	equ	0xFF1
 21534                           indf0	equ	0xFEF
 21535                           postinc0	equ	0xFEE
 21536                           fsr0h	equ	0xFEA
 21537                           fsr0l	equ	0xFE9
 21538                           wreg	equ	0xFE8
 21539                           indf1	equ	0xFE7
 21540                           postdec1	equ	0xFE5
 21541                           fsr1h	equ	0xFE2
 21542                           fsr1l	equ	0xFE1
 21543                           indf2	equ	0xFDF
 21544                           postinc2	equ	0xFDE
 21545                           postdec2	equ	0xFDD
 21546                           fsr2h	equ	0xFDA
 21547                           fsr2l	equ	0xFD9
 21548                           status	equ	0xFD8
 21549                           
 21550                           	psect	text100
 21551  000000                     __ptext100:
 21552                           	opt stack 0
 21553                           tosu	equ	0xFFF
 21554                           tosh	equ	0xFFE
 21555                           tosl	equ	0xFFD
 21556                           pclatu	equ	0xFFB
 21557                           pclath	equ	0xFFA
 21558                           tblptru	equ	0xFF8
 21559                           tblptrh	equ	0xFF7
 21560                           tblptrl	equ	0xFF6
 21561                           tablat	equ	0xFF5
 21562                           prodh	equ	0xFF4
 21563                           prodl	equ	0xFF3
 21564                           intcon	equ	0xFF2
 21565                           intcon2	equ	0xFF1
 21566                           indf0	equ	0xFEF
 21567                           postinc0	equ	0xFEE
 21568                           fsr0h	equ	0xFEA
 21569                           fsr0l	equ	0xFE9
 21570                           wreg	equ	0xFE8
 21571                           indf1	equ	0xFE7
 21572                           postdec1	equ	0xFE5
 21573                           fsr1h	equ	0xFE2
 21574                           fsr1l	equ	0xFE1
 21575                           indf2	equ	0xFDF
 21576                           postinc2	equ	0xFDE
 21577                           postdec2	equ	0xFDD
 21578                           fsr2h	equ	0xFDA
 21579                           fsr2l	equ	0xFD9
 21580                           status	equ	0xFD8
 21581                           
 21582                           	psect	rparam
 21583  0000                     tosu	equ	0xFFF
 21584                           tosh	equ	0xFFE
 21585                           tosl	equ	0xFFD
 21586                           pclatu	equ	0xFFB
 21587                           pclath	equ	0xFFA
 21588                           tblptru	equ	0xFF8
 21589                           tblptrh	equ	0xFF7
 21590                           tblptrl	equ	0xFF6
 21591                           tablat	equ	0xFF5
 21592                           prodh	equ	0xFF4
 21593                           prodl	equ	0xFF3
 21594                           intcon	equ	0xFF2
 21595                           intcon2	equ	0xFF1
 21596                           indf0	equ	0xFEF
 21597                           postinc0	equ	0xFEE
 21598                           fsr0h	equ	0xFEA
 21599                           fsr0l	equ	0xFE9
 21600                           wreg	equ	0xFE8
 21601                           indf1	equ	0xFE7
 21602                           postdec1	equ	0xFE5
 21603                           fsr1h	equ	0xFE2
 21604                           fsr1l	equ	0xFE1
 21605                           indf2	equ	0xFDF
 21606                           postinc2	equ	0xFDE
 21607                           postdec2	equ	0xFDD
 21608                           fsr2h	equ	0xFDA
 21609                           fsr2l	equ	0xFD9
 21610                           status	equ	0xFD8
 21611                           
 21612                           	psect	temp
 21613  000048                     btemp:
 21614                           	opt stack 0
 21615  000048                     	ds	1
 21616  0000                     int$flags	set	btemp
 21617  0000                     wtemp6	set	btemp+1
 21618                           tosu	equ	0xFFF
 21619                           tosh	equ	0xFFE
 21620                           tosl	equ	0xFFD
 21621                           pclatu	equ	0xFFB
 21622                           pclath	equ	0xFFA
 21623                           tblptru	equ	0xFF8
 21624                           tblptrh	equ	0xFF7
 21625                           tblptrl	equ	0xFF6
 21626                           tablat	equ	0xFF5
 21627                           prodh	equ	0xFF4
 21628                           prodl	equ	0xFF3
 21629                           intcon	equ	0xFF2
 21630                           intcon2	equ	0xFF1
 21631                           indf0	equ	0xFEF
 21632                           postinc0	equ	0xFEE
 21633                           fsr0h	equ	0xFEA
 21634                           fsr0l	equ	0xFE9
 21635                           wreg	equ	0xFE8
 21636                           indf1	equ	0xFE7
 21637                           postdec1	equ	0xFE5
 21638                           fsr1h	equ	0xFE2
 21639                           fsr1l	equ	0xFE1
 21640                           indf2	equ	0xFDF
 21641                           postinc2	equ	0xFDE
 21642                           postdec2	equ	0xFDD
 21643                           fsr2h	equ	0xFDA
 21644                           fsr2l	equ	0xFD9
 21645                           status	equ	0xFD8


Data Sizes:
    Strings     1797
    Constant    295
    Data        20
    BSS         337
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    143     143
    BANK1           256    133     244
    BANK2           256      0     228
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartByte$3960	PTR FTN()void  size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 

    GroupCommon@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 101
		 -> STR_69(CODE[22]), STR_68(CODE[15]), STR_67(CODE[22]), STR_66(CODE[13]), 
		 -> STR_65(CODE[13]), STR_64(CODE[23]), STR_63(CODE[10]), STR_62(CODE[24]), 
		 -> STR_61(CODE[36]), STR_60(CODE[24]), STR_59(CODE[36]), STR_58(CODE[22]), 
		 -> STR_57(CODE[22]), STR_56(CODE[15]), STR_55(CODE[22]), STR_54(CODE[13]), 
		 -> STR_53(CODE[13]), STR_52(CODE[23]), STR_51(CODE[10]), STR_50(CODE[24]), 
		 -> STR_49(CODE[36]), STR_48(CODE[24]), STR_47(CODE[59]), STR_46(CODE[22]), 
		 -> STR_43(CODE[4]), STR_42(CODE[73]), STR_41(CODE[37]), STR_40(CODE[38]), 
		 -> STR_39(CODE[86]), STR_38(CODE[53]), STR_37(CODE[46]), STR_36(CODE[29]), 
		 -> STR_35(CODE[101]), STR_34(CODE[86]), STR_33(CODE[61]), STR_32(CODE[62]), 
		 -> STR_31(CODE[45]), STR_30(CODE[74]), STR_29(CODE[25]), STR_28(CODE[79]), 
		 -> STR_27(CODE[75]), STR_26(CODE[46]), STR_25(CODE[61]), STR_24(CODE[66]), 
		 -> STR_23(CODE[23]), STR_22(CODE[31]), STR_20(CODE[20]), STR_18(CODE[20]), 
		 -> STR_16(CODE[18]), STR_15(CODE[20]), STR_14(CODE[31]), STR_10(CODE[11]), 
		 -> STR_8(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_70(CODE[7]), STR_45(CODE[6]), STR_44(CODE[6]), STR_21(CODE[9]), 
		 -> STR_19(CODE[12]), STR_17(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> PrintTxStatus@dest(BANK1[80]), PrintRxStatus@dest(BANK1[80]), PrintSystemStatus@dest(COMRAM[50]), PrintHelpScreen@dest(BANK1[50]), 
		 -> SendUartSystemInitMessage@dest(BANK1[50]), readUartByte@dest(BANK1[50]), SampleSingleChannel@dest(BANK1[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 80
		 -> PrintTxStatus@dest(BANK1[80]), PrintRxStatus@dest(BANK1[80]), PrintHelpScreen@dest(BANK1[50]), SendUartSystemInitMessage@dest(BANK1[50]), 
		 -> STR_13(CODE[10]), STR_12(CODE[10]), STR_11(CODE[10]), readUartByte@dest(BANK1[50]), 
		 -> STR_9(CODE[9]), SampleSingleChannel@dest(BANK1[50]), STR_7(CODE[10]), STR_6(CODE[34]), 
		 -> STR_5(CODE[32]), STR_4(CODE[10]), STR_3(CODE[29]), STR_2(CODE[33]), 
		 -> STR_1(CODE[10]), 

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 

    S40$SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_45(CODE[6]), 

    txStatistics.SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_45(CODE[6]), 

    S25$SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_44(CODE[6]), 

    rxStatistics.SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_44(CODE[6]), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _CollectTxStatusParams->___lltoft
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _CollectRxStatusParams->___lltoft
    _AdcSingleSample->_UART_Write_Text
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    _UART_Write_Text->_EUSART1_Write
    ___lwtoft->___ftpack
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_ZeroArray
    _ZeroArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    _eval_poly->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftmul->___wmul
    ___ftadd->___ftmul
    ___ftdiv->___lwtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartByte
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _PrintTxStatus->_sprintf
    _PrintRxStatus->_sprintf
    _GetIntFromUartData->_strtol
    _PrintHelpScreen->_sprintf
    _SetMcuRunTime->___llmod
    _SendUartSystemInitMessage->_sprintf
    _SampleSingleChannel->_sprintf
    _sprintf->___llmod
    _scale->___ftmul
    _fround->___ftmul
    ___llmod->_pow
    _SampleAllChannels->_pow
    _InitSystemApplicationManagers->_DacInit
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_scale
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartByte
    _GroupTx->_PrintTxStatus
    _GroupRx->_PrintRxStatus

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1253452
                        _BlinkOkLeds
      _InitSystemApplicationManagers
                  _SampleAllChannels
                _SampleSingleChannel
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                        56    56      0  650850
                                            140 BANK0      3     3      0
                                             80 BANK1     53    53      0
                       _EUSART1_Read
                        _GroupCommon *
                            _GroupRx *
                            _GroupTx *
                _InitRxMessageParams
                    _UART_Write_Text
                            _sprintf
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    1909
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupTx                                             10     8      2  233290
                                            130 BANK0     10     8      2
                    _AdcSingleSample
              _CollectTxStatusParams
                 _GetIntFromUartData
                      _PrintTxStatus
                           ___awtoft
                            ___fttol
                            ___llmod
                                _pow
 ---------------------------------------------------------------------------------
 (3) _PrintTxStatus                                       80    80      0   90707
                                              0 BANK1     80    80      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _CollectTxStatusParams                                0     0      0    7269
                           ___lltoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _GroupRx                                             10     8      2  233290
                                            130 BANK0     10     8      2
                    _AdcSingleSample
              _CollectRxStatusParams
                 _GetIntFromUartData
                      _PrintRxStatus
                           ___awtoft
                            ___fttol
                            ___llmod
                                _pow
 ---------------------------------------------------------------------------------
 (3) _PrintRxStatus                                       80    80      0   90707
                                              0 BANK1     80    80      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _GetIntFromUartData                                  17    13      4    5161
                                              6 BANK0     17    13      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (4) _strtol                                              16    10      6    2453
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (6) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _CollectRxStatusParams                                0     0      0    7269
                           ___lltoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _AdcSingleSample                                     10     5      5    6349
                                             30 COMRAM    10     5      5
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (2) _GroupCommon                                          3     1      2   91367
                                            130 BANK0      3     1      2
                    _PrintHelpScreen
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _PrintHelpScreen                                     50    50      0   91203
                                              0 BANK1     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0    1672
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           50    50      0   90335
                                              0 BANK1     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SampleSingleChannel                                 59    59      0  225168
                                            130 BANK0      2     2      0
                                              0 BANK1     57    57      0
                  _ADC_GetConversion
                    _UART_Write_Text
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             43    36      7   84029
                                             92 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   17030
                                             18 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              10     7      3   16751
                                             18 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2053
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             29 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     634
                                             23 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     853
                                             23 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8    1672
                                             83 BANK0      9     1      8
                           ___awtoft (ARG)
                            ___fttol (ARG)
                            ___lldiv (ARG)
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     781
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      6     4      2    5862
                                             24 COMRAM     6     4      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SampleAllChannels                                    8     8      0  135335
                                             83 BANK0      8     8      0
                  _ADC_GetConversion
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    3644
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  149904
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0   12322
                                             38 BANK0      6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  137582
                                            106 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _StoreIntInEeprom                                     9     2      7    2340
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (4) _EepromWrite                                          2     1      1     339
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     219
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _SWSPI_send_word                                      9     4      5   11789
                                             39 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (4) _make8                                                9     4      5    1235
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SWSPI_Synth_send_bits                               42    38      4    4464
                                             35 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    1909
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (4) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _ReadIntFromEeprom                                   23    19      4  123196
                                             83 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 17    11      6  116383
                                             66 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   37652
                                             50 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                  9     6      3   60394
                                             57 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                7     2      5     539
                                             50 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                                8     5      3   13654
                                             48 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4    1811
                                             25 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1638
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             40 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   18595
                                             46 COMRAM     2     2      0
                                             40 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3582
                                             37 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    8521
                                             43 COMRAM     3     3      0
                                              6 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6294
                                             40 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5698
                                             28 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     425
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    4533
                                             34 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3746
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3625
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      44
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BlinkOkLeds
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SampleAllChannels
     _ADC_GetConversion
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
   _SampleSingleChannel
     _ADC_GetConversion
     _UART_Write_Text
       _EUSART1_Write
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SendUartSystemInitMessage
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SetMcuRunTime
     ___llmod
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       _pow (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _GroupCommon *
       _PrintHelpScreen
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _testLeds
     _GroupRx *
       _AdcSingleSample
         _UART_Write_Text
           _EUSART1_Write
       _CollectRxStatusParams
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
       _GetIntFromUartData
         _ZeroArray
           _memset
         _strtol
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _isalpha
             _isupper
           _isdigit
           _isspace
           _toupper
       _PrintRxStatus
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___awtoft
         ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _pow
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
     _GroupTx *
       _AdcSingleSample
         _UART_Write_Text
           _EUSART1_Write
       _CollectTxStatusParams
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
       _GetIntFromUartData
         _ZeroArray
           _memset
         _strtol
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _isalpha
             _isupper
           _isdigit
           _isspace
           _toupper
       _PrintTxStatus
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___awtoft
         ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _pow
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _UART_Write_Text *
       _EUSART1_Write
     _sprintf *
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _toupper *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      E4       8       89.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100     85      F4       6       95.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     8F      8F       4       89.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2AE       9        0.0%
DATA                 0      0     2AE      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 28 13:09:23 2018

              __end_of_keepAliveSignalLed 44EE                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 01F3                             ___altoft@sign 0030  
                                      l66 3C32                                        l68 3C78  
                            ___awdiv@sign 0023                       __end_of_BlinkOkLeds 3CD8  
                         _SWSPI_send_word 352C                       ___wmul@multiplicand 0028  
                         _timer0ReloadVal 0046            __size_of_CollectTxStatusParams 0076  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
           __end_of_CollectTxStatusParams 3A02                              ___ftadd@exp1 0087  
                            ___ftadd@exp2 0086                               __CFG_LVP$ON 000000  
           SampleSingleChannel@_adcResult 0135                              ___ftadd@sign 0085  
                             ?_MEMORY_ISR 0001                                       l300 0E64  
                                     l150 2B52                                       l142 2B10  
                                     l151 2B6C                                       l311 0F1A  
                                     l160 2BBA                                       l304 0E8E  
                                     l161 2BD4                                       l145 2B26  
                                     l305 0EA4                                       l170 1F0A  
                                     l154 2B78                                       l138 2AF6  
                                     l323 3A40                                       l171 1F28  
                                     l139 2AEE                                       l307 0EAA  
                                     l180 23B8                                       l324 3A0C  
                                     l156 2B8E                                       l148 2B3C  
                                     l308 0EEA                                       l181 23DA  
                                     l309 0EB4                                       l158 2BA4  
                                     l270 0CEC                                       l167 1F76  
                                     l176 22A8                                       l168 1ECE  
                                     l280 0D84                                       l169 1EEC  
                                     l265 0F58                                       l281 0D3C  
                                     l178 2374                                       l266 0CCA  
                                     l611 201E                                       l179 2396  
                                     l283 0D46                                       l275 0D0E  
                                     l700 3568                                       l284 0D50  
                                     l268 0CD6                                       l293 0DF8  
                                     l285 0D5A                                       l710 3E24  
                                     l294 0E34                                       l286 0D9A  
                                     l711 3DF0                                       l543 3066  
                                     l287 0E78                                       l279 0D2E  
                                     l712 3E0A                                       l720 338A  
                                     l704 35C2                                       l544 307C  
                                     l288 0DA8                                       l713 3E14  
                                     l721 3396                                       l801 4130  
                                     l609 1FB0                                       l289 0DE4  
                                     l802 413A                                       l299 0E48  
                                     l812 4180                                       l725 3E80  
                                     l813 4158                                       l726 3E44  
                                     l718 335C                                       l822 416C  
                                     l814 4162                                       l743 3E6C  
                                     l735 3E58                                       l727 3E4E  
                                     l823 4176                                       l744 3E76  
                                     l736 3E62                                       l833 44AC  
                                     l754 3ED6                                       l834 44A4  
                                     l755 3E9A                                       l772 3EC2  
                                     l764 3EAE                                       l756 3EA4  
                                     l773 3ECC                                       l765 3EB8  
                                     l838 44A8                                       l791 4144  
                                     l792 411C                                       l793 4126  
                                     l963 4028                                       l965 404E  
                                     l976 40F0                                       l977 4114  
                                     l978 4112                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                         ??_Make32bitsArray 001E  
                        PLLInitialize@idx 0088                                       _exp 1880  
                                     _log 2510                                       _pow 2112  
                            _txStatistics 0185                              ___awmod@sign 001D  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8            ?_InitSystemApplicationManagers 0001  
                            ___ftdiv@cntr 0060                              ___ftdiv@sign 0065  
                                    l2001 1CA0                                      l2010 1D30  
                                    l2005 1CCA                                      l2015 1D26  
                                    l2024 1D64                                      l2016 1D1C  
                                    l2200 4354                                      l2025 1D5A  
                                    l2201 4344                                      l2034 2DFA  
                                    l2042 240A                                      l1330 29B4  
                                    l2027 1D88                                      l2123 38BE  
                                    l2036 2E22                                      l2028 1DA4  
                                    l2060 37DC                                      l2212 215C  
                                    l1084 4292                                      l2124 38B2  
                                    l2044 2436                                      l2037 2E60  
                                    l2029 1DD4                                      l2213 214C  
                                    l2133 3B72                                      l2045 2470  
                                    l1333 29BE                                      l2038 2E86  
                                    l2070 2D6E                                      l1422 3DA8  
                                    l1430 41C0                                      l2134 3B66  
                                    l2054 24F8                                      l2046 2498  
                                    l1342 2768                                      l1326 2AA2  
                                    l2215 2174                                      l1431 4196  
                                    l2127 38F2                                      l2055 24EC  
                                    l2144 3D46                                      l2072 2D86  
                                    l2216 21FE                                      l1424 3DE6  
                                    l2128 3900                                      l2048 24D4  
                                    l1352 43EC                                      l2145 3D3A  
                                    l2073 2D96                                      l2217 21DC  
                                    l2137 3B9A                                      l2049 24C4  
                                    l1353 43E0                                      l2066 2D04  
                                    l2090 2C78                                      l2218 2284  
                                    l1450 3CDA                                      l2138 3BA8  
                                    l1442 35F4                                      l1338 2856  
                                    l2083 4070                                      l2059 37AC  
                                    l1347 2772                                      l1355 43E6  
                                    l2068 2D2C                                      l2420 1A3E  
                                    l1436 2982                                      l1452 3CDE  
                                    l2077 4438                                      l2069 2D5E  
                                    l1437 28A8                                      l1453 3CE2  
                                    l1189 4322                                      l2414 189A  
                                    l1454 3CE6                                      l1710 0572  
                                    l2095 2CAC                                      l2087 2C10  
                                    l1455 3D14                                      l1711 04DC  
                                    l1631 3BF6                                      l2096 2CA0  
                                    l2440 329E                                      l2416 18D4  
                                    l1720 062C                                      l2089 2C88  
                                    l2425 30C0                                      l2417 190E  
                                    l1449 3D18                                      l1713 0592  
                                    l1705 0480                                      l1633 3C08  
                                    l2098 2CC8                                      l2434 3714  
                                    l2426 30B2                                      l2442 32D0  
                                    l2418 193E                                      l1730 086C  
                                    l1722 0732                                      l1714 057C  
                                    l2443 32C4                                      l2419 1A68  
                                    l1731 07E2                                      l1723 071C  
                                    l2451 4386                                      l2371 1B6E  
                                    l2355 1AB6                                      l2428 30DA  
                                    l1716 05B6                                      l2372 1BDA  
                                    l1628 3BCC                                      l2429 3156  
                                    l1725 0776                                      l1717 05BA  
                                    l2461 43AC                                      l2365 1B32  
                                    l2357 1ACE                                      l1629 3BE4  
                                    l2438 3254                                      l1910 3846  
                                    l1662 0AB8                                      l1718 05DC  
                                    l2374 1BFE                                      l2366 1B42  
                                    l1823 3942                                      l1663 09DE  
                                    l1719 0710                                      l2375 1C3A  
                                    l2359 1B22                                      l1824 3936  
                                    l2480 2554                                      l1920 3A94  
                                    l1656 1382                                      l2456 445C  
                                    l2368 1B5C                                      l1913 386E  
                                    l1729 07D6                                      l1673 00EC  
                                    l1746 3EFC                                      l1914 3878  
                                    l1906 3820                                      l1922 3AAA  
                                    l1666 0A92                                      l1682 0114  
                                    l1674 0106                                      l2466 447A  
                                    l1747 3F10                                      l1915 3886  
                                    l1907 3830                                      l1923 3AA2  
                                    l1659 1452                                      l1667 0BE8  
                                    l1691 0288                                      l1675 0170  
                                    l2379 452A                                      l1940 2676  
                                    l1692 02EE                                      l1684 015C  
                                    l1941 26B8                                      l1909 384E  
                                    l1669 0C9C                                      l1685 013E  
                                    l1934 41DC                                      l2486 3222  
                                    l2478 2530                                      l1950 274A  
                                    l1942 26E8                                      l1926 3AC2  
                                    l1694 0314                                      l1678 0110  
                                    l2487 31A4                                      l1951 273E  
                                    l1927 3ACC                                      l1919 3A88  
                                    l1695 0354                                      l1679 01A4  
                                    l1944 2726                                      l1928 3ADA  
                                    l1688 073C                                      l1696 041A  
                                    l1945 2716                                      l1689 01F6  
                                    l1970 34A6                                      l1938 2658  
                                    l1971 349C                                      l1699 03C2  
                                    l1973 34DA                                      l1974 34C4  
                                    l1976 3502                                      l1977 34F8  
                                    l8043 3808                                      ?_exp 0099  
                                    ?_log 0092                                      l7247 3C84  
                                    l9201 077A                                      l8309 4344  
                                    l9221 07E2                                      l9117 0484  
                                    l9145 057C                                      l8611 3D98  
                                    l9413 3C22                                      l9097 039C  
                                    l9089 0354                                      l9283 3354  
                                    l8555 40DE                                      l9533 3590  
                                    l9529 3582                                      l9555 35E4  
                                    l9573 362C                                      ?_pow 00A2  
                                    l8919 1A3E                                      l9807 2068  
                                    l9903 22A0                                      l9771 3066  
                                    l9759 2FA4                                      l9783 1FA0  
                                    STR_1 7FCD                                      STR_2 7DE0  
                                    l9793 1FFA                                      STR_3 7E5D  
                                    STR_4 7FCD                                      STR_5 7E01  
                                    STR_6 7DBE                                      l9797 200E  
                                    STR_7 7FCD                                      STR_8 7FF6  
                                    STR_9 7FE0                        EepromWrite@address 001C  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u4715 42A0                                      u4716 42A2  
                                    u8021 2BF4                                      u8110 373C  
                                    u8040 2C2E                                      u9010 1918  
                                    u8131 2DE0                                      u9020 191A  
                                    u8220 3852                                      u6508 44E2  
                                    u9100 4378                                      u8045 2C26  
                                    u8118 373E                                      u8151 2E0A  
                                    u8080 2CB2                                      u9210 21C2  
                                    u6490 44E0                                      u9140 3A38  
                                    u7630 348E                                      u8350 30CC  
                                    u9150 3A6C                                      u8280 3AAE  
                                    u9080 43A8                                      u7721 1C5E  
                                    u9410 04BC                                      u9330 0326  
                                    u7731 1C72                                      u9147 3A2E  
                                    u7820 1CFA                                      u9340 0366  
                                    u9157 3A62                                      u7670 350C  
                                    u8390 3274                                      u8711 23EE  
                                    u7760 1C92                                      u9520 07B2  
                                    u9440 05A0                                      u9450 05B0  
                                    u9370 039C                                      u9290 022E  
                                    u7931 2CEC                                      u8731 241A  
                                    u7860 1D38                                      u8900 38C2  
                                    u9540 087C                                      u7790 1CBC  
                                    u8398 3278                                      u9630 33A8  
                                    u9550 0894                                      u9710 1AF8  
                                    u7951 2D14                                      u9295 0224  
                                    u9560 3D0C                                      u7890 1D6C  
                                    u8930 3B76                                      u9730 1B08  
                                    u8860 2750                                      u9565 3D02  
                                    u8790 24FE                                      u9910 2B64  
                                    u9680 1ABE                                      u9850 2B02  
                                    u9970 2BCC                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 40DC  
                 ??_InitAdcApplicationMgr 0018                                      _main 3BBA  
                            ___ftpack@arg 0018                             ?_EUSART1_Read 0001  
                            ___ftpack@exp 001B                           _TMR0_StartTimer 45B0  
                         __end_of_DacInit 3082                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      indf0 000FEF  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0099                                      log@x 0092  
               SampleSingleChannel@adcRes 0137                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A2                                      pow@y 00A5  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 4572                             _adcSampleMode 01E9  
                            _sprintf$3955 00C9               __end_of_SampleSingleChannel 1F88  
                         GroupCommon@data 00E2                              ___ftmul@cntr 0070  
                            ___param_bank 000000                              ___ftmul@sign 0071  
                 __end_of_UART_Write_Text 3A74                           __end_of_GroupRx 2AC8  
                         __end_of_GroupTx 2888                              ___fttol@exp1 0087  
               __size_of_DATAEE_WriteByte 0036                                     ??_exp 0031  
                                   ??_log 0031                              ___fttol@lval 0083  
                                   ??_pow 0031                   __end_of_TMR0_Initialize 42D8  
                  _ReadIntFromEeprom$3950 00BE                    _ReadIntFromEeprom$3951 00C1  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 4564  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                         __end_of___awdiv 3890                                     _EEADR 000FA9  
                         __end_of___ftadd 1DFA                                     STR_10 7FB8  
                                   STR_11 7FCD                                     STR_12 7FCD  
                                   STR_20 7F49                                     STR_13 7FCD  
                                   STR_21 7FD7                                     STR_22 7E21  
                                   STR_14 7E21                                     STR_30 7AA5  
                                   STR_15 7F35                                     STR_23 7EDB  
                                   STR_31 7CFE                                     STR_16 7F71  
                                   STR_40 7D2B                                     STR_32 7B7A  
                                   STR_24 7B38                                     STR_17 7FF0  
                                   STR_41 7D51                                     STR_33 7BF5  
                                   STR_25 7BB8           __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                                   STR_18 7F5D                                     STR_50 7EAB  
                                   STR_26 7CD0                                     STR_42 7AEF  
                                   STR_34 795F                                     STR_43 7FFB  
                                   STR_51 7FC3                                     STR_19 7FAC  
                                   STR_27 7A5A                                     STR_35 78FA  
                                   STR_60 7E93                                     STR_44 7FF0  
                                   STR_52 7EF2                                     STR_36 7E40  
                                   STR_28 7A0B                           __end_of___awmod 3AE4  
                                   STR_61 7D9A                                     STR_45 7FF0  
                                   STR_53 7F9F                                     STR_29 7E7A  
                                   STR_37 7CA2                                     STR_70 7FE9  
                                   STR_54 7F92                                     STR_46 7F09  
                                   STR_62 7EC3                                     STR_38 7C6D  
                                   STR_63 7FC3                                     STR_55 7F1F  
                                   STR_47 7C32                                     STR_39 79B5  
                                   STR_64 7EF2                                     STR_56 7F83  
                                   STR_48 7E93                                     STR_57 7F09  
                                   STR_65 7F9F                                     STR_49 7D9A  
                                   STR_58 7F09                                     STR_66 7F92  
                                   STR_67 7F1F                                     STR_59 7D76  
                                   STR_68 7F83                                     STR_69 7F09  
                         __end_of___ftdiv 2EB8                           __end_of___ftneg 4446  
                                   u10000 353C                           __end_of___lldiv 3912  
                                   u10030 35BC                                     u10070 362C  
                                   u10160 1FFA                                     u10400 0DD8  
                              _EepromRead 4592                                     u10180 2068  
                         __end_of___ftmul 2DD0                                     _T0CON 000FD5  
                                   u10460 0E28                           ___awdiv@divisor 0020  
                                   u10518 0F2E                                     u10519 0F50  
                                   u10480 0E58                           __end_of___llmod 3BBA  
                         __end_of___ftsub 409A                           __end_of___fttol 2CDA  
                                   u10827 3C3A                                     u10837 3C4A  
                                   u10847 3C5A                                     u10857 3C6A  
                                   u10867 1F5E                                     u10877 33AA  
                                   u10887 3CAA                                     u10897 3CC4  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwmod 40DC  
                   _CollectRxStatusParams 3AE4                       StoreIntInEeprom@idx 0029  
                                   i2l911 005E                                     i2l920 0090  
                                   i2l913 006A                                     i2l916 007A  
                                   i2l918 0086                           ___awdiv@counter 0022  
                                   i2l982 422C                                     i2l983 4228  
                                   i2l988 42E0                                     i2l989 4304  
                     StoreIntInEeprom@val 0028                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                     _SWSPI_DAC_send_bits 3DE8         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                          ?_PrintHelpScreen 0001  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 365A  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001E  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 4200  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 347E  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                           _DATAEE_ReadByte 452E  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 0023  
                 __end_of_PIN_MANAGER_IOC 45B8                                     _make8 3CD8  
                         __end_of_dpowers 7863            __size_of_SWSPI_Synth_send_bits 00C2  
                                   _count 01D6                                     _floor 3082  
                                   _ldexp 323A                         PrintRxStatus@dest 0100  
                                   _frexp 36EC                                     _errno 01D0  
           __end_of_SWSPI_Synth_send_bits 33CA                                     _scale 08A2  
                         __end_of_isalpha 438E                           __end_of_isdigit 4464  
                                   _group 01E5                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 001C                             ??_GroupCommon 0031  
                         __end_of_isspace 43B4                            ?_EUSART1_Write 0001  
                         __end_of_isupper 4482                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 00AF  
                          ??_EUSART1_Read 0018                                     status 000FD8  
                                   wtemp6 0049                           __end_of_sprintf 08A2  
                    ReadIntFromEeprom@idx 00C9                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 452E            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
                             exp@exponent 009F                      ?_SWSPI_DAC_send_bits 001A  
                             ldexp@newexp 0095                   __end_of_SWSPI_send_word 35C6  
                             _BlinkOkLeds 3C7A                           __initialization 365A  
                             log@exponent 0095                __end_of_EUSART1_Initialize 426E  
                            __end_of_main 3C1A               ?_INTERRUPT_InterruptManager 0001  
                                  ??_main 0031                             ___fttol@sign1 0082  
                       ?_SwSpi_Set_CE_Pin 0018                        _TimerKeepAliveFlag 01EC  
                           __activetblptr 000002                ?_SendUartSystemInitMessage 0001  
                    __size_of__tdiv_to_l_ 0132                              _writeAddress 0042  
                      ??_SwSpi_Set_CE_Pin 0019                     ?_EUSART1_Transmit_ISR 0001  
                 __end_of_TMR0_StartTimer 45B4                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 0090  
                                  ?_ldexp 0092                                    ?_frexp 0018  
                        __end_of___altoft 398C                          ___llmod@dividend 00B3  
                                  ?_scale 0072                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 00CA                                    _EECON2 000FA7  
                           ?_readUartByte 0001                          ___awdiv@dividend 001E  
                        __end_of___awtoft 4200                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 352C                          __end_of___lltoft 3D90  
                                  i2l1144 33FA                                    i2l1145 341C  
                                  i2l1146 343E                                    i2l1147 3460  
                                  i2l2190 40C8                                    i2l2191 40D2  
                                  i2l2186 40B0                                    i2l2187 40A8  
                          __CFG_WDTEN$OFF 000000                      StoreIntInEeprom@data 0021  
                                  _TABLAT 000FF5                               _EepromWrite 4564  
                                  _RCREG1 000FAE                          __end_of___lwtoft 4422  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 44A0                   __size_of_SwSpi_Data_Pin 0056  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                   ??_SWSPI_DAC_send_bits 001B                       __end_of_GroupCommon 43FE  
                               ??_GroupRx 00E4                                 ??_GroupTx 00E4  
                          __CFG_XINST$OFF 000000                               GroupRx@data 00E2  
                        __end_of__powers_ 788A                               GroupTx@data 00E2  
                                  _cState 01E6                                    ___ftge 377C  
                                  ___lmul 3EEC                 SWSPI_Synth_send_bits@data 0024  
                                  ___wmul 43B4                                 ??___awdiv 0022  
                               ??___ftadd 0082                 SWSPI_Synth_send_bits@mask 0080  
                          __CFG_STVREN$ON 000000                                 ??___awmod 001C  
                        ?_UART_Write_Text 0019                                 ??___ftdiv 0029  
                               ??___ftneg 001B                                 ??___lldiv 0020  
                               ??___ftmul 002C                     __end_of_PLLInitialize 2112  
                               ??___llmod 0031                                 ??___ftsub 002F  
                               ??___fttol 007D                                 ??___lwmod 0005  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                      AdcSingleSample@cType 0028  
                        ?_TMR0_Initialize 0001                                    _memset 433A  
                                  _fround 1236                        __end_of_DAC_ADDRES 78BD  
                                  clear_0 36C0                                    clear_1 36CC  
                                  clear_2 36D8                          ___awdiv@quotient 0024  
                                  _retNum 01C4                           ___awmod@divisor 001A  
                                  _rxFreq 01CC                                    _txFreq 01C8  
                         ___awmod@counter 001C                    ?_CollectRxStatusParams 0001  
                 __end_of_DATAEE_ReadByte 4542                               ?_EepromRead 0001  
                                  _strtol 1A76                                    floor@i 0093  
                   __end_of_SwSpi_Clk_Pin 3EEC                                    floor@x 0090  
                   ___ftmul@f3_as_product 006D                  SWSPI_DAC_send_bits@count 001B  
                            __pdataCOMRAM 0042                                 ??_isalpha 001B  
                               ??_isdigit 0018                          __end_of_testLeds 3C7A  
                           ?_SetMcuSystem 0001         __end_of_SendUartSystemInitMessage 2F9E  
                            __mediumconst 77D2                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                            ??_readUartByte 00EC  
                         ??_EUSART1_Write 0018  TMR0_SetInterruptHandler@InterruptHandler 0018  
            __size_of_InitRxMessageParams 0044                          ?_PIN_MANAGER_IOC 0001  
                               ??_sprintf 00C3                     ReadIntFromEeprom@base 00BA  
                       PrintTxStatus@dest 0100                           _eusart1RxBuffer 0246  
                               ??_toupper 0018                        __size_of_ZeroArray 001E  
           __size_of_INTERRUPT_Initialize 0004                           _eusart1TxBuffer 0200  
                        __end_ofexp@coeff 78DF                         _SYSTEM_Initialize 44BC  
                        __end_oflog@coeff 78FA                                __accesstop 0060  
                 __end_of__initialization 36DE                                ___altoft@c 0088  
                           ZeroArray@size 0022                                ___ftadd@f1 007C  
                              ___ftadd@f2 007F                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 008F                             ___rparam_used 000001  
                              ___ftdiv@f1 0023                                ___ftdiv@f2 0026  
                              ___ftdiv@f3 0061                                ___ftneg@f1 0018  
                              ___awtoft@c 0020                                ___ftmul@f1 0066  
                              ___ftmul@f2 0069                          ?_SWSPI_send_word 0028  
                              ___ftsub@f1 0088                                ___ftsub@f2 008B  
                              ___fttol@f1 0079                           _Make32bitsArray 3D90  
                          __pcstackCOMRAM 0001                              __pidataBANK1 45A8  
                            __pidataBANK2 4572                       ??_SYSTEM_Initialize 001C  
                   __end_of_PrintRxStatus 1880                                 ?_TMR0_ISR 0001  
                              ___lltoft@c 0020                             __end_of_make8 3D34  
                        _DATAEE_WriteByte 426E                             __end_of_floor 3164  
                           __end_of_ldexp 3308                             __end_of_frexp 377C  
                   __end_of_PrintTxStatus 168A                             __end_of_scale 0CC2  
                  _SwSpi_Set_Synth_Le_Pin 4154                                ___lwtoft@c 0020  
         __end_of_DAC_DEFAULT_INIT_VALUES 78B9                      __end_of_EUSART1_Read 4058  
                            ??_MEMORY_ISR 0001                 __size_of_StoreIntInEeprom 0038  
                  __size_of_SetMcuRunTime 0046                    ??_EUSART1_Transmit_ISR 0001  
                              __div_to_l_ 263A                            ??_SetMcuSystem 001C  
                   TMR0_ISR@CountCallBack 0035             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                         _lastAdcFfwrRSSI 01DC                        _keepAliveSignalLed 44D6  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 430A  
                __size_of_AdcSingleSample 011A                                   ??_make8 001D  
                         __div_to_l_@exp1 0023                                   ??_floor 0031  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0097  
                         __div_to_l_@cntr 0022                                   ??_frexp 001D  
                                 ??_scale 002F                 __end_of_SYSTEM_Initialize 44D6  
                         __div_to_l_@quot 001E                             _eusart1RxHead 003A  
                     PrintHelpScreen@dest 0100                             _eusart1TxHead 003C  
                           _eusart1RxTail 0039                                __pbssBANK1 0185  
                              __pbssBANK2 0200                               _GroupCommon 43DA  
                           _eusart1TxTail 003B                       ?_keepAliveSignalLed 0001  
                      __size_of_eval_poly 00D6                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 78BD                                _channelNum 0037  
                              __pnvCOMRAM 0046            __size_of_InitAdcApplicationMgr 0008  
                           __div_to_l_@f1 0018                             __div_to_l_@f2 001B  
           __end_of_InitAdcApplicationMgr 45A4                       __size_of_EepromRead 000A  
                      __end_of_MEMORY_ISR 45BC           ??_InitSystemApplicationManagers 0031  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
        __end_of_TMR0_SetInterruptHandler 4592                                   ?___lmul 001A  
                                 ?___wmul 0026                                ??_TMR0_ISR 0006  
                      __CFG_CCP3MX$PORTB5 000000                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 44A0                                 ?___altoft 0088  
                                 ?_memset 0018                         _ReadIntFromEeprom 2888  
                                 ?_fround 0072                            ___lmul@product 0022  
                               ?___awtoft 0020                                 ?___ftpack 0018  
                               ?___lltoft 0020                   __size_of_ADC_Initialize 0016  
                               ?___lwtoft 0020                        ?_ReadIntFromEeprom 00B3  
                                 ?_strtol 0026                          ?_DATAEE_ReadByte 0001  
                   _CollectTxStatusParams 398C               SampleAllChannels@_adcResult 00B6  
                                 _OSCCON2 000FD2                                   _TBLPTRH 000FF7  
                                 _TBLPTRL 000FF6                                   _TBLPTRU 000FF8  
                         readUartByte@idx 0182                   SampleSingleChannel@dest 0100  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
                     ??_ReadIntFromEeprom 00B7                                   _DacInit 2F9E  
                   GetIntFromUartData@idx 0075                            _SwSpi_Data_Pin 3E40  
                    DATAEE_WriteByte@bAdd 0019                   __end_of_Make32bitsArray 3DE8  
                           _SetMcuRunTime 3F8A                        _GetIntFromUartData 35C6  
                         __CFG_PWRTEN$OFF 000000                                   _GroupRx 29AE  
                                 _GroupTx 2762                         __end_of__npowers_ 78B1  
                                 __Hparam 0000                              ?_BlinkOkLeds 0001  
                              _scale$3954 0075                                   __Lparam 0000  
                               ?_testLeds 0001                      PLLInitialize@idx_945 008A  
               __end_of_ReadIntFromEeprom 29AE                       ?_GetIntFromUartData 0066  
                         __size_of___ftge 0090                                   ___awdiv 380C  
                         __size_of___lmul 0056                                   ___ftadd 1C4C  
                                 ___awmod 3A74                                   ___ftdiv 2DD0  
                    __end_of_readUartByte 0F8C                                   ___ftneg 4422  
                                 ___lldiv 3890                           __size_of___wmul 0026  
                                 ___ftmul 2CDA                                   ___llmod 3B52  
                                 ___ftsub 4058                                   ___fttol 2BE2  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 409A  
                              ??___altoft 008C                SWSPI_Synth_send_bits@count 0084  
                   _mcuRunTimeIn5SecTicks 01C0                                   _crcCalc 01E2  
                                 _channel 01E8                                   __pcinit 365A  
                              ??___awtoft 0023                                ??___ftpack 001D  
                       __end_of_eval_poly 323A                           __size_of_memset 002C  
                         __size_of_fround 025E                                   __ramtop 0600  
            __size_of_SampleSingleChannel 018E                                ??___lltoft 0024  
                                 __ptext0 3BBA                                   __ptext1 0CC2  
                                 __ptext2 3FD0                                   __ptext3 43DA  
                                 __ptext4 29AE                                   __ptext5 2762  
                                 __ptext6 1494                                   __ptext7 398C  
                                 __ptext8 168A                                   __ptext9 35C6  
                              ??___lwtoft 0023                                 _T0CONbits 000FD5  
                             ?__div_to_l_ 0018                           __size_of_strtol 01D6  
                                 _dpowers 783B                     AdcSingleSample@chType 001F  
                   _OSCILLATOR_Initialize 4556                                   _isalpha 4366  
                            __size_of_exp 01F6                              __size_of_log 012A  
                                 _isdigit 4446                              __size_of_pow 0180  
             ??_SendUartSystemInitMessage 0031                          ___awmod@dividend 0018  
                      _EUSART1_Initialize 4238                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 438E                 StoreIntInEeprom@numOfByes 0026  
                                 _isupper 4464                     AdcSingleSample@retNum 0024  
                                 _request 01E4                      ??_GetIntFromUartData 006A  
              __size_of_SYSTEM_Initialize 001A                   ?_SwSpi_Set_Dac_Sync_Pin 0001  
                                 _sprintf 00E0                    __end_of_SwSpi_Data_Pin 3E96  
                 StoreIntInEeprom@address 0025                                   _toupper 451A  
                    end_of_initialization 36DE                                   exp@sign 00A1  
                     ?_EUSART1_Initialize 0001                              ?_EepromWrite 001B  
                   _SWSPI_Synth_send_bits 3308                __end_of_TEST_PLL_REGISTERS 7807  
                __size_of_PrintHelpScreen 02AA                 __size_of_SwSpi_Set_CE_Pin 003C  
                          ?_SetMcuRunTime 0001                                   memset@c 001A  
                                 memset@n 001C                                   memset@p 001E  
                           __Lmediumconst 77D2                         ??_AdcSingleSample 0024  
                         ___lldiv@divisor 001C                                _numSamples 01D4  
                    __end_of_SetMcuSystem 4588                                   pow@sign 00AE  
                         ___lldiv@counter 0024                         readUartByte@chRec 0184  
                              ??_testLeds 0018                      SWSPI_send_word@datac 002D  
                              _rxMsgQueue 02C2                                   postdec1 000FE5  
                                 postdec2 000FDD                __end_of_PLL_INIT_REGISTERS 783B  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0044                       _InitRxMessageParams 3FD0  
                 ??_CollectRxStatusParams 0029                               testLeds@idx 0019  
                          __tdiv_to_l_@f1 0018                            __tdiv_to_l_@f2 001B  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 451A  
  __size_of_InitSystemApplicationManagers 0016             _InitSystemApplicationManagers 4504  
                           ??__tdiv_to_l_ 001E                                   strtol@a 0061  
                                 strtol@c 0065                                   strtol@s 0026  
                _TMR0_SetInterruptHandler 4588                                 _PORTBbits 000F81  
                               _PORTDbits 000F83                              ??_EepromRead 0019  
                        _StoreIntInEeprom 4190                    ?_CollectTxStatusParams 0001  
                          ZeroArray@array 0020            __end_of_SwSpi_Set_Dac_Sync_Pin 44BC  
                            strtol@endptr 0028                      ?_InitRxMessageParams 0001  
                     EUSART1_Write@txData 0018                           ?_SwSpi_Data_Pin 0018  
                __end_of_DATAEE_WriteByte 42A4               __end_of_SWSPI_DAC_send_bits 3E40  
           SendUartSystemInitMessage@dest 0100                          ?_Make32bitsArray 0018  
                             ___ftdiv@exp 0064                              _EUSART1_Read 4014  
               _SendUartSystemInitMessage 2EB8                   SampleAllChannels@adcRes 00B8  
                     __size_of__div_to_l_ 0128                        __end_of_EepromRead 459C  
                             ___ftmul@exp 006C                   ?_SwSpi_Set_Synth_Le_Pin 0018  
                            _needToSample 01EA                __size_of_ReadIntFromEeprom 0126  
                            _lastAdcVgMon 01D8              __end_of_INTERRUPT_Initialize 45B0  
                          __end_of___ftge 380C                            __end_of___lmul 3F42  
                      GroupCommon@request 00E4                            __end_of___wmul 43DA  
                           __pidataCOMRAM 45A4                         __size_of_TMR0_ISR 00B4  
                          _ADC_Initialize 44EE                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 4366                            __end_of_fround 1494  
               AdcSingleSample@numSamples 0020                         _SampleAllChannels 2292  
                              floor@expon 0096                  __size_of_UART_Write_Text 0072  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 1C4C  
                      ?_SampleAllChannels 0001                       start_initialization 365A  
                              eval_poly@d 008B                                eval_poly@n 008D  
                              eval_poly@x 0088                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 0092  
         __size_of_PIN_MANAGER_Initialize 0048                       __end_of__tdiv_to_l_ 2510  
                   ??_InitRxMessageParams 0024                               __end_of_exp 1A76  
                             __end_of_log 263A                               __end_of_pow 2292  
                  ?_SWSPI_Synth_send_bits 0024                           ??_SetMcuRunTime 0031  
                            ?_GroupCommon 00E2                     __end_of_EUSART1_Write 4118  
                     ??_SampleAllChannels 0031                    __size_of_PLLInitialize 018A  
                              frexp@value 0018                           ___llmod@divisor 00B7  
                         ___llmod@counter 00BB                       DATAEE_ReadByte@bAdd 0018  
                __size_of_PIN_MANAGER_IOC 0004                     __size_of_readUartByte 02CA  
                  __size_of_SwSpi_Clk_Pin 0056            __end_of_SwSpi_Set_Synth_Le_Pin 4190  
                       ??_PrintHelpScreen 0031                                  ??___ftge 001E  
                                ??___lmul 0022                                  ??___wmul 002A  
                    __size_of_BlinkOkLeds 005E                    __end_of_ADC_Initialize 4504  
                             __pdataBANK1 01EF                               __pdataBANK2 02D6  
                 SWSPI_DAC_send_bits@data 001A                            GroupRx@request 00EB  
                            _GroupRx$3946 00E5                              _GroupRx$3947 00E8  
               __end_of_SampleAllChannels 23DE                                  ??_memset 001E  
                                ??_fround 002F                              _GroupTx$3948 00E5  
                            _GroupTx$3949 00E8                             sprintf@tmpval 00DA  
                __size_of_SWSPI_send_word 009A                                  ??_strtol 002C  
                          _eusart1RxCount 01E7                         __size_of___altoft 007A  
                              fround@prec 007B                                 _ZeroArray 4482  
                         DacInit@dacInput 00CC                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                            GroupTx@request 00EB  
                       __size_of___lltoft 005C                               __pbssCOMRAM 0031  
                       __size_of___lwtoft 0024             __size_of_EUSART1_Transmit_ISR 0038  
                           __pcstackBANK0 0060                             __pcstackBANK1 0100  
                            _isalpha$3613 001C                              _isdigit$3616 0019  
                          BlinkOkLeds@idx 001C                                  ?_DacInit 0001  
                            _readUartByte 0CC2                    __size_of_PrintRxStatus 01F6  
                  __size_of_PrintTxStatus 01F6                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 4118                       _SampleSingleChannel 1DFA  
            __size_of_EUSART1_Receive_ISR 0032             SWSPI_Synth_send_bits@bitArray 0060  
                             sprintf@flag 00D0                               sprintf@fval 00DE  
                             sprintf@prec 00D2                   _DAC_DEFAULT_INIT_VALUES 78B1  
                    __size_of_EepromWrite 000E                     _TMR0_InterruptHandler 02E2  
                               __pnvBANK1 01F3                                 __pnvBANK2 02E2  
                __size_of_TMR0_StartTimer 0004                                  ?_GroupRx 00E2  
                                ?_GroupTx 00E2                    _PIN_MANAGER_Initialize 3F42  
                   _InitAdcApplicationMgr 459C                                 __pintcode 0008  
                           __pmediumconst 77D2                                  ?___awdiv 001E  
                               __ptext100 0000                                  ?___ftadd 007C  
                                ?___awmod 0018                                  ?___ftdiv 0023  
                                ?___ftneg 0018                                  ?___lldiv 0018  
                                ?___ftmul 0066                                  ?___llmod 00B3  
                                ?___ftsub 0088                                 __npowers_ 788A  
                                ?___fttol 0079                                  ?___lwmod 0001  
                         ?_ADC_Initialize 0001                         __size_of_testLeds 0060  
                           _PLLInitialize 1F88               __size_of_keepAliveSignalLed 0018  
                    ?_SampleSingleChannel 0001              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                               __tdiv_to_l_ 23DE  
                            ??__div_to_l_ 001E                                ?_ZeroArray 0020  
                                _BAUDCON1 000FB8                             _SwSpi_Clk_Pin 3E96  
                                ?_isalpha 0001                                  ?_isdigit 0001  
                               _eval_poly 3164                           _TimerOneSecFlag 01EE  
                                ?_isspace 0001                           _AdcSingleSample 2AC8  
                            _SetMcuSystem 457E                                  ?_isupper 0001  
                          __size_of_make8 005C                                  ?_sprintf 00BC  
                          __size_of_floor 00E2                            __size_of_ldexp 00CE  
                          __size_of_frexp 0090                            __size_of_scale 0420  
                __size_of_DATAEE_ReadByte 0014                                  ?_toupper 0001  
                       ??_UART_Write_Text 001B                      _INTERRUPT_Initialize 45AC  
                       ??_TMR0_Initialize 001A                            ___wmul@product 002A  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                __end_of_StoreIntInEeprom 41C8                    _SampleAllChannels$3939 00B3  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                    Make32bitsArray@array 0018                                  _PIR1bits 000F9E  
                      __end_of__div_to_l_ 2762                                  _PIR2bits 000FA1  
                               _rxMsgData 02AE                                  i2u645_40 40B4  
                        readUartByte@dest 0150                       SWSPI_send_word@data 0028  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                               make8@data 0018                                  _TMR0_ISR 33CA  
                      _TEST_PLL_REGISTERS 77D3                            ?_PLLInitialize 0001  
                           _PrintRxStatus 168A                         ??_PIN_MANAGER_IOC 0001  
                 ??_CollectTxStatusParams 0029                     ??_SampleSingleChannel 00E2  
              __size_of_SampleAllChannels 014C            __size_of_CollectRxStatusParams 006E  
      __size_of_SendUartSystemInitMessage 00E6                             _PrintTxStatus 1494  
           __end_of_CollectRxStatusParams 3B52                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 002C                                _ADCON0bits 000FC2  
                       ___wmul@multiplier 0026                            ?_SwSpi_Clk_Pin 0018  
                      __end_of_channelArr 78C1                          ??_SwSpi_Data_Pin 0019  
                              ?_eval_poly 0088                        _PLL_INIT_REGISTERS 7807  
                             _lastAdcRREV 01DA                     DATAEE_WriteByte@bData 0018  
                            _isspace$3619 0019                               _lastAdcTemp 01DE  
                       ??_SWSPI_send_word 002D                                DacInit@idx 00CE  
                              _DAC_ADDRES 78B9               __size_of_GetIntFromUartData 0094  
                       ___lmul@multiplier 001A                               _INTCON2bits 000FF1  
                               copy_data0 366E                                 copy_data1 368E  
                               copy_data2 36AE                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 00E4                         ?_DATAEE_WriteByte 0018  
                _SampleSingleChannel$3938 0132                     EUSART1_Read@readValue 0019  
                    __size_of_GroupCommon 0024                        ??_DATAEE_WriteByte 0019  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                                __Hrparam 0000                    ?_InitAdcApplicationMgr 0001  
                        __size_of_GroupRx 011A                          __size_of_GroupTx 0126  
                             _readAddress 01EF                                  __Lrparam 0000  
                       _ADC_GetConversion 430A                        __CFG_BOREN$SBORDIS 000000  
                         _ClearMcuRunTime 4542                         __CFG_P2BMX$PORTD2 000000  
                          ?_PrintRxStatus 0001                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                          ?_PrintTxStatus 0001                          __size_of___awdiv 0084  
                        __size_of___ftadd 01AE                          __size_of___awmod 0070  
                        __size_of___ftdiv 00E8                      _numOfValidateSamples 0031  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                                ___altoft 3912                          __size_of___ftmul 00F6  
                        __size_of___llmod 0068                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0036  
                 __end_of_AdcSingleSample 2BE2                          __size_of___lwmod 0042  
                                ___awtoft 41C8                                  ___ftpack 347E  
                        _numOfReadSamples 003E                               _fround$3952 0078  
                             _fround$3953 0075                                  ___lltoft 3D34  
                                ___lwtoft 43FE                               ??_ZeroArray 0024  
                     ??_ADC_GetConversion 001A                              _isupper$3622 0019  
                                _exp$3958 009C                                sprintf@exp 00D8  
                              sprintf@val 00D4                                  _dataSize 01E3  
                   SwSpi_Clk_Pin@cPinMode 0018                          __size_of_isalpha 0028  
                                _crcGiven 01E1                          __size_of_isdigit 001E  
                 ??_SWSPI_Synth_send_bits 0028                    SwSpi_Data_Pin@cPinMode 0018  
                        __size_of_isspace 0026                                  __ptext10 1A76  
                                __ptext11 451A                                  __ptext20 4014  
                                __ptext12 438E                                  __ptext21 44D6  
                                __ptext13 4446                                  __ptext30 44EE  
                                __ptext22 457E                                  __ptext14 4366  
                                __ptext31 3F8A                                  __ptext23 44BC  
                                __ptext15 4464                                  __ptext40 263A  
                                __ptext32 2EB8                                  __ptext24 42A4  
                                __ptext16 3AE4                                  __ptext41 3B52  
                                __ptext33 1DFA                                  __ptext25 4588  
                                __ptext17 2AC8                                  __ptext50 1F88  
                                __ptext42 3890                                  __ptext34 00E0  
                                __ptext26 3F42                                  __ptext18 3C1A  
                                __ptext51 4118                                  __ptext43 3A02  
                                __ptext35 08A2                                  __ptext27 4556  
                                __ptext19 0F8C                                  __ptext60 44A0  
                                __ptext52 459C                                  __ptext44 40DC  
                                __ptext36 1236                                  __ptext28 45AC  
                                __ptext61 3308                                  __ptext53 2F9E  
                                __ptext45 2292                                  __ptext37 3A74  
                                __ptext29 4238                                  __ptext70 2510  
                                __ptext62 4482                                  __ptext54 4190  
                                __ptext46 43FE                                  __ptext38 380C  
                                __ptext71 1880                                  __ptext63 433A  
                                __ptext55 4564                                  __ptext47 430A  
                                __ptext39 23DE                                  __ptext80 2CDA  
                                __ptext72 323A                                  __ptext64 3D90  
                                __ptext56 426E                                  __ptext48 4504  
                                __ptext81 4058                                  __ptext73 3082  
                                __ptext65 3DE8                                  __ptext57 352C  
                                __ptext49 45B0                                  __ptext90 452E  
                                __ptext82 1C4C                                  __ptext74 36EC  
                                __ptext66 3E40                                  __ptext58 3CD8  
                                __ptext91 4542                                  __ptext83 4422  
                                __ptext75 2BE2                                  __ptext67 3E96  
                                __ptext59 4154                                  __ptext92 3C7A  
                                __ptext84 2DD0                                  __ptext76 377C  
                                __ptext68 2888                                  __ptext85 41C8  
                                __ptext77 3912                                  __ptext69 2112  
                                __ptext94 33CA                                  __ptext86 3D34  
                                __ptext78 3164                                  __ptext95 409A  
                                __ptext87 347E                                  __ptext79 43B4  
                                __ptext96 45B4                                  __ptext88 3EEC  
                                __ptext97 45B8                                  __ptext89 4592  
                                __ptext98 4200                                  __ptext99 42D8  
                        __size_of_isupper 001E                                  __powers_ 7863  
            SWSPI_Synth_send_bits@phrType 0085                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$3956 00A8                                  _pow$3957 00AB  
                     GetIntFromUartData@c 0074                           _PrintHelpScreen 0F8C  
                        __size_of_sprintf 07C2               DATAEE_WriteByte@GIEBitValue 001A  
                        __size_of_toupper 0014                       UART_Write_Text@text 0019  
                           __size_of_main 0060                                  _msgCount 01E0  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 0018  
               __end_of_ADC_GetConversion 433A                        SampleAllChannels@i 00BA  
            __size_of_SWSPI_DAC_send_bits 0058                       Make32bitsArray@data 001A  
                      SWSPI_send_word@idx 002E                               _groupsArray 02D6  
                         ??_PLLInitialize 0086                                  _testLeds 3C1A  
                                int$flags 0048                  __size_of_Make32bitsArray 0058  
                              strtol@base 002A                                strtol@sign 0060  
      __end_of_INTERRUPT_InterruptManager 00DC                _INTERRUPT_InterruptManager 0008  
                         EepromWrite@data 001B                           ??_SwSpi_Clk_Pin 0019  
                     _EUSART1_Receive_ISR 42D8                  __end_of_SwSpi_Set_CE_Pin 4154  
             __end_of_InitRxMessageParams 4014                                  exp@coeff 78C1  
                              _MEMORY_ISR 45B8                                  log@coeff 78DF  
                  SWSPI_send_word@phrType 0030                                _INTCONbits 000FF2  
                             ??_eval_poly 002F                               _sampleArray 026E  
                             _sampleCount 01D2                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                                  scale@scl 0078  
                                intlevel2 0000                                 sprintf@ap 00CE  
                               sprintf@cp 00CC                          __tdiv_to_l_@exp1 0026  
                        __tdiv_to_l_@cntr 0025                                 sprintf@sp 00BC  
                        __tdiv_to_l_@quot 0021                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 3FD0                          ___lwmod@dividend 0001  
                                isspace@c 001A                          ___lldiv@dividend 0018  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 4556  
                              _RCSTA1bits 000FAB                                  isupper@c 001A  
                ReadIntFromEeprom@address 00C4              __end_of_EUSART1_Transmit_ISR 4238  
                           ??_BlinkOkLeds 0018                          ??_ADC_Initialize 0018  
                         ??_PrintRxStatus 0031                        Make32bitsArray@idx 0020  
                       _TimerSamplingFlag 01ED                           ??_PrintTxStatus 0031  
                           _isReWriteDone 003D                      SwSpi_Clk_Pin@phrType 0019  
                   SwSpi_Data_Pin@phrType 0019                   SwSpi_Set_CE_Pin@phrType 0019  
                        ?_AdcSingleSample 001F                    __size_of_EUSART1_Write 003C  
                            ?__tdiv_to_l_ 0018                  ??_SwSpi_Set_Dac_Sync_Pin 0018  
                         _UART_Write_Text 3A02                                  sprintf@c 00E1  
                                sprintf@f 00BE                         EepromRead@address 0019  
                            _rxStatistics 01A3                          ___lldiv@quotient 0020  
                         ___lwmod@divisor 0003                           _TMR0_Initialize 42A4  
                 __end_of_PrintHelpScreen 1236                           ___lwmod@counter 0005  
                                toupper@c 0018                ReadIntFromEeprom@numOfByes 00B3  
                       __CFG_T3CMX$PORTC0 000000                   ReadIntFromEeprom@retVal 00C5  
                           ??_EepromWrite 001C                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 3F8A                          UART_Write_Text@i 001D  
            GetIntFromUartData@dataRegArr 006C                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 45B4                           _TimertenSecFlag 01EB  
                       ?_StoreIntInEeprom 0021                __size_of_ADC_GetConversion 0030  
                      ??_StoreIntInEeprom 0028  
