

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 29 14:31:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text94,global,reloc=2,class=CODE,delta=1
   112                           	psect	text95,global,reloc=2,class=CODE,delta=1
   113                           	psect	text96,global,reloc=2,class=CODE,delta=1
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1
   115                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   116                           	psect	text99,global,reloc=2,class=CODE,delta=1
   117                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text101,global,reloc=2,class=CODE,delta=1
   119                           	psect	text102,global,reloc=2,class=CODE,delta=1
   120                           	psect	text103,global,reloc=2,class=CODE,delta=1
   121                           	psect	text104,global,reloc=2,class=CODE,delta=1
   122                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   123                           	psect	text105,global,reloc=2,class=CODE,delta=1
   124                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   125                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   126  0000                     
   127                           ; Version 1.45
   128                           ; Generated 16/11/2017 GMT
   129                           ; 
   130                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   131                           ; All rights reserved.
   132                           ; 
   133                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   134                           ; 
   135                           ; Redistribution and use in source and binary forms, with or without modification, are
   136                           ; permitted provided that the following conditions are met:
   137                           ; 
   138                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   139                           ;        conditions and the following disclaimer.
   140                           ; 
   141                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   142                           ;        of conditions and the following disclaimer in the documentation and/or other
   143                           ;        materials provided with the distribution.
   144                           ; 
   145                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   146                           ;        software without specific prior written permission.
   147                           ; 
   148                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   149                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   150                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   151                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   152                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   153                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   154                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   155                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   156                           ; 
   157                           ; 
   158                           ; Code-generator required, PIC18F45K22 Definitions
   159                           ; 
   160                           ; SFR Addresses
   161  0000                     
   162 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   163  0000                     
   164                           	psect	idataBANK1
   165  004636                     __pidataBANK1:
   166                           	opt stack 0
   167                           
   168                           ;initializer for _groupsArray
   169  004636  AC                 	db	low _GroupRx
   170  004637  27                 	db	high _GroupRx
   171  004638  36                 	db	low _GroupTx
   172  004639  24                 	db	high _GroupTx
   173  00463A  CC                 	db	low _GroupCommon
   174  00463B  38                 	db	high _GroupCommon
   175  00463C  00                 	db	0
   176  00463D  00                 	db	0
   177  00463E  00                 	db	0
   178  00463F  00                 	db	0
   179  004640  00                 	db	0
   180  004641  00                 	db	0
   181                           
   182                           	psect	mediumconst
   183  007748                     __pmediumconst:
   184                           	opt stack 0
   185  007748  00                 	db	0
   186  007749                     _TEST_PLL_REGISTERS:
   187                           	opt stack 0
   188  007749  041C               	dw	1052
   189  00774B  0001               	dw	1
   190  00774D  300B               	dw	12299
   191  00774F  0061               	dw	97
   192  007751  26BA               	dw	9914
   193  007753  00C0               	dw	192
   194  007755  FCC9               	dw	64713
   195  007757  1A19               	dw	6681
   196  007759  0428               	dw	1064
   197  00775B  102D               	dw	4141
   198  00775D  00E7               	dw	231
   199  00775F  1200               	dw	4608
   200  007761  6076               	dw	24694
   201  007763  3505               	dw	13573
   202  007765  0025               	dw	37
   203  007767  0080               	dw	128
   204  007769  8B84               	dw	35716
   205  00776B  3200               	dw	12800
   206  00776D  0003               	dw	3
   207  00776F  0000               	dw	0
   208  007771  0032               	dw	50
   209  007773  0008               	dw	8
   210  007775  AAA1               	dw	43681
   211  007777  01AA               	dw	426
   212  007779  0EDA               	dw	3802
   213  00777B  0003               	dw	3
   214  00777D                     __end_of_TEST_PLL_REGISTERS:
   215                           	opt stack 0
   216  00777D                     _PLL_INIT_REGISTERS:
   217                           	opt stack 0
   218  00777D  041C               	dw	1052
   219  00777F  0001               	dw	1
   220  007781  300B               	dw	12299
   221  007783  0061               	dw	97
   222  007785  323A               	dw	12858
   223  007787  00C0               	dw	192
   224  007789  BCC9               	dw	48329
   225  00778B  2221               	dw	8737
   226  00778D  0428               	dw	1064
   227  00778F  102D               	dw	4141
   228  007791  00E7               	dw	231
   229  007793  1200               	dw	4608
   230  007795  2076               	dw	8310
   231  007797  3501               	dw	13569
   232  007799  0025               	dw	37
   233  00779B  0080               	dw	128
   234  00779D  9B84               	dw	39812
   235  00779F  3400               	dw	13312
   236  0077A1  0003               	dw	3
   237  0077A3  0000               	dw	0
   238  0077A5  0012               	dw	18
   239  0077A7  0000               	dw	0
   240  0077A9  0001               	dw	1
   241  0077AB  0600               	dw	1536
   242  0077AD  0340               	dw	832
   243  0077AF  0020               	dw	32
   244  0077B1                     __end_of_PLL_INIT_REGISTERS:
   245                           	opt stack 0
   246  0077B1                     _dpowers:
   247                           	opt stack 0
   248  0077B1  0001               	dw	1
   249  0077B3  0000               	dw	0
   250  0077B5  000A               	dw	10
   251  0077B7  0000               	dw	0
   252  0077B9  0064               	dw	100
   253  0077BB  0000               	dw	0
   254  0077BD  03E8               	dw	1000
   255  0077BF  0000               	dw	0
   256  0077C1  2710               	dw	10000
   257  0077C3  0000               	dw	0
   258  0077C5  86A0               	dw	34464
   259  0077C7  0001               	dw	1
   260  0077C9  4240               	dw	16960
   261  0077CB  000F               	dw	15
   262  0077CD  9680               	dw	38528
   263  0077CF  0098               	dw	152
   264  0077D1  E100               	dw	57600
   265  0077D3  05F5               	dw	1525
   266  0077D5  CA00               	dw	51712
   267  0077D7  3B9A               	dw	15258
   268  0077D9                     __end_of_dpowers:
   269                           	opt stack 0
   270  0077D9                     __powers_:
   271                           	opt stack 0
   272  0077D9  00                 	db	0
   273  0077DA  80                 	db	128
   274  0077DB  3F                 	db	63
   275  0077DC  00                 	db	0
   276  0077DD  20                 	db	32
   277  0077DE  41                 	db	65
   278  0077DF  00                 	db	0
   279  0077E0  C8                 	db	200
   280  0077E1  42                 	db	66
   281  0077E2  00                 	db	0
   282  0077E3  7A                 	db	122
   283  0077E4  44                 	db	68
   284  0077E5  40                 	db	64
   285  0077E6  1C                 	db	28
   286  0077E7  46                 	db	70
   287  0077E8  50                 	db	80
   288  0077E9  C3                 	db	195
   289  0077EA  47                 	db	71
   290  0077EB  24                 	db	36
   291  0077EC  74                 	db	116
   292  0077ED  49                 	db	73
   293  0077EE  97                 	db	151
   294  0077EF  18                 	db	24
   295  0077F0  4B                 	db	75
   296  0077F1  BC                 	db	188
   297  0077F2  BE                 	db	190
   298  0077F3  4C                 	db	76
   299  0077F4  6B                 	db	107
   300  0077F5  6E                 	db	110
   301  0077F6  4E                 	db	78
   302  0077F7  03                 	db	3
   303  0077F8  15                 	db	21
   304  0077F9  50                 	db	80
   305  0077FA  79                 	db	121
   306  0077FB  AD                 	db	173
   307  0077FC  60                 	db	96
   308  0077FD  F3                 	db	243
   309  0077FE  49                 	db	73
   310  0077FF  71                 	db	113
   311  007800                     __end_of__powers_:
   312                           	opt stack 0
   313  007800                     __npowers_:
   314                           	opt stack 0
   315  007800  00                 	db	0
   316  007801  80                 	db	128
   317  007802  3F                 	db	63
   318  007803  CD                 	db	205
   319  007804  CC                 	db	204
   320  007805  3D                 	db	61
   321  007806  D7                 	db	215
   322  007807  23                 	db	35
   323  007808  3C                 	db	60
   324  007809  12                 	db	18
   325  00780A  83                 	db	131
   326  00780B  3A                 	db	58
   327  00780C  B7                 	db	183
   328  00780D  D1                 	db	209
   329  00780E  38                 	db	56
   330  00780F  C6                 	db	198
   331  007810  27                 	db	39
   332  007811  37                 	db	55
   333  007812  38                 	db	56
   334  007813  86                 	db	134
   335  007814  35                 	db	53
   336  007815  C0                 	db	192
   337  007816  D6                 	db	214
   338  007817  33                 	db	51
   339  007818  CC                 	db	204
   340  007819  2B                 	db	43
   341  00781A  32                 	db	50
   342  00781B  70                 	db	112
   343  00781C  89                 	db	137
   344  00781D  30                 	db	48
   345  00781E  E7                 	db	231
   346  00781F  DB                 	db	219
   347  007820  2E                 	db	46
   348  007821  E5                 	db	229
   349  007822  3C                 	db	60
   350  007823  1E                 	db	30
   351  007824  42                 	db	66
   352  007825  A2                 	db	162
   353  007826  0D                 	db	13
   354  007827                     __end_of__npowers_:
   355                           	opt stack 0
   356  007827                     _DAC_DEFAULT_INIT_VALUES:
   357                           	opt stack 0
   358  007827  2344               	dw	9028
   359  007829  6344               	dw	25412
   360  00782B  A344               	dw	41796
   361  00782D  E344               	dw	58180
   362  00782F                     __end_of_DAC_DEFAULT_INIT_VALUES:
   363                           	opt stack 0
   364  00782F                     _DAC_ADDRES:
   365                           	opt stack 0
   366  00782F  02                 	db	2
   367  007830  04                 	db	4
   368  007831  06                 	db	6
   369  007832  08                 	db	8
   370  007833                     __end_of_DAC_ADDRES:
   371                           	opt stack 0
   372  007833                     _channelArr:
   373                           	opt stack 0
   374  007833  04                 	db	4
   375  007834  06                 	db	6
   376  007835  05                 	db	5
   377  007836  07                 	db	7
   378  007837                     __end_of_channelArr:
   379                           	opt stack 0
   380  007837                     _SYSTEM_INFO_ADDRES:
   381                           	opt stack 0
   382  007837  00                 	db	0
   383  007838  01                 	db	1
   384  007839  02                 	db	2
   385  00783A                     __end_of_SYSTEM_INFO_ADDRES:
   386                           	opt stack 0
   387  00783A                     exp@coeff:
   388                           	opt stack 0
   389  00783A  00                 	db	0
   390  00783B  80                 	db	128
   391  00783C  3F                 	db	63
   392  00783D  72                 	db	114
   393  00783E  31                 	db	49
   394  00783F  3F                 	db	63
   395  007840  FE                 	db	254
   396  007841  75                 	db	117
   397  007842  3E                 	db	62
   398  007843  58                 	db	88
   399  007844  63                 	db	99
   400  007845  3D                 	db	61
   401  007846  95                 	db	149
   402  007847  1D                 	db	29
   403  007848  3C                 	db	60
   404  007849  C5                 	db	197
   405  00784A  AE                 	db	174
   406  00784B  3A                 	db	58
   407  00784C  79                 	db	121
   408  00784D  21                 	db	33
   409  00784E  39                 	db	57
   410  00784F  94                 	db	148
   411  007850  80                 	db	128
   412  007851  37                 	db	55
   413  007852  93                 	db	147
   414  007853  A7                 	db	167
   415  007854  35                 	db	53
   416  007855  56                 	db	86
   417  007856  15                 	db	21
   418  007857  34                 	db	52
   419  007858                     __end_ofexp@coeff:
   420                           	opt stack 0
   421  007858                     log@coeff:
   422                           	opt stack 0
   423  007858  00                 	db	0
   424  007859  00                 	db	0
   425  00785A  00                 	db	0
   426  00785B  00                 	db	0
   427  00785C  80                 	db	128
   428  00785D  3F                 	db	63
   429  00785E  F0                 	db	240
   430  00785F  FF                 	db	255
   431  007860  BE                 	db	190
   432  007861  E2                 	db	226
   433  007862  A9                 	db	169
   434  007863  3E                 	db	62
   435  007864  83                 	db	131
   436  007865  76                 	db	118
   437  007866  BE                 	db	190
   438  007867  AE                 	db	174
   439  007868  2B                 	db	43
   440  007869  3E                 	db	62
   441  00786A  3C                 	db	60
   442  00786B  C3                 	db	195
   443  00786C  BD                 	db	189
   444  00786D  D2                 	db	210
   445  00786E  13                 	db	19
   446  00786F  3D                 	db	61
   447  007870  78                 	db	120
   448  007871  D3                 	db	211
   449  007872  BB                 	db	187
   450  007873                     __end_oflog@coeff:
   451                           	opt stack 0
   452  007873                     STR_39:
   453                           
   454                           ; BSR set to: 1
   455  007873  24                 	db	36
   456  007874  52                 	db	82	;'R'
   457  007875  43                 	db	67	;'C'
   458  007876  50                 	db	80	;'P'
   459  007877  20                 	db	32
   460  007878  3C                 	db	60	;'<'
   461  007879  58                 	db	88	;'X'
   462  00787A  3E                 	db	62	;'>'
   463  00787B  3C                 	db	60	;'<'
   464  00787C  63                 	db	99	;'c'
   465  00787D  72                 	db	114	;'r'
   466  00787E  3E                 	db	62	;'>'
   467  00787F  20                 	db	32
   468  007880  20                 	db	32
   469  007881  20                 	db	32
   470  007882  20                 	db	32
   471  007883  20                 	db	32
   472  007884  53                 	db	83	;'S'
   473  007885  65                 	db	101	;'e'
   474  007886  74                 	db	116	;'t'
   475  007887  20                 	db	32
   476  007888  43                 	db	67	;'C'
   477  007889  6F                 	db	111	;'o'
   478  00788A  6D                 	db	109	;'m'
   479  00788B  70                 	db	112	;'p'
   480  00788C  72                 	db	114	;'r'
   481  00788D  65                 	db	101	;'e'
   482  00788E  73                 	db	115	;'s'
   483  00788F  73                 	db	115	;'s'
   484  007890  69                 	db	105	;'i'
   485  007891  6F                 	db	111	;'o'
   486  007892  6E                 	db	110	;'n'
   487  007893  20                 	db	32
   488  007894  6F                 	db	111	;'o'
   489  007895  70                 	db	112	;'p'
   490  007896  65                 	db	101	;'e'
   491  007897  72                 	db	114	;'r'
   492  007898  61                 	db	97	;'a'
   493  007899  74                 	db	116	;'t'
   494  00789A  69                 	db	105	;'i'
   495  00789B  6F                 	db	111	;'o'
   496  00789C  6E                 	db	110	;'n'
   497  00789D  20                 	db	32
   498  00789E  6D                 	db	109	;'m'
   499  00789F  6F                 	db	111	;'o'
   500  0078A0  64                 	db	100	;'d'
   501  0078A1  65                 	db	101	;'e'
   502  0078A2  20                 	db	32
   503  0078A3  61                 	db	97	;'a'
   504  0078A4  74                 	db	116	;'t'
   505  0078A5  20                 	db	32
   506  0078A6  52                 	db	82	;'R'
   507  0078A7  58                 	db	88	;'X'
   508  0078A8  20                 	db	32
   509  0078A9  73                 	db	115	;'s'
   510  0078AA  79                 	db	121	;'y'
   511  0078AB  73                 	db	115	;'s'
   512  0078AC  74                 	db	116	;'t'
   513  0078AD  65                 	db	101	;'e'
   514  0078AE  6D                 	db	109	;'m'
   515  0078AF  3A                 	db	58	;':'
   516  0078B0  20                 	db	32
   517  0078B1  41                 	db	65	;'A'
   518  0078B2  75                 	db	117	;'u'
   519  0078B3  74                 	db	116	;'t'
   520  0078B4  6F                 	db	111	;'o'
   521  0078B5  6D                 	db	109	;'m'
   522  0078B6  61                 	db	97	;'a'
   523  0078B7  74                 	db	116	;'t'
   524  0078B8  69                 	db	105	;'i'
   525  0078B9  63                 	db	99	;'c'
   526  0078BA  5B                 	db	91	;'['
   527  0078BB  31                 	db	49	;'1'
   528  0078BC  5D                 	db	93	;']'
   529  0078BD  20                 	db	32
   530  0078BE  4D                 	db	77	;'M'
   531  0078BF  61                 	db	97	;'a'
   532  0078C0  6E                 	db	110	;'n'
   533  0078C1  75                 	db	117	;'u'
   534  0078C2  61                 	db	97	;'a'
   535  0078C3  6C                 	db	108	;'l'
   536  0078C4  5B                 	db	91	;'['
   537  0078C5  30                 	db	48	;'0'
   538  0078C6  5D                 	db	93	;']'
   539  0078C7  20                 	db	32
   540  0078C8  5B                 	db	91	;'['
   541  0078C9  44                 	db	68	;'D'
   542  0078CA  65                 	db	101	;'e'
   543  0078CB  66                 	db	102	;'f'
   544  0078CC  61                 	db	97	;'a'
   545  0078CD  75                 	db	117	;'u'
   546  0078CE  6C                 	db	108	;'l'
   547  0078CF  74                 	db	116	;'t'
   548  0078D0  20                 	db	32
   549  0078D1  3D                 	db	61	;'='
   550  0078D2  20                 	db	32
   551  0078D3  30                 	db	48	;'0'
   552  0078D4  5D                 	db	93	;']'
   553  0078D5  0D                 	db	13
   554  0078D6  0A                 	db	10
   555  0078D7  00                 	db	0
   556  0078D8                     STR_38:
   557                           
   558                           ; BSR set to: 1
   559  0078D8  24                 	db	36
   560  0078D9  52                 	db	82	;'R'
   561  0078DA  43                 	db	67	;'C'
   562  0078DB  52                 	db	82	;'R'
   563  0078DC  20                 	db	32
   564  0078DD  3C                 	db	60	;'<'
   565  0078DE  58                 	db	88	;'X'
   566  0078DF  3E                 	db	62	;'>'
   567  0078E0  3C                 	db	60	;'<'
   568  0078E1  63                 	db	99	;'c'
   569  0078E2  72                 	db	114	;'r'
   570  0078E3  3E                 	db	62	;'>'
   571  0078E4  20                 	db	32
   572  0078E5  20                 	db	32
   573  0078E6  20                 	db	32
   574  0078E7  20                 	db	32
   575  0078E8  20                 	db	32
   576  0078E9  53                 	db	83	;'S'
   577  0078EA  65                 	db	101	;'e'
   578  0078EB  74                 	db	116	;'t'
   579  0078EC  20                 	db	32
   580  0078ED  43                 	db	67	;'C'
   581  0078EE  6F                 	db	111	;'o'
   582  0078EF  6D                 	db	109	;'m'
   583  0078F0  70                 	db	112	;'p'
   584  0078F1  72                 	db	114	;'r'
   585  0078F2  65                 	db	101	;'e'
   586  0078F3  73                 	db	115	;'s'
   587  0078F4  73                 	db	115	;'s'
   588  0078F5  69                 	db	105	;'i'
   589  0078F6  6F                 	db	111	;'o'
   590  0078F7  6E                 	db	110	;'n'
   591  0078F8  20                 	db	32
   592  0078F9  72                 	db	114	;'r'
   593  0078FA  61                 	db	97	;'a'
   594  0078FB  6E                 	db	110	;'n'
   595  0078FC  67                 	db	103	;'g'
   596  0078FD  65                 	db	101	;'e'
   597  0078FE  20                 	db	32
   598  0078FF  61                 	db	97	;'a'
   599  007900  74                 	db	116	;'t'
   600  007901  20                 	db	32
   601  007902  52                 	db	82	;'R'
   602  007903  58                 	db	88	;'X'
   603  007904  20                 	db	32
   604  007905  73                 	db	115	;'s'
   605  007906  79                 	db	121	;'y'
   606  007907  73                 	db	115	;'s'
   607  007908  74                 	db	116	;'t'
   608  007909  65                 	db	101	;'e'
   609  00790A  6D                 	db	109	;'m'
   610  00790B  2E                 	db	46
   611  00790C  20                 	db	32
   612  00790D  48                 	db	72	;'H'
   613  00790E  69                 	db	105	;'i'
   614  00790F  67                 	db	103	;'g'
   615  007910  68                 	db	104	;'h'
   616  007911  20                 	db	32
   617  007912  5B                 	db	91	;'['
   618  007913  31                 	db	49	;'1'
   619  007914  5D                 	db	93	;']'
   620  007915  20                 	db	32
   621  007916  4C                 	db	76	;'L'
   622  007917  6F                 	db	111	;'o'
   623  007918  77                 	db	119	;'w'
   624  007919  20                 	db	32
   625  00791A  5B                 	db	91	;'['
   626  00791B  30                 	db	48	;'0'
   627  00791C  5D                 	db	93	;']'
   628  00791D  20                 	db	32
   629  00791E  5B                 	db	91	;'['
   630  00791F  44                 	db	68	;'D'
   631  007920  65                 	db	101	;'e'
   632  007921  66                 	db	102	;'f'
   633  007922  61                 	db	97	;'a'
   634  007923  75                 	db	117	;'u'
   635  007924  6C                 	db	108	;'l'
   636  007925  74                 	db	116	;'t'
   637  007926  20                 	db	32
   638  007927  3D                 	db	61	;'='
   639  007928  20                 	db	32
   640  007929  30                 	db	48	;'0'
   641  00792A  5D                 	db	93	;']'
   642  00792B  0D                 	db	13
   643  00792C  0A                 	db	10
   644  00792D  00                 	db	0
   645  00792E                     STR_43:
   646                           
   647                           ; BSR set to: 1
   648  00792E  24                 	db	36
   649  00792F  53                 	db	83	;'S'
   650  007930  41                 	db	65	;'A'
   651  007931  20                 	db	32
   652  007932  3C                 	db	60	;'<'
   653  007933  58                 	db	88	;'X'
   654  007934  3E                 	db	62	;'>'
   655  007935  3C                 	db	60	;'<'
   656  007936  63                 	db	99	;'c'
   657  007937  72                 	db	114	;'r'
   658  007938  3E                 	db	62	;'>'
   659  007939  20                 	db	32
   660  00793A  20                 	db	32
   661  00793B  20                 	db	32
   662  00793C  20                 	db	32
   663  00793D  20                 	db	32
   664  00793E  53                 	db	83	;'S'
   665  00793F  65                 	db	101	;'e'
   666  007940  74                 	db	116	;'t'
   667  007941  20                 	db	32
   668  007942  55                 	db	85	;'U'
   669  007943  41                 	db	65	;'A'
   670  007944  52                 	db	82	;'R'
   671  007945  54                 	db	84	;'T'
   672  007946  20                 	db	32
   673  007947  61                 	db	97	;'a'
   674  007948  75                 	db	117	;'u'
   675  007949  74                 	db	116	;'t'
   676  00794A  6F                 	db	111	;'o'
   677  00794B  6D                 	db	109	;'m'
   678  00794C  61                 	db	97	;'a'
   679  00794D  74                 	db	116	;'t'
   680  00794E  69                 	db	105	;'i'
   681  00794F  63                 	db	99	;'c'
   682  007950  20                 	db	32
   683  007951  6F                 	db	111	;'o'
   684  007952  70                 	db	112	;'p'
   685  007953  65                 	db	101	;'e'
   686  007954  72                 	db	114	;'r'
   687  007955  61                 	db	97	;'a'
   688  007956  74                 	db	116	;'t'
   689  007957  69                 	db	105	;'i'
   690  007958  6F                 	db	111	;'o'
   691  007959  6E                 	db	110	;'n'
   692  00795A  3A                 	db	58	;':'
   693  00795B  20                 	db	32
   694  00795C  41                 	db	65	;'A'
   695  00795D  75                 	db	117	;'u'
   696  00795E  74                 	db	116	;'t'
   697  00795F  6F                 	db	111	;'o'
   698  007960  6D                 	db	109	;'m'
   699  007961  61                 	db	97	;'a'
   700  007962  74                 	db	116	;'t'
   701  007963  69                 	db	105	;'i'
   702  007964  63                 	db	99	;'c'
   703  007965  5B                 	db	91	;'['
   704  007966  31                 	db	49	;'1'
   705  007967  5D                 	db	93	;']'
   706  007968  20                 	db	32
   707  007969  4D                 	db	77	;'M'
   708  00796A  61                 	db	97	;'a'
   709  00796B  6E                 	db	110	;'n'
   710  00796C  75                 	db	117	;'u'
   711  00796D  61                 	db	97	;'a'
   712  00796E  6C                 	db	108	;'l'
   713  00796F  5B                 	db	91	;'['
   714  007970  30                 	db	48	;'0'
   715  007971  5D                 	db	93	;']'
   716  007972  20                 	db	32
   717  007973  5B                 	db	91	;'['
   718  007974  44                 	db	68	;'D'
   719  007975  65                 	db	101	;'e'
   720  007976  66                 	db	102	;'f'
   721  007977  61                 	db	97	;'a'
   722  007978  75                 	db	117	;'u'
   723  007979  6C                 	db	108	;'l'
   724  00797A  74                 	db	116	;'t'
   725  00797B  20                 	db	32
   726  00797C  3D                 	db	61	;'='
   727  00797D  20                 	db	32
   728  00797E  30                 	db	48	;'0'
   729  00797F  5D                 	db	93	;']'
   730  007980  0D                 	db	13
   731  007981  0A                 	db	10
   732  007982  00                 	db	0
   733  007983                     STR_32:
   734                           
   735                           ; BSR set to: 1
   736  007983  24                 	db	36
   737  007984  54                 	db	84	;'T'
   738  007985  58                 	db	88	;'X'
   739  007986  20                 	db	32
   740  007987  3C                 	db	60	;'<'
   741  007988  58                 	db	88	;'X'
   742  007989  3E                 	db	62	;'>'
   743  00798A  3C                 	db	60	;'<'
   744  00798B  63                 	db	99	;'c'
   745  00798C  72                 	db	114	;'r'
   746  00798D  3E                 	db	62	;'>'
   747  00798E  20                 	db	32
   748  00798F  20                 	db	32
   749  007990  20                 	db	32
   750  007991  20                 	db	32
   751  007992  20                 	db	32
   752  007993  20                 	db	32
   753  007994  54                 	db	84	;'T'
   754  007995  75                 	db	117	;'u'
   755  007996  72                 	db	114	;'r'
   756  007997  6E                 	db	110	;'n'
   757  007998  20                 	db	32
   758  007999  6F                 	db	111	;'o'
   759  00799A  6E                 	db	110	;'n'
   760  00799B  5B                 	db	91	;'['
   761  00799C  31                 	db	49	;'1'
   762  00799D  5D                 	db	93	;']'
   763  00799E  20                 	db	32
   764  00799F  2F                 	db	47
   765  0079A0  20                 	db	32
   766  0079A1  6F                 	db	111	;'o'
   767  0079A2  66                 	db	102	;'f'
   768  0079A3  66                 	db	102	;'f'
   769  0079A4  5B                 	db	91	;'['
   770  0079A5  30                 	db	48	;'0'
   771  0079A6  5D                 	db	93	;']'
   772  0079A7  20                 	db	32
   773  0079A8  74                 	db	116	;'t'
   774  0079A9  72                 	db	114	;'r'
   775  0079AA  61                 	db	97	;'a'
   776  0079AB  6E                 	db	110	;'n'
   777  0079AC  73                 	db	115	;'s'
   778  0079AD  6D                 	db	109	;'m'
   779  0079AE  69                 	db	105	;'i'
   780  0079AF  73                 	db	115	;'s'
   781  0079B0  73                 	db	115	;'s'
   782  0079B1  69                 	db	105	;'i'
   783  0079B2  6F                 	db	111	;'o'
   784  0079B3  6E                 	db	110	;'n'
   785  0079B4  20                 	db	32
   786  0079B5  61                 	db	97	;'a'
   787  0079B6  74                 	db	116	;'t'
   788  0079B7  20                 	db	32
   789  0079B8  54                 	db	84	;'T'
   790  0079B9  58                 	db	88	;'X'
   791  0079BA  20                 	db	32
   792  0079BB  73                 	db	115	;'s'
   793  0079BC  79                 	db	121	;'y'
   794  0079BD  73                 	db	115	;'s'
   795  0079BE  74                 	db	116	;'t'
   796  0079BF  65                 	db	101	;'e'
   797  0079C0  6D                 	db	109	;'m'
   798  0079C1  20                 	db	32
   799  0079C2  5B                 	db	91	;'['
   800  0079C3  44                 	db	68	;'D'
   801  0079C4  65                 	db	101	;'e'
   802  0079C5  66                 	db	102	;'f'
   803  0079C6  61                 	db	97	;'a'
   804  0079C7  75                 	db	117	;'u'
   805  0079C8  6C                 	db	108	;'l'
   806  0079C9  74                 	db	116	;'t'
   807  0079CA  20                 	db	32
   808  0079CB  3D                 	db	61	;'='
   809  0079CC  20                 	db	32
   810  0079CD  30                 	db	48	;'0'
   811  0079CE  5D                 	db	93	;']'
   812  0079CF  0D                 	db	13
   813  0079D0  0A                 	db	10
   814  0079D1  00                 	db	0
   815  0079D2                     STR_31:
   816                           
   817                           ; BSR set to: 1
   818  0079D2  24                 	db	36
   819  0079D3  54                 	db	84	;'T'
   820  0079D4  42                 	db	66	;'B'
   821  0079D5  20                 	db	32
   822  0079D6  3C                 	db	60	;'<'
   823  0079D7  58                 	db	88	;'X'
   824  0079D8  3E                 	db	62	;'>'
   825  0079D9  3C                 	db	60	;'<'
   826  0079DA  63                 	db	99	;'c'
   827  0079DB  72                 	db	114	;'r'
   828  0079DC  3E                 	db	62	;'>'
   829  0079DD  20                 	db	32
   830  0079DE  20                 	db	32
   831  0079DF  20                 	db	32
   832  0079E0  20                 	db	32
   833  0079E1  20                 	db	32
   834  0079E2  20                 	db	32
   835  0079E3  54                 	db	84	;'T'
   836  0079E4  75                 	db	117	;'u'
   837  0079E5  72                 	db	114	;'r'
   838  0079E6  6E                 	db	110	;'n'
   839  0079E7  20                 	db	32
   840  0079E8  6F                 	db	111	;'o'
   841  0079E9  6E                 	db	110	;'n'
   842  0079EA  5B                 	db	91	;'['
   843  0079EB  31                 	db	49	;'1'
   844  0079EC  5D                 	db	93	;']'
   845  0079ED  20                 	db	32
   846  0079EE  2F                 	db	47
   847  0079EF  20                 	db	32
   848  0079F0  6F                 	db	111	;'o'
   849  0079F1  66                 	db	102	;'f'
   850  0079F2  66                 	db	102	;'f'
   851  0079F3  5B                 	db	91	;'['
   852  0079F4  30                 	db	48	;'0'
   853  0079F5  5D                 	db	93	;']'
   854  0079F6  20                 	db	32
   855  0079F7  42                 	db	66	;'B'
   856  0079F8  49                 	db	73	;'I'
   857  0079F9  54                 	db	84	;'T'
   858  0079FA  20                 	db	32
   859  0079FB  6D                 	db	109	;'m'
   860  0079FC  6F                 	db	111	;'o'
   861  0079FD  64                 	db	100	;'d'
   862  0079FE  65                 	db	101	;'e'
   863  0079FF  20                 	db	32
   864  007A00  61                 	db	97	;'a'
   865  007A01  74                 	db	116	;'t'
   866  007A02  20                 	db	32
   867  007A03  54                 	db	84	;'T'
   868  007A04  58                 	db	88	;'X'
   869  007A05  20                 	db	32
   870  007A06  73                 	db	115	;'s'
   871  007A07  79                 	db	121	;'y'
   872  007A08  73                 	db	115	;'s'
   873  007A09  74                 	db	116	;'t'
   874  007A0A  65                 	db	101	;'e'
   875  007A0B  6D                 	db	109	;'m'
   876  007A0C  20                 	db	32
   877  007A0D  5B                 	db	91	;'['
   878  007A0E  44                 	db	68	;'D'
   879  007A0F  65                 	db	101	;'e'
   880  007A10  66                 	db	102	;'f'
   881  007A11  61                 	db	97	;'a'
   882  007A12  75                 	db	117	;'u'
   883  007A13  6C                 	db	108	;'l'
   884  007A14  74                 	db	116	;'t'
   885  007A15  20                 	db	32
   886  007A16  3D                 	db	61	;'='
   887  007A17  20                 	db	32
   888  007A18  30                 	db	48	;'0'
   889  007A19  5D                 	db	93	;']'
   890  007A1A  0D                 	db	13
   891  007A1B  0A                 	db	10
   892  007A1C  00                 	db	0
   893  007A1D                     STR_34:
   894                           
   895                           ; BSR set to: 1
   896  007A1D  24                 	db	36
   897  007A1E  52                 	db	82	;'R'
   898  007A1F  49                 	db	73	;'I'
   899  007A20  20                 	db	32
   900  007A21  3C                 	db	60	;'<'
   901  007A22  58                 	db	88	;'X'
   902  007A23  58                 	db	88	;'X'
   903  007A24  58                 	db	88	;'X'
   904  007A25  58                 	db	88	;'X'
   905  007A26  3E                 	db	62	;'>'
   906  007A27  3C                 	db	60	;'<'
   907  007A28  63                 	db	99	;'c'
   908  007A29  72                 	db	114	;'r'
   909  007A2A  3E                 	db	62	;'>'
   910  007A2B  20                 	db	32
   911  007A2C  20                 	db	32
   912  007A2D  20                 	db	32
   913  007A2E  49                 	db	73	;'I'
   914  007A2F  6E                 	db	110	;'n'
   915  007A30  69                 	db	105	;'i'
   916  007A31  74                 	db	116	;'t'
   917  007A32  20                 	db	32
   918  007A33  52                 	db	82	;'R'
   919  007A34  58                 	db	88	;'X'
   920  007A35  20                 	db	32
   921  007A36  73                 	db	115	;'s'
   922  007A37  79                 	db	121	;'y'
   923  007A38  73                 	db	115	;'s'
   924  007A39  74                 	db	116	;'t'
   925  007A3A  65                 	db	101	;'e'
   926  007A3B  6D                 	db	109	;'m'
   927  007A3C  20                 	db	32
   928  007A3D  61                 	db	97	;'a'
   929  007A3E  6E                 	db	110	;'n'
   930  007A3F  64                 	db	100	;'d'
   931  007A40  20                 	db	32
   932  007A41  73                 	db	115	;'s'
   933  007A42  65                 	db	101	;'e'
   934  007A43  74                 	db	116	;'t'
   935  007A44  20                 	db	32
   936  007A45  66                 	db	102	;'f'
   937  007A46  72                 	db	114	;'r'
   938  007A47  65                 	db	101	;'e'
   939  007A48  71                 	db	113	;'q'
   940  007A49  75                 	db	117	;'u'
   941  007A4A  65                 	db	101	;'e'
   942  007A4B  6E                 	db	110	;'n'
   943  007A4C  63                 	db	99	;'c'
   944  007A4D  79                 	db	121	;'y'
   945  007A4E  20                 	db	32
   946  007A4F  61                 	db	97	;'a'
   947  007A50  74                 	db	116	;'t'
   948  007A51  20                 	db	32
   949  007A52  58                 	db	88	;'X'
   950  007A53  58                 	db	88	;'X'
   951  007A54  58                 	db	88	;'X'
   952  007A55  58                 	db	88	;'X'
   953  007A56  20                 	db	32
   954  007A57  28                 	db	40
   955  007A58  30                 	db	48	;'0'
   956  007A59  2D                 	db	45
   957  007A5A  39                 	db	57	;'9'
   958  007A5B  39                 	db	57	;'9'
   959  007A5C  39                 	db	57	;'9'
   960  007A5D  39                 	db	57	;'9'
   961  007A5E  29                 	db	41
   962  007A5F  5B                 	db	91	;'['
   963  007A60  4D                 	db	77	;'M'
   964  007A61  48                 	db	72	;'H'
   965  007A62  7A                 	db	122	;'z'
   966  007A63  5D                 	db	93	;']'
   967  007A64  0D                 	db	13
   968  007A65  0A                 	db	10
   969  007A66  00                 	db	0
   970  007A67                     STR_46:
   971                           
   972                           ; BSR set to: 1
   973  007A67  24                 	db	36
   974  007A68  54                 	db	84	;'T'
   975  007A69  44                 	db	68	;'D'
   976  007A6A  20                 	db	32
   977  007A6B  3C                 	db	60	;'<'
   978  007A6C  44                 	db	68	;'D'
   979  007A6D  41                 	db	65	;'A'
   980  007A6E  43                 	db	67	;'C'
   981  007A6F  20                 	db	32
   982  007A70  4E                 	db	78	;'N'
   983  007A71  55                 	db	85	;'U'
   984  007A72  4D                 	db	77	;'M'
   985  007A73  3E                 	db	62	;'>'
   986  007A74  3C                 	db	60	;'<'
   987  007A75  44                 	db	68	;'D'
   988  007A76  41                 	db	65	;'A'
   989  007A77  43                 	db	67	;'C'
   990  007A78  20                 	db	32
   991  007A79  56                 	db	86	;'V'
   992  007A7A  41                 	db	65	;'A'
   993  007A7B  4C                 	db	76	;'L'
   994  007A7C  55                 	db	85	;'U'
   995  007A7D  45                 	db	69	;'E'
   996  007A7E  3E                 	db	62	;'>'
   997  007A7F  3C                 	db	60	;'<'
   998  007A80  63                 	db	99	;'c'
   999  007A81  72                 	db	114	;'r'
  1000  007A82  3E                 	db	62	;'>'
  1001  007A83  20                 	db	32
  1002  007A84  20                 	db	32
  1003  007A85  20                 	db	32
  1004  007A86  20                 	db	32
  1005  007A87  20                 	db	32
  1006  007A88  20                 	db	32
  1007  007A89  20                 	db	32
  1008  007A8A  20                 	db	32
  1009  007A8B  20                 	db	32
  1010  007A8C  53                 	db	83	;'S'
  1011  007A8D  65                 	db	101	;'e'
  1012  007A8E  74                 	db	116	;'t'
  1013  007A8F  20                 	db	32
  1014  007A90  54                 	db	84	;'T'
  1015  007A91  58                 	db	88	;'X'
  1016  007A92  20                 	db	32
  1017  007A93  44                 	db	68	;'D'
  1018  007A94  41                 	db	65	;'A'
  1019  007A95  43                 	db	67	;'C'
  1020  007A96  20                 	db	32
  1021  007A97  3C                 	db	60	;'<'
  1022  007A98  30                 	db	48	;'0'
  1023  007A99  2D                 	db	45
  1024  007A9A  33                 	db	51	;'3'
  1025  007A9B  3E                 	db	62	;'>'
  1026  007A9C  20                 	db	32
  1027  007A9D  3C                 	db	60	;'<'
  1028  007A9E  30                 	db	48	;'0'
  1029  007A9F  2D                 	db	45
  1030  007AA0  56                 	db	86	;'V'
  1031  007AA1  72                 	db	114	;'r'
  1032  007AA2  65                 	db	101	;'e'
  1033  007AA3  66                 	db	102	;'f'
  1034  007AA4  5B                 	db	91	;'['
  1035  007AA5  34                 	db	52	;'4'
  1036  007AA6  20                 	db	32
  1037  007AA7  64                 	db	100	;'d'
  1038  007AA8  69                 	db	105	;'i'
  1039  007AA9  67                 	db	103	;'g'
  1040  007AAA  5D                 	db	93	;']'
  1041  007AAB  3E                 	db	62	;'>'
  1042  007AAC  20                 	db	32
  1043  007AAD  0D                 	db	13
  1044  007AAE  0A                 	db	10
  1045  007AAF  00                 	db	0
  1046  007AB0                     STR_28:
  1047                           
  1048                           ; BSR set to: 1
  1049  007AB0  24                 	db	36
  1050  007AB1  54                 	db	84	;'T'
  1051  007AB2  49                 	db	73	;'I'
  1052  007AB3  20                 	db	32
  1053  007AB4  3C                 	db	60	;'<'
  1054  007AB5  58                 	db	88	;'X'
  1055  007AB6  58                 	db	88	;'X'
  1056  007AB7  58                 	db	88	;'X'
  1057  007AB8  58                 	db	88	;'X'
  1058  007AB9  3E                 	db	62	;'>'
  1059  007ABA  3C                 	db	60	;'<'
  1060  007ABB  63                 	db	99	;'c'
  1061  007ABC  72                 	db	114	;'r'
  1062  007ABD  3E                 	db	62	;'>'
  1063  007ABE  20                 	db	32
  1064  007ABF  20                 	db	32
  1065  007AC0  20                 	db	32
  1066  007AC1  49                 	db	73	;'I'
  1067  007AC2  6E                 	db	110	;'n'
  1068  007AC3  69                 	db	105	;'i'
  1069  007AC4  74                 	db	116	;'t'
  1070  007AC5  20                 	db	32
  1071  007AC6  54                 	db	84	;'T'
  1072  007AC7  58                 	db	88	;'X'
  1073  007AC8  20                 	db	32
  1074  007AC9  73                 	db	115	;'s'
  1075  007ACA  79                 	db	121	;'y'
  1076  007ACB  73                 	db	115	;'s'
  1077  007ACC  74                 	db	116	;'t'
  1078  007ACD  65                 	db	101	;'e'
  1079  007ACE  6D                 	db	109	;'m'
  1080  007ACF  20                 	db	32
  1081  007AD0  61                 	db	97	;'a'
  1082  007AD1  6E                 	db	110	;'n'
  1083  007AD2  64                 	db	100	;'d'
  1084  007AD3  20                 	db	32
  1085  007AD4  73                 	db	115	;'s'
  1086  007AD5  65                 	db	101	;'e'
  1087  007AD6  74                 	db	116	;'t'
  1088  007AD7  20                 	db	32
  1089  007AD8  66                 	db	102	;'f'
  1090  007AD9  72                 	db	114	;'r'
  1091  007ADA  65                 	db	101	;'e'
  1092  007ADB  71                 	db	113	;'q'
  1093  007ADC  75                 	db	117	;'u'
  1094  007ADD  65                 	db	101	;'e'
  1095  007ADE  6E                 	db	110	;'n'
  1096  007ADF  63                 	db	99	;'c'
  1097  007AE0  79                 	db	121	;'y'
  1098  007AE1  20                 	db	32
  1099  007AE2  28                 	db	40
  1100  007AE3  30                 	db	48	;'0'
  1101  007AE4  2D                 	db	45
  1102  007AE5  39                 	db	57	;'9'
  1103  007AE6  39                 	db	57	;'9'
  1104  007AE7  39                 	db	57	;'9'
  1105  007AE8  39                 	db	57	;'9'
  1106  007AE9  29                 	db	41
  1107  007AEA  5B                 	db	91	;'['
  1108  007AEB  4D                 	db	77	;'M'
  1109  007AEC  48                 	db	72	;'H'
  1110  007AED  7A                 	db	122	;'z'
  1111  007AEE  5D                 	db	93	;']'
  1112  007AEF  0D                 	db	13
  1113  007AF0  0A                 	db	10
  1114  007AF1  00                 	db	0
  1115  007AF2                     STR_36:
  1116                           
  1117                           ; BSR set to: 1
  1118  007AF2  24                 	db	36
  1119  007AF3  52                 	db	82	;'R'
  1120  007AF4  42                 	db	66	;'B'
  1121  007AF5  20                 	db	32
  1122  007AF6  3C                 	db	60	;'<'
  1123  007AF7  58                 	db	88	;'X'
  1124  007AF8  3E                 	db	62	;'>'
  1125  007AF9  3C                 	db	60	;'<'
  1126  007AFA  63                 	db	99	;'c'
  1127  007AFB  72                 	db	114	;'r'
  1128  007AFC  3E                 	db	62	;'>'
  1129  007AFD  20                 	db	32
  1130  007AFE  20                 	db	32
  1131  007AFF  20                 	db	32
  1132  007B00  20                 	db	32
  1133  007B01  20                 	db	32
  1134  007B02  20                 	db	32
  1135  007B03  54                 	db	84	;'T'
  1136  007B04  75                 	db	117	;'u'
  1137  007B05  72                 	db	114	;'r'
  1138  007B06  6E                 	db	110	;'n'
  1139  007B07  20                 	db	32
  1140  007B08  6F                 	db	111	;'o'
  1141  007B09  6E                 	db	110	;'n'
  1142  007B0A  5B                 	db	91	;'['
  1143  007B0B  31                 	db	49	;'1'
  1144  007B0C  5D                 	db	93	;']'
  1145  007B0D  20                 	db	32
  1146  007B0E  2F                 	db	47
  1147  007B0F  20                 	db	32
  1148  007B10  6F                 	db	111	;'o'
  1149  007B11  66                 	db	102	;'f'
  1150  007B12  66                 	db	102	;'f'
  1151  007B13  5B                 	db	91	;'['
  1152  007B14  30                 	db	48	;'0'
  1153  007B15  5D                 	db	93	;']'
  1154  007B16  20                 	db	32
  1155  007B17  42                 	db	66	;'B'
  1156  007B18  49                 	db	73	;'I'
  1157  007B19  54                 	db	84	;'T'
  1158  007B1A  20                 	db	32
  1159  007B1B  6D                 	db	109	;'m'
  1160  007B1C  6F                 	db	111	;'o'
  1161  007B1D  64                 	db	100	;'d'
  1162  007B1E  65                 	db	101	;'e'
  1163  007B1F  20                 	db	32
  1164  007B20  61                 	db	97	;'a'
  1165  007B21  74                 	db	116	;'t'
  1166  007B22  20                 	db	32
  1167  007B23  52                 	db	82	;'R'
  1168  007B24  58                 	db	88	;'X'
  1169  007B25  20                 	db	32
  1170  007B26  73                 	db	115	;'s'
  1171  007B27  79                 	db	121	;'y'
  1172  007B28  73                 	db	115	;'s'
  1173  007B29  74                 	db	116	;'t'
  1174  007B2A  65                 	db	101	;'e'
  1175  007B2B  6D                 	db	109	;'m'
  1176  007B2C  2E                 	db	46
  1177  007B2D  0D                 	db	13
  1178  007B2E  0A                 	db	10
  1179  007B2F  00                 	db	0
  1180  007B30                     STR_29:
  1181                           
  1182                           ; BSR set to: 1
  1183  007B30  24                 	db	36
  1184  007B31  54                 	db	84	;'T'
  1185  007B32  46                 	db	70	;'F'
  1186  007B33  20                 	db	32
  1187  007B34  3C                 	db	60	;'<'
  1188  007B35  58                 	db	88	;'X'
  1189  007B36  58                 	db	88	;'X'
  1190  007B37  58                 	db	88	;'X'
  1191  007B38  58                 	db	88	;'X'
  1192  007B39  3E                 	db	62	;'>'
  1193  007B3A  3C                 	db	60	;'<'
  1194  007B3B  63                 	db	99	;'c'
  1195  007B3C  72                 	db	114	;'r'
  1196  007B3D  3E                 	db	62	;'>'
  1197  007B3E  20                 	db	32
  1198  007B3F  20                 	db	32
  1199  007B40  20                 	db	32
  1200  007B41  53                 	db	83	;'S'
  1201  007B42  65                 	db	101	;'e'
  1202  007B43  74                 	db	116	;'t'
  1203  007B44  20                 	db	32
  1204  007B45  54                 	db	84	;'T'
  1205  007B46  58                 	db	88	;'X'
  1206  007B47  20                 	db	32
  1207  007B48  73                 	db	115	;'s'
  1208  007B49  79                 	db	121	;'y'
  1209  007B4A  73                 	db	115	;'s'
  1210  007B4B  74                 	db	116	;'t'
  1211  007B4C  65                 	db	101	;'e'
  1212  007B4D  6D                 	db	109	;'m'
  1213  007B4E  20                 	db	32
  1214  007B4F  66                 	db	102	;'f'
  1215  007B50  72                 	db	114	;'r'
  1216  007B51  65                 	db	101	;'e'
  1217  007B52  71                 	db	113	;'q'
  1218  007B53  75                 	db	117	;'u'
  1219  007B54  65                 	db	101	;'e'
  1220  007B55  6E                 	db	110	;'n'
  1221  007B56  63                 	db	99	;'c'
  1222  007B57  79                 	db	121	;'y'
  1223  007B58  20                 	db	32
  1224  007B59  61                 	db	97	;'a'
  1225  007B5A  74                 	db	116	;'t'
  1226  007B5B  20                 	db	32
  1227  007B5C  28                 	db	40
  1228  007B5D  30                 	db	48	;'0'
  1229  007B5E  2D                 	db	45
  1230  007B5F  39                 	db	57	;'9'
  1231  007B60  39                 	db	57	;'9'
  1232  007B61  39                 	db	57	;'9'
  1233  007B62  39                 	db	57	;'9'
  1234  007B63  29                 	db	41
  1235  007B64  5B                 	db	91	;'['
  1236  007B65  4D                 	db	77	;'M'
  1237  007B66  48                 	db	72	;'H'
  1238  007B67  7A                 	db	122	;'z'
  1239  007B68  5D                 	db	93	;']'
  1240  007B69  2E                 	db	46
  1241  007B6A  0D                 	db	13
  1242  007B6B  0A                 	db	10
  1243  007B6C  00                 	db	0
  1244  007B6D                     STR_37:
  1245                           
  1246                           ; BSR set to: 1
  1247  007B6D  24                 	db	36
  1248  007B6E  52                 	db	82	;'R'
  1249  007B6F  58                 	db	88	;'X'
  1250  007B70  20                 	db	32
  1251  007B71  3C                 	db	60	;'<'
  1252  007B72  58                 	db	88	;'X'
  1253  007B73  3E                 	db	62	;'>'
  1254  007B74  3C                 	db	60	;'<'
  1255  007B75  63                 	db	99	;'c'
  1256  007B76  72                 	db	114	;'r'
  1257  007B77  3E                 	db	62	;'>'
  1258  007B78  20                 	db	32
  1259  007B79  20                 	db	32
  1260  007B7A  20                 	db	32
  1261  007B7B  20                 	db	32
  1262  007B7C  20                 	db	32
  1263  007B7D  20                 	db	32
  1264  007B7E  54                 	db	84	;'T'
  1265  007B7F  75                 	db	117	;'u'
  1266  007B80  72                 	db	114	;'r'
  1267  007B81  6E                 	db	110	;'n'
  1268  007B82  20                 	db	32
  1269  007B83  6F                 	db	111	;'o'
  1270  007B84  6E                 	db	110	;'n'
  1271  007B85  5B                 	db	91	;'['
  1272  007B86  31                 	db	49	;'1'
  1273  007B87  5D                 	db	93	;']'
  1274  007B88  20                 	db	32
  1275  007B89  2F                 	db	47
  1276  007B8A  20                 	db	32
  1277  007B8B  6F                 	db	111	;'o'
  1278  007B8C  66                 	db	102	;'f'
  1279  007B8D  66                 	db	102	;'f'
  1280  007B8E  5B                 	db	91	;'['
  1281  007B8F  30                 	db	48	;'0'
  1282  007B90  5D                 	db	93	;']'
  1283  007B91  20                 	db	32
  1284  007B92  72                 	db	114	;'r'
  1285  007B93  65                 	db	101	;'e'
  1286  007B94  63                 	db	99	;'c'
  1287  007B95  65                 	db	101	;'e'
  1288  007B96  69                 	db	105	;'i'
  1289  007B97  76                 	db	118	;'v'
  1290  007B98  65                 	db	101	;'e'
  1291  007B99  20                 	db	32
  1292  007B9A  61                 	db	97	;'a'
  1293  007B9B  74                 	db	116	;'t'
  1294  007B9C  20                 	db	32
  1295  007B9D  52                 	db	82	;'R'
  1296  007B9E  58                 	db	88	;'X'
  1297  007B9F  20                 	db	32
  1298  007BA0  73                 	db	115	;'s'
  1299  007BA1  79                 	db	121	;'y'
  1300  007BA2  73                 	db	115	;'s'
  1301  007BA3  74                 	db	116	;'t'
  1302  007BA4  65                 	db	101	;'e'
  1303  007BA5  6D                 	db	109	;'m'
  1304  007BA6  2E                 	db	46
  1305  007BA7  0D                 	db	13
  1306  007BA8  0A                 	db	10
  1307  007BA9  00                 	db	0
  1308  007BAA                     STR_56:
  1309                           
  1310                           ; BSR set to: 1
  1311  007BAA  52                 	db	82	;'R'
  1312  007BAB  58                 	db	88	;'X'
  1313  007BAC  20                 	db	32
  1314  007BAD  53                 	db	83	;'S'
  1315  007BAE  59                 	db	89	;'Y'
  1316  007BAF  4E                 	db	78	;'N'
  1317  007BB0  54                 	db	84	;'T'
  1318  007BB1  48                 	db	72	;'H'
  1319  007BB2  20                 	db	32
  1320  007BB3  28                 	db	40
  1321  007BB4  50                 	db	80	;'P'
  1322  007BB5  4C                 	db	76	;'L'
  1323  007BB6  4C                 	db	76	;'L'
  1324  007BB7  29                 	db	41
  1325  007BB8  20                 	db	32
  1326  007BB9  4C                 	db	76	;'L'
  1327  007BBA  6F                 	db	111	;'o'
  1328  007BBB  63                 	db	99	;'c'
  1329  007BBC  6B                 	db	107	;'k'
  1330  007BBD  20                 	db	32
  1331  007BBE  69                 	db	105	;'i'
  1332  007BBF  6E                 	db	110	;'n'
  1333  007BC0  64                 	db	100	;'d'
  1334  007BC1  69                 	db	105	;'i'
  1335  007BC2  63                 	db	99	;'c'
  1336  007BC3  61                 	db	97	;'a'
  1337  007BC4  74                 	db	116	;'t'
  1338  007BC5  69                 	db	105	;'i'
  1339  007BC6  6F                 	db	111	;'o'
  1340  007BC7  6E                 	db	110	;'n'
  1341  007BC8  20                 	db	32
  1342  007BC9  30                 	db	48	;'0'
  1343  007BCA  3A                 	db	58	;':'
  1344  007BCB  20                 	db	32
  1345  007BCC  6E                 	db	110	;'n'
  1346  007BCD  6F                 	db	111	;'o'
  1347  007BCE  74                 	db	116	;'t'
  1348  007BCF  20                 	db	32
  1349  007BD0  6C                 	db	108	;'l'
  1350  007BD1  6F                 	db	111	;'o'
  1351  007BD2  63                 	db	99	;'c'
  1352  007BD3  6B                 	db	107	;'k'
  1353  007BD4  65                 	db	101	;'e'
  1354  007BD5  64                 	db	100	;'d'
  1355  007BD6  20                 	db	32
  1356  007BD7  31                 	db	49	;'1'
  1357  007BD8  3A                 	db	58	;':'
  1358  007BD9  20                 	db	32
  1359  007BDA  6C                 	db	108	;'l'
  1360  007BDB  6F                 	db	111	;'o'
  1361  007BDC  63                 	db	99	;'c'
  1362  007BDD  6B                 	db	107	;'k'
  1363  007BDE  65                 	db	101	;'e'
  1364  007BDF  64                 	db	100	;'d'
  1365  007BE0  25                 	db	37
  1366  007BE1  64                 	db	100	;'d'
  1367  007BE2  0A                 	db	10
  1368  007BE3  0D                 	db	13
  1369  007BE4  00                 	db	0
  1370  007BE5                     STR_42:
  1371                           
  1372                           ; BSR set to: 1
  1373  007BE5  24                 	db	36
  1374  007BE6  53                 	db	83	;'S'
  1375  007BE7  55                 	db	85	;'U'
  1376  007BE8  20                 	db	32
  1377  007BE9  3C                 	db	60	;'<'
  1378  007BEA  58                 	db	88	;'X'
  1379  007BEB  58                 	db	88	;'X'
  1380  007BEC  3E                 	db	62	;'>'
  1381  007BED  3C                 	db	60	;'<'
  1382  007BEE  63                 	db	99	;'c'
  1383  007BEF  72                 	db	114	;'r'
  1384  007BF0  3E                 	db	62	;'>'
  1385  007BF1  20                 	db	32
  1386  007BF2  20                 	db	32
  1387  007BF3  20                 	db	32
  1388  007BF4  20                 	db	32
  1389  007BF5  53                 	db	83	;'S'
  1390  007BF6  65                 	db	101	;'e'
  1391  007BF7  74                 	db	116	;'t'
  1392  007BF8  20                 	db	32
  1393  007BF9  55                 	db	85	;'U'
  1394  007BFA  41                 	db	65	;'A'
  1395  007BFB  52                 	db	82	;'R'
  1396  007BFC  54                 	db	84	;'T'
  1397  007BFD  20                 	db	32
  1398  007BFE  72                 	db	114	;'r'
  1399  007BFF  65                 	db	101	;'e'
  1400  007C00  66                 	db	102	;'f'
  1401  007C01  72                 	db	114	;'r'
  1402  007C02  65                 	db	101	;'e'
  1403  007C03  73                 	db	115	;'s'
  1404  007C04  68                 	db	104	;'h'
  1405  007C05  20                 	db	32
  1406  007C06  72                 	db	114	;'r'
  1407  007C07  61                 	db	97	;'a'
  1408  007C08  74                 	db	116	;'t'
  1409  007C09  65                 	db	101	;'e'
  1410  007C0A  20                 	db	32
  1411  007C0B  28                 	db	40
  1412  007C0C  31                 	db	49	;'1'
  1413  007C0D  2D                 	db	45
  1414  007C0E  32                 	db	50	;'2'
  1415  007C0F  30                 	db	48	;'0'
  1416  007C10  29                 	db	41
  1417  007C11  5B                 	db	91	;'['
  1418  007C12  48                 	db	72	;'H'
  1419  007C13  7A                 	db	122	;'z'
  1420  007C14  5D                 	db	93	;']'
  1421  007C15  2E                 	db	46
  1422  007C16  0D                 	db	13
  1423  007C17  0A                 	db	10
  1424  007C18  00                 	db	0
  1425  007C19                     STR_49:
  1426                           
  1427                           ; BSR set to: 1
  1428  007C19  24                 	db	36
  1429  007C1A  53                 	db	83	;'S'
  1430  007C1B  56                 	db	86	;'V'
  1431  007C1C  20                 	db	32
  1432  007C1D  3C                 	db	60	;'<'
  1433  007C1E  63                 	db	99	;'c'
  1434  007C1F  72                 	db	114	;'r'
  1435  007C20  3E                 	db	62	;'>'
  1436  007C21  20                 	db	32
  1437  007C22  20                 	db	32
  1438  007C23  20                 	db	32
  1439  007C24  20                 	db	32
  1440  007C25  20                 	db	32
  1441  007C26  20                 	db	32
  1442  007C27  20                 	db	32
  1443  007C28  20                 	db	32
  1444  007C29  20                 	db	32
  1445  007C2A  53                 	db	83	;'S'
  1446  007C2B  61                 	db	97	;'a'
  1447  007C2C  76                 	db	118	;'v'
  1448  007C2D  65                 	db	101	;'e'
  1449  007C2E  20                 	db	32
  1450  007C2F  53                 	db	83	;'S'
  1451  007C30  79                 	db	121	;'y'
  1452  007C31  73                 	db	115	;'s'
  1453  007C32  74                 	db	116	;'t'
  1454  007C33  65                 	db	101	;'e'
  1455  007C34  6D                 	db	109	;'m'
  1456  007C35  20                 	db	32
  1457  007C36  73                 	db	115	;'s'
  1458  007C37  74                 	db	116	;'t'
  1459  007C38  61                 	db	97	;'a'
  1460  007C39  74                 	db	116	;'t'
  1461  007C3A  75                 	db	117	;'u'
  1462  007C3B  73                 	db	115	;'s'
  1463  007C3C  20                 	db	32
  1464  007C3D  54                 	db	84	;'T'
  1465  007C3E  6F                 	db	111	;'o'
  1466  007C3F  20                 	db	32
  1467  007C40  45                 	db	69	;'E'
  1468  007C41  45                 	db	69	;'E'
  1469  007C42  50                 	db	80	;'P'
  1470  007C43  52                 	db	82	;'R'
  1471  007C44  4F                 	db	79	;'O'
  1472  007C45  4D                 	db	77	;'M'
  1473  007C46  20                 	db	32
  1474  007C47  0D                 	db	13
  1475  007C48  0A                 	db	10
  1476  007C49  00                 	db	0
  1477  007C4A                     STR_41:
  1478                           
  1479                           ; BSR set to: 1
  1480  007C4A  24                 	db	36
  1481  007C4B  53                 	db	83	;'S'
  1482  007C4C  48                 	db	72	;'H'
  1483  007C4D  20                 	db	32
  1484  007C4E  3C                 	db	60	;'<'
  1485  007C4F  63                 	db	99	;'c'
  1486  007C50  72                 	db	114	;'r'
  1487  007C51  3E                 	db	62	;'>'
  1488  007C52  20                 	db	32
  1489  007C53  20                 	db	32
  1490  007C54  20                 	db	32
  1491  007C55  20                 	db	32
  1492  007C56  20                 	db	32
  1493  007C57  20                 	db	32
  1494  007C58  20                 	db	32
  1495  007C59  20                 	db	32
  1496  007C5A  20                 	db	32
  1497  007C5B  50                 	db	80	;'P'
  1498  007C5C  72                 	db	114	;'r'
  1499  007C5D  69                 	db	105	;'i'
  1500  007C5E  6E                 	db	110	;'n'
  1501  007C5F  74                 	db	116	;'t'
  1502  007C60  20                 	db	32
  1503  007C61  73                 	db	115	;'s'
  1504  007C62  79                 	db	121	;'y'
  1505  007C63  73                 	db	115	;'s'
  1506  007C64  74                 	db	116	;'t'
  1507  007C65  65                 	db	101	;'e'
  1508  007C66  6D                 	db	109	;'m'
  1509  007C67  20                 	db	32
  1510  007C68  68                 	db	104	;'h'
  1511  007C69  65                 	db	101	;'e'
  1512  007C6A  6C                 	db	108	;'l'
  1513  007C6B  70                 	db	112	;'p'
  1514  007C6C  20                 	db	32
  1515  007C6D  6D                 	db	109	;'m'
  1516  007C6E  65                 	db	101	;'e'
  1517  007C6F  73                 	db	115	;'s'
  1518  007C70  73                 	db	115	;'s'
  1519  007C71  61                 	db	97	;'a'
  1520  007C72  67                 	db	103	;'g'
  1521  007C73  65                 	db	101	;'e'
  1522  007C74  2E                 	db	46
  1523  007C75  0D                 	db	13
  1524  007C76  0A                 	db	10
  1525  007C77  00                 	db	0
  1526  007C78                     STR_30:
  1527                           
  1528                           ; BSR set to: 1
  1529  007C78  24                 	db	36
  1530  007C79  54                 	db	84	;'T'
  1531  007C7A  51                 	db	81	;'Q'
  1532  007C7B  20                 	db	32
  1533  007C7C  3C                 	db	60	;'<'
  1534  007C7D  63                 	db	99	;'c'
  1535  007C7E  72                 	db	114	;'r'
  1536  007C7F  3E                 	db	62	;'>'
  1537  007C80  20                 	db	32
  1538  007C81  20                 	db	32
  1539  007C82  20                 	db	32
  1540  007C83  20                 	db	32
  1541  007C84  20                 	db	32
  1542  007C85  20                 	db	32
  1543  007C86  20                 	db	32
  1544  007C87  20                 	db	32
  1545  007C88  20                 	db	32
  1546  007C89  47                 	db	71	;'G'
  1547  007C8A  65                 	db	101	;'e'
  1548  007C8B  74                 	db	116	;'t'
  1549  007C8C  20                 	db	32
  1550  007C8D  73                 	db	115	;'s'
  1551  007C8E  74                 	db	116	;'t'
  1552  007C8F  61                 	db	97	;'a'
  1553  007C90  74                 	db	116	;'t'
  1554  007C91  75                 	db	117	;'u'
  1555  007C92  73                 	db	115	;'s'
  1556  007C93  20                 	db	32
  1557  007C94  66                 	db	102	;'f'
  1558  007C95  72                 	db	114	;'r'
  1559  007C96  6F                 	db	111	;'o'
  1560  007C97  6D                 	db	109	;'m'
  1561  007C98  20                 	db	32
  1562  007C99  54                 	db	84	;'T'
  1563  007C9A  58                 	db	88	;'X'
  1564  007C9B  20                 	db	32
  1565  007C9C  73                 	db	115	;'s'
  1566  007C9D  79                 	db	121	;'y'
  1567  007C9E  73                 	db	115	;'s'
  1568  007C9F  74                 	db	116	;'t'
  1569  007CA0  65                 	db	101	;'e'
  1570  007CA1  6D                 	db	109	;'m'
  1571  007CA2  2E                 	db	46
  1572  007CA3  0D                 	db	13
  1573  007CA4  0A                 	db	10
  1574  007CA5  00                 	db	0
  1575  007CA6                     STR_35:
  1576                           
  1577                           ; BSR set to: 1
  1578  007CA6  24                 	db	36
  1579  007CA7  52                 	db	82	;'R'
  1580  007CA8  51                 	db	81	;'Q'
  1581  007CA9  20                 	db	32
  1582  007CAA  3C                 	db	60	;'<'
  1583  007CAB  63                 	db	99	;'c'
  1584  007CAC  72                 	db	114	;'r'
  1585  007CAD  3E                 	db	62	;'>'
  1586  007CAE  20                 	db	32
  1587  007CAF  20                 	db	32
  1588  007CB0  20                 	db	32
  1589  007CB1  20                 	db	32
  1590  007CB2  20                 	db	32
  1591  007CB3  20                 	db	32
  1592  007CB4  20                 	db	32
  1593  007CB5  20                 	db	32
  1594  007CB6  20                 	db	32
  1595  007CB7  47                 	db	71	;'G'
  1596  007CB8  65                 	db	101	;'e'
  1597  007CB9  74                 	db	116	;'t'
  1598  007CBA  20                 	db	32
  1599  007CBB  73                 	db	115	;'s'
  1600  007CBC  74                 	db	116	;'t'
  1601  007CBD  61                 	db	97	;'a'
  1602  007CBE  74                 	db	116	;'t'
  1603  007CBF  75                 	db	117	;'u'
  1604  007CC0  73                 	db	115	;'s'
  1605  007CC1  20                 	db	32
  1606  007CC2  66                 	db	102	;'f'
  1607  007CC3  72                 	db	114	;'r'
  1608  007CC4  6F                 	db	111	;'o'
  1609  007CC5  6D                 	db	109	;'m'
  1610  007CC6  20                 	db	32
  1611  007CC7  52                 	db	82	;'R'
  1612  007CC8  58                 	db	88	;'X'
  1613  007CC9  20                 	db	32
  1614  007CCA  73                 	db	115	;'s'
  1615  007CCB  79                 	db	121	;'y'
  1616  007CCC  73                 	db	115	;'s'
  1617  007CCD  74                 	db	116	;'t'
  1618  007CCE  65                 	db	101	;'e'
  1619  007CCF  6D                 	db	109	;'m'
  1620  007CD0  0D                 	db	13
  1621  007CD1  0A                 	db	10
  1622  007CD2  00                 	db	0
  1623  007CD3                     STR_47:
  1624                           
  1625                           ; BSR set to: 1
  1626  007CD3  24                 	db	36
  1627  007CD4  53                 	db	83	;'S'
  1628  007CD5  51                 	db	81	;'Q'
  1629  007CD6  20                 	db	32
  1630  007CD7  3C                 	db	60	;'<'
  1631  007CD8  63                 	db	99	;'c'
  1632  007CD9  72                 	db	114	;'r'
  1633  007CDA  3E                 	db	62	;'>'
  1634  007CDB  20                 	db	32
  1635  007CDC  20                 	db	32
  1636  007CDD  20                 	db	32
  1637  007CDE  20                 	db	32
  1638  007CDF  20                 	db	32
  1639  007CE0  20                 	db	32
  1640  007CE1  20                 	db	32
  1641  007CE2  20                 	db	32
  1642  007CE3  20                 	db	32
  1643  007CE4  52                 	db	82	;'R'
  1644  007CE5  65                 	db	101	;'e'
  1645  007CE6  61                 	db	97	;'a'
  1646  007CE7  64                 	db	100	;'d'
  1647  007CE8  20                 	db	32
  1648  007CE9  53                 	db	83	;'S'
  1649  007CEA  79                 	db	121	;'y'
  1650  007CEB  73                 	db	115	;'s'
  1651  007CEC  74                 	db	116	;'t'
  1652  007CED  65                 	db	101	;'e'
  1653  007CEE  6D                 	db	109	;'m'
  1654  007CEF  20                 	db	32
  1655  007CF0  53                 	db	83	;'S'
  1656  007CF1  74                 	db	116	;'t'
  1657  007CF2  61                 	db	97	;'a'
  1658  007CF3  74                 	db	116	;'t'
  1659  007CF4  75                 	db	117	;'u'
  1660  007CF5  73                 	db	115	;'s'
  1661  007CF6  20                 	db	32
  1662  007CF7  0D                 	db	13
  1663  007CF8  0A                 	db	10
  1664  007CF9  00                 	db	0
  1665  007CFA                     STR_44:
  1666                           
  1667                           ; BSR set to: 1
  1668  007CFA  24                 	db	36
  1669  007CFB  53                 	db	83	;'S'
  1670  007CFC  51                 	db	81	;'Q'
  1671  007CFD  20                 	db	32
  1672  007CFE  3C                 	db	60	;'<'
  1673  007CFF  58                 	db	88	;'X'
  1674  007D00  3E                 	db	62	;'>'
  1675  007D01  3C                 	db	60	;'<'
  1676  007D02  63                 	db	99	;'c'
  1677  007D03  72                 	db	114	;'r'
  1678  007D04  3E                 	db	62	;'>'
  1679  007D05  20                 	db	32
  1680  007D06  20                 	db	32
  1681  007D07  20                 	db	32
  1682  007D08  20                 	db	32
  1683  007D09  20                 	db	32
  1684  007D0A  20                 	db	32
  1685  007D0B  47                 	db	71	;'G'
  1686  007D0C  65                 	db	101	;'e'
  1687  007D0D  74                 	db	116	;'t'
  1688  007D0E  20                 	db	32
  1689  007D0F  73                 	db	115	;'s'
  1690  007D10  79                 	db	121	;'y'
  1691  007D11  73                 	db	115	;'s'
  1692  007D12  74                 	db	116	;'t'
  1693  007D13  65                 	db	101	;'e'
  1694  007D14  6D                 	db	109	;'m'
  1695  007D15  20                 	db	32
  1696  007D16  73                 	db	115	;'s'
  1697  007D17  74                 	db	116	;'t'
  1698  007D18  61                 	db	97	;'a'
  1699  007D19  74                 	db	116	;'t'
  1700  007D1A  75                 	db	117	;'u'
  1701  007D1B  73                 	db	115	;'s'
  1702  007D1C  2E                 	db	46
  1703  007D1D  0D                 	db	13
  1704  007D1E  0A                 	db	10
  1705  007D1F  00                 	db	0
  1706  007D20                     STR_45:
  1707                           
  1708                           ; BSR set to: 1
  1709  007D20  24                 	db	36
  1710  007D21  53                 	db	83	;'S'
  1711  007D22  4C                 	db	76	;'L'
  1712  007D23  20                 	db	32
  1713  007D24  3C                 	db	60	;'<'
  1714  007D25  63                 	db	99	;'c'
  1715  007D26  72                 	db	114	;'r'
  1716  007D27  3E                 	db	62	;'>'
  1717  007D28  20                 	db	32
  1718  007D29  20                 	db	32
  1719  007D2A  20                 	db	32
  1720  007D2B  20                 	db	32
  1721  007D2C  20                 	db	32
  1722  007D2D  20                 	db	32
  1723  007D2E  20                 	db	32
  1724  007D2F  20                 	db	32
  1725  007D30  20                 	db	32
  1726  007D31  54                 	db	84	;'T'
  1727  007D32  65                 	db	101	;'e'
  1728  007D33  73                 	db	115	;'s'
  1729  007D34  74                 	db	116	;'t'
  1730  007D35  20                 	db	32
  1731  007D36  73                 	db	115	;'s'
  1732  007D37  79                 	db	121	;'y'
  1733  007D38  73                 	db	115	;'s'
  1734  007D39  74                 	db	116	;'t'
  1735  007D3A  65                 	db	101	;'e'
  1736  007D3B  6D                 	db	109	;'m'
  1737  007D3C  20                 	db	32
  1738  007D3D  4C                 	db	76	;'L'
  1739  007D3E  45                 	db	69	;'E'
  1740  007D3F  44                 	db	68	;'D'
  1741  007D40  73                 	db	115	;'s'
  1742  007D41  2E                 	db	46
  1743  007D42  0D                 	db	13
  1744  007D43  0A                 	db	10
  1745  007D44  00                 	db	0
  1746  007D45                     STR_65:
  1747                           
  1748                           ; BSR set to: 1
  1749  007D45  54                 	db	84	;'T'
  1750  007D46  58                 	db	88	;'X'
  1751  007D47  20                 	db	32
  1752  007D48  53                 	db	83	;'S'
  1753  007D49  59                 	db	89	;'Y'
  1754  007D4A  4E                 	db	78	;'N'
  1755  007D4B  54                 	db	84	;'T'
  1756  007D4C  48                 	db	72	;'H'
  1757  007D4D  20                 	db	32
  1758  007D4E  28                 	db	40
  1759  007D4F  50                 	db	80	;'P'
  1760  007D50  4C                 	db	76	;'L'
  1761  007D51  4C                 	db	76	;'L'
  1762  007D52  29                 	db	41
  1763  007D53  20                 	db	32
  1764  007D54  4C                 	db	76	;'L'
  1765  007D55  6F                 	db	111	;'o'
  1766  007D56  63                 	db	99	;'c'
  1767  007D57  6B                 	db	107	;'k'
  1768  007D58  20                 	db	32
  1769  007D59  69                 	db	105	;'i'
  1770  007D5A  6E                 	db	110	;'n'
  1771  007D5B  64                 	db	100	;'d'
  1772  007D5C  69                 	db	105	;'i'
  1773  007D5D  63                 	db	99	;'c'
  1774  007D5E  61                 	db	97	;'a'
  1775  007D5F  74                 	db	116	;'t'
  1776  007D60  69                 	db	105	;'i'
  1777  007D61  6F                 	db	111	;'o'
  1778  007D62  6E                 	db	110	;'n'
  1779  007D63  20                 	db	32
  1780  007D64  25                 	db	37
  1781  007D65  64                 	db	100	;'d'
  1782  007D66  0A                 	db	10
  1783  007D67  0D                 	db	13
  1784  007D68  00                 	db	0
  1785  007D69                     STR_58:
  1786                           
  1787                           ; BSR set to: 1
  1788  007D69  49                 	db	73	;'I'
  1789  007D6A  6E                 	db	110	;'n'
  1790  007D6B  70                 	db	112	;'p'
  1791  007D6C  75                 	db	117	;'u'
  1792  007D6D  74                 	db	116	;'t'
  1793  007D6E  20                 	db	32
  1794  007D6F  70                 	db	112	;'p'
  1795  007D70  6F                 	db	111	;'o'
  1796  007D71  77                 	db	119	;'w'
  1797  007D72  65                 	db	101	;'e'
  1798  007D73  72                 	db	114	;'r'
  1799  007D74  20                 	db	32
  1800  007D75  73                 	db	115	;'s'
  1801  007D76  74                 	db	116	;'t'
  1802  007D77  61                 	db	97	;'a'
  1803  007D78  74                 	db	116	;'t'
  1804  007D79  75                 	db	117	;'u'
  1805  007D7A  73                 	db	115	;'s'
  1806  007D7B  20                 	db	32
  1807  007D7C  30                 	db	48	;'0'
  1808  007D7D  3A                 	db	58	;':'
  1809  007D7E  20                 	db	32
  1810  007D7F  4F                 	db	79	;'O'
  1811  007D80  46                 	db	70	;'F'
  1812  007D81  46                 	db	70	;'F'
  1813  007D82  20                 	db	32
  1814  007D83  31                 	db	49	;'1'
  1815  007D84  3A                 	db	58	;':'
  1816  007D85  20                 	db	32
  1817  007D86  4F                 	db	79	;'O'
  1818  007D87  4E                 	db	78	;'N'
  1819  007D88  25                 	db	37
  1820  007D89  64                 	db	100	;'d'
  1821  007D8A  0A                 	db	10
  1822  007D8B  0D                 	db	13
  1823  007D8C  00                 	db	0
  1824  007D8D                     STR_48:
  1825                           
  1826                           ; BSR set to: 1
  1827  007D8D  24                 	db	36
  1828  007D8E  53                 	db	83	;'S'
  1829  007D8F  54                 	db	84	;'T'
  1830  007D90  20                 	db	32
  1831  007D91  3C                 	db	60	;'<'
  1832  007D92  63                 	db	99	;'c'
  1833  007D93  72                 	db	114	;'r'
  1834  007D94  3E                 	db	62	;'>'
  1835  007D95  20                 	db	32
  1836  007D96  20                 	db	32
  1837  007D97  20                 	db	32
  1838  007D98  20                 	db	32
  1839  007D99  20                 	db	32
  1840  007D9A  20                 	db	32
  1841  007D9B  20                 	db	32
  1842  007D9C  20                 	db	32
  1843  007D9D  20                 	db	32
  1844  007D9E  53                 	db	83	;'S'
  1845  007D9F  65                 	db	101	;'e'
  1846  007DA0  74                 	db	116	;'t'
  1847  007DA1  20                 	db	32
  1848  007DA2  55                 	db	85	;'U'
  1849  007DA3  6E                 	db	110	;'n'
  1850  007DA4  69                 	db	105	;'i'
  1851  007DA5  74                 	db	116	;'t'
  1852  007DA6  20                 	db	32
  1853  007DA7  54                 	db	84	;'T'
  1854  007DA8  79                 	db	121	;'y'
  1855  007DA9  70                 	db	112	;'p'
  1856  007DAA  65                 	db	101	;'e'
  1857  007DAB  20                 	db	32
  1858  007DAC  0D                 	db	13
  1859  007DAD  0A                 	db	10
  1860  007DAE  00                 	db	0
  1861  007DAF                     STR_6:
  1862                           
  1863                           ; BSR set to: 1
  1864  007DAF  52                 	db	82	;'R'
  1865  007DB0  58                 	db	88	;'X'
  1866  007DB1  20                 	db	32
  1867  007DB2  53                 	db	83	;'S'
  1868  007DB3  41                 	db	65	;'A'
  1869  007DB4  4D                 	db	77	;'M'
  1870  007DB5  50                 	db	80	;'P'
  1871  007DB6  4C                 	db	76	;'L'
  1872  007DB7  45                 	db	69	;'E'
  1873  007DB8  20                 	db	32
  1874  007DB9  43                 	db	67	;'C'
  1875  007DBA  48                 	db	72	;'H'
  1876  007DBB  41                 	db	65	;'A'
  1877  007DBC  4E                 	db	78	;'N'
  1878  007DBD  4E                 	db	78	;'N'
  1879  007DBE  45                 	db	69	;'E'
  1880  007DBF  4C                 	db	76	;'L'
  1881  007DC0  20                 	db	32
  1882  007DC1  52                 	db	82	;'R'
  1883  007DC2  58                 	db	88	;'X'
  1884  007DC3  2D                 	db	45
  1885  007DC4  41                 	db	65	;'A'
  1886  007DC5  44                 	db	68	;'D'
  1887  007DC6  43                 	db	67	;'C'
  1888  007DC7  5F                 	db	95	;'_'
  1889  007DC8  56                 	db	86	;'V'
  1890  007DC9  47                 	db	71	;'G'
  1891  007DCA  5F                 	db	95	;'_'
  1892  007DCB  4D                 	db	77	;'M'
  1893  007DCC  4F                 	db	79	;'O'
  1894  007DCD  4E                 	db	78	;'N'
  1895  007DCE  0A                 	db	10
  1896  007DCF  0D                 	db	13
  1897  007DD0  00                 	db	0
  1898  007DD1                     STR_2:
  1899                           
  1900                           ; BSR set to: 1
  1901  007DD1  54                 	db	84	;'T'
  1902  007DD2  58                 	db	88	;'X'
  1903  007DD3  20                 	db	32
  1904  007DD4  53                 	db	83	;'S'
  1905  007DD5  41                 	db	65	;'A'
  1906  007DD6  4D                 	db	77	;'M'
  1907  007DD7  50                 	db	80	;'P'
  1908  007DD8  4C                 	db	76	;'L'
  1909  007DD9  45                 	db	69	;'E'
  1910  007DDA  20                 	db	32
  1911  007DDB  43                 	db	67	;'C'
  1912  007DDC  48                 	db	72	;'H'
  1913  007DDD  41                 	db	65	;'A'
  1914  007DDE  4E                 	db	78	;'N'
  1915  007DDF  4E                 	db	78	;'N'
  1916  007DE0  45                 	db	69	;'E'
  1917  007DE1  4C                 	db	76	;'L'
  1918  007DE2  3A                 	db	58	;':'
  1919  007DE3  20                 	db	32
  1920  007DE4  54                 	db	84	;'T'
  1921  007DE5  58                 	db	88	;'X'
  1922  007DE6  2D                 	db	45
  1923  007DE7  41                 	db	65	;'A'
  1924  007DE8  44                 	db	68	;'D'
  1925  007DE9  43                 	db	67	;'C'
  1926  007DEA  5F                 	db	95	;'_'
  1927  007DEB  52                 	db	82	;'R'
  1928  007DEC  52                 	db	82	;'R'
  1929  007DED  45                 	db	69	;'E'
  1930  007DEE  56                 	db	86	;'V'
  1931  007DEF  0A                 	db	10
  1932  007DF0  0D                 	db	13
  1933  007DF1  00                 	db	0
  1934  007DF2                     STR_5:
  1935                           
  1936                           ; BSR set to: 1
  1937  007DF2  52                 	db	82	;'R'
  1938  007DF3  58                 	db	88	;'X'
  1939  007DF4  20                 	db	32
  1940  007DF5  53                 	db	83	;'S'
  1941  007DF6  41                 	db	65	;'A'
  1942  007DF7  4D                 	db	77	;'M'
  1943  007DF8  50                 	db	80	;'P'
  1944  007DF9  4C                 	db	76	;'L'
  1945  007DFA  45                 	db	69	;'E'
  1946  007DFB  20                 	db	32
  1947  007DFC  43                 	db	67	;'C'
  1948  007DFD  48                 	db	72	;'H'
  1949  007DFE  41                 	db	65	;'A'
  1950  007DFF  4E                 	db	78	;'N'
  1951  007E00  4E                 	db	78	;'N'
  1952  007E01  45                 	db	69	;'E'
  1953  007E02  4C                 	db	76	;'L'
  1954  007E03  20                 	db	32
  1955  007E04  52                 	db	82	;'R'
  1956  007E05  58                 	db	88	;'X'
  1957  007E06  2D                 	db	45
  1958  007E07  41                 	db	65	;'A'
  1959  007E08  44                 	db	68	;'D'
  1960  007E09  43                 	db	67	;'C'
  1961  007E0A  5F                 	db	95	;'_'
  1962  007E0B  46                 	db	70	;'F'
  1963  007E0C  46                 	db	70	;'F'
  1964  007E0D  57                 	db	87	;'W'
  1965  007E0E  52                 	db	82	;'R'
  1966  007E0F  0A                 	db	10
  1967  007E10  0D                 	db	13
  1968  007E11  00                 	db	0
  1969  007E12                     STR_18:
  1970                           
  1971                           ; BSR set to: 1
  1972  007E12  2A                 	db	42
  1973  007E13  2A                 	db	42
  1974  007E14  2A                 	db	42
  1975  007E15  2A                 	db	42
  1976  007E16  2A                 	db	42
  1977  007E17  2A                 	db	42
  1978  007E18  2A                 	db	42
  1979  007E19  2A                 	db	42
  1980  007E1A  2A                 	db	42
  1981  007E1B  2A                 	db	42
  1982  007E1C  2A                 	db	42
  1983  007E1D  2A                 	db	42
  1984  007E1E  2A                 	db	42
  1985  007E1F  2A                 	db	42
  1986  007E20  2A                 	db	42
  1987  007E21  2A                 	db	42
  1988  007E22  2A                 	db	42
  1989  007E23  2A                 	db	42
  1990  007E24  2A                 	db	42
  1991  007E25  2A                 	db	42
  1992  007E26  2A                 	db	42
  1993  007E27  2A                 	db	42
  1994  007E28  2A                 	db	42
  1995  007E29  2A                 	db	42
  1996  007E2A  2A                 	db	42
  1997  007E2B  2A                 	db	42
  1998  007E2C  2A                 	db	42
  1999  007E2D  20                 	db	32
  2000  007E2E  0A                 	db	10
  2001  007E2F  0D                 	db	13
  2002  007E30  00                 	db	0
  2003  007E31                     STR_40:
  2004                           
  2005                           ; BSR set to: 1
  2006  007E31  0A                 	db	10
  2007  007E32  0D                 	db	13
  2008  007E33  3C                 	db	60	;'<'
  2009  007E34  43                 	db	67	;'C'
  2010  007E35  6F                 	db	111	;'o'
  2011  007E36  6D                 	db	109	;'m'
  2012  007E37  6D                 	db	109	;'m'
  2013  007E38  6F                 	db	111	;'o'
  2014  007E39  6E                 	db	110	;'n'
  2015  007E3A  20                 	db	32
  2016  007E3B  73                 	db	115	;'s'
  2017  007E3C  79                 	db	121	;'y'
  2018  007E3D  73                 	db	115	;'s'
  2019  007E3E  74                 	db	116	;'t'
  2020  007E3F  65                 	db	101	;'e'
  2021  007E40  6D                 	db	109	;'m'
  2022  007E41  20                 	db	32
  2023  007E42  63                 	db	99	;'c'
  2024  007E43  6F                 	db	111	;'o'
  2025  007E44  6D                 	db	109	;'m'
  2026  007E45  6D                 	db	109	;'m'
  2027  007E46  61                 	db	97	;'a'
  2028  007E47  6E                 	db	110	;'n'
  2029  007E48  64                 	db	100	;'d'
  2030  007E49  73                 	db	115	;'s'
  2031  007E4A  3E                 	db	62	;'>'
  2032  007E4B  0A                 	db	10
  2033  007E4C  0D                 	db	13
  2034  007E4D  00                 	db	0
  2035  007E4E                     STR_3:
  2036                           
  2037                           ; BSR set to: 1
  2038  007E4E  54                 	db	84	;'T'
  2039  007E4F  58                 	db	88	;'X'
  2040  007E50  20                 	db	32
  2041  007E51  53                 	db	83	;'S'
  2042  007E52  41                 	db	65	;'A'
  2043  007E53  4D                 	db	77	;'M'
  2044  007E54  50                 	db	80	;'P'
  2045  007E55  4C                 	db	76	;'L'
  2046  007E56  45                 	db	69	;'E'
  2047  007E57  20                 	db	32
  2048  007E58  43                 	db	67	;'C'
  2049  007E59  48                 	db	72	;'H'
  2050  007E5A  41                 	db	65	;'A'
  2051  007E5B  4E                 	db	78	;'N'
  2052  007E5C  4E                 	db	78	;'N'
  2053  007E5D  45                 	db	69	;'E'
  2054  007E5E  4C                 	db	76	;'L'
  2055  007E5F  20                 	db	32
  2056  007E60  41                 	db	65	;'A'
  2057  007E61  44                 	db	68	;'D'
  2058  007E62  43                 	db	67	;'C'
  2059  007E63  5F                 	db	95	;'_'
  2060  007E64  54                 	db	84	;'T'
  2061  007E65  45                 	db	69	;'E'
  2062  007E66  4D                 	db	77	;'M'
  2063  007E67  50                 	db	80	;'P'
  2064  007E68  0A                 	db	10
  2065  007E69  0D                 	db	13
  2066  007E6A  00                 	db	0
  2067  007E6B                     STR_33:
  2068                           
  2069                           ; BSR set to: 1
  2070  007E6B  0A                 	db	10
  2071  007E6C  0D                 	db	13
  2072  007E6D  3C                 	db	60	;'<'
  2073  007E6E  52                 	db	82	;'R'
  2074  007E6F  58                 	db	88	;'X'
  2075  007E70  20                 	db	32
  2076  007E71  73                 	db	115	;'s'
  2077  007E72  79                 	db	121	;'y'
  2078  007E73  73                 	db	115	;'s'
  2079  007E74  74                 	db	116	;'t'
  2080  007E75  65                 	db	101	;'e'
  2081  007E76  6D                 	db	109	;'m'
  2082  007E77  20                 	db	32
  2083  007E78  63                 	db	99	;'c'
  2084  007E79  6F                 	db	111	;'o'
  2085  007E7A  6D                 	db	109	;'m'
  2086  007E7B  6D                 	db	109	;'m'
  2087  007E7C  61                 	db	97	;'a'
  2088  007E7D  6E                 	db	110	;'n'
  2089  007E7E  64                 	db	100	;'d'
  2090  007E7F  73                 	db	115	;'s'
  2091  007E80  3E                 	db	62	;'>'
  2092  007E81  0A                 	db	10
  2093  007E82  0D                 	db	13
  2094  007E83  00                 	db	0
  2095  007E84                     STR_57:
  2096                           
  2097                           ; BSR set to: 1
  2098  007E84  44                 	db	68	;'D'
  2099  007E85  65                 	db	101	;'e'
  2100  007E86  76                 	db	118	;'v'
  2101  007E87  69                 	db	105	;'i'
  2102  007E88  63                 	db	99	;'c'
  2103  007E89  65                 	db	101	;'e'
  2104  007E8A  20                 	db	32
  2105  007E8B  54                 	db	84	;'T'
  2106  007E8C  65                 	db	101	;'e'
  2107  007E8D  6D                 	db	109	;'m'
  2108  007E8E  70                 	db	112	;'p'
  2109  007E8F  65                 	db	101	;'e'
  2110  007E90  72                 	db	114	;'r'
  2111  007E91  61                 	db	97	;'a'
  2112  007E92  74                 	db	116	;'t'
  2113  007E93  75                 	db	117	;'u'
  2114  007E94  72                 	db	114	;'r'
  2115  007E95  65                 	db	101	;'e'
  2116  007E96  20                 	db	32
  2117  007E97  25                 	db	37
  2118  007E98  66                 	db	102	;'f'
  2119  007E99  0A                 	db	10
  2120  007E9A  0D                 	db	13
  2121  007E9B  00                 	db	0
  2122  007E9C                     STR_59:
  2123                           
  2124                           ; BSR set to: 1
  2125  007E9C  52                 	db	82	;'R'
  2126  007E9D  58                 	db	88	;'X'
  2127  007E9E  20                 	db	32
  2128  007E9F  46                 	db	70	;'F'
  2129  007EA0  72                 	db	114	;'r'
  2130  007EA1  65                 	db	101	;'e'
  2131  007EA2  71                 	db	113	;'q'
  2132  007EA3  75                 	db	117	;'u'
  2133  007EA4  65                 	db	101	;'e'
  2134  007EA5  6E                 	db	110	;'n'
  2135  007EA6  63                 	db	99	;'c'
  2136  007EA7  79                 	db	121	;'y'
  2137  007EA8  20                 	db	32
  2138  007EA9  69                 	db	105	;'i'
  2139  007EAA  6E                 	db	110	;'n'
  2140  007EAB  20                 	db	32
  2141  007EAC  4D                 	db	77	;'M'
  2142  007EAD  48                 	db	72	;'H'
  2143  007EAE  7A                 	db	122	;'z'
  2144  007EAF  25                 	db	37
  2145  007EB0  66                 	db	102	;'f'
  2146  007EB1  0A                 	db	10
  2147  007EB2  0D                 	db	13
  2148  007EB3  00                 	db	0
  2149  007EB4                     STR_68:
  2150                           
  2151                           ; BSR set to: 1
  2152  007EB4  54                 	db	84	;'T'
  2153  007EB5  58                 	db	88	;'X'
  2154  007EB6  20                 	db	32
  2155  007EB7  46                 	db	70	;'F'
  2156  007EB8  72                 	db	114	;'r'
  2157  007EB9  65                 	db	101	;'e'
  2158  007EBA  71                 	db	113	;'q'
  2159  007EBB  75                 	db	117	;'u'
  2160  007EBC  65                 	db	101	;'e'
  2161  007EBD  6E                 	db	110	;'n'
  2162  007EBE  63                 	db	99	;'c'
  2163  007EBF  79                 	db	121	;'y'
  2164  007EC0  20                 	db	32
  2165  007EC1  69                 	db	105	;'i'
  2166  007EC2  6E                 	db	110	;'n'
  2167  007EC3  20                 	db	32
  2168  007EC4  4D                 	db	77	;'M'
  2169  007EC5  48                 	db	72	;'H'
  2170  007EC6  7A                 	db	122	;'z'
  2171  007EC7  25                 	db	37
  2172  007EC8  66                 	db	102	;'f'
  2173  007EC9  0A                 	db	10
  2174  007ECA  0D                 	db	13
  2175  007ECB  00                 	db	0
  2176  007ECC                     STR_27:
  2177                           
  2178                           ; BSR set to: 1
  2179  007ECC  3C                 	db	60	;'<'
  2180  007ECD  54                 	db	84	;'T'
  2181  007ECE  58                 	db	88	;'X'
  2182  007ECF  20                 	db	32
  2183  007ED0  73                 	db	115	;'s'
  2184  007ED1  79                 	db	121	;'y'
  2185  007ED2  73                 	db	115	;'s'
  2186  007ED3  74                 	db	116	;'t'
  2187  007ED4  65                 	db	101	;'e'
  2188  007ED5  6D                 	db	109	;'m'
  2189  007ED6  20                 	db	32
  2190  007ED7  63                 	db	99	;'c'
  2191  007ED8  6F                 	db	111	;'o'
  2192  007ED9  6D                 	db	109	;'m'
  2193  007EDA  6D                 	db	109	;'m'
  2194  007EDB  61                 	db	97	;'a'
  2195  007EDC  6E                 	db	110	;'n'
  2196  007EDD  64                 	db	100	;'d'
  2197  007EDE  73                 	db	115	;'s'
  2198  007EDF  3E                 	db	62	;'>'
  2199  007EE0  0A                 	db	10
  2200  007EE1  0D                 	db	13
  2201  007EE2  00                 	db	0
  2202  007EE3                     STR_61:
  2203                           
  2204                           ; BSR set to: 1
  2205  007EE3  4C                 	db	76	;'L'
  2206  007EE4  69                 	db	105	;'i'
  2207  007EE5  67                 	db	103	;'g'
  2208  007EE6  68                 	db	104	;'h'
  2209  007EE7  74                 	db	116	;'t'
  2210  007EE8  20                 	db	32
  2211  007EE9  30                 	db	48	;'0'
  2212  007EEA  3A                 	db	58	;':'
  2213  007EEB  20                 	db	32
  2214  007EEC  4F                 	db	79	;'O'
  2215  007EED  46                 	db	70	;'F'
  2216  007EEE  46                 	db	70	;'F'
  2217  007EEF  20                 	db	32
  2218  007EF0  31                 	db	49	;'1'
  2219  007EF1  3A                 	db	58	;':'
  2220  007EF2  20                 	db	32
  2221  007EF3  4F                 	db	79	;'O'
  2222  007EF4  4E                 	db	78	;'N'
  2223  007EF5  25                 	db	37
  2224  007EF6  64                 	db	100	;'d'
  2225  007EF7  0A                 	db	10
  2226  007EF8  0D                 	db	13
  2227  007EF9  00                 	db	0
  2228  007EFA                     STR_55:
  2229                           
  2230                           ; BSR set to: 1
  2231  007EFA  2A                 	db	42
  2232  007EFB  2A                 	db	42
  2233  007EFC  2A                 	db	42
  2234  007EFD  2A                 	db	42
  2235  007EFE  2A                 	db	42
  2236  007EFF  2A                 	db	42
  2237  007F00  2A                 	db	42
  2238  007F01  2A                 	db	42
  2239  007F02  2A                 	db	42
  2240  007F03  2A                 	db	42
  2241  007F04  2A                 	db	42
  2242  007F05  2A                 	db	42
  2243  007F06  2A                 	db	42
  2244  007F07  2A                 	db	42
  2245  007F08  2A                 	db	42
  2246  007F09  2A                 	db	42
  2247  007F0A  2A                 	db	42
  2248  007F0B  2A                 	db	42
  2249  007F0C  2A                 	db	42
  2250  007F0D  0A                 	db	10
  2251  007F0E  0D                 	db	13
  2252  007F0F  00                 	db	0
  2253  007F10                     STR_52:
  2254                           
  2255                           ; BSR set to: 1
  2256  007F10  53                 	db	83	;'S'
  2257  007F11  4F                 	db	79	;'O'
  2258  007F12  46                 	db	70	;'F'
  2259  007F13  54                 	db	84	;'T'
  2260  007F14  57                 	db	87	;'W'
  2261  007F15  41                 	db	65	;'A'
  2262  007F16  52                 	db	82	;'R'
  2263  007F17  45                 	db	69	;'E'
  2264  007F18  20                 	db	32
  2265  007F19  56                 	db	86	;'V'
  2266  007F1A  45                 	db	69	;'E'
  2267  007F1B  52                 	db	82	;'R'
  2268  007F1C  53                 	db	83	;'S'
  2269  007F1D  49                 	db	73	;'I'
  2270  007F1E  4F                 	db	79	;'O'
  2271  007F1F  4E                 	db	78	;'N'
  2272  007F20  20                 	db	32
  2273  007F21  25                 	db	37
  2274  007F22  73                 	db	115	;'s'
  2275  007F23  0A                 	db	10
  2276  007F24  0D                 	db	13
  2277  007F25  00                 	db	0
  2278  007F26                     STR_19:
  2279                           
  2280                           ; BSR set to: 1
  2281  007F26  46                 	db	70	;'F'
  2282  007F27  41                 	db	65	;'A'
  2283  007F28  53                 	db	83	;'S'
  2284  007F29  54                 	db	84	;'T'
  2285  007F2A  20                 	db	32
  2286  007F2B  4C                 	db	76	;'L'
  2287  007F2C  49                 	db	73	;'I'
  2288  007F2D  4E                 	db	78	;'N'
  2289  007F2E  4B                 	db	75	;'K'
  2290  007F2F  20                 	db	32
  2291  007F30  53                 	db	83	;'S'
  2292  007F31  59                 	db	89	;'Y'
  2293  007F32  53                 	db	83	;'S'
  2294  007F33  54                 	db	84	;'T'
  2295  007F34  45                 	db	69	;'E'
  2296  007F35  4D                 	db	77	;'M'
  2297  007F36  20                 	db	32
  2298  007F37  0A                 	db	10
  2299  007F38  0D                 	db	13
  2300  007F39  00                 	db	0
  2301  007F3A                     STR_24:
  2302                           
  2303                           ; BSR set to: 1
  2304  007F3A  43                 	db	67	;'C'
  2305  007F3B  6F                 	db	111	;'o'
  2306  007F3C  6D                 	db	109	;'m'
  2307  007F3D  70                 	db	112	;'p'
  2308  007F3E  69                 	db	105	;'i'
  2309  007F3F  6C                 	db	108	;'l'
  2310  007F40  65                 	db	101	;'e'
  2311  007F41  20                 	db	32
  2312  007F42  74                 	db	116	;'t'
  2313  007F43  69                 	db	105	;'i'
  2314  007F44  6D                 	db	109	;'m'
  2315  007F45  65                 	db	101	;'e'
  2316  007F46  3A                 	db	58	;':'
  2317  007F47  20                 	db	32
  2318  007F48  25                 	db	37
  2319  007F49  73                 	db	115	;'s'
  2320  007F4A  20                 	db	32
  2321  007F4B  0A                 	db	10
  2322  007F4C  0D                 	db	13
  2323  007F4D  00                 	db	0
  2324  007F4E                     STR_22:
  2325                           
  2326                           ; BSR set to: 1
  2327  007F4E  43                 	db	67	;'C'
  2328  007F4F  6F                 	db	111	;'o'
  2329  007F50  6D                 	db	109	;'m'
  2330  007F51  70                 	db	112	;'p'
  2331  007F52  69                 	db	105	;'i'
  2332  007F53  6C                 	db	108	;'l'
  2333  007F54  65                 	db	101	;'e'
  2334  007F55  20                 	db	32
  2335  007F56  64                 	db	100	;'d'
  2336  007F57  61                 	db	97	;'a'
  2337  007F58  74                 	db	116	;'t'
  2338  007F59  65                 	db	101	;'e'
  2339  007F5A  3A                 	db	58	;':'
  2340  007F5B  20                 	db	32
  2341  007F5C  25                 	db	37
  2342  007F5D  73                 	db	115	;'s'
  2343  007F5E  20                 	db	32
  2344  007F5F  0A                 	db	10
  2345  007F60  0D                 	db	13
  2346  007F61  00                 	db	0
  2347  007F62                     STR_20:
  2348                           
  2349                           ; BSR set to: 1
  2350  007F62  53                 	db	83	;'S'
  2351  007F63  57                 	db	87	;'W'
  2352  007F64  20                 	db	32
  2353  007F65  56                 	db	86	;'V'
  2354  007F66  45                 	db	69	;'E'
  2355  007F67  53                 	db	83	;'S'
  2356  007F68  52                 	db	82	;'R'
  2357  007F69  49                 	db	73	;'I'
  2358  007F6A  4F                 	db	79	;'O'
  2359  007F6B  4E                 	db	78	;'N'
  2360  007F6C  3A                 	db	58	;':'
  2361  007F6D  20                 	db	32
  2362  007F6E  25                 	db	37
  2363  007F6F  73                 	db	115	;'s'
  2364  007F70  20                 	db	32
  2365  007F71  0A                 	db	10
  2366  007F72  0D                 	db	13
  2367  007F73  00                 	db	0
  2368  007F74                     STR_54:
  2369                           
  2370                           ; BSR set to: 1
  2371  007F74  50                 	db	80	;'P'
  2372  007F75  41                 	db	65	;'A'
  2373  007F76  53                 	db	83	;'S'
  2374  007F77  53                 	db	83	;'S'
  2375  007F78  20                 	db	32
  2376  007F79  43                 	db	67	;'C'
  2377  007F7A  4F                 	db	79	;'O'
  2378  007F7B  55                 	db	85	;'U'
  2379  007F7C  4E                 	db	78	;'N'
  2380  007F7D  54                 	db	84	;'T'
  2381  007F7E  45                 	db	69	;'E'
  2382  007F7F  52                 	db	82	;'R'
  2383  007F80  20                 	db	32
  2384  007F81  25                 	db	37
  2385  007F82  64                 	db	100	;'d'
  2386  007F83  0A                 	db	10
  2387  007F84  0D                 	db	13
  2388  007F85  00                 	db	0
  2389  007F86                     STR_53:
  2390                           
  2391                           ; BSR set to: 1
  2392  007F86  55                 	db	85	;'U'
  2393  007F87  4E                 	db	78	;'N'
  2394  007F88  49                 	db	73	;'I'
  2395  007F89  54                 	db	84	;'T'
  2396  007F8A  20                 	db	32
  2397  007F8B  54                 	db	84	;'T'
  2398  007F8C  59                 	db	89	;'Y'
  2399  007F8D  50                 	db	80	;'P'
  2400  007F8E  45                 	db	69	;'E'
  2401  007F8F  20                 	db	32
  2402  007F90  25                 	db	37
  2403  007F91  64                 	db	100	;'d'
  2404  007F92  0A                 	db	10
  2405  007F93  0D                 	db	13
  2406  007F94  00                 	db	0
  2407  007F95                     STR_62:
  2408                           
  2409                           ; BSR set to: 1
  2410  007F95  55                 	db	85	;'U'
  2411  007F96  4E                 	db	78	;'N'
  2412  007F97  49                 	db	73	;'I'
  2413  007F98  54                 	db	84	;'T'
  2414  007F99  20                 	db	32
  2415  007F9A  44                 	db	68	;'D'
  2416  007F9B  43                 	db	67	;'C'
  2417  007F9C  20                 	db	32
  2418  007F9D  25                 	db	37
  2419  007F9E  64                 	db	100	;'d'
  2420  007F9F  0A                 	db	10
  2421  007FA0  0D                 	db	13
  2422  007FA1  00                 	db	0
  2423  007FA2                     STR_51:
  2424                           
  2425                           ; BSR set to: 1
  2426  007FA2  55                 	db	85	;'U'
  2427  007FA3  4E                 	db	78	;'N'
  2428  007FA4  49                 	db	73	;'I'
  2429  007FA5  54                 	db	84	;'T'
  2430  007FA6  20                 	db	32
  2431  007FA7  49                 	db	73	;'I'
  2432  007FA8  44                 	db	68	;'D'
  2433  007FA9  20                 	db	32
  2434  007FAA  25                 	db	37
  2435  007FAB  64                 	db	100	;'d'
  2436  007FAC  0A                 	db	10
  2437  007FAD  0D                 	db	13
  2438  007FAE  00                 	db	0
  2439  007FAF                     STR_23:
  2440                           
  2441                           ; BSR set to: 1
  2442  007FAF  4D                 	db	77	;'M'
  2443  007FB0  61                 	db	97	;'a'
  2444  007FB1  72                 	db	114	;'r'
  2445  007FB2  20                 	db	32
  2446  007FB3  32                 	db	50	;'2'
  2447  007FB4  39                 	db	57	;'9'
  2448  007FB5  20                 	db	32
  2449  007FB6  32                 	db	50	;'2'
  2450  007FB7  30                 	db	48	;'0'
  2451  007FB8  31                 	db	49	;'1'
  2452  007FB9  38                 	db	56	;'8'
  2453  007FBA  00                 	db	0
  2454  007FBB                     STR_10:
  2455                           
  2456                           ; BSR set to: 1
  2457  007FBB  4E                 	db	78	;'N'
  2458  007FBC  4F                 	db	79	;'O'
  2459  007FBD  54                 	db	84	;'T'
  2460  007FBE  20                 	db	32
  2461  007FBF  4F                 	db	79	;'O'
  2462  007FC0  2E                 	db	46
  2463  007FC1  4B                 	db	75	;'K'
  2464  007FC2  20                 	db	32
  2465  007FC3  0A                 	db	10
  2466  007FC4  0D                 	db	13
  2467  007FC5  00                 	db	0
  2468  007FC6                     STR_60:
  2469                           
  2470                           ; BSR set to: 1
  2471  007FC6  52                 	db	82	;'R'
  2472  007FC7  53                 	db	83	;'S'
  2473  007FC8  53                 	db	83	;'S'
  2474  007FC9  49                 	db	73	;'I'
  2475  007FCA  20                 	db	32
  2476  007FCB  25                 	db	37
  2477  007FCC  64                 	db	100	;'d'
  2478  007FCD  0A                 	db	10
  2479  007FCE  0D                 	db	13
  2480  007FCF  00                 	db	0
  2481  007FD0                     STR_1:
  2482                           
  2483                           ; BSR set to: 1
  2484  007FD0  4E                 	db	78	;'N'
  2485  007FD1  4F                 	db	79	;'O'
  2486  007FD2  54                 	db	84	;'T'
  2487  007FD3  20                 	db	32
  2488  007FD4  4F                 	db	79	;'O'
  2489  007FD5  4B                 	db	75	;'K'
  2490  007FD6  20                 	db	32
  2491  007FD7  0A                 	db	10
  2492  007FD8  0D                 	db	13
  2493  007FD9  00                 	db	0
  2494  007FDA                     STR_25:
  2495                           
  2496                           ; BSR set to: 1
  2497  007FDA  31                 	db	49	;'1'
  2498  007FDB  33                 	db	51	;'3'
  2499  007FDC  3A                 	db	58	;':'
  2500  007FDD  33                 	db	51	;'3'
  2501  007FDE  38                 	db	56	;'8'
  2502  007FDF  3A                 	db	58	;':'
  2503  007FE0  30                 	db	48	;'0'
  2504  007FE1  34                 	db	52	;'4'
  2505  007FE2  00                 	db	0
  2506  007FE3                     STR_9:
  2507                           
  2508                           ; BSR set to: 1
  2509  007FE3  0A                 	db	10
  2510  007FE4  0D                 	db	13
  2511  007FE5  20                 	db	32
  2512  007FE6  4F                 	db	79	;'O'
  2513  007FE7  4B                 	db	75	;'K'
  2514  007FE8  20                 	db	32
  2515  007FE9  0A                 	db	10
  2516  007FEA  0D                 	db	13
  2517  007FEB  00                 	db	0
  2518  007FEC                     STR_73:
  2519                           
  2520                           ; BSR set to: 1
  2521  007FEC  28                 	db	40
  2522  007FED  6E                 	db	110	;'n'
  2523  007FEE  75                 	db	117	;'u'
  2524  007FEF  6C                 	db	108	;'l'
  2525  007FF0  6C                 	db	108	;'l'
  2526  007FF1  29                 	db	41
  2527  007FF2  00                 	db	0
  2528  007FF3                     STR_21:
  2529                           
  2530                           ; BSR set to: 1
  2531  007FF3  31                 	db	49	;'1'
  2532  007FF4  5F                 	db	95	;'_'
  2533  007FF5  30                 	db	48	;'0'
  2534  007FF6  30                 	db	48	;'0'
  2535  007FF7  32                 	db	50	;'2'
  2536  007FF8  00                 	db	0
  2537  007FF9                     STR_8:
  2538                           
  2539                           ; BSR set to: 1
  2540  007FF9  25                 	db	37
  2541  007FFA  64                 	db	100	;'d'
  2542  007FFB  20                 	db	32
  2543  007FFC  09                 	db	9
  2544  007FFD  00                 	db	0
  2545  0000                     
  2546                           ; #config settings
  2547  007FFE  00                 	db	0	; dummy byte at the end
  2548  0000                     
  2549                           	psect	nvCOMRAM
  2550  000046                     __pnvCOMRAM:
  2551                           	opt stack 0
  2552  000046                     _timer0ReloadVal:
  2553                           	opt stack 0
  2554  000046                     	ds	2
  2555                           
  2556                           	psect	nvBANK1
  2557  0001E8                     __pnvBANK1:
  2558                           	opt stack 0
  2559  0001E8                     _TMR0_InterruptHandler:
  2560                           	opt stack 0
  2561  0001E8                     	ds	2
  2562  0001EA                     _eusart1TxBufferRemaining:
  2563                           	opt stack 0
  2564  0001EA                     	ds	1
  2565  0000                     _ANSELA	set	3896
  2566  0000                     _ANSELE	set	3900
  2567  0000                     _ANSELD	set	3899
  2568  0000                     _ANSELB	set	3897
  2569  0000                     _ANSELC	set	3898
  2570  0000                     _PORTBbits	set	3969
  2571  0000                     _PORTDbits	set	3971
  2572  0000                     _ADCON0bits	set	4034
  2573  0000                     _ADRESH	set	4036
  2574  0000                     _ADRESL	set	4035
  2575  0000                     _ADCON2	set	4032
  2576  0000                     _ADCON1	set	4033
  2577  0000                     _ADCON0	set	4034
  2578  0000                     _T0CONbits	set	4053
  2579  0000                     _T0CON	set	4053
  2580  0000                     _TMR0L	set	4054
  2581  0000                     _TMR0H	set	4055
  2582  0000                     _EEDATA	set	4008
  2583  0000                     _EEADR	set	4009
  2584  0000                     _EECON2	set	4007
  2585  0000                     _EECON1bits	set	4006
  2586  0000                     _TABLAT	set	4085
  2587  0000                     _TBLPTRL	set	4086
  2588  0000                     _TBLPTRH	set	4087
  2589  0000                     _TBLPTRU	set	4088
  2590  0000                     _INTCON2bits	set	4081
  2591  0000                     _WPUB	set	3937
  2592  0000                     _TRISD	set	3989
  2593  0000                     _TRISC	set	3988
  2594  0000                     _TRISB	set	3987
  2595  0000                     _TRISA	set	3986
  2596  0000                     _TRISE	set	3990
  2597  0000                     _LATC	set	3979
  2598  0000                     _LATB	set	3978
  2599  0000                     _LATA	set	3977
  2600  0000                     _LATD	set	3980
  2601  0000                     _LATE	set	3981
  2602  0000                     _RCREG1	set	4014
  2603  0000                     _RCSTA1bits	set	4011
  2604  0000                     _TXREG1	set	4013
  2605  0000                     _SPBRGH1	set	4016
  2606  0000                     _SPBRG1	set	4015
  2607  0000                     _TXSTA1	set	4012
  2608  0000                     _RCSTA1	set	4011
  2609  0000                     _BAUDCON1	set	4024
  2610  0000                     _PIR1bits	set	3998
  2611  0000                     _PIE1bits	set	3997
  2612  0000                     _PIR2bits	set	4001
  2613  0000                     _PIE2bits	set	4000
  2614  0000                     _RCONbits	set	4048
  2615  0000                     _OSCTUNE	set	3995
  2616  0000                     _OSCCON2	set	4050
  2617  0000                     _OSCCON	set	4051
  2618  0000                     _LATAbits	set	3977
  2619  0000                     _LATDbits	set	3980
  2620  0000                     _INTCONbits	set	4082
  2621  0000                     _LATCbits	set	3979
  2622  0000                     _LATBbits	set	3978
  2623                           
  2624                           	psect	cinit
  2625  004014                     __pcinit:
  2626                           	opt stack 0
  2627  004014                     start_initialization:
  2628                           	opt stack 0
  2629  004014                     __initialization:
  2630                           	opt stack 0
  2631                           
  2632                           ; Initialize objects allocated to BANK1 (12 bytes)
  2633                           ; load TBLPTR registers with __pidataBANK1
  2634  004014  0E36               	movlw	low __pidataBANK1
  2635  004016  6EF6               	movwf	tblptrl,c
  2636  004018  0E46               	movlw	high __pidataBANK1
  2637  00401A  6EF7               	movwf	tblptrh,c
  2638  00401C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  2639  00401E  6EF8               	movwf	tblptru,c
  2640  004020  EE01  F0DC         	lfsr	0,__pdataBANK1
  2641  004024  EE10 F00C          	lfsr	1,12
  2642  004028                     copy_data0:
  2643  004028  0009               	tblrd		*+
  2644  00402A  CFF5 FFEE          	movff	tablat,postinc0
  2645  00402E  50E5               	movf	postdec1,w,c
  2646  004030  50E1               	movf	fsr1l,w,c
  2647  004032  E1FA               	bnz	copy_data0
  2648                           
  2649                           ; Clear objects allocated to BANK2 (182 bytes)
  2650  004034  EE02  F000         	lfsr	0,__pbssBANK2
  2651  004038  0EB6               	movlw	182
  2652  00403A                     clear_0:
  2653  00403A  6AEE               	clrf	postinc0,c
  2654  00403C  06E8               	decf	wreg,f,c
  2655  00403E  E1FD               	bnz	clear_0
  2656                           
  2657                           ; Clear objects allocated to BANK1 (85 bytes)
  2658  004040  EE01  F087         	lfsr	0,__pbssBANK1
  2659  004044  0E55               	movlw	85
  2660  004046                     clear_1:
  2661  004046  6AEE               	clrf	postinc0,c
  2662  004048  06E8               	decf	wreg,f,c
  2663  00404A  E1FD               	bnz	clear_1
  2664                           
  2665                           ; Clear objects allocated to COMRAM (21 bytes)
  2666  00404C  EE00  F031         	lfsr	0,__pbssCOMRAM
  2667  004050  0E15               	movlw	21
  2668  004052                     clear_2:
  2669  004052  6AEE               	clrf	postinc0,c
  2670  004054  06E8               	decf	wreg,f,c
  2671  004056  E1FD               	bnz	clear_2
  2672  004058                     end_of_initialization:
  2673                           	opt stack 0
  2674  004058                     __end_of__initialization:
  2675                           	opt stack 0
  2676  004058  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2677  00405A  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2678  00405C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2679  00405E  6EF8               	movwf	tblptru,c
  2680  004060  0100               	movlb	0
  2681  004062  EFB4  F01D         	goto	_main	;jump to C main() function
  2682                           tblptru	equ	0xFF8
  2683                           tblptrh	equ	0xFF7
  2684                           tblptrl	equ	0xFF6
  2685                           tablat	equ	0xFF5
  2686                           postinc0	equ	0xFEE
  2687                           wreg	equ	0xFE8
  2688                           postdec1	equ	0xFE5
  2689                           fsr1l	equ	0xFE1
  2690                           
  2691                           	psect	bssCOMRAM
  2692  000031                     __pbssCOMRAM:
  2693                           	opt stack 0
  2694  000031                     _systemStatus:
  2695                           	opt stack 0
  2696  000031                     	ds	10
  2697  00003B                     TMR0_ISR@CountCallBack:
  2698                           	opt stack 0
  2699  00003B                     	ds	2
  2700  00003D                     _channelNum:
  2701                           	opt stack 0
  2702  00003D                     	ds	2
  2703  00003F                     _lastAdcTemp:
  2704                           	opt stack 0
  2705  00003F                     	ds	2
  2706  000041                     _eusart1RxTail:
  2707                           	opt stack 0
  2708  000041                     	ds	1
  2709  000042                     _eusart1RxHead:
  2710                           	opt stack 0
  2711  000042                     	ds	1
  2712  000043                     _eusart1TxTail:
  2713                           	opt stack 0
  2714  000043                     	ds	1
  2715  000044                     _eusart1TxHead:
  2716                           	opt stack 0
  2717  000044                     	ds	1
  2718  000045                     _adcSampleMode:
  2719                           	opt stack 0
  2720  000045                     	ds	1
  2721                           tblptru	equ	0xFF8
  2722                           tblptrh	equ	0xFF7
  2723                           tblptrl	equ	0xFF6
  2724                           tablat	equ	0xFF5
  2725                           postinc0	equ	0xFEE
  2726                           wreg	equ	0xFE8
  2727                           postdec1	equ	0xFE5
  2728                           fsr1l	equ	0xFE1
  2729                           
  2730                           	psect	bssBANK1
  2731  000187                     __pbssBANK1:
  2732                           	opt stack 0
  2733  000187                     _txStatistics:
  2734                           	opt stack 0
  2735  000187                     	ds	22
  2736  00019D                     _rxStatistics:
  2737                           	opt stack 0
  2738  00019D                     	ds	21
  2739  0001B2                     _mcuRunTimeIn5SecTicks:
  2740                           	opt stack 0
  2741  0001B2                     	ds	4
  2742  0001B6                     _retNum:
  2743                           	opt stack 0
  2744  0001B6                     	ds	4
  2745  0001BA                     _txFreq:
  2746                           	opt stack 0
  2747  0001BA                     	ds	4
  2748  0001BE                     _rxFreq:
  2749                           	opt stack 0
  2750  0001BE                     	ds	4
  2751  0001C2                     _errno:
  2752                           	opt stack 0
  2753  0001C2                     	ds	2
  2754  0001C4                     _numSamples:
  2755                           	opt stack 0
  2756  0001C4                     	ds	2
  2757  0001C6                     _count:
  2758                           	opt stack 0
  2759  0001C6                     	ds	2
  2760  0001C8                     _lastAdcVgMon:
  2761                           	opt stack 0
  2762  0001C8                     	ds	2
  2763  0001CA                     _lastAdcRREV:
  2764                           	opt stack 0
  2765  0001CA                     	ds	2
  2766  0001CC                     _lastAdcFfwrRSSI:
  2767                           	opt stack 0
  2768  0001CC                     	ds	2
  2769  0001CE                     _msgCount:
  2770                           	opt stack 0
  2771  0001CE                     	ds	1
  2772  0001CF                     _crcGiven:
  2773                           	opt stack 0
  2774  0001CF                     	ds	1
  2775  0001D0                     _crcCalc:
  2776                           	opt stack 0
  2777  0001D0                     	ds	1
  2778  0001D1                     _dataSize:
  2779                           	opt stack 0
  2780  0001D1                     	ds	1
  2781  0001D2                     _request:
  2782                           	opt stack 0
  2783  0001D2                     	ds	1
  2784  0001D3                     _group:
  2785                           	opt stack 0
  2786  0001D3                     	ds	1
  2787  0001D4                     _cState:
  2788                           	opt stack 0
  2789  0001D4                     	ds	1
  2790  0001D5                     _eusart1RxCount:
  2791                           	opt stack 0
  2792  0001D5                     	ds	1
  2793  0001D6                     _channel:
  2794                           	opt stack 0
  2795  0001D6                     	ds	1
  2796  0001D7                     _needToSample:
  2797                           	opt stack 0
  2798  0001D7                     	ds	1
  2799  0001D8                     _TimertenSecFlag:
  2800                           	opt stack 0
  2801  0001D8                     	ds	1
  2802  0001D9                     _TimerKeepAliveFlag:
  2803                           	opt stack 0
  2804  0001D9                     	ds	1
  2805  0001DA                     _TimerSamplingFlag:
  2806                           	opt stack 0
  2807  0001DA                     	ds	1
  2808  0001DB                     _TimerOneSecFlag:
  2809                           	opt stack 0
  2810  0001DB                     	ds	1
  2811                           tblptru	equ	0xFF8
  2812                           tblptrh	equ	0xFF7
  2813                           tblptrl	equ	0xFF6
  2814                           tablat	equ	0xFF5
  2815                           postinc0	equ	0xFEE
  2816                           wreg	equ	0xFE8
  2817                           postdec1	equ	0xFE5
  2818                           fsr1l	equ	0xFE1
  2819                           
  2820                           	psect	dataBANK1
  2821  0001DC                     __pdataBANK1:
  2822                           	opt stack 0
  2823  0001DC                     _groupsArray:
  2824                           	opt stack 0
  2825  0001DC                     	ds	12
  2826                           tblptru	equ	0xFF8
  2827                           tblptrh	equ	0xFF7
  2828                           tblptrl	equ	0xFF6
  2829                           tablat	equ	0xFF5
  2830                           postinc0	equ	0xFEE
  2831                           wreg	equ	0xFE8
  2832                           postdec1	equ	0xFE5
  2833                           fsr1l	equ	0xFE1
  2834                           
  2835                           	psect	bssBANK2
  2836  000200                     __pbssBANK2:
  2837                           	opt stack 0
  2838  000200                     _eusart1TxBuffer:
  2839                           	opt stack 0
  2840  000200                     	ds	70
  2841  000246                     _eusart1RxBuffer:
  2842                           	opt stack 0
  2843  000246                     	ds	40
  2844  00026E                     _synthCalcParams:
  2845                           	opt stack 0
  2846  00026E                     	ds	32
  2847  00028E                     _rxMsgData:
  2848                           	opt stack 0
  2849  00028E                     	ds	20
  2850  0002A2                     _rxMsgQueue:
  2851                           	opt stack 0
  2852  0002A2                     	ds	20
  2853                           tblptru	equ	0xFF8
  2854                           tblptrh	equ	0xFF7
  2855                           tblptrl	equ	0xFF6
  2856                           tablat	equ	0xFF5
  2857                           postinc0	equ	0xFEE
  2858                           wreg	equ	0xFE8
  2859                           postdec1	equ	0xFE5
  2860                           fsr1l	equ	0xFE1
  2861                           
  2862                           	psect	cstackBANK1
  2863  000100                     __pcstackBANK1:
  2864                           	opt stack 0
  2865  000100                     SampleSingleChannel@dest:
  2866                           	opt stack 0
  2867  000100                     SendUartSystemInitMessage@dest:
  2868                           	opt stack 0
  2869  000100                     PrintHelpScreen@dest:
  2870                           	opt stack 0
  2871  000100                     PrintSystemStatus@dest:
  2872                           	opt stack 0
  2873  000100                     PrintRxStatus@dest:
  2874                           	opt stack 0
  2875  000100                     PrintTxStatus@dest:
  2876                           	opt stack 0
  2877                           
  2878                           ; 80 bytes @ 0x0
  2879  000100                     	ds	50
  2880  000132                     _SampleSingleChannel$3983:
  2881                           	opt stack 0
  2882                           
  2883                           ; 3 bytes @ 0x32
  2884  000132                     	ds	3
  2885  000135                     SampleSingleChannel@_adcResult:
  2886                           	opt stack 0
  2887                           
  2888                           ; 2 bytes @ 0x35
  2889  000135                     	ds	2
  2890  000137                     SampleSingleChannel@adcRes:
  2891                           	opt stack 0
  2892                           
  2893                           ; 2 bytes @ 0x37
  2894  000137                     	ds	25
  2895  000150                     GroupRx@data:
  2896                           	opt stack 0
  2897  000150                     GroupTx@data:
  2898                           	opt stack 0
  2899  000150                     GroupCommon@data:
  2900                           	opt stack 0
  2901                           
  2902                           ; 2 bytes @ 0x50
  2903  000150                     	ds	2
  2904  000152                     readUartByte@dest:
  2905                           	opt stack 0
  2906                           
  2907                           ; 50 bytes @ 0x52
  2908  000152                     	ds	50
  2909  000184                     readUartByte@idx:
  2910                           	opt stack 0
  2911                           
  2912                           ; 2 bytes @ 0x84
  2913  000184                     	ds	2
  2914  000186                     readUartByte@chRec:
  2915                           	opt stack 0
  2916                           
  2917                           ; 1 bytes @ 0x86
  2918  000186                     	ds	1
  2919                           tblptru	equ	0xFF8
  2920                           tblptrh	equ	0xFF7
  2921                           tblptrl	equ	0xFF6
  2922                           tablat	equ	0xFF5
  2923                           postinc0	equ	0xFEE
  2924                           wreg	equ	0xFE8
  2925                           postdec1	equ	0xFE5
  2926                           fsr1l	equ	0xFE1
  2927                           
  2928                           	psect	cstackBANK0
  2929  000060                     __pcstackBANK0:
  2930                           	opt stack 0
  2931  000060                     ___ftdiv@cntr:
  2932                           	opt stack 0
  2933  000060                     strtol@sign:
  2934                           	opt stack 0
  2935  000060                     SWSPI_Synth_send_bits@bitArray:
  2936                           	opt stack 0
  2937                           
  2938                           ; 32 bytes @ 0x0
  2939  000060                     	ds	1
  2940  000061                     ___ftdiv@f3:
  2941                           	opt stack 0
  2942  000061                     strtol@a:
  2943                           	opt stack 0
  2944                           
  2945                           ; 4 bytes @ 0x1
  2946  000061                     	ds	3
  2947  000064                     ___ftdiv@exp:
  2948                           	opt stack 0
  2949                           
  2950                           ; 1 bytes @ 0x4
  2951  000064                     	ds	1
  2952  000065                     ___ftdiv@sign:
  2953                           	opt stack 0
  2954  000065                     strtol@c:
  2955                           	opt stack 0
  2956                           
  2957                           ; 1 bytes @ 0x5
  2958  000065                     	ds	1
  2959  000066                     ?___ftmul:
  2960                           	opt stack 0
  2961  000066                     ?_GetIntFromUartData:
  2962                           	opt stack 0
  2963  000066                     GetIntFromUartData@data:
  2964                           	opt stack 0
  2965  000066                     ___ftmul@f1:
  2966                           	opt stack 0
  2967                           
  2968                           ; 3 bytes @ 0x6
  2969  000066                     	ds	3
  2970  000069                     ___ftmul@f2:
  2971                           	opt stack 0
  2972                           
  2973                           ; 3 bytes @ 0x9
  2974  000069                     	ds	1
  2975  00006A                     ??_GetIntFromUartData:
  2976                           
  2977                           ; 1 bytes @ 0xA
  2978  00006A                     	ds	2
  2979  00006C                     ___ftmul@exp:
  2980                           	opt stack 0
  2981  00006C                     GetIntFromUartData@dataRegArr:
  2982                           	opt stack 0
  2983                           
  2984                           ; 8 bytes @ 0xC
  2985  00006C                     	ds	1
  2986  00006D                     ___ftmul@f3_as_product:
  2987                           	opt stack 0
  2988                           
  2989                           ; 3 bytes @ 0xD
  2990  00006D                     	ds	3
  2991  000070                     ___ftmul@cntr:
  2992                           	opt stack 0
  2993                           
  2994                           ; 1 bytes @ 0x10
  2995  000070                     	ds	1
  2996  000071                     ___ftmul@sign:
  2997                           	opt stack 0
  2998                           
  2999                           ; 1 bytes @ 0x11
  3000  000071                     	ds	1
  3001  000072                     ?_fround:
  3002                           	opt stack 0
  3003  000072                     ?_scale:
  3004                           	opt stack 0
  3005                           
  3006                           ; 3 bytes @ 0x12
  3007  000072                     	ds	2
  3008  000074                     GetIntFromUartData@c:
  3009                           	opt stack 0
  3010                           
  3011                           ; 1 bytes @ 0x14
  3012  000074                     	ds	1
  3013  000075                     GetIntFromUartData@idx:
  3014                           	opt stack 0
  3015  000075                     _fround$4000:
  3016                           	opt stack 0
  3017  000075                     _scale$4001:
  3018                           	opt stack 0
  3019                           
  3020                           ; 3 bytes @ 0x15
  3021  000075                     	ds	2
  3022  000077                     set_system_type@data:
  3023                           	opt stack 0
  3024  000077                     SetUartRefrashRate@data:
  3025                           	opt stack 0
  3026  000077                     SetUartMode@data:
  3027                           	opt stack 0
  3028                           
  3029                           ; 2 bytes @ 0x17
  3030  000077                     	ds	1
  3031  000078                     scale@scl:
  3032                           	opt stack 0
  3033  000078                     _fround$3999:
  3034                           	opt stack 0
  3035                           
  3036                           ; 3 bytes @ 0x18
  3037  000078                     	ds	1
  3038  000079                     ?___fttol:
  3039                           	opt stack 0
  3040  000079                     ___fttol@f1:
  3041                           	opt stack 0
  3042  000079                     set_system_type@retNum:
  3043                           	opt stack 0
  3044  000079                     SetUartRefrashRate@retNum:
  3045                           	opt stack 0
  3046  000079                     SetUartMode@retNum:
  3047                           	opt stack 0
  3048                           
  3049                           ; 4 bytes @ 0x19
  3050  000079                     	ds	2
  3051  00007B                     fround@prec:
  3052                           	opt stack 0
  3053                           
  3054                           ; 1 bytes @ 0x1B
  3055  00007B                     	ds	1
  3056  00007C                     ?___ftadd:
  3057                           	opt stack 0
  3058  00007C                     ___ftadd@f1:
  3059                           	opt stack 0
  3060                           
  3061                           ; 3 bytes @ 0x1C
  3062  00007C                     	ds	1
  3063  00007D                     ??___fttol:
  3064                           
  3065                           ; 1 bytes @ 0x1D
  3066  00007D                     	ds	2
  3067  00007F                     ___ftadd@f2:
  3068                           	opt stack 0
  3069                           
  3070                           ; 3 bytes @ 0x1F
  3071  00007F                     	ds	1
  3072  000080                     SWSPI_Synth_send_bits@mask:
  3073                           	opt stack 0
  3074                           
  3075                           ; 4 bytes @ 0x20
  3076  000080                     	ds	2
  3077  000082                     ??___ftadd:
  3078  000082                     ___fttol@sign1:
  3079                           	opt stack 0
  3080                           
  3081                           ; 1 bytes @ 0x22
  3082  000082                     	ds	1
  3083  000083                     ___fttol@lval:
  3084                           	opt stack 0
  3085                           
  3086                           ; 4 bytes @ 0x23
  3087  000083                     	ds	1
  3088  000084                     SWSPI_Synth_send_bits@count:
  3089                           	opt stack 0
  3090                           
  3091                           ; 1 bytes @ 0x24
  3092  000084                     	ds	1
  3093  000085                     SWSPI_Synth_send_bits@phrType:
  3094                           	opt stack 0
  3095  000085                     ___ftadd@sign:
  3096                           	opt stack 0
  3097                           
  3098                           ; 1 bytes @ 0x25
  3099  000085                     	ds	1
  3100  000086                     ___ftadd@exp2:
  3101                           	opt stack 0
  3102                           
  3103                           ; 1 bytes @ 0x26
  3104  000086                     	ds	1
  3105  000087                     ___ftadd@exp1:
  3106                           	opt stack 0
  3107  000087                     ___fttol@exp1:
  3108                           	opt stack 0
  3109                           
  3110                           ; 1 bytes @ 0x27
  3111  000087                     	ds	1
  3112  000088                     ?___ftsub:
  3113                           	opt stack 0
  3114  000088                     ?_eval_poly:
  3115                           	opt stack 0
  3116  000088                     ?___altoft:
  3117                           	opt stack 0
  3118  000088                     ___ftsub@f1:
  3119                           	opt stack 0
  3120  000088                     eval_poly@x:
  3121                           	opt stack 0
  3122  000088                     ___altoft@c:
  3123                           	opt stack 0
  3124                           
  3125                           ; 4 bytes @ 0x28
  3126  000088                     	ds	3
  3127  00008B                     eval_poly@d:
  3128                           	opt stack 0
  3129  00008B                     ___ftsub@f2:
  3130                           	opt stack 0
  3131                           
  3132                           ; 3 bytes @ 0x2B
  3133  00008B                     	ds	1
  3134  00008C                     ??___altoft:
  3135                           
  3136                           ; 1 bytes @ 0x2C
  3137  00008C                     	ds	1
  3138  00008D                     eval_poly@n:
  3139                           	opt stack 0
  3140                           
  3141                           ; 2 bytes @ 0x2D
  3142  00008D                     	ds	2
  3143  00008F                     eval_poly@res:
  3144                           	opt stack 0
  3145                           
  3146                           ; 3 bytes @ 0x2F
  3147  00008F                     	ds	1
  3148  000090                     ?_floor:
  3149                           	opt stack 0
  3150  000090                     floor@x:
  3151                           	opt stack 0
  3152                           
  3153                           ; 3 bytes @ 0x30
  3154  000090                     	ds	2
  3155  000092                     ?_log:
  3156                           	opt stack 0
  3157  000092                     ?_ldexp:
  3158                           	opt stack 0
  3159  000092                     ldexp@value:
  3160                           	opt stack 0
  3161  000092                     log@x:
  3162                           	opt stack 0
  3163                           
  3164                           ; 3 bytes @ 0x32
  3165  000092                     	ds	1
  3166  000093                     floor@i:
  3167                           	opt stack 0
  3168                           
  3169                           ; 3 bytes @ 0x33
  3170  000093                     	ds	2
  3171  000095                     ldexp@newexp:
  3172                           	opt stack 0
  3173  000095                     log@exponent:
  3174                           	opt stack 0
  3175                           
  3176                           ; 2 bytes @ 0x35
  3177  000095                     	ds	1
  3178  000096                     floor@expon:
  3179                           	opt stack 0
  3180                           
  3181                           ; 2 bytes @ 0x36
  3182  000096                     	ds	1
  3183  000097                     ??_ldexp:
  3184                           
  3185                           ; 1 bytes @ 0x37
  3186  000097                     	ds	2
  3187  000099                     ?_exp:
  3188                           	opt stack 0
  3189  000099                     exp@x:
  3190                           	opt stack 0
  3191                           
  3192                           ; 3 bytes @ 0x39
  3193  000099                     	ds	3
  3194  00009C                     _exp$4005:
  3195                           	opt stack 0
  3196                           
  3197                           ; 3 bytes @ 0x3C
  3198  00009C                     	ds	3
  3199  00009F                     exp@exponent:
  3200                           	opt stack 0
  3201                           
  3202                           ; 2 bytes @ 0x3F
  3203  00009F                     	ds	2
  3204  0000A1                     exp@sign:
  3205                           	opt stack 0
  3206                           
  3207                           ; 1 bytes @ 0x41
  3208  0000A1                     	ds	1
  3209  0000A2                     ?_pow:
  3210                           	opt stack 0
  3211  0000A2                     pow@x:
  3212                           	opt stack 0
  3213                           
  3214                           ; 3 bytes @ 0x42
  3215  0000A2                     	ds	3
  3216  0000A5                     pow@y:
  3217                           	opt stack 0
  3218                           
  3219                           ; 3 bytes @ 0x45
  3220  0000A5                     	ds	3
  3221  0000A8                     _pow$4003:
  3222                           	opt stack 0
  3223                           
  3224                           ; 3 bytes @ 0x48
  3225  0000A8                     	ds	3
  3226  0000AB                     _pow$4004:
  3227                           	opt stack 0
  3228                           
  3229                           ; 3 bytes @ 0x4B
  3230  0000AB                     	ds	3
  3231  0000AE                     pow@sign:
  3232                           	opt stack 0
  3233                           
  3234                           ; 1 bytes @ 0x4E
  3235  0000AE                     	ds	1
  3236  0000AF                     pow@yi:
  3237                           	opt stack 0
  3238                           
  3239                           ; 4 bytes @ 0x4F
  3240  0000AF                     	ds	4
  3241  0000B3                     ?_ReadIntFromEeprom:
  3242                           	opt stack 0
  3243  0000B3                     ?___llmod:
  3244                           	opt stack 0
  3245  0000B3                     ReadIntFromEeprom@numOfByes:
  3246                           	opt stack 0
  3247  0000B3                     _SampleAllChannels$3984:
  3248                           	opt stack 0
  3249  0000B3                     ___llmod@dividend:
  3250                           	opt stack 0
  3251                           
  3252                           ; 4 bytes @ 0x53
  3253  0000B3                     	ds	3
  3254  0000B6                     SampleAllChannels@_adcResult:
  3255                           	opt stack 0
  3256                           
  3257                           ; 2 bytes @ 0x56
  3258  0000B6                     	ds	1
  3259  0000B7                     ??_ReadIntFromEeprom:
  3260  0000B7                     ___llmod@divisor:
  3261                           	opt stack 0
  3262                           
  3263                           ; 4 bytes @ 0x57
  3264  0000B7                     	ds	1
  3265  0000B8                     SampleAllChannels@adcRes:
  3266                           	opt stack 0
  3267                           
  3268                           ; 2 bytes @ 0x58
  3269  0000B8                     	ds	2
  3270  0000BA                     SampleAllChannels@i:
  3271                           	opt stack 0
  3272  0000BA                     ReadIntFromEeprom@base:
  3273                           	opt stack 0
  3274                           
  3275                           ; 4 bytes @ 0x5A
  3276  0000BA                     	ds	1
  3277  0000BB                     ___llmod@counter:
  3278                           	opt stack 0
  3279                           
  3280                           ; 1 bytes @ 0x5B
  3281  0000BB                     	ds	1
  3282  0000BC                     ?_sprintf:
  3283                           	opt stack 0
  3284  0000BC                     sprintf@sp:
  3285                           	opt stack 0
  3286                           
  3287                           ; 2 bytes @ 0x5C
  3288  0000BC                     	ds	2
  3289  0000BE                     sprintf@f:
  3290                           	opt stack 0
  3291  0000BE                     _ReadIntFromEeprom$3997:
  3292                           	opt stack 0
  3293                           
  3294                           ; 3 bytes @ 0x5E
  3295  0000BE                     	ds	3
  3296  0000C1                     _ReadIntFromEeprom$3998:
  3297                           	opt stack 0
  3298                           
  3299                           ; 3 bytes @ 0x61
  3300  0000C1                     	ds	3
  3301  0000C4                     ??_sprintf:
  3302  0000C4                     ReadIntFromEeprom@address:
  3303                           	opt stack 0
  3304                           
  3305                           ; 1 bytes @ 0x64
  3306  0000C4                     	ds	1
  3307  0000C5                     ReadIntFromEeprom@retVal:
  3308                           	opt stack 0
  3309                           
  3310                           ; 4 bytes @ 0x65
  3311  0000C5                     	ds	4
  3312  0000C9                     ReadIntFromEeprom@idx:
  3313                           	opt stack 0
  3314                           
  3315                           ; 1 bytes @ 0x69
  3316  0000C9                     	ds	1
  3317  0000CA                     ??_DacInit:
  3318  0000CA                     ReadSystemStatusFromEprom@sysData:
  3319                           	opt stack 0
  3320  0000CA                     _sprintf$4002:
  3321                           	opt stack 0
  3322                           
  3323                           ; 3 bytes @ 0x6A
  3324  0000CA                     	ds	2
  3325  0000CC                     DacInit@dacInput:
  3326                           	opt stack 0
  3327                           
  3328                           ; 2 bytes @ 0x6C
  3329  0000CC                     	ds	1
  3330  0000CD                     sprintf@cp:
  3331                           	opt stack 0
  3332                           
  3333                           ; 2 bytes @ 0x6D
  3334  0000CD                     	ds	1
  3335  0000CE                     DacInit@idx:
  3336                           	opt stack 0
  3337                           
  3338                           ; 1 bytes @ 0x6E
  3339  0000CE                     	ds	1
  3340  0000CF                     sprintf@ap:
  3341                           	opt stack 0
  3342                           
  3343                           ; 2 bytes @ 0x6F
  3344  0000CF                     	ds	2
  3345  0000D1                     sprintf@flag:
  3346                           	opt stack 0
  3347                           
  3348                           ; 2 bytes @ 0x71
  3349  0000D1                     	ds	2
  3350  0000D3                     sprintf@prec:
  3351                           	opt stack 0
  3352                           
  3353                           ; 2 bytes @ 0x73
  3354  0000D3                     	ds	2
  3355  0000D5                     sprintf@val:
  3356                           	opt stack 0
  3357                           
  3358                           ; 4 bytes @ 0x75
  3359  0000D5                     	ds	4
  3360  0000D9                     sprintf@exp:
  3361                           	opt stack 0
  3362                           
  3363                           ; 2 bytes @ 0x79
  3364  0000D9                     	ds	2
  3365  0000DB                     sprintf@tmpval:
  3366                           	opt stack 0
  3367                           
  3368                           ; 4 bytes @ 0x7B
  3369  0000DB                     	ds	4
  3370  0000DF                     sprintf@fval:
  3371                           	opt stack 0
  3372                           
  3373                           ; 3 bytes @ 0x7F
  3374  0000DF                     	ds	3
  3375  0000E2                     sprintf@c:
  3376                           	opt stack 0
  3377                           
  3378                           ; 1 bytes @ 0x82
  3379  0000E2                     	ds	1
  3380  0000E3                     ??_GroupRx:
  3381  0000E3                     ??_GroupTx:
  3382  0000E3                     ??_SampleSingleChannel:
  3383  0000E3                     GroupCommon@request:
  3384                           	opt stack 0
  3385                           
  3386                           ; 1 bytes @ 0x83
  3387  0000E3                     	ds	1
  3388  0000E4                     _GroupRx$3993:
  3389                           	opt stack 0
  3390  0000E4                     _GroupTx$3995:
  3391                           	opt stack 0
  3392                           
  3393                           ; 3 bytes @ 0x84
  3394  0000E4                     	ds	3
  3395  0000E7                     _GroupRx$3994:
  3396                           	opt stack 0
  3397  0000E7                     _GroupTx$3996:
  3398                           	opt stack 0
  3399                           
  3400                           ; 3 bytes @ 0x87
  3401  0000E7                     	ds	3
  3402  0000EA                     GroupRx@request:
  3403                           	opt stack 0
  3404  0000EA                     GroupTx@request:
  3405                           	opt stack 0
  3406                           
  3407                           ; 1 bytes @ 0x8A
  3408  0000EA                     	ds	1
  3409  0000EB                     ??_readUartByte:
  3410                           
  3411                           ; 1 bytes @ 0x8B
  3412  0000EB                     	ds	3
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           postinc0	equ	0xFEE
  3418                           wreg	equ	0xFE8
  3419                           postdec1	equ	0xFE5
  3420                           fsr1l	equ	0xFE1
  3421                           
  3422                           	psect	cstackCOMRAM
  3423  000001                     __pcstackCOMRAM:
  3424                           	opt stack 0
  3425  000001                     ?___lwmod:
  3426                           	opt stack 0
  3427  000001                     ___lwmod@dividend:
  3428                           	opt stack 0
  3429                           
  3430                           ; 2 bytes @ 0x0
  3431  000001                     	ds	2
  3432  000003                     ___lwmod@divisor:
  3433                           	opt stack 0
  3434                           
  3435                           ; 2 bytes @ 0x2
  3436  000003                     	ds	2
  3437  000005                     ___lwmod@counter:
  3438                           	opt stack 0
  3439                           
  3440                           ; 1 bytes @ 0x4
  3441  000005                     	ds	1
  3442  000006                     ??_INTERRUPT_InterruptManager:
  3443                           
  3444                           ; 1 bytes @ 0x5
  3445  000006                     	ds	18
  3446  000018                     ??_EUSART1_Read:
  3447  000018                     ??_isspace:
  3448  000018                     ??_isdigit:
  3449  000018                     ??_isupper:
  3450  000018                     ??_BlinkOkLeds:
  3451  000018                     ??_keepAliveSignalLed:
  3452  000018                     ??_testLeds:
  3453  000018                     ?_ADC_GetConversion:
  3454                           	opt stack 0
  3455  000018                     ?___awmod:
  3456                           	opt stack 0
  3457  000018                     ?___ftpack:
  3458                           	opt stack 0
  3459  000018                     ?_frexp:
  3460                           	opt stack 0
  3461  000018                     ?___ftneg:
  3462                           	opt stack 0
  3463  000018                     ?__tdiv_to_l_:
  3464                           	opt stack 0
  3465  000018                     ?__div_to_l_:
  3466                           	opt stack 0
  3467  000018                     ?___lldiv:
  3468                           	opt stack 0
  3469  000018                     SwSpi_Data_Pin@cPinMode:
  3470                           	opt stack 0
  3471  000018                     SwSpi_Clk_Pin@cPinMode:
  3472                           	opt stack 0
  3473  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  3474                           	opt stack 0
  3475  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  3476                           	opt stack 0
  3477  000018                     EUSART1_Write@txData:
  3478                           	opt stack 0
  3479  000018                     DATAEE_WriteByte@bData:
  3480                           	opt stack 0
  3481  000018                     DATAEE_ReadByte@bAdd:
  3482                           	opt stack 0
  3483  000018                     toupper@c:
  3484                           	opt stack 0
  3485  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  3486                           	opt stack 0
  3487  000018                     Make32bitsArray@array:
  3488                           	opt stack 0
  3489  000018                     ___awmod@dividend:
  3490                           	opt stack 0
  3491  000018                     memset@p1:
  3492                           	opt stack 0
  3493  000018                     __div_to_l_@f1:
  3494                           	opt stack 0
  3495  000018                     ___ftpack@arg:
  3496                           	opt stack 0
  3497  000018                     __tdiv_to_l_@f1:
  3498                           	opt stack 0
  3499  000018                     ___ftge@ff1:
  3500                           	opt stack 0
  3501  000018                     ___ftneg@f1:
  3502                           	opt stack 0
  3503  000018                     frexp@value:
  3504                           	opt stack 0
  3505  000018                     make8@data:
  3506                           	opt stack 0
  3507  000018                     ___lldiv@dividend:
  3508                           	opt stack 0
  3509                           
  3510                           ; 4 bytes @ 0x17
  3511  000018                     	ds	1
  3512  000019                     SwSpi_Data_Pin@phrType:
  3513                           	opt stack 0
  3514  000019                     SwSpi_Clk_Pin@phrType:
  3515                           	opt stack 0
  3516  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  3517                           	opt stack 0
  3518  000019                     DATAEE_WriteByte@bAdd:
  3519                           	opt stack 0
  3520  000019                     EepromRead@address:
  3521                           	opt stack 0
  3522  000019                     _isdigit$3683:
  3523                           	opt stack 0
  3524  000019                     _isspace$3686:
  3525                           	opt stack 0
  3526  000019                     _isupper$3689:
  3527                           	opt stack 0
  3528  000019                     testLeds@idx:
  3529                           	opt stack 0
  3530  000019                     UART_Write_Text@text:
  3531                           	opt stack 0
  3532  000019                     EUSART1_Read@readValue:
  3533                           	opt stack 0
  3534                           
  3535                           ; 2 bytes @ 0x18
  3536  000019                     	ds	1
  3537  00001A                     ??_ADC_GetConversion:
  3538  00001A                     ??_TMR0_Initialize:
  3539  00001A                     ?___lmul:
  3540                           	opt stack 0
  3541  00001A                     SWSPI_DAC_send_bits@data:
  3542                           	opt stack 0
  3543  00001A                     DATAEE_WriteByte@GIEBitValue:
  3544                           	opt stack 0
  3545  00001A                     isdigit@c:
  3546                           	opt stack 0
  3547  00001A                     isspace@c:
  3548                           	opt stack 0
  3549  00001A                     isupper@c:
  3550                           	opt stack 0
  3551  00001A                     ___awmod@divisor:
  3552                           	opt stack 0
  3553  00001A                     memset@c:
  3554                           	opt stack 0
  3555  00001A                     Make32bitsArray@data:
  3556                           	opt stack 0
  3557  00001A                     ___lmul@multiplier:
  3558                           	opt stack 0
  3559                           
  3560                           ; 4 bytes @ 0x19
  3561  00001A                     	ds	1
  3562  00001B                     ??_UART_Write_Text:
  3563  00001B                     ??_isalpha:
  3564  00001B                     BlinkOkLeds@state:
  3565                           	opt stack 0
  3566  00001B                     SWSPI_DAC_send_bits@count:
  3567                           	opt stack 0
  3568  00001B                     EepromWrite@data:
  3569                           	opt stack 0
  3570  00001B                     ___ftpack@exp:
  3571                           	opt stack 0
  3572  00001B                     frexp@eptr:
  3573                           	opt stack 0
  3574  00001B                     __div_to_l_@f2:
  3575                           	opt stack 0
  3576  00001B                     __tdiv_to_l_@f2:
  3577                           	opt stack 0
  3578  00001B                     ___ftge@ff2:
  3579                           	opt stack 0
  3580                           
  3581                           ; 3 bytes @ 0x1A
  3582  00001B                     	ds	1
  3583  00001C                     SWSPI_DAC_send_bits@phrType:
  3584                           	opt stack 0
  3585  00001C                     ADC_GetConversion@channel:
  3586                           	opt stack 0
  3587  00001C                     make8@dataLocation:
  3588                           	opt stack 0
  3589  00001C                     EepromWrite@address:
  3590                           	opt stack 0
  3591  00001C                     ___awmod@counter:
  3592                           	opt stack 0
  3593  00001C                     ___ftpack@sign:
  3594                           	opt stack 0
  3595  00001C                     _isalpha$3680:
  3596                           	opt stack 0
  3597  00001C                     BlinkOkLeds@idx:
  3598                           	opt stack 0
  3599  00001C                     memset@n:
  3600                           	opt stack 0
  3601  00001C                     ___lldiv@divisor:
  3602                           	opt stack 0
  3603                           
  3604                           ; 4 bytes @ 0x1B
  3605  00001C                     	ds	1
  3606  00001D                     ??_make8:
  3607  00001D                     ??___ftpack:
  3608  00001D                     ??_frexp:
  3609  00001D                     ___awmod@sign:
  3610                           	opt stack 0
  3611  00001D                     isalpha@c:
  3612                           	opt stack 0
  3613  00001D                     UART_Write_Text@i:
  3614                           	opt stack 0
  3615                           
  3616                           ; 2 bytes @ 0x1C
  3617  00001D                     	ds	1
  3618  00001E                     ??_Make32bitsArray:
  3619  00001E                     ??__tdiv_to_l_:
  3620  00001E                     ??___ftge:
  3621  00001E                     ?___awdiv:
  3622                           	opt stack 0
  3623  00001E                     ___awdiv@dividend:
  3624                           	opt stack 0
  3625  00001E                     memset@p:
  3626                           	opt stack 0
  3627  00001E                     ___lmul@multiplicand:
  3628                           	opt stack 0
  3629  00001E                     __div_to_l_@quot:
  3630                           	opt stack 0
  3631                           
  3632                           ; 4 bytes @ 0x1D
  3633  00001E                     	ds	1
  3634  00001F                     AdcSingleSample@chType:
  3635                           	opt stack 0
  3636                           
  3637                           ; 1 bytes @ 0x1E
  3638  00001F                     	ds	1
  3639  000020                     ?___awtoft:
  3640                           	opt stack 0
  3641  000020                     ?___lltoft:
  3642                           	opt stack 0
  3643  000020                     ?___lwtoft:
  3644                           	opt stack 0
  3645  000020                     Make32bitsArray@idx:
  3646                           	opt stack 0
  3647  000020                     ZeroArray@array:
  3648                           	opt stack 0
  3649  000020                     ___awdiv@divisor:
  3650                           	opt stack 0
  3651  000020                     ___awtoft@c:
  3652                           	opt stack 0
  3653  000020                     ___lwtoft@c:
  3654                           	opt stack 0
  3655  000020                     AdcSingleSample@numSamples:
  3656                           	opt stack 0
  3657  000020                     ___lldiv@quotient:
  3658                           	opt stack 0
  3659  000020                     ___lltoft@c:
  3660                           	opt stack 0
  3661                           
  3662                           ; 4 bytes @ 0x1F
  3663  000020                     	ds	1
  3664  000021                     StoreIntInEeprom@data:
  3665                           	opt stack 0
  3666  000021                     __tdiv_to_l_@quot:
  3667                           	opt stack 0
  3668                           
  3669                           ; 4 bytes @ 0x20
  3670  000021                     	ds	1
  3671  000022                     ___awdiv@counter:
  3672                           	opt stack 0
  3673  000022                     __div_to_l_@cntr:
  3674                           	opt stack 0
  3675  000022                     ZeroArray@size:
  3676                           	opt stack 0
  3677  000022                     ___lmul@product:
  3678                           	opt stack 0
  3679                           
  3680                           ; 4 bytes @ 0x21
  3681  000022                     	ds	1
  3682  000023                     ?___ftdiv:
  3683                           	opt stack 0
  3684  000023                     ___awdiv@sign:
  3685                           	opt stack 0
  3686  000023                     ___awtoft@sign:
  3687                           	opt stack 0
  3688  000023                     __div_to_l_@exp1:
  3689                           	opt stack 0
  3690  000023                     ___ftdiv@f1:
  3691                           	opt stack 0
  3692                           
  3693                           ; 3 bytes @ 0x22
  3694  000023                     	ds	1
  3695  000024                     ??___lltoft:
  3696  000024                     ___lldiv@counter:
  3697                           	opt stack 0
  3698  000024                     ___awdiv@quotient:
  3699                           	opt stack 0
  3700  000024                     AdcSingleSample@retNum:
  3701                           	opt stack 0
  3702  000024                     SWSPI_Synth_send_bits@data:
  3703                           	opt stack 0
  3704                           
  3705                           ; 4 bytes @ 0x23
  3706  000024                     	ds	1
  3707  000025                     StoreIntInEeprom@address:
  3708                           	opt stack 0
  3709  000025                     __tdiv_to_l_@cntr:
  3710                           	opt stack 0
  3711                           
  3712                           ; 1 bytes @ 0x24
  3713  000025                     	ds	1
  3714  000026                     ?___wmul:
  3715                           	opt stack 0
  3716  000026                     ?_strtol:
  3717                           	opt stack 0
  3718  000026                     __tdiv_to_l_@exp1:
  3719                           	opt stack 0
  3720  000026                     StoreIntInEeprom@numOfByes:
  3721                           	opt stack 0
  3722  000026                     ___wmul@multiplier:
  3723                           	opt stack 0
  3724  000026                     strtol@s:
  3725                           	opt stack 0
  3726  000026                     ___ftdiv@f2:
  3727                           	opt stack 0
  3728                           
  3729                           ; 3 bytes @ 0x25
  3730  000026                     	ds	2
  3731  000028                     AdcSingleSample@cType:
  3732                           	opt stack 0
  3733  000028                     StoreIntInEeprom@val:
  3734                           	opt stack 0
  3735  000028                     ___lltoft@exp:
  3736                           	opt stack 0
  3737  000028                     ___wmul@multiplicand:
  3738                           	opt stack 0
  3739  000028                     strtol@endptr:
  3740                           	opt stack 0
  3741  000028                     SWSPI_send_word@data:
  3742                           	opt stack 0
  3743                           
  3744                           ; 4 bytes @ 0x27
  3745  000028                     	ds	1
  3746  000029                     ??___ftdiv:
  3747  000029                     StoreIntInEeprom@idx:
  3748                           	opt stack 0
  3749                           
  3750                           ; 1 bytes @ 0x28
  3751  000029                     	ds	1
  3752  00002A                     ___wmul@product:
  3753                           	opt stack 0
  3754  00002A                     strtol@base:
  3755                           	opt stack 0
  3756                           
  3757                           ; 2 bytes @ 0x29
  3758  00002A                     	ds	2
  3759  00002C                     ??_strtol:
  3760  00002C                     ??___ftmul:
  3761  00002C                     SWSPI_send_word@dataSize:
  3762                           	opt stack 0
  3763                           
  3764                           ; 1 bytes @ 0x2B
  3765  00002C                     	ds	1
  3766  00002D                     SWSPI_send_word@datac:
  3767                           	opt stack 0
  3768                           
  3769                           ; 1 bytes @ 0x2C
  3770  00002D                     	ds	1
  3771  00002E                     SWSPI_send_word@idx:
  3772                           	opt stack 0
  3773                           
  3774                           ; 2 bytes @ 0x2D
  3775  00002E                     	ds	1
  3776  00002F                     ??_eval_poly:
  3777  00002F                     ___altoft@exp:
  3778                           	opt stack 0
  3779                           
  3780                           ; 1 bytes @ 0x2E
  3781  00002F                     	ds	1
  3782  000030                     SWSPI_send_word@phrType:
  3783                           	opt stack 0
  3784  000030                     ___altoft@sign:
  3785                           	opt stack 0
  3786                           
  3787                           ; 1 bytes @ 0x2F
  3788  000030                     	ds	1
  3789  000031                     tblptru	equ	0xFF8
  3790                           tblptrh	equ	0xFF7
  3791                           tblptrl	equ	0xFF6
  3792                           tablat	equ	0xFF5
  3793                           postinc0	equ	0xFEE
  3794                           wreg	equ	0xFE8
  3795                           postdec1	equ	0xFE5
  3796                           fsr1l	equ	0xFE1
  3797                           
  3798                           ; 1 bytes @ 0x30
  3799 ;;
  3800 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3801 ;;
  3802 ;; *************** function _main *****************
  3803 ;; Defined at:
  3804 ;;		line 13 in file "main.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;		None
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;		None
  3809 ;; Return value:  Size  Location     Type
  3810 ;;                  1    wreg      void 
  3811 ;; Registers used:
  3812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3818 ;;      Params:         0       0       0       0       0       0       0
  3819 ;;      Locals:         0       0       0       0       0       0       0
  3820 ;;      Temps:          0       0       0       0       0       0       0
  3821 ;;      Totals:         0       0       0       0       0       0       0
  3822 ;;Total ram usage:        0 bytes
  3823 ;; Hardware stack levels required when called:   11
  3824 ;; This function calls:
  3825 ;;		_BlinkOkLeds
  3826 ;;		_InitSystemApplicationManagers
  3827 ;;		_ReadSystemStatusFromEprom
  3828 ;;		_SampleAllChannels
  3829 ;;		_SampleSingleChannel
  3830 ;;		_SendUartSystemInitMessage
  3831 ;;		_SetMcuRunTime
  3832 ;;		_SetMcuSystem
  3833 ;;		_keepAliveSignalLed
  3834 ;;		_readUartByte
  3835 ;; This function is called by:
  3836 ;;		Startup code after reset
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text0
  3841  003B68                     __ptext0:
  3842                           	opt stack 0
  3843  003B68                     _main:
  3844                           	opt stack 20
  3845                           
  3846                           ;main.c: 16: SetMcuSystem();
  3847                           
  3848                           ;incstack = 0
  3849  003B68  EC21  F023         	call	_SetMcuSystem	;wreg free
  3850                           
  3851                           ;main.c: 19: InitSystemApplicationManagers();
  3852  003B6C  ECE4  F022         	call	_InitSystemApplicationManagers	;wreg free
  3853                           
  3854                           ;main.c: 22: SendUartSystemInitMessage();
  3855  003B70  EC5C  F016         	call	_SendUartSystemInitMessage	;wreg free
  3856                           
  3857                           ;main.c: 25: ReadSystemStatusFromEprom();
  3858  003B74  ECE8  F01B         	call	_ReadSystemStatusFromEprom	;wreg free
  3859                           
  3860                           ;main.c: 27: BlinkOkLeds(OK_START_SYSTEM);
  3861  003B78  0E03               	movlw	3
  3862  003B7A  ECA6  F01E         	call	_BlinkOkLeds
  3863  003B7E                     
  3864                           ;main.c: 31: {
  3865                           ;main.c: 32: readUartByte();
  3866  003B7E  ECE9  F007         	call	_readUartByte	;wreg free
  3867                           
  3868                           ;main.c: 34: if (TimerOneSecFlag == 1)
  3869  003B82  0101               	movlb	1	; () banked
  3870  003B84  05DB               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  3871  003B86  A4D8               	btfss	status,2,c
  3872  003B88  D006               	goto	l1555
  3873                           
  3874                           ; BSR set to: 1
  3875                           ;main.c: 35: {
  3876                           ;main.c: 37: SetMcuRunTime();
  3877  003B8A  EC57  F020         	call	_SetMcuRunTime	;wreg free
  3878                           
  3879                           ;main.c: 38: TimerOneSecFlag = 0;
  3880  003B8E  0E00               	movlw	0
  3881  003B90  0101               	movlb	1	; () banked
  3882  003B92  6FDB               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  3883                           
  3884                           ;main.c: 39: }
  3885  003B94  D7F4               	goto	l1554
  3886  003B96                     l1555:
  3887                           
  3888                           ; BSR set to: 1
  3889                           ;main.c: 40: else if (TimerKeepAliveFlag == 1)
  3890                           
  3891                           ; BSR set to: 1
  3892  003B96  05D9               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  3893  003B98  A4D8               	btfss	status,2,c
  3894  003B9A  D006               	goto	l1557
  3895                           
  3896                           ; BSR set to: 1
  3897                           ;main.c: 41: {
  3898                           ;main.c: 42: keepAliveSignalLed();
  3899  003B9C  ECCD  F022         	call	_keepAliveSignalLed	;wreg free
  3900                           
  3901                           ;main.c: 43: TimerKeepAliveFlag = 0;
  3902  003BA0  0E00               	movlw	0
  3903  003BA2  0101               	movlb	1	; () banked
  3904  003BA4  6FD9               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  3905                           
  3906                           ;main.c: 44: }
  3907  003BA6  D7EB               	goto	l1554
  3908  003BA8                     l1557:
  3909                           
  3910                           ; BSR set to: 1
  3911                           ;main.c: 45: else if (TimertenSecFlag == 1)
  3912                           
  3913                           ; BSR set to: 1
  3914  003BA8  05D8               	decf	_TimertenSecFlag& (0+255),w,b	;volatile
  3915  003BAA  A4D8               	btfss	status,2,c
  3916  003BAC  D006               	goto	l1559
  3917                           
  3918                           ; BSR set to: 1
  3919                           ;main.c: 46: {
  3920                           ;main.c: 47: SampleAllChannels();
  3921  003BAE  EC47  F010         	call	_SampleAllChannels	;wreg free
  3922                           
  3923                           ;main.c: 48: TimertenSecFlag = 0;
  3924  003BB2  0E00               	movlw	0
  3925  003BB4  0101               	movlb	1	; () banked
  3926  003BB6  6FD8               	movwf	_TimertenSecFlag& (0+255),b	;volatile
  3927                           
  3928                           ;main.c: 49: }
  3929  003BB8  D7E2               	goto	l1554
  3930  003BBA                     l1559:
  3931                           
  3932                           ; BSR set to: 1
  3933                           ;main.c: 50: else if (TimerSamplingFlag == 1)
  3934                           
  3935                           ; BSR set to: 1
  3936  003BBA  05DA               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  3937  003BBC  A4D8               	btfss	status,2,c
  3938  003BBE  D7DF               	goto	l1554
  3939                           
  3940                           ; BSR set to: 1
  3941                           ;main.c: 51: {
  3942                           ;main.c: 52: if(1 == needToSample)
  3943  003BC0  05D7               	decf	_needToSample& (0+255),w,b	;volatile
  3944  003BC2  A4D8               	btfss	status,2,c
  3945  003BC4  D7DC               	goto	l1554
  3946                           
  3947                           ; BSR set to: 1
  3948                           ;main.c: 53: {
  3949                           ;main.c: 54: SampleSingleChannel();
  3950  003BC6  EC4C  F00D         	call	_SampleSingleChannel	;wreg free
  3951  003BCA  D7D9               	goto	l1554
  3952  003BCC                     __end_of_main:
  3953                           	opt stack 0
  3954                           tblptru	equ	0xFF8
  3955                           tblptrh	equ	0xFF7
  3956                           tblptrl	equ	0xFF6
  3957                           tablat	equ	0xFF5
  3958                           postinc0	equ	0xFEE
  3959                           wreg	equ	0xFE8
  3960                           postdec1	equ	0xFE5
  3961                           fsr1l	equ	0xFE1
  3962                           status	equ	0xFD8
  3963                           
  3964 ;; *************** function _readUartByte *****************
  3965 ;; Defined at:
  3966 ;;		line 28 in file "EusartApp.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;		None
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  idx             2  132[BANK1 ] int 
  3971 ;;  dest           50   82[BANK1 ] unsigned char [50]
  3972 ;;  chRec           1  134[BANK1 ] unsigned char 
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  1    wreg      void 
  3975 ;; Registers used:
  3976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3982 ;;      Params:         0       0       0       0       0       0       0
  3983 ;;      Locals:         0       0      53       0       0       0       0
  3984 ;;      Temps:          0       3       0       0       0       0       0
  3985 ;;      Totals:         0       3      53       0       0       0       0
  3986 ;;Total ram usage:       56 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    9
  3989 ;; This function calls:
  3990 ;;		_EUSART1_Read
  3991 ;;		_GroupCommon
  3992 ;;		_GroupRx
  3993 ;;		_GroupTx
  3994 ;;		_InitRxMessageParams
  3995 ;;		_UART_Write_Text
  3996 ;;		_sprintf
  3997 ;;		_toupper
  3998 ;; This function is called by:
  3999 ;;		_main
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text1
  4004  000FD2                     __ptext1:
  4005                           	opt stack 0
  4006  000FD2                     _readUartByte:
  4007                           	opt stack 21
  4008                           
  4009                           ;EusartApp.c: 31: uint8_t chRec = (0);
  4010                           
  4011                           ;incstack = 0
  4012  000FD2  0E00               	movlw	0
  4013  000FD4  0101               	movlb	1	; () banked
  4014  000FD6  6F86               	movwf	readUartByte@chRec& (0+255),b
  4015                           
  4016                           ;EusartApp.c: 32: char dest[50];
  4017                           ;EusartApp.c: 34: switch(cState)
  4018  000FD8  D159               	goto	l275
  4019  000FDA                     
  4020                           ; BSR set to: 1
  4021                           ;EusartApp.c: 38: InitRxMessageParams();
  4022                           
  4023                           ; BSR set to: 1
  4024  000FDA  EC7A  F020         	call	_InitRxMessageParams	;wreg free
  4025                           
  4026                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  4027  000FDE  0E01               	movlw	1
  4028  000FE0  0101               	movlb	1	; () banked
  4029  000FE2  6FD4               	movwf	_cState& (0+255),b
  4030                           
  4031                           ;EusartApp.c: 40: break;
  4032  000FE4  0012               	return	
  4033  000FE6                     
  4034                           ; BSR set to: 1
  4035                           ;EusartApp.c: 44: chRec = EUSART1_Read();
  4036                           
  4037                           ; BSR set to: 1
  4038  000FE6  EC9C  F020         	call	_EUSART1_Read	;wreg free
  4039  000FEA  0101               	movlb	1	; () banked
  4040  000FEC  6F86               	movwf	readUartByte@chRec& (0+255),b
  4041                           
  4042                           ; BSR set to: 1
  4043                           ;EusartApp.c: 46: if(chRec == (0x24))
  4044  000FEE  0E24               	movlw	36
  4045  000FF0  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4046  000FF2  A4D8               	btfss	status,2,c
  4047  000FF4  0012               	return	
  4048                           
  4049                           ; BSR set to: 1
  4050                           ;EusartApp.c: 47: {
  4051                           ;EusartApp.c: 48: cState = READ_STREAM;
  4052  000FF6  0E02               	movlw	2
  4053  000FF8  6FD4               	movwf	_cState& (0+255),b
  4054                           
  4055                           ; BSR set to: 1
  4056                           ;EusartApp.c: 49: }
  4057                           ;EusartApp.c: 50: break;
  4058  000FFA  0012               	return	
  4059  000FFC                     
  4060                           ; BSR set to: 1
  4061                           ;EusartApp.c: 54: if(eusart1RxCount > 0)
  4062                           
  4063                           ; BSR set to: 1
  4064  000FFC  51D5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  4065  000FFE  B4D8               	btfsc	status,2,c
  4066  001000  0012               	return	
  4067                           
  4068                           ; BSR set to: 1
  4069                           ;EusartApp.c: 55: {
  4070                           ;EusartApp.c: 56: chRec = EUSART1_Read();
  4071  001002  EC9C  F020         	call	_EUSART1_Read	;wreg free
  4072  001006  0101               	movlb	1	; () banked
  4073  001008  6F86               	movwf	readUartByte@chRec& (0+255),b
  4074                           
  4075                           ; BSR set to: 1
  4076                           ;EusartApp.c: 57: if(chRec == (0))
  4077  00100A  5186               	movf	readUartByte@chRec& (0+255),w,b
  4078  00100C  B4D8               	btfsc	status,2,c
  4079  00100E  0012               	return	
  4080                           
  4081                           ; BSR set to: 1
  4082                           ;EusartApp.c: 61: else if(chRec == (0xd))
  4083                           
  4084                           ; BSR set to: 1
  4085                           
  4086                           ; BSR set to: 1
  4087                           ;EusartApp.c: 60: }
  4088                           
  4089                           ; BSR set to: 1
  4090                           ;EusartApp.c: 58: {
  4091                           ;EusartApp.c: 59: return;
  4092  001010  0E0D               	movlw	13
  4093  001012  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4094  001014  A4D8               	btfss	status,2,c
  4095  001016  D003               	goto	l285
  4096                           
  4097                           ; BSR set to: 1
  4098                           ;EusartApp.c: 62: {
  4099                           ;EusartApp.c: 63: cState = READ_GROUP;
  4100  001018  0E03               	movlw	3
  4101  00101A  6FD4               	movwf	_cState& (0+255),b
  4102                           
  4103                           ;EusartApp.c: 64: }
  4104  00101C  0012               	return	
  4105  00101E                     l285:
  4106                           
  4107                           ; BSR set to: 1
  4108                           ;EusartApp.c: 65: else
  4109                           ;EusartApp.c: 66: {
  4110                           ;EusartApp.c: 67: if(chRec != ' ')
  4111                           
  4112                           ; BSR set to: 1
  4113  00101E  0E20               	movlw	32
  4114  001020  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4115  001022  B4D8               	btfsc	status,2,c
  4116  001024  0012               	return	
  4117                           
  4118                           ; BSR set to: 1
  4119                           ;EusartApp.c: 68: {
  4120                           ;EusartApp.c: 69: rxMsgQueue[msgCount++] = chRec;
  4121  001026  51CE               	movf	_msgCount& (0+255),w,b
  4122  001028  0D01               	mullw	1
  4123  00102A  0EA2               	movlw	low _rxMsgQueue
  4124  00102C  24F3               	addwf	prodl,w,c
  4125  00102E  6ED9               	movwf	fsr2l,c
  4126  001030  0E02               	movlw	high _rxMsgQueue
  4127  001032  20F4               	addwfc	prodh,w,c
  4128  001034  6EDA               	movwf	fsr2h,c
  4129  001036  C186  FFDF         	movff	readUartByte@chRec,indf2
  4130                           
  4131                           ; BSR set to: 1
  4132  00103A  2BCE               	incf	_msgCount& (0+255),f,b
  4133                           
  4134                           ; BSR set to: 1
  4135                           ;EusartApp.c: 76: }
  4136                           ;EusartApp.c: 77: break;
  4137                           
  4138                           ; BSR set to: 1
  4139                           ;EusartApp.c: 73: else
  4140                           ;EusartApp.c: 74: {
  4141                           ;EusartApp.c: 75: return;
  4142                           
  4143                           ; BSR set to: 1
  4144                           ;EusartApp.c: 70: }
  4145                           ;EusartApp.c: 71: }
  4146                           ;EusartApp.c: 72: }
  4147                           
  4148                           ; BSR set to: 1
  4149                           
  4150                           ; BSR set to: 1
  4151  00103C  0012               	return	
  4152  00103E                     
  4153                           ; BSR set to: 1
  4154                           ;EusartApp.c: 81: chRec = toupper(rxMsgQueue[0]);
  4155                           
  4156                           ; BSR set to: 1
  4157  00103E  0102               	movlb	2	; () banked
  4158  001040  51A2               	movf	_rxMsgQueue& (0+255),w,b
  4159  001042  ECEF  F022         	call	_toupper
  4160  001046  0101               	movlb	1	; () banked
  4161  001048  6F86               	movwf	readUartByte@chRec& (0+255),b
  4162                           
  4163                           ;EusartApp.c: 83: switch(chRec)
  4164  00104A  D024               	goto	l290
  4165  00104C                     
  4166                           ; BSR set to: 1
  4167                           ;EusartApp.c: 87: group = RX_GROUP;
  4168                           
  4169                           ; BSR set to: 1
  4170  00104C  0E00               	movlw	0
  4171  00104E  6FD3               	movwf	_group& (0+255),b
  4172                           
  4173                           ;EusartApp.c: 88: cState = READ_REQUEST;
  4174  001050  0E04               	movlw	4
  4175  001052  6FD4               	movwf	_cState& (0+255),b
  4176                           
  4177                           ;EusartApp.c: 89: break;
  4178  001054  0012               	return	
  4179  001056                     
  4180                           ; BSR set to: 1
  4181                           ;EusartApp.c: 93: group = TX_GROUP;
  4182                           
  4183                           ; BSR set to: 1
  4184  001056  0E01               	movlw	1
  4185  001058  6FD3               	movwf	_group& (0+255),b
  4186                           
  4187                           ;EusartApp.c: 94: cState = READ_REQUEST;
  4188  00105A  0E04               	movlw	4
  4189  00105C  6FD4               	movwf	_cState& (0+255),b
  4190                           
  4191                           ;EusartApp.c: 95: break;
  4192  00105E  0012               	return	
  4193  001060                     
  4194                           ; BSR set to: 1
  4195                           ;EusartApp.c: 99: group = COMMON_GROUP;
  4196                           
  4197                           ; BSR set to: 1
  4198  001060  0E02               	movlw	2
  4199  001062  6FD3               	movwf	_group& (0+255),b
  4200                           
  4201                           ;EusartApp.c: 100: cState = READ_REQUEST;
  4202  001064  0E04               	movlw	4
  4203  001066  6FD4               	movwf	_cState& (0+255),b
  4204                           
  4205                           ;EusartApp.c: 101: break;
  4206  001068  0012               	return	
  4207  00106A                     
  4208                           ; BSR set to: 1
  4209                           ;EusartApp.c: 104: sprintf(dest, "NOT O.K \n\r");
  4210                           
  4211                           ; BSR set to: 1
  4212  00106A  0E52               	movlw	low readUartByte@dest
  4213  00106C  0100               	movlb	0	; () banked
  4214  00106E  6FBC               	movwf	sprintf@sp& (0+255),b
  4215  001070  0E01               	movlw	high readUartByte@dest
  4216  001072  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  4217  001074  0EBB               	movlw	low STR_10
  4218  001076  6FBE               	movwf	sprintf@f& (0+255),b
  4219  001078  0E7F               	movlw	high STR_10
  4220  00107A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  4221  00107C  EC70  F000         	call	_sprintf	;wreg free
  4222                           
  4223                           ;EusartApp.c: 105: UART_Write_Text(dest);
  4224  001080  0E52               	movlw	low readUartByte@dest
  4225  001082  6E19               	movwf	UART_Write_Text@text,c
  4226  001084  0E01               	movlw	high readUartByte@dest
  4227  001086  6E1A               	movwf	UART_Write_Text@text+1,c
  4228  001088  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  4229                           
  4230                           ;EusartApp.c: 106: cState = START_RX_MESSAGE_READ;
  4231  00108C  0E00               	movlw	0
  4232  00108E  0101               	movlb	1	; () banked
  4233  001090  6FD4               	movwf	_cState& (0+255),b
  4234                           
  4235                           ; BSR set to: 1
  4236                           ;EusartApp.c: 108: }
  4237                           
  4238                           ;EusartApp.c: 107: break;
  4239  001092  0012               	return	
  4240  001094                     l290:
  4241                           
  4242                           ; BSR set to: 1
  4243                           
  4244                           ; BSR set to: 1
  4245  001094  5186               	movf	readUartByte@chRec& (0+255),w,b
  4246                           
  4247                           ; Switch size 1, requested type "space"
  4248                           ; Number of cases is 3, Range of values is 82 to 84
  4249                           ; switch strategies available:
  4250                           ; Name         Instructions Cycles
  4251                           ; simple_byte           10     6 (average)
  4252                           ;	Chosen strategy is simple_byte
  4253  001096  0A52               	xorlw	82	; case 82
  4254  001098  B4D8               	btfsc	status,2,c
  4255  00109A  D7D8               	goto	l291
  4256  00109C  0A01               	xorlw	1	; case 83
  4257  00109E  B4D8               	btfsc	status,2,c
  4258  0010A0  D7DF               	goto	l294
  4259  0010A2  0A07               	xorlw	7	; case 84
  4260  0010A4  B4D8               	btfsc	status,2,c
  4261  0010A6  D7D7               	goto	l293
  4262  0010A8  D7E0               	goto	l295
  4263  0010AA                     
  4264                           ; BSR set to: 1
  4265                           ;EusartApp.c: 113: chRec = toupper(rxMsgQueue[1]);
  4266                           
  4267                           ; BSR set to: 1
  4268  0010AA  0102               	movlb	2	; () banked
  4269  0010AC  51A3               	movf	(_rxMsgQueue+1)& (0+255),w,b
  4270  0010AE  ECEF  F022         	call	_toupper
  4271  0010B2  0101               	movlb	1	; () banked
  4272  0010B4  6F86               	movwf	readUartByte@chRec& (0+255),b
  4273                           
  4274                           ;EusartApp.c: 115: switch(group)
  4275  0010B6  D07C               	goto	l297
  4276  0010B8                     
  4277                           ; BSR set to: 1
  4278                           ;EusartApp.c: 119: if( chRec == 'I' || chRec == 'F' || chRec == 'Q' ||
  4279                           ;EusartApp.c: 120: chRec == 'X' || chRec == 'S' || chRec == 'C')
  4280                           
  4281                           ; BSR set to: 1
  4282  0010B8  0E49               	movlw	73
  4283  0010BA  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4284  0010BC  B4D8               	btfsc	status,2,c
  4285  0010BE  D014               	goto	u9390
  4286                           
  4287                           ; BSR set to: 1
  4288  0010C0  0E46               	movlw	70
  4289  0010C2  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4290  0010C4  B4D8               	btfsc	status,2,c
  4291  0010C6  D010               	goto	u9390
  4292                           
  4293                           ; BSR set to: 1
  4294  0010C8  0E51               	movlw	81
  4295  0010CA  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4296  0010CC  B4D8               	btfsc	status,2,c
  4297  0010CE  D00C               	goto	u9390
  4298                           
  4299                           ; BSR set to: 1
  4300  0010D0  0E58               	movlw	88
  4301  0010D2  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4302  0010D4  B4D8               	btfsc	status,2,c
  4303  0010D6  D008               	goto	u9390
  4304                           
  4305                           ; BSR set to: 1
  4306  0010D8  0E53               	movlw	83
  4307  0010DA  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4308  0010DC  B4D8               	btfsc	status,2,c
  4309  0010DE  D004               	goto	u9390
  4310                           
  4311                           ; BSR set to: 1
  4312  0010E0  0E43               	movlw	67
  4313  0010E2  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4314  0010E4  A4D8               	btfss	status,2,c
  4315  0010E6  D006               	goto	l299
  4316  0010E8                     u9390:
  4317                           
  4318                           ; BSR set to: 1
  4319                           ;EusartApp.c: 121: {
  4320                           ;EusartApp.c: 123: request = chRec - '0';
  4321                           
  4322                           ; BSR set to: 1
  4323  0010E8  5186               	movf	readUartByte@chRec& (0+255),w,b
  4324  0010EA  0FD0               	addlw	208
  4325  0010EC  6FD2               	movwf	_request& (0+255),b
  4326                           
  4327                           ; BSR set to: 1
  4328                           ;EusartApp.c: 124: cState = READ_DATA_SIZE;
  4329  0010EE  0E05               	movlw	5
  4330  0010F0  6FD4               	movwf	_cState& (0+255),b
  4331                           
  4332                           ;EusartApp.c: 126: }
  4333  0010F2  0012               	return	
  4334  0010F4                     l299:
  4335                           
  4336                           ; BSR set to: 1
  4337                           ;EusartApp.c: 127: else
  4338                           ;EusartApp.c: 128: {
  4339                           ;EusartApp.c: 129: UART_Write_Text("NOT OK \n\r");
  4340                           
  4341                           ; BSR set to: 1
  4342  0010F4  0ED0               	movlw	low STR_1
  4343  0010F6  6E19               	movwf	UART_Write_Text@text,c
  4344  0010F8  0E7F               	movlw	high STR_1
  4345  0010FA  6E1A               	movwf	UART_Write_Text@text+1,c
  4346  0010FC  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  4347                           
  4348                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  4349  001100  0E00               	movlw	0
  4350  001102  0101               	movlb	1	; () banked
  4351  001104  6FD4               	movwf	_cState& (0+255),b
  4352                           
  4353                           ; BSR set to: 1
  4354                           ;EusartApp.c: 131: }
  4355                           ;EusartApp.c: 132: return;
  4356                           
  4357                           ; BSR set to: 1
  4358  001106  0012               	return	
  4359  001108                     
  4360                           ; BSR set to: 1
  4361                           ;EusartApp.c: 136: if(chRec == 'I' || chRec == 'F' || chRec == 'Q' || chRec == 'X' || ch
      +                          Rec == 'B'
  4362                           ;EusartApp.c: 137: || chRec == 'S')
  4363                           
  4364                           ; BSR set to: 1
  4365  001108  0E49               	movlw	73
  4366  00110A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4367  00110C  B4D8               	btfsc	status,2,c
  4368  00110E  D014               	goto	u9450
  4369                           
  4370                           ; BSR set to: 1
  4371  001110  0E46               	movlw	70
  4372  001112  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4373  001114  B4D8               	btfsc	status,2,c
  4374  001116  D010               	goto	u9450
  4375                           
  4376                           ; BSR set to: 1
  4377  001118  0E51               	movlw	81
  4378  00111A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4379  00111C  B4D8               	btfsc	status,2,c
  4380  00111E  D00C               	goto	u9450
  4381                           
  4382                           ; BSR set to: 1
  4383  001120  0E58               	movlw	88
  4384  001122  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4385  001124  B4D8               	btfsc	status,2,c
  4386  001126  D008               	goto	u9450
  4387                           
  4388                           ; BSR set to: 1
  4389  001128  0E42               	movlw	66
  4390  00112A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4391  00112C  B4D8               	btfsc	status,2,c
  4392  00112E  D004               	goto	u9450
  4393                           
  4394                           ; BSR set to: 1
  4395  001130  0E53               	movlw	83
  4396  001132  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4397  001134  A4D8               	btfss	status,2,c
  4398  001136  D006               	goto	l304
  4399  001138                     u9450:
  4400                           
  4401                           ; BSR set to: 1
  4402                           ;EusartApp.c: 138: {
  4403                           ;EusartApp.c: 139: request = (chRec - '0');
  4404                           
  4405                           ; BSR set to: 1
  4406  001138  5186               	movf	readUartByte@chRec& (0+255),w,b
  4407  00113A  0FD0               	addlw	208
  4408  00113C  6FD2               	movwf	_request& (0+255),b
  4409                           
  4410                           ; BSR set to: 1
  4411                           ;EusartApp.c: 140: cState = READ_DATA_SIZE;
  4412  00113E  0E05               	movlw	5
  4413  001140  6FD4               	movwf	_cState& (0+255),b
  4414                           
  4415                           ; BSR set to: 1
  4416                           ;EusartApp.c: 142: }
  4417                           
  4418                           ; BSR set to: 1
  4419                           ;EusartApp.c: 141: return;
  4420  001142  0012               	return	
  4421  001144                     l304:
  4422                           
  4423                           ; BSR set to: 1
  4424                           ;EusartApp.c: 143: else
  4425                           ;EusartApp.c: 144: {
  4426                           ;EusartApp.c: 145: UART_Write_Text("NOT OK \n\r");
  4427                           
  4428                           ; BSR set to: 1
  4429  001144  0ED0               	movlw	low STR_1
  4430  001146  6E19               	movwf	UART_Write_Text@text,c
  4431  001148  0E7F               	movlw	high STR_1
  4432  00114A  6E1A               	movwf	UART_Write_Text@text+1,c
  4433  00114C  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  4434                           
  4435                           ;EusartApp.c: 146: cState = START_RX_MESSAGE_READ;
  4436  001150  0E00               	movlw	0
  4437  001152  0101               	movlb	1	; () banked
  4438  001154  6FD4               	movwf	_cState& (0+255),b
  4439                           
  4440                           ; BSR set to: 1
  4441                           ;EusartApp.c: 147: }
  4442                           ;EusartApp.c: 148: break;
  4443  001156  0012               	return	
  4444  001158                     
  4445                           ; BSR set to: 1
  4446                           ;EusartApp.c: 152: if(chRec == 'H' || chRec == 'L' || chRec == 'T' || chRec == 'A' || ch
      +                          Rec == 'U'
  4447                           ;EusartApp.c: 153: || chRec == 'Q' || chRec == 'V')
  4448                           
  4449                           ; BSR set to: 1
  4450  001158  0E48               	movlw	72
  4451  00115A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4452  00115C  B4D8               	btfsc	status,2,c
  4453  00115E  D018               	goto	u9520
  4454                           
  4455                           ; BSR set to: 1
  4456  001160  0E4C               	movlw	76
  4457  001162  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4458  001164  B4D8               	btfsc	status,2,c
  4459  001166  D014               	goto	u9520
  4460                           
  4461                           ; BSR set to: 1
  4462  001168  0E54               	movlw	84
  4463  00116A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4464  00116C  B4D8               	btfsc	status,2,c
  4465  00116E  D010               	goto	u9520
  4466                           
  4467                           ; BSR set to: 1
  4468  001170  0E41               	movlw	65
  4469  001172  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4470  001174  B4D8               	btfsc	status,2,c
  4471  001176  D00C               	goto	u9520
  4472                           
  4473                           ; BSR set to: 1
  4474  001178  0E55               	movlw	85
  4475  00117A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4476  00117C  B4D8               	btfsc	status,2,c
  4477  00117E  D008               	goto	u9520
  4478                           
  4479                           ; BSR set to: 1
  4480  001180  0E51               	movlw	81
  4481  001182  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4482  001184  B4D8               	btfsc	status,2,c
  4483  001186  D004               	goto	u9520
  4484                           
  4485                           ; BSR set to: 1
  4486  001188  0E56               	movlw	86
  4487  00118A  1986               	xorwf	readUartByte@chRec& (0+255),w,b
  4488  00118C  A4D8               	btfss	status,2,c
  4489  00118E  D006               	goto	l310
  4490  001190                     u9520:
  4491                           
  4492                           ; BSR set to: 1
  4493                           ;EusartApp.c: 154: {
  4494                           ;EusartApp.c: 155: request = (chRec - '0');
  4495                           
  4496                           ; BSR set to: 1
  4497  001190  5186               	movf	readUartByte@chRec& (0+255),w,b
  4498  001192  0FD0               	addlw	208
  4499  001194  6FD2               	movwf	_request& (0+255),b
  4500                           
  4501                           ; BSR set to: 1
  4502                           ;EusartApp.c: 156: cState = READ_DATA_SIZE;
  4503  001196  0E05               	movlw	5
  4504  001198  6FD4               	movwf	_cState& (0+255),b
  4505                           
  4506                           ;EusartApp.c: 157: }
  4507  00119A  0012               	return	
  4508  00119C                     l310:
  4509                           
  4510                           ; BSR set to: 1
  4511                           ;EusartApp.c: 158: else
  4512                           ;EusartApp.c: 159: {
  4513                           ;EusartApp.c: 160: UART_Write_Text("NOT OK \n\r");
  4514                           
  4515                           ; BSR set to: 1
  4516  00119C  0ED0               	movlw	low STR_1
  4517  00119E  6E19               	movwf	UART_Write_Text@text,c
  4518  0011A0  0E7F               	movlw	high STR_1
  4519  0011A2  6E1A               	movwf	UART_Write_Text@text+1,c
  4520  0011A4  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  4521                           
  4522                           ;EusartApp.c: 161: cState = START_RX_MESSAGE_READ;
  4523  0011A8  0E00               	movlw	0
  4524  0011AA  0101               	movlb	1	; () banked
  4525  0011AC  6FD4               	movwf	_cState& (0+255),b
  4526                           
  4527                           ; BSR set to: 1
  4528                           ;EusartApp.c: 162: }
  4529                           ;EusartApp.c: 163: }
  4530  0011AE  0012               	return	
  4531  0011B0                     l297:
  4532                           
  4533                           ; BSR set to: 1
  4534                           
  4535                           ; BSR set to: 1
  4536  0011B0  51D3               	movf	_group& (0+255),w,b
  4537                           
  4538                           ; Switch size 1, requested type "space"
  4539                           ; Number of cases is 3, Range of values is 0 to 2
  4540                           ; switch strategies available:
  4541                           ; Name         Instructions Cycles
  4542                           ; simple_byte           10     6 (average)
  4543                           ;	Chosen strategy is simple_byte
  4544  0011B2  0A00               	xorlw	0	; case 0
  4545  0011B4  B4D8               	btfsc	status,2,c
  4546  0011B6  D780               	goto	l298
  4547  0011B8  0A01               	xorlw	1	; case 1
  4548  0011BA  B4D8               	btfsc	status,2,c
  4549  0011BC  D7A5               	goto	l303
  4550  0011BE  0A03               	xorlw	3	; case 2
  4551  0011C0  A4D8               	btfss	status,2,c
  4552                           
  4553                           ; BSR set to: 1
  4554                           ;EusartApp.c: 164: return;
  4555  0011C2  0012               	return	
  4556  0011C4  D7C9               	goto	l309
  4557  0011C6                     
  4558                           ; BSR set to: 1
  4559                           ;EusartApp.c: 168: dataSize = msgCount - 2;
  4560                           
  4561                           ; BSR set to: 1
  4562  0011C6  51CE               	movf	_msgCount& (0+255),w,b
  4563  0011C8  0FFE               	addlw	254
  4564  0011CA  6FD1               	movwf	_dataSize& (0+255),b
  4565                           
  4566                           ; BSR set to: 1
  4567                           ;EusartApp.c: 169: rxMsgData[(0x0)] = dataSize;
  4568  0011CC  C1D1  F28E         	movff	_dataSize,_rxMsgData
  4569                           
  4570                           ; BSR set to: 1
  4571                           ;EusartApp.c: 170: if(dataSize == 0)
  4572  0011D0  51D1               	movf	_dataSize& (0+255),w,b
  4573  0011D2  A4D8               	btfss	status,2,c
  4574  0011D4  D003               	goto	l315
  4575                           
  4576                           ; BSR set to: 1
  4577                           ;EusartApp.c: 171: {
  4578                           ;EusartApp.c: 172: cState = JUMP_FUNCTION;
  4579  0011D6  0E08               	movlw	8
  4580  0011D8  6FD4               	movwf	_cState& (0+255),b
  4581                           
  4582                           ;EusartApp.c: 173: }
  4583  0011DA  0012               	return	
  4584  0011DC                     l315:
  4585                           
  4586                           ; BSR set to: 1
  4587                           ;EusartApp.c: 174: else
  4588                           ;EusartApp.c: 175: {
  4589                           ;EusartApp.c: 176: cState = READ_DATA;
  4590                           
  4591                           ; BSR set to: 1
  4592  0011DC  0E06               	movlw	6
  4593  0011DE  6FD4               	movwf	_cState& (0+255),b
  4594                           
  4595                           ; BSR set to: 1
  4596                           ;EusartApp.c: 177: }
  4597                           ;EusartApp.c: 179: break;
  4598  0011E0  0012               	return	
  4599  0011E2                     
  4600                           ; BSR set to: 1
  4601                           ;EusartApp.c: 183: for(int idx = 1; idx < dataSize + 1; idx++)
  4602                           
  4603                           ; BSR set to: 1
  4604  0011E2  0E00               	movlw	0
  4605  0011E4  6F85               	movwf	(readUartByte@idx+1)& (0+255),b
  4606  0011E6  0E01               	movlw	1
  4607  0011E8  6F84               	movwf	readUartByte@idx& (0+255),b
  4608  0011EA  D01B               	goto	l318
  4609  0011EC                     
  4610                           ;EusartApp.c: 184: {
  4611                           ;EusartApp.c: 185: rxMsgData[idx] = rxMsgQueue[(0x2) + idx - 1];
  4612                           
  4613                           ; BSR set to: 1
  4614  0011EC  0E01               	movlw	1
  4615  0011EE  0101               	movlb	1	; () banked
  4616  0011F0  2584               	addwf	readUartByte@idx& (0+255),w,b
  4617  0011F2  0100               	movlb	0	; () banked
  4618  0011F4  6FEB               	movwf	??_readUartByte& (0+255),b
  4619  0011F6  0E00               	movlw	0
  4620  0011F8  0101               	movlb	1	; () banked
  4621  0011FA  2185               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  4622  0011FC  0100               	movlb	0	; () banked
  4623  0011FE  6FEC               	movwf	(??_readUartByte+1)& (0+255),b
  4624  001200  0EA2               	movlw	low _rxMsgQueue
  4625  001202  25EB               	addwf	??_readUartByte& (0+255),w,b
  4626  001204  6ED9               	movwf	fsr2l,c
  4627  001206  0E02               	movlw	high _rxMsgQueue
  4628  001208  21EC               	addwfc	(??_readUartByte+1)& (0+255),w,b
  4629  00120A  6EDA               	movwf	fsr2h,c
  4630  00120C  0E8E               	movlw	low _rxMsgData
  4631  00120E  0101               	movlb	1	; () banked
  4632  001210  2584               	addwf	readUartByte@idx& (0+255),w,b
  4633  001212  6EE1               	movwf	fsr1l,c
  4634  001214  0E02               	movlw	high _rxMsgData
  4635  001216  2185               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  4636  001218  6EE2               	movwf	fsr1h,c
  4637  00121A  CFDF FFE7          	movff	indf2,indf1
  4638                           
  4639                           ; BSR set to: 1
  4640  00121E  4B84               	infsnz	readUartByte@idx& (0+255),f,b
  4641  001220  2B85               	incf	(readUartByte@idx+1)& (0+255),f,b
  4642  001222                     l318:
  4643                           
  4644                           ; BSR set to: 1
  4645                           
  4646                           ; BSR set to: 1
  4647  001222  51D1               	movf	_dataSize& (0+255),w,b
  4648  001224  0100               	movlb	0	; () banked
  4649  001226  6FEB               	movwf	??_readUartByte& (0+255),b
  4650  001228  6BEC               	clrf	(??_readUartByte+1)& (0+255),b
  4651  00122A  0E01               	movlw	1
  4652  00122C  27EB               	addwf	??_readUartByte& (0+255),f,b
  4653  00122E  0E00               	movlw	0
  4654  001230  23EC               	addwfc	(??_readUartByte+1)& (0+255),f,b
  4655  001232  51EB               	movf	??_readUartByte& (0+255),w,b
  4656  001234  0101               	movlb	1	; () banked
  4657  001236  5D84               	subwf	readUartByte@idx& (0+255),w,b
  4658  001238  5185               	movf	(readUartByte@idx+1)& (0+255),w,b
  4659  00123A  0A80               	xorlw	128
  4660  00123C  0100               	movlb	0	; () banked
  4661  00123E  6FED               	movwf	(??_readUartByte+2)& (0+255),b
  4662  001240  51EC               	movf	(??_readUartByte+1)& (0+255),w,b
  4663  001242  0A80               	xorlw	128
  4664  001244  59ED               	subwfb	(??_readUartByte+2)& (0+255),w,b
  4665  001246  A0D8               	btfss	status,0,c
  4666  001248  D7D1               	goto	l319
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;EusartApp.c: 186: }
  4670                           ;EusartApp.c: 188: cState = JUMP_FUNCTION;
  4671                           
  4672                           ; BSR set to: 0
  4673  00124A  0E08               	movlw	8
  4674  00124C  0101               	movlb	1	; () banked
  4675  00124E  6FD4               	movwf	_cState& (0+255),b
  4676                           
  4677                           ;EusartApp.c: 189: break;
  4678  001250  0012               	return	
  4679  001252                     
  4680                           ; BSR set to: 1
  4681                           ;EusartApp.c: 193: groupsArray[group](request, rxMsgData);
  4682                           
  4683                           ; BSR set to: 1
  4684  001252  51D3               	movf	_group& (0+255),w,b
  4685  001254  0D02               	mullw	2
  4686  001256  0EDC               	movlw	low _groupsArray
  4687  001258  24F3               	addwf	prodl,w,c
  4688  00125A  6ED9               	movwf	fsr2l,c
  4689  00125C  0E01               	movlw	high _groupsArray
  4690  00125E  20F4               	addwfc	prodh,w,c
  4691  001260  6EDA               	movwf	fsr2h,c
  4692  001262  D801               	call	u9558
  4693  001264  D00F               	goto	u9559
  4694  001266                     u9558:
  4695  001266  0005               	push	
  4696  001268  6EFA               	movwf	pclath,c
  4697  00126A  50DE               	movf	postinc2,w,c
  4698  00126C  6EFD               	movwf	tosl,c
  4699  00126E  50DE               	movf	postinc2,w,c
  4700  001270  6EFE               	movwf	tosh,c
  4701  001272  50F8               	movf	tblptru,w,c
  4702  001274  6EFF               	movwf	tosu,c
  4703  001276  50FA               	movf	pclath,w,c
  4704  001278  0E8E               	movlw	low _rxMsgData
  4705  00127A  6F50               	movwf	GroupCommon@data& (0+255),b
  4706  00127C  0E02               	movlw	high _rxMsgData
  4707  00127E  6F51               	movwf	(GroupCommon@data+1)& (0+255),b
  4708  001280  51D2               	movf	_request& (0+255),w,b
  4709  001282  0012               	return		;indir
  4710  001284                     u9559:
  4711                           
  4712                           ;EusartApp.c: 194: cState = START_RX_MESSAGE_READ;
  4713  001284  0E00               	movlw	0
  4714  001286  0101               	movlb	1	; () banked
  4715  001288  6FD4               	movwf	_cState& (0+255),b
  4716                           
  4717                           ; BSR set to: 1
  4718                           ;EusartApp.c: 196: }
  4719                           
  4720                           ;EusartApp.c: 195: break;
  4721  00128A  0012               	return	
  4722  00128C                     l275:
  4723                           
  4724                           ; BSR set to: 1
  4725                           
  4726                           ; BSR set to: 1
  4727  00128C  51D4               	movf	_cState& (0+255),w,b
  4728                           
  4729                           ; Switch size 1, requested type "space"
  4730                           ; Number of cases is 8, Range of values is 0 to 8
  4731                           ; switch strategies available:
  4732                           ; Name         Instructions Cycles
  4733                           ; simple_byte           25    13 (average)
  4734                           ;	Chosen strategy is simple_byte
  4735  00128E  0A00               	xorlw	0	; case 0
  4736  001290  B4D8               	btfsc	status,2,c
  4737  001292  D6A3               	goto	l276
  4738  001294  0A01               	xorlw	1	; case 1
  4739  001296  B4D8               	btfsc	status,2,c
  4740  001298  D6A6               	goto	l278
  4741  00129A  0A03               	xorlw	3	; case 2
  4742  00129C  B4D8               	btfsc	status,2,c
  4743  00129E  D6AE               	goto	l280
  4744  0012A0  0A01               	xorlw	1	; case 3
  4745  0012A2  B4D8               	btfsc	status,2,c
  4746  0012A4  D6CC               	goto	l289
  4747  0012A6  0A07               	xorlw	7	; case 4
  4748  0012A8  B4D8               	btfsc	status,2,c
  4749  0012AA  D6FF               	goto	l296
  4750  0012AC  0A01               	xorlw	1	; case 5
  4751  0012AE  B4D8               	btfsc	status,2,c
  4752  0012B0  D78A               	goto	l314
  4753  0012B2  0A03               	xorlw	3	; case 6
  4754  0012B4  B4D8               	btfsc	status,2,c
  4755  0012B6  D795               	goto	l317
  4756  0012B8  0A0E               	xorlw	14	; case 8
  4757  0012BA  A4D8               	btfss	status,2,c
  4758  0012BC  0012               	return	
  4759  0012BE  D7C9               	goto	l321
  4760  0012C0                     __end_of_readUartByte:
  4761                           	opt stack 0
  4762                           tosu	equ	0xFFF
  4763                           tosh	equ	0xFFE
  4764                           tosl	equ	0xFFD
  4765                           pclath	equ	0xFFA
  4766                           tblptru	equ	0xFF8
  4767                           tblptrh	equ	0xFF7
  4768                           tblptrl	equ	0xFF6
  4769                           tablat	equ	0xFF5
  4770                           prodh	equ	0xFF4
  4771                           prodl	equ	0xFF3
  4772                           postinc0	equ	0xFEE
  4773                           wreg	equ	0xFE8
  4774                           indf1	equ	0xFE7
  4775                           postdec1	equ	0xFE5
  4776                           fsr1h	equ	0xFE2
  4777                           fsr1l	equ	0xFE1
  4778                           indf2	equ	0xFDF
  4779                           postinc2	equ	0xFDE
  4780                           fsr2h	equ	0xFDA
  4781                           fsr2l	equ	0xFD9
  4782                           status	equ	0xFD8
  4783                           
  4784 ;; *************** function _InitRxMessageParams *****************
  4785 ;; Defined at:
  4786 ;;		line 199 in file "EusartApp.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;		None
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;		None
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  1    wreg      void 
  4793 ;; Registers used:
  4794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4800 ;;      Params:         0       0       0       0       0       0       0
  4801 ;;      Locals:         0       0       0       0       0       0       0
  4802 ;;      Temps:          0       0       0       0       0       0       0
  4803 ;;      Totals:         0       0       0       0       0       0       0
  4804 ;;Total ram usage:        0 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    5
  4807 ;; This function calls:
  4808 ;;		_ZeroArray
  4809 ;; This function is called by:
  4810 ;;		_readUartByte
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           	psect	text2
  4815  0040F4                     __ptext2:
  4816                           	opt stack 0
  4817  0040F4                     _InitRxMessageParams:
  4818                           	opt stack 24
  4819                           
  4820                           ;EusartApp.c: 201: group = 0;
  4821                           
  4822                           ; BSR set to: 1
  4823                           ;incstack = 0
  4824  0040F4  0E00               	movlw	0
  4825  0040F6  0101               	movlb	1	; () banked
  4826  0040F8  6FD3               	movwf	_group& (0+255),b
  4827                           
  4828                           ;EusartApp.c: 202: request = 0;
  4829  0040FA  0E00               	movlw	0
  4830  0040FC  6FD2               	movwf	_request& (0+255),b
  4831                           
  4832                           ;EusartApp.c: 203: msgCount = 0;
  4833  0040FE  0E00               	movlw	0
  4834  004100  6FCE               	movwf	_msgCount& (0+255),b
  4835                           
  4836                           ;EusartApp.c: 204: dataSize = 0;
  4837  004102  0E00               	movlw	0
  4838  004104  6FD1               	movwf	_dataSize& (0+255),b
  4839                           
  4840                           ;EusartApp.c: 205: crcCalc = 0;
  4841  004106  0E00               	movlw	0
  4842  004108  6FD0               	movwf	_crcCalc& (0+255),b
  4843                           
  4844                           ;EusartApp.c: 206: crcGiven = 0;
  4845  00410A  0E00               	movlw	0
  4846  00410C  6FCF               	movwf	_crcGiven& (0+255),b
  4847                           
  4848                           ; BSR set to: 1
  4849                           ;EusartApp.c: 207: ZeroArray(rxMsgQueue, (0x14));
  4850  00410E  0EA2               	movlw	low _rxMsgQueue
  4851  004110  6E20               	movwf	ZeroArray@array,c
  4852  004112  0E02               	movlw	high _rxMsgQueue
  4853  004114  6E21               	movwf	ZeroArray@array+1,c
  4854  004116  0E00               	movlw	0
  4855  004118  6E23               	movwf	ZeroArray@size+1,c
  4856  00411A  0E14               	movlw	20
  4857  00411C  6E22               	movwf	ZeroArray@size,c
  4858  00411E  ECA3  F022         	call	_ZeroArray
  4859                           
  4860                           ;EusartApp.c: 208: ZeroArray(rxMsgData, (0x14));
  4861  004122  0E8E               	movlw	low _rxMsgData
  4862  004124  6E20               	movwf	ZeroArray@array,c
  4863  004126  0E02               	movlw	high _rxMsgData
  4864  004128  6E21               	movwf	ZeroArray@array+1,c
  4865  00412A  0E00               	movlw	0
  4866  00412C  6E23               	movwf	ZeroArray@size+1,c
  4867  00412E  0E14               	movlw	20
  4868  004130  6E22               	movwf	ZeroArray@size,c
  4869  004132  ECA3  F022         	call	_ZeroArray	;wreg free
  4870  004136  0012               	return		;funcret
  4871  004138                     __end_of_InitRxMessageParams:
  4872                           	opt stack 0
  4873                           tosu	equ	0xFFF
  4874                           tosh	equ	0xFFE
  4875                           tosl	equ	0xFFD
  4876                           pclath	equ	0xFFA
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           postinc0	equ	0xFEE
  4884                           wreg	equ	0xFE8
  4885                           indf1	equ	0xFE7
  4886                           postdec1	equ	0xFE5
  4887                           fsr1h	equ	0xFE2
  4888                           fsr1l	equ	0xFE1
  4889                           indf2	equ	0xFDF
  4890                           postinc2	equ	0xFDE
  4891                           fsr2h	equ	0xFDA
  4892                           fsr2l	equ	0xFD9
  4893                           status	equ	0xFD8
  4894                           
  4895 ;; *************** function _GroupCommon *****************
  4896 ;; Defined at:
  4897 ;;		line 96 in file "MessageFunctions.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;  request         1    wreg     enum E6
  4900 ;;  data            2   80[BANK1 ] PTR unsigned char 
  4901 ;;		 -> rxMsgData(20), 
  4902 ;; Auto vars:     Size  Location     Type
  4903 ;;  request         1  131[BANK0 ] enum E6
  4904 ;; Return value:  Size  Location     Type
  4905 ;;                  1    wreg      void 
  4906 ;; Registers used:
  4907 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4913 ;;      Params:         0       0       2       0       0       0       0
  4914 ;;      Locals:         0       1       0       0       0       0       0
  4915 ;;      Temps:          0       0       0       0       0       0       0
  4916 ;;      Totals:         0       1       2       0       0       0       0
  4917 ;;Total ram usage:        3 bytes
  4918 ;; Hardware stack levels used:    1
  4919 ;; Hardware stack levels required when called:    8
  4920 ;; This function calls:
  4921 ;;		_PrintHelpScreen
  4922 ;;		_PrintSystemStatus
  4923 ;;		_SaveSystemStatus
  4924 ;;		_SetUartMode
  4925 ;;		_SetUartRefrashRate
  4926 ;;		_set_system_type
  4927 ;;		_testLeds
  4928 ;; This function is called by:
  4929 ;;		_readUartByte
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           	psect	text3
  4934  0038CC                     __ptext3:
  4935                           	opt stack 0
  4936  0038CC                     _GroupCommon:
  4937                           	opt stack 21
  4938                           
  4939                           ;incstack = 0
  4940                           ;GroupCommon@request stored from wreg
  4941  0038CC  0100               	movlb	0	; () banked
  4942  0038CE  6FE3               	movwf	GroupCommon@request& (0+255),b
  4943                           
  4944                           ;MessageFunctions.c: 98: switch (request)
  4945  0038D0  D021               	goto	l1227
  4946  0038D2                     
  4947                           ;MessageFunctions.c: 101: PrintHelpScreen();
  4948  0038D2  EC61  F006         	call	_PrintHelpScreen	;wreg free
  4949                           
  4950                           ;MessageFunctions.c: 102: break;
  4951  0038D6  0012               	return	
  4952  0038D8                     
  4953                           ;MessageFunctions.c: 105: testLeds();
  4954  0038D8  EC17  F01E         	call	_testLeds	;wreg free
  4955                           
  4956                           ;MessageFunctions.c: 106: break;
  4957  0038DC  0012               	return	
  4958  0038DE                     
  4959                           ;MessageFunctions.c: 109: set_system_type(data);
  4960  0038DE  C150  F077         	movff	GroupCommon@data,set_system_type@data
  4961  0038E2  C151  F078         	movff	GroupCommon@data+1,set_system_type@data+1
  4962  0038E6  EC40  F01A         	call	_set_system_type	;wreg free
  4963                           
  4964                           ;MessageFunctions.c: 111: break;
  4965  0038EA  0012               	return	
  4966  0038EC                     
  4967                           ;MessageFunctions.c: 114: PrintSystemStatus();
  4968  0038EC  ECE5  F018         	call	_PrintSystemStatus	;wreg free
  4969                           
  4970                           ;MessageFunctions.c: 115: break;
  4971  0038F0  0012               	return	
  4972  0038F2                     
  4973                           ;MessageFunctions.c: 118: SetUartRefrashRate(data);
  4974  0038F2  C150  F077         	movff	GroupCommon@data,SetUartRefrashRate@data
  4975  0038F6  C151  F078         	movff	GroupCommon@data+1,SetUartRefrashRate@data+1
  4976  0038FA  EC47  F01E         	call	_SetUartRefrashRate	;wreg free
  4977                           
  4978                           ;MessageFunctions.c: 119: break;
  4979  0038FE  0012               	return	
  4980  003900                     
  4981                           ;MessageFunctions.c: 122: SetUartMode(data);
  4982  003900  C150  F077         	movff	GroupCommon@data,SetUartMode@data
  4983  003904  C151  F078         	movff	GroupCommon@data+1,SetUartMode@data+1
  4984  003908  ECE6  F01D         	call	_SetUartMode	;wreg free
  4985                           
  4986                           ;MessageFunctions.c: 123: break;
  4987  00390C  0012               	return	
  4988  00390E                     
  4989                           ;MessageFunctions.c: 126: SaveSystemStatus();
  4990  00390E  ECA2  F01C         	call	_SaveSystemStatus	;wreg free
  4991                           
  4992                           ;MessageFunctions.c: 132: }
  4993                           
  4994                           ;MessageFunctions.c: 131: break;
  4995                           
  4996                           ;MessageFunctions.c: 130: default:
  4997                           
  4998                           ;MessageFunctions.c: 127: break;
  4999  003912  0012               	return	
  5000  003914                     l1227:
  5001  003914  0100               	movlb	0	; () banked
  5002  003916  51E3               	movf	GroupCommon@request& (0+255),w,b
  5003                           
  5004                           ; Switch size 1, requested type "space"
  5005                           ; Number of cases is 7, Range of values is 17 to 38
  5006                           ; switch strategies available:
  5007                           ; Name         Instructions Cycles
  5008                           ; simple_byte           22    12 (average)
  5009                           ;	Chosen strategy is simple_byte
  5010  003918  0A11               	xorlw	17	; case 17
  5011  00391A  B4D8               	btfsc	status,2,c
  5012  00391C  D7F1               	goto	l1234
  5013  00391E  0A09               	xorlw	9	; case 24
  5014  003920  B4D8               	btfsc	status,2,c
  5015  003922  D7D7               	goto	l1228
  5016  003924  0A04               	xorlw	4	; case 28
  5017  003926  B4D8               	btfsc	status,2,c
  5018  003928  D7D7               	goto	l1230
  5019  00392A  0A3D               	xorlw	61	; case 33
  5020  00392C  B4D8               	btfsc	status,2,c
  5021  00392E  D7DE               	goto	l1232
  5022  003930  0A05               	xorlw	5	; case 36
  5023  003932  B4D8               	btfsc	status,2,c
  5024  003934  D7D4               	goto	l1231
  5025  003936  0A01               	xorlw	1	; case 37
  5026  003938  B4D8               	btfsc	status,2,c
  5027  00393A  D7DB               	goto	l1233
  5028  00393C  0A03               	xorlw	3	; case 38
  5029  00393E  A4D8               	btfss	status,2,c
  5030  003940  0012               	return	
  5031  003942  D7E5               	goto	l1235
  5032  003944                     __end_of_GroupCommon:
  5033                           	opt stack 0
  5034                           tosu	equ	0xFFF
  5035                           tosh	equ	0xFFE
  5036                           tosl	equ	0xFFD
  5037                           pclath	equ	0xFFA
  5038                           tblptru	equ	0xFF8
  5039                           tblptrh	equ	0xFF7
  5040                           tblptrl	equ	0xFF6
  5041                           tablat	equ	0xFF5
  5042                           prodh	equ	0xFF4
  5043                           prodl	equ	0xFF3
  5044                           postinc0	equ	0xFEE
  5045                           wreg	equ	0xFE8
  5046                           indf1	equ	0xFE7
  5047                           postdec1	equ	0xFE5
  5048                           fsr1h	equ	0xFE2
  5049                           fsr1l	equ	0xFE1
  5050                           indf2	equ	0xFDF
  5051                           postinc2	equ	0xFDE
  5052                           fsr2h	equ	0xFDA
  5053                           fsr2l	equ	0xFD9
  5054                           status	equ	0xFD8
  5055                           
  5056 ;; *************** function _GroupRx *****************
  5057 ;; Defined at:
  5058 ;;		line 14 in file "MessageFunctions.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;  request         1    wreg     enum E6
  5061 ;;  data            2   80[BANK1 ] PTR unsigned char 
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  request         1  138[BANK0 ] enum E6
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  1    wreg      void 
  5066 ;; Registers used:
  5067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5073 ;;      Params:         0       0       2       0       0       0       0
  5074 ;;      Locals:         0       7       0       0       0       0       0
  5075 ;;      Temps:          0       1       0       0       0       0       0
  5076 ;;      Totals:         0       8       2       0       0       0       0
  5077 ;;Total ram usage:       10 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    8
  5080 ;; This function calls:
  5081 ;;		_AdcSingleSample
  5082 ;;		_CollectRxStatusParams
  5083 ;;		_GetIntFromUartData
  5084 ;;		_PrintRxStatus
  5085 ;;		___awtoft
  5086 ;;		___fttol
  5087 ;;		___llmod
  5088 ;;		_pow
  5089 ;; This function is called by:
  5090 ;;		_readUartByte
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           	psect	text4
  5095  0027AC                     __ptext4:
  5096                           	opt stack 0
  5097  0027AC                     _GroupRx:
  5098                           	opt stack 21
  5099                           
  5100                           ;incstack = 0
  5101                           ;GroupRx@request stored from wreg
  5102  0027AC  0100               	movlb	0	; () banked
  5103  0027AE  6FEA               	movwf	GroupRx@request& (0+255),b
  5104                           
  5105                           ;MessageFunctions.c: 16: switch (request)
  5106  0027B0  D078               	goto	l1201
  5107  0027B2                     
  5108                           ;MessageFunctions.c: 28: CollectRxStatusParams();
  5109  0027B2  EC77  F01E         	call	_CollectRxStatusParams	;wreg free
  5110                           
  5111                           ;MessageFunctions.c: 29: PrintRxStatus();
  5112  0027B6  EC8D  F00F         	call	_PrintRxStatus	;wreg free
  5113                           
  5114                           ;MessageFunctions.c: 36: break;
  5115                           
  5116                           ;MessageFunctions.c: 35: case TX_RX_SET_OPERATION_MODE:
  5117                           
  5118                           ;MessageFunctions.c: 33: break;
  5119                           
  5120                           ;MessageFunctions.c: 32: case TX_RX_SET_BIT_MODE:
  5121                           
  5122                           ;MessageFunctions.c: 30: break;
  5123  0027BA  0012               	return	
  5124  0027BC                     
  5125                           ;MessageFunctions.c: 39: retNum = GetIntFromUartData(data);
  5126  0027BC  C150  F066         	movff	GroupRx@data,GetIntFromUartData@data
  5127  0027C0  C151  F067         	movff	GroupRx@data+1,GetIntFromUartData@data+1
  5128  0027C4  EC8B  F01A         	call	_GetIntFromUartData	;wreg free
  5129  0027C8  C066  F1B6         	movff	?_GetIntFromUartData,_retNum
  5130  0027CC  C067  F1B7         	movff	?_GetIntFromUartData+1,_retNum+1
  5131  0027D0  C068  F1B8         	movff	?_GetIntFromUartData+2,_retNum+2
  5132  0027D4  C069  F1B9         	movff	?_GetIntFromUartData+3,_retNum+3
  5133                           
  5134                           ;MessageFunctions.c: 40: channelNum = data[1] - '0';
  5135  0027D8  0101               	movlb	1	; () banked
  5136  0027DA  EE20 F001          	lfsr	2,1
  5137  0027DE  5150               	movf	GroupRx@data& (0+255),w,b
  5138  0027E0  26D9               	addwf	fsr2l,f,c
  5139  0027E2  5151               	movf	(GroupRx@data+1)& (0+255),w,b
  5140  0027E4  22DA               	addwfc	fsr2h,f,c
  5141  0027E6  50DF               	movf	indf2,w,c
  5142  0027E8  0100               	movlb	0	; () banked
  5143  0027EA  6FE3               	movwf	??_GroupRx& (0+255),b
  5144  0027EC  0ED0               	movlw	208
  5145  0027EE  25E3               	addwf	??_GroupRx& (0+255),w,b
  5146  0027F0  6E3D               	movwf	_channelNum,c
  5147  0027F2  6A3E               	clrf	_channelNum+1,c
  5148  0027F4  0EFF               	movlw	255
  5149  0027F6  223E               	addwfc	_channelNum+1,f,c
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5153  0027F8  C150  FFD9         	movff	GroupRx@data,fsr2l
  5154  0027FC  C151  FFDA         	movff	GroupRx@data+1,fsr2h
  5155  002800  50DF               	movf	indf2,w,c
  5156  002802  6FE3               	movwf	??_GroupRx& (0+255),b
  5157  002804  0EFF               	movlw	255
  5158  002806  25E3               	addwf	??_GroupRx& (0+255),w,b
  5159  002808  6E20               	movwf	___awtoft@c,c
  5160  00280A  6A21               	clrf	___awtoft@c+1,c
  5161  00280C  0EFF               	movlw	255
  5162  00280E  2221               	addwfc	___awtoft@c+1,f,c
  5163  002810  EC58  F021         	call	___awtoft	;wreg free
  5164  002814  C020  F0E4         	movff	?___awtoft,_GroupRx$3993
  5165  002818  C021  F0E5         	movff	?___awtoft+1,_GroupRx$3993+1
  5166  00281C  C022  F0E6         	movff	?___awtoft+2,_GroupRx$3993+2
  5167                           
  5168                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5169  002820  C0E4  F0A5         	movff	_GroupRx$3993,pow@y
  5170  002824  C0E5  F0A6         	movff	_GroupRx$3993+1,pow@y+1
  5171  002828  C0E6  F0A7         	movff	_GroupRx$3993+2,pow@y+2
  5172  00282C  0E00               	movlw	0
  5173  00282E  0100               	movlb	0	; () banked
  5174  002830  6FA2               	movwf	pow@x& (0+255),b
  5175  002832  0E20               	movlw	32
  5176  002834  6FA3               	movwf	(pow@x+1)& (0+255),b
  5177  002836  0E41               	movlw	65
  5178  002838  6FA4               	movwf	(pow@x+2)& (0+255),b
  5179  00283A  EC13  F00E         	call	_pow	;wreg free
  5180  00283E  C0A2  F0E7         	movff	?_pow,_GroupRx$3994
  5181  002842  C0A3  F0E8         	movff	?_pow+1,_GroupRx$3994+1
  5182  002846  C0A4  F0E9         	movff	?_pow+2,_GroupRx$3994+2
  5183                           
  5184                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5185  00284A  C1B6  F0B3         	movff	_retNum,___llmod@dividend
  5186  00284E  C1B7  F0B4         	movff	_retNum+1,___llmod@dividend+1
  5187  002852  C1B8  F0B5         	movff	_retNum+2,___llmod@dividend+2
  5188  002856  C1B9  F0B6         	movff	_retNum+3,___llmod@dividend+3
  5189  00285A  C0E7  F079         	movff	_GroupRx$3994,___fttol@f1
  5190  00285E  C0E8  F07A         	movff	_GroupRx$3994+1,___fttol@f1+1
  5191  002862  C0E9  F07B         	movff	_GroupRx$3994+2,___fttol@f1+2
  5192  002866  ECF1  F014         	call	___fttol	;wreg free
  5193  00286A  0100               	movlb	0	; () banked
  5194  00286C  C079  F0B7         	movff	?___fttol,___llmod@divisor
  5195  002870  C07A  F0B8         	movff	?___fttol+1,___llmod@divisor+1
  5196  002874  0E00               	movlw	0
  5197  002876  BFB8               	btfsc	(___llmod@divisor+1)& (0+255),7,b
  5198  002878  0EFF               	movlw	-1
  5199  00287A  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  5200  00287C  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  5201  00287E  EC4D  F01D         	call	___llmod	;wreg free
  5202  002882  C0B3  F1C4         	movff	?___llmod,_numSamples
  5203  002886  C0B4  F1C5         	movff	?___llmod+1,_numSamples+1
  5204                           
  5205                           ;MessageFunctions.c: 42: AdcSingleSample(RX_TYPE, channelNum, numSamples);
  5206  00288A  C03D  F01F         	movff	_channelNum,AdcSingleSample@chType
  5207  00288E  C1C4  F020         	movff	_numSamples,AdcSingleSample@numSamples
  5208  002892  C1C5  F021         	movff	_numSamples+1,AdcSingleSample@numSamples+1
  5209  002896  6A22               	clrf	AdcSingleSample@numSamples+2,c
  5210  002898  6A23               	clrf	AdcSingleSample@numSamples+3,c
  5211  00289A  0E01               	movlw	1
  5212  00289C  EC64  F014         	call	_AdcSingleSample
  5213                           
  5214                           ;MessageFunctions.c: 51: }
  5215                           
  5216                           ;MessageFunctions.c: 50: break;
  5217                           
  5218                           ;MessageFunctions.c: 49: default:
  5219                           
  5220                           ;MessageFunctions.c: 47: break;
  5221  0028A0  0012               	return	
  5222  0028A2                     l1201:
  5223  0028A2  0100               	movlb	0	; () banked
  5224  0028A4  51EA               	movf	GroupRx@request& (0+255),w,b
  5225                           
  5226                           ; Switch size 1, requested type "space"
  5227                           ; Number of cases is 6, Range of values is 18 to 40
  5228                           ; switch strategies available:
  5229                           ; Name         Instructions Cycles
  5230                           ; simple_byte           19    10 (average)
  5231                           ;	Chosen strategy is simple_byte
  5232  0028A6  0A12               	xorlw	18	; case 18
  5233  0028A8  B4D8               	btfsc	status,2,c
  5234  0028AA  0012               	return	
  5235  0028AC  0A04               	xorlw	4	; case 22
  5236  0028AE  B4D8               	btfsc	status,2,c
  5237  0028B0  0012               	return	
  5238  0028B2  0A0F               	xorlw	15	; case 25
  5239  0028B4  B4D8               	btfsc	status,2,c
  5240  0028B6  0012               	return	
  5241  0028B8  0A38               	xorlw	56	; case 33
  5242  0028BA  B4D8               	btfsc	status,2,c
  5243  0028BC  D77A               	goto	l1205
  5244  0028BE  0A02               	xorlw	2	; case 35
  5245  0028C0  B4D8               	btfsc	status,2,c
  5246  0028C2  D77C               	goto	l1208
  5247  0028C4  0A0B               	xorlw	11	; case 40
  5248  0028C6  0012               	return	
  5249  0028C8                     __end_of_GroupRx:
  5250                           	opt stack 0
  5251                           tosu	equ	0xFFF
  5252                           tosh	equ	0xFFE
  5253                           tosl	equ	0xFFD
  5254                           pclath	equ	0xFFA
  5255                           tblptru	equ	0xFF8
  5256                           tblptrh	equ	0xFF7
  5257                           tblptrl	equ	0xFF6
  5258                           tablat	equ	0xFF5
  5259                           prodh	equ	0xFF4
  5260                           prodl	equ	0xFF3
  5261                           postinc0	equ	0xFEE
  5262                           wreg	equ	0xFE8
  5263                           indf1	equ	0xFE7
  5264                           postdec1	equ	0xFE5
  5265                           fsr1h	equ	0xFE2
  5266                           fsr1l	equ	0xFE1
  5267                           indf2	equ	0xFDF
  5268                           postinc2	equ	0xFDE
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           
  5273 ;; *************** function _GroupTx *****************
  5274 ;; Defined at:
  5275 ;;		line 54 in file "MessageFunctions.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;  request         1    wreg     enum E6
  5278 ;;  data            2   80[BANK1 ] PTR unsigned char 
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;  request         1  138[BANK0 ] enum E6
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      void 
  5283 ;; Registers used:
  5284 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5290 ;;      Params:         0       0       2       0       0       0       0
  5291 ;;      Locals:         0       7       0       0       0       0       0
  5292 ;;      Temps:          0       1       0       0       0       0       0
  5293 ;;      Totals:         0       8       2       0       0       0       0
  5294 ;;Total ram usage:       10 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    8
  5297 ;; This function calls:
  5298 ;;		_AdcSingleSample
  5299 ;;		_CollectTxStatusParams
  5300 ;;		_GetIntFromUartData
  5301 ;;		_PrintTxStatus
  5302 ;;		___awtoft
  5303 ;;		___fttol
  5304 ;;		___llmod
  5305 ;;		_pow
  5306 ;; This function is called by:
  5307 ;;		_readUartByte
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text5
  5312  002436                     __ptext5:
  5313                           	opt stack 0
  5314  002436                     _GroupTx:
  5315                           	opt stack 21
  5316                           
  5317                           ;incstack = 0
  5318                           ;GroupTx@request stored from wreg
  5319  002436  0100               	movlb	0	; () banked
  5320  002438  6FEA               	movwf	GroupTx@request& (0+255),b
  5321                           
  5322                           ;MessageFunctions.c: 56: switch (request)
  5323  00243A  D078               	goto	l1213
  5324  00243C                     
  5325                           ;MessageFunctions.c: 67: CollectTxStatusParams();
  5326  00243C  EC81  F01D         	call	_CollectTxStatusParams	;wreg free
  5327                           
  5328                           ;MessageFunctions.c: 68: PrintTxStatus();
  5329  002440  ECD3  F00E         	call	_PrintTxStatus	;wreg free
  5330                           
  5331                           ;MessageFunctions.c: 81: break;
  5332                           
  5333                           ;MessageFunctions.c: 80: case RX_SET_COMRESSION_RANGE:
  5334                           
  5335                           ;MessageFunctions.c: 78: break;
  5336                           
  5337                           ;MessageFunctions.c: 77: case RX_SET_COMRESSION_MODE:
  5338                           
  5339                           ;MessageFunctions.c: 75: break;
  5340                           
  5341                           ;MessageFunctions.c: 74: case TX_RX_SET_OPERATION_MODE:
  5342                           
  5343                           ;MessageFunctions.c: 72: break;
  5344                           
  5345                           ;MessageFunctions.c: 71: case TX_RX_SET_BIT_MODE:
  5346                           
  5347                           ;MessageFunctions.c: 69: break;
  5348  002444  0012               	return	
  5349  002446                     
  5350                           ;MessageFunctions.c: 84: retNum = GetIntFromUartData(data);
  5351  002446  C150  F066         	movff	GroupTx@data,GetIntFromUartData@data
  5352  00244A  C151  F067         	movff	GroupTx@data+1,GetIntFromUartData@data+1
  5353  00244E  EC8B  F01A         	call	_GetIntFromUartData	;wreg free
  5354  002452  C066  F1B6         	movff	?_GetIntFromUartData,_retNum
  5355  002456  C067  F1B7         	movff	?_GetIntFromUartData+1,_retNum+1
  5356  00245A  C068  F1B8         	movff	?_GetIntFromUartData+2,_retNum+2
  5357  00245E  C069  F1B9         	movff	?_GetIntFromUartData+3,_retNum+3
  5358                           
  5359                           ;MessageFunctions.c: 85: channelNum = data[1] - '0';
  5360  002462  0101               	movlb	1	; () banked
  5361  002464  EE20 F001          	lfsr	2,1
  5362  002468  5150               	movf	GroupTx@data& (0+255),w,b
  5363  00246A  26D9               	addwf	fsr2l,f,c
  5364  00246C  5151               	movf	(GroupTx@data+1)& (0+255),w,b
  5365  00246E  22DA               	addwfc	fsr2h,f,c
  5366  002470  50DF               	movf	indf2,w,c
  5367  002472  0100               	movlb	0	; () banked
  5368  002474  6FE3               	movwf	??_GroupTx& (0+255),b
  5369  002476  0ED0               	movlw	208
  5370  002478  25E3               	addwf	??_GroupTx& (0+255),w,b
  5371  00247A  6E3D               	movwf	_channelNum,c
  5372  00247C  6A3E               	clrf	_channelNum+1,c
  5373  00247E  0EFF               	movlw	255
  5374  002480  223E               	addwfc	_channelNum+1,f,c
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5378  002482  C150  FFD9         	movff	GroupTx@data,fsr2l
  5379  002486  C151  FFDA         	movff	GroupTx@data+1,fsr2h
  5380  00248A  50DF               	movf	indf2,w,c
  5381  00248C  6FE3               	movwf	??_GroupTx& (0+255),b
  5382  00248E  0EFF               	movlw	255
  5383  002490  25E3               	addwf	??_GroupTx& (0+255),w,b
  5384  002492  6E20               	movwf	___awtoft@c,c
  5385  002494  6A21               	clrf	___awtoft@c+1,c
  5386  002496  0EFF               	movlw	255
  5387  002498  2221               	addwfc	___awtoft@c+1,f,c
  5388  00249A  EC58  F021         	call	___awtoft	;wreg free
  5389  00249E  C020  F0E4         	movff	?___awtoft,_GroupTx$3995
  5390  0024A2  C021  F0E5         	movff	?___awtoft+1,_GroupTx$3995+1
  5391  0024A6  C022  F0E6         	movff	?___awtoft+2,_GroupTx$3995+2
  5392                           
  5393                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5394  0024AA  C0E4  F0A5         	movff	_GroupTx$3995,pow@y
  5395  0024AE  C0E5  F0A6         	movff	_GroupTx$3995+1,pow@y+1
  5396  0024B2  C0E6  F0A7         	movff	_GroupTx$3995+2,pow@y+2
  5397  0024B6  0E00               	movlw	0
  5398  0024B8  0100               	movlb	0	; () banked
  5399  0024BA  6FA2               	movwf	pow@x& (0+255),b
  5400  0024BC  0E20               	movlw	32
  5401  0024BE  6FA3               	movwf	(pow@x+1)& (0+255),b
  5402  0024C0  0E41               	movlw	65
  5403  0024C2  6FA4               	movwf	(pow@x+2)& (0+255),b
  5404  0024C4  EC13  F00E         	call	_pow	;wreg free
  5405  0024C8  C0A2  F0E7         	movff	?_pow,_GroupTx$3996
  5406  0024CC  C0A3  F0E8         	movff	?_pow+1,_GroupTx$3996+1
  5407  0024D0  C0A4  F0E9         	movff	?_pow+2,_GroupTx$3996+2
  5408                           
  5409                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5410  0024D4  C1B6  F0B3         	movff	_retNum,___llmod@dividend
  5411  0024D8  C1B7  F0B4         	movff	_retNum+1,___llmod@dividend+1
  5412  0024DC  C1B8  F0B5         	movff	_retNum+2,___llmod@dividend+2
  5413  0024E0  C1B9  F0B6         	movff	_retNum+3,___llmod@dividend+3
  5414  0024E4  C0E7  F079         	movff	_GroupTx$3996,___fttol@f1
  5415  0024E8  C0E8  F07A         	movff	_GroupTx$3996+1,___fttol@f1+1
  5416  0024EC  C0E9  F07B         	movff	_GroupTx$3996+2,___fttol@f1+2
  5417  0024F0  ECF1  F014         	call	___fttol	;wreg free
  5418  0024F4  0100               	movlb	0	; () banked
  5419  0024F6  C079  F0B7         	movff	?___fttol,___llmod@divisor
  5420  0024FA  C07A  F0B8         	movff	?___fttol+1,___llmod@divisor+1
  5421  0024FE  0E00               	movlw	0
  5422  002500  BFB8               	btfsc	(___llmod@divisor+1)& (0+255),7,b
  5423  002502  0EFF               	movlw	-1
  5424  002504  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  5425  002506  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  5426  002508  EC4D  F01D         	call	___llmod	;wreg free
  5427  00250C  C0B3  F1C4         	movff	?___llmod,_numSamples
  5428  002510  C0B4  F1C5         	movff	?___llmod+1,_numSamples+1
  5429                           
  5430                           ;MessageFunctions.c: 87: AdcSingleSample(TX_TYPE, channelNum, numSamples);
  5431  002514  C03D  F01F         	movff	_channelNum,AdcSingleSample@chType
  5432  002518  C1C4  F020         	movff	_numSamples,AdcSingleSample@numSamples
  5433  00251C  C1C5  F021         	movff	_numSamples+1,AdcSingleSample@numSamples+1
  5434  002520  6A22               	clrf	AdcSingleSample@numSamples+2,c
  5435  002522  6A23               	clrf	AdcSingleSample@numSamples+3,c
  5436  002524  0E00               	movlw	0
  5437  002526  EC64  F014         	call	_AdcSingleSample
  5438                           
  5439                           ;MessageFunctions.c: 93: }
  5440                           
  5441                           ;MessageFunctions.c: 92: break;
  5442                           
  5443                           ;MessageFunctions.c: 91: default:
  5444                           
  5445                           ;MessageFunctions.c: 89: break;
  5446  00252A  0012               	return	
  5447  00252C                     l1213:
  5448  00252C  0100               	movlb	0	; () banked
  5449  00252E  51EA               	movf	GroupTx@request& (0+255),w,b
  5450                           
  5451                           ; Switch size 1, requested type "space"
  5452                           ; Number of cases is 8, Range of values is 18 to 101
  5453                           ; switch strategies available:
  5454                           ; Name         Instructions Cycles
  5455                           ; simple_byte           25    13 (average)
  5456                           ;	Chosen strategy is simple_byte
  5457  002530  0A12               	xorlw	18	; case 18
  5458  002532  B4D8               	btfsc	status,2,c
  5459  002534  0012               	return	
  5460  002536  0A04               	xorlw	4	; case 22
  5461  002538  B4D8               	btfsc	status,2,c
  5462  00253A  0012               	return	
  5463  00253C  0A0F               	xorlw	15	; case 25
  5464  00253E  B4D8               	btfsc	status,2,c
  5465  002540  0012               	return	
  5466  002542  0A38               	xorlw	56	; case 33
  5467  002544  B4D8               	btfsc	status,2,c
  5468  002546  D77A               	goto	l1217
  5469  002548  0A02               	xorlw	2	; case 35
  5470  00254A  B4D8               	btfsc	status,2,c
  5471  00254C  D77C               	goto	l1222
  5472  00254E  0A0B               	xorlw	11	; case 40
  5473  002550  B4D8               	btfsc	status,2,c
  5474  002552  0012               	return	
  5475  002554  0A4B               	xorlw	75	; case 99
  5476  002556  B4D8               	btfsc	status,2,c
  5477  002558  0012               	return	
  5478  00255A  0A06               	xorlw	6	; case 101
  5479  00255C  0012               	return	
  5480  00255E                     __end_of_GroupTx:
  5481                           	opt stack 0
  5482                           tosu	equ	0xFFF
  5483                           tosh	equ	0xFFE
  5484                           tosl	equ	0xFFD
  5485                           pclath	equ	0xFFA
  5486                           tblptru	equ	0xFF8
  5487                           tblptrh	equ	0xFF7
  5488                           tblptrl	equ	0xFF6
  5489                           tablat	equ	0xFF5
  5490                           prodh	equ	0xFF4
  5491                           prodl	equ	0xFF3
  5492                           postinc0	equ	0xFEE
  5493                           wreg	equ	0xFE8
  5494                           indf1	equ	0xFE7
  5495                           postdec1	equ	0xFE5
  5496                           fsr1h	equ	0xFE2
  5497                           fsr1l	equ	0xFE1
  5498                           indf2	equ	0xFDF
  5499                           postinc2	equ	0xFDE
  5500                           fsr2h	equ	0xFDA
  5501                           fsr2l	equ	0xFD9
  5502                           status	equ	0xFD8
  5503                           
  5504 ;; *************** function _PrintTxStatus *****************
  5505 ;; Defined at:
  5506 ;;		line 234 in file "SystemStatus.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;		None
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;  dest           80    0[BANK1 ] unsigned char [80]
  5511 ;; Return value:  Size  Location     Type
  5512 ;;                  1    wreg      void 
  5513 ;; Registers used:
  5514 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5520 ;;      Params:         0       0       0       0       0       0       0
  5521 ;;      Locals:         0       0      80       0       0       0       0
  5522 ;;      Temps:          0       0       0       0       0       0       0
  5523 ;;      Totals:         0       0      80       0       0       0       0
  5524 ;;Total ram usage:       80 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    7
  5527 ;; This function calls:
  5528 ;;		_UART_Write_Text
  5529 ;;		_sprintf
  5530 ;; This function is called by:
  5531 ;;		_GroupTx
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           	psect	text6
  5536  001DA6                     __ptext6:
  5537                           	opt stack 0
  5538  001DA6                     _PrintTxStatus:
  5539                           	opt stack 21
  5540                           
  5541                           ;SystemStatus.c: 236: char dest[80];
  5542                           ;SystemStatus.c: 237: sprintf(dest, "*******************\n\r");
  5543                           
  5544                           ;incstack = 0
  5545  001DA6  0E00               	movlw	low PrintTxStatus@dest
  5546  001DA8  0100               	movlb	0	; () banked
  5547  001DAA  6FBC               	movwf	sprintf@sp& (0+255),b
  5548  001DAC  0E01               	movlw	high PrintTxStatus@dest
  5549  001DAE  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5550  001DB0  0EFA               	movlw	low STR_55
  5551  001DB2  6FBE               	movwf	sprintf@f& (0+255),b
  5552  001DB4  0E7E               	movlw	high STR_55
  5553  001DB6  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5554  001DB8  EC70  F000         	call	_sprintf	;wreg free
  5555                           
  5556                           ;SystemStatus.c: 238: UART_Write_Text(dest);
  5557  001DBC  0E00               	movlw	low PrintTxStatus@dest
  5558  001DBE  6E19               	movwf	UART_Write_Text@text,c
  5559  001DC0  0E01               	movlw	high PrintTxStatus@dest
  5560  001DC2  6E1A               	movwf	UART_Write_Text@text+1,c
  5561  001DC4  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5562                           
  5563                           ;SystemStatus.c: 239: sprintf(dest, "TX SYNTH (PLL) Lock indication %d\n\r",txStatistics
      +                          .Synt);
  5564  001DC8  0E00               	movlw	low PrintTxStatus@dest
  5565  001DCA  0100               	movlb	0	; () banked
  5566  001DCC  6FBC               	movwf	sprintf@sp& (0+255),b
  5567  001DCE  0E01               	movlw	high PrintTxStatus@dest
  5568  001DD0  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5569  001DD2  0E45               	movlw	low STR_65
  5570  001DD4  6FBE               	movwf	sprintf@f& (0+255),b
  5571  001DD6  0E7D               	movlw	high STR_65
  5572  001DD8  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5573  001DDA  C187  F0C0         	movff	_txStatistics,?_sprintf+4	;volatile
  5574  001DDE  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5575  001DE0  EC70  F000         	call	_sprintf	;wreg free
  5576                           
  5577                           ;SystemStatus.c: 240: UART_Write_Text(dest);
  5578  001DE4  0E00               	movlw	low PrintTxStatus@dest
  5579  001DE6  6E19               	movwf	UART_Write_Text@text,c
  5580  001DE8  0E01               	movlw	high PrintTxStatus@dest
  5581  001DEA  6E1A               	movwf	UART_Write_Text@text+1,c
  5582  001DEC  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5583                           
  5584                           ;SystemStatus.c: 241: sprintf(dest, "Device Temperature %f\n\r",txStatistics.DeviceTempe
      +                          rature);
  5585  001DF0  0E00               	movlw	low PrintTxStatus@dest
  5586  001DF2  0100               	movlb	0	; () banked
  5587  001DF4  6FBC               	movwf	sprintf@sp& (0+255),b
  5588  001DF6  0E01               	movlw	high PrintTxStatus@dest
  5589  001DF8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5590  001DFA  0E84               	movlw	low STR_57
  5591  001DFC  6FBE               	movwf	sprintf@f& (0+255),b
  5592  001DFE  0E7E               	movlw	high STR_57
  5593  001E00  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5594  001E02  C18D  F0C0         	movff	_txStatistics+6,?_sprintf+4	;volatile
  5595  001E06  C18E  F0C1         	movff	_txStatistics+7,?_sprintf+5	;volatile
  5596  001E0A  C18F  F0C2         	movff	_txStatistics+8,?_sprintf+6	;volatile
  5597  001E0E  EC70  F000         	call	_sprintf	;wreg free
  5598                           
  5599                           ;SystemStatus.c: 242: UART_Write_Text(dest);
  5600  001E12  0E00               	movlw	low PrintTxStatus@dest
  5601  001E14  6E19               	movwf	UART_Write_Text@text,c
  5602  001E16  0E01               	movlw	high PrintTxStatus@dest
  5603  001E18  6E1A               	movwf	UART_Write_Text@text+1,c
  5604  001E1A  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5605                           
  5606                           ;SystemStatus.c: 243: sprintf(dest, "Input power status 0: OFF 1: ON%d\n\r",txStatistics
      +                          .InputPowerStatus);
  5607  001E1E  0E00               	movlw	low PrintTxStatus@dest
  5608  001E20  0100               	movlb	0	; () banked
  5609  001E22  6FBC               	movwf	sprintf@sp& (0+255),b
  5610  001E24  0E01               	movlw	high PrintTxStatus@dest
  5611  001E26  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5612  001E28  0E69               	movlw	low STR_58
  5613  001E2A  6FBE               	movwf	sprintf@f& (0+255),b
  5614  001E2C  0E7D               	movlw	high STR_58
  5615  001E2E  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5616  001E30  C190  F0C0         	movff	_txStatistics+9,?_sprintf+4	;volatile
  5617  001E34  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5618  001E36  EC70  F000         	call	_sprintf	;wreg free
  5619                           
  5620                           ;SystemStatus.c: 244: UART_Write_Text(dest);
  5621  001E3A  0E00               	movlw	low PrintTxStatus@dest
  5622  001E3C  6E19               	movwf	UART_Write_Text@text,c
  5623  001E3E  0E01               	movlw	high PrintTxStatus@dest
  5624  001E40  6E1A               	movwf	UART_Write_Text@text+1,c
  5625  001E42  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5626                           
  5627                           ;SystemStatus.c: 245: sprintf(dest, "TX Frequency in MHz%f\n\r",txStatistics.Freq);
  5628  001E46  0E00               	movlw	low PrintTxStatus@dest
  5629  001E48  0100               	movlb	0	; () banked
  5630  001E4A  6FBC               	movwf	sprintf@sp& (0+255),b
  5631  001E4C  0E01               	movlw	high PrintTxStatus@dest
  5632  001E4E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5633  001E50  0EB4               	movlw	low STR_68
  5634  001E52  6FBE               	movwf	sprintf@f& (0+255),b
  5635  001E54  0E7E               	movlw	high STR_68
  5636  001E56  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5637  001E58  C191  F0C0         	movff	_txStatistics+10,?_sprintf+4	;volatile
  5638  001E5C  C192  F0C1         	movff	_txStatistics+11,?_sprintf+5	;volatile
  5639  001E60  C193  F0C2         	movff	_txStatistics+12,?_sprintf+6	;volatile
  5640  001E64  EC70  F000         	call	_sprintf	;wreg free
  5641                           
  5642                           ;SystemStatus.c: 246: UART_Write_Text(dest);
  5643  001E68  0E00               	movlw	low PrintTxStatus@dest
  5644  001E6A  6E19               	movwf	UART_Write_Text@text,c
  5645  001E6C  0E01               	movlw	high PrintTxStatus@dest
  5646  001E6E  6E1A               	movwf	UART_Write_Text@text+1,c
  5647  001E70  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5648                           
  5649                           ;SystemStatus.c: 247: sprintf(dest, "RSSI %d\n\r",txStatistics.RSSI);
  5650  001E74  0E00               	movlw	low PrintTxStatus@dest
  5651  001E76  0100               	movlb	0	; () banked
  5652  001E78  6FBC               	movwf	sprintf@sp& (0+255),b
  5653  001E7A  0E01               	movlw	high PrintTxStatus@dest
  5654  001E7C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5655  001E7E  0EC6               	movlw	low STR_60
  5656  001E80  6FBE               	movwf	sprintf@f& (0+255),b
  5657  001E82  0E7F               	movlw	high STR_60
  5658  001E84  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5659  001E86  0101               	movlb	1	; () banked
  5660  001E88  5194               	movf	(_txStatistics+13)& (0+255),w,b	;volatile
  5661  001E8A  0100               	movlb	0	; () banked
  5662  001E8C  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  5663  001E8E  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5664  001E90  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  5665  001E92  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  5666  001E94  EC70  F000         	call	_sprintf	;wreg free
  5667                           
  5668                           ;SystemStatus.c: 248: UART_Write_Text(dest);
  5669  001E98  0E00               	movlw	low PrintTxStatus@dest
  5670  001E9A  6E19               	movwf	UART_Write_Text@text,c
  5671  001E9C  0E01               	movlw	high PrintTxStatus@dest
  5672  001E9E  6E1A               	movwf	UART_Write_Text@text+1,c
  5673  001EA0  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5674                           
  5675                           ;SystemStatus.c: 249: sprintf(dest, "Light 0: OFF 1: ON%d\n\r",txStatistics.Light);
  5676  001EA4  0E00               	movlw	low PrintTxStatus@dest
  5677  001EA6  0100               	movlb	0	; () banked
  5678  001EA8  6FBC               	movwf	sprintf@sp& (0+255),b
  5679  001EAA  0E01               	movlw	high PrintTxStatus@dest
  5680  001EAC  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5681  001EAE  0EE3               	movlw	low STR_61
  5682  001EB0  6FBE               	movwf	sprintf@f& (0+255),b
  5683  001EB2  0E7E               	movlw	high STR_61
  5684  001EB4  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5685  001EB6  C198  F0C0         	movff	_txStatistics+17,?_sprintf+4	;volatile
  5686  001EBA  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5687  001EBC  EC70  F000         	call	_sprintf	;wreg free
  5688                           
  5689                           ;SystemStatus.c: 250: UART_Write_Text(dest);
  5690  001EC0  0E00               	movlw	low PrintTxStatus@dest
  5691  001EC2  6E19               	movwf	UART_Write_Text@text,c
  5692  001EC4  0E01               	movlw	high PrintTxStatus@dest
  5693  001EC6  6E1A               	movwf	UART_Write_Text@text+1,c
  5694  001EC8  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5695                           
  5696                           ;SystemStatus.c: 253: sprintf(dest, "UNIT DC %d\n\r",txStatistics.UnitDc);
  5697  001ECC  0E00               	movlw	low PrintTxStatus@dest
  5698  001ECE  0100               	movlb	0	; () banked
  5699  001ED0  6FBC               	movwf	sprintf@sp& (0+255),b
  5700  001ED2  0E01               	movlw	high PrintTxStatus@dest
  5701  001ED4  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5702  001ED6  0E95               	movlw	low STR_62
  5703  001ED8  6FBE               	movwf	sprintf@f& (0+255),b
  5704  001EDA  0E7F               	movlw	high STR_62
  5705  001EDC  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5706  001EDE  C199  F0C0         	movff	_txStatistics+18,?_sprintf+4	;volatile
  5707  001EE2  C19A  F0C1         	movff	_txStatistics+19,?_sprintf+5	;volatile
  5708  001EE6  EC70  F000         	call	_sprintf	;wreg free
  5709                           
  5710                           ;SystemStatus.c: 254: UART_Write_Text(dest);
  5711  001EEA  0E00               	movlw	low PrintTxStatus@dest
  5712  001EEC  6E19               	movwf	UART_Write_Text@text,c
  5713  001EEE  0E01               	movlw	high PrintTxStatus@dest
  5714  001EF0  6E1A               	movwf	UART_Write_Text@text+1,c
  5715  001EF2  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5716                           
  5717                           ;SystemStatus.c: 259: sprintf(dest, "*******************\n\r");
  5718  001EF6  0E00               	movlw	low PrintTxStatus@dest
  5719  001EF8  0100               	movlb	0	; () banked
  5720  001EFA  6FBC               	movwf	sprintf@sp& (0+255),b
  5721  001EFC  0E01               	movlw	high PrintTxStatus@dest
  5722  001EFE  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5723  001F00  0EFA               	movlw	low STR_55
  5724  001F02  6FBE               	movwf	sprintf@f& (0+255),b
  5725  001F04  0E7E               	movlw	high STR_55
  5726  001F06  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5727  001F08  EC70  F000         	call	_sprintf	;wreg free
  5728                           
  5729                           ;SystemStatus.c: 260: UART_Write_Text(dest);
  5730  001F0C  0E00               	movlw	low PrintTxStatus@dest
  5731  001F0E  6E19               	movwf	UART_Write_Text@text,c
  5732  001F10  0E01               	movlw	high PrintTxStatus@dest
  5733  001F12  6E1A               	movwf	UART_Write_Text@text+1,c
  5734  001F14  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5735  001F18  0012               	return		;funcret
  5736  001F1A                     __end_of_PrintTxStatus:
  5737                           	opt stack 0
  5738                           tosu	equ	0xFFF
  5739                           tosh	equ	0xFFE
  5740                           tosl	equ	0xFFD
  5741                           pclath	equ	0xFFA
  5742                           tblptru	equ	0xFF8
  5743                           tblptrh	equ	0xFF7
  5744                           tblptrl	equ	0xFF6
  5745                           tablat	equ	0xFF5
  5746                           prodh	equ	0xFF4
  5747                           prodl	equ	0xFF3
  5748                           postinc0	equ	0xFEE
  5749                           wreg	equ	0xFE8
  5750                           indf1	equ	0xFE7
  5751                           postdec1	equ	0xFE5
  5752                           fsr1h	equ	0xFE2
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           fsr2h	equ	0xFDA
  5757                           fsr2l	equ	0xFD9
  5758                           status	equ	0xFD8
  5759                           
  5760 ;; *************** function _CollectTxStatusParams *****************
  5761 ;; Defined at:
  5762 ;;		line 189 in file "SystemStatus.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;		None
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;		None
  5767 ;; Return value:  Size  Location     Type
  5768 ;;                  1    wreg      void 
  5769 ;; Registers used:
  5770 ;;		wreg, status,2, status,0, cstack
  5771 ;; Tracked objects:
  5772 ;;		On entry : 0/0
  5773 ;;		On exit  : 0/0
  5774 ;;		Unchanged: 0/0
  5775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5776 ;;      Params:         0       0       0       0       0       0       0
  5777 ;;      Locals:         0       0       0       0       0       0       0
  5778 ;;      Temps:          0       0       0       0       0       0       0
  5779 ;;      Totals:         0       0       0       0       0       0       0
  5780 ;;Total ram usage:        0 bytes
  5781 ;; Hardware stack levels used:    1
  5782 ;; Hardware stack levels required when called:    5
  5783 ;; This function calls:
  5784 ;;		___lltoft
  5785 ;;		___lwtoft
  5786 ;; This function is called by:
  5787 ;;		_GroupTx
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text7
  5792  003B02                     __ptext7:
  5793                           	opt stack 0
  5794  003B02                     _CollectTxStatusParams:
  5795                           	opt stack 23
  5796                           
  5797                           ;SystemStatus.c: 191: txStatistics.Synt = txFreq;
  5798                           
  5799                           ;incstack = 0
  5800  003B02  C1BA  F187         	movff	_txFreq,_txStatistics	;volatile
  5801                           
  5802                           ;SystemStatus.c: 192: txStatistics.DeviceTemperature = lastAdcTemp;
  5803  003B06  C03F  F020         	movff	_lastAdcTemp,___lwtoft@c	;volatile
  5804  003B0A  C040  F021         	movff	_lastAdcTemp+1,___lwtoft@c+1	;volatile
  5805  003B0E  EC61  F022         	call	___lwtoft	;wreg free
  5806  003B12  C020  F18D         	movff	?___lwtoft,_txStatistics+6	;volatile
  5807  003B16  C021  F18E         	movff	?___lwtoft+1,_txStatistics+7	;volatile
  5808  003B1A  C022  F18F         	movff	?___lwtoft+2,_txStatistics+8	;volatile
  5809                           
  5810                           ;SystemStatus.c: 193: txStatistics.InputPowerStatus = PORTDbits.RD6;
  5811  003B1E  0E00               	movlw	0
  5812  003B20  BC83               	btfsc	3971,6,c	;volatile
  5813  003B22  0E01               	movlw	1
  5814  003B24  0101               	movlb	1	; () banked
  5815  003B26  6F90               	movwf	(_txStatistics+9)& (0+255),b	;volatile
  5816                           
  5817                           ; BSR set to: 1
  5818                           ;SystemStatus.c: 194: txStatistics.Freq = txFreq;
  5819  003B28  C1BA  F020         	movff	_txFreq,___lltoft@c	;volatile
  5820  003B2C  C1BB  F021         	movff	_txFreq+1,___lltoft@c+1	;volatile
  5821  003B30  C1BC  F022         	movff	_txFreq+2,___lltoft@c+2	;volatile
  5822  003B34  C1BD  F023         	movff	_txFreq+3,___lltoft@c+3	;volatile
  5823  003B38  EC03  F01F         	call	___lltoft	;wreg free
  5824  003B3C  C020  F191         	movff	?___lltoft,_txStatistics+10	;volatile
  5825  003B40  C021  F192         	movff	?___lltoft+1,_txStatistics+11	;volatile
  5826  003B44  C022  F193         	movff	?___lltoft+2,_txStatistics+12	;volatile
  5827                           
  5828                           ;SystemStatus.c: 195: txStatistics.RSSI = lastAdcFfwrRSSI;
  5829  003B48  C1CC  F194         	movff	_lastAdcFfwrRSSI,_txStatistics+13	;volatile
  5830                           
  5831                           ;SystemStatus.c: 196: txStatistics.Light = PORTBbits.RB3;
  5832  003B4C  0E00               	movlw	0
  5833  003B4E  B681               	btfsc	3969,3,c	;volatile
  5834  003B50  0E01               	movlw	1
  5835  003B52  0101               	movlb	1	; () banked
  5836  003B54  6F98               	movwf	(_txStatistics+17)& (0+255),b	;volatile
  5837                           
  5838                           ; BSR set to: 1
  5839                           ;SystemStatus.c: 198: txStatistics.UnitDc = 1234;
  5840  003B56  0E04               	movlw	4
  5841  003B58  6F9A               	movwf	(_txStatistics+19)& (0+255),b	;volatile
  5842  003B5A  0ED2               	movlw	210
  5843  003B5C  6F99               	movwf	(_txStatistics+18)& (0+255),b	;volatile
  5844                           
  5845                           ; BSR set to: 1
  5846                           ;SystemStatus.c: 202: txStatistics.AdcValues.ADC0 = 0x7;
  5847  003B5E  0E00               	movlw	0
  5848  003B60  6F8A               	movwf	(_txStatistics+3)& (0+255),b	;volatile
  5849  003B62  0E07               	movlw	7
  5850  003B64  6F89               	movwf	(_txStatistics+2)& (0+255),b	;volatile
  5851                           
  5852                           ; BSR set to: 1
  5853  003B66  0012               	return		;funcret
  5854  003B68                     __end_of_CollectTxStatusParams:
  5855                           	opt stack 0
  5856                           tosu	equ	0xFFF
  5857                           tosh	equ	0xFFE
  5858                           tosl	equ	0xFFD
  5859                           pclath	equ	0xFFA
  5860                           tblptru	equ	0xFF8
  5861                           tblptrh	equ	0xFF7
  5862                           tblptrl	equ	0xFF6
  5863                           tablat	equ	0xFF5
  5864                           prodh	equ	0xFF4
  5865                           prodl	equ	0xFF3
  5866                           postinc0	equ	0xFEE
  5867                           wreg	equ	0xFE8
  5868                           indf1	equ	0xFE7
  5869                           postdec1	equ	0xFE5
  5870                           fsr1h	equ	0xFE2
  5871                           fsr1l	equ	0xFE1
  5872                           indf2	equ	0xFDF
  5873                           postinc2	equ	0xFDE
  5874                           fsr2h	equ	0xFDA
  5875                           fsr2l	equ	0xFD9
  5876                           status	equ	0xFD8
  5877                           
  5878 ;; *************** function _PrintRxStatus *****************
  5879 ;; Defined at:
  5880 ;;		line 205 in file "SystemStatus.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;		None
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;  dest           80    0[BANK1 ] unsigned char [80]
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  1    wreg      void 
  5887 ;; Registers used:
  5888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5894 ;;      Params:         0       0       0       0       0       0       0
  5895 ;;      Locals:         0       0      80       0       0       0       0
  5896 ;;      Temps:          0       0       0       0       0       0       0
  5897 ;;      Totals:         0       0      80       0       0       0       0
  5898 ;;Total ram usage:       80 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    7
  5901 ;; This function calls:
  5902 ;;		_UART_Write_Text
  5903 ;;		_sprintf
  5904 ;; This function is called by:
  5905 ;;		_GroupRx
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           	psect	text8
  5910  001F1A                     __ptext8:
  5911                           	opt stack 0
  5912  001F1A                     _PrintRxStatus:
  5913                           	opt stack 21
  5914                           
  5915                           ;SystemStatus.c: 207: char dest[80];
  5916                           ;SystemStatus.c: 208: sprintf(dest, "*******************\n\r");
  5917                           
  5918                           ; BSR set to: 1
  5919                           ;incstack = 0
  5920  001F1A  0E00               	movlw	low PrintRxStatus@dest
  5921  001F1C  0100               	movlb	0	; () banked
  5922  001F1E  6FBC               	movwf	sprintf@sp& (0+255),b
  5923  001F20  0E01               	movlw	high PrintRxStatus@dest
  5924  001F22  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5925  001F24  0EFA               	movlw	low STR_55
  5926  001F26  6FBE               	movwf	sprintf@f& (0+255),b
  5927  001F28  0E7E               	movlw	high STR_55
  5928  001F2A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5929  001F2C  EC70  F000         	call	_sprintf	;wreg free
  5930                           
  5931                           ;SystemStatus.c: 209: UART_Write_Text(dest);
  5932  001F30  0E00               	movlw	low PrintRxStatus@dest
  5933  001F32  6E19               	movwf	UART_Write_Text@text,c
  5934  001F34  0E01               	movlw	high PrintRxStatus@dest
  5935  001F36  6E1A               	movwf	UART_Write_Text@text+1,c
  5936  001F38  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5937                           
  5938                           ;SystemStatus.c: 210: sprintf(dest, "RX SYNTH (PLL) Lock indication 0: not locked 1: loc
      +                          ked%d\n\r",rxStatistics.Synt);
  5939  001F3C  0E00               	movlw	low PrintRxStatus@dest
  5940  001F3E  0100               	movlb	0	; () banked
  5941  001F40  6FBC               	movwf	sprintf@sp& (0+255),b
  5942  001F42  0E01               	movlw	high PrintRxStatus@dest
  5943  001F44  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5944  001F46  0EAA               	movlw	low STR_56
  5945  001F48  6FBE               	movwf	sprintf@f& (0+255),b
  5946  001F4A  0E7B               	movlw	high STR_56
  5947  001F4C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5948  001F4E  C19D  F0C0         	movff	_rxStatistics,?_sprintf+4	;volatile
  5949  001F52  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5950  001F54  EC70  F000         	call	_sprintf	;wreg free
  5951                           
  5952                           ;SystemStatus.c: 211: UART_Write_Text(dest);
  5953  001F58  0E00               	movlw	low PrintRxStatus@dest
  5954  001F5A  6E19               	movwf	UART_Write_Text@text,c
  5955  001F5C  0E01               	movlw	high PrintRxStatus@dest
  5956  001F5E  6E1A               	movwf	UART_Write_Text@text+1,c
  5957  001F60  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5958                           
  5959                           ;SystemStatus.c: 212: sprintf(dest, "Device Temperature %f\n\r",rxStatistics.DeviceTempe
      +                          rature);
  5960  001F64  0E00               	movlw	low PrintRxStatus@dest
  5961  001F66  0100               	movlb	0	; () banked
  5962  001F68  6FBC               	movwf	sprintf@sp& (0+255),b
  5963  001F6A  0E01               	movlw	high PrintRxStatus@dest
  5964  001F6C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5965  001F6E  0E84               	movlw	low STR_57
  5966  001F70  6FBE               	movwf	sprintf@f& (0+255),b
  5967  001F72  0E7E               	movlw	high STR_57
  5968  001F74  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5969  001F76  C1A3  F0C0         	movff	_rxStatistics+6,?_sprintf+4	;volatile
  5970  001F7A  C1A4  F0C1         	movff	_rxStatistics+7,?_sprintf+5	;volatile
  5971  001F7E  C1A5  F0C2         	movff	_rxStatistics+8,?_sprintf+6	;volatile
  5972  001F82  EC70  F000         	call	_sprintf	;wreg free
  5973                           
  5974                           ;SystemStatus.c: 213: UART_Write_Text(dest);
  5975  001F86  0E00               	movlw	low PrintRxStatus@dest
  5976  001F88  6E19               	movwf	UART_Write_Text@text,c
  5977  001F8A  0E01               	movlw	high PrintRxStatus@dest
  5978  001F8C  6E1A               	movwf	UART_Write_Text@text+1,c
  5979  001F8E  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  5980                           
  5981                           ;SystemStatus.c: 214: sprintf(dest, "Input power status 0: OFF 1: ON%d\n\r",rxStatistics
      +                          .InputPowerStatus);
  5982  001F92  0E00               	movlw	low PrintRxStatus@dest
  5983  001F94  0100               	movlb	0	; () banked
  5984  001F96  6FBC               	movwf	sprintf@sp& (0+255),b
  5985  001F98  0E01               	movlw	high PrintRxStatus@dest
  5986  001F9A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5987  001F9C  0E69               	movlw	low STR_58
  5988  001F9E  6FBE               	movwf	sprintf@f& (0+255),b
  5989  001FA0  0E7D               	movlw	high STR_58
  5990  001FA2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5991  001FA4  C1A6  F0C0         	movff	_rxStatistics+9,?_sprintf+4	;volatile
  5992  001FA8  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5993  001FAA  EC70  F000         	call	_sprintf	;wreg free
  5994                           
  5995                           ;SystemStatus.c: 215: UART_Write_Text(dest);
  5996  001FAE  0E00               	movlw	low PrintRxStatus@dest
  5997  001FB0  6E19               	movwf	UART_Write_Text@text,c
  5998  001FB2  0E01               	movlw	high PrintRxStatus@dest
  5999  001FB4  6E1A               	movwf	UART_Write_Text@text+1,c
  6000  001FB6  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6001                           
  6002                           ;SystemStatus.c: 216: sprintf(dest, "RX Frequency in MHz%f\n\r",rxStatistics.Freq);
  6003  001FBA  0E00               	movlw	low PrintRxStatus@dest
  6004  001FBC  0100               	movlb	0	; () banked
  6005  001FBE  6FBC               	movwf	sprintf@sp& (0+255),b
  6006  001FC0  0E01               	movlw	high PrintRxStatus@dest
  6007  001FC2  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6008  001FC4  0E9C               	movlw	low STR_59
  6009  001FC6  6FBE               	movwf	sprintf@f& (0+255),b
  6010  001FC8  0E7E               	movlw	high STR_59
  6011  001FCA  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6012  001FCC  C1A7  F0C0         	movff	_rxStatistics+10,?_sprintf+4	;volatile
  6013  001FD0  C1A8  F0C1         	movff	_rxStatistics+11,?_sprintf+5	;volatile
  6014  001FD4  C1A9  F0C2         	movff	_rxStatistics+12,?_sprintf+6	;volatile
  6015  001FD8  EC70  F000         	call	_sprintf	;wreg free
  6016                           
  6017                           ;SystemStatus.c: 217: UART_Write_Text(dest);
  6018  001FDC  0E00               	movlw	low PrintRxStatus@dest
  6019  001FDE  6E19               	movwf	UART_Write_Text@text,c
  6020  001FE0  0E01               	movlw	high PrintRxStatus@dest
  6021  001FE2  6E1A               	movwf	UART_Write_Text@text+1,c
  6022  001FE4  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6023                           
  6024                           ;SystemStatus.c: 218: sprintf(dest, "RSSI %d\n\r",rxStatistics.RSSI);
  6025  001FE8  0E00               	movlw	low PrintRxStatus@dest
  6026  001FEA  0100               	movlb	0	; () banked
  6027  001FEC  6FBC               	movwf	sprintf@sp& (0+255),b
  6028  001FEE  0E01               	movlw	high PrintRxStatus@dest
  6029  001FF0  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6030  001FF2  0EC6               	movlw	low STR_60
  6031  001FF4  6FBE               	movwf	sprintf@f& (0+255),b
  6032  001FF6  0E7F               	movlw	high STR_60
  6033  001FF8  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6034  001FFA  0101               	movlb	1	; () banked
  6035  001FFC  51AA               	movf	(_rxStatistics+13)& (0+255),w,b	;volatile
  6036  001FFE  0100               	movlb	0	; () banked
  6037  002000  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  6038  002002  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  6039  002004  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  6040  002006  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  6041  002008  EC70  F000         	call	_sprintf	;wreg free
  6042                           
  6043                           ;SystemStatus.c: 219: UART_Write_Text(dest);
  6044  00200C  0E00               	movlw	low PrintRxStatus@dest
  6045  00200E  6E19               	movwf	UART_Write_Text@text,c
  6046  002010  0E01               	movlw	high PrintRxStatus@dest
  6047  002012  6E1A               	movwf	UART_Write_Text@text+1,c
  6048  002014  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6049                           
  6050                           ;SystemStatus.c: 220: sprintf(dest, "Light 0: OFF 1: ON%d\n\r",rxStatistics.Light);
  6051  002018  0E00               	movlw	low PrintRxStatus@dest
  6052  00201A  0100               	movlb	0	; () banked
  6053  00201C  6FBC               	movwf	sprintf@sp& (0+255),b
  6054  00201E  0E01               	movlw	high PrintRxStatus@dest
  6055  002020  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6056  002022  0EE3               	movlw	low STR_61
  6057  002024  6FBE               	movwf	sprintf@f& (0+255),b
  6058  002026  0E7E               	movlw	high STR_61
  6059  002028  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6060  00202A  C1AE  F0C0         	movff	_rxStatistics+17,?_sprintf+4	;volatile
  6061  00202E  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  6062  002030  EC70  F000         	call	_sprintf	;wreg free
  6063                           
  6064                           ;SystemStatus.c: 221: UART_Write_Text(dest);
  6065  002034  0E00               	movlw	low PrintRxStatus@dest
  6066  002036  6E19               	movwf	UART_Write_Text@text,c
  6067  002038  0E01               	movlw	high PrintRxStatus@dest
  6068  00203A  6E1A               	movwf	UART_Write_Text@text+1,c
  6069  00203C  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6070                           
  6071                           ;SystemStatus.c: 224: sprintf(dest, "UNIT DC %d\n\r",rxStatistics.UnitDc);
  6072  002040  0E00               	movlw	low PrintRxStatus@dest
  6073  002042  0100               	movlb	0	; () banked
  6074  002044  6FBC               	movwf	sprintf@sp& (0+255),b
  6075  002046  0E01               	movlw	high PrintRxStatus@dest
  6076  002048  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6077  00204A  0E95               	movlw	low STR_62
  6078  00204C  6FBE               	movwf	sprintf@f& (0+255),b
  6079  00204E  0E7F               	movlw	high STR_62
  6080  002050  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6081  002052  C1AF  F0C0         	movff	_rxStatistics+18,?_sprintf+4	;volatile
  6082  002056  C1B0  F0C1         	movff	_rxStatistics+19,?_sprintf+5	;volatile
  6083  00205A  EC70  F000         	call	_sprintf	;wreg free
  6084                           
  6085                           ;SystemStatus.c: 225: UART_Write_Text(dest);
  6086  00205E  0E00               	movlw	low PrintRxStatus@dest
  6087  002060  6E19               	movwf	UART_Write_Text@text,c
  6088  002062  0E01               	movlw	high PrintRxStatus@dest
  6089  002064  6E1A               	movwf	UART_Write_Text@text+1,c
  6090  002066  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6091                           
  6092                           ;SystemStatus.c: 230: sprintf(dest, "*******************\n\r");
  6093  00206A  0E00               	movlw	low PrintRxStatus@dest
  6094  00206C  0100               	movlb	0	; () banked
  6095  00206E  6FBC               	movwf	sprintf@sp& (0+255),b
  6096  002070  0E01               	movlw	high PrintRxStatus@dest
  6097  002072  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6098  002074  0EFA               	movlw	low STR_55
  6099  002076  6FBE               	movwf	sprintf@f& (0+255),b
  6100  002078  0E7E               	movlw	high STR_55
  6101  00207A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6102  00207C  EC70  F000         	call	_sprintf	;wreg free
  6103                           
  6104                           ;SystemStatus.c: 231: UART_Write_Text(dest);
  6105  002080  0E00               	movlw	low PrintRxStatus@dest
  6106  002082  6E19               	movwf	UART_Write_Text@text,c
  6107  002084  0E01               	movlw	high PrintRxStatus@dest
  6108  002086  6E1A               	movwf	UART_Write_Text@text+1,c
  6109  002088  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6110  00208C  0012               	return		;funcret
  6111  00208E                     __end_of_PrintRxStatus:
  6112                           	opt stack 0
  6113                           tosu	equ	0xFFF
  6114                           tosh	equ	0xFFE
  6115                           tosl	equ	0xFFD
  6116                           pclath	equ	0xFFA
  6117                           tblptru	equ	0xFF8
  6118                           tblptrh	equ	0xFF7
  6119                           tblptrl	equ	0xFF6
  6120                           tablat	equ	0xFF5
  6121                           prodh	equ	0xFF4
  6122                           prodl	equ	0xFF3
  6123                           postinc0	equ	0xFEE
  6124                           wreg	equ	0xFE8
  6125                           indf1	equ	0xFE7
  6126                           postdec1	equ	0xFE5
  6127                           fsr1h	equ	0xFE2
  6128                           fsr1l	equ	0xFE1
  6129                           indf2	equ	0xFDF
  6130                           postinc2	equ	0xFDE
  6131                           fsr2h	equ	0xFDA
  6132                           fsr2l	equ	0xFD9
  6133                           status	equ	0xFD8
  6134                           
  6135 ;; *************** function _CollectRxStatusParams *****************
  6136 ;; Defined at:
  6137 ;;		line 173 in file "SystemStatus.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;		None
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;		None
  6142 ;; Return value:  Size  Location     Type
  6143 ;;                  1    wreg      void 
  6144 ;; Registers used:
  6145 ;;		wreg, status,2, status,0, cstack
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6151 ;;      Params:         0       0       0       0       0       0       0
  6152 ;;      Locals:         0       0       0       0       0       0       0
  6153 ;;      Temps:          0       0       0       0       0       0       0
  6154 ;;      Totals:         0       0       0       0       0       0       0
  6155 ;;Total ram usage:        0 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:    5
  6158 ;; This function calls:
  6159 ;;		___lltoft
  6160 ;;		___lwtoft
  6161 ;; This function is called by:
  6162 ;;		_GroupRx
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           	psect	text9
  6167  003CEE                     __ptext9:
  6168                           	opt stack 0
  6169  003CEE                     _CollectRxStatusParams:
  6170                           	opt stack 23
  6171                           
  6172                           ;SystemStatus.c: 175: rxStatistics.Synt = rxFreq;
  6173                           
  6174                           ;incstack = 0
  6175  003CEE  C1BE  F19D         	movff	_rxFreq,_rxStatistics	;volatile
  6176                           
  6177                           ;SystemStatus.c: 176: rxStatistics.DeviceTemperature = lastAdcTemp;
  6178  003CF2  C03F  F020         	movff	_lastAdcTemp,___lwtoft@c	;volatile
  6179  003CF6  C040  F021         	movff	_lastAdcTemp+1,___lwtoft@c+1	;volatile
  6180  003CFA  EC61  F022         	call	___lwtoft	;wreg free
  6181  003CFE  C020  F1A3         	movff	?___lwtoft,_rxStatistics+6	;volatile
  6182  003D02  C021  F1A4         	movff	?___lwtoft+1,_rxStatistics+7	;volatile
  6183  003D06  C022  F1A5         	movff	?___lwtoft+2,_rxStatistics+8	;volatile
  6184                           
  6185                           ;SystemStatus.c: 177: rxStatistics.InputPowerStatus = PORTDbits.RD6;
  6186  003D0A  0E00               	movlw	0
  6187  003D0C  BC83               	btfsc	3971,6,c	;volatile
  6188  003D0E  0E01               	movlw	1
  6189  003D10  0101               	movlb	1	; () banked
  6190  003D12  6FA6               	movwf	(_rxStatistics+9)& (0+255),b	;volatile
  6191                           
  6192                           ; BSR set to: 1
  6193                           ;SystemStatus.c: 178: rxStatistics.Freq = rxFreq;
  6194  003D14  C1BE  F020         	movff	_rxFreq,___lltoft@c	;volatile
  6195  003D18  C1BF  F021         	movff	_rxFreq+1,___lltoft@c+1	;volatile
  6196  003D1C  C1C0  F022         	movff	_rxFreq+2,___lltoft@c+2	;volatile
  6197  003D20  C1C1  F023         	movff	_rxFreq+3,___lltoft@c+3	;volatile
  6198  003D24  EC03  F01F         	call	___lltoft	;wreg free
  6199  003D28  C020  F1A7         	movff	?___lltoft,_rxStatistics+10	;volatile
  6200  003D2C  C021  F1A8         	movff	?___lltoft+1,_rxStatistics+11	;volatile
  6201  003D30  C022  F1A9         	movff	?___lltoft+2,_rxStatistics+12	;volatile
  6202                           
  6203                           ;SystemStatus.c: 179: rxStatistics.RSSI = lastAdcFfwrRSSI;
  6204  003D34  C1CC  F1AA         	movff	_lastAdcFfwrRSSI,_rxStatistics+13	;volatile
  6205                           
  6206                           ;SystemStatus.c: 180: rxStatistics.Light = PORTBbits.RB3;
  6207  003D38  0E00               	movlw	0
  6208  003D3A  B681               	btfsc	3969,3,c	;volatile
  6209  003D3C  0E01               	movlw	1
  6210  003D3E  0101               	movlb	1	; () banked
  6211  003D40  6FAE               	movwf	(_rxStatistics+17)& (0+255),b	;volatile
  6212                           
  6213                           ; BSR set to: 1
  6214                           ;SystemStatus.c: 182: rxStatistics.UnitDc = 1234;
  6215  003D42  0E04               	movlw	4
  6216  003D44  6FB0               	movwf	(_rxStatistics+19)& (0+255),b	;volatile
  6217  003D46  0ED2               	movlw	210
  6218  003D48  6FAF               	movwf	(_rxStatistics+18)& (0+255),b	;volatile
  6219                           
  6220                           ; BSR set to: 1
  6221  003D4A  0012               	return		;funcret
  6222  003D4C                     __end_of_CollectRxStatusParams:
  6223                           	opt stack 0
  6224                           tosu	equ	0xFFF
  6225                           tosh	equ	0xFFE
  6226                           tosl	equ	0xFFD
  6227                           pclath	equ	0xFFA
  6228                           tblptru	equ	0xFF8
  6229                           tblptrh	equ	0xFF7
  6230                           tblptrl	equ	0xFF6
  6231                           tablat	equ	0xFF5
  6232                           prodh	equ	0xFF4
  6233                           prodl	equ	0xFF3
  6234                           postinc0	equ	0xFEE
  6235                           wreg	equ	0xFE8
  6236                           indf1	equ	0xFE7
  6237                           postdec1	equ	0xFE5
  6238                           fsr1h	equ	0xFE2
  6239                           fsr1l	equ	0xFE1
  6240                           indf2	equ	0xFDF
  6241                           postinc2	equ	0xFDE
  6242                           fsr2h	equ	0xFDA
  6243                           fsr2l	equ	0xFD9
  6244                           status	equ	0xFD8
  6245                           
  6246 ;; *************** function _AdcSingleSample *****************
  6247 ;; Defined at:
  6248 ;;		line 32 in file "AdcApp.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  cType           1    wreg     enum E177
  6251 ;;  chType          1   30[COMRAM] enum E7682
  6252 ;;  numSamples      4   31[COMRAM] long 
  6253 ;; Auto vars:     Size  Location     Type
  6254 ;;  cType           1   39[COMRAM] enum E177
  6255 ;;  retNum          4   35[COMRAM] unsigned long 
  6256 ;; Return value:  Size  Location     Type
  6257 ;;                  1    wreg      void 
  6258 ;; Registers used:
  6259 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6260 ;; Tracked objects:
  6261 ;;		On entry : 0/0
  6262 ;;		On exit  : 0/0
  6263 ;;		Unchanged: 0/0
  6264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6265 ;;      Params:         5       0       0       0       0       0       0
  6266 ;;      Locals:         5       0       0       0       0       0       0
  6267 ;;      Temps:          0       0       0       0       0       0       0
  6268 ;;      Totals:        10       0       0       0       0       0       0
  6269 ;;Total ram usage:       10 bytes
  6270 ;; Hardware stack levels used:    1
  6271 ;; Hardware stack levels required when called:    5
  6272 ;; This function calls:
  6273 ;;		_UART_Write_Text
  6274 ;; This function is called by:
  6275 ;;		_GroupRx
  6276 ;;		_GroupTx
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           	psect	text10
  6281  0028C8                     __ptext10:
  6282                           	opt stack 0
  6283  0028C8                     _AdcSingleSample:
  6284                           	opt stack 23
  6285                           
  6286                           ; BSR set to: 1
  6287                           ;incstack = 0
  6288                           ;AdcSingleSample@cType stored from wreg
  6289  0028C8  6E28               	movwf	AdcSingleSample@cType,c
  6290                           
  6291                           ;AdcApp.c: 34: uint32_t retNum = 0x0;
  6292  0028CA  0E00               	movlw	0
  6293  0028CC  6E24               	movwf	AdcSingleSample@retNum,c
  6294  0028CE  0E00               	movlw	0
  6295  0028D0  6E25               	movwf	AdcSingleSample@retNum+1,c
  6296  0028D2  0E00               	movlw	0
  6297  0028D4  6E26               	movwf	AdcSingleSample@retNum+2,c
  6298  0028D6  0E00               	movlw	0
  6299  0028D8  6E27               	movwf	AdcSingleSample@retNum+3,c
  6300                           
  6301                           ;AdcApp.c: 36: if(chType == ADC_OFF)
  6302  0028DA  501F               	movf	AdcSingleSample@chType,w,c
  6303  0028DC  A4D8               	btfss	status,2,c
  6304  0028DE  D00B               	goto	l146
  6305                           
  6306                           ;AdcApp.c: 37: {
  6307                           ;AdcApp.c: 38: if(cType == TX_TYPE) txStatistics.AdcValues.OperState = 0;
  6308  0028E0  5028               	movf	AdcSingleSample@cType,w,c
  6309  0028E2  A4D8               	btfss	status,2,c
  6310  0028E4  D004               	goto	l147
  6311  0028E6  0E00               	movlw	0
  6312  0028E8  0101               	movlb	1	; () banked
  6313  0028EA  6F88               	movwf	(_txStatistics+1)& (0+255),b	;volatile
  6314  0028EC  0012               	return	
  6315  0028EE                     l147:
  6316                           
  6317                           ;AdcApp.c: 39: else rxStatistics.AdcValues.OperState = 0;
  6318                           
  6319                           ; BSR set to: 1
  6320  0028EE  0E00               	movlw	0
  6321  0028F0  0101               	movlb	1	; () banked
  6322  0028F2  6F9E               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  6323                           
  6324                           ; BSR set to: 1
  6325                           ;AdcApp.c: 40: }
  6326  0028F4  0012               	return	
  6327  0028F6                     l146:
  6328                           
  6329                           ;AdcApp.c: 41: else
  6330                           ;AdcApp.c: 42: {
  6331                           ;AdcApp.c: 44: if(channelNum > (0x04))
  6332                           
  6333                           ; BSR set to: 1
  6334  0028F6  503E               	movf	_channelNum+1,w,c
  6335  0028F8  E104               	bnz	u8890
  6336  0028FA  0E05               	movlw	5
  6337  0028FC  5C3D               	subwf	_channelNum,w,c
  6338  0028FE  A0D8               	btfss	status,0,c
  6339  002900  D007               	goto	l150
  6340  002902                     u8890:
  6341                           
  6342                           ;AdcApp.c: 45: {
  6343                           ;AdcApp.c: 46: UART_Write_Text("NOT OK \n\r");
  6344  002902  0ED0               	movlw	low STR_1
  6345  002904  6E19               	movwf	UART_Write_Text@text,c
  6346  002906  0E7F               	movlw	high STR_1
  6347  002908  6E1A               	movwf	UART_Write_Text@text+1,c
  6348  00290A  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6349                           
  6350                           ;AdcApp.c: 47: }
  6351  00290E  0012               	return	
  6352  002910                     l150:
  6353                           
  6354                           ;AdcApp.c: 48: else
  6355                           ;AdcApp.c: 49: {
  6356                           ;AdcApp.c: 50: if(cType == TX_TYPE)
  6357  002910  5028               	movf	AdcSingleSample@cType,w,c
  6358  002912  A4D8               	btfss	status,2,c
  6359  002914  D031               	goto	l162
  6360                           
  6361                           ;AdcApp.c: 51: {
  6362                           ;AdcApp.c: 52: if(channelNum == 0)
  6363  002916  503D               	movf	_channelNum,w,c
  6364  002918  103E               	iorwf	_channelNum+1,w,c
  6365  00291A  A4D8               	btfss	status,2,c
  6366  00291C  D004               	goto	l153
  6367                           
  6368                           ;AdcApp.c: 53: {
  6369                           ;AdcApp.c: 54: rxStatistics.AdcValues.OperState = 0;
  6370  00291E  0E00               	movlw	0
  6371  002920  0101               	movlb	1	; () banked
  6372  002922  6F9E               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  6373                           
  6374                           ; BSR set to: 1
  6375                           ;AdcApp.c: 55: return;
  6376  002924  0012               	return	
  6377  002926                     l153:
  6378                           
  6379                           ;AdcApp.c: 57: else
  6380                           ;AdcApp.c: 58: {
  6381                           ;AdcApp.c: 59: if(channelNum == 1) UART_Write_Text("TX SAMPLE CHANNEL: TX-ADC_RREV\n\r")
      +                          ;
  6382                           
  6383                           ; BSR set to: 1
  6384  002926  043D               	decf	_channelNum,w,c
  6385  002928  103E               	iorwf	_channelNum+1,w,c
  6386  00292A  A4D8               	btfss	status,2,c
  6387  00292C  D007               	goto	l156
  6388  00292E  0ED1               	movlw	low STR_2
  6389  002930  6E19               	movwf	UART_Write_Text@text,c
  6390  002932  0E7D               	movlw	high STR_2
  6391  002934  6E1A               	movwf	UART_Write_Text@text+1,c
  6392  002936  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6393  00293A  D00B               	goto	l158
  6394  00293C                     l156:
  6395                           
  6396                           ;AdcApp.c: 60: else if(channelNum == 2) UART_Write_Text("TX SAMPLE CHANNEL ADC_TEMP\n\r"
      +                          );
  6397  00293C  0E02               	movlw	2
  6398  00293E  183D               	xorwf	_channelNum,w,c
  6399  002940  103E               	iorwf	_channelNum+1,w,c
  6400  002942  A4D8               	btfss	status,2,c
  6401  002944  D006               	goto	l158
  6402  002946  0E4E               	movlw	low STR_3
  6403  002948  6E19               	movwf	UART_Write_Text@text,c
  6404  00294A  0E7E               	movlw	high STR_3
  6405  00294C  6E1A               	movwf	UART_Write_Text@text+1,c
  6406  00294E  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6407  002952                     l158:
  6408                           
  6409                           ;AdcApp.c: 61: if(channelNum == 0x1 || channelNum == 0x2)
  6410  002952  043D               	decf	_channelNum,w,c
  6411  002954  103E               	iorwf	_channelNum+1,w,c
  6412  002956  B4D8               	btfsc	status,2,c
  6413  002958  D005               	goto	u8950
  6414  00295A  0E02               	movlw	2
  6415  00295C  183D               	xorwf	_channelNum,w,c
  6416  00295E  103E               	iorwf	_channelNum+1,w,c
  6417  002960  A4D8               	btfss	status,2,c
  6418  002962  D004               	goto	l159
  6419  002964                     u8950:
  6420                           
  6421                           ;AdcApp.c: 62: {
  6422                           ;AdcApp.c: 63: needToSample = 1;
  6423  002964  0E01               	movlw	1
  6424  002966  0101               	movlb	1	; () banked
  6425  002968  6FD7               	movwf	_needToSample& (0+255),b	;volatile
  6426                           
  6427                           ;AdcApp.c: 64: }
  6428  00296A  D006               	goto	l162
  6429  00296C                     l159:
  6430                           
  6431                           ;AdcApp.c: 65: else
  6432                           ;AdcApp.c: 66: {
  6433                           ;AdcApp.c: 67: UART_Write_Text("NOT OK \n\r");
  6434                           
  6435                           ; BSR set to: 1
  6436  00296C  0ED0               	movlw	low STR_1
  6437  00296E  6E19               	movwf	UART_Write_Text@text,c
  6438  002970  0E7F               	movlw	high STR_1
  6439  002972  6E1A               	movwf	UART_Write_Text@text+1,c
  6440  002974  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6441  002978                     l162:
  6442                           
  6443                           ;AdcApp.c: 68: }
  6444                           ;AdcApp.c: 69: }
  6445                           ;AdcApp.c: 70: }
  6446                           ;AdcApp.c: 72: if(cType == RX_TYPE)
  6447  002978  0428               	decf	AdcSingleSample@cType,w,c
  6448  00297A  A4D8               	btfss	status,2,c
  6449  00297C  0012               	return	
  6450                           
  6451                           ;AdcApp.c: 73: {
  6452                           ;AdcApp.c: 74: if(channelNum == 0)
  6453  00297E  503D               	movf	_channelNum,w,c
  6454  002980  103E               	iorwf	_channelNum+1,w,c
  6455  002982  A4D8               	btfss	status,2,c
  6456  002984  D004               	goto	l164
  6457                           
  6458                           ;AdcApp.c: 75: {
  6459                           ;AdcApp.c: 76: rxStatistics.AdcValues.OperState = 0;
  6460  002986  0E00               	movlw	0
  6461  002988  0101               	movlb	1	; () banked
  6462  00298A  6F9E               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  6463                           
  6464                           ; BSR set to: 1
  6465                           ;AdcApp.c: 78: }
  6466                           
  6467                           ; BSR set to: 1
  6468                           ;AdcApp.c: 77: return;
  6469  00298C  0012               	return	
  6470  00298E                     l164:
  6471                           
  6472                           ;AdcApp.c: 79: else
  6473                           ;AdcApp.c: 80: {
  6474                           ;AdcApp.c: 81: if(channelNum == 1) UART_Write_Text("RX SAMPLE CHANNEL RX-ADC_FFWR\n\r");
  6475                           
  6476                           ; BSR set to: 1
  6477  00298E  043D               	decf	_channelNum,w,c
  6478  002990  103E               	iorwf	_channelNum+1,w,c
  6479  002992  A4D8               	btfss	status,2,c
  6480  002994  D007               	goto	l166
  6481  002996  0EF2               	movlw	low STR_5
  6482  002998  6E19               	movwf	UART_Write_Text@text,c
  6483  00299A  0E7D               	movlw	high STR_5
  6484  00299C  6E1A               	movwf	UART_Write_Text@text+1,c
  6485  00299E  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6486  0029A2  D00B               	goto	l168
  6487  0029A4                     l166:
  6488                           
  6489                           ;AdcApp.c: 82: else if(channelNum == 2) UART_Write_Text("RX SAMPLE CHANNEL RX-ADC_VG_MON
      +                          \n\r");
  6490  0029A4  0E02               	movlw	2
  6491  0029A6  183D               	xorwf	_channelNum,w,c
  6492  0029A8  103E               	iorwf	_channelNum+1,w,c
  6493  0029AA  A4D8               	btfss	status,2,c
  6494  0029AC  D006               	goto	l168
  6495  0029AE  0EAF               	movlw	low STR_6
  6496  0029B0  6E19               	movwf	UART_Write_Text@text,c
  6497  0029B2  0E7D               	movlw	high STR_6
  6498  0029B4  6E1A               	movwf	UART_Write_Text@text+1,c
  6499  0029B6  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6500  0029BA                     l168:
  6501                           
  6502                           ;AdcApp.c: 83: if(channelNum == 0x1 || channelNum == 0x2)
  6503  0029BA  043D               	decf	_channelNum,w,c
  6504  0029BC  103E               	iorwf	_channelNum+1,w,c
  6505  0029BE  B4D8               	btfsc	status,2,c
  6506  0029C0  D005               	goto	u9010
  6507  0029C2  0E02               	movlw	2
  6508  0029C4  183D               	xorwf	_channelNum,w,c
  6509  0029C6  103E               	iorwf	_channelNum+1,w,c
  6510  0029C8  A4D8               	btfss	status,2,c
  6511  0029CA  D004               	goto	l169
  6512  0029CC                     u9010:
  6513                           
  6514                           ;AdcApp.c: 84: {
  6515                           ;AdcApp.c: 85: needToSample = 1;
  6516  0029CC  0E01               	movlw	1
  6517  0029CE  0101               	movlb	1	; () banked
  6518  0029D0  6FD7               	movwf	_needToSample& (0+255),b	;volatile
  6519                           
  6520                           ;AdcApp.c: 86: }
  6521  0029D2  0012               	return	
  6522  0029D4                     l169:
  6523                           
  6524                           ;AdcApp.c: 87: else
  6525                           ;AdcApp.c: 88: {
  6526                           ;AdcApp.c: 89: UART_Write_Text("NOT OK \n\r");
  6527                           
  6528                           ; BSR set to: 1
  6529  0029D4  0ED0               	movlw	low STR_1
  6530  0029D6  6E19               	movwf	UART_Write_Text@text,c
  6531  0029D8  0E7F               	movlw	high STR_1
  6532  0029DA  6E1A               	movwf	UART_Write_Text@text+1,c
  6533  0029DC  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6534  0029E0  0012               	return	
  6535  0029E2                     __end_of_AdcSingleSample:
  6536                           	opt stack 0
  6537                           tosu	equ	0xFFF
  6538                           tosh	equ	0xFFE
  6539                           tosl	equ	0xFFD
  6540                           pclath	equ	0xFFA
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           postinc0	equ	0xFEE
  6548                           wreg	equ	0xFE8
  6549                           indf1	equ	0xFE7
  6550                           postdec1	equ	0xFE5
  6551                           fsr1h	equ	0xFE2
  6552                           fsr1l	equ	0xFE1
  6553                           indf2	equ	0xFDF
  6554                           postinc2	equ	0xFDE
  6555                           fsr2h	equ	0xFDA
  6556                           fsr2l	equ	0xFD9
  6557                           status	equ	0xFD8
  6558                           
  6559 ;; *************** function _testLeds *****************
  6560 ;; Defined at:
  6561 ;;		line 43 in file "LedsApp.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;		None
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  idx             2   24[COMRAM] int 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      void 
  6568 ;; Registers used:
  6569 ;;		wreg, status,2, status,0
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6575 ;;      Params:         0       0       0       0       0       0       0
  6576 ;;      Locals:         2       0       0       0       0       0       0
  6577 ;;      Temps:          1       0       0       0       0       0       0
  6578 ;;      Totals:         3       0       0       0       0       0       0
  6579 ;;Total ram usage:        3 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    3
  6582 ;; This function calls:
  6583 ;;		Nothing
  6584 ;; This function is called by:
  6585 ;;		_GroupCommon
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text11
  6590  003C2E                     __ptext11:
  6591                           	opt stack 0
  6592  003C2E                     _testLeds:
  6593                           	opt stack 25
  6594                           
  6595                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6596                           
  6597                           ;incstack = 0
  6598  003C2E  0E00               	movlw	0
  6599  003C30  6E1A               	movwf	testLeds@idx+1,c
  6600  003C32  0E00               	movlw	0
  6601  003C34  6E19               	movwf	testLeds@idx,c
  6602  003C36                     l6573:
  6603  003C36  BE1A               	btfsc	testLeds@idx+1,7,c
  6604  003C38  D006               	goto	l70
  6605  003C3A  501A               	movf	testLeds@idx+1,w,c
  6606  003C3C  E127               	bnz	l72
  6607  003C3E  0E0A               	movlw	10
  6608  003C40  5C19               	subwf	testLeds@idx,w,c
  6609  003C42  B0D8               	btfsc	status,0,c
  6610  003C44  0012               	return	
  6611  003C46                     l70:
  6612                           
  6613                           ;LedsApp.c: 47: {
  6614                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6615  003C46  808B               	bsf	3979,0,c	;volatile
  6616                           
  6617                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6618  003C48  0E82               	movlw	130
  6619  003C4A  6E18               	movwf	??_testLeds& (0+255),c
  6620  003C4C  0EDE               	movlw	222
  6621  003C4E                     u9627:
  6622  003C4E  2EE8               	decfsz	wreg,f,c
  6623  003C50  D7FE               	bra	u9627
  6624  003C52  2E18               	decfsz	??_testLeds& (0+255),f,c
  6625  003C54  D7FC               	bra	u9627
  6626                           
  6627                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6628  003C56  888A               	bsf	3978,4,c	;volatile
  6629                           
  6630                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6631  003C58  0E82               	movlw	130
  6632  003C5A  6E18               	movwf	??_testLeds& (0+255),c
  6633  003C5C  0EDE               	movlw	222
  6634  003C5E                     u9637:
  6635  003C5E  2EE8               	decfsz	wreg,f,c
  6636  003C60  D7FE               	bra	u9637
  6637  003C62  2E18               	decfsz	??_testLeds& (0+255),f,c
  6638  003C64  D7FC               	bra	u9637
  6639                           
  6640                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6641  003C66  908B               	bcf	3979,0,c	;volatile
  6642                           
  6643                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6644  003C68  0E82               	movlw	130
  6645  003C6A  6E18               	movwf	??_testLeds& (0+255),c
  6646  003C6C  0EDE               	movlw	222
  6647  003C6E                     u9647:
  6648  003C6E  2EE8               	decfsz	wreg,f,c
  6649  003C70  D7FE               	bra	u9647
  6650  003C72  2E18               	decfsz	??_testLeds& (0+255),f,c
  6651  003C74  D7FC               	bra	u9647
  6652                           
  6653                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6654  003C76  988A               	bcf	3978,4,c	;volatile
  6655                           
  6656                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6657  003C78  0E82               	movlw	130
  6658  003C7A  6E18               	movwf	??_testLeds& (0+255),c
  6659  003C7C  0EDE               	movlw	222
  6660  003C7E                     u9657:
  6661  003C7E  2EE8               	decfsz	wreg,f,c
  6662  003C80  D7FE               	bra	u9657
  6663  003C82  2E18               	decfsz	??_testLeds& (0+255),f,c
  6664  003C84  D7FC               	bra	u9657
  6665  003C86  4A19               	infsnz	testLeds@idx,f,c
  6666  003C88  2A1A               	incf	testLeds@idx+1,f,c
  6667  003C8A  D7D5               	goto	l6573
  6668  003C8C                     l72:
  6669  003C8C  0012               	return		;funcret
  6670  003C8E                     __end_of_testLeds:
  6671                           	opt stack 0
  6672                           tosu	equ	0xFFF
  6673                           tosh	equ	0xFFE
  6674                           tosl	equ	0xFFD
  6675                           pclath	equ	0xFFA
  6676                           tblptru	equ	0xFF8
  6677                           tblptrh	equ	0xFF7
  6678                           tblptrl	equ	0xFF6
  6679                           tablat	equ	0xFF5
  6680                           prodh	equ	0xFF4
  6681                           prodl	equ	0xFF3
  6682                           postinc0	equ	0xFEE
  6683                           wreg	equ	0xFE8
  6684                           indf1	equ	0xFE7
  6685                           postdec1	equ	0xFE5
  6686                           fsr1h	equ	0xFE2
  6687                           fsr1l	equ	0xFE1
  6688                           indf2	equ	0xFDF
  6689                           postinc2	equ	0xFDE
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _set_system_type *****************
  6695 ;; Defined at:
  6696 ;;		line 102 in file "SystemCommon.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  data            2   23[BANK0 ] PTR unsigned char 
  6699 ;;		 -> rxMsgData(20), 
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;  retNum          4   25[BANK0 ] unsigned long 
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  1    wreg      void 
  6704 ;; Registers used:
  6705 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6711 ;;      Params:         0       2       0       0       0       0       0
  6712 ;;      Locals:         0       4       0       0       0       0       0
  6713 ;;      Temps:          0       0       0       0       0       0       0
  6714 ;;      Totals:         0       6       0       0       0       0       0
  6715 ;;Total ram usage:        6 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    7
  6718 ;; This function calls:
  6719 ;;		_GetIntFromUartData
  6720 ;;		_UART_Write_Text
  6721 ;;		___lldiv
  6722 ;; This function is called by:
  6723 ;;		_GroupCommon
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           	psect	text12
  6728  003480                     __ptext12:
  6729                           	opt stack 0
  6730  003480                     _set_system_type:
  6731                           	opt stack 21
  6732                           
  6733                           ;SystemCommon.c: 104: uint32_t retNum =0;
  6734                           
  6735                           ;incstack = 0
  6736  003480  0E00               	movlw	0
  6737  003482  0100               	movlb	0	; () banked
  6738  003484  6F79               	movwf	set_system_type@retNum& (0+255),b
  6739  003486  0E00               	movlw	0
  6740  003488  6F7A               	movwf	(set_system_type@retNum+1)& (0+255),b
  6741  00348A  0E00               	movlw	0
  6742  00348C  6F7B               	movwf	(set_system_type@retNum+2)& (0+255),b
  6743  00348E  0E00               	movlw	0
  6744  003490  6F7C               	movwf	(set_system_type@retNum+3)& (0+255),b
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;SystemCommon.c: 105: retNum = GetIntFromUartData(data);
  6748  003492  C077  F066         	movff	set_system_type@data,GetIntFromUartData@data
  6749  003496  C078  F067         	movff	set_system_type@data+1,GetIntFromUartData@data+1
  6750  00349A  EC8B  F01A         	call	_GetIntFromUartData	;wreg free
  6751  00349E  C066  F079         	movff	?_GetIntFromUartData,set_system_type@retNum
  6752  0034A2  C067  F07A         	movff	?_GetIntFromUartData+1,set_system_type@retNum+1
  6753  0034A6  C068  F07B         	movff	?_GetIntFromUartData+2,set_system_type@retNum+2
  6754  0034AA  C069  F07C         	movff	?_GetIntFromUartData+3,set_system_type@retNum+3
  6755                           
  6756                           ;SystemCommon.c: 106: if((retNum / 10) == (1234))
  6757  0034AE  C079  F018         	movff	set_system_type@retNum,___lldiv@dividend
  6758  0034B2  C07A  F019         	movff	set_system_type@retNum+1,___lldiv@dividend+1
  6759  0034B6  C07B  F01A         	movff	set_system_type@retNum+2,___lldiv@dividend+2
  6760  0034BA  C07C  F01B         	movff	set_system_type@retNum+3,___lldiv@dividend+3
  6761  0034BE  0E0A               	movlw	10
  6762  0034C0  6E1C               	movwf	___lldiv@divisor,c
  6763  0034C2  0E00               	movlw	0
  6764  0034C4  6E1D               	movwf	___lldiv@divisor+1,c
  6765  0034C6  0E00               	movlw	0
  6766  0034C8  6E1E               	movwf	___lldiv@divisor+2,c
  6767  0034CA  0E00               	movlw	0
  6768  0034CC  6E1F               	movwf	___lldiv@divisor+3,c
  6769  0034CE  ECA7  F01B         	call	___lldiv	;wreg free
  6770  0034D2  0ED2               	movlw	210
  6771  0034D4  1818               	xorwf	?___lldiv,w,c
  6772  0034D6  E118               	bnz	l9159
  6773  0034D8  0E04               	movlw	4
  6774  0034DA  1819               	xorwf	?___lldiv+1,w,c
  6775  0034DC  101A               	iorwf	?___lldiv+2,w,c
  6776  0034DE  101B               	iorwf	?___lldiv+3,w,c
  6777  0034E0  A4D8               	btfss	status,2,c
  6778  0034E2  D012               	goto	l1345
  6779                           
  6780                           ;SystemCommon.c: 107: {
  6781                           ;SystemCommon.c: 108: if((retNum & 0x1) == 1)
  6782  0034E4  0100               	movlb	0	; () banked
  6783  0034E6  A179               	btfss	set_system_type@retNum& (0+255),0,b
  6784  0034E8  D003               	goto	l1346
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;SystemCommon.c: 109: systemStatus.UnitType = 1;
  6788  0034EA  0E01               	movlw	1
  6789  0034EC  6E34               	movwf	_systemStatus+3,c	;volatile
  6790  0034EE  0012               	return	
  6791  0034F0                     l1346:
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;SystemCommon.c: 110: else if((retNum & 0x1) == 0)
  6795  0034F0  B179               	btfsc	set_system_type@retNum& (0+255),0,b
  6796  0034F2  D003               	goto	l1348
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;SystemCommon.c: 111: systemStatus.UnitType = 0;
  6800  0034F4  0E00               	movlw	0
  6801  0034F6  6E34               	movwf	_systemStatus+3,c	;volatile
  6802  0034F8  0012               	return	
  6803  0034FA                     l1348:
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;SystemCommon.c: 112: else
  6807                           ;SystemCommon.c: 113: UART_Write_Text("NOT OK \n\r");
  6808                           
  6809                           ; BSR set to: 0
  6810  0034FA  0ED0               	movlw	low STR_1
  6811  0034FC  6E19               	movwf	UART_Write_Text@text,c
  6812  0034FE  0E7F               	movlw	high STR_1
  6813  003500  6E1A               	movwf	UART_Write_Text@text+1,c
  6814  003502  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6815                           
  6816                           ;SystemCommon.c: 114: }
  6817  003506  0012               	return	
  6818  003508                     l1345:
  6819  003508                     l9159:
  6820                           
  6821                           ;SystemCommon.c: 115: else
  6822                           ;SystemCommon.c: 116: UART_Write_Text("NOT OK \n\r");
  6823  003508  0ED0               	movlw	low STR_1
  6824  00350A  6E19               	movwf	UART_Write_Text@text,c
  6825  00350C  0E7F               	movlw	high STR_1
  6826  00350E  6E1A               	movwf	UART_Write_Text@text+1,c
  6827  003510  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6828  003514  0012               	return	
  6829  003516                     __end_of_set_system_type:
  6830                           	opt stack 0
  6831                           tosu	equ	0xFFF
  6832                           tosh	equ	0xFFE
  6833                           tosl	equ	0xFFD
  6834                           pclath	equ	0xFFA
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           postinc0	equ	0xFEE
  6842                           wreg	equ	0xFE8
  6843                           indf1	equ	0xFE7
  6844                           postdec1	equ	0xFE5
  6845                           fsr1h	equ	0xFE2
  6846                           fsr1l	equ	0xFE1
  6847                           indf2	equ	0xFDF
  6848                           postinc2	equ	0xFDE
  6849                           fsr2h	equ	0xFDA
  6850                           fsr2l	equ	0xFD9
  6851                           status	equ	0xFD8
  6852                           
  6853 ;; *************** function _SetUartRefrashRate *****************
  6854 ;; Defined at:
  6855 ;;		line 119 in file "SystemCommon.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;  data            2   23[BANK0 ] PTR unsigned char 
  6858 ;;		 -> rxMsgData(20), 
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;  retNum          4   25[BANK0 ] unsigned long 
  6861 ;; Return value:  Size  Location     Type
  6862 ;;                  1    wreg      void 
  6863 ;; Registers used:
  6864 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6870 ;;      Params:         0       2       0       0       0       0       0
  6871 ;;      Locals:         0       4       0       0       0       0       0
  6872 ;;      Temps:          0       0       0       0       0       0       0
  6873 ;;      Totals:         0       6       0       0       0       0       0
  6874 ;;Total ram usage:        6 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:    7
  6877 ;; This function calls:
  6878 ;;		_GetIntFromUartData
  6879 ;;		_UART_Write_Text
  6880 ;; This function is called by:
  6881 ;;		_GroupCommon
  6882 ;; This function uses a non-reentrant model
  6883 ;;
  6884                           
  6885                           	psect	text13
  6886  003C8E                     __ptext13:
  6887                           	opt stack 0
  6888  003C8E                     _SetUartRefrashRate:
  6889                           	opt stack 21
  6890                           
  6891                           ;SystemCommon.c: 121: uint32_t retNum =0;
  6892                           
  6893                           ;incstack = 0
  6894  003C8E  0E00               	movlw	0
  6895  003C90  0100               	movlb	0	; () banked
  6896  003C92  6F79               	movwf	SetUartRefrashRate@retNum& (0+255),b
  6897  003C94  0E00               	movlw	0
  6898  003C96  6F7A               	movwf	(SetUartRefrashRate@retNum+1)& (0+255),b
  6899  003C98  0E00               	movlw	0
  6900  003C9A  6F7B               	movwf	(SetUartRefrashRate@retNum+2)& (0+255),b
  6901  003C9C  0E00               	movlw	0
  6902  003C9E  6F7C               	movwf	(SetUartRefrashRate@retNum+3)& (0+255),b
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;SystemCommon.c: 122: retNum = GetIntFromUartData(data);
  6906  003CA0  C077  F066         	movff	SetUartRefrashRate@data,GetIntFromUartData@data
  6907  003CA4  C078  F067         	movff	SetUartRefrashRate@data+1,GetIntFromUartData@data+1
  6908  003CA8  EC8B  F01A         	call	_GetIntFromUartData	;wreg free
  6909  003CAC  C066  F079         	movff	?_GetIntFromUartData,SetUartRefrashRate@retNum
  6910  003CB0  C067  F07A         	movff	?_GetIntFromUartData+1,SetUartRefrashRate@retNum+1
  6911  003CB4  C068  F07B         	movff	?_GetIntFromUartData+2,SetUartRefrashRate@retNum+2
  6912  003CB8  C069  F07C         	movff	?_GetIntFromUartData+3,SetUartRefrashRate@retNum+3
  6913                           
  6914                           ;SystemCommon.c: 123: if(retNum > 0 || retNum < 21)
  6915  003CBC  0100               	movlb	0	; () banked
  6916  003CBE  5179               	movf	SetUartRefrashRate@retNum& (0+255),w,b
  6917  003CC0  117A               	iorwf	(SetUartRefrashRate@retNum+1)& (0+255),w,b
  6918  003CC2  117B               	iorwf	(SetUartRefrashRate@retNum+2)& (0+255),w,b
  6919  003CC4  117C               	iorwf	(SetUartRefrashRate@retNum+3)& (0+255),w,b
  6920  003CC6  A4D8               	btfss	status,2,c
  6921  003CC8  D008               	goto	u9120
  6922                           
  6923                           ; BSR set to: 0
  6924  003CCA  517C               	movf	(SetUartRefrashRate@retNum+3)& (0+255),w,b
  6925  003CCC  117B               	iorwf	(SetUartRefrashRate@retNum+2)& (0+255),w,b
  6926  003CCE  117A               	iorwf	(SetUartRefrashRate@retNum+1)& (0+255),w,b
  6927  003CD0  E107               	bnz	l9187
  6928  003CD2  0E15               	movlw	21
  6929  003CD4  5D79               	subwf	SetUartRefrashRate@retNum& (0+255),w,b
  6930  003CD6  B0D8               	btfsc	status,0,c
  6931  003CD8  D003               	goto	l1354
  6932  003CDA                     u9120:
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;SystemCommon.c: 124: {
  6936                           ;SystemCommon.c: 125: systemStatus.UartRefreshRate = retNum;
  6937  003CDA  C079  F03A         	movff	SetUartRefrashRate@retNum,_systemStatus+9	;volatile
  6938                           
  6939                           ;SystemCommon.c: 126: }
  6940  003CDE  0012               	return	
  6941  003CE0                     l1354:
  6942  003CE0                     l9187:
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;SystemCommon.c: 127: else
  6946                           ;SystemCommon.c: 128: UART_Write_Text("NOT OK \n\r");
  6947  003CE0  0ED0               	movlw	low STR_1
  6948  003CE2  6E19               	movwf	UART_Write_Text@text,c
  6949  003CE4  0E7F               	movlw	high STR_1
  6950  003CE6  6E1A               	movwf	UART_Write_Text@text+1,c
  6951  003CE8  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  6952  003CEC  0012               	return	
  6953  003CEE                     __end_of_SetUartRefrashRate:
  6954                           	opt stack 0
  6955                           tosu	equ	0xFFF
  6956                           tosh	equ	0xFFE
  6957                           tosl	equ	0xFFD
  6958                           pclath	equ	0xFFA
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodh	equ	0xFF4
  6964                           prodl	equ	0xFF3
  6965                           postinc0	equ	0xFEE
  6966                           wreg	equ	0xFE8
  6967                           indf1	equ	0xFE7
  6968                           postdec1	equ	0xFE5
  6969                           fsr1h	equ	0xFE2
  6970                           fsr1l	equ	0xFE1
  6971                           indf2	equ	0xFDF
  6972                           postinc2	equ	0xFDE
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function _SetUartMode *****************
  6978 ;; Defined at:
  6979 ;;		line 132 in file "SystemCommon.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;  data            2   23[BANK0 ] PTR unsigned char 
  6982 ;;		 -> rxMsgData(20), 
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;  retNum          4   25[BANK0 ] unsigned long 
  6985 ;; Return value:  Size  Location     Type
  6986 ;;                  1    wreg      void 
  6987 ;; Registers used:
  6988 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6994 ;;      Params:         0       2       0       0       0       0       0
  6995 ;;      Locals:         0       4       0       0       0       0       0
  6996 ;;      Temps:          0       0       0       0       0       0       0
  6997 ;;      Totals:         0       6       0       0       0       0       0
  6998 ;;Total ram usage:        6 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    7
  7001 ;; This function calls:
  7002 ;;		_GetIntFromUartData
  7003 ;;		_UART_Write_Text
  7004 ;; This function is called by:
  7005 ;;		_GroupCommon
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           	psect	text14
  7010  003BCC                     __ptext14:
  7011                           	opt stack 0
  7012  003BCC                     _SetUartMode:
  7013                           	opt stack 21
  7014                           
  7015                           ;SystemCommon.c: 134: uint32_t retNum =0;
  7016                           
  7017                           ;incstack = 0
  7018  003BCC  0E00               	movlw	0
  7019  003BCE  0100               	movlb	0	; () banked
  7020  003BD0  6F79               	movwf	SetUartMode@retNum& (0+255),b
  7021  003BD2  0E00               	movlw	0
  7022  003BD4  6F7A               	movwf	(SetUartMode@retNum+1)& (0+255),b
  7023  003BD6  0E00               	movlw	0
  7024  003BD8  6F7B               	movwf	(SetUartMode@retNum+2)& (0+255),b
  7025  003BDA  0E00               	movlw	0
  7026  003BDC  6F7C               	movwf	(SetUartMode@retNum+3)& (0+255),b
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;SystemCommon.c: 135: retNum = GetIntFromUartData(data);
  7030  003BDE  C077  F066         	movff	SetUartMode@data,GetIntFromUartData@data
  7031  003BE2  C078  F067         	movff	SetUartMode@data+1,GetIntFromUartData@data+1
  7032  003BE6  EC8B  F01A         	call	_GetIntFromUartData	;wreg free
  7033  003BEA  C066  F079         	movff	?_GetIntFromUartData,SetUartMode@retNum
  7034  003BEE  C067  F07A         	movff	?_GetIntFromUartData+1,SetUartMode@retNum+1
  7035  003BF2  C068  F07B         	movff	?_GetIntFromUartData+2,SetUartMode@retNum+2
  7036  003BF6  C069  F07C         	movff	?_GetIntFromUartData+3,SetUartMode@retNum+3
  7037                           
  7038                           ;SystemCommon.c: 136: if(retNum == 0)
  7039  003BFA  0100               	movlb	0	; () banked
  7040  003BFC  5179               	movf	SetUartMode@retNum& (0+255),w,b
  7041  003BFE  117A               	iorwf	(SetUartMode@retNum+1)& (0+255),w,b
  7042  003C00  117B               	iorwf	(SetUartMode@retNum+2)& (0+255),w,b
  7043  003C02  117C               	iorwf	(SetUartMode@retNum+3)& (0+255),w,b
  7044  003C04  A4D8               	btfss	status,2,c
  7045  003C06  D003               	goto	l1361
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;SystemCommon.c: 137: systemStatus.UartMode = 0;
  7049  003C08  0E00               	movlw	0
  7050  003C0A  6E39               	movwf	_systemStatus+8,c	;volatile
  7051  003C0C  0012               	return	
  7052  003C0E                     l1361:
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;SystemCommon.c: 138: else if(retNum == 1)
  7056                           
  7057                           ; BSR set to: 0
  7058  003C0E  0579               	decf	SetUartMode@retNum& (0+255),w,b
  7059  003C10  117A               	iorwf	(SetUartMode@retNum+1)& (0+255),w,b
  7060  003C12  117B               	iorwf	(SetUartMode@retNum+2)& (0+255),w,b
  7061  003C14  117C               	iorwf	(SetUartMode@retNum+3)& (0+255),w,b
  7062  003C16  A4D8               	btfss	status,2,c
  7063  003C18  D003               	goto	l1363
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;SystemCommon.c: 139: systemStatus.UartMode = 1;
  7067  003C1A  0E01               	movlw	1
  7068  003C1C  6E39               	movwf	_systemStatus+8,c	;volatile
  7069  003C1E  0012               	return	
  7070  003C20                     l1363:
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;SystemCommon.c: 140: else
  7074                           ;SystemCommon.c: 141: UART_Write_Text("NOT OK \n\r");
  7075                           
  7076                           ; BSR set to: 0
  7077  003C20  0ED0               	movlw	low STR_1
  7078  003C22  6E19               	movwf	UART_Write_Text@text,c
  7079  003C24  0E7F               	movlw	high STR_1
  7080  003C26  6E1A               	movwf	UART_Write_Text@text+1,c
  7081  003C28  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  7082  003C2C  0012               	return	
  7083  003C2E                     __end_of_SetUartMode:
  7084                           	opt stack 0
  7085                           tosu	equ	0xFFF
  7086                           tosh	equ	0xFFE
  7087                           tosl	equ	0xFFD
  7088                           pclath	equ	0xFFA
  7089                           tblptru	equ	0xFF8
  7090                           tblptrh	equ	0xFF7
  7091                           tblptrl	equ	0xFF6
  7092                           tablat	equ	0xFF5
  7093                           prodh	equ	0xFF4
  7094                           prodl	equ	0xFF3
  7095                           postinc0	equ	0xFEE
  7096                           wreg	equ	0xFE8
  7097                           indf1	equ	0xFE7
  7098                           postdec1	equ	0xFE5
  7099                           fsr1h	equ	0xFE2
  7100                           fsr1l	equ	0xFE1
  7101                           indf2	equ	0xFDF
  7102                           postinc2	equ	0xFDE
  7103                           fsr2h	equ	0xFDA
  7104                           fsr2l	equ	0xFD9
  7105                           status	equ	0xFD8
  7106                           
  7107 ;; *************** function _GetIntFromUartData *****************
  7108 ;; Defined at:
  7109 ;;		line 60 in file "SystemCommon.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;  data            2    6[BANK0 ] PTR unsigned char 
  7112 ;;		 -> rxMsgData(20), 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;  c               1   20[BANK0 ] unsigned char 
  7115 ;;  idx             2   21[BANK0 ] int 
  7116 ;;  dataRegArr      8   12[BANK0 ] unsigned char [8]
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  4    6[BANK0 ] unsigned long 
  7119 ;; Registers used:
  7120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7126 ;;      Params:         0       4       0       0       0       0       0
  7127 ;;      Locals:         0      11       0       0       0       0       0
  7128 ;;      Temps:          0       2       0       0       0       0       0
  7129 ;;      Totals:         0      17       0       0       0       0       0
  7130 ;;Total ram usage:       17 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; Hardware stack levels required when called:    6
  7133 ;; This function calls:
  7134 ;;		_ZeroArray
  7135 ;;		_strtol
  7136 ;; This function is called by:
  7137 ;;		_GroupRx
  7138 ;;		_GroupTx
  7139 ;;		_set_system_type
  7140 ;;		_SetUartRefrashRate
  7141 ;;		_SetUartMode
  7142 ;;		_DacSetValue
  7143 ;;		_UpdateSynthFreq
  7144 ;; This function uses a non-reentrant model
  7145 ;;
  7146                           
  7147                           	psect	text15
  7148  003516                     __ptext15:
  7149                           	opt stack 0
  7150  003516                     _GetIntFromUartData:
  7151                           	opt stack 22
  7152                           
  7153                           ;SystemCommon.c: 62: char dataRegArr[8];
  7154                           ;SystemCommon.c: 63: ZeroArray(dataRegArr, 8);
  7155                           
  7156                           ;incstack = 0
  7157  003516  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  7158  003518  6E20               	movwf	ZeroArray@array,c
  7159  00351A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  7160  00351C  6E21               	movwf	ZeroArray@array+1,c
  7161  00351E  0E00               	movlw	0
  7162  003520  6E23               	movwf	ZeroArray@size+1,c
  7163  003522  0E08               	movlw	8
  7164  003524  6E22               	movwf	ZeroArray@size,c
  7165  003526  ECA3  F022         	call	_ZeroArray	;wreg free
  7166                           
  7167                           ;SystemCommon.c: 65: for(int idx = 0; idx < 8; idx++)
  7168  00352A  0E00               	movlw	0
  7169  00352C  0100               	movlb	0	; () banked
  7170  00352E  6F76               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  7171  003530  0E00               	movlw	0
  7172  003532  6F75               	movwf	GetIntFromUartData@idx& (0+255),b
  7173  003534                     l8833:
  7174                           
  7175                           ; BSR set to: 0
  7176  003534  BF76               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  7177  003536  D006               	goto	l1328
  7178  003538  5176               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  7179  00353A  E120               	bnz	l8851
  7180  00353C  0E08               	movlw	8
  7181  00353E  5D75               	subwf	GetIntFromUartData@idx& (0+255),w,b
  7182  003540  B0D8               	btfsc	status,0,c
  7183  003542  D01C               	goto	u8830
  7184  003544                     l1328:
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;SystemCommon.c: 66: {
  7188                           ;SystemCommon.c: 67: char c = data[idx + 1];
  7189                           
  7190                           ; BSR set to: 0
  7191  003544  0E01               	movlw	1
  7192  003546  2575               	addwf	GetIntFromUartData@idx& (0+255),w,b
  7193  003548  6F6A               	movwf	??_GetIntFromUartData& (0+255),b
  7194  00354A  0E00               	movlw	0
  7195  00354C  2176               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  7196  00354E  6F6B               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  7197  003550  516A               	movf	??_GetIntFromUartData& (0+255),w,b
  7198  003552  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  7199  003554  6ED9               	movwf	fsr2l,c
  7200  003556  516B               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  7201  003558  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  7202  00355A  6EDA               	movwf	fsr2h,c
  7203  00355C  50DF               	movf	indf2,w,c
  7204  00355E  6F74               	movwf	GetIntFromUartData@c& (0+255),b
  7205                           
  7206                           ; BSR set to: 0
  7207                           ;SystemCommon.c: 68: if(c == (0))
  7208  003560  5174               	movf	GetIntFromUartData@c& (0+255),w,b
  7209  003562  B4D8               	btfsc	status,2,c
  7210  003564  D00B               	goto	u8830
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;SystemCommon.c: 72: else
  7214                           ;SystemCommon.c: 73: {
  7215                           ;SystemCommon.c: 74: dataRegArr[idx] = c;
  7216                           
  7217                           ; BSR set to: 0
  7218                           
  7219                           ; BSR set to: 0
  7220                           ;SystemCommon.c: 71: }
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;SystemCommon.c: 69: {
  7224                           ;SystemCommon.c: 70: break;
  7225  003566  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  7226  003568  2575               	addwf	GetIntFromUartData@idx& (0+255),w,b
  7227  00356A  6ED9               	movwf	fsr2l,c
  7228  00356C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  7229  00356E  2176               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  7230  003570  6EDA               	movwf	fsr2h,c
  7231  003572  C074  FFDF         	movff	GetIntFromUartData@c,indf2
  7232                           
  7233                           ; BSR set to: 0
  7234                           
  7235                           ; BSR set to: 0
  7236  003576  4B75               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  7237  003578  2B76               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  7238  00357A  D7DC               	goto	l8833
  7239  00357C                     u8830:
  7240  00357C                     l8851:
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;SystemCommon.c: 75: }
  7244                           ;SystemCommon.c: 76: }
  7245                           ;SystemCommon.c: 78: return strtol(dataRegArr, (0), 10);
  7246  00357C  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  7247  00357E  6E26               	movwf	strtol@s,c
  7248  003580  0E00               	movlw	high GetIntFromUartData@dataRegArr
  7249  003582  6E27               	movwf	strtol@s+1,c
  7250  003584  0E00               	movlw	0
  7251  003586  6E28               	movwf	strtol@endptr,c
  7252  003588  0E00               	movlw	0
  7253  00358A  6E29               	movwf	strtol@endptr+1,c
  7254  00358C  0E00               	movlw	0
  7255  00358E  6E2B               	movwf	strtol@base+1,c
  7256  003590  0E0A               	movlw	10
  7257  003592  6E2A               	movwf	strtol@base,c
  7258  003594  EC8A  F00B         	call	_strtol	;wreg free
  7259  003598  C026  F066         	movff	?_strtol,?_GetIntFromUartData
  7260  00359C  C027  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  7261  0035A0  C028  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  7262  0035A4  C029  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  7263  0035A8  0012               	return	
  7264  0035AA                     __end_of_GetIntFromUartData:
  7265                           	opt stack 0
  7266                           tosu	equ	0xFFF
  7267                           tosh	equ	0xFFE
  7268                           tosl	equ	0xFFD
  7269                           pclath	equ	0xFFA
  7270                           tblptru	equ	0xFF8
  7271                           tblptrh	equ	0xFF7
  7272                           tblptrl	equ	0xFF6
  7273                           tablat	equ	0xFF5
  7274                           prodh	equ	0xFF4
  7275                           prodl	equ	0xFF3
  7276                           postinc0	equ	0xFEE
  7277                           wreg	equ	0xFE8
  7278                           indf1	equ	0xFE7
  7279                           postdec1	equ	0xFE5
  7280                           fsr1h	equ	0xFE2
  7281                           fsr1l	equ	0xFE1
  7282                           indf2	equ	0xFDF
  7283                           postinc2	equ	0xFDE
  7284                           fsr2h	equ	0xFDA
  7285                           fsr2l	equ	0xFD9
  7286                           status	equ	0xFD8
  7287                           
  7288 ;; *************** function _strtol *****************
  7289 ;; Defined at:
  7290 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;  s               2   37[COMRAM] PTR const unsigned char 
  7293 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  7294 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  7295 ;;		 -> NULL(0), 
  7296 ;;  base            2   41[COMRAM] int 
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;  a               4    1[BANK0 ] long 
  7299 ;;  c               1    5[BANK0 ] unsigned char 
  7300 ;;  sign            1    0[BANK0 ] unsigned char 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  4   37[COMRAM] long 
  7303 ;; Registers used:
  7304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7310 ;;      Params:         6       0       0       0       0       0       0
  7311 ;;      Locals:         0       6       0       0       0       0       0
  7312 ;;      Temps:          4       0       0       0       0       0       0
  7313 ;;      Totals:        10       6       0       0       0       0       0
  7314 ;;Total ram usage:       16 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    5
  7317 ;; This function calls:
  7318 ;;		___lmul
  7319 ;;		_isalpha
  7320 ;;		_isdigit
  7321 ;;		_isspace
  7322 ;;		_toupper
  7323 ;; This function is called by:
  7324 ;;		_GetIntFromUartData
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           	psect	text16
  7329  001714                     __ptext16:
  7330                           	opt stack 0
  7331  001714                     _strtol:
  7332                           	opt stack 22
  7333                           
  7334                           ;incstack = 0
  7335  001714  C026  FFD9         	movff	strtol@s,fsr2l
  7336  001718  C027  FFDA         	movff	strtol@s+1,fsr2h
  7337  00171C  50DF               	movf	indf2,w,c
  7338  00171E  0100               	movlb	0	; () banked
  7339  001720  6F65               	movwf	strtol@c& (0+255),b
  7340                           
  7341                           ; BSR set to: 0
  7342  001722  4A26               	infsnz	strtol@s,f,c
  7343  001724  2A27               	incf	strtol@s+1,f,c
  7344                           
  7345                           ; BSR set to: 0
  7346  001726  5165               	movf	strtol@c& (0+255),w,b
  7347  001728  EC3B  F022         	call	_isspace
  7348  00172C  B0D8               	btfsc	status,0,c
  7349  00172E  D7F2               	goto	_strtol
  7350  001730  0E00               	movlw	0
  7351  001732  0100               	movlb	0	; () banked
  7352  001734  6F61               	movwf	strtol@a& (0+255),b
  7353  001736  0E00               	movlw	0
  7354  001738  6F62               	movwf	(strtol@a+1)& (0+255),b
  7355  00173A  0E00               	movlw	0
  7356  00173C  6F63               	movwf	(strtol@a+2)& (0+255),b
  7357  00173E  0E00               	movlw	0
  7358  001740  6F64               	movwf	(strtol@a+3)& (0+255),b
  7359  001742  0E00               	movlw	0
  7360  001744  6F60               	movwf	strtol@sign& (0+255),b
  7361                           
  7362                           ; BSR set to: 0
  7363  001746  0E2D               	movlw	45
  7364  001748  1965               	xorwf	strtol@c& (0+255),w,b
  7365  00174A  A4D8               	btfss	status,2,c
  7366  00174C  D003               	goto	l2335
  7367                           
  7368                           ; BSR set to: 0
  7369  00174E  0E01               	movlw	1
  7370  001750  6F60               	movwf	strtol@sign& (0+255),b
  7371  001752  D004               	goto	u7860
  7372  001754                     l2335:
  7373                           
  7374                           ; BSR set to: 0
  7375                           
  7376                           ; BSR set to: 0
  7377  001754  0E2B               	movlw	43
  7378  001756  1965               	xorwf	strtol@c& (0+255),w,b
  7379  001758  A4D8               	btfss	status,2,c
  7380  00175A  D008               	goto	l2337
  7381  00175C                     u7860:
  7382                           
  7383                           ; BSR set to: 0
  7384  00175C  C026  FFD9         	movff	strtol@s,fsr2l
  7385  001760  C027  FFDA         	movff	strtol@s+1,fsr2h
  7386  001764  50DF               	movf	indf2,w,c
  7387  001766  6F65               	movwf	strtol@c& (0+255),b
  7388                           
  7389                           ; BSR set to: 0
  7390  001768  4A26               	infsnz	strtol@s,f,c
  7391  00176A  2A27               	incf	strtol@s+1,f,c
  7392  00176C                     l2337:
  7393                           
  7394                           ; BSR set to: 0
  7395                           
  7396                           ; BSR set to: 0
  7397                           
  7398                           ; BSR set to: 0
  7399  00176C  0E30               	movlw	48
  7400  00176E  1965               	xorwf	strtol@c& (0+255),w,b
  7401  001770  A4D8               	btfss	status,2,c
  7402  001772  D02E               	goto	l2345
  7403                           
  7404                           ; BSR set to: 0
  7405  001774  C026  FFD9         	movff	strtol@s,fsr2l
  7406  001778  C027  FFDA         	movff	strtol@s+1,fsr2h
  7407  00177C  50DF               	movf	indf2,w,c
  7408  00177E  6F65               	movwf	strtol@c& (0+255),b
  7409                           
  7410                           ; BSR set to: 0
  7411  001780  4A26               	infsnz	strtol@s,f,c
  7412  001782  2A27               	incf	strtol@s+1,f,c
  7413                           
  7414                           ; BSR set to: 0
  7415  001784  502A               	movf	strtol@base,w,c
  7416  001786  102B               	iorwf	strtol@base+1,w,c
  7417  001788  B4D8               	btfsc	status,2,c
  7418  00178A  D005               	goto	u7890
  7419                           
  7420                           ; BSR set to: 0
  7421  00178C  0E10               	movlw	16
  7422  00178E  182A               	xorwf	strtol@base,w,c
  7423  001790  102B               	iorwf	strtol@base+1,w,c
  7424  001792  A4D8               	btfss	status,2,c
  7425  001794  D015               	goto	l2339
  7426  001796                     u7890:
  7427                           
  7428                           ; BSR set to: 0
  7429                           
  7430                           ; BSR set to: 0
  7431  001796  0E78               	movlw	120
  7432  001798  1965               	xorwf	strtol@c& (0+255),w,b
  7433  00179A  B4D8               	btfsc	status,2,c
  7434  00179C  D004               	goto	u7910
  7435                           
  7436                           ; BSR set to: 0
  7437  00179E  0E58               	movlw	88
  7438  0017A0  1965               	xorwf	strtol@c& (0+255),w,b
  7439  0017A2  A4D8               	btfss	status,2,c
  7440  0017A4  D00D               	goto	l2339
  7441  0017A6                     u7910:
  7442                           
  7443                           ; BSR set to: 0
  7444                           
  7445                           ; BSR set to: 0
  7446  0017A6  0E00               	movlw	0
  7447  0017A8  6E2B               	movwf	strtol@base+1,c
  7448  0017AA  0E10               	movlw	16
  7449  0017AC  6E2A               	movwf	strtol@base,c
  7450                           
  7451                           ; BSR set to: 0
  7452  0017AE  C026  FFD9         	movff	strtol@s,fsr2l
  7453  0017B2  C027  FFDA         	movff	strtol@s+1,fsr2h
  7454  0017B6  50DF               	movf	indf2,w,c
  7455  0017B8  6F65               	movwf	strtol@c& (0+255),b
  7456                           
  7457                           ; BSR set to: 0
  7458  0017BA  4A26               	infsnz	strtol@s,f,c
  7459  0017BC  2A27               	incf	strtol@s+1,f,c
  7460  0017BE  D008               	goto	l2345
  7461  0017C0                     l2339:
  7462                           
  7463                           ; BSR set to: 0
  7464                           
  7465                           ; BSR set to: 0
  7466  0017C0  502A               	movf	strtol@base,w,c
  7467  0017C2  102B               	iorwf	strtol@base+1,w,c
  7468  0017C4  A4D8               	btfss	status,2,c
  7469  0017C6  D004               	goto	l2345
  7470                           
  7471                           ; BSR set to: 0
  7472  0017C8  0E00               	movlw	0
  7473  0017CA  6E2B               	movwf	strtol@base+1,c
  7474  0017CC  0E08               	movlw	8
  7475  0017CE  6E2A               	movwf	strtol@base,c
  7476  0017D0                     l2345:
  7477                           
  7478                           ; BSR set to: 0
  7479                           
  7480                           ; BSR set to: 0
  7481                           
  7482                           ; BSR set to: 0
  7483                           
  7484                           ; BSR set to: 0
  7485  0017D0  502A               	movf	strtol@base,w,c
  7486  0017D2  102B               	iorwf	strtol@base+1,w,c
  7487  0017D4  A4D8               	btfss	status,2,c
  7488  0017D6  D004               	goto	l2346
  7489                           
  7490                           ; BSR set to: 0
  7491  0017D8  0E00               	movlw	0
  7492  0017DA  6E2B               	movwf	strtol@base+1,c
  7493  0017DC  0E0A               	movlw	10
  7494  0017DE  6E2A               	movwf	strtol@base,c
  7495  0017E0                     l2346:
  7496                           
  7497                           ; BSR set to: 0
  7498                           
  7499                           ; BSR set to: 0
  7500                           
  7501                           ; BSR set to: 0
  7502  0017E0  5165               	movf	strtol@c& (0+255),w,b
  7503  0017E2  EC27  F022         	call	_isalpha
  7504  0017E6  A0D8               	btfss	status,0,c
  7505  0017E8  D008               	goto	l2348
  7506  0017EA  0100               	movlb	0	; () banked
  7507  0017EC  5165               	movf	strtol@c& (0+255),w,b
  7508  0017EE  ECEF  F022         	call	_toupper
  7509  0017F2  0FC9               	addlw	201
  7510  0017F4  0100               	movlb	0	; () banked
  7511  0017F6  6F65               	movwf	strtol@c& (0+255),b
  7512  0017F8  D009               	goto	l2351
  7513  0017FA                     l2348:
  7514                           
  7515                           ; BSR set to: 0
  7516  0017FA  0100               	movlb	0	; () banked
  7517  0017FC  5165               	movf	strtol@c& (0+255),w,b
  7518  0017FE  EC85  F022         	call	_isdigit
  7519  001802  A0D8               	btfss	status,0,c
  7520  001804  D039               	goto	l2352
  7521  001806  0E30               	movlw	48
  7522  001808  0100               	movlb	0	; () banked
  7523  00180A  5F65               	subwf	strtol@c& (0+255),f,b
  7524  00180C                     l2351:
  7525                           
  7526                           ; BSR set to: 0
  7527                           
  7528                           ; BSR set to: 0
  7529                           
  7530                           ; BSR set to: 0
  7531  00180C  5165               	movf	strtol@c& (0+255),w,b
  7532  00180E  6E2C               	movwf	??_strtol& (0+255),c
  7533  001810  6A2D               	clrf	(??_strtol+1)& (0+255),c
  7534  001812  502A               	movf	strtol@base,w,c
  7535  001814  5C2C               	subwf	??_strtol,w,c
  7536  001816  502D               	movf	??_strtol+1,w,c
  7537  001818  0A80               	xorlw	128
  7538  00181A  6E2E               	movwf	(??_strtol+2)& (0+255),c
  7539  00181C  502B               	movf	strtol@base+1,w,c
  7540  00181E  0A80               	xorlw	128
  7541  001820  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  7542  001822  B0D8               	btfsc	status,0,c
  7543  001824  D029               	goto	l2352
  7544                           
  7545                           ; BSR set to: 0
  7546                           
  7547                           ; BSR set to: 0
  7548                           
  7549                           ; BSR set to: 0
  7550  001826  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  7551  00182A  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  7552  00182E  0E00               	movlw	0
  7553  001830  BE1B               	btfsc	___lmul@multiplier+1,7,c
  7554  001832  0EFF               	movlw	-1
  7555  001834  6E1C               	movwf	___lmul@multiplier+2,c
  7556  001836  6E1D               	movwf	___lmul@multiplier+3,c
  7557  001838  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  7558  00183C  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  7559  001840  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  7560  001844  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  7561  001848  ECDF  F01F         	call	___lmul	;wreg free
  7562  00184C  0100               	movlb	0	; () banked
  7563  00184E  5165               	movf	strtol@c& (0+255),w,b
  7564  001850  241A               	addwf	?___lmul,w,c
  7565  001852  6F61               	movwf	strtol@a& (0+255),b
  7566  001854  0E00               	movlw	0
  7567  001856  201B               	addwfc	?___lmul+1,w,c
  7568  001858  6F62               	movwf	(strtol@a+1)& (0+255),b
  7569  00185A  0E00               	movlw	0
  7570  00185C  201C               	addwfc	?___lmul+2,w,c
  7571  00185E  6F63               	movwf	(strtol@a+2)& (0+255),b
  7572  001860  0E00               	movlw	0
  7573  001862  201D               	addwfc	?___lmul+3,w,c
  7574  001864  6F64               	movwf	(strtol@a+3)& (0+255),b
  7575                           
  7576                           ; BSR set to: 0
  7577  001866  C026  FFD9         	movff	strtol@s,fsr2l
  7578  00186A  C027  FFDA         	movff	strtol@s+1,fsr2h
  7579  00186E  50DF               	movf	indf2,w,c
  7580  001870  6F65               	movwf	strtol@c& (0+255),b
  7581                           
  7582                           ; BSR set to: 0
  7583  001872  4A26               	infsnz	strtol@s,f,c
  7584  001874  2A27               	incf	strtol@s+1,f,c
  7585  001876  D7B4               	goto	l2346
  7586  001878                     l2352:
  7587                           
  7588                           ; BSR set to: 0
  7589  001878  5028               	movf	strtol@endptr,w,c
  7590  00187A  1029               	iorwf	strtol@endptr+1,w,c
  7591  00187C  B4D8               	btfsc	status,2,c
  7592  00187E  D00E               	goto	l2354
  7593  001880  0EFF               	movlw	255
  7594  001882  2426               	addwf	strtol@s,w,c
  7595  001884  6E2C               	movwf	??_strtol& (0+255),c
  7596  001886  0EFF               	movlw	255
  7597  001888  2027               	addwfc	strtol@s+1,w,c
  7598  00188A  6E2D               	movwf	(??_strtol+1)& (0+255),c
  7599  00188C  C028  FFD9         	movff	strtol@endptr,fsr2l
  7600  001890  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  7601  001894  C02C  FFDE         	movff	??_strtol,postinc2
  7602  001898  C02D  FFDD         	movff	??_strtol+1,postdec2
  7603  00189C                     l2354:
  7604  00189C  0100               	movlb	0	; () banked
  7605  00189E  5160               	movf	strtol@sign& (0+255),w,b
  7606  0018A0  B4D8               	btfsc	status,2,c
  7607  0018A2  D01A               	goto	l2355
  7608                           
  7609                           ; BSR set to: 0
  7610  0018A4  C061  F02C         	movff	strtol@a,??_strtol
  7611  0018A8  C062  F02D         	movff	strtol@a+1,??_strtol+1
  7612  0018AC  C063  F02E         	movff	strtol@a+2,??_strtol+2
  7613  0018B0  C064  F02F         	movff	strtol@a+3,??_strtol+3
  7614  0018B4  1E2C               	comf	??_strtol,f,c
  7615  0018B6  1E2D               	comf	??_strtol+1,f,c
  7616  0018B8  1E2E               	comf	??_strtol+2,f,c
  7617  0018BA  1E2F               	comf	??_strtol+3,f,c
  7618  0018BC  2A2C               	incf	??_strtol,f,c
  7619  0018BE  0E00               	movlw	0
  7620  0018C0  222D               	addwfc	??_strtol+1,f,c
  7621  0018C2  222E               	addwfc	??_strtol+2,f,c
  7622  0018C4  222F               	addwfc	??_strtol+3,f,c
  7623  0018C6  C02C  F026         	movff	??_strtol,?_strtol
  7624  0018CA  C02D  F027         	movff	??_strtol+1,?_strtol+1
  7625  0018CE  C02E  F028         	movff	??_strtol+2,?_strtol+2
  7626  0018D2  C02F  F029         	movff	??_strtol+3,?_strtol+3
  7627                           
  7628                           ; BSR set to: 0
  7629  0018D6  0012               	return	
  7630  0018D8                     l2355:
  7631                           
  7632                           ; BSR set to: 0
  7633  0018D8  C061  F026         	movff	strtol@a,?_strtol
  7634  0018DC  C062  F027         	movff	strtol@a+1,?_strtol+1
  7635  0018E0  C063  F028         	movff	strtol@a+2,?_strtol+2
  7636  0018E4  C064  F029         	movff	strtol@a+3,?_strtol+3
  7637                           
  7638                           ; BSR set to: 0
  7639  0018E8  0012               	return		;funcret
  7640  0018EA                     __end_of_strtol:
  7641                           	opt stack 0
  7642                           tosu	equ	0xFFF
  7643                           tosh	equ	0xFFE
  7644                           tosl	equ	0xFFD
  7645                           pclath	equ	0xFFA
  7646                           tblptru	equ	0xFF8
  7647                           tblptrh	equ	0xFF7
  7648                           tblptrl	equ	0xFF6
  7649                           tablat	equ	0xFF5
  7650                           prodh	equ	0xFF4
  7651                           prodl	equ	0xFF3
  7652                           postinc0	equ	0xFEE
  7653                           wreg	equ	0xFE8
  7654                           indf1	equ	0xFE7
  7655                           postdec1	equ	0xFE5
  7656                           fsr1h	equ	0xFE2
  7657                           fsr1l	equ	0xFE1
  7658                           indf2	equ	0xFDF
  7659                           postinc2	equ	0xFDE
  7660                           postdec2	equ	0xFDD
  7661                           fsr2h	equ	0xFDA
  7662                           fsr2l	equ	0xFD9
  7663                           status	equ	0xFD8
  7664                           
  7665 ;; *************** function _toupper *****************
  7666 ;; Defined at:
  7667 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;  c               1    wreg     unsigned char 
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;  c               1   23[COMRAM] unsigned char 
  7672 ;; Return value:  Size  Location     Type
  7673 ;;                  1    wreg      unsigned char 
  7674 ;; Registers used:
  7675 ;;		wreg, status,2, status,0
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7681 ;;      Params:         0       0       0       0       0       0       0
  7682 ;;      Locals:         1       0       0       0       0       0       0
  7683 ;;      Temps:          0       0       0       0       0       0       0
  7684 ;;      Totals:         1       0       0       0       0       0       0
  7685 ;;Total ram usage:        1 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; Hardware stack levels required when called:    3
  7688 ;; This function calls:
  7689 ;;		Nothing
  7690 ;; This function is called by:
  7691 ;;		_readUartByte
  7692 ;;		_strtol
  7693 ;; This function uses a non-reentrant model
  7694 ;;
  7695                           
  7696                           	psect	text17
  7697  0045DE                     __ptext17:
  7698                           	opt stack 0
  7699  0045DE                     _toupper:
  7700                           	opt stack 26
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;incstack = 0
  7704                           ;toupper@c stored from wreg
  7705  0045DE  6E18               	movwf	toupper@c,c
  7706  0045E0  0E7B               	movlw	123
  7707  0045E2  6018               	cpfslt	toupper@c,c
  7708  0045E4  D004               	goto	l2359
  7709  0045E6  0E60               	movlw	96
  7710  0045E8  6418               	cpfsgt	toupper@c,c
  7711  0045EA  D001               	goto	l2359
  7712  0045EC  9A18               	bcf	toupper@c,5,c
  7713  0045EE                     l2359:
  7714  0045EE  5018               	movf	toupper@c,w,c
  7715  0045F0  0012               	return	
  7716  0045F2                     __end_of_toupper:
  7717                           	opt stack 0
  7718                           tosu	equ	0xFFF
  7719                           tosh	equ	0xFFE
  7720                           tosl	equ	0xFFD
  7721                           pclath	equ	0xFFA
  7722                           tblptru	equ	0xFF8
  7723                           tblptrh	equ	0xFF7
  7724                           tblptrl	equ	0xFF6
  7725                           tablat	equ	0xFF5
  7726                           prodh	equ	0xFF4
  7727                           prodl	equ	0xFF3
  7728                           postinc0	equ	0xFEE
  7729                           wreg	equ	0xFE8
  7730                           indf1	equ	0xFE7
  7731                           postdec1	equ	0xFE5
  7732                           fsr1h	equ	0xFE2
  7733                           fsr1l	equ	0xFE1
  7734                           indf2	equ	0xFDF
  7735                           postinc2	equ	0xFDE
  7736                           postdec2	equ	0xFDD
  7737                           fsr2h	equ	0xFDA
  7738                           fsr2l	equ	0xFD9
  7739                           status	equ	0xFD8
  7740                           
  7741 ;; *************** function _isspace *****************
  7742 ;; Defined at:
  7743 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;  c               1    wreg     unsigned char 
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;  c               1   25[COMRAM] unsigned char 
  7748 ;; Return value:  Size  Location     Type
  7749 ;;		None               void
  7750 ;; Registers used:
  7751 ;;		wreg, status,2, status,0
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7757 ;;      Params:         0       0       0       0       0       0       0
  7758 ;;      Locals:         2       0       0       0       0       0       0
  7759 ;;      Temps:          1       0       0       0       0       0       0
  7760 ;;      Totals:         3       0       0       0       0       0       0
  7761 ;;Total ram usage:        3 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    3
  7764 ;; This function calls:
  7765 ;;		Nothing
  7766 ;; This function is called by:
  7767 ;;		_strtol
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           	psect	text18
  7772  004476                     __ptext18:
  7773                           	opt stack 0
  7774  004476                     _isspace:
  7775                           	opt stack 23
  7776                           
  7777                           ;incstack = 0
  7778                           ;isspace@c stored from wreg
  7779  004476  6E1A               	movwf	isspace@c,c
  7780  004478  0E01               	movlw	1
  7781  00447A  6E19               	movwf	_isspace$3686,c
  7782  00447C  0E20               	movlw	32
  7783  00447E  181A               	xorwf	isspace@c,w,c
  7784  004480  B4D8               	btfsc	status,2,c
  7785  004482  D008               	goto	l2441
  7786  004484  0E0E               	movlw	14
  7787  004486  601A               	cpfslt	isspace@c,c
  7788  004488  D003               	goto	u7650
  7789  00448A  0E09               	movlw	9
  7790  00448C  601A               	cpfslt	isspace@c,c
  7791  00448E  D002               	goto	l2441
  7792  004490                     u7650:
  7793  004490  0E00               	movlw	0
  7794  004492  6E19               	movwf	_isspace$3686,c
  7795  004494                     l2441:
  7796  004494  C019  F018         	movff	_isspace$3686,??_isspace
  7797  004498  3018               	rrcf	??_isspace,w,c
  7798  00449A  0012               	return	
  7799  00449C                     __end_of_isspace:
  7800                           	opt stack 0
  7801                           tosu	equ	0xFFF
  7802                           tosh	equ	0xFFE
  7803                           tosl	equ	0xFFD
  7804                           pclath	equ	0xFFA
  7805                           tblptru	equ	0xFF8
  7806                           tblptrh	equ	0xFF7
  7807                           tblptrl	equ	0xFF6
  7808                           tablat	equ	0xFF5
  7809                           prodh	equ	0xFF4
  7810                           prodl	equ	0xFF3
  7811                           postinc0	equ	0xFEE
  7812                           wreg	equ	0xFE8
  7813                           indf1	equ	0xFE7
  7814                           postdec1	equ	0xFE5
  7815                           fsr1h	equ	0xFE2
  7816                           fsr1l	equ	0xFE1
  7817                           indf2	equ	0xFDF
  7818                           postinc2	equ	0xFDE
  7819                           postdec2	equ	0xFDD
  7820                           fsr2h	equ	0xFDA
  7821                           fsr2l	equ	0xFD9
  7822                           status	equ	0xFD8
  7823                           
  7824 ;; *************** function _isdigit *****************
  7825 ;; Defined at:
  7826 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;  c               1    wreg     unsigned char 
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;  c               1   25[COMRAM] unsigned char 
  7831 ;; Return value:  Size  Location     Type
  7832 ;;		None               void
  7833 ;; Registers used:
  7834 ;;		wreg, status,2, status,0
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/0
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7840 ;;      Params:         0       0       0       0       0       0       0
  7841 ;;      Locals:         2       0       0       0       0       0       0
  7842 ;;      Temps:          1       0       0       0       0       0       0
  7843 ;;      Totals:         3       0       0       0       0       0       0
  7844 ;;Total ram usage:        3 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; Hardware stack levels required when called:    3
  7847 ;; This function calls:
  7848 ;;		Nothing
  7849 ;; This function is called by:
  7850 ;;		_strtol
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           	psect	text19
  7855  00450A                     __ptext19:
  7856                           	opt stack 0
  7857  00450A                     _isdigit:
  7858                           	opt stack 23
  7859                           
  7860                           ;incstack = 0
  7861                           ;isdigit@c stored from wreg
  7862  00450A  6E1A               	movwf	isdigit@c,c
  7863  00450C  0E00               	movlw	0
  7864  00450E  6E19               	movwf	_isdigit$3683,c
  7865  004510  0E3A               	movlw	58
  7866  004512  601A               	cpfslt	isdigit@c,c
  7867  004514  D005               	goto	l2436
  7868  004516  0E2F               	movlw	47
  7869  004518  641A               	cpfsgt	isdigit@c,c
  7870  00451A  D002               	goto	l2436
  7871  00451C  0E01               	movlw	1
  7872  00451E  6E19               	movwf	_isdigit$3683,c
  7873  004520                     l2436:
  7874  004520  C019  F018         	movff	_isdigit$3683,??_isdigit
  7875  004524  3018               	rrcf	??_isdigit,w,c
  7876  004526  0012               	return	
  7877  004528                     __end_of_isdigit:
  7878                           	opt stack 0
  7879                           tosu	equ	0xFFF
  7880                           tosh	equ	0xFFE
  7881                           tosl	equ	0xFFD
  7882                           pclath	equ	0xFFA
  7883                           tblptru	equ	0xFF8
  7884                           tblptrh	equ	0xFF7
  7885                           tblptrl	equ	0xFF6
  7886                           tablat	equ	0xFF5
  7887                           prodh	equ	0xFF4
  7888                           prodl	equ	0xFF3
  7889                           postinc0	equ	0xFEE
  7890                           wreg	equ	0xFE8
  7891                           indf1	equ	0xFE7
  7892                           postdec1	equ	0xFE5
  7893                           fsr1h	equ	0xFE2
  7894                           fsr1l	equ	0xFE1
  7895                           indf2	equ	0xFDF
  7896                           postinc2	equ	0xFDE
  7897                           postdec2	equ	0xFDD
  7898                           fsr2h	equ	0xFDA
  7899                           fsr2l	equ	0xFD9
  7900                           status	equ	0xFD8
  7901                           
  7902 ;; *************** function _isalpha *****************
  7903 ;; Defined at:
  7904 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;  c               1    wreg     unsigned char 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  c               1   28[COMRAM] unsigned char 
  7909 ;; Return value:  Size  Location     Type
  7910 ;;		None               void
  7911 ;; Registers used:
  7912 ;;		wreg, status,2, status,0, cstack
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7918 ;;      Params:         0       0       0       0       0       0       0
  7919 ;;      Locals:         2       0       0       0       0       0       0
  7920 ;;      Temps:          1       0       0       0       0       0       0
  7921 ;;      Totals:         3       0       0       0       0       0       0
  7922 ;;Total ram usage:        3 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:    4
  7925 ;; This function calls:
  7926 ;;		_isupper
  7927 ;; This function is called by:
  7928 ;;		_strtol
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           	psect	text20
  7933  00444E                     __ptext20:
  7934                           	opt stack 0
  7935  00444E                     _isalpha:
  7936                           	opt stack 22
  7937                           
  7938                           ;incstack = 0
  7939                           ;isalpha@c stored from wreg
  7940  00444E  6E1D               	movwf	isalpha@c,c
  7941  004450  0E01               	movlw	1
  7942  004452  6E1C               	movwf	_isalpha$3680,c
  7943  004454  0E7B               	movlw	123
  7944  004456  601D               	cpfslt	isalpha@c,c
  7945  004458  D003               	goto	u7670
  7946  00445A  0E61               	movlw	97
  7947  00445C  601D               	cpfslt	isalpha@c,c
  7948  00445E  D007               	goto	l2431
  7949  004460                     u7670:
  7950  004460  501D               	movf	isalpha@c,w,c
  7951  004462  EC94  F022         	call	_isupper
  7952  004466  B0D8               	btfsc	status,0,c
  7953  004468  D002               	goto	l2431
  7954  00446A  0E00               	movlw	0
  7955  00446C  6E1C               	movwf	_isalpha$3680,c
  7956  00446E                     l2431:
  7957  00446E  C01C  F01B         	movff	_isalpha$3680,??_isalpha
  7958  004472  301B               	rrcf	??_isalpha,w,c
  7959  004474  0012               	return	
  7960  004476                     __end_of_isalpha:
  7961                           	opt stack 0
  7962                           tosu	equ	0xFFF
  7963                           tosh	equ	0xFFE
  7964                           tosl	equ	0xFFD
  7965                           pclath	equ	0xFFA
  7966                           tblptru	equ	0xFF8
  7967                           tblptrh	equ	0xFF7
  7968                           tblptrl	equ	0xFF6
  7969                           tablat	equ	0xFF5
  7970                           prodh	equ	0xFF4
  7971                           prodl	equ	0xFF3
  7972                           postinc0	equ	0xFEE
  7973                           wreg	equ	0xFE8
  7974                           indf1	equ	0xFE7
  7975                           postdec1	equ	0xFE5
  7976                           fsr1h	equ	0xFE2
  7977                           fsr1l	equ	0xFE1
  7978                           indf2	equ	0xFDF
  7979                           postinc2	equ	0xFDE
  7980                           postdec2	equ	0xFDD
  7981                           fsr2h	equ	0xFDA
  7982                           fsr2l	equ	0xFD9
  7983                           status	equ	0xFD8
  7984                           
  7985 ;; *************** function _isupper *****************
  7986 ;; Defined at:
  7987 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;  c               1    wreg     unsigned char 
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;  c               1   25[COMRAM] unsigned char 
  7992 ;; Return value:  Size  Location     Type
  7993 ;;		None               void
  7994 ;; Registers used:
  7995 ;;		wreg, status,2, status,0
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8001 ;;      Params:         0       0       0       0       0       0       0
  8002 ;;      Locals:         2       0       0       0       0       0       0
  8003 ;;      Temps:          1       0       0       0       0       0       0
  8004 ;;      Totals:         3       0       0       0       0       0       0
  8005 ;;Total ram usage:        3 bytes
  8006 ;; Hardware stack levels used:    1
  8007 ;; Hardware stack levels required when called:    3
  8008 ;; This function calls:
  8009 ;;		Nothing
  8010 ;; This function is called by:
  8011 ;;		_isalpha
  8012 ;; This function uses a non-reentrant model
  8013 ;;
  8014                           
  8015                           	psect	text21
  8016  004528                     __ptext21:
  8017                           	opt stack 0
  8018  004528                     _isupper:
  8019                           	opt stack 22
  8020                           
  8021                           ;incstack = 0
  8022                           ;isupper@c stored from wreg
  8023  004528  6E1A               	movwf	isupper@c,c
  8024  00452A  0E00               	movlw	0
  8025  00452C  6E19               	movwf	_isupper$3689,c
  8026  00452E  0E5B               	movlw	91
  8027  004530  601A               	cpfslt	isupper@c,c
  8028  004532  D005               	goto	l2446
  8029  004534  0E40               	movlw	64
  8030  004536  641A               	cpfsgt	isupper@c,c
  8031  004538  D002               	goto	l2446
  8032  00453A  0E01               	movlw	1
  8033  00453C  6E19               	movwf	_isupper$3689,c
  8034  00453E                     l2446:
  8035  00453E  C019  F018         	movff	_isupper$3689,??_isupper
  8036  004542  3018               	rrcf	??_isupper,w,c
  8037  004544  0012               	return	
  8038  004546                     __end_of_isupper:
  8039                           	opt stack 0
  8040                           tosu	equ	0xFFF
  8041                           tosh	equ	0xFFE
  8042                           tosl	equ	0xFFD
  8043                           pclath	equ	0xFFA
  8044                           tblptru	equ	0xFF8
  8045                           tblptrh	equ	0xFF7
  8046                           tblptrl	equ	0xFF6
  8047                           tablat	equ	0xFF5
  8048                           prodh	equ	0xFF4
  8049                           prodl	equ	0xFF3
  8050                           postinc0	equ	0xFEE
  8051                           wreg	equ	0xFE8
  8052                           indf1	equ	0xFE7
  8053                           postdec1	equ	0xFE5
  8054                           fsr1h	equ	0xFE2
  8055                           fsr1l	equ	0xFE1
  8056                           indf2	equ	0xFDF
  8057                           postinc2	equ	0xFDE
  8058                           postdec2	equ	0xFDD
  8059                           fsr2h	equ	0xFDA
  8060                           fsr2l	equ	0xFD9
  8061                           status	equ	0xFD8
  8062                           
  8063 ;; *************** function _SaveSystemStatus *****************
  8064 ;; Defined at:
  8065 ;;		line 28 in file "SystemStatus.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;		None
  8068 ;; Auto vars:     Size  Location     Type
  8069 ;;		None
  8070 ;; Return value:  Size  Location     Type
  8071 ;;                  1    wreg      void 
  8072 ;; Registers used:
  8073 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : 0/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8079 ;;      Params:         0       0       0       0       0       0       0
  8080 ;;      Locals:         0       0       0       0       0       0       0
  8081 ;;      Temps:          0       0       0       0       0       0       0
  8082 ;;      Totals:         0       0       0       0       0       0       0
  8083 ;;Total ram usage:        0 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:    6
  8086 ;; This function calls:
  8087 ;;		_StoreIntInEeprom
  8088 ;; This function is called by:
  8089 ;;		_GroupCommon
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           	psect	text22
  8094  003944                     __ptext22:
  8095                           	opt stack 0
  8096  003944                     _SaveSystemStatus:
  8097                           	opt stack 22
  8098                           
  8099                           ;SystemStatus.c: 30: StoreIntInEeprom(systemStatus.UnitType,(0x50) | SYSTEM_INFO_ADDRES[
      +                          0], 1);
  8100                           
  8101                           ;incstack = 0
  8102  003944  5034               	movf	_systemStatus+3,w,c	;volatile
  8103  003946  6E21               	movwf	StoreIntInEeprom@data,c
  8104  003948  6A22               	clrf	StoreIntInEeprom@data+1,c
  8105  00394A  6A23               	clrf	StoreIntInEeprom@data+2,c
  8106  00394C  6A24               	clrf	StoreIntInEeprom@data+3,c
  8107  00394E  0E37               	movlw	low _SYSTEM_INFO_ADDRES
  8108  003950  6EF6               	movwf	tblptrl,c
  8109  003952                     	if	1	;There is more than 1 active tblptr byte
  8110  003952  0E78               	movlw	high _SYSTEM_INFO_ADDRES
  8111  003954  6EF7               	movwf	tblptrh,c
  8112  003956                     	endif
  8113  003956                     	if	0	;There are less than 3 active tblptr bytes
  8114  003956                     	endif
  8115  003956  0008               	tblrd		*
  8116  003958  50F5               	movf	tablat,w,c
  8117  00395A  0950               	iorlw	80
  8118  00395C  6E25               	movwf	StoreIntInEeprom@address,c
  8119  00395E  0E00               	movlw	0
  8120  003960  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  8121  003962  0E01               	movlw	1
  8122  003964  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  8123  003966  EC3C  F021         	call	_StoreIntInEeprom	;wreg free
  8124                           
  8125                           ;SystemStatus.c: 31: StoreIntInEeprom(systemStatus.UartMode,(0x50) | SYSTEM_INFO_ADDRES[
      +                          1], 1);
  8126  00396A  5039               	movf	_systemStatus+8,w,c	;volatile
  8127  00396C  6E21               	movwf	StoreIntInEeprom@data,c
  8128  00396E  6A22               	clrf	StoreIntInEeprom@data+1,c
  8129  003970  6A23               	clrf	StoreIntInEeprom@data+2,c
  8130  003972  6A24               	clrf	StoreIntInEeprom@data+3,c
  8131  003974  0E38               	movlw	low (_SYSTEM_INFO_ADDRES+1)
  8132  003976  6EF6               	movwf	tblptrl,c
  8133  003978  0E78               	movlw	high (_SYSTEM_INFO_ADDRES+1)
  8134  00397A  6EF7               	movwf	tblptrh,c
  8135  00397C                     	if	0	;tblptru may be non-zero
  8136  00397C                     	endif
  8137  00397C                     	if	0	;tblptru may be non-zero
  8138  00397C                     	endif
  8139  00397C  0008               	tblrd		*
  8140  00397E  50F5               	movf	tablat,w,c
  8141  003980  0950               	iorlw	80
  8142  003982  6E25               	movwf	StoreIntInEeprom@address,c
  8143  003984  0E00               	movlw	0
  8144  003986  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  8145  003988  0E01               	movlw	1
  8146  00398A  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  8147  00398C  EC3C  F021         	call	_StoreIntInEeprom	;wreg free
  8148                           
  8149                           ;SystemStatus.c: 32: StoreIntInEeprom(systemStatus.UartRefreshRate,(0x50) | SYSTEM_INFO_
      +                          ADDRES[2], 2);
  8150  003990  503A               	movf	_systemStatus+9,w,c	;volatile
  8151  003992  6E21               	movwf	StoreIntInEeprom@data,c
  8152  003994  6A22               	clrf	StoreIntInEeprom@data+1,c
  8153  003996  6A23               	clrf	StoreIntInEeprom@data+2,c
  8154  003998  6A24               	clrf	StoreIntInEeprom@data+3,c
  8155  00399A  0E39               	movlw	low (_SYSTEM_INFO_ADDRES+2)
  8156  00399C  6EF6               	movwf	tblptrl,c
  8157  00399E  0E78               	movlw	high (_SYSTEM_INFO_ADDRES+2)
  8158  0039A0  6EF7               	movwf	tblptrh,c
  8159  0039A2                     	if	0	;tblptru may be non-zero
  8160  0039A2                     	endif
  8161  0039A2                     	if	0	;tblptru may be non-zero
  8162  0039A2                     	endif
  8163  0039A2  0008               	tblrd		*
  8164  0039A4  50F5               	movf	tablat,w,c
  8165  0039A6  0950               	iorlw	80
  8166  0039A8  6E25               	movwf	StoreIntInEeprom@address,c
  8167  0039AA  0E00               	movlw	0
  8168  0039AC  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  8169  0039AE  0E02               	movlw	2
  8170  0039B0  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  8171  0039B2  EC3C  F021         	call	_StoreIntInEeprom	;wreg free
  8172  0039B6  0012               	return		;funcret
  8173  0039B8                     __end_of_SaveSystemStatus:
  8174                           	opt stack 0
  8175                           tosu	equ	0xFFF
  8176                           tosh	equ	0xFFE
  8177                           tosl	equ	0xFFD
  8178                           pclath	equ	0xFFA
  8179                           tblptru	equ	0xFF8
  8180                           tblptrh	equ	0xFF7
  8181                           tblptrl	equ	0xFF6
  8182                           tablat	equ	0xFF5
  8183                           prodh	equ	0xFF4
  8184                           prodl	equ	0xFF3
  8185                           postinc0	equ	0xFEE
  8186                           wreg	equ	0xFE8
  8187                           indf1	equ	0xFE7
  8188                           postdec1	equ	0xFE5
  8189                           fsr1h	equ	0xFE2
  8190                           fsr1l	equ	0xFE1
  8191                           indf2	equ	0xFDF
  8192                           postinc2	equ	0xFDE
  8193                           postdec2	equ	0xFDD
  8194                           fsr2h	equ	0xFDA
  8195                           fsr2l	equ	0xFD9
  8196                           status	equ	0xFD8
  8197                           
  8198 ;; *************** function _PrintSystemStatus *****************
  8199 ;; Defined at:
  8200 ;;		line 157 in file "SystemStatus.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;		None
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;  dest           80    0[BANK1 ] unsigned char [80]
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  1    wreg      void 
  8207 ;; Registers used:
  8208 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8214 ;;      Params:         0       0       0       0       0       0       0
  8215 ;;      Locals:         0       0      80       0       0       0       0
  8216 ;;      Temps:          0       0       0       0       0       0       0
  8217 ;;      Totals:         0       0      80       0       0       0       0
  8218 ;;Total ram usage:       80 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    7
  8221 ;; This function calls:
  8222 ;;		_UART_Write_Text
  8223 ;;		_sprintf
  8224 ;; This function is called by:
  8225 ;;		_GroupCommon
  8226 ;; This function uses a non-reentrant model
  8227 ;;
  8228                           
  8229                           	psect	text23
  8230  0031CA                     __ptext23:
  8231                           	opt stack 0
  8232  0031CA                     _PrintSystemStatus:
  8233                           	opt stack 21
  8234                           
  8235                           ;SystemStatus.c: 159: char dest[80];
  8236                           ;SystemStatus.c: 160: systemStatus.SwVersion = "1_002";
  8237                           
  8238                           ;incstack = 0
  8239  0031CA  0EF3               	movlw	low STR_21
  8240  0031CC  6E32               	movwf	_systemStatus+1,c	;volatile
  8241  0031CE  0E7F               	movlw	high STR_21
  8242  0031D0  6E33               	movwf	_systemStatus+2,c	;volatile
  8243                           
  8244                           ;SystemStatus.c: 163: sprintf(dest, "UNIT ID %d\n\r",systemStatus.UnitId);
  8245  0031D2  0E00               	movlw	low PrintSystemStatus@dest
  8246  0031D4  0100               	movlb	0	; () banked
  8247  0031D6  6FBC               	movwf	sprintf@sp& (0+255),b
  8248  0031D8  0E01               	movlw	high PrintSystemStatus@dest
  8249  0031DA  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8250  0031DC  0EA2               	movlw	low STR_51
  8251  0031DE  6FBE               	movwf	sprintf@f& (0+255),b
  8252  0031E0  0E7F               	movlw	high STR_51
  8253  0031E2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8254  0031E4  5031               	movf	_systemStatus,w,c	;volatile
  8255  0031E6  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  8256  0031E8  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  8257  0031EA  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  8258  0031EC  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  8259  0031EE  EC70  F000         	call	_sprintf	;wreg free
  8260                           
  8261                           ;SystemStatus.c: 164: UART_Write_Text(dest);
  8262  0031F2  0E00               	movlw	low PrintSystemStatus@dest
  8263  0031F4  6E19               	movwf	UART_Write_Text@text,c
  8264  0031F6  0E01               	movlw	high PrintSystemStatus@dest
  8265  0031F8  6E1A               	movwf	UART_Write_Text@text+1,c
  8266  0031FA  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8267                           
  8268                           ;SystemStatus.c: 165: sprintf(dest, "SOFTWARE VERSION %s\n\r",systemStatus.SwVersion);
  8269  0031FE  0E00               	movlw	low PrintSystemStatus@dest
  8270  003200  0100               	movlb	0	; () banked
  8271  003202  6FBC               	movwf	sprintf@sp& (0+255),b
  8272  003204  0E01               	movlw	high PrintSystemStatus@dest
  8273  003206  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8274  003208  0E10               	movlw	low STR_52
  8275  00320A  6FBE               	movwf	sprintf@f& (0+255),b
  8276  00320C  0E7F               	movlw	high STR_52
  8277  00320E  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8278  003210  C032  F0C0         	movff	_systemStatus+1,?_sprintf+4	;volatile
  8279  003214  C033  F0C1         	movff	_systemStatus+2,?_sprintf+5	;volatile
  8280  003218  EC70  F000         	call	_sprintf	;wreg free
  8281                           
  8282                           ;SystemStatus.c: 166: UART_Write_Text(dest);
  8283  00321C  0E00               	movlw	low PrintSystemStatus@dest
  8284  00321E  6E19               	movwf	UART_Write_Text@text,c
  8285  003220  0E01               	movlw	high PrintSystemStatus@dest
  8286  003222  6E1A               	movwf	UART_Write_Text@text+1,c
  8287  003224  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8288                           
  8289                           ;SystemStatus.c: 167: sprintf(dest, "UNIT TYPE %d\n\r",systemStatus.UnitType);
  8290  003228  0E00               	movlw	low PrintSystemStatus@dest
  8291  00322A  0100               	movlb	0	; () banked
  8292  00322C  6FBC               	movwf	sprintf@sp& (0+255),b
  8293  00322E  0E01               	movlw	high PrintSystemStatus@dest
  8294  003230  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8295  003232  0E86               	movlw	low STR_53
  8296  003234  6FBE               	movwf	sprintf@f& (0+255),b
  8297  003236  0E7F               	movlw	high STR_53
  8298  003238  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8299  00323A  C034  F0C0         	movff	_systemStatus+3,?_sprintf+4	;volatile
  8300  00323E  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  8301  003240  EC70  F000         	call	_sprintf	;wreg free
  8302                           
  8303                           ;SystemStatus.c: 168: UART_Write_Text(dest);
  8304  003244  0E00               	movlw	low PrintSystemStatus@dest
  8305  003246  6E19               	movwf	UART_Write_Text@text,c
  8306  003248  0E01               	movlw	high PrintSystemStatus@dest
  8307  00324A  6E1A               	movwf	UART_Write_Text@text+1,c
  8308  00324C  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8309                           
  8310                           ;SystemStatus.c: 169: sprintf(dest, "PASS COUNTER %d\n\r",systemStatus.PassCounter);
  8311  003250  0E00               	movlw	low PrintSystemStatus@dest
  8312  003252  0100               	movlb	0	; () banked
  8313  003254  6FBC               	movwf	sprintf@sp& (0+255),b
  8314  003256  0E01               	movlw	high PrintSystemStatus@dest
  8315  003258  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8316  00325A  0E74               	movlw	low STR_54
  8317  00325C  6FBE               	movwf	sprintf@f& (0+255),b
  8318  00325E  0E7F               	movlw	high STR_54
  8319  003260  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8320  003262  C035  F0C0         	movff	_systemStatus+4,?_sprintf+4	;volatile
  8321  003266  C036  F0C1         	movff	_systemStatus+5,?_sprintf+5	;volatile
  8322  00326A  C037  F0C2         	movff	_systemStatus+6,?_sprintf+6	;volatile
  8323  00326E  C038  F0C3         	movff	_systemStatus+7,?_sprintf+7	;volatile
  8324  003272  EC70  F000         	call	_sprintf	;wreg free
  8325                           
  8326                           ;SystemStatus.c: 170: UART_Write_Text(dest);
  8327  003276  0E00               	movlw	low PrintSystemStatus@dest
  8328  003278  6E19               	movwf	UART_Write_Text@text,c
  8329  00327A  0E01               	movlw	high PrintSystemStatus@dest
  8330  00327C  6E1A               	movwf	UART_Write_Text@text+1,c
  8331  00327E  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8332  003282  0012               	return		;funcret
  8333  003284                     __end_of_PrintSystemStatus:
  8334                           	opt stack 0
  8335                           tosu	equ	0xFFF
  8336                           tosh	equ	0xFFE
  8337                           tosl	equ	0xFFD
  8338                           pclath	equ	0xFFA
  8339                           tblptru	equ	0xFF8
  8340                           tblptrh	equ	0xFF7
  8341                           tblptrl	equ	0xFF6
  8342                           tablat	equ	0xFF5
  8343                           prodh	equ	0xFF4
  8344                           prodl	equ	0xFF3
  8345                           postinc0	equ	0xFEE
  8346                           wreg	equ	0xFE8
  8347                           indf1	equ	0xFE7
  8348                           postdec1	equ	0xFE5
  8349                           fsr1h	equ	0xFE2
  8350                           fsr1l	equ	0xFE1
  8351                           indf2	equ	0xFDF
  8352                           postinc2	equ	0xFDE
  8353                           postdec2	equ	0xFDD
  8354                           fsr2h	equ	0xFDA
  8355                           fsr2l	equ	0xFD9
  8356                           status	equ	0xFD8
  8357                           
  8358 ;; *************** function _PrintHelpScreen *****************
  8359 ;; Defined at:
  8360 ;;		line 91 in file "SystemStatus.c"
  8361 ;; Parameters:    Size  Location     Type
  8362 ;;		None
  8363 ;; Auto vars:     Size  Location     Type
  8364 ;;  dest           50    0[BANK1 ] unsigned char [50]
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  1    wreg      void 
  8367 ;; Registers used:
  8368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8374 ;;      Params:         0       0       0       0       0       0       0
  8375 ;;      Locals:         0       0      50       0       0       0       0
  8376 ;;      Temps:          0       0       0       0       0       0       0
  8377 ;;      Totals:         0       0      50       0       0       0       0
  8378 ;;Total ram usage:       50 bytes
  8379 ;; Hardware stack levels used:    1
  8380 ;; Hardware stack levels required when called:    7
  8381 ;; This function calls:
  8382 ;;		_UART_Write_Text
  8383 ;;		_sprintf
  8384 ;; This function is called by:
  8385 ;;		_GroupCommon
  8386 ;; This function uses a non-reentrant model
  8387 ;;
  8388                           
  8389                           	psect	text24
  8390  000CC2                     __ptext24:
  8391                           	opt stack 0
  8392  000CC2                     _PrintHelpScreen:
  8393                           	opt stack 21
  8394                           
  8395                           ;SystemStatus.c: 93: char dest[50];
  8396                           ;SystemStatus.c: 96: sprintf(dest, "<TX system commands>\n\r");
  8397                           
  8398                           ;incstack = 0
  8399  000CC2  0E00               	movlw	low PrintHelpScreen@dest
  8400  000CC4  0100               	movlb	0	; () banked
  8401  000CC6  6FBC               	movwf	sprintf@sp& (0+255),b
  8402  000CC8  0E01               	movlw	high PrintHelpScreen@dest
  8403  000CCA  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8404  000CCC  0ECC               	movlw	low STR_27
  8405  000CCE  6FBE               	movwf	sprintf@f& (0+255),b
  8406  000CD0  0E7E               	movlw	high STR_27
  8407  000CD2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8408  000CD4  EC70  F000         	call	_sprintf	;wreg free
  8409                           
  8410                           ;SystemStatus.c: 97: UART_Write_Text(dest);
  8411  000CD8  0E00               	movlw	low PrintHelpScreen@dest
  8412  000CDA  6E19               	movwf	UART_Write_Text@text,c
  8413  000CDC  0E01               	movlw	high PrintHelpScreen@dest
  8414  000CDE  6E1A               	movwf	UART_Write_Text@text+1,c
  8415  000CE0  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8416                           
  8417                           ;SystemStatus.c: 99: sprintf(dest, "$TI <XXXX><cr>   Init TX system and set frequency (0
      +                          -9999)[MHz]\r\n");
  8418  000CE4  0E00               	movlw	low PrintHelpScreen@dest
  8419  000CE6  0100               	movlb	0	; () banked
  8420  000CE8  6FBC               	movwf	sprintf@sp& (0+255),b
  8421  000CEA  0E01               	movlw	high PrintHelpScreen@dest
  8422  000CEC  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8423  000CEE  0EB0               	movlw	low STR_28
  8424  000CF0  6FBE               	movwf	sprintf@f& (0+255),b
  8425  000CF2  0E7A               	movlw	high STR_28
  8426  000CF4  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8427  000CF6  EC70  F000         	call	_sprintf	;wreg free
  8428                           
  8429                           ;SystemStatus.c: 100: UART_Write_Text(dest);
  8430  000CFA  0E00               	movlw	low PrintHelpScreen@dest
  8431  000CFC  6E19               	movwf	UART_Write_Text@text,c
  8432  000CFE  0E01               	movlw	high PrintHelpScreen@dest
  8433  000D00  6E1A               	movwf	UART_Write_Text@text+1,c
  8434  000D02  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8435                           
  8436                           ;SystemStatus.c: 101: sprintf(dest, "$TF <XXXX><cr>   Set TX system frequency at (0-9999
      +                          )[MHz].\r\n");
  8437  000D06  0E00               	movlw	low PrintHelpScreen@dest
  8438  000D08  0100               	movlb	0	; () banked
  8439  000D0A  6FBC               	movwf	sprintf@sp& (0+255),b
  8440  000D0C  0E01               	movlw	high PrintHelpScreen@dest
  8441  000D0E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8442  000D10  0E30               	movlw	low STR_29
  8443  000D12  6FBE               	movwf	sprintf@f& (0+255),b
  8444  000D14  0E7B               	movlw	high STR_29
  8445  000D16  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8446  000D18  EC70  F000         	call	_sprintf	;wreg free
  8447                           
  8448                           ;SystemStatus.c: 102: UART_Write_Text(dest);
  8449  000D1C  0E00               	movlw	low PrintHelpScreen@dest
  8450  000D1E  6E19               	movwf	UART_Write_Text@text,c
  8451  000D20  0E01               	movlw	high PrintHelpScreen@dest
  8452  000D22  6E1A               	movwf	UART_Write_Text@text+1,c
  8453  000D24  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8454                           
  8455                           ;SystemStatus.c: 103: sprintf(dest, "$TQ <cr>         Get status from TX system.\r\n");
  8456  000D28  0E00               	movlw	low PrintHelpScreen@dest
  8457  000D2A  0100               	movlb	0	; () banked
  8458  000D2C  6FBC               	movwf	sprintf@sp& (0+255),b
  8459  000D2E  0E01               	movlw	high PrintHelpScreen@dest
  8460  000D30  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8461  000D32  0E78               	movlw	low STR_30
  8462  000D34  6FBE               	movwf	sprintf@f& (0+255),b
  8463  000D36  0E7C               	movlw	high STR_30
  8464  000D38  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8465  000D3A  EC70  F000         	call	_sprintf	;wreg free
  8466                           
  8467                           ;SystemStatus.c: 104: UART_Write_Text(dest);
  8468  000D3E  0E00               	movlw	low PrintHelpScreen@dest
  8469  000D40  6E19               	movwf	UART_Write_Text@text,c
  8470  000D42  0E01               	movlw	high PrintHelpScreen@dest
  8471  000D44  6E1A               	movwf	UART_Write_Text@text+1,c
  8472  000D46  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8473                           
  8474                           ;SystemStatus.c: 105: sprintf(dest, "$TB <X><cr>      Turn on[1] / off[0] BIT mode at TX
      +                           system [Default = 0]\r\n");
  8475  000D4A  0E00               	movlw	low PrintHelpScreen@dest
  8476  000D4C  0100               	movlb	0	; () banked
  8477  000D4E  6FBC               	movwf	sprintf@sp& (0+255),b
  8478  000D50  0E01               	movlw	high PrintHelpScreen@dest
  8479  000D52  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8480  000D54  0ED2               	movlw	low STR_31
  8481  000D56  6FBE               	movwf	sprintf@f& (0+255),b
  8482  000D58  0E79               	movlw	high STR_31
  8483  000D5A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8484  000D5C  EC70  F000         	call	_sprintf	;wreg free
  8485                           
  8486                           ;SystemStatus.c: 106: UART_Write_Text(dest);
  8487  000D60  0E00               	movlw	low PrintHelpScreen@dest
  8488  000D62  6E19               	movwf	UART_Write_Text@text,c
  8489  000D64  0E01               	movlw	high PrintHelpScreen@dest
  8490  000D66  6E1A               	movwf	UART_Write_Text@text+1,c
  8491  000D68  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8492                           
  8493                           ;SystemStatus.c: 107: sprintf(dest, "$TX <X><cr>      Turn on[1] / off[0] transmission a
      +                          t TX system [Default = 0]\r\n");
  8494  000D6C  0E00               	movlw	low PrintHelpScreen@dest
  8495  000D6E  0100               	movlb	0	; () banked
  8496  000D70  6FBC               	movwf	sprintf@sp& (0+255),b
  8497  000D72  0E01               	movlw	high PrintHelpScreen@dest
  8498  000D74  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8499  000D76  0E83               	movlw	low STR_32
  8500  000D78  6FBE               	movwf	sprintf@f& (0+255),b
  8501  000D7A  0E79               	movlw	high STR_32
  8502  000D7C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8503  000D7E  EC70  F000         	call	_sprintf	;wreg free
  8504                           
  8505                           ;SystemStatus.c: 108: UART_Write_Text(dest);
  8506  000D82  0E00               	movlw	low PrintHelpScreen@dest
  8507  000D84  6E19               	movwf	UART_Write_Text@text,c
  8508  000D86  0E01               	movlw	high PrintHelpScreen@dest
  8509  000D88  6E1A               	movwf	UART_Write_Text@text+1,c
  8510  000D8A  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8511                           
  8512                           ;SystemStatus.c: 111: sprintf(dest, "\n\r<RX system commands>\n\r");
  8513  000D8E  0E00               	movlw	low PrintHelpScreen@dest
  8514  000D90  0100               	movlb	0	; () banked
  8515  000D92  6FBC               	movwf	sprintf@sp& (0+255),b
  8516  000D94  0E01               	movlw	high PrintHelpScreen@dest
  8517  000D96  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8518  000D98  0E6B               	movlw	low STR_33
  8519  000D9A  6FBE               	movwf	sprintf@f& (0+255),b
  8520  000D9C  0E7E               	movlw	high STR_33
  8521  000D9E  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8522  000DA0  EC70  F000         	call	_sprintf	;wreg free
  8523                           
  8524                           ;SystemStatus.c: 112: UART_Write_Text(dest);
  8525  000DA4  0E00               	movlw	low PrintHelpScreen@dest
  8526  000DA6  6E19               	movwf	UART_Write_Text@text,c
  8527  000DA8  0E01               	movlw	high PrintHelpScreen@dest
  8528  000DAA  6E1A               	movwf	UART_Write_Text@text+1,c
  8529  000DAC  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8530                           
  8531                           ;SystemStatus.c: 113: sprintf(dest, "$RI <XXXX><cr>   Init RX system and set frequency a
      +                          t XXXX (0-9999)[MHz]\r\n");
  8532  000DB0  0E00               	movlw	low PrintHelpScreen@dest
  8533  000DB2  0100               	movlb	0	; () banked
  8534  000DB4  6FBC               	movwf	sprintf@sp& (0+255),b
  8535  000DB6  0E01               	movlw	high PrintHelpScreen@dest
  8536  000DB8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8537  000DBA  0E1D               	movlw	low STR_34
  8538  000DBC  6FBE               	movwf	sprintf@f& (0+255),b
  8539  000DBE  0E7A               	movlw	high STR_34
  8540  000DC0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8541  000DC2  EC70  F000         	call	_sprintf	;wreg free
  8542                           
  8543                           ;SystemStatus.c: 114: UART_Write_Text(dest);
  8544  000DC6  0E00               	movlw	low PrintHelpScreen@dest
  8545  000DC8  6E19               	movwf	UART_Write_Text@text,c
  8546  000DCA  0E01               	movlw	high PrintHelpScreen@dest
  8547  000DCC  6E1A               	movwf	UART_Write_Text@text+1,c
  8548  000DCE  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8549                           
  8550                           ;SystemStatus.c: 115: sprintf(dest, "$RQ <cr>         Get status from RX system\r\n");
  8551  000DD2  0E00               	movlw	low PrintHelpScreen@dest
  8552  000DD4  0100               	movlb	0	; () banked
  8553  000DD6  6FBC               	movwf	sprintf@sp& (0+255),b
  8554  000DD8  0E01               	movlw	high PrintHelpScreen@dest
  8555  000DDA  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8556  000DDC  0EA6               	movlw	low STR_35
  8557  000DDE  6FBE               	movwf	sprintf@f& (0+255),b
  8558  000DE0  0E7C               	movlw	high STR_35
  8559  000DE2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8560  000DE4  EC70  F000         	call	_sprintf	;wreg free
  8561                           
  8562                           ;SystemStatus.c: 116: UART_Write_Text(dest);
  8563  000DE8  0E00               	movlw	low PrintHelpScreen@dest
  8564  000DEA  6E19               	movwf	UART_Write_Text@text,c
  8565  000DEC  0E01               	movlw	high PrintHelpScreen@dest
  8566  000DEE  6E1A               	movwf	UART_Write_Text@text+1,c
  8567  000DF0  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8568                           
  8569                           ;SystemStatus.c: 117: sprintf(dest, "$RB <X><cr>      Turn on[1] / off[0] BIT mode at RX
      +                           system.\r\n");
  8570  000DF4  0E00               	movlw	low PrintHelpScreen@dest
  8571  000DF6  0100               	movlb	0	; () banked
  8572  000DF8  6FBC               	movwf	sprintf@sp& (0+255),b
  8573  000DFA  0E01               	movlw	high PrintHelpScreen@dest
  8574  000DFC  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8575  000DFE  0EF2               	movlw	low STR_36
  8576  000E00  6FBE               	movwf	sprintf@f& (0+255),b
  8577  000E02  0E7A               	movlw	high STR_36
  8578  000E04  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8579  000E06  EC70  F000         	call	_sprintf	;wreg free
  8580                           
  8581                           ;SystemStatus.c: 118: UART_Write_Text(dest);
  8582  000E0A  0E00               	movlw	low PrintHelpScreen@dest
  8583  000E0C  6E19               	movwf	UART_Write_Text@text,c
  8584  000E0E  0E01               	movlw	high PrintHelpScreen@dest
  8585  000E10  6E1A               	movwf	UART_Write_Text@text+1,c
  8586  000E12  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8587                           
  8588                           ;SystemStatus.c: 119: sprintf(dest, "$RX <X><cr>      Turn on[1] / off[0] receive at RX 
      +                          system.\r\n");
  8589  000E16  0E00               	movlw	low PrintHelpScreen@dest
  8590  000E18  0100               	movlb	0	; () banked
  8591  000E1A  6FBC               	movwf	sprintf@sp& (0+255),b
  8592  000E1C  0E01               	movlw	high PrintHelpScreen@dest
  8593  000E1E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8594  000E20  0E6D               	movlw	low STR_37
  8595  000E22  6FBE               	movwf	sprintf@f& (0+255),b
  8596  000E24  0E7B               	movlw	high STR_37
  8597  000E26  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8598  000E28  EC70  F000         	call	_sprintf	;wreg free
  8599                           
  8600                           ;SystemStatus.c: 120: UART_Write_Text(dest);
  8601  000E2C  0E00               	movlw	low PrintHelpScreen@dest
  8602  000E2E  6E19               	movwf	UART_Write_Text@text,c
  8603  000E30  0E01               	movlw	high PrintHelpScreen@dest
  8604  000E32  6E1A               	movwf	UART_Write_Text@text+1,c
  8605  000E34  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8606                           
  8607                           ;SystemStatus.c: 121: sprintf(dest, "$RCR <X><cr>     Set Compression range at RX system
      +                          . High [1] Low [0] [Default = 0]\r\n");
  8608  000E38  0E00               	movlw	low PrintHelpScreen@dest
  8609  000E3A  0100               	movlb	0	; () banked
  8610  000E3C  6FBC               	movwf	sprintf@sp& (0+255),b
  8611  000E3E  0E01               	movlw	high PrintHelpScreen@dest
  8612  000E40  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8613  000E42  0ED8               	movlw	low STR_38
  8614  000E44  6FBE               	movwf	sprintf@f& (0+255),b
  8615  000E46  0E78               	movlw	high STR_38
  8616  000E48  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8617  000E4A  EC70  F000         	call	_sprintf	;wreg free
  8618                           
  8619                           ;SystemStatus.c: 122: UART_Write_Text(dest);
  8620  000E4E  0E00               	movlw	low PrintHelpScreen@dest
  8621  000E50  6E19               	movwf	UART_Write_Text@text,c
  8622  000E52  0E01               	movlw	high PrintHelpScreen@dest
  8623  000E54  6E1A               	movwf	UART_Write_Text@text+1,c
  8624  000E56  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8625                           
  8626                           ;SystemStatus.c: 123: sprintf(dest, "$RCP <X><cr>     Set Compression operation mode at 
      +                          RX system: Automatic[1] Manual[0] [Default = 0]\r\n");
  8627  000E5A  0E00               	movlw	low PrintHelpScreen@dest
  8628  000E5C  0100               	movlb	0	; () banked
  8629  000E5E  6FBC               	movwf	sprintf@sp& (0+255),b
  8630  000E60  0E01               	movlw	high PrintHelpScreen@dest
  8631  000E62  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8632  000E64  0E73               	movlw	low STR_39
  8633  000E66  6FBE               	movwf	sprintf@f& (0+255),b
  8634  000E68  0E78               	movlw	high STR_39
  8635  000E6A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8636  000E6C  EC70  F000         	call	_sprintf	;wreg free
  8637                           
  8638                           ;SystemStatus.c: 124: UART_Write_Text(dest);
  8639  000E70  0E00               	movlw	low PrintHelpScreen@dest
  8640  000E72  6E19               	movwf	UART_Write_Text@text,c
  8641  000E74  0E01               	movlw	high PrintHelpScreen@dest
  8642  000E76  6E1A               	movwf	UART_Write_Text@text+1,c
  8643  000E78  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8644                           
  8645                           ;SystemStatus.c: 127: sprintf(dest, "\n\r<Common system commands>\n\r");
  8646  000E7C  0E00               	movlw	low PrintHelpScreen@dest
  8647  000E7E  0100               	movlb	0	; () banked
  8648  000E80  6FBC               	movwf	sprintf@sp& (0+255),b
  8649  000E82  0E01               	movlw	high PrintHelpScreen@dest
  8650  000E84  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8651  000E86  0E31               	movlw	low STR_40
  8652  000E88  6FBE               	movwf	sprintf@f& (0+255),b
  8653  000E8A  0E7E               	movlw	high STR_40
  8654  000E8C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8655  000E8E  EC70  F000         	call	_sprintf	;wreg free
  8656                           
  8657                           ;SystemStatus.c: 128: UART_Write_Text(dest);
  8658  000E92  0E00               	movlw	low PrintHelpScreen@dest
  8659  000E94  6E19               	movwf	UART_Write_Text@text,c
  8660  000E96  0E01               	movlw	high PrintHelpScreen@dest
  8661  000E98  6E1A               	movwf	UART_Write_Text@text+1,c
  8662  000E9A  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8663                           
  8664                           ;SystemStatus.c: 129: sprintf(dest, "$SH <cr>         Print system help message.\r\n");
  8665  000E9E  0E00               	movlw	low PrintHelpScreen@dest
  8666  000EA0  0100               	movlb	0	; () banked
  8667  000EA2  6FBC               	movwf	sprintf@sp& (0+255),b
  8668  000EA4  0E01               	movlw	high PrintHelpScreen@dest
  8669  000EA6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8670  000EA8  0E4A               	movlw	low STR_41
  8671  000EAA  6FBE               	movwf	sprintf@f& (0+255),b
  8672  000EAC  0E7C               	movlw	high STR_41
  8673  000EAE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8674  000EB0  EC70  F000         	call	_sprintf	;wreg free
  8675                           
  8676                           ;SystemStatus.c: 130: UART_Write_Text(dest);
  8677  000EB4  0E00               	movlw	low PrintHelpScreen@dest
  8678  000EB6  6E19               	movwf	UART_Write_Text@text,c
  8679  000EB8  0E01               	movlw	high PrintHelpScreen@dest
  8680  000EBA  6E1A               	movwf	UART_Write_Text@text+1,c
  8681  000EBC  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8682                           
  8683                           ;SystemStatus.c: 131: sprintf(dest, "$SU <XX><cr>    Set UART refresh rate (1-20)[Hz].\r
      +                          \n");
  8684  000EC0  0E00               	movlw	low PrintHelpScreen@dest
  8685  000EC2  0100               	movlb	0	; () banked
  8686  000EC4  6FBC               	movwf	sprintf@sp& (0+255),b
  8687  000EC6  0E01               	movlw	high PrintHelpScreen@dest
  8688  000EC8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8689  000ECA  0EE5               	movlw	low STR_42
  8690  000ECC  6FBE               	movwf	sprintf@f& (0+255),b
  8691  000ECE  0E7B               	movlw	high STR_42
  8692  000ED0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8693  000ED2  EC70  F000         	call	_sprintf	;wreg free
  8694                           
  8695                           ;SystemStatus.c: 132: UART_Write_Text(dest);
  8696  000ED6  0E00               	movlw	low PrintHelpScreen@dest
  8697  000ED8  6E19               	movwf	UART_Write_Text@text,c
  8698  000EDA  0E01               	movlw	high PrintHelpScreen@dest
  8699  000EDC  6E1A               	movwf	UART_Write_Text@text+1,c
  8700  000EDE  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8701                           
  8702                           ;SystemStatus.c: 133: sprintf(dest, "$SA <X><cr>     Set UART automatic operation: Autom
      +                          atic[1] Manual[0] [Default = 0]\r\n");
  8703  000EE2  0E00               	movlw	low PrintHelpScreen@dest
  8704  000EE4  0100               	movlb	0	; () banked
  8705  000EE6  6FBC               	movwf	sprintf@sp& (0+255),b
  8706  000EE8  0E01               	movlw	high PrintHelpScreen@dest
  8707  000EEA  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8708  000EEC  0E2E               	movlw	low STR_43
  8709  000EEE  6FBE               	movwf	sprintf@f& (0+255),b
  8710  000EF0  0E79               	movlw	high STR_43
  8711  000EF2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8712  000EF4  EC70  F000         	call	_sprintf	;wreg free
  8713                           
  8714                           ;SystemStatus.c: 134: UART_Write_Text(dest);
  8715  000EF8  0E00               	movlw	low PrintHelpScreen@dest
  8716  000EFA  6E19               	movwf	UART_Write_Text@text,c
  8717  000EFC  0E01               	movlw	high PrintHelpScreen@dest
  8718  000EFE  6E1A               	movwf	UART_Write_Text@text+1,c
  8719  000F00  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8720                           
  8721                           ;SystemStatus.c: 135: sprintf(dest, "$SQ <X><cr>      Get system status.\r\n");
  8722  000F04  0E00               	movlw	low PrintHelpScreen@dest
  8723  000F06  0100               	movlb	0	; () banked
  8724  000F08  6FBC               	movwf	sprintf@sp& (0+255),b
  8725  000F0A  0E01               	movlw	high PrintHelpScreen@dest
  8726  000F0C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8727  000F0E  0EFA               	movlw	low STR_44
  8728  000F10  6FBE               	movwf	sprintf@f& (0+255),b
  8729  000F12  0E7C               	movlw	high STR_44
  8730  000F14  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8731  000F16  EC70  F000         	call	_sprintf	;wreg free
  8732                           
  8733                           ;SystemStatus.c: 136: UART_Write_Text(dest);
  8734  000F1A  0E00               	movlw	low PrintHelpScreen@dest
  8735  000F1C  6E19               	movwf	UART_Write_Text@text,c
  8736  000F1E  0E01               	movlw	high PrintHelpScreen@dest
  8737  000F20  6E1A               	movwf	UART_Write_Text@text+1,c
  8738  000F22  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8739                           
  8740                           ;SystemStatus.c: 137: sprintf(dest, "$SL <cr>         Test system LEDs.\r\n");
  8741  000F26  0E00               	movlw	low PrintHelpScreen@dest
  8742  000F28  0100               	movlb	0	; () banked
  8743  000F2A  6FBC               	movwf	sprintf@sp& (0+255),b
  8744  000F2C  0E01               	movlw	high PrintHelpScreen@dest
  8745  000F2E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8746  000F30  0E20               	movlw	low STR_45
  8747  000F32  6FBE               	movwf	sprintf@f& (0+255),b
  8748  000F34  0E7D               	movlw	high STR_45
  8749  000F36  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8750  000F38  EC70  F000         	call	_sprintf	;wreg free
  8751                           
  8752                           ;SystemStatus.c: 138: UART_Write_Text(dest);
  8753  000F3C  0E00               	movlw	low PrintHelpScreen@dest
  8754  000F3E  6E19               	movwf	UART_Write_Text@text,c
  8755  000F40  0E01               	movlw	high PrintHelpScreen@dest
  8756  000F42  6E1A               	movwf	UART_Write_Text@text+1,c
  8757  000F44  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8758                           
  8759                           ;SystemStatus.c: 139: sprintf(dest, "$TD <DAC NUM><DAC VALUE><cr>         Set TX DAC <0-
      +                          3> <0-Vref[4 dig]> \r\n");
  8760  000F48  0E00               	movlw	low PrintHelpScreen@dest
  8761  000F4A  0100               	movlb	0	; () banked
  8762  000F4C  6FBC               	movwf	sprintf@sp& (0+255),b
  8763  000F4E  0E01               	movlw	high PrintHelpScreen@dest
  8764  000F50  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8765  000F52  0E67               	movlw	low STR_46
  8766  000F54  6FBE               	movwf	sprintf@f& (0+255),b
  8767  000F56  0E7A               	movlw	high STR_46
  8768  000F58  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8769  000F5A  EC70  F000         	call	_sprintf	;wreg free
  8770                           
  8771                           ;SystemStatus.c: 140: UART_Write_Text(dest);
  8772  000F5E  0E00               	movlw	low PrintHelpScreen@dest
  8773  000F60  6E19               	movwf	UART_Write_Text@text,c
  8774  000F62  0E01               	movlw	high PrintHelpScreen@dest
  8775  000F64  6E1A               	movwf	UART_Write_Text@text+1,c
  8776  000F66  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8777                           
  8778                           ;SystemStatus.c: 141: sprintf(dest, "$SQ <cr>         Read System Status \r\n");
  8779  000F6A  0E00               	movlw	low PrintHelpScreen@dest
  8780  000F6C  0100               	movlb	0	; () banked
  8781  000F6E  6FBC               	movwf	sprintf@sp& (0+255),b
  8782  000F70  0E01               	movlw	high PrintHelpScreen@dest
  8783  000F72  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8784  000F74  0ED3               	movlw	low STR_47
  8785  000F76  6FBE               	movwf	sprintf@f& (0+255),b
  8786  000F78  0E7C               	movlw	high STR_47
  8787  000F7A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8788  000F7C  EC70  F000         	call	_sprintf	;wreg free
  8789                           
  8790                           ;SystemStatus.c: 142: UART_Write_Text(dest);
  8791  000F80  0E00               	movlw	low PrintHelpScreen@dest
  8792  000F82  6E19               	movwf	UART_Write_Text@text,c
  8793  000F84  0E01               	movlw	high PrintHelpScreen@dest
  8794  000F86  6E1A               	movwf	UART_Write_Text@text+1,c
  8795  000F88  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8796                           
  8797                           ;SystemStatus.c: 143: sprintf(dest, "$ST <cr>         Set Unit Type \r\n");
  8798  000F8C  0E00               	movlw	low PrintHelpScreen@dest
  8799  000F8E  0100               	movlb	0	; () banked
  8800  000F90  6FBC               	movwf	sprintf@sp& (0+255),b
  8801  000F92  0E01               	movlw	high PrintHelpScreen@dest
  8802  000F94  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8803  000F96  0E8D               	movlw	low STR_48
  8804  000F98  6FBE               	movwf	sprintf@f& (0+255),b
  8805  000F9A  0E7D               	movlw	high STR_48
  8806  000F9C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8807  000F9E  EC70  F000         	call	_sprintf	;wreg free
  8808                           
  8809                           ;SystemStatus.c: 144: UART_Write_Text(dest);
  8810  000FA2  0E00               	movlw	low PrintHelpScreen@dest
  8811  000FA4  6E19               	movwf	UART_Write_Text@text,c
  8812  000FA6  0E01               	movlw	high PrintHelpScreen@dest
  8813  000FA8  6E1A               	movwf	UART_Write_Text@text+1,c
  8814  000FAA  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8815                           
  8816                           ;SystemStatus.c: 145: sprintf(dest, "$SV <cr>         Save System status To EEPROM \r\n"
      +                          );
  8817  000FAE  0E00               	movlw	low PrintHelpScreen@dest
  8818  000FB0  0100               	movlb	0	; () banked
  8819  000FB2  6FBC               	movwf	sprintf@sp& (0+255),b
  8820  000FB4  0E01               	movlw	high PrintHelpScreen@dest
  8821  000FB6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8822  000FB8  0E19               	movlw	low STR_49
  8823  000FBA  6FBE               	movwf	sprintf@f& (0+255),b
  8824  000FBC  0E7C               	movlw	high STR_49
  8825  000FBE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8826  000FC0  EC70  F000         	call	_sprintf	;wreg free
  8827                           
  8828                           ;SystemStatus.c: 146: UART_Write_Text(dest);
  8829  000FC4  0E00               	movlw	low PrintHelpScreen@dest
  8830  000FC6  6E19               	movwf	UART_Write_Text@text,c
  8831  000FC8  0E01               	movlw	high PrintHelpScreen@dest
  8832  000FCA  6E1A               	movwf	UART_Write_Text@text+1,c
  8833  000FCC  ECDC  F01C         	call	_UART_Write_Text	;wreg free
  8834  000FD0  0012               	return		;funcret
  8835  000FD2                     __end_of_PrintHelpScreen:
  8836                           	opt stack 0
  8837                           tosu	equ	0xFFF
  8838                           tosh	equ	0xFFE
  8839                           tosl	equ	0xFFD
  8840                           pclath	equ	0xFFA
  8841                           tblptru	equ	0xFF8
  8842                           tblptrh	equ	0xFF7
  8843                           tblptrl	equ	0xFF6
  8844                           tablat	equ	0xFF5
  8845                           prodh	equ	0xFF4
  8846                           prodl	equ	0xFF3
  8847                           postinc0	equ	0xFEE
  8848                           wreg	equ	0xFE8
  8849                           indf1	equ	0xFE7
  8850                           postdec1	equ	0xFE5
  8851                           fsr1h	equ	0xFE2
  8852                           fsr1l	equ	0xFE1
  8853                           indf2	equ	0xFDF
  8854                           postinc2	equ	0xFDE
  8855                           postdec2	equ	0xFDD
  8856                           fsr2h	equ	0xFDA
  8857                           fsr2l	equ	0xFD9
  8858                           status	equ	0xFD8
  8859                           
  8860 ;; *************** function _EUSART1_Read *****************
  8861 ;; Defined at:
  8862 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  8863 ;; Parameters:    Size  Location     Type
  8864 ;;		None
  8865 ;; Auto vars:     Size  Location     Type
  8866 ;;  readValue       2   24[COMRAM] unsigned int 
  8867 ;; Return value:  Size  Location     Type
  8868 ;;                  1    wreg      unsigned char 
  8869 ;; Registers used:
  8870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8871 ;; Tracked objects:
  8872 ;;		On entry : 0/0
  8873 ;;		On exit  : 0/0
  8874 ;;		Unchanged: 0/0
  8875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8876 ;;      Params:         0       0       0       0       0       0       0
  8877 ;;      Locals:         2       0       0       0       0       0       0
  8878 ;;      Temps:          1       0       0       0       0       0       0
  8879 ;;      Totals:         3       0       0       0       0       0       0
  8880 ;;Total ram usage:        3 bytes
  8881 ;; Hardware stack levels used:    1
  8882 ;; Hardware stack levels required when called:    3
  8883 ;; This function calls:
  8884 ;;		Nothing
  8885 ;; This function is called by:
  8886 ;;		_readUartByte
  8887 ;; This function uses a non-reentrant model
  8888 ;;
  8889                           
  8890                           	psect	text25
  8891  004138                     __ptext25:
  8892                           	opt stack 0
  8893  004138                     _EUSART1_Read:
  8894                           	opt stack 26
  8895                           
  8896                           ;eusart1.c: 112: uint16_t readValue = 0;
  8897                           
  8898                           ;incstack = 0
  8899  004138  0E00               	movlw	0
  8900  00413A  6E1A               	movwf	EUSART1_Read@readValue+1,c
  8901  00413C  0E00               	movlw	0
  8902  00413E  6E19               	movwf	EUSART1_Read@readValue,c
  8903                           
  8904                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  8905  004140  0101               	movlb	1	; () banked
  8906  004142  51D5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  8907  004144  A4D8               	btfss	status,2,c
  8908  004146  D002               	goto	l820
  8909                           
  8910                           ; BSR set to: 1
  8911                           ;eusart1.c: 120: {
  8912                           ;eusart1.c: 121: return readValue;
  8913  004148  5019               	movf	EUSART1_Read@readValue,w,c
  8914                           
  8915                           ; BSR set to: 1
  8916  00414A  0012               	return	
  8917  00414C                     l820:
  8918                           
  8919                           ; BSR set to: 1
  8920                           ;eusart1.c: 122: }
  8921                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  8922                           
  8923                           ; BSR set to: 1
  8924  00414C  5041               	movf	_eusart1RxTail,w,c	;volatile
  8925  00414E  0D01               	mullw	1
  8926  004150  0E46               	movlw	low _eusart1RxBuffer
  8927  004152  24F3               	addwf	prodl,w,c
  8928  004154  6ED9               	movwf	fsr2l,c
  8929  004156  0E02               	movlw	high _eusart1RxBuffer
  8930  004158  20F4               	addwfc	prodh,w,c
  8931  00415A  6EDA               	movwf	fsr2h,c
  8932  00415C  50DF               	movf	indf2,w,c
  8933  00415E  6E18               	movwf	??_EUSART1_Read& (0+255),c
  8934  004160  5018               	movf	??_EUSART1_Read,w,c
  8935  004162  6E19               	movwf	EUSART1_Read@readValue,c
  8936  004164  6A1A               	clrf	EUSART1_Read@readValue+1,c
  8937                           
  8938                           ; BSR set to: 1
  8939  004166  2A41               	incf	_eusart1RxTail,f,c	;volatile
  8940                           
  8941                           ; BSR set to: 1
  8942                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  8943  004168  0E27               	movlw	39
  8944  00416A  6441               	cpfsgt	_eusart1RxTail,c	;volatile
  8945  00416C  D002               	goto	l822
  8946                           
  8947                           ; BSR set to: 1
  8948                           ;eusart1.c: 126: {
  8949                           ;eusart1.c: 127: eusart1RxTail = 0;
  8950  00416E  0E00               	movlw	0
  8951  004170  6E41               	movwf	_eusart1RxTail,c	;volatile
  8952  004172                     l822:
  8953                           
  8954                           ; BSR set to: 1
  8955                           ;eusart1.c: 128: }
  8956                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  8957                           
  8958                           ; BSR set to: 1
  8959  004172  9A9D               	bcf	3997,5,c	;volatile
  8960                           
  8961                           ; BSR set to: 1
  8962                           ;eusart1.c: 130: eusart1RxCount--;
  8963  004174  07D5               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  8964                           
  8965                           ; BSR set to: 1
  8966                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  8967  004176  8A9D               	bsf	3997,5,c	;volatile
  8968                           
  8969                           ; BSR set to: 1
  8970                           ;eusart1.c: 133: return readValue;
  8971  004178  5019               	movf	EUSART1_Read@readValue,w,c
  8972  00417A  0012               	return	
  8973  00417C                     __end_of_EUSART1_Read:
  8974                           	opt stack 0
  8975                           tosu	equ	0xFFF
  8976                           tosh	equ	0xFFE
  8977                           tosl	equ	0xFFD
  8978                           pclath	equ	0xFFA
  8979                           tblptru	equ	0xFF8
  8980                           tblptrh	equ	0xFF7
  8981                           tblptrl	equ	0xFF6
  8982                           tablat	equ	0xFF5
  8983                           prodh	equ	0xFF4
  8984                           prodl	equ	0xFF3
  8985                           postinc0	equ	0xFEE
  8986                           wreg	equ	0xFE8
  8987                           indf1	equ	0xFE7
  8988                           postdec1	equ	0xFE5
  8989                           fsr1h	equ	0xFE2
  8990                           fsr1l	equ	0xFE1
  8991                           indf2	equ	0xFDF
  8992                           postinc2	equ	0xFDE
  8993                           postdec2	equ	0xFDD
  8994                           fsr2h	equ	0xFDA
  8995                           fsr2l	equ	0xFD9
  8996                           status	equ	0xFD8
  8997                           
  8998 ;; *************** function _keepAliveSignalLed *****************
  8999 ;; Defined at:
  9000 ;;		line 35 in file "LedsApp.c"
  9001 ;; Parameters:    Size  Location     Type
  9002 ;;		None
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;		None
  9005 ;; Return value:  Size  Location     Type
  9006 ;;                  1    wreg      void 
  9007 ;; Registers used:
  9008 ;;		wreg, status,2, status,0
  9009 ;; Tracked objects:
  9010 ;;		On entry : 0/0
  9011 ;;		On exit  : 0/0
  9012 ;;		Unchanged: 0/0
  9013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9014 ;;      Params:         0       0       0       0       0       0       0
  9015 ;;      Locals:         0       0       0       0       0       0       0
  9016 ;;      Temps:          1       0       0       0       0       0       0
  9017 ;;      Totals:         1       0       0       0       0       0       0
  9018 ;;Total ram usage:        1 bytes
  9019 ;; Hardware stack levels used:    1
  9020 ;; Hardware stack levels required when called:    3
  9021 ;; This function calls:
  9022 ;;		Nothing
  9023 ;; This function is called by:
  9024 ;;		_main
  9025 ;; This function uses a non-reentrant model
  9026 ;;
  9027                           
  9028                           	psect	text26
  9029  00459A                     __ptext26:
  9030                           	opt stack 0
  9031  00459A                     _keepAliveSignalLed:
  9032                           	opt stack 27
  9033                           
  9034                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  9035                           
  9036                           ; BSR set to: 1
  9037                           ;incstack = 0
  9038  00459A  B08B               	btfsc	3979,0,c	;volatile
  9039  00459C  D003               	goto	u6170
  9040  00459E  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  9041  0045A0  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  9042  0045A2  D001               	goto	u6188
  9043  0045A4                     u6170:
  9044  0045A4  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  9045  0045A6                     u6188:
  9046  0045A6  508B               	movf	3979,w,c	;volatile
  9047  0045A8  1818               	xorwf	??_keepAliveSignalLed,w,c
  9048  0045AA  0BFE               	andlw	-2
  9049  0045AC  1818               	xorwf	??_keepAliveSignalLed,w,c
  9050  0045AE  6E8B               	movwf	3979,c	;volatile
  9051  0045B0  0012               	return		;funcret
  9052  0045B2                     __end_of_keepAliveSignalLed:
  9053                           	opt stack 0
  9054                           tosu	equ	0xFFF
  9055                           tosh	equ	0xFFE
  9056                           tosl	equ	0xFFD
  9057                           pclath	equ	0xFFA
  9058                           tblptru	equ	0xFF8
  9059                           tblptrh	equ	0xFF7
  9060                           tblptrl	equ	0xFF6
  9061                           tablat	equ	0xFF5
  9062                           prodh	equ	0xFF4
  9063                           prodl	equ	0xFF3
  9064                           postinc0	equ	0xFEE
  9065                           wreg	equ	0xFE8
  9066                           indf1	equ	0xFE7
  9067                           postdec1	equ	0xFE5
  9068                           fsr1h	equ	0xFE2
  9069                           fsr1l	equ	0xFE1
  9070                           indf2	equ	0xFDF
  9071                           postinc2	equ	0xFDE
  9072                           postdec2	equ	0xFDD
  9073                           fsr2h	equ	0xFDA
  9074                           fsr2l	equ	0xFD9
  9075                           status	equ	0xFD8
  9076                           
  9077 ;; *************** function _SetMcuSystem *****************
  9078 ;; Defined at:
  9079 ;;		line 11 in file "SystemSettings.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;		None
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;		None
  9084 ;; Return value:  Size  Location     Type
  9085 ;;                  1    wreg      void 
  9086 ;; Registers used:
  9087 ;;		wreg, status,2, status,0, cstack
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9093 ;;      Params:         0       0       0       0       0       0       0
  9094 ;;      Locals:         0       0       0       0       0       0       0
  9095 ;;      Temps:          0       0       0       0       0       0       0
  9096 ;;      Totals:         0       0       0       0       0       0       0
  9097 ;;Total ram usage:        0 bytes
  9098 ;; Hardware stack levels used:    1
  9099 ;; Hardware stack levels required when called:    6
  9100 ;; This function calls:
  9101 ;;		_SYSTEM_Initialize
  9102 ;; This function is called by:
  9103 ;;		_main
  9104 ;; This function uses a non-reentrant model
  9105 ;;
  9106                           
  9107                           	psect	text27
  9108  004642                     __ptext27:
  9109                           	opt stack 0
  9110  004642                     _SetMcuSystem:
  9111                           	opt stack 24
  9112                           
  9113                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  9114                           
  9115                           ;incstack = 0
  9116  004642  ECC0  F022         	call	_SYSTEM_Initialize	;wreg free
  9117                           
  9118                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  9119  004646  8EF2               	bsf	intcon,7,c	;volatile
  9120                           
  9121                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  9122  004648  8CF2               	bsf	intcon,6,c	;volatile
  9123  00464A  0012               	return		;funcret
  9124  00464C                     __end_of_SetMcuSystem:
  9125                           	opt stack 0
  9126                           tosu	equ	0xFFF
  9127                           tosh	equ	0xFFE
  9128                           tosl	equ	0xFFD
  9129                           pclath	equ	0xFFA
  9130                           tblptru	equ	0xFF8
  9131                           tblptrh	equ	0xFF7
  9132                           tblptrl	equ	0xFF6
  9133                           tablat	equ	0xFF5
  9134                           prodh	equ	0xFF4
  9135                           prodl	equ	0xFF3
  9136                           intcon	equ	0xFF2
  9137                           postinc0	equ	0xFEE
  9138                           wreg	equ	0xFE8
  9139                           indf1	equ	0xFE7
  9140                           postdec1	equ	0xFE5
  9141                           fsr1h	equ	0xFE2
  9142                           fsr1l	equ	0xFE1
  9143                           indf2	equ	0xFDF
  9144                           postinc2	equ	0xFDE
  9145                           postdec2	equ	0xFDD
  9146                           fsr2h	equ	0xFDA
  9147                           fsr2l	equ	0xFD9
  9148                           status	equ	0xFD8
  9149                           
  9150 ;; *************** function _SYSTEM_Initialize *****************
  9151 ;; Defined at:
  9152 ;;		line 112 in file "mcc_generated_files/mcc.c"
  9153 ;; Parameters:    Size  Location     Type
  9154 ;;		None
  9155 ;; Auto vars:     Size  Location     Type
  9156 ;;		None
  9157 ;; Return value:  Size  Location     Type
  9158 ;;                  1    wreg      void 
  9159 ;; Registers used:
  9160 ;;		wreg, status,2, status,0, cstack
  9161 ;; Tracked objects:
  9162 ;;		On entry : 0/0
  9163 ;;		On exit  : 0/0
  9164 ;;		Unchanged: 0/0
  9165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9166 ;;      Params:         0       0       0       0       0       0       0
  9167 ;;      Locals:         0       0       0       0       0       0       0
  9168 ;;      Temps:          0       0       0       0       0       0       0
  9169 ;;      Totals:         0       0       0       0       0       0       0
  9170 ;;Total ram usage:        0 bytes
  9171 ;; Hardware stack levels used:    1
  9172 ;; Hardware stack levels required when called:    5
  9173 ;; This function calls:
  9174 ;;		_ADC_Initialize
  9175 ;;		_EUSART1_Initialize
  9176 ;;		_INTERRUPT_Initialize
  9177 ;;		_OSCILLATOR_Initialize
  9178 ;;		_PIN_MANAGER_Initialize
  9179 ;;		_TMR0_Initialize
  9180 ;; This function is called by:
  9181 ;;		_SetMcuSystem
  9182 ;; This function uses a non-reentrant model
  9183 ;;
  9184                           
  9185                           	psect	text28
  9186  004580                     __ptext28:
  9187                           	opt stack 0
  9188  004580                     _SYSTEM_Initialize:
  9189                           	opt stack 24
  9190                           
  9191                           ;mcc.c: 114: INTERRUPT_Initialize();
  9192                           
  9193                           ;incstack = 0
  9194  004580  EC33  F023         	call	_INTERRUPT_Initialize	;wreg free
  9195                           
  9196                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  9197  004584  EC33  F020         	call	_PIN_MANAGER_Initialize	;wreg free
  9198                           
  9199                           ;mcc.c: 116: OSCILLATOR_Initialize();
  9200  004588  EC0D  F023         	call	_OSCILLATOR_Initialize	;wreg free
  9201                           
  9202                           ;mcc.c: 117: ADC_Initialize();
  9203  00458C  ECD9  F022         	call	_ADC_Initialize	;wreg free
  9204                           
  9205                           ;mcc.c: 118: TMR0_Initialize();
  9206  004590  ECC6  F021         	call	_TMR0_Initialize	;wreg free
  9207                           
  9208                           ;mcc.c: 119: EUSART1_Initialize();
  9209  004594  EC90  F021         	call	_EUSART1_Initialize	;wreg free
  9210  004598  0012               	return		;funcret
  9211  00459A                     __end_of_SYSTEM_Initialize:
  9212                           	opt stack 0
  9213                           tosu	equ	0xFFF
  9214                           tosh	equ	0xFFE
  9215                           tosl	equ	0xFFD
  9216                           pclath	equ	0xFFA
  9217                           tblptru	equ	0xFF8
  9218                           tblptrh	equ	0xFF7
  9219                           tblptrl	equ	0xFF6
  9220                           tablat	equ	0xFF5
  9221                           prodh	equ	0xFF4
  9222                           prodl	equ	0xFF3
  9223                           intcon	equ	0xFF2
  9224                           postinc0	equ	0xFEE
  9225                           wreg	equ	0xFE8
  9226                           indf1	equ	0xFE7
  9227                           postdec1	equ	0xFE5
  9228                           fsr1h	equ	0xFE2
  9229                           fsr1l	equ	0xFE1
  9230                           indf2	equ	0xFDF
  9231                           postinc2	equ	0xFDE
  9232                           postdec2	equ	0xFDD
  9233                           fsr2h	equ	0xFDA
  9234                           fsr2l	equ	0xFD9
  9235                           status	equ	0xFD8
  9236                           
  9237 ;; *************** function _TMR0_Initialize *****************
  9238 ;; Defined at:
  9239 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  9240 ;; Parameters:    Size  Location     Type
  9241 ;;		None
  9242 ;; Auto vars:     Size  Location     Type
  9243 ;;		None
  9244 ;; Return value:  Size  Location     Type
  9245 ;;                  1    wreg      void 
  9246 ;; Registers used:
  9247 ;;		wreg, status,2, status,0, cstack
  9248 ;; Tracked objects:
  9249 ;;		On entry : 0/0
  9250 ;;		On exit  : 0/0
  9251 ;;		Unchanged: 0/0
  9252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9253 ;;      Params:         0       0       0       0       0       0       0
  9254 ;;      Locals:         0       0       0       0       0       0       0
  9255 ;;      Temps:          2       0       0       0       0       0       0
  9256 ;;      Totals:         2       0       0       0       0       0       0
  9257 ;;Total ram usage:        2 bytes
  9258 ;; Hardware stack levels used:    1
  9259 ;; Hardware stack levels required when called:    4
  9260 ;; This function calls:
  9261 ;;		_TMR0_SetInterruptHandler
  9262 ;; This function is called by:
  9263 ;;		_SYSTEM_Initialize
  9264 ;; This function uses a non-reentrant model
  9265 ;;
  9266                           
  9267                           	psect	text29
  9268  00438C                     __ptext29:
  9269                           	opt stack 0
  9270  00438C                     _TMR0_Initialize:
  9271                           	opt stack 24
  9272                           
  9273                           ;tmr0.c: 71: TMR0H = 0x3C;
  9274                           
  9275                           ;incstack = 0
  9276  00438C  0E3C               	movlw	60
  9277  00438E  6ED7               	movwf	4055,c	;volatile
  9278                           
  9279                           ;tmr0.c: 74: TMR0L = 0xAF;
  9280  004390  0EAF               	movlw	175
  9281  004392  6ED6               	movwf	4054,c	;volatile
  9282                           
  9283                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  9284  004394  50D6               	movf	4054,w,c	;volatile
  9285  004396  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  9286  00439A  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  9287  00439C  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  9288  0043A0  6A1A               	clrf	??_TMR0_Initialize,c
  9289  0043A2  101A               	iorwf	??_TMR0_Initialize,w,c
  9290  0043A4  6E46               	movwf	_timer0ReloadVal,c	;volatile
  9291  0043A6  501B               	movf	??_TMR0_Initialize+1,w,c
  9292  0043A8  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  9293                           
  9294                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  9295  0043AA  94F2               	bcf	intcon,2,c	;volatile
  9296                           
  9297                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  9298  0043AC  8AF2               	bsf	intcon,5,c	;volatile
  9299                           
  9300                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  9301  0043AE  0E00               	movlw	0
  9302  0043B0  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  9303  0043B2  0E00               	movlw	0
  9304  0043B4  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  9305  0043B6  EC26  F023         	call	_TMR0_SetInterruptHandler	;wreg free
  9306                           
  9307                           ;tmr0.c: 90: T0CON = 0x90;
  9308  0043BA  0E90               	movlw	144
  9309  0043BC  6ED5               	movwf	4053,c	;volatile
  9310  0043BE  0012               	return		;funcret
  9311  0043C0                     __end_of_TMR0_Initialize:
  9312                           	opt stack 0
  9313                           tosu	equ	0xFFF
  9314                           tosh	equ	0xFFE
  9315                           tosl	equ	0xFFD
  9316                           pclath	equ	0xFFA
  9317                           tblptru	equ	0xFF8
  9318                           tblptrh	equ	0xFF7
  9319                           tblptrl	equ	0xFF6
  9320                           tablat	equ	0xFF5
  9321                           prodh	equ	0xFF4
  9322                           prodl	equ	0xFF3
  9323                           intcon	equ	0xFF2
  9324                           postinc0	equ	0xFEE
  9325                           wreg	equ	0xFE8
  9326                           indf1	equ	0xFE7
  9327                           postdec1	equ	0xFE5
  9328                           fsr1h	equ	0xFE2
  9329                           fsr1l	equ	0xFE1
  9330                           indf2	equ	0xFDF
  9331                           postinc2	equ	0xFDE
  9332                           postdec2	equ	0xFDD
  9333                           fsr2h	equ	0xFDA
  9334                           fsr2l	equ	0xFD9
  9335                           status	equ	0xFD8
  9336                           
  9337 ;; *************** function _TMR0_SetInterruptHandler *****************
  9338 ;; Defined at:
  9339 ;;		line 181 in file "mcc_generated_files/tmr0.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9342 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;		None
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  1    wreg      void 
  9347 ;; Registers used:
  9348 ;;		wreg, status,2, status,0
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9354 ;;      Params:         2       0       0       0       0       0       0
  9355 ;;      Locals:         0       0       0       0       0       0       0
  9356 ;;      Temps:          0       0       0       0       0       0       0
  9357 ;;      Totals:         2       0       0       0       0       0       0
  9358 ;;Total ram usage:        2 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    3
  9361 ;; This function calls:
  9362 ;;		Nothing
  9363 ;; This function is called by:
  9364 ;;		_TMR0_Initialize
  9365 ;; This function uses a non-reentrant model
  9366 ;;
  9367                           
  9368                           	psect	text30
  9369  00464C                     __ptext30:
  9370                           	opt stack 0
  9371  00464C                     _TMR0_SetInterruptHandler:
  9372                           	opt stack 24
  9373                           
  9374                           ;tmr0.c: 182: TMR0_InterruptHandler = InterruptHandler;
  9375                           
  9376                           ;incstack = 0
  9377  00464C  C018  F1E8         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  9378  004650  C019  F1E9         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  9379  004654  0012               	return		;funcret
  9380  004656                     __end_of_TMR0_SetInterruptHandler:
  9381                           	opt stack 0
  9382                           tosu	equ	0xFFF
  9383                           tosh	equ	0xFFE
  9384                           tosl	equ	0xFFD
  9385                           pclath	equ	0xFFA
  9386                           tblptru	equ	0xFF8
  9387                           tblptrh	equ	0xFF7
  9388                           tblptrl	equ	0xFF6
  9389                           tablat	equ	0xFF5
  9390                           prodh	equ	0xFF4
  9391                           prodl	equ	0xFF3
  9392                           intcon	equ	0xFF2
  9393                           postinc0	equ	0xFEE
  9394                           wreg	equ	0xFE8
  9395                           indf1	equ	0xFE7
  9396                           postdec1	equ	0xFE5
  9397                           fsr1h	equ	0xFE2
  9398                           fsr1l	equ	0xFE1
  9399                           indf2	equ	0xFDF
  9400                           postinc2	equ	0xFDE
  9401                           postdec2	equ	0xFDD
  9402                           fsr2h	equ	0xFDA
  9403                           fsr2l	equ	0xFD9
  9404                           status	equ	0xFD8
  9405                           
  9406 ;; *************** function _PIN_MANAGER_Initialize *****************
  9407 ;; Defined at:
  9408 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;		None
  9411 ;; Auto vars:     Size  Location     Type
  9412 ;;		None
  9413 ;; Return value:  Size  Location     Type
  9414 ;;                  1    wreg      void 
  9415 ;; Registers used:
  9416 ;;		wreg, status,2
  9417 ;; Tracked objects:
  9418 ;;		On entry : 0/0
  9419 ;;		On exit  : 0/0
  9420 ;;		Unchanged: 0/0
  9421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9422 ;;      Params:         0       0       0       0       0       0       0
  9423 ;;      Locals:         0       0       0       0       0       0       0
  9424 ;;      Temps:          0       0       0       0       0       0       0
  9425 ;;      Totals:         0       0       0       0       0       0       0
  9426 ;;Total ram usage:        0 bytes
  9427 ;; Hardware stack levels used:    1
  9428 ;; Hardware stack levels required when called:    3
  9429 ;; This function calls:
  9430 ;;		Nothing
  9431 ;; This function is called by:
  9432 ;;		_SYSTEM_Initialize
  9433 ;; This function uses a non-reentrant model
  9434 ;;
  9435                           
  9436                           	psect	text31
  9437  004066                     __ptext31:
  9438                           	opt stack 0
  9439  004066                     _PIN_MANAGER_Initialize:
  9440                           	opt stack 25
  9441                           
  9442                           ;pin_manager.c: 57: LATE = 0x00;
  9443                           
  9444                           ;incstack = 0
  9445  004066  0E00               	movlw	0
  9446  004068  6E8D               	movwf	3981,c	;volatile
  9447                           
  9448                           ;pin_manager.c: 58: LATD = 0x40;
  9449  00406A  0E40               	movlw	64
  9450  00406C  6E8C               	movwf	3980,c	;volatile
  9451                           
  9452                           ;pin_manager.c: 59: LATA = 0x06;
  9453  00406E  0E06               	movlw	6
  9454  004070  6E89               	movwf	3977,c	;volatile
  9455                           
  9456                           ;pin_manager.c: 60: LATB = 0x00;
  9457  004072  0E00               	movlw	0
  9458  004074  6E8A               	movwf	3978,c	;volatile
  9459                           
  9460                           ;pin_manager.c: 61: LATC = 0x00;
  9461  004076  0E00               	movlw	0
  9462  004078  6E8B               	movwf	3979,c	;volatile
  9463                           
  9464                           ;pin_manager.c: 66: TRISE = 0x07;
  9465  00407A  0E07               	movlw	7
  9466  00407C  6E96               	movwf	3990,c	;volatile
  9467                           
  9468                           ;pin_manager.c: 67: TRISA = 0xE1;
  9469  00407E  0EE1               	movlw	225
  9470  004080  6E92               	movwf	3986,c	;volatile
  9471                           
  9472                           ;pin_manager.c: 68: TRISB = 0xEE;
  9473  004082  0EEE               	movlw	238
  9474  004084  6E93               	movwf	3987,c	;volatile
  9475                           
  9476                           ;pin_manager.c: 69: TRISC = 0x80;
  9477  004086  0E80               	movlw	128
  9478  004088  6E94               	movwf	3988,c	;volatile
  9479                           
  9480                           ;pin_manager.c: 70: TRISD = 0xB2;
  9481  00408A  0EB2               	movlw	178
  9482  00408C  6E95               	movwf	3989,c	;volatile
  9483                           
  9484                           ;pin_manager.c: 75: ANSELC = 0x30;
  9485  00408E  0E30               	movlw	48
  9486  004090  010F               	movlb	15	; () banked
  9487  004092  6F3A               	movwf	58,b	;volatile
  9488                           
  9489                           ;pin_manager.c: 76: ANSELB = 0x32;
  9490  004094  0E32               	movlw	50
  9491  004096  6F39               	movwf	57,b	;volatile
  9492                           
  9493                           ;pin_manager.c: 77: ANSELD = 0xA4;
  9494  004098  0EA4               	movlw	164
  9495  00409A  6F3B               	movwf	59,b	;volatile
  9496                           
  9497                           ;pin_manager.c: 78: ANSELE = 0x07;
  9498  00409C  0E07               	movlw	7
  9499  00409E  6F3C               	movwf	60,b	;volatile
  9500                           
  9501                           ;pin_manager.c: 79: ANSELA = 0x2F;
  9502  0040A0  0E2F               	movlw	47
  9503  0040A2  6F38               	movwf	56,b	;volatile
  9504                           
  9505                           ;pin_manager.c: 84: WPUB = 0xC2;
  9506  0040A4  0EC2               	movlw	194
  9507  0040A6  6E61               	movwf	3937,c	;volatile
  9508                           
  9509                           ; BSR set to: 15
  9510                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 1;
  9511  0040A8  8EF1               	bsf	intcon2,7,c	;volatile
  9512                           
  9513                           ; BSR set to: 15
  9514                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  9515  0040AA  86F2               	bsf	intcon,3,c	;volatile
  9516                           
  9517                           ; BSR set to: 15
  9518  0040AC  0012               	return		;funcret
  9519  0040AE                     __end_of_PIN_MANAGER_Initialize:
  9520                           	opt stack 0
  9521                           tosu	equ	0xFFF
  9522                           tosh	equ	0xFFE
  9523                           tosl	equ	0xFFD
  9524                           pclath	equ	0xFFA
  9525                           tblptru	equ	0xFF8
  9526                           tblptrh	equ	0xFF7
  9527                           tblptrl	equ	0xFF6
  9528                           tablat	equ	0xFF5
  9529                           prodh	equ	0xFF4
  9530                           prodl	equ	0xFF3
  9531                           intcon	equ	0xFF2
  9532                           intcon2	equ	0xFF1
  9533                           postinc0	equ	0xFEE
  9534                           wreg	equ	0xFE8
  9535                           indf1	equ	0xFE7
  9536                           postdec1	equ	0xFE5
  9537                           fsr1h	equ	0xFE2
  9538                           fsr1l	equ	0xFE1
  9539                           indf2	equ	0xFDF
  9540                           postinc2	equ	0xFDE
  9541                           postdec2	equ	0xFDD
  9542                           fsr2h	equ	0xFDA
  9543                           fsr2l	equ	0xFD9
  9544                           status	equ	0xFD8
  9545                           
  9546 ;; *************** function _OSCILLATOR_Initialize *****************
  9547 ;; Defined at:
  9548 ;;		line 122 in file "mcc_generated_files/mcc.c"
  9549 ;; Parameters:    Size  Location     Type
  9550 ;;		None
  9551 ;; Auto vars:     Size  Location     Type
  9552 ;;		None
  9553 ;; Return value:  Size  Location     Type
  9554 ;;                  1    wreg      void 
  9555 ;; Registers used:
  9556 ;;		wreg, status,2
  9557 ;; Tracked objects:
  9558 ;;		On entry : 0/0
  9559 ;;		On exit  : 0/0
  9560 ;;		Unchanged: 0/0
  9561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9562 ;;      Params:         0       0       0       0       0       0       0
  9563 ;;      Locals:         0       0       0       0       0       0       0
  9564 ;;      Temps:          0       0       0       0       0       0       0
  9565 ;;      Totals:         0       0       0       0       0       0       0
  9566 ;;Total ram usage:        0 bytes
  9567 ;; Hardware stack levels used:    1
  9568 ;; Hardware stack levels required when called:    3
  9569 ;; This function calls:
  9570 ;;		Nothing
  9571 ;; This function is called by:
  9572 ;;		_SYSTEM_Initialize
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           	psect	text32
  9577  00461A                     __ptext32:
  9578                           	opt stack 0
  9579  00461A                     _OSCILLATOR_Initialize:
  9580                           	opt stack 25
  9581                           
  9582                           ;mcc.c: 125: OSCCON = 0x60;
  9583                           
  9584                           ; BSR set to: 15
  9585                           ;incstack = 0
  9586  00461A  0E60               	movlw	96
  9587  00461C  6ED3               	movwf	4051,c	;volatile
  9588                           
  9589                           ;mcc.c: 127: OSCCON2 = 0x04;
  9590  00461E  0E04               	movlw	4
  9591  004620  6ED2               	movwf	4050,c	;volatile
  9592                           
  9593                           ;mcc.c: 129: OSCTUNE = 0x00;
  9594  004622  0E00               	movlw	0
  9595  004624  6E9B               	movwf	3995,c	;volatile
  9596  004626  0012               	return		;funcret
  9597  004628                     __end_of_OSCILLATOR_Initialize:
  9598                           	opt stack 0
  9599                           tosu	equ	0xFFF
  9600                           tosh	equ	0xFFE
  9601                           tosl	equ	0xFFD
  9602                           pclath	equ	0xFFA
  9603                           tblptru	equ	0xFF8
  9604                           tblptrh	equ	0xFF7
  9605                           tblptrl	equ	0xFF6
  9606                           tablat	equ	0xFF5
  9607                           prodh	equ	0xFF4
  9608                           prodl	equ	0xFF3
  9609                           intcon	equ	0xFF2
  9610                           intcon2	equ	0xFF1
  9611                           postinc0	equ	0xFEE
  9612                           wreg	equ	0xFE8
  9613                           indf1	equ	0xFE7
  9614                           postdec1	equ	0xFE5
  9615                           fsr1h	equ	0xFE2
  9616                           fsr1l	equ	0xFE1
  9617                           indf2	equ	0xFDF
  9618                           postinc2	equ	0xFDE
  9619                           postdec2	equ	0xFDD
  9620                           fsr2h	equ	0xFDA
  9621                           fsr2l	equ	0xFD9
  9622                           status	equ	0xFD8
  9623                           
  9624 ;; *************** function _INTERRUPT_Initialize *****************
  9625 ;; Defined at:
  9626 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9627 ;; Parameters:    Size  Location     Type
  9628 ;;		None
  9629 ;; Auto vars:     Size  Location     Type
  9630 ;;		None
  9631 ;; Return value:  Size  Location     Type
  9632 ;;                  1    wreg      void 
  9633 ;; Registers used:
  9634 ;;		None
  9635 ;; Tracked objects:
  9636 ;;		On entry : 0/0
  9637 ;;		On exit  : 0/0
  9638 ;;		Unchanged: 0/0
  9639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9640 ;;      Params:         0       0       0       0       0       0       0
  9641 ;;      Locals:         0       0       0       0       0       0       0
  9642 ;;      Temps:          0       0       0       0       0       0       0
  9643 ;;      Totals:         0       0       0       0       0       0       0
  9644 ;;Total ram usage:        0 bytes
  9645 ;; Hardware stack levels used:    1
  9646 ;; Hardware stack levels required when called:    3
  9647 ;; This function calls:
  9648 ;;		Nothing
  9649 ;; This function is called by:
  9650 ;;		_SYSTEM_Initialize
  9651 ;; This function uses a non-reentrant model
  9652 ;;
  9653                           
  9654                           	psect	text33
  9655  004666                     __ptext33:
  9656                           	opt stack 0
  9657  004666                     _INTERRUPT_Initialize:
  9658                           	opt stack 25
  9659                           
  9660                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  9661                           
  9662                           ;incstack = 0
  9663  004666  9ED0               	bcf	4048,7,c	;volatile
  9664  004668  0012               	return		;funcret
  9665  00466A                     __end_of_INTERRUPT_Initialize:
  9666                           	opt stack 0
  9667                           tosu	equ	0xFFF
  9668                           tosh	equ	0xFFE
  9669                           tosl	equ	0xFFD
  9670                           pclath	equ	0xFFA
  9671                           tblptru	equ	0xFF8
  9672                           tblptrh	equ	0xFF7
  9673                           tblptrl	equ	0xFF6
  9674                           tablat	equ	0xFF5
  9675                           prodh	equ	0xFF4
  9676                           prodl	equ	0xFF3
  9677                           intcon	equ	0xFF2
  9678                           intcon2	equ	0xFF1
  9679                           postinc0	equ	0xFEE
  9680                           wreg	equ	0xFE8
  9681                           indf1	equ	0xFE7
  9682                           postdec1	equ	0xFE5
  9683                           fsr1h	equ	0xFE2
  9684                           fsr1l	equ	0xFE1
  9685                           indf2	equ	0xFDF
  9686                           postinc2	equ	0xFDE
  9687                           postdec2	equ	0xFDD
  9688                           fsr2h	equ	0xFDA
  9689                           fsr2l	equ	0xFD9
  9690                           status	equ	0xFD8
  9691                           
  9692 ;; *************** function _EUSART1_Initialize *****************
  9693 ;; Defined at:
  9694 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  9695 ;; Parameters:    Size  Location     Type
  9696 ;;		None
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;		None
  9699 ;; Return value:  Size  Location     Type
  9700 ;;                  1    wreg      void 
  9701 ;; Registers used:
  9702 ;;		wreg, status,2
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9708 ;;      Params:         0       0       0       0       0       0       0
  9709 ;;      Locals:         0       0       0       0       0       0       0
  9710 ;;      Temps:          0       0       0       0       0       0       0
  9711 ;;      Totals:         0       0       0       0       0       0       0
  9712 ;;Total ram usage:        0 bytes
  9713 ;; Hardware stack levels used:    1
  9714 ;; Hardware stack levels required when called:    3
  9715 ;; This function calls:
  9716 ;;		Nothing
  9717 ;; This function is called by:
  9718 ;;		_SYSTEM_Initialize
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           	psect	text34
  9723  004320                     __ptext34:
  9724                           	opt stack 0
  9725  004320                     _EUSART1_Initialize:
  9726                           	opt stack 25
  9727                           
  9728                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  9729                           
  9730                           ;incstack = 0
  9731  004320  9A9D               	bcf	3997,5,c	;volatile
  9732                           
  9733                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  9734  004322  989D               	bcf	3997,4,c	;volatile
  9735                           
  9736                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  9737  004324  0E08               	movlw	8
  9738  004326  6EB8               	movwf	4024,c	;volatile
  9739                           
  9740                           ;eusart1.c: 85: RCSTA1 = 0x90;
  9741  004328  0E90               	movlw	144
  9742  00432A  6EAB               	movwf	4011,c	;volatile
  9743                           
  9744                           ;eusart1.c: 88: TXSTA1 = 0x24;
  9745  00432C  0E24               	movlw	36
  9746  00432E  6EAC               	movwf	4012,c	;volatile
  9747                           
  9748                           ;eusart1.c: 91: SPBRG1 = 0x10;
  9749  004330  0E10               	movlw	16
  9750  004332  6EAF               	movwf	4015,c	;volatile
  9751                           
  9752                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  9753  004334  0E00               	movlw	0
  9754  004336  6EB0               	movwf	4016,c	;volatile
  9755                           
  9756                           ;eusart1.c: 98: eusart1TxHead = 0;
  9757  004338  0E00               	movlw	0
  9758  00433A  6E44               	movwf	_eusart1TxHead,c	;volatile
  9759                           
  9760                           ;eusart1.c: 99: eusart1TxTail = 0;
  9761  00433C  0E00               	movlw	0
  9762  00433E  6E43               	movwf	_eusart1TxTail,c	;volatile
  9763                           
  9764                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9765  004340  0E46               	movlw	70
  9766  004342  0101               	movlb	1	; () banked
  9767  004344  6FEA               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9768                           
  9769                           ;eusart1.c: 102: eusart1RxHead = 0;
  9770  004346  0E00               	movlw	0
  9771  004348  6E42               	movwf	_eusart1RxHead,c	;volatile
  9772                           
  9773                           ;eusart1.c: 103: eusart1RxTail = 0;
  9774  00434A  0E00               	movlw	0
  9775  00434C  6E41               	movwf	_eusart1RxTail,c	;volatile
  9776                           
  9777                           ;eusart1.c: 104: eusart1RxCount = 0;
  9778  00434E  0E00               	movlw	0
  9779  004350  6FD5               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9780                           
  9781                           ; BSR set to: 1
  9782                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9783  004352  8A9D               	bsf	3997,5,c	;volatile
  9784                           
  9785                           ; BSR set to: 1
  9786  004354  0012               	return		;funcret
  9787  004356                     __end_of_EUSART1_Initialize:
  9788                           	opt stack 0
  9789                           tosu	equ	0xFFF
  9790                           tosh	equ	0xFFE
  9791                           tosl	equ	0xFFD
  9792                           pclath	equ	0xFFA
  9793                           tblptru	equ	0xFF8
  9794                           tblptrh	equ	0xFF7
  9795                           tblptrl	equ	0xFF6
  9796                           tablat	equ	0xFF5
  9797                           prodh	equ	0xFF4
  9798                           prodl	equ	0xFF3
  9799                           intcon	equ	0xFF2
  9800                           intcon2	equ	0xFF1
  9801                           postinc0	equ	0xFEE
  9802                           wreg	equ	0xFE8
  9803                           indf1	equ	0xFE7
  9804                           postdec1	equ	0xFE5
  9805                           fsr1h	equ	0xFE2
  9806                           fsr1l	equ	0xFE1
  9807                           indf2	equ	0xFDF
  9808                           postinc2	equ	0xFDE
  9809                           postdec2	equ	0xFDD
  9810                           fsr2h	equ	0xFDA
  9811                           fsr2l	equ	0xFD9
  9812                           status	equ	0xFD8
  9813                           
  9814 ;; *************** function _ADC_Initialize *****************
  9815 ;; Defined at:
  9816 ;;		line 58 in file "mcc_generated_files/adc.c"
  9817 ;; Parameters:    Size  Location     Type
  9818 ;;		None
  9819 ;; Auto vars:     Size  Location     Type
  9820 ;;		None
  9821 ;; Return value:  Size  Location     Type
  9822 ;;                  1    wreg      void 
  9823 ;; Registers used:
  9824 ;;		wreg, status,2
  9825 ;; Tracked objects:
  9826 ;;		On entry : 0/0
  9827 ;;		On exit  : 0/0
  9828 ;;		Unchanged: 0/0
  9829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9830 ;;      Params:         0       0       0       0       0       0       0
  9831 ;;      Locals:         0       0       0       0       0       0       0
  9832 ;;      Temps:          0       0       0       0       0       0       0
  9833 ;;      Totals:         0       0       0       0       0       0       0
  9834 ;;Total ram usage:        0 bytes
  9835 ;; Hardware stack levels used:    1
  9836 ;; Hardware stack levels required when called:    3
  9837 ;; This function calls:
  9838 ;;		Nothing
  9839 ;; This function is called by:
  9840 ;;		_SYSTEM_Initialize
  9841 ;; This function uses a non-reentrant model
  9842 ;;
  9843                           
  9844                           	psect	text35
  9845  0045B2                     __ptext35:
  9846                           	opt stack 0
  9847  0045B2                     _ADC_Initialize:
  9848                           	opt stack 25
  9849                           
  9850                           ;adc.c: 63: ADCON0 = 0x05;
  9851                           
  9852                           ; BSR set to: 1
  9853                           ;incstack = 0
  9854  0045B2  0E05               	movlw	5
  9855  0045B4  6EC2               	movwf	4034,c	;volatile
  9856                           
  9857                           ;adc.c: 66: ADCON1 = 0x00;
  9858  0045B6  0E00               	movlw	0
  9859  0045B8  6EC1               	movwf	4033,c	;volatile
  9860                           
  9861                           ;adc.c: 69: ADCON2 = 0x87;
  9862  0045BA  0E87               	movlw	135
  9863  0045BC  6EC0               	movwf	4032,c	;volatile
  9864                           
  9865                           ;adc.c: 72: ADRESL = 0x00;
  9866  0045BE  0E00               	movlw	0
  9867  0045C0  6EC3               	movwf	4035,c	;volatile
  9868                           
  9869                           ;adc.c: 75: ADRESH = 0x00;
  9870  0045C2  0E00               	movlw	0
  9871  0045C4  6EC4               	movwf	4036,c	;volatile
  9872  0045C6  0012               	return		;funcret
  9873  0045C8                     __end_of_ADC_Initialize:
  9874                           	opt stack 0
  9875                           tosu	equ	0xFFF
  9876                           tosh	equ	0xFFE
  9877                           tosl	equ	0xFFD
  9878                           pclath	equ	0xFFA
  9879                           tblptru	equ	0xFF8
  9880                           tblptrh	equ	0xFF7
  9881                           tblptrl	equ	0xFF6
  9882                           tablat	equ	0xFF5
  9883                           prodh	equ	0xFF4
  9884                           prodl	equ	0xFF3
  9885                           intcon	equ	0xFF2
  9886                           intcon2	equ	0xFF1
  9887                           postinc0	equ	0xFEE
  9888                           wreg	equ	0xFE8
  9889                           indf1	equ	0xFE7
  9890                           postdec1	equ	0xFE5
  9891                           fsr1h	equ	0xFE2
  9892                           fsr1l	equ	0xFE1
  9893                           indf2	equ	0xFDF
  9894                           postinc2	equ	0xFDE
  9895                           postdec2	equ	0xFDD
  9896                           fsr2h	equ	0xFDA
  9897                           fsr2l	equ	0xFD9
  9898                           status	equ	0xFD8
  9899                           
  9900 ;; *************** function _SetMcuRunTime *****************
  9901 ;; Defined at:
  9902 ;;		line 47 in file "SystemStatus.c"
  9903 ;; Parameters:    Size  Location     Type
  9904 ;;		None
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;		None
  9907 ;; Return value:  Size  Location     Type
  9908 ;;                  1    wreg      void 
  9909 ;; Registers used:
  9910 ;;		wreg, status,2, status,0, cstack
  9911 ;; Tracked objects:
  9912 ;;		On entry : 0/0
  9913 ;;		On exit  : 0/0
  9914 ;;		Unchanged: 0/0
  9915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9916 ;;      Params:         0       0       0       0       0       0       0
  9917 ;;      Locals:         0       0       0       0       0       0       0
  9918 ;;      Temps:          0       0       0       0       0       0       0
  9919 ;;      Totals:         0       0       0       0       0       0       0
  9920 ;;Total ram usage:        0 bytes
  9921 ;; Hardware stack levels used:    1
  9922 ;; Hardware stack levels required when called:    4
  9923 ;; This function calls:
  9924 ;;		___llmod
  9925 ;; This function is called by:
  9926 ;;		_main
  9927 ;; This function uses a non-reentrant model
  9928 ;;
  9929                           
  9930                           	psect	text36
  9931  0040AE                     __ptext36:
  9932                           	opt stack 0
  9933  0040AE                     _SetMcuRunTime:
  9934                           	opt stack 26
  9935                           
  9936                           ;SystemStatus.c: 49: mcuRunTimeIn5SecTicks++;
  9937                           
  9938                           ;incstack = 0
  9939  0040AE  0E01               	movlw	1
  9940  0040B0  0101               	movlb	1	; () banked
  9941  0040B2  27B2               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9942  0040B4  0E00               	movlw	0
  9943  0040B6  23B3               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9944  0040B8  23B4               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9945  0040BA  23B5               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9946                           
  9947                           ; BSR set to: 1
  9948                           ;SystemStatus.c: 50: mcuRunTimeIn5SecTicks %= (17280);
  9949  0040BC  C1B2  F0B3         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9950  0040C0  C1B3  F0B4         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9951  0040C4  C1B4  F0B5         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9952  0040C8  C1B5  F0B6         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9953  0040CC  0E80               	movlw	128
  9954  0040CE  0100               	movlb	0	; () banked
  9955  0040D0  6FB7               	movwf	___llmod@divisor& (0+255),b
  9956  0040D2  0E43               	movlw	67
  9957  0040D4  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
  9958  0040D6  0E00               	movlw	0
  9959  0040D8  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  9960  0040DA  0E00               	movlw	0
  9961  0040DC  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  9962  0040DE  EC4D  F01D         	call	___llmod	;wreg free
  9963  0040E2  C0B3  F1B2         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9964  0040E6  C0B4  F1B3         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9965  0040EA  C0B5  F1B4         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9966  0040EE  C0B6  F1B5         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9967  0040F2  0012               	return		;funcret
  9968  0040F4                     __end_of_SetMcuRunTime:
  9969                           	opt stack 0
  9970                           tosu	equ	0xFFF
  9971                           tosh	equ	0xFFE
  9972                           tosl	equ	0xFFD
  9973                           pclath	equ	0xFFA
  9974                           tblptru	equ	0xFF8
  9975                           tblptrh	equ	0xFF7
  9976                           tblptrl	equ	0xFF6
  9977                           tablat	equ	0xFF5
  9978                           prodh	equ	0xFF4
  9979                           prodl	equ	0xFF3
  9980                           intcon	equ	0xFF2
  9981                           intcon2	equ	0xFF1
  9982                           postinc0	equ	0xFEE
  9983                           wreg	equ	0xFE8
  9984                           indf1	equ	0xFE7
  9985                           postdec1	equ	0xFE5
  9986                           fsr1h	equ	0xFE2
  9987                           fsr1l	equ	0xFE1
  9988                           indf2	equ	0xFDF
  9989                           postinc2	equ	0xFDE
  9990                           postdec2	equ	0xFDD
  9991                           fsr2h	equ	0xFDA
  9992                           fsr2l	equ	0xFD9
  9993                           status	equ	0xFD8
  9994                           
  9995 ;; *************** function _SendUartSystemInitMessage *****************
  9996 ;; Defined at:
  9997 ;;		line 68 in file "SystemStatus.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;		None
 10000 ;; Auto vars:     Size  Location     Type
 10001 ;;  dest           50    0[BANK1 ] unsigned char [50]
 10002 ;; Return value:  Size  Location     Type
 10003 ;;                  1    wreg      void 
 10004 ;; Registers used:
 10005 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10006 ;; Tracked objects:
 10007 ;;		On entry : 0/0
 10008 ;;		On exit  : 0/0
 10009 ;;		Unchanged: 0/0
 10010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10011 ;;      Params:         0       0       0       0       0       0       0
 10012 ;;      Locals:         0       0      50       0       0       0       0
 10013 ;;      Temps:          0       0       0       0       0       0       0
 10014 ;;      Totals:         0       0      50       0       0       0       0
 10015 ;;Total ram usage:       50 bytes
 10016 ;; Hardware stack levels used:    1
 10017 ;; Hardware stack levels required when called:    7
 10018 ;; This function calls:
 10019 ;;		_UART_Write_Text
 10020 ;;		_sprintf
 10021 ;; This function is called by:
 10022 ;;		_main
 10023 ;; This function uses a non-reentrant model
 10024 ;;
 10025                           
 10026                           	psect	text37
 10027  002CB8                     __ptext37:
 10028                           	opt stack 0
 10029  002CB8                     _SendUartSystemInitMessage:
 10030                           	opt stack 23
 10031                           
 10032                           ;SystemStatus.c: 70: char dest[50];
 10033                           ;SystemStatus.c: 72: sprintf(dest, "*************************** \n\r");
 10034                           
 10035                           ;incstack = 0
 10036  002CB8  0E00               	movlw	low SendUartSystemInitMessage@dest
 10037  002CBA  0100               	movlb	0	; () banked
 10038  002CBC  6FBC               	movwf	sprintf@sp& (0+255),b
 10039  002CBE  0E01               	movlw	high SendUartSystemInitMessage@dest
 10040  002CC0  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10041  002CC2  0E12               	movlw	low STR_18
 10042  002CC4  6FBE               	movwf	sprintf@f& (0+255),b
 10043  002CC6  0E7E               	movlw	high STR_18
 10044  002CC8  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10045  002CCA  EC70  F000         	call	_sprintf	;wreg free
 10046                           
 10047                           ;SystemStatus.c: 73: UART_Write_Text(dest);
 10048  002CCE  0E00               	movlw	low SendUartSystemInitMessage@dest
 10049  002CD0  6E19               	movwf	UART_Write_Text@text,c
 10050  002CD2  0E01               	movlw	high SendUartSystemInitMessage@dest
 10051  002CD4  6E1A               	movwf	UART_Write_Text@text+1,c
 10052  002CD6  ECDC  F01C         	call	_UART_Write_Text	;wreg free
 10053                           
 10054                           ;SystemStatus.c: 75: sprintf(dest, "FAST LINK SYSTEM \n\r");
 10055  002CDA  0E00               	movlw	low SendUartSystemInitMessage@dest
 10056  002CDC  0100               	movlb	0	; () banked
 10057  002CDE  6FBC               	movwf	sprintf@sp& (0+255),b
 10058  002CE0  0E01               	movlw	high SendUartSystemInitMessage@dest
 10059  002CE2  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10060  002CE4  0E26               	movlw	low STR_19
 10061  002CE6  6FBE               	movwf	sprintf@f& (0+255),b
 10062  002CE8  0E7F               	movlw	high STR_19
 10063  002CEA  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10064  002CEC  EC70  F000         	call	_sprintf	;wreg free
 10065                           
 10066                           ;SystemStatus.c: 76: UART_Write_Text(dest);
 10067  002CF0  0E00               	movlw	low SendUartSystemInitMessage@dest
 10068  002CF2  6E19               	movwf	UART_Write_Text@text,c
 10069  002CF4  0E01               	movlw	high SendUartSystemInitMessage@dest
 10070  002CF6  6E1A               	movwf	UART_Write_Text@text+1,c
 10071  002CF8  ECDC  F01C         	call	_UART_Write_Text	;wreg free
 10072                           
 10073                           ;SystemStatus.c: 78: sprintf(dest, "SW VESRION: %s \n\r", "1_002");
 10074  002CFC  0E00               	movlw	low SendUartSystemInitMessage@dest
 10075  002CFE  0100               	movlb	0	; () banked
 10076  002D00  6FBC               	movwf	sprintf@sp& (0+255),b
 10077  002D02  0E01               	movlw	high SendUartSystemInitMessage@dest
 10078  002D04  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10079  002D06  0E62               	movlw	low STR_20
 10080  002D08  6FBE               	movwf	sprintf@f& (0+255),b
 10081  002D0A  0E7F               	movlw	high STR_20
 10082  002D0C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10083  002D0E  0EF3               	movlw	low STR_21
 10084  002D10  6FC0               	movwf	(?_sprintf+4)& (0+255),b
 10085  002D12  0E7F               	movlw	high STR_21
 10086  002D14  6FC1               	movwf	(?_sprintf+5)& (0+255),b
 10087  002D16  EC70  F000         	call	_sprintf	;wreg free
 10088                           
 10089                           ;SystemStatus.c: 79: UART_Write_Text(dest);
 10090  002D1A  0E00               	movlw	low SendUartSystemInitMessage@dest
 10091  002D1C  6E19               	movwf	UART_Write_Text@text,c
 10092  002D1E  0E01               	movlw	high SendUartSystemInitMessage@dest
 10093  002D20  6E1A               	movwf	UART_Write_Text@text+1,c
 10094  002D22  ECDC  F01C         	call	_UART_Write_Text	;wreg free
 10095                           
 10096                           ;SystemStatus.c: 81: sprintf(dest, "Compile date: %s \n\r", "Mar 29 2018");
 10097  002D26  0E00               	movlw	low SendUartSystemInitMessage@dest
 10098  002D28  0100               	movlb	0	; () banked
 10099  002D2A  6FBC               	movwf	sprintf@sp& (0+255),b
 10100  002D2C  0E01               	movlw	high SendUartSystemInitMessage@dest
 10101  002D2E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10102  002D30  0E4E               	movlw	low STR_22
 10103  002D32  6FBE               	movwf	sprintf@f& (0+255),b
 10104  002D34  0E7F               	movlw	high STR_22
 10105  002D36  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10106  002D38  0EAF               	movlw	low STR_23
 10107  002D3A  6FC0               	movwf	(?_sprintf+4)& (0+255),b
 10108  002D3C  0E7F               	movlw	high STR_23
 10109  002D3E  6FC1               	movwf	(?_sprintf+5)& (0+255),b
 10110  002D40  EC70  F000         	call	_sprintf	;wreg free
 10111                           
 10112                           ;SystemStatus.c: 82: UART_Write_Text(dest);
 10113  002D44  0E00               	movlw	low SendUartSystemInitMessage@dest
 10114  002D46  6E19               	movwf	UART_Write_Text@text,c
 10115  002D48  0E01               	movlw	high SendUartSystemInitMessage@dest
 10116  002D4A  6E1A               	movwf	UART_Write_Text@text+1,c
 10117  002D4C  ECDC  F01C         	call	_UART_Write_Text	;wreg free
 10118                           
 10119                           ;SystemStatus.c: 84: sprintf(dest, "Compile time: %s \n\r", "13:38:04");
 10120  002D50  0E00               	movlw	low SendUartSystemInitMessage@dest
 10121  002D52  0100               	movlb	0	; () banked
 10122  002D54  6FBC               	movwf	sprintf@sp& (0+255),b
 10123  002D56  0E01               	movlw	high SendUartSystemInitMessage@dest
 10124  002D58  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10125  002D5A  0E3A               	movlw	low STR_24
 10126  002D5C  6FBE               	movwf	sprintf@f& (0+255),b
 10127  002D5E  0E7F               	movlw	high STR_24
 10128  002D60  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10129  002D62  0EDA               	movlw	low STR_25
 10130  002D64  6FC0               	movwf	(?_sprintf+4)& (0+255),b
 10131  002D66  0E7F               	movlw	high STR_25
 10132  002D68  6FC1               	movwf	(?_sprintf+5)& (0+255),b
 10133  002D6A  EC70  F000         	call	_sprintf	;wreg free
 10134                           
 10135                           ;SystemStatus.c: 85: UART_Write_Text(dest);
 10136  002D6E  0E00               	movlw	low SendUartSystemInitMessage@dest
 10137  002D70  6E19               	movwf	UART_Write_Text@text,c
 10138  002D72  0E01               	movlw	high SendUartSystemInitMessage@dest
 10139  002D74  6E1A               	movwf	UART_Write_Text@text+1,c
 10140  002D76  ECDC  F01C         	call	_UART_Write_Text	;wreg free
 10141                           
 10142                           ;SystemStatus.c: 87: sprintf(dest, "*************************** \n\r");
 10143  002D7A  0E00               	movlw	low SendUartSystemInitMessage@dest
 10144  002D7C  0100               	movlb	0	; () banked
 10145  002D7E  6FBC               	movwf	sprintf@sp& (0+255),b
 10146  002D80  0E01               	movlw	high SendUartSystemInitMessage@dest
 10147  002D82  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10148  002D84  0E12               	movlw	low STR_18
 10149  002D86  6FBE               	movwf	sprintf@f& (0+255),b
 10150  002D88  0E7E               	movlw	high STR_18
 10151  002D8A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10152  002D8C  EC70  F000         	call	_sprintf	;wreg free
 10153                           
 10154                           ;SystemStatus.c: 88: UART_Write_Text(dest);
 10155  002D90  0E00               	movlw	low SendUartSystemInitMessage@dest
 10156  002D92  6E19               	movwf	UART_Write_Text@text,c
 10157  002D94  0E01               	movlw	high SendUartSystemInitMessage@dest
 10158  002D96  6E1A               	movwf	UART_Write_Text@text+1,c
 10159  002D98  ECDC  F01C         	call	_UART_Write_Text	;wreg free
 10160  002D9C  0012               	return		;funcret
 10161  002D9E                     __end_of_SendUartSystemInitMessage:
 10162                           	opt stack 0
 10163                           tosu	equ	0xFFF
 10164                           tosh	equ	0xFFE
 10165                           tosl	equ	0xFFD
 10166                           pclath	equ	0xFFA
 10167                           tblptru	equ	0xFF8
 10168                           tblptrh	equ	0xFF7
 10169                           tblptrl	equ	0xFF6
 10170                           tablat	equ	0xFF5
 10171                           prodh	equ	0xFF4
 10172                           prodl	equ	0xFF3
 10173                           intcon	equ	0xFF2
 10174                           intcon2	equ	0xFF1
 10175                           postinc0	equ	0xFEE
 10176                           wreg	equ	0xFE8
 10177                           indf1	equ	0xFE7
 10178                           postdec1	equ	0xFE5
 10179                           fsr1h	equ	0xFE2
 10180                           fsr1l	equ	0xFE1
 10181                           indf2	equ	0xFDF
 10182                           postinc2	equ	0xFDE
 10183                           postdec2	equ	0xFDD
 10184                           fsr2h	equ	0xFDA
 10185                           fsr2l	equ	0xFD9
 10186                           status	equ	0xFD8
 10187                           
 10188 ;; *************** function _SampleSingleChannel *****************
 10189 ;; Defined at:
 10190 ;;		line 98 in file "AdcApp.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;		None
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;  _adcResult      2   53[BANK1 ] unsigned int 
 10195 ;;  dest           50    0[BANK1 ] unsigned char [50]
 10196 ;;  adcRes          2   55[BANK1 ] unsigned int 
 10197 ;; Return value:  Size  Location     Type
 10198 ;;                  1    wreg      unsigned char 
 10199 ;; Registers used:
 10200 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10201 ;; Tracked objects:
 10202 ;;		On entry : 0/0
 10203 ;;		On exit  : 0/0
 10204 ;;		Unchanged: 0/0
 10205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10206 ;;      Params:         0       0       0       0       0       0       0
 10207 ;;      Locals:         0       0      57       0       0       0       0
 10208 ;;      Temps:          0       2       0       0       0       0       0
 10209 ;;      Totals:         0       2      57       0       0       0       0
 10210 ;;Total ram usage:       59 bytes
 10211 ;; Hardware stack levels used:    1
 10212 ;; Hardware stack levels required when called:    8
 10213 ;; This function calls:
 10214 ;;		_ADC_GetConversion
 10215 ;;		_UART_Write_Text
 10216 ;;		___ftdiv
 10217 ;;		___ftmul
 10218 ;;		___fttol
 10219 ;;		___lwtoft
 10220 ;;		_pow
 10221 ;;		_sprintf
 10222 ;; This function is called by:
 10223 ;;		_main
 10224 ;; This function uses a non-reentrant model
 10225 ;;
 10226                           
 10227                           	psect	text38
 10228  001A98                     __ptext38:
 10229                           	opt stack 0
 10230  001A98                     _SampleSingleChannel:
 10231                           	opt stack 22
 10232                           
 10233                           ;AdcApp.c: 100: char dest[50];
 10234                           ;AdcApp.c: 101: uint16_t adcRes = 0x0;
 10235                           
 10236                           ;incstack = 0
 10237  001A98  0E00               	movlw	0
 10238  001A9A  0101               	movlb	1	; () banked
 10239  001A9C  6F38               	movwf	(SampleSingleChannel@adcRes+1)& (0+255),b
 10240  001A9E  0E00               	movlw	0
 10241  001AA0  6F37               	movwf	SampleSingleChannel@adcRes& (0+255),b
 10242                           
 10243                           ; BSR set to: 1
 10244                           ;AdcApp.c: 102: if(numSamples > 0)
 10245  001AA2  51C4               	movf	_numSamples& (0+255),w,b
 10246  001AA4  11C5               	iorwf	(_numSamples+1)& (0+255),w,b
 10247  001AA6  B4D8               	btfsc	status,2,c
 10248  001AA8  D0B5               	goto	l175
 10249                           
 10250                           ; BSR set to: 1
 10251                           ;AdcApp.c: 103: {
 10252                           ;AdcApp.c: 104: adc_result_t _adcResult = ADC_GetConversion(channelArr[channelNum]);
 10253  001AAA  0E33               	movlw	low _channelArr
 10254  001AAC  243D               	addwf	_channelNum,w,c
 10255  001AAE  6EF6               	movwf	tblptrl,c
 10256  001AB0  0E78               	movlw	high _channelArr
 10257  001AB2  203E               	addwfc	_channelNum+1,w,c
 10258  001AB4  6EF7               	movwf	tblptrh,c
 10259  001AB6                     	if	0	;There are less than 3 active tblptr bytes
 10260  001AB6                     	endif
 10261  001AB6  0008               	tblrd		*
 10262  001AB8  50F5               	movf	tablat,w,c
 10263  001ABA  ECF9  F021         	call	_ADC_GetConversion
 10264  001ABE  C018  F135         	movff	?_ADC_GetConversion,SampleSingleChannel@_adcResult
 10265  001AC2  C019  F136         	movff	?_ADC_GetConversion+1,SampleSingleChannel@_adcResult+1
 10266                           
 10267                           ;AdcApp.c: 105: adcRes = (_adcResult/pow(2,(10)))*(3340);
 10268  001AC6  0E00               	movlw	0
 10269  001AC8  0100               	movlb	0	; () banked
 10270  001ACA  6FA5               	movwf	pow@y& (0+255),b
 10271  001ACC  0E20               	movlw	32
 10272  001ACE  6FA6               	movwf	(pow@y+1)& (0+255),b
 10273  001AD0  0E41               	movlw	65
 10274  001AD2  6FA7               	movwf	(pow@y+2)& (0+255),b
 10275  001AD4  0E00               	movlw	0
 10276  001AD6  6FA2               	movwf	pow@x& (0+255),b
 10277  001AD8  0E00               	movlw	0
 10278  001ADA  6FA3               	movwf	(pow@x+1)& (0+255),b
 10279  001ADC  0E40               	movlw	64
 10280  001ADE  6FA4               	movwf	(pow@x+2)& (0+255),b
 10281  001AE0  EC13  F00E         	call	_pow	;wreg free
 10282  001AE4  C0A2  F132         	movff	?_pow,_SampleSingleChannel$3983
 10283  001AE8  C0A3  F133         	movff	?_pow+1,_SampleSingleChannel$3983+1
 10284  001AEC  C0A4  F134         	movff	?_pow+2,_SampleSingleChannel$3983+2
 10285                           
 10286                           ;AdcApp.c: 105: adcRes = (_adcResult/pow(2,(10)))*(3340);
 10287  001AF0  0EC0               	movlw	192
 10288  001AF2  0100               	movlb	0	; () banked
 10289  001AF4  6F69               	movwf	___ftmul@f2& (0+255),b
 10290  001AF6  0E50               	movlw	80
 10291  001AF8  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 10292  001AFA  0E45               	movlw	69
 10293  001AFC  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 10294  001AFE  C132  F026         	movff	_SampleSingleChannel$3983,___ftdiv@f2
 10295  001B02  C133  F027         	movff	_SampleSingleChannel$3983+1,___ftdiv@f2+1
 10296  001B06  C134  F028         	movff	_SampleSingleChannel$3983+2,___ftdiv@f2+2
 10297  001B0A  C135  F020         	movff	SampleSingleChannel@_adcResult,___lwtoft@c
 10298  001B0E  C136  F021         	movff	SampleSingleChannel@_adcResult+1,___lwtoft@c+1
 10299  001B12  EC61  F022         	call	___lwtoft	;wreg free
 10300  001B16  C020  F023         	movff	?___lwtoft,___ftdiv@f1
 10301  001B1A  C021  F024         	movff	?___lwtoft+1,___ftdiv@f1+1
 10302  001B1E  C022  F025         	movff	?___lwtoft+2,___ftdiv@f1+2
 10303  001B22  ECE8  F015         	call	___ftdiv	;wreg free
 10304  001B26  C023  F066         	movff	?___ftdiv,___ftmul@f1
 10305  001B2A  C024  F067         	movff	?___ftdiv+1,___ftmul@f1+1
 10306  001B2E  C025  F068         	movff	?___ftdiv+2,___ftmul@f1+2
 10307  001B32  EC6D  F015         	call	___ftmul	;wreg free
 10308  001B36  C066  F079         	movff	?___ftmul,___fttol@f1
 10309  001B3A  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
 10310  001B3E  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
 10311  001B42  ECF1  F014         	call	___fttol	;wreg free
 10312  001B46  C079  F137         	movff	?___fttol,SampleSingleChannel@adcRes
 10313  001B4A  C07A  F138         	movff	?___fttol+1,SampleSingleChannel@adcRes+1
 10314                           
 10315                           ;AdcApp.c: 106: if(channelArr[channelNum] == 0x6) lastAdcTemp = adcRes;
 10316  001B4E  0E33               	movlw	low _channelArr
 10317  001B50  243D               	addwf	_channelNum,w,c
 10318  001B52  6EF6               	movwf	tblptrl,c
 10319  001B54  0E78               	movlw	high _channelArr
 10320  001B56  203E               	addwfc	_channelNum+1,w,c
 10321  001B58  6EF7               	movwf	tblptrh,c
 10322  001B5A                     	if	0	;There are less than 3 active tblptr bytes
 10323  001B5A                     	endif
 10324  001B5A  0008               	tblrd		*
 10325  001B5C  50F5               	movf	tablat,w,c
 10326  001B5E  0A06               	xorlw	6
 10327  001B60  A4D8               	btfss	status,2,c
 10328  001B62  D004               	goto	l176
 10329  001B64  C137  F03F         	movff	SampleSingleChannel@adcRes,_lastAdcTemp	;volatile
 10330  001B68  C138  F040         	movff	SampleSingleChannel@adcRes+1,_lastAdcTemp+1	;volatile
 10331  001B6C                     l176:
 10332                           
 10333                           ;AdcApp.c: 107: if(channelArr[channelNum] == 0x5) lastAdcFfwrRSSI = adcRes;
 10334  001B6C  0E33               	movlw	low _channelArr
 10335  001B6E  243D               	addwf	_channelNum,w,c
 10336  001B70  6EF6               	movwf	tblptrl,c
 10337  001B72  0E78               	movlw	high _channelArr
 10338  001B74  203E               	addwfc	_channelNum+1,w,c
 10339  001B76  6EF7               	movwf	tblptrh,c
 10340  001B78                     	if	0	;There are less than 3 active tblptr bytes
 10341  001B78                     	endif
 10342  001B78  0008               	tblrd		*
 10343  001B7A  50F5               	movf	tablat,w,c
 10344  001B7C  0A05               	xorlw	5
 10345  001B7E  A4D8               	btfss	status,2,c
 10346  001B80  D004               	goto	l177
 10347  001B82  C137  F1CC         	movff	SampleSingleChannel@adcRes,_lastAdcFfwrRSSI	;volatile
 10348  001B86  C138  F1CD         	movff	SampleSingleChannel@adcRes+1,_lastAdcFfwrRSSI+1	;volatile
 10349  001B8A                     l177:
 10350                           
 10351                           ;AdcApp.c: 108: if(channelArr[channelNum] == 0x4) lastAdcRREV = adcRes;
 10352  001B8A  0E33               	movlw	low _channelArr
 10353  001B8C  243D               	addwf	_channelNum,w,c
 10354  001B8E  6EF6               	movwf	tblptrl,c
 10355  001B90  0E78               	movlw	high _channelArr
 10356  001B92  203E               	addwfc	_channelNum+1,w,c
 10357  001B94  6EF7               	movwf	tblptrh,c
 10358  001B96                     	if	0	;There are less than 3 active tblptr bytes
 10359  001B96                     	endif
 10360  001B96  0008               	tblrd		*
 10361  001B98  50F5               	movf	tablat,w,c
 10362  001B9A  0A04               	xorlw	4
 10363  001B9C  A4D8               	btfss	status,2,c
 10364  001B9E  D004               	goto	l178
 10365  001BA0  C137  F1CA         	movff	SampleSingleChannel@adcRes,_lastAdcRREV	;volatile
 10366  001BA4  C138  F1CB         	movff	SampleSingleChannel@adcRes+1,_lastAdcRREV+1	;volatile
 10367  001BA8                     l178:
 10368                           
 10369                           ;AdcApp.c: 109: if(channelArr[channelNum] == 0x7) lastAdcVgMon = adcRes;
 10370  001BA8  0E33               	movlw	low _channelArr
 10371  001BAA  243D               	addwf	_channelNum,w,c
 10372  001BAC  6EF6               	movwf	tblptrl,c
 10373  001BAE  0E78               	movlw	high _channelArr
 10374  001BB0  203E               	addwfc	_channelNum+1,w,c
 10375  001BB2  6EF7               	movwf	tblptrh,c
 10376  001BB4                     	if	0	;There are less than 3 active tblptr bytes
 10377  001BB4                     	endif
 10378  001BB4  0008               	tblrd		*
 10379  001BB6  50F5               	movf	tablat,w,c
 10380  001BB8  0A07               	xorlw	7
 10381  001BBA  A4D8               	btfss	status,2,c
 10382  001BBC  D004               	goto	l179
 10383  001BBE  C137  F1C8         	movff	SampleSingleChannel@adcRes,_lastAdcVgMon	;volatile
 10384  001BC2  C138  F1C9         	movff	SampleSingleChannel@adcRes+1,_lastAdcVgMon+1	;volatile
 10385  001BC6                     l179:
 10386                           
 10387                           ;AdcApp.c: 110: sprintf(dest, "%d \t", adcRes);
 10388  001BC6  0E00               	movlw	low SampleSingleChannel@dest
 10389  001BC8  0100               	movlb	0	; () banked
 10390  001BCA  6FBC               	movwf	sprintf@sp& (0+255),b
 10391  001BCC  0E01               	movlw	high SampleSingleChannel@dest
 10392  001BCE  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
 10393  001BD0  0EF9               	movlw	low STR_8
 10394  001BD2  6FBE               	movwf	sprintf@f& (0+255),b
 10395  001BD4  0E7F               	movlw	high STR_8
 10396  001BD6  6FBF               	movwf	(sprintf@f+1)& (0+255),b
 10397  001BD8  C137  F0C0         	movff	SampleSingleChannel@adcRes,?_sprintf+4
 10398  001BDC  C138  F0C1         	movff	SampleSingleChannel@adcRes+1,?_sprintf+5
 10399  001BE0  EC70  F000         	call	_sprintf	;wreg free
 10400                           
 10401                           ;AdcApp.c: 111: UART_Write_Text(dest);
 10402  001BE4  0E00               	movlw	low SampleSingleChannel@dest
 10403  001BE6  6E19               	movwf	UART_Write_Text@text,c
 10404  001BE8  0E01               	movlw	high SampleSingleChannel@dest
 10405  001BEA  6E1A               	movwf	UART_Write_Text@text+1,c
 10406  001BEC  ECDC  F01C         	call	_UART_Write_Text	;wreg free
 10407                           
 10408                           ;AdcApp.c: 112: _delay((unsigned long)((100)*(8000000/4000.0)));
 10409  001BF0  0E02               	movlw	2
 10410  001BF2  0100               	movlb	0	; () banked
 10411  001BF4  6FE4               	movwf	(??_SampleSingleChannel+1)& (0+255),b
 10412  001BF6  0E04               	movlw	4
 10413  001BF8  6FE3               	movwf	??_SampleSingleChannel& (0+255),b
 10414  001BFA  0EBA               	movlw	186
 10415  001BFC                     u9667:
 10416  001BFC  2EE8               	decfsz	wreg,f,c
 10417  001BFE  D7FE               	bra	u9667
 10418  001C00  2FE3               	decfsz	??_SampleSingleChannel& (0+255),f,b
 10419  001C02  D7FC               	bra	u9667
 10420  001C04  2FE4               	decfsz	(??_SampleSingleChannel+1)& (0+255),f,b
 10421  001C06  D7FA               	bra	u9667
 10422  001C08  F000               	nop	
 10423                           
 10424                           ;AdcApp.c: 113: numSamples--;
 10425  001C0A  0101               	movlb	1	; () banked
 10426  001C0C  07C4               	decf	_numSamples& (0+255),f,b
 10427  001C0E  A0D8               	btfss	status,0,c
 10428  001C10  07C5               	decf	(_numSamples+1)& (0+255),f,b
 10429                           
 10430                           ;AdcApp.c: 114: }
 10431  001C12  0012               	return	
 10432  001C14                     l175:
 10433                           
 10434                           ; BSR set to: 1
 10435                           ;AdcApp.c: 115: else
 10436                           ;AdcApp.c: 116: {
 10437                           ;AdcApp.c: 117: needToSample = 0;
 10438                           
 10439                           ; BSR set to: 1
 10440  001C14  0E00               	movlw	0
 10441  001C16  6FD7               	movwf	_needToSample& (0+255),b	;volatile
 10442                           
 10443                           ; BSR set to: 1
 10444                           ;AdcApp.c: 118: UART_Write_Text("\n\r OK \n\r");
 10445  001C18  0EE3               	movlw	low STR_9
 10446  001C1A  6E19               	movwf	UART_Write_Text@text,c
 10447  001C1C  0E7F               	movlw	high STR_9
 10448  001C1E  6E1A               	movwf	UART_Write_Text@text+1,c
 10449  001C20  ECDC  F01C         	call	_UART_Write_Text	;wreg free
 10450  001C24  0012               	return	
 10451  001C26                     __end_of_SampleSingleChannel:
 10452                           	opt stack 0
 10453                           tosu	equ	0xFFF
 10454                           tosh	equ	0xFFE
 10455                           tosl	equ	0xFFD
 10456                           pclath	equ	0xFFA
 10457                           tblptru	equ	0xFF8
 10458                           tblptrh	equ	0xFF7
 10459                           tblptrl	equ	0xFF6
 10460                           tablat	equ	0xFF5
 10461                           prodh	equ	0xFF4
 10462                           prodl	equ	0xFF3
 10463                           intcon	equ	0xFF2
 10464                           intcon2	equ	0xFF1
 10465                           postinc0	equ	0xFEE
 10466                           wreg	equ	0xFE8
 10467                           indf1	equ	0xFE7
 10468                           postdec1	equ	0xFE5
 10469                           fsr1h	equ	0xFE2
 10470                           fsr1l	equ	0xFE1
 10471                           indf2	equ	0xFDF
 10472                           postinc2	equ	0xFDE
 10473                           postdec2	equ	0xFDD
 10474                           fsr2h	equ	0xFDA
 10475                           fsr2l	equ	0xFD9
 10476                           status	equ	0xFD8
 10477                           
 10478 ;; *************** function _sprintf *****************
 10479 ;; Defined at:
 10480 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;  sp              2   92[BANK0 ] PTR unsigned char 
 10483 ;;		 -> PrintTxStatus@dest(80), PrintRxStatus@dest(80), PrintSystemStatus@dest(80), PrintHelpScreen@dest(50), 
 10484 ;;		 -> SendUartSystemInitMessage@dest(50), readUartByte@dest(50), SampleSingleChannel@dest(50), 
 10485 ;;  f               2   94[BANK0 ] PTR const unsigned char 
 10486 ;;		 -> STR_72(22), STR_71(13), STR_70(23), STR_69(10), 
 10487 ;;		 -> STR_68(24), STR_67(36), STR_66(24), STR_65(36), 
 10488 ;;		 -> STR_64(22), STR_63(22), STR_62(13), STR_61(23), 
 10489 ;;		 -> STR_60(10), STR_59(24), STR_58(36), STR_57(24), 
 10490 ;;		 -> STR_56(59), STR_55(22), STR_54(18), STR_53(15), 
 10491 ;;		 -> STR_52(22), STR_51(13), STR_49(49), STR_48(34), 
 10492 ;;		 -> STR_47(39), STR_46(73), STR_45(37), STR_44(38), 
 10493 ;;		 -> STR_43(85), STR_42(52), STR_41(46), STR_40(29), 
 10494 ;;		 -> STR_39(101), STR_38(86), STR_37(61), STR_36(62), 
 10495 ;;		 -> STR_35(45), STR_34(74), STR_33(25), STR_32(79), 
 10496 ;;		 -> STR_31(75), STR_30(46), STR_29(61), STR_28(66), 
 10497 ;;		 -> STR_27(23), STR_26(31), STR_24(20), STR_22(20), 
 10498 ;;		 -> STR_20(18), STR_19(20), STR_18(31), STR_10(11), 
 10499 ;;		 -> STR_8(5), 
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;  tmpval          4  123[BANK0 ] struct .
 10502 ;;  val             4  117[BANK0 ] unsigned long 
 10503 ;;  fval            3  127[BANK0 ] unsigned long 
 10504 ;;  exp             2  121[BANK0 ] int 
 10505 ;;  prec            2  115[BANK0 ] int 
 10506 ;;  flag            2  113[BANK0 ] unsigned short 
 10507 ;;  ap              2  111[BANK0 ] PTR void [1]
 10508 ;;		 -> ?_sprintf(2), 
 10509 ;;  cp              2  109[BANK0 ] PTR const unsigned char 
 10510 ;;		 -> STR_73(7), STR_50(6), STR_25(9), STR_23(12), 
 10511 ;;		 -> STR_21(6), 
 10512 ;;  len             2    0        unsigned int 
 10513 ;;  width           2    0        int 
 10514 ;;  c               1  130[BANK0 ] char 
 10515 ;;  d               1    0        unsigned char 
 10516 ;; Return value:  Size  Location     Type
 10517 ;;                  2   92[BANK0 ] int 
 10518 ;; Registers used:
 10519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10520 ;; Tracked objects:
 10521 ;;		On entry : 0/0
 10522 ;;		On exit  : 0/0
 10523 ;;		Unchanged: 0/0
 10524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10525 ;;      Params:         0       8       0       0       0       0       0
 10526 ;;      Locals:         0      25       0       0       0       0       0
 10527 ;;      Temps:          0       6       0       0       0       0       0
 10528 ;;      Totals:         0      39       0       0       0       0       0
 10529 ;;Total ram usage:       39 bytes
 10530 ;; Hardware stack levels used:    1
 10531 ;; Hardware stack levels required when called:    6
 10532 ;; This function calls:
 10533 ;;		___awdiv
 10534 ;;		___ftadd
 10535 ;;		___ftge
 10536 ;;		___ftmul
 10537 ;;		___ftneg
 10538 ;;		___ftsub
 10539 ;;		___fttol
 10540 ;;		___lldiv
 10541 ;;		___llmod
 10542 ;;		___lltoft
 10543 ;;		___wmul
 10544 ;;		__div_to_l_
 10545 ;;		__tdiv_to_l_
 10546 ;;		_fround
 10547 ;;		_scale
 10548 ;; This function is called by:
 10549 ;;		_SampleSingleChannel
 10550 ;;		_readUartByte
 10551 ;;		_SendUartSystemInitMessage
 10552 ;;		_PrintHelpScreen
 10553 ;;		_PrintSystemStatus
 10554 ;;		_PrintRxStatus
 10555 ;;		_PrintTxStatus
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           	psect	text39
 10560  0000E0                     __ptext39:
 10561                           	opt stack 0
 10562  0000E0                     _sprintf:
 10563                           	opt stack 23
 10564                           
 10565                           ;doprnt.c: 494: va_list ap;
 10566                           ;doprnt.c: 499: signed char c;
 10567                           ;doprnt.c: 501: int width;
 10568                           ;doprnt.c: 504: int prec;
 10569                           ;doprnt.c: 508: unsigned short flag;
 10570                           ;doprnt.c: 515: char d;
 10571                           ;doprnt.c: 516: double fval;
 10572                           ;doprnt.c: 517: int exp;
 10573                           ;doprnt.c: 523: union {
 10574                           ;doprnt.c: 524: unsigned long vd;
 10575                           ;doprnt.c: 525: double integ;
 10576                           ;doprnt.c: 526: } tmpval;
 10577                           ;doprnt.c: 528: unsigned long val;
 10578                           ;doprnt.c: 529: unsigned len;
 10579                           ;doprnt.c: 530: const char * cp;
 10580                           ;doprnt.c: 533: *ap = __va_start();
 10581                           
 10582                           ;incstack = 0
 10583  0000E0  0EC0               	movlw	low (?_sprintf+4)
 10584  0000E2  0100               	movlb	0	; () banked
 10585  0000E4  6FCF               	movwf	sprintf@ap& (0+255),b
 10586  0000E6  0E00               	movlw	high (?_sprintf+4)
 10587  0000E8  6FD0               	movwf	(sprintf@ap+1)& (0+255),b
 10588                           
 10589                           ;doprnt.c: 536: while(c = *f++) {
 10590  0000EA  D3C8               	goto	u8790
 10591  0000EC                     
 10592                           ; BSR set to: 0
 10593                           ;doprnt.c: 538: if(c != '%')
 10594                           
 10595                           ; BSR set to: 0
 10596  0000EC  0E25               	movlw	37
 10597  0000EE  19E2               	xorwf	sprintf@c& (0+255),w,b
 10598  0000F0  B4D8               	btfsc	status,2,c
 10599  0000F2  D009               	goto	l1658
 10600                           
 10601                           ; BSR set to: 0
 10602                           ;doprnt.c: 540: {
 10603                           ;doprnt.c: 541: ((*sp++ = (c)));
 10604  0000F4  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10605  0000F8  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10606  0000FC  C0E2  FFDF         	movff	sprintf@c,indf2
 10607                           
 10608                           ; BSR set to: 0
 10609  000100  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10610  000102  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10611                           
 10612                           ;doprnt.c: 542: continue;
 10613  000104  D3BB               	goto	u8790
 10614  000106                     l1658:
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;doprnt.c: 543: }
 10618                           ;doprnt.c: 548: flag = 0;
 10619                           
 10620                           ; BSR set to: 0
 10621  000106  0E00               	movlw	0
 10622  000108  6FD2               	movwf	(sprintf@flag+1)& (0+255),b
 10623  00010A  0E00               	movlw	0
 10624  00010C  6FD1               	movwf	sprintf@flag& (0+255),b
 10625                           
 10626                           ;doprnt.c: 635: switch(c = *f++) {
 10627  00010E  D030               	goto	l1659
 10628  000110                     
 10629                           ; BSR set to: 0
 10630                           ;doprnt.c: 663: flag |= 0x400;
 10631                           
 10632                           ; BSR set to: 0
 10633  000110  85D2               	bsf	(sprintf@flag+1)& (0+255),2,b
 10634                           
 10635                           ; BSR set to: 0
 10636                           ;doprnt.c: 698: case 'i':
 10637                           ;doprnt.c: 699: break;
 10638                           
 10639                           ; BSR set to: 0
 10640                           
 10641                           ;doprnt.c: 697: case 'd':
 10642                           
 10643                           ;doprnt.c: 664: break;
 10644  000112  D048               	goto	l1663
 10645  000114                     
 10646                           ; BSR set to: 0
 10647                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10648                           
 10649                           ; BSR set to: 0
 10650  000114  C0CF  FFD9         	movff	sprintf@ap,fsr2l
 10651  000118  C0D0  FFDA         	movff	sprintf@ap+1,fsr2h
 10652  00011C  CFDE F0CD          	movff	postinc2,sprintf@cp
 10653  000120  CFDD F0CE          	movff	postdec2,sprintf@cp+1
 10654                           
 10655                           ; BSR set to: 0
 10656  000124  0E02               	movlw	2
 10657  000126  27CF               	addwf	sprintf@ap& (0+255),f,b
 10658  000128  0E00               	movlw	0
 10659  00012A  23D0               	addwfc	(sprintf@ap+1)& (0+255),f,b
 10660                           
 10661                           ; BSR set to: 0
 10662                           ;doprnt.c: 740: if(!cp)
 10663  00012C  51CD               	movf	sprintf@cp& (0+255),w,b
 10664  00012E  11CE               	iorwf	(sprintf@cp+1)& (0+255),w,b
 10665  000130  A4D8               	btfss	status,2,c
 10666  000132  D014               	goto	l1668
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;doprnt.c: 741: cp = "(null)";
 10670  000134  0EEC               	movlw	low STR_73
 10671  000136  6FCD               	movwf	sprintf@cp& (0+255),b
 10672  000138  0E7F               	movlw	high STR_73
 10673  00013A  6FCE               	movwf	(sprintf@cp+1)& (0+255),b
 10674                           
 10675                           ; BSR set to: 0
 10676                           ;doprnt.c: 777: while(*cp)
 10677  00013C  D00F               	goto	l1668
 10678  00013E                     
 10679                           ; BSR set to: 0
 10680                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
 10681                           
 10682                           ; BSR set to: 0
 10683  00013E  C0CD  FFF6         	movff	sprintf@cp,tblptrl
 10684  000142  C0CE  FFF7         	movff	sprintf@cp+1,tblptrh
 10685  000146                     	if	0	;tblptru may be non-zero
 10686  000146                     	endif
 10687  000146                     	if	0	;tblptru may be non-zero
 10688  000146                     	endif
 10689  000146  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10690  00014A  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10691  00014E  0008               	tblrd		*
 10692  000150  CFF5 FFDF          	movff	tablat,indf2
 10693                           
 10694                           ; BSR set to: 0
 10695  000154  4BCD               	infsnz	sprintf@cp& (0+255),f,b
 10696  000156  2BCE               	incf	(sprintf@cp+1)& (0+255),f,b
 10697                           
 10698                           ; BSR set to: 0
 10699  000158  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10700  00015A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10701  00015C                     l1668:
 10702                           
 10703                           ; BSR set to: 0
 10704                           
 10705                           ; BSR set to: 0
 10706  00015C  C0CD  FFF6         	movff	sprintf@cp,tblptrl
 10707  000160  C0CE  FFF7         	movff	sprintf@cp+1,tblptrh
 10708  000164                     	if	0	;tblptru may be non-zero
 10709  000164                     	endif
 10710  000164                     	if	0	;tblptru may be non-zero
 10711  000164                     	endif
 10712  000164  0008               	tblrd		*
 10713  000166  50F5               	movf	tablat,w,c
 10714  000168  0900               	iorlw	0
 10715  00016A  B4D8               	btfsc	status,2,c
 10716  00016C  D387               	goto	u8790
 10717  00016E  D7E7               	goto	l1669
 10718  000170                     l1659:
 10719                           
 10720                           ; BSR set to: 0
 10721                           
 10722                           ; BSR set to: 0
 10723  000170  C0BE  FFF6         	movff	sprintf@f,tblptrl
 10724  000174  C0BF  FFF7         	movff	sprintf@f+1,tblptrh
 10725  000178  4BBE               	infsnz	sprintf@f& (0+255),f,b
 10726  00017A  2BBF               	incf	(sprintf@f+1)& (0+255),f,b
 10727  00017C                     	if	0	;tblptru may be non-zero
 10728  00017C                     	endif
 10729  00017C                     	if	0	;tblptru may be non-zero
 10730  00017C                     	endif
 10731  00017C  0008               	tblrd		*
 10732  00017E  CFF5 F0E2          	movff	tablat,sprintf@c
 10733  000182  51E2               	movf	sprintf@c& (0+255),w,b
 10734                           
 10735                           ; Switch size 1, requested type "space"
 10736                           ; Number of cases is 5, Range of values is 0 to 115
 10737                           ; switch strategies available:
 10738                           ; Name         Instructions Cycles
 10739                           ; simple_byte           16     9 (average)
 10740                           ;	Chosen strategy is simple_byte
 10741  000184  0A00               	xorlw	0	; case 0
 10742  000186  B4D8               	btfsc	status,2,c
 10743  000188  D385               	goto	u8800
 10744  00018A  0A64               	xorlw	100	; case 100
 10745  00018C  B4D8               	btfsc	status,2,c
 10746  00018E  D00A               	goto	l1663
 10747  000190  0A02               	xorlw	2	; case 102
 10748  000192  B4D8               	btfsc	status,2,c
 10749  000194  D7BD               	goto	l1662
 10750  000196  0A0F               	xorlw	15	; case 105
 10751  000198  B4D8               	btfsc	status,2,c
 10752  00019A  D004               	goto	l1663
 10753  00019C  0A1A               	xorlw	26	; case 115
 10754  00019E  B4D8               	btfsc	status,2,c
 10755  0001A0  D7B9               	goto	l1666
 10756  0001A2  D36C               	goto	u8790
 10757  0001A4                     l1663:
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;doprnt.c: 825: if(flag & (0x700)) {
 10761                           
 10762                           ; BSR set to: 0
 10763  0001A4  0E07               	movlw	7
 10764  0001A6  15D2               	andwf	(sprintf@flag+1)& (0+255),w,b
 10765  0001A8  B4D8               	btfsc	status,2,c
 10766  0001AA  D2C8               	goto	l1672
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;doprnt.c: 829: prec = 6;
 10770  0001AC  0E00               	movlw	0
 10771  0001AE  6FD4               	movwf	(sprintf@prec+1)& (0+255),b
 10772  0001B0  0E06               	movlw	6
 10773  0001B2  6FD3               	movwf	sprintf@prec& (0+255),b
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 10777  0001B4  C0CF  FFD9         	movff	sprintf@ap,fsr2l
 10778  0001B8  C0D0  FFDA         	movff	sprintf@ap+1,fsr2h
 10779  0001BC  CFDE F0DF          	movff	postinc2,sprintf@fval
 10780  0001C0  CFDE F0E0          	movff	postinc2,sprintf@fval+1
 10781  0001C4  CFDD F0E1          	movff	postdec2,sprintf@fval+2
 10782                           
 10783                           ; BSR set to: 0
 10784  0001C8  0E03               	movlw	3
 10785  0001CA  27CF               	addwf	sprintf@ap& (0+255),f,b
 10786  0001CC  0E00               	movlw	0
 10787  0001CE  23D0               	addwfc	(sprintf@ap+1)& (0+255),f,b
 10788                           
 10789                           ; BSR set to: 0
 10790                           ;doprnt.c: 831: if(fval < 0.0) {
 10791  0001D0  AFE1               	btfss	(sprintf@fval+2)& (0+255),7,b
 10792  0001D2  D011               	goto	l1673
 10793                           
 10794                           ; BSR set to: 0
 10795                           ;doprnt.c: 832: fval = -fval;
 10796  0001D4  C0DF  F018         	movff	sprintf@fval,___ftneg@f1
 10797  0001D8  C0E0  F019         	movff	sprintf@fval+1,___ftneg@f1+1
 10798  0001DC  C0E1  F01A         	movff	sprintf@fval+2,___ftneg@f1+2
 10799  0001E0  EC73  F022         	call	___ftneg	;wreg free
 10800  0001E4  C018  F0DF         	movff	?___ftneg,sprintf@fval
 10801  0001E8  C019  F0E0         	movff	?___ftneg+1,sprintf@fval+1
 10802  0001EC  C01A  F0E1         	movff	?___ftneg+2,sprintf@fval+2
 10803                           
 10804                           ;doprnt.c: 833: flag |= 0x03;
 10805  0001F0  0E03               	movlw	3
 10806  0001F2  0100               	movlb	0	; () banked
 10807  0001F4  13D1               	iorwf	sprintf@flag& (0+255),f,b
 10808  0001F6                     l1673:
 10809                           
 10810                           ; BSR set to: 0
 10811                           ;doprnt.c: 834: }
 10812                           ;doprnt.c: 835: exp = 0;
 10813                           
 10814                           ; BSR set to: 0
 10815  0001F6  0E00               	movlw	0
 10816  0001F8  6FDA               	movwf	(sprintf@exp+1)& (0+255),b
 10817  0001FA  0E00               	movlw	0
 10818  0001FC  6FD9               	movwf	sprintf@exp& (0+255),b
 10819                           
 10820                           ; BSR set to: 0
 10821                           ;doprnt.c: 836: if( fval!=0) {
 10822  0001FE  51DF               	movf	sprintf@fval& (0+255),w,b
 10823  000200  11E0               	iorwf	(sprintf@fval+1)& (0+255),w,b
 10824  000202  11E1               	iorwf	(sprintf@fval+2)& (0+255),w,b
 10825  000204  B4D8               	btfsc	status,2,c
 10826  000206  D086               	goto	l1678
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 10830  000208  0E82               	movlw	130
 10831  00020A  6FC4               	movwf	??_sprintf& (0+255),b
 10832  00020C  0EFF               	movlw	255
 10833  00020E  6FC5               	movwf	(??_sprintf+1)& (0+255),b
 10834  000210  C0DF  F0C6         	movff	sprintf@fval,??_sprintf+2
 10835  000214  C0E0  F0C7         	movff	sprintf@fval+1,??_sprintf+3
 10836  000218  C0E1  F0C8         	movff	sprintf@fval+2,??_sprintf+4
 10837  00021C  C0E2  F0C9         	movff	sprintf@fval+3,??_sprintf+5
 10838  000220  0E10               	movlw	16
 10839  000222  D005               	goto	u8540
 10840  000224                     u8545:
 10841  000224  90D8               	bcf	status,0,c
 10842  000226  33C9               	rrcf	(??_sprintf+5)& (0+255),f,b
 10843  000228  33C8               	rrcf	(??_sprintf+4)& (0+255),f,b
 10844  00022A  33C7               	rrcf	(??_sprintf+3)& (0+255),f,b
 10845  00022C  33C6               	rrcf	(??_sprintf+2)& (0+255),f,b
 10846  00022E                     u8540:
 10847  00022E  2EE8               	decfsz	wreg,f,c
 10848  000230  D7F9               	goto	u8545
 10849  000232  51C6               	movf	(??_sprintf+2)& (0+255),w,b
 10850  000234  25C4               	addwf	??_sprintf& (0+255),w,b
 10851  000236  6FD9               	movwf	sprintf@exp& (0+255),b
 10852  000238  0E00               	movlw	0
 10853  00023A  21C5               	addwfc	(??_sprintf+1)& (0+255),w,b
 10854  00023C  6FDA               	movwf	(sprintf@exp+1)& (0+255),b
 10855                           
 10856                           ; BSR set to: 0
 10857                           ;doprnt.c: 838: exp--;
 10858  00023E  07D9               	decf	sprintf@exp& (0+255),f,b
 10859  000240  A0D8               	btfss	status,0,c
 10860  000242  07DA               	decf	(sprintf@exp+1)& (0+255),f,b
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;doprnt.c: 839: exp *= 3;
 10864  000244  C0D9  F026         	movff	sprintf@exp,___wmul@multiplier
 10865  000248  C0DA  F027         	movff	sprintf@exp+1,___wmul@multiplier+1
 10866  00024C  0E00               	movlw	0
 10867  00024E  6E29               	movwf	___wmul@multiplicand+1,c
 10868  000250  0E03               	movlw	3
 10869  000252  6E28               	movwf	___wmul@multiplicand,c
 10870  000254  EC4E  F022         	call	___wmul	;wreg free
 10871  000258  C026  F0D9         	movff	?___wmul,sprintf@exp
 10872  00025C  C027  F0DA         	movff	?___wmul+1,sprintf@exp+1
 10873                           
 10874                           ;doprnt.c: 840: exp /= 10;
 10875  000260  C0D9  F01E         	movff	sprintf@exp,___awdiv@dividend
 10876  000264  C0DA  F01F         	movff	sprintf@exp+1,___awdiv@dividend+1
 10877  000268  0E00               	movlw	0
 10878  00026A  6E21               	movwf	___awdiv@divisor+1,c
 10879  00026C  0E0A               	movlw	10
 10880  00026E  6E20               	movwf	___awdiv@divisor,c
 10881  000270  EC65  F01B         	call	___awdiv	;wreg free
 10882  000274  C01E  F0D9         	movff	?___awdiv,sprintf@exp
 10883  000278  C01F  F0DA         	movff	?___awdiv+1,sprintf@exp+1
 10884                           
 10885                           ;doprnt.c: 841: if(exp < 0)
 10886  00027C  0100               	movlb	0	; () banked
 10887  00027E  AFDA               	btfss	(sprintf@exp+1)& (0+255),7,b
 10888  000280  D003               	goto	l1675
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;doprnt.c: 842: exp--;
 10892  000282  07D9               	decf	sprintf@exp& (0+255),f,b
 10893  000284  A0D8               	btfss	status,0,c
 10894  000286  07DA               	decf	(sprintf@exp+1)& (0+255),f,b
 10895  000288                     l1675:
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 10899                           
 10900                           ; BSR set to: 0
 10901  000288  51D9               	movf	sprintf@exp& (0+255),w,b
 10902  00028A  0800               	sublw	0
 10903  00028C  EC51  F004         	call	_scale
 10904  000290  C072  F0DB         	movff	?_scale,sprintf@tmpval
 10905  000294  C073  F0DC         	movff	?_scale+1,sprintf@tmpval+1
 10906  000298  C074  F0DD         	movff	?_scale+2,sprintf@tmpval+2
 10907                           
 10908                           ;doprnt.c: 847: tmpval.integ *= fval;
 10909  00029C  C0DB  F066         	movff	sprintf@tmpval,___ftmul@f1
 10910  0002A0  C0DC  F067         	movff	sprintf@tmpval+1,___ftmul@f1+1
 10911  0002A4  C0DD  F068         	movff	sprintf@tmpval+2,___ftmul@f1+2
 10912  0002A8  C0DF  F069         	movff	sprintf@fval,___ftmul@f2
 10913  0002AC  C0E0  F06A         	movff	sprintf@fval+1,___ftmul@f2+1
 10914  0002B0  C0E1  F06B         	movff	sprintf@fval+2,___ftmul@f2+2
 10915  0002B4  EC6D  F015         	call	___ftmul	;wreg free
 10916  0002B8  C066  F0DB         	movff	?___ftmul,sprintf@tmpval
 10917  0002BC  C067  F0DC         	movff	?___ftmul+1,sprintf@tmpval+1
 10918  0002C0  C068  F0DD         	movff	?___ftmul+2,sprintf@tmpval+2
 10919                           
 10920                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 10921  0002C4  C0DB  F018         	movff	sprintf@tmpval,___ftge@ff1
 10922  0002C8  C0DC  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 10923  0002CC  C0DD  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 10924  0002D0  0E00               	movlw	0
 10925  0002D2  6E1B               	movwf	___ftge@ff2,c
 10926  0002D4  0E80               	movlw	128
 10927  0002D6  6E1C               	movwf	___ftge@ff2+1,c
 10928  0002D8  0E3F               	movlw	63
 10929  0002DA  6E1D               	movwf	___ftge@ff2+2,c
 10930  0002DC  EC1D  F01B         	call	___ftge	;wreg free
 10931  0002E0  B0D8               	btfsc	status,0,c
 10932  0002E2  D005               	goto	l1676
 10933                           
 10934                           ;doprnt.c: 849: exp--;
 10935  0002E4  0100               	movlb	0	; () banked
 10936  0002E6  07D9               	decf	sprintf@exp& (0+255),f,b
 10937  0002E8  A0D8               	btfss	status,0,c
 10938  0002EA  07DA               	decf	(sprintf@exp+1)& (0+255),f,b
 10939  0002EC  D013               	goto	l1678
 10940  0002EE                     l1676:
 10941                           
 10942                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 10943                           
 10944                           ; BSR set to: 0
 10945  0002EE  C0DB  F018         	movff	sprintf@tmpval,___ftge@ff1
 10946  0002F2  C0DC  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 10947  0002F6  C0DD  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 10948  0002FA  0E00               	movlw	0
 10949  0002FC  6E1B               	movwf	___ftge@ff2,c
 10950  0002FE  0E20               	movlw	32
 10951  000300  6E1C               	movwf	___ftge@ff2+1,c
 10952  000302  0E41               	movlw	65
 10953  000304  6E1D               	movwf	___ftge@ff2+2,c
 10954  000306  EC1D  F01B         	call	___ftge	;wreg free
 10955  00030A  A0D8               	btfss	status,0,c
 10956  00030C  D003               	goto	l1678
 10957                           
 10958                           ;doprnt.c: 851: exp++;
 10959  00030E  0100               	movlb	0	; () banked
 10960  000310  4BD9               	infsnz	sprintf@exp& (0+255),f,b
 10961  000312  2BDA               	incf	(sprintf@exp+1)& (0+255),f,b
 10962  000314                     l1678:
 10963                           
 10964                           ;doprnt.c: 852: }
 10965                           ;doprnt.c: 1112: if(prec <= 12)
 10966                           
 10967                           ; BSR set to: 0
 10968                           
 10969                           ; BSR set to: 0
 10970                           
 10971                           ; BSR set to: 0
 10972  000314  0100               	movlb	0	; () banked
 10973  000316  BFD4               	btfsc	(sprintf@prec+1)& (0+255),7,b
 10974  000318  D006               	goto	u8580
 10975  00031A  51D4               	movf	(sprintf@prec+1)& (0+255),w,b
 10976  00031C  E11B               	bnz	l8683
 10977  00031E  0E0D               	movlw	13
 10978  000320  5DD3               	subwf	sprintf@prec& (0+255),w,b
 10979  000322  B0D8               	btfsc	status,0,c
 10980  000324  D017               	goto	l1679
 10981  000326                     u8580:
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;doprnt.c: 1113: fval += fround(prec);
 10985  000326  C0DF  F07C         	movff	sprintf@fval,___ftadd@f1
 10986  00032A  C0E0  F07D         	movff	sprintf@fval+1,___ftadd@f1+1
 10987  00032E  C0E1  F07E         	movff	sprintf@fval+2,___ftadd@f1+2
 10988  000332  51D3               	movf	sprintf@prec& (0+255),w,b
 10989  000334  EC60  F009         	call	_fround
 10990  000338  C072  F07F         	movff	?_fround,___ftadd@f2
 10991  00033C  C073  F080         	movff	?_fround+1,___ftadd@f2+1
 10992  000340  C074  F081         	movff	?_fround+2,___ftadd@f2+2
 10993  000344  EC75  F00C         	call	___ftadd	;wreg free
 10994  000348  C07C  F0DF         	movff	?___ftadd,sprintf@fval
 10995  00034C  C07D  F0E0         	movff	?___ftadd+1,sprintf@fval+1
 10996  000350  C07E  F0E1         	movff	?___ftadd+2,sprintf@fval+2
 10997  000354                     l1679:
 10998  000354                     l8683:
 10999                           
 11000                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 11001  000354  0100               	movlb	0	; () banked
 11002  000356  BFDA               	btfsc	(sprintf@exp+1)& (0+255),7,b
 11003  000358  D006               	goto	u8590
 11004  00035A  51DA               	movf	(sprintf@exp+1)& (0+255),w,b
 11005  00035C  E11F               	bnz	l8691
 11006  00035E  0E0A               	movlw	10
 11007  000360  5DD9               	subwf	sprintf@exp& (0+255),w,b
 11008  000362  B0D8               	btfsc	status,0,c
 11009  000364  D01B               	goto	u8620
 11010  000366                     u8590:
 11011                           
 11012                           ; BSR set to: 0
 11013  000366  51DF               	movf	sprintf@fval& (0+255),w,b
 11014  000368  11E0               	iorwf	(sprintf@fval+1)& (0+255),w,b
 11015  00036A  11E1               	iorwf	(sprintf@fval+2)& (0+255),w,b
 11016  00036C  B4D8               	btfsc	status,2,c
 11017  00036E  D055               	goto	l1680
 11018                           
 11019                           ; BSR set to: 0
 11020  000370  C0DF  F079         	movff	sprintf@fval,___fttol@f1
 11021  000374  C0E0  F07A         	movff	sprintf@fval+1,___fttol@f1+1
 11022  000378  C0E1  F07B         	movff	sprintf@fval+2,___fttol@f1+2
 11023  00037C  ECF1  F014         	call	___fttol	;wreg free
 11024  000380  0100               	movlb	0	; () banked
 11025  000382  5179               	movf	?___fttol& (0+255),w,b
 11026  000384  117A               	iorwf	(?___fttol+1)& (0+255),w,b
 11027  000386  117B               	iorwf	(?___fttol+2)& (0+255),w,b
 11028  000388  117C               	iorwf	(?___fttol+3)& (0+255),w,b
 11029  00038A  B4D8               	btfsc	status,2,c
 11030                           
 11031                           ; BSR set to: 0
 11032  00038C  BFDA               	btfsc	(sprintf@exp+1)& (0+255),7,b
 11033  00038E  D045               	goto	l1680
 11034  000390  51DA               	movf	(sprintf@exp+1)& (0+255),w,b
 11035  000392  E104               	bnz	l8691
 11036  000394  0E02               	movlw	2
 11037  000396  5DD9               	subwf	sprintf@exp& (0+255),w,b
 11038  000398  A0D8               	btfss	status,0,c
 11039  00039A  D03F               	goto	l1680
 11040  00039C                     u8620:
 11041  00039C                     l8691:
 11042                           
 11043                           ; BSR set to: 0
 11044                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 11045  00039C  C0DB  F018         	movff	sprintf@tmpval,___ftge@ff1
 11046  0003A0  C0DC  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 11047  0003A4  C0DD  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 11048  0003A8  0E70               	movlw	112
 11049  0003AA  6E1B               	movwf	___ftge@ff2,c
 11050  0003AC  0E89               	movlw	137
 11051  0003AE  6E1C               	movwf	___ftge@ff2+1,c
 11052  0003B0  0E40               	movlw	64
 11053  0003B2  6E1D               	movwf	___ftge@ff2+2,c
 11054  0003B4  EC1D  F01B         	call	___ftge	;wreg free
 11055  0003B8  B0D8               	btfsc	status,0,c
 11056  0003BA  D003               	goto	l1683
 11057                           
 11058                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 11059  0003BC  0100               	movlb	0	; () banked
 11060  0003BE  0EF7               	movlw	247
 11061  0003C0  D002               	goto	L1
 11062  0003C2                     l1683:
 11063                           
 11064                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 11065                           
 11066                           ; BSR set to: 0
 11067  0003C2  0100               	movlb	0	; () banked
 11068  0003C4  0EF8               	movlw	248
 11069  0003C6                     L1:
 11070  0003C6  27D9               	addwf	sprintf@exp& (0+255),f,b
 11071  0003C8  0EFF               	movlw	255
 11072  0003CA  23DA               	addwfc	(sprintf@exp+1)& (0+255),f,b
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;doprnt.c: 1124: }
 11076                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 11077                           
 11078                           ; BSR set to: 0
 11079  0003CC  51D9               	movf	sprintf@exp& (0+255),w,b
 11080  0003CE  EC51  F004         	call	_scale
 11081  0003D2  C072  F0DB         	movff	?_scale,sprintf@tmpval
 11082  0003D6  C073  F0DC         	movff	?_scale+1,sprintf@tmpval+1
 11083  0003DA  C074  F0DD         	movff	?_scale+2,sprintf@tmpval+2
 11084                           
 11085                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 11086  0003DE  C0DF  F018         	movff	sprintf@fval,__tdiv_to_l_@f1
 11087  0003E2  C0E0  F019         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
 11088  0003E6  C0E1  F01A         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
 11089  0003EA  C0DB  F01B         	movff	sprintf@tmpval,__tdiv_to_l_@f2
 11090  0003EE  C0DC  F01C         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
 11091  0003F2  C0DD  F01D         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
 11092  0003F6  ECED  F010         	call	__tdiv_to_l_	;wreg free
 11093  0003FA  C018  F0D5         	movff	?__tdiv_to_l_,sprintf@val
 11094  0003FE  C019  F0D6         	movff	?__tdiv_to_l_+1,sprintf@val+1
 11095  000402  C01A  F0D7         	movff	?__tdiv_to_l_+2,sprintf@val+2
 11096  000406  C01B  F0D8         	movff	?__tdiv_to_l_+3,sprintf@val+3
 11097                           
 11098                           ;doprnt.c: 1129: fval = 0.0;
 11099  00040A  0E00               	movlw	0
 11100  00040C  0100               	movlb	0	; () banked
 11101  00040E  6FDF               	movwf	sprintf@fval& (0+255),b
 11102  000410  0E00               	movlw	0
 11103  000412  6FE0               	movwf	(sprintf@fval+1)& (0+255),b
 11104  000414  0E00               	movlw	0
 11105  000416  6FE1               	movwf	(sprintf@fval+2)& (0+255),b
 11106                           
 11107                           ;doprnt.c: 1130: } else {
 11108  000418  D033               	goto	l1689
 11109  00041A                     l1680:
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;doprnt.c: 1131: val = (unsigned long)fval;
 11113                           
 11114                           ; BSR set to: 0
 11115  00041A  C0DF  F079         	movff	sprintf@fval,___fttol@f1
 11116  00041E  C0E0  F07A         	movff	sprintf@fval+1,___fttol@f1+1
 11117  000422  C0E1  F07B         	movff	sprintf@fval+2,___fttol@f1+2
 11118  000426  ECF1  F014         	call	___fttol	;wreg free
 11119  00042A  C079  F0D5         	movff	?___fttol,sprintf@val
 11120  00042E  C07A  F0D6         	movff	?___fttol+1,sprintf@val+1
 11121  000432  C07B  F0D7         	movff	?___fttol+2,sprintf@val+2
 11122  000436  C07C  F0D8         	movff	?___fttol+3,sprintf@val+3
 11123                           
 11124                           ;doprnt.c: 1132: fval -= (double)val;
 11125  00043A  C0DF  F088         	movff	sprintf@fval,___ftsub@f1
 11126  00043E  C0E0  F089         	movff	sprintf@fval+1,___ftsub@f1+1
 11127  000442  C0E1  F08A         	movff	sprintf@fval+2,___ftsub@f1+2
 11128  000446  C0D5  F020         	movff	sprintf@val,___lltoft@c
 11129  00044A  C0D6  F021         	movff	sprintf@val+1,___lltoft@c+1
 11130  00044E  C0D7  F022         	movff	sprintf@val+2,___lltoft@c+2
 11131  000452  C0D8  F023         	movff	sprintf@val+3,___lltoft@c+3
 11132  000456  EC03  F01F         	call	___lltoft	;wreg free
 11133  00045A  C020  F08B         	movff	?___lltoft,___ftsub@f2
 11134  00045E  C021  F08C         	movff	?___lltoft+1,___ftsub@f2+1
 11135  000462  C022  F08D         	movff	?___lltoft+2,___ftsub@f2+2
 11136  000466  ECBE  F020         	call	___ftsub	;wreg free
 11137  00046A  C088  F0DF         	movff	?___ftsub,sprintf@fval
 11138  00046E  C089  F0E0         	movff	?___ftsub+1,sprintf@fval+1
 11139  000472  C08A  F0E1         	movff	?___ftsub+2,sprintf@fval+2
 11140                           
 11141                           ;doprnt.c: 1133: exp = 0;
 11142  000476  0E00               	movlw	0
 11143  000478  0100               	movlb	0	; () banked
 11144  00047A  6FDA               	movwf	(sprintf@exp+1)& (0+255),b
 11145  00047C  0E00               	movlw	0
 11146  00047E  6FD9               	movwf	sprintf@exp& (0+255),b
 11147  000480                     l1689:
 11148                           
 11149                           ; BSR set to: 0
 11150                           ;doprnt.c: 1134: }
 11151                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 11152                           
 11153                           ; BSR set to: 0
 11154  000480  0E01               	movlw	1
 11155  000482  6FE2               	movwf	sprintf@c& (0+255),b
 11156  000484                     l8711:
 11157                           
 11158                           ; BSR set to: 0
 11159  000484  0E0A               	movlw	10
 11160  000486  19E2               	xorwf	sprintf@c& (0+255),w,b
 11161  000488  B4D8               	btfsc	status,2,c
 11162  00048A  D018               	goto	u8660
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;doprnt.c: 1137: if(val < dpowers[c])
 11166                           
 11167                           ; BSR set to: 0
 11168                           
 11169                           ; BSR set to: 0
 11170  00048C  51E2               	movf	sprintf@c& (0+255),w,b
 11171  00048E  0D04               	mullw	4
 11172  000490  0EB1               	movlw	low _dpowers
 11173  000492  24F3               	addwf	prodl,w,c
 11174  000494  6EF6               	movwf	tblptrl,c
 11175  000496  0E77               	movlw	high _dpowers
 11176  000498  20F4               	addwfc	prodh,w,c
 11177  00049A  6EF7               	movwf	tblptrh,c
 11178  00049C                     	if	0	;There are less than 3 active tblptr bytes
 11179  00049C                     	endif
 11180  00049C  0009               	tblrd		*+
 11181  00049E  50F5               	movf	tablat,w,c
 11182  0004A0  5DD5               	subwf	sprintf@val& (0+255),w,b
 11183  0004A2  0009               	tblrd		*+
 11184  0004A4  50F5               	movf	tablat,w,c
 11185  0004A6  59D6               	subwfb	(sprintf@val+1)& (0+255),w,b
 11186  0004A8  0009               	tblrd		*+
 11187  0004AA  50F5               	movf	tablat,w,c
 11188  0004AC  59D7               	subwfb	(sprintf@val+2)& (0+255),w,b
 11189  0004AE  0009               	tblrd		*+
 11190  0004B0  50F5               	movf	tablat,w,c
 11191  0004B2  59D8               	subwfb	(sprintf@val+3)& (0+255),w,b
 11192  0004B4  A0D8               	btfss	status,0,c
 11193  0004B6  D002               	goto	u8660
 11194                           
 11195                           ; BSR set to: 0
 11196                           
 11197                           ; BSR set to: 0
 11198                           
 11199                           ; BSR set to: 0
 11200                           ;doprnt.c: 1138: break;
 11201  0004B8  2BE2               	incf	sprintf@c& (0+255),f,b
 11202  0004BA  D7E4               	goto	l8711
 11203  0004BC                     u8660:
 11204                           
 11205                           ; BSR set to: 0
 11206                           ;doprnt.c: 1175: {
 11207                           ;doprnt.c: 1188: if(flag & 0x03)
 11208                           
 11209                           ; BSR set to: 0
 11210  0004BC  0E03               	movlw	3
 11211  0004BE  15D1               	andwf	sprintf@flag& (0+255),w,b
 11212  0004C0  6FC4               	movwf	??_sprintf& (0+255),b
 11213  0004C2  0E00               	movlw	0
 11214  0004C4  15D2               	andwf	(sprintf@flag+1)& (0+255),w,b
 11215  0004C6  6FC5               	movwf	(??_sprintf+1)& (0+255),b
 11216  0004C8  51C4               	movf	??_sprintf& (0+255),w,b
 11217  0004CA  11C5               	iorwf	(??_sprintf+1)& (0+255),w,b
 11218  0004CC  B4D8               	btfsc	status,2,c
 11219  0004CE  D051               	goto	l1694
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;doprnt.c: 1190: ((*sp++ = ('-')));
 11223  0004D0  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11224  0004D4  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11225  0004D8  0E2D               	movlw	45
 11226  0004DA  D048               	goto	L2
 11227  0004DC                     
 11228                           ; BSR set to: 0
 11229                           ;doprnt.c: 1200: {
 11230                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 11231                           
 11232                           ; BSR set to: 0
 11233  0004DC  C0D5  F018         	movff	sprintf@val,___lldiv@dividend
 11234  0004E0  C0D6  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 11235  0004E4  C0D7  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 11236  0004E8  C0D8  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 11237  0004EC  51E2               	movf	sprintf@c& (0+255),w,b
 11238  0004EE  0D04               	mullw	4
 11239  0004F0  0EB1               	movlw	low _dpowers
 11240  0004F2  24F3               	addwf	prodl,w,c
 11241  0004F4  6EF6               	movwf	tblptrl,c
 11242  0004F6  0E77               	movlw	high _dpowers
 11243  0004F8  20F4               	addwfc	prodh,w,c
 11244  0004FA  6EF7               	movwf	tblptrh,c
 11245  0004FC                     	if	0	;There are less than 3 active tblptr bytes
 11246  0004FC                     	endif
 11247  0004FC  0009               	tblrd		*+
 11248  0004FE  CFF5 F01C          	movff	tablat,___lldiv@divisor
 11249  000502  0009               	tblrd		*+
 11250  000504  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 11251  000508  0009               	tblrd		*+
 11252  00050A  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 11253  00050E  000A               	tblrd		*-
 11254  000510  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 11255  000514  ECA7  F01B         	call	___lldiv	;wreg free
 11256  000518  C018  F0DB         	movff	?___lldiv,sprintf@tmpval
 11257  00051C  C019  F0DC         	movff	?___lldiv+1,sprintf@tmpval+1
 11258  000520  C01A  F0DD         	movff	?___lldiv+2,sprintf@tmpval+2
 11259  000524  C01B  F0DE         	movff	?___lldiv+3,sprintf@tmpval+3
 11260                           
 11261                           ;doprnt.c: 1202: tmpval.vd %= 10;
 11262  000528  C0DB  F0B3         	movff	sprintf@tmpval,___llmod@dividend
 11263  00052C  C0DC  F0B4         	movff	sprintf@tmpval+1,___llmod@dividend+1
 11264  000530  C0DD  F0B5         	movff	sprintf@tmpval+2,___llmod@dividend+2
 11265  000534  C0DE  F0B6         	movff	sprintf@tmpval+3,___llmod@dividend+3
 11266  000538  0E0A               	movlw	10
 11267  00053A  0100               	movlb	0	; () banked
 11268  00053C  6FB7               	movwf	___llmod@divisor& (0+255),b
 11269  00053E  0E00               	movlw	0
 11270  000540  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 11271  000542  0E00               	movlw	0
 11272  000544  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 11273  000546  0E00               	movlw	0
 11274  000548  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 11275  00054A  EC4D  F01D         	call	___llmod	;wreg free
 11276  00054E  C0B3  F0DB         	movff	?___llmod,sprintf@tmpval
 11277  000552  C0B4  F0DC         	movff	?___llmod+1,sprintf@tmpval+1
 11278  000556  C0B5  F0DD         	movff	?___llmod+2,sprintf@tmpval+2
 11279  00055A  C0B6  F0DE         	movff	?___llmod+3,sprintf@tmpval+3
 11280                           
 11281                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
 11282  00055E  0100               	movlb	0	; () banked
 11283  000560  51DB               	movf	sprintf@tmpval& (0+255),w,b
 11284  000562  0F30               	addlw	48
 11285  000564  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11286  000568  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11287  00056C                     L2:
 11288  00056C  6EDF               	movwf	indf2,c
 11289                           
 11290                           ; BSR set to: 0
 11291  00056E  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11292  000570  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11293  000572                     l1694:
 11294                           
 11295                           ; BSR set to: 0
 11296                           
 11297                           ; BSR set to: 0
 11298  000572  07E2               	decf	sprintf@c& (0+255),f,b
 11299  000574  29E2               	incf	sprintf@c& (0+255),w,b
 11300  000576  B4D8               	btfsc	status,2,c
 11301  000578  D00C               	goto	l1697
 11302  00057A  D7B0               	goto	l1695
 11303  00057C                     l8739:
 11304                           
 11305                           ; BSR set to: 0
 11306                           ;doprnt.c: 1208: ((*sp++ = ('0')));
 11307  00057C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11308  000580  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11309  000584  0E30               	movlw	48
 11310  000586  6EDF               	movwf	indf2,c
 11311                           
 11312                           ; BSR set to: 0
 11313  000588  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11314  00058A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;doprnt.c: 1209: exp--;
 11318  00058C  07D9               	decf	sprintf@exp& (0+255),f,b
 11319  00058E  A0D8               	btfss	status,0,c
 11320  000590  07DA               	decf	(sprintf@exp+1)& (0+255),f,b
 11321  000592                     l1697:
 11322                           
 11323                           ; BSR set to: 0
 11324                           
 11325                           ; BSR set to: 0
 11326  000592  BFDA               	btfsc	(sprintf@exp+1)& (0+255),7,b
 11327  000594  D005               	goto	u8690
 11328  000596  51DA               	movf	(sprintf@exp+1)& (0+255),w,b
 11329  000598  E1F1               	bnz	l8739
 11330  00059A  05D9               	decf	sprintf@exp& (0+255),w,b
 11331  00059C  B0D8               	btfsc	status,0,c
 11332  00059E  D7EE               	goto	l1698
 11333  0005A0                     u8690:
 11334                           
 11335                           ; BSR set to: 0
 11336                           ;doprnt.c: 1210: }
 11337                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 11338                           
 11339                           ; BSR set to: 0
 11340  0005A0  BFD4               	btfsc	(sprintf@prec+1)& (0+255),7,b
 11341  0005A2  D009               	goto	l1700
 11342  0005A4  51D4               	movf	(sprintf@prec+1)& (0+255),w,b
 11343  0005A6  E104               	bnz	u8700
 11344  0005A8  0E09               	movlw	9
 11345  0005AA  5DD3               	subwf	sprintf@prec& (0+255),w,b
 11346  0005AC  A0D8               	btfss	status,0,c
 11347  0005AE  D003               	goto	l1700
 11348  0005B0                     u8700:
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 11352  0005B0  0E08               	movlw	8
 11353  0005B2  6FE2               	movwf	sprintf@c& (0+255),b
 11354  0005B4  D002               	goto	l1701
 11355  0005B6                     l1700:
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;doprnt.c: 1213: else
 11359                           ;doprnt.c: 1214: c = prec;
 11360  0005B6  C0D3  F0E2         	movff	sprintf@prec,sprintf@c
 11361  0005BA                     l1701:
 11362                           
 11363                           ; BSR set to: 0
 11364                           ;doprnt.c: 1215: prec -= c;
 11365                           
 11366                           ; BSR set to: 0
 11367  0005BA  51E2               	movf	sprintf@c& (0+255),w,b
 11368  0005BC  5FD3               	subwf	sprintf@prec& (0+255),f,b
 11369  0005BE  0E00               	movlw	0
 11370  0005C0  BFE2               	btfsc	sprintf@c& (0+255),7,b
 11371  0005C2  0EFF               	movlw	255
 11372  0005C4  5BD4               	subwfb	(sprintf@prec+1)& (0+255),f,b
 11373                           
 11374                           ; BSR set to: 0
 11375                           ;doprnt.c: 1219: if(c)
 11376  0005C6  51E2               	movf	sprintf@c& (0+255),w,b
 11377  0005C8  B4D8               	btfsc	status,2,c
 11378  0005CA  D008               	goto	l1702
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;doprnt.c: 1221: ((*sp++ = ('.')));
 11382  0005CC  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11383  0005D0  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11384  0005D4  0E2E               	movlw	46
 11385  0005D6  6EDF               	movwf	indf2,c
 11386                           
 11387                           ; BSR set to: 0
 11388  0005D8  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11389  0005DA  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11390  0005DC                     l1702:
 11391                           
 11392                           ; BSR set to: 0
 11393                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 11394                           
 11395                           ; BSR set to: 0
 11396  0005DC  51E2               	movf	sprintf@c& (0+255),w,b
 11397  0005DE  EC51  F004         	call	_scale
 11398  0005E2  C072  F0CA         	movff	?_scale,_sprintf$4002
 11399  0005E6  C073  F0CB         	movff	?_scale+1,_sprintf$4002+1
 11400  0005EA  C074  F0CC         	movff	?_scale+2,_sprintf$4002+2
 11401                           
 11402                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 11403  0005EE  C0DF  F069         	movff	sprintf@fval,___ftmul@f2
 11404  0005F2  C0E0  F06A         	movff	sprintf@fval+1,___ftmul@f2+1
 11405  0005F6  C0E1  F06B         	movff	sprintf@fval+2,___ftmul@f2+2
 11406  0005FA  C0CA  F066         	movff	_sprintf$4002,___ftmul@f1
 11407  0005FE  C0CB  F067         	movff	_sprintf$4002+1,___ftmul@f1+1
 11408  000602  C0CC  F068         	movff	_sprintf$4002+2,___ftmul@f1+2
 11409  000606  EC6D  F015         	call	___ftmul	;wreg free
 11410  00060A  C066  F079         	movff	?___ftmul,___fttol@f1
 11411  00060E  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
 11412  000612  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
 11413  000616  ECF1  F014         	call	___fttol	;wreg free
 11414  00061A  C079  F0D5         	movff	?___fttol,sprintf@val
 11415  00061E  C07A  F0D6         	movff	?___fttol+1,sprintf@val+1
 11416  000622  C07B  F0D7         	movff	?___fttol+2,sprintf@val+2
 11417  000626  C07C  F0D8         	movff	?___fttol+3,sprintf@val+3
 11418                           
 11419                           ;doprnt.c: 1228: while(c--) {
 11420  00062A  D072               	goto	l1703
 11421  00062C                     
 11422                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 11423  00062C  C0D5  F018         	movff	sprintf@val,___lldiv@dividend
 11424  000630  C0D6  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 11425  000634  C0D7  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 11426  000638  C0D8  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 11427  00063C  0100               	movlb	0	; () banked
 11428  00063E  51E2               	movf	sprintf@c& (0+255),w,b
 11429  000640  0D04               	mullw	4
 11430  000642  0EB1               	movlw	low _dpowers
 11431  000644  24F3               	addwf	prodl,w,c
 11432  000646  6EF6               	movwf	tblptrl,c
 11433  000648  0E77               	movlw	high _dpowers
 11434  00064A  20F4               	addwfc	prodh,w,c
 11435  00064C  6EF7               	movwf	tblptrh,c
 11436  00064E                     	if	0	;There are less than 3 active tblptr bytes
 11437  00064E                     	endif
 11438  00064E  0009               	tblrd		*+
 11439  000650  CFF5 F01C          	movff	tablat,___lldiv@divisor
 11440  000654  0009               	tblrd		*+
 11441  000656  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 11442  00065A  0009               	tblrd		*+
 11443  00065C  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 11444  000660  000A               	tblrd		*-
 11445  000662  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 11446  000666  ECA7  F01B         	call	___lldiv	;wreg free
 11447  00066A  C018  F0DB         	movff	?___lldiv,sprintf@tmpval
 11448  00066E  C019  F0DC         	movff	?___lldiv+1,sprintf@tmpval+1
 11449  000672  C01A  F0DD         	movff	?___lldiv+2,sprintf@tmpval+2
 11450  000676  C01B  F0DE         	movff	?___lldiv+3,sprintf@tmpval+3
 11451                           
 11452                           ;doprnt.c: 1230: tmpval.vd %= 10;
 11453  00067A  C0DB  F0B3         	movff	sprintf@tmpval,___llmod@dividend
 11454  00067E  C0DC  F0B4         	movff	sprintf@tmpval+1,___llmod@dividend+1
 11455  000682  C0DD  F0B5         	movff	sprintf@tmpval+2,___llmod@dividend+2
 11456  000686  C0DE  F0B6         	movff	sprintf@tmpval+3,___llmod@dividend+3
 11457  00068A  0E0A               	movlw	10
 11458  00068C  0100               	movlb	0	; () banked
 11459  00068E  6FB7               	movwf	___llmod@divisor& (0+255),b
 11460  000690  0E00               	movlw	0
 11461  000692  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 11462  000694  0E00               	movlw	0
 11463  000696  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 11464  000698  0E00               	movlw	0
 11465  00069A  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 11466  00069C  EC4D  F01D         	call	___llmod	;wreg free
 11467  0006A0  C0B3  F0DB         	movff	?___llmod,sprintf@tmpval
 11468  0006A4  C0B4  F0DC         	movff	?___llmod+1,sprintf@tmpval+1
 11469  0006A8  C0B5  F0DD         	movff	?___llmod+2,sprintf@tmpval+2
 11470  0006AC  C0B6  F0DE         	movff	?___llmod+3,sprintf@tmpval+3
 11471                           
 11472                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
 11473  0006B0  0100               	movlb	0	; () banked
 11474  0006B2  51DB               	movf	sprintf@tmpval& (0+255),w,b
 11475  0006B4  0F30               	addlw	48
 11476  0006B6  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11477  0006BA  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11478  0006BE  6EDF               	movwf	indf2,c
 11479                           
 11480                           ; BSR set to: 0
 11481  0006C0  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11482  0006C2  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11483                           
 11484                           ; BSR set to: 0
 11485                           ;doprnt.c: 1232: val %= dpowers[c];
 11486  0006C4  C0D5  F0B3         	movff	sprintf@val,___llmod@dividend
 11487  0006C8  C0D6  F0B4         	movff	sprintf@val+1,___llmod@dividend+1
 11488  0006CC  C0D7  F0B5         	movff	sprintf@val+2,___llmod@dividend+2
 11489  0006D0  C0D8  F0B6         	movff	sprintf@val+3,___llmod@dividend+3
 11490  0006D4  51E2               	movf	sprintf@c& (0+255),w,b
 11491  0006D6  0D04               	mullw	4
 11492  0006D8  0EB1               	movlw	low _dpowers
 11493  0006DA  24F3               	addwf	prodl,w,c
 11494  0006DC  6EF6               	movwf	tblptrl,c
 11495  0006DE  0E77               	movlw	high _dpowers
 11496  0006E0  20F4               	addwfc	prodh,w,c
 11497  0006E2  6EF7               	movwf	tblptrh,c
 11498  0006E4                     	if	0	;There are less than 3 active tblptr bytes
 11499  0006E4                     	endif
 11500  0006E4  0009               	tblrd		*+
 11501  0006E6  CFF5 F0B7          	movff	tablat,___llmod@divisor
 11502  0006EA  0009               	tblrd		*+
 11503  0006EC  CFF5 F0B8          	movff	tablat,___llmod@divisor+1
 11504  0006F0  0009               	tblrd		*+
 11505  0006F2  CFF5 F0B9          	movff	tablat,___llmod@divisor+2
 11506  0006F6  000A               	tblrd		*-
 11507  0006F8  CFF5 F0BA          	movff	tablat,___llmod@divisor+3
 11508  0006FC  EC4D  F01D         	call	___llmod	;wreg free
 11509  000700  C0B3  F0D5         	movff	?___llmod,sprintf@val
 11510  000704  C0B4  F0D6         	movff	?___llmod+1,sprintf@val+1
 11511  000708  C0B5  F0D7         	movff	?___llmod+2,sprintf@val+2
 11512  00070C  C0B6  F0D8         	movff	?___llmod+3,sprintf@val+3
 11513  000710                     l1703:
 11514  000710  0100               	movlb	0	; () banked
 11515  000712  07E2               	decf	sprintf@c& (0+255),f,b
 11516  000714  29E2               	incf	sprintf@c& (0+255),w,b
 11517  000716  B4D8               	btfsc	status,2,c
 11518  000718  D00C               	goto	l1706
 11519  00071A  D788               	goto	l1704
 11520  00071C                     
 11521                           ; BSR set to: 0
 11522                           ;doprnt.c: 1236: ((*sp++ = ('0')));
 11523                           
 11524                           ; BSR set to: 0
 11525  00071C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11526  000720  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11527  000724  0E30               	movlw	48
 11528  000726  6EDF               	movwf	indf2,c
 11529                           
 11530                           ; BSR set to: 0
 11531  000728  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11532  00072A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11533                           
 11534                           ; BSR set to: 0
 11535                           ;doprnt.c: 1237: prec--;
 11536  00072C  07D3               	decf	sprintf@prec& (0+255),f,b
 11537  00072E  A0D8               	btfss	status,0,c
 11538  000730  07D4               	decf	(sprintf@prec+1)& (0+255),f,b
 11539  000732                     l1706:
 11540                           
 11541                           ; BSR set to: 0
 11542                           
 11543                           ; BSR set to: 0
 11544  000732  51D3               	movf	sprintf@prec& (0+255),w,b
 11545  000734  11D4               	iorwf	(sprintf@prec+1)& (0+255),w,b
 11546  000736  B4D8               	btfsc	status,2,c
 11547  000738  D0A1               	goto	u8790
 11548  00073A  D7F0               	goto	l1707
 11549  00073C                     l1672:
 11550                           
 11551                           ; BSR set to: 0
 11552                           ;doprnt.c: 1246: }
 11553                           ;doprnt.c: 1253: {
 11554                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 11555                           
 11556                           ; BSR set to: 0
 11557  00073C  C0CF  FFD9         	movff	sprintf@ap,fsr2l
 11558  000740  C0D0  FFDA         	movff	sprintf@ap+1,fsr2h
 11559  000744  CFDE F0D5          	movff	postinc2,sprintf@val
 11560  000748  CFDD F0D6          	movff	postdec2,sprintf@val+1
 11561  00074C  0E00               	movlw	0
 11562  00074E  BFD6               	btfsc	(sprintf@val+1)& (0+255),7,b
 11563  000750  0EFF               	movlw	-1
 11564  000752  6FD7               	movwf	(sprintf@val+2)& (0+255),b
 11565  000754  6FD8               	movwf	(sprintf@val+3)& (0+255),b
 11566                           
 11567                           ; BSR set to: 0
 11568  000756  0E02               	movlw	2
 11569  000758  27CF               	addwf	sprintf@ap& (0+255),f,b
 11570  00075A  0E00               	movlw	0
 11571  00075C  23D0               	addwfc	(sprintf@ap+1)& (0+255),f,b
 11572                           
 11573                           ; BSR set to: 0
 11574                           ;doprnt.c: 1261: if((long)val < 0) {
 11575  00075E  AFD8               	btfss	(sprintf@val+3)& (0+255),7,b
 11576  000760  D00A               	goto	l1709
 11577                           
 11578                           ; BSR set to: 0
 11579                           ;doprnt.c: 1262: flag |= 0x03;
 11580  000762  0E03               	movlw	3
 11581  000764  13D1               	iorwf	sprintf@flag& (0+255),f,b
 11582                           
 11583                           ; BSR set to: 0
 11584                           ;doprnt.c: 1263: val = -val;
 11585  000766  1FD8               	comf	(sprintf@val+3)& (0+255),f,b
 11586  000768  1FD7               	comf	(sprintf@val+2)& (0+255),f,b
 11587  00076A  1FD6               	comf	(sprintf@val+1)& (0+255),f,b
 11588  00076C  6DD5               	negf	sprintf@val& (0+255),b
 11589  00076E  0E00               	movlw	0
 11590  000770  23D6               	addwfc	(sprintf@val+1)& (0+255),f,b
 11591  000772  23D7               	addwfc	(sprintf@val+2)& (0+255),f,b
 11592  000774  23D8               	addwfc	(sprintf@val+3)& (0+255),f,b
 11593  000776                     l1709:
 11594                           
 11595                           ; BSR set to: 0
 11596                           ;doprnt.c: 1264: }
 11597                           ;doprnt.c: 1266: }
 11598                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11599                           
 11600                           ; BSR set to: 0
 11601  000776  0E01               	movlw	1
 11602  000778  6FE2               	movwf	sprintf@c& (0+255),b
 11603  00077A                     l8795:
 11604                           
 11605                           ; BSR set to: 0
 11606  00077A  0E0A               	movlw	10
 11607  00077C  19E2               	xorwf	sprintf@c& (0+255),w,b
 11608  00077E  B4D8               	btfsc	status,2,c
 11609  000780  D018               	goto	u8770
 11610                           
 11611                           ; BSR set to: 0
 11612                           ;doprnt.c: 1306: if(val < dpowers[c])
 11613                           
 11614                           ; BSR set to: 0
 11615                           
 11616                           ; BSR set to: 0
 11617  000782  51E2               	movf	sprintf@c& (0+255),w,b
 11618  000784  0D04               	mullw	4
 11619  000786  0EB1               	movlw	low _dpowers
 11620  000788  24F3               	addwf	prodl,w,c
 11621  00078A  6EF6               	movwf	tblptrl,c
 11622  00078C  0E77               	movlw	high _dpowers
 11623  00078E  20F4               	addwfc	prodh,w,c
 11624  000790  6EF7               	movwf	tblptrh,c
 11625  000792                     	if	0	;There are less than 3 active tblptr bytes
 11626  000792                     	endif
 11627  000792  0009               	tblrd		*+
 11628  000794  50F5               	movf	tablat,w,c
 11629  000796  5DD5               	subwf	sprintf@val& (0+255),w,b
 11630  000798  0009               	tblrd		*+
 11631  00079A  50F5               	movf	tablat,w,c
 11632  00079C  59D6               	subwfb	(sprintf@val+1)& (0+255),w,b
 11633  00079E  0009               	tblrd		*+
 11634  0007A0  50F5               	movf	tablat,w,c
 11635  0007A2  59D7               	subwfb	(sprintf@val+2)& (0+255),w,b
 11636  0007A4  0009               	tblrd		*+
 11637  0007A6  50F5               	movf	tablat,w,c
 11638  0007A8  59D8               	subwfb	(sprintf@val+3)& (0+255),w,b
 11639  0007AA  A0D8               	btfss	status,0,c
 11640  0007AC  D002               	goto	u8770
 11641                           
 11642                           ; BSR set to: 0
 11643                           
 11644                           ; BSR set to: 0
 11645                           
 11646                           ; BSR set to: 0
 11647                           ;doprnt.c: 1307: break;
 11648  0007AE  2BE2               	incf	sprintf@c& (0+255),f,b
 11649  0007B0  D7E4               	goto	l8795
 11650  0007B2                     u8770:
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;doprnt.c: 1422: {
 11654                           ;doprnt.c: 1438: if(flag & 0x03)
 11655                           
 11656                           ; BSR set to: 0
 11657  0007B2  0E03               	movlw	3
 11658  0007B4  15D1               	andwf	sprintf@flag& (0+255),w,b
 11659  0007B6  6FC4               	movwf	??_sprintf& (0+255),b
 11660  0007B8  0E00               	movlw	0
 11661  0007BA  15D2               	andwf	(sprintf@flag+1)& (0+255),w,b
 11662  0007BC  6FC5               	movwf	(??_sprintf+1)& (0+255),b
 11663  0007BE  51C4               	movf	??_sprintf& (0+255),w,b
 11664  0007C0  11C5               	iorwf	(??_sprintf+1)& (0+255),w,b
 11665  0007C2  B4D8               	btfsc	status,2,c
 11666  0007C4  D008               	goto	l1713
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 11670  0007C6  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11671  0007CA  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11672  0007CE  0E2D               	movlw	45
 11673  0007D0  6EDF               	movwf	indf2,c
 11674                           
 11675                           ; BSR set to: 0
 11676  0007D2  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11677  0007D4  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11678  0007D6                     l1713:
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;doprnt.c: 1469: }
 11682                           ;doprnt.c: 1472: prec = c;
 11683                           
 11684                           ; BSR set to: 0
 11685  0007D6  51E2               	movf	sprintf@c& (0+255),w,b
 11686  0007D8  6FD3               	movwf	sprintf@prec& (0+255),b
 11687  0007DA  6BD4               	clrf	(sprintf@prec+1)& (0+255),b
 11688  0007DC  BFD3               	btfsc	sprintf@prec& (0+255),7,b
 11689  0007DE  07D4               	decf	(sprintf@prec+1)& (0+255),f,b
 11690                           
 11691                           ;doprnt.c: 1474: while(prec--) {
 11692  0007E0  D045               	goto	l1714
 11693  0007E2                     l8815:
 11694                           
 11695                           ; BSR set to: 0
 11696                           ;doprnt.c: 1478: {
 11697                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11698  0007E2  C0D3  F0C4         	movff	sprintf@prec,??_sprintf
 11699  0007E6  C0D4  F0C5         	movff	sprintf@prec+1,??_sprintf+1
 11700  0007EA  90D8               	bcf	status,0,c
 11701  0007EC  37C4               	rlcf	??_sprintf& (0+255),f,b
 11702  0007EE  37C5               	rlcf	(??_sprintf+1)& (0+255),f,b
 11703  0007F0  90D8               	bcf	status,0,c
 11704  0007F2  37C4               	rlcf	??_sprintf& (0+255),f,b
 11705  0007F4  37C5               	rlcf	(??_sprintf+1)& (0+255),f,b
 11706  0007F6  0EB1               	movlw	low _dpowers
 11707  0007F8  25C4               	addwf	??_sprintf& (0+255),w,b
 11708  0007FA  6EF6               	movwf	tblptrl,c
 11709  0007FC  0E77               	movlw	high _dpowers
 11710  0007FE  21C5               	addwfc	(??_sprintf+1)& (0+255),w,b
 11711  000800  6EF7               	movwf	tblptrh,c
 11712  000802                     	if	0	;There are less than 3 active tblptr bytes
 11713  000802                     	endif
 11714  000802  0009               	tblrd		*+
 11715  000804  CFF5 F01C          	movff	tablat,___lldiv@divisor
 11716  000808  0009               	tblrd		*+
 11717  00080A  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 11718  00080E  0009               	tblrd		*+
 11719  000810  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 11720  000814  000A               	tblrd		*-
 11721  000816  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 11722  00081A  C0D5  F018         	movff	sprintf@val,___lldiv@dividend
 11723  00081E  C0D6  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 11724  000822  C0D7  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 11725  000826  C0D8  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 11726  00082A  ECA7  F01B         	call	___lldiv	;wreg free
 11727  00082E  C018  F0B3         	movff	?___lldiv,___llmod@dividend
 11728  000832  C019  F0B4         	movff	?___lldiv+1,___llmod@dividend+1
 11729  000836  C01A  F0B5         	movff	?___lldiv+2,___llmod@dividend+2
 11730  00083A  C01B  F0B6         	movff	?___lldiv+3,___llmod@dividend+3
 11731  00083E  0E0A               	movlw	10
 11732  000840  0100               	movlb	0	; () banked
 11733  000842  6FB7               	movwf	___llmod@divisor& (0+255),b
 11734  000844  0E00               	movlw	0
 11735  000846  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 11736  000848  0E00               	movlw	0
 11737  00084A  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 11738  00084C  0E00               	movlw	0
 11739  00084E  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 11740  000850  EC4D  F01D         	call	___llmod	;wreg free
 11741  000854  0100               	movlb	0	; () banked
 11742  000856  51B3               	movf	?___llmod& (0+255),w,b
 11743  000858  0F30               	addlw	48
 11744  00085A  6FE2               	movwf	sprintf@c& (0+255),b
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;doprnt.c: 1523: }
 11748                           ;doprnt.c: 1524: ((*sp++ = (c)));
 11749  00085C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11750  000860  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11751  000864  C0E2  FFDF         	movff	sprintf@c,indf2
 11752                           
 11753                           ; BSR set to: 0
 11754  000868  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 11755  00086A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 11756  00086C                     l1714:
 11757                           
 11758                           ; BSR set to: 0
 11759                           
 11760                           ; BSR set to: 0
 11761  00086C  07D3               	decf	sprintf@prec& (0+255),f,b
 11762  00086E  A0D8               	btfss	status,0,c
 11763  000870  07D4               	decf	(sprintf@prec+1)& (0+255),f,b
 11764  000872  29D3               	incf	sprintf@prec& (0+255),w,b
 11765  000874  E1B6               	bnz	l8815
 11766  000876  29D4               	incf	(sprintf@prec+1)& (0+255),w,b
 11767  000878  A4D8               	btfss	status,2,c
 11768  00087A  D7B3               	goto	l1715
 11769  00087C                     u8790:
 11770                           
 11771                           ; BSR set to: 0
 11772                           
 11773                           ; BSR set to: 0
 11774                           
 11775                           ; BSR set to: 0
 11776  00087C  C0BE  FFF6         	movff	sprintf@f,tblptrl
 11777  000880  C0BF  FFF7         	movff	sprintf@f+1,tblptrh
 11778  000884  4BBE               	infsnz	sprintf@f& (0+255),f,b
 11779  000886  2BBF               	incf	(sprintf@f+1)& (0+255),f,b
 11780  000888                     	if	0	;tblptru may be non-zero
 11781  000888                     	endif
 11782  000888                     	if	0	;tblptru may be non-zero
 11783  000888                     	endif
 11784  000888  0008               	tblrd		*
 11785  00088A  CFF5 F0E2          	movff	tablat,sprintf@c
 11786  00088E  51E2               	movf	sprintf@c& (0+255),w,b
 11787  000890  A4D8               	btfss	status,2,c
 11788  000892  D42C               	goto	l1657
 11789  000894                     u8800:
 11790                           
 11791                           ; BSR set to: 0
 11792                           ;doprnt.c: 1538: *sp = 0;
 11793                           
 11794                           ; BSR set to: 0
 11795                           
 11796                           ;doprnt.c: 1525: }
 11797                           ;doprnt.c: 1533: }
 11798                           ;doprnt.c: 1535: alldone:
 11799                           
 11800                           ; BSR set to: 0
 11801  000894  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11802  000898  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11803  00089C  0E00               	movlw	0
 11804  00089E  6EDF               	movwf	indf2,c
 11805  0008A0  0012               	return	
 11806  0008A2                     __end_of_sprintf:
 11807                           	opt stack 0
 11808                           tosu	equ	0xFFF
 11809                           tosh	equ	0xFFE
 11810                           tosl	equ	0xFFD
 11811                           pclath	equ	0xFFA
 11812                           tblptru	equ	0xFF8
 11813                           tblptrh	equ	0xFF7
 11814                           tblptrl	equ	0xFF6
 11815                           tablat	equ	0xFF5
 11816                           prodh	equ	0xFF4
 11817                           prodl	equ	0xFF3
 11818                           intcon	equ	0xFF2
 11819                           intcon2	equ	0xFF1
 11820                           postinc0	equ	0xFEE
 11821                           wreg	equ	0xFE8
 11822                           indf1	equ	0xFE7
 11823                           postdec1	equ	0xFE5
 11824                           fsr1h	equ	0xFE2
 11825                           fsr1l	equ	0xFE1
 11826                           indf2	equ	0xFDF
 11827                           postinc2	equ	0xFDE
 11828                           postdec2	equ	0xFDD
 11829                           fsr2h	equ	0xFDA
 11830                           fsr2l	equ	0xFD9
 11831                           status	equ	0xFD8
 11832                           
 11833 ;; *************** function _scale *****************
 11834 ;; Defined at:
 11835 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 11836 ;; Parameters:    Size  Location     Type
 11837 ;;  scl             1    wreg     char 
 11838 ;; Auto vars:     Size  Location     Type
 11839 ;;  scl             1   24[BANK0 ] char 
 11840 ;; Return value:  Size  Location     Type
 11841 ;;                  3   18[BANK0 ] char 
 11842 ;; Registers used:
 11843 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11844 ;; Tracked objects:
 11845 ;;		On entry : 0/0
 11846 ;;		On exit  : 0/0
 11847 ;;		Unchanged: 0/0
 11848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11849 ;;      Params:         0       3       0       0       0       0       0
 11850 ;;      Locals:         0       4       0       0       0       0       0
 11851 ;;      Temps:          0       0       0       0       0       0       0
 11852 ;;      Totals:         0       7       0       0       0       0       0
 11853 ;;Total ram usage:        7 bytes
 11854 ;; Hardware stack levels used:    1
 11855 ;; Hardware stack levels required when called:    5
 11856 ;; This function calls:
 11857 ;;		___awdiv
 11858 ;;		___awmod
 11859 ;;		___ftmul
 11860 ;;		___wmul
 11861 ;; This function is called by:
 11862 ;;		_sprintf
 11863 ;; This function uses a non-reentrant model
 11864 ;;
 11865                           
 11866                           	psect	text40
 11867  0008A2                     __ptext40:
 11868                           	opt stack 0
 11869  0008A2                     _scale:
 11870                           	opt stack 23
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;incstack = 0
 11874                           ;scale@scl stored from wreg
 11875  0008A2  0100               	movlb	0	; () banked
 11876  0008A4  6F78               	movwf	scale@scl& (0+255),b
 11877                           
 11878                           ;doprnt.c: 428: if(scl < 0) {
 11879  0008A6  0100               	movlb	0	; () banked
 11880  0008A8  AF78               	btfss	scale@scl& (0+255),7,b
 11881  0008AA  D106               	goto	l1646
 11882                           
 11883                           ; BSR set to: 0
 11884                           ;doprnt.c: 429: scl = -scl;
 11885  0008AC  6D78               	negf	scale@scl& (0+255),b
 11886                           
 11887                           ;doprnt.c: 430: if(scl>=110)
 11888  0008AE  5178               	movf	scale@scl& (0+255),w,b
 11889  0008B0  0A80               	xorlw	128
 11890  0008B2  0F12               	addlw	-238
 11891  0008B4  A0D8               	btfss	status,0,c
 11892  0008B6  D093               	goto	l1647
 11893                           
 11894                           ; BSR set to: 0
 11895                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 11896  0008B8  0E00               	movlw	0
 11897  0008BA  6E29               	movwf	___wmul@multiplicand+1,c
 11898  0008BC  0E03               	movlw	3
 11899  0008BE  6E28               	movwf	___wmul@multiplicand,c
 11900  0008C0  0E00               	movlw	0
 11901  0008C2  6E21               	movwf	___awdiv@divisor+1,c
 11902  0008C4  0E0A               	movlw	10
 11903  0008C6  6E20               	movwf	___awdiv@divisor,c
 11904  0008C8  0E00               	movlw	0
 11905  0008CA  6E1B               	movwf	___awmod@divisor+1,c
 11906  0008CC  0E64               	movlw	100
 11907  0008CE  6E1A               	movwf	___awmod@divisor,c
 11908  0008D0  5178               	movf	scale@scl& (0+255),w,b
 11909  0008D2  6E18               	movwf	___awmod@dividend,c
 11910  0008D4  6A19               	clrf	___awmod@dividend+1,c
 11911  0008D6  BE18               	btfsc	___awmod@dividend,7,c
 11912  0008D8  0619               	decf	___awmod@dividend+1,f,c
 11913  0008DA  EC15  F01D         	call	___awmod	;wreg free
 11914  0008DE  C018  F01E         	movff	?___awmod,___awdiv@dividend
 11915  0008E2  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 11916  0008E6  EC65  F01B         	call	___awdiv	;wreg free
 11917  0008EA  0E09               	movlw	9
 11918  0008EC  241E               	addwf	?___awdiv,w,c
 11919  0008EE  6E26               	movwf	___wmul@multiplier,c
 11920  0008F0  0E00               	movlw	0
 11921  0008F2  201F               	addwfc	?___awdiv+1,w,c
 11922  0008F4  6E27               	movwf	___wmul@multiplier+1,c
 11923  0008F6  EC4E  F022         	call	___wmul	;wreg free
 11924  0008FA  0E00               	movlw	low __npowers_
 11925  0008FC  2426               	addwf	?___wmul,w,c
 11926  0008FE  6EF6               	movwf	tblptrl,c
 11927  000900  0E78               	movlw	high __npowers_
 11928  000902  2027               	addwfc	?___wmul+1,w,c
 11929  000904  6EF7               	movwf	tblptrh,c
 11930  000906                     	if	0	;There are less than 3 active tblptr bytes
 11931  000906                     	endif
 11932  000906  0009               	tblrd		*+
 11933  000908  CFF5 F069          	movff	tablat,___ftmul@f2
 11934  00090C  0009               	tblrd		*+
 11935  00090E  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11936  000912  000A               	tblrd		*-
 11937  000914  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11938  000918  0E00               	movlw	0
 11939  00091A  6E21               	movwf	___awdiv@divisor+1,c
 11940  00091C  0E64               	movlw	100
 11941  00091E  6E20               	movwf	___awdiv@divisor,c
 11942  000920  0100               	movlb	0	; () banked
 11943  000922  5178               	movf	scale@scl& (0+255),w,b
 11944  000924  6E1E               	movwf	___awdiv@dividend,c
 11945  000926  6A1F               	clrf	___awdiv@dividend+1,c
 11946  000928  BE1E               	btfsc	___awdiv@dividend,7,c
 11947  00092A  061F               	decf	___awdiv@dividend+1,f,c
 11948  00092C  EC65  F01B         	call	___awdiv	;wreg free
 11949  000930  0E12               	movlw	18
 11950  000932  241E               	addwf	?___awdiv,w,c
 11951  000934  6E26               	movwf	___wmul@multiplier,c
 11952  000936  0E00               	movlw	0
 11953  000938  201F               	addwfc	?___awdiv+1,w,c
 11954  00093A  6E27               	movwf	___wmul@multiplier+1,c
 11955  00093C  0E00               	movlw	0
 11956  00093E  6E29               	movwf	___wmul@multiplicand+1,c
 11957  000940  0E03               	movlw	3
 11958  000942  6E28               	movwf	___wmul@multiplicand,c
 11959  000944  EC4E  F022         	call	___wmul	;wreg free
 11960  000948  0E00               	movlw	low __npowers_
 11961  00094A  2426               	addwf	?___wmul,w,c
 11962  00094C  6EF6               	movwf	tblptrl,c
 11963  00094E  0E78               	movlw	high __npowers_
 11964  000950  2027               	addwfc	?___wmul+1,w,c
 11965  000952  6EF7               	movwf	tblptrh,c
 11966  000954                     	if	0	;There are less than 3 active tblptr bytes
 11967  000954                     	endif
 11968  000954  0009               	tblrd		*+
 11969  000956  CFF5 F066          	movff	tablat,___ftmul@f1
 11970  00095A  0009               	tblrd		*+
 11971  00095C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11972  000960  000A               	tblrd		*-
 11973  000962  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11974  000966  EC6D  F015         	call	___ftmul	;wreg free
 11975  00096A  C066  F075         	movff	?___ftmul,_scale$4001
 11976  00096E  C067  F076         	movff	?___ftmul+1,_scale$4001+1
 11977  000972  C068  F077         	movff	?___ftmul+2,_scale$4001+2
 11978                           
 11979                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 11980  000976  C075  F066         	movff	_scale$4001,___ftmul@f1
 11981  00097A  C076  F067         	movff	_scale$4001+1,___ftmul@f1+1
 11982  00097E  C077  F068         	movff	_scale$4001+2,___ftmul@f1+2
 11983  000982  0E00               	movlw	0
 11984  000984  6E29               	movwf	___wmul@multiplicand+1,c
 11985  000986  0E03               	movlw	3
 11986  000988  6E28               	movwf	___wmul@multiplicand,c
 11987  00098A  0E00               	movlw	0
 11988  00098C  6E1B               	movwf	___awmod@divisor+1,c
 11989  00098E  0E0A               	movlw	10
 11990  000990  6E1A               	movwf	___awmod@divisor,c
 11991  000992  0100               	movlb	0	; () banked
 11992  000994  5178               	movf	scale@scl& (0+255),w,b
 11993  000996  6E18               	movwf	___awmod@dividend,c
 11994  000998  6A19               	clrf	___awmod@dividend+1,c
 11995  00099A  BE18               	btfsc	___awmod@dividend,7,c
 11996  00099C  0619               	decf	___awmod@dividend+1,f,c
 11997  00099E  EC15  F01D         	call	___awmod	;wreg free
 11998  0009A2  C018  F026         	movff	?___awmod,___wmul@multiplier
 11999  0009A6  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12000  0009AA  EC4E  F022         	call	___wmul	;wreg free
 12001  0009AE  0E00               	movlw	low __npowers_
 12002  0009B0  2426               	addwf	?___wmul,w,c
 12003  0009B2  6EF6               	movwf	tblptrl,c
 12004  0009B4  0E78               	movlw	high __npowers_
 12005  0009B6  2027               	addwfc	?___wmul+1,w,c
 12006  0009B8  6EF7               	movwf	tblptrh,c
 12007  0009BA                     	if	0	;There are less than 3 active tblptr bytes
 12008  0009BA                     	endif
 12009  0009BA  0009               	tblrd		*+
 12010  0009BC  CFF5 F069          	movff	tablat,___ftmul@f2
 12011  0009C0  0009               	tblrd		*+
 12012  0009C2  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12013  0009C6  000A               	tblrd		*-
 12014  0009C8  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12015  0009CC  EC6D  F015         	call	___ftmul	;wreg free
 12016  0009D0  C066  F072         	movff	?___ftmul,?_scale
 12017  0009D4  C067  F073         	movff	?___ftmul+1,?_scale+1
 12018  0009D8  C068  F074         	movff	?___ftmul+2,?_scale+2
 12019  0009DC  0012               	return	
 12020  0009DE                     l1647:
 12021                           
 12022                           ;doprnt.c: 432: else if(scl > 10)
 12023  0009DE  0100               	movlb	0	; () banked
 12024  0009E0  5178               	movf	scale@scl& (0+255),w,b
 12025  0009E2  0A80               	xorlw	128
 12026  0009E4  0F75               	addlw	-139
 12027  0009E6  A0D8               	btfss	status,0,c
 12028  0009E8  D054               	goto	l1650
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 12032  0009EA  0E00               	movlw	0
 12033  0009EC  6E21               	movwf	___awdiv@divisor+1,c
 12034  0009EE  0E0A               	movlw	10
 12035  0009F0  6E20               	movwf	___awdiv@divisor,c
 12036  0009F2  5178               	movf	scale@scl& (0+255),w,b
 12037  0009F4  6E1E               	movwf	___awdiv@dividend,c
 12038  0009F6  6A1F               	clrf	___awdiv@dividend+1,c
 12039  0009F8  BE1E               	btfsc	___awdiv@dividend,7,c
 12040  0009FA  061F               	decf	___awdiv@dividend+1,f,c
 12041  0009FC  EC65  F01B         	call	___awdiv	;wreg free
 12042  000A00  0E09               	movlw	9
 12043  000A02  241E               	addwf	?___awdiv,w,c
 12044  000A04  6E26               	movwf	___wmul@multiplier,c
 12045  000A06  0E00               	movlw	0
 12046  000A08  201F               	addwfc	?___awdiv+1,w,c
 12047  000A0A  6E27               	movwf	___wmul@multiplier+1,c
 12048  000A0C  0E00               	movlw	0
 12049  000A0E  6E29               	movwf	___wmul@multiplicand+1,c
 12050  000A10  0E03               	movlw	3
 12051  000A12  6E28               	movwf	___wmul@multiplicand,c
 12052  000A14  EC4E  F022         	call	___wmul	;wreg free
 12053  000A18  0E00               	movlw	low __npowers_
 12054  000A1A  2426               	addwf	?___wmul,w,c
 12055  000A1C  6EF6               	movwf	tblptrl,c
 12056  000A1E  0E78               	movlw	high __npowers_
 12057  000A20  2027               	addwfc	?___wmul+1,w,c
 12058  000A22  6EF7               	movwf	tblptrh,c
 12059  000A24                     	if	0	;There are less than 3 active tblptr bytes
 12060  000A24                     	endif
 12061  000A24  0009               	tblrd		*+
 12062  000A26  CFF5 F066          	movff	tablat,___ftmul@f1
 12063  000A2A  0009               	tblrd		*+
 12064  000A2C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12065  000A30  000A               	tblrd		*-
 12066  000A32  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12067  000A36  0E00               	movlw	0
 12068  000A38  6E29               	movwf	___wmul@multiplicand+1,c
 12069  000A3A  0E03               	movlw	3
 12070  000A3C  6E28               	movwf	___wmul@multiplicand,c
 12071  000A3E  0E00               	movlw	0
 12072  000A40  6E1B               	movwf	___awmod@divisor+1,c
 12073  000A42  0E0A               	movlw	10
 12074  000A44  6E1A               	movwf	___awmod@divisor,c
 12075  000A46  0100               	movlb	0	; () banked
 12076  000A48  5178               	movf	scale@scl& (0+255),w,b
 12077  000A4A  6E18               	movwf	___awmod@dividend,c
 12078  000A4C  6A19               	clrf	___awmod@dividend+1,c
 12079  000A4E  BE18               	btfsc	___awmod@dividend,7,c
 12080  000A50  0619               	decf	___awmod@dividend+1,f,c
 12081  000A52  EC15  F01D         	call	___awmod	;wreg free
 12082  000A56  C018  F026         	movff	?___awmod,___wmul@multiplier
 12083  000A5A  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12084  000A5E  EC4E  F022         	call	___wmul	;wreg free
 12085  000A62  0E00               	movlw	low __npowers_
 12086  000A64  2426               	addwf	?___wmul,w,c
 12087  000A66  6EF6               	movwf	tblptrl,c
 12088  000A68  0E78               	movlw	high __npowers_
 12089  000A6A  2027               	addwfc	?___wmul+1,w,c
 12090  000A6C  6EF7               	movwf	tblptrh,c
 12091  000A6E                     	if	0	;There are less than 3 active tblptr bytes
 12092  000A6E                     	endif
 12093  000A6E  0009               	tblrd		*+
 12094  000A70  CFF5 F069          	movff	tablat,___ftmul@f2
 12095  000A74  0009               	tblrd		*+
 12096  000A76  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12097  000A7A  000A               	tblrd		*-
 12098  000A7C  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12099  000A80  EC6D  F015         	call	___ftmul	;wreg free
 12100  000A84  C066  F072         	movff	?___ftmul,?_scale
 12101  000A88  C067  F073         	movff	?___ftmul+1,?_scale+1
 12102  000A8C  C068  F074         	movff	?___ftmul+2,?_scale+2
 12103  000A90  0012               	return	
 12104  000A92                     l1650:
 12105                           
 12106                           ;doprnt.c: 434: return _npowers_[scl];
 12107  000A92  0100               	movlb	0	; () banked
 12108  000A94  5178               	movf	scale@scl& (0+255),w,b
 12109  000A96  0D03               	mullw	3
 12110  000A98  0E00               	movlw	low __npowers_
 12111  000A9A  24F3               	addwf	prodl,w,c
 12112  000A9C  6EF6               	movwf	tblptrl,c
 12113  000A9E  0E78               	movlw	high __npowers_
 12114  000AA0  20F4               	addwfc	prodh,w,c
 12115  000AA2  6EF7               	movwf	tblptrh,c
 12116  000AA4                     	if	0	;There are less than 3 active tblptr bytes
 12117  000AA4                     	endif
 12118  000AA4  0009               	tblrd		*+
 12119  000AA6  CFF5 F072          	movff	tablat,?_scale
 12120  000AAA  0009               	tblrd		*+
 12121  000AAC  CFF5 F073          	movff	tablat,?_scale+1
 12122  000AB0  000A               	tblrd		*-
 12123  000AB2  CFF5 F074          	movff	tablat,?_scale+2
 12124                           
 12125                           ; BSR set to: 0
 12126  000AB6  0012               	return	
 12127  000AB8                     l1646:
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;doprnt.c: 435: }
 12131                           ;doprnt.c: 436: if(scl>=110)
 12132                           
 12133                           ; BSR set to: 0
 12134  000AB8  5178               	movf	scale@scl& (0+255),w,b
 12135  000ABA  0A80               	xorlw	128
 12136  000ABC  0F12               	addlw	-238
 12137  000ABE  A0D8               	btfss	status,0,c
 12138  000AC0  D093               	goto	l1651
 12139                           
 12140                           ; BSR set to: 0
 12141                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 12142  000AC2  0E00               	movlw	0
 12143  000AC4  6E29               	movwf	___wmul@multiplicand+1,c
 12144  000AC6  0E03               	movlw	3
 12145  000AC8  6E28               	movwf	___wmul@multiplicand,c
 12146  000ACA  0E00               	movlw	0
 12147  000ACC  6E21               	movwf	___awdiv@divisor+1,c
 12148  000ACE  0E0A               	movlw	10
 12149  000AD0  6E20               	movwf	___awdiv@divisor,c
 12150  000AD2  0E00               	movlw	0
 12151  000AD4  6E1B               	movwf	___awmod@divisor+1,c
 12152  000AD6  0E64               	movlw	100
 12153  000AD8  6E1A               	movwf	___awmod@divisor,c
 12154  000ADA  5178               	movf	scale@scl& (0+255),w,b
 12155  000ADC  6E18               	movwf	___awmod@dividend,c
 12156  000ADE  6A19               	clrf	___awmod@dividend+1,c
 12157  000AE0  BE18               	btfsc	___awmod@dividend,7,c
 12158  000AE2  0619               	decf	___awmod@dividend+1,f,c
 12159  000AE4  EC15  F01D         	call	___awmod	;wreg free
 12160  000AE8  C018  F01E         	movff	?___awmod,___awdiv@dividend
 12161  000AEC  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 12162  000AF0  EC65  F01B         	call	___awdiv	;wreg free
 12163  000AF4  0E09               	movlw	9
 12164  000AF6  241E               	addwf	?___awdiv,w,c
 12165  000AF8  6E26               	movwf	___wmul@multiplier,c
 12166  000AFA  0E00               	movlw	0
 12167  000AFC  201F               	addwfc	?___awdiv+1,w,c
 12168  000AFE  6E27               	movwf	___wmul@multiplier+1,c
 12169  000B00  EC4E  F022         	call	___wmul	;wreg free
 12170  000B04  0ED9               	movlw	low __powers_
 12171  000B06  2426               	addwf	?___wmul,w,c
 12172  000B08  6EF6               	movwf	tblptrl,c
 12173  000B0A  0E77               	movlw	high __powers_
 12174  000B0C  2027               	addwfc	?___wmul+1,w,c
 12175  000B0E  6EF7               	movwf	tblptrh,c
 12176  000B10                     	if	0	;There are less than 3 active tblptr bytes
 12177  000B10                     	endif
 12178  000B10  0009               	tblrd		*+
 12179  000B12  CFF5 F069          	movff	tablat,___ftmul@f2
 12180  000B16  0009               	tblrd		*+
 12181  000B18  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12182  000B1C  000A               	tblrd		*-
 12183  000B1E  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12184  000B22  0E00               	movlw	0
 12185  000B24  6E21               	movwf	___awdiv@divisor+1,c
 12186  000B26  0E64               	movlw	100
 12187  000B28  6E20               	movwf	___awdiv@divisor,c
 12188  000B2A  0100               	movlb	0	; () banked
 12189  000B2C  5178               	movf	scale@scl& (0+255),w,b
 12190  000B2E  6E1E               	movwf	___awdiv@dividend,c
 12191  000B30  6A1F               	clrf	___awdiv@dividend+1,c
 12192  000B32  BE1E               	btfsc	___awdiv@dividend,7,c
 12193  000B34  061F               	decf	___awdiv@dividend+1,f,c
 12194  000B36  EC65  F01B         	call	___awdiv	;wreg free
 12195  000B3A  0E12               	movlw	18
 12196  000B3C  241E               	addwf	?___awdiv,w,c
 12197  000B3E  6E26               	movwf	___wmul@multiplier,c
 12198  000B40  0E00               	movlw	0
 12199  000B42  201F               	addwfc	?___awdiv+1,w,c
 12200  000B44  6E27               	movwf	___wmul@multiplier+1,c
 12201  000B46  0E00               	movlw	0
 12202  000B48  6E29               	movwf	___wmul@multiplicand+1,c
 12203  000B4A  0E03               	movlw	3
 12204  000B4C  6E28               	movwf	___wmul@multiplicand,c
 12205  000B4E  EC4E  F022         	call	___wmul	;wreg free
 12206  000B52  0ED9               	movlw	low __powers_
 12207  000B54  2426               	addwf	?___wmul,w,c
 12208  000B56  6EF6               	movwf	tblptrl,c
 12209  000B58  0E77               	movlw	high __powers_
 12210  000B5A  2027               	addwfc	?___wmul+1,w,c
 12211  000B5C  6EF7               	movwf	tblptrh,c
 12212  000B5E                     	if	0	;There are less than 3 active tblptr bytes
 12213  000B5E                     	endif
 12214  000B5E  0009               	tblrd		*+
 12215  000B60  CFF5 F066          	movff	tablat,___ftmul@f1
 12216  000B64  0009               	tblrd		*+
 12217  000B66  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12218  000B6A  000A               	tblrd		*-
 12219  000B6C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12220  000B70  EC6D  F015         	call	___ftmul	;wreg free
 12221  000B74  C066  F075         	movff	?___ftmul,_scale$4001
 12222  000B78  C067  F076         	movff	?___ftmul+1,_scale$4001+1
 12223  000B7C  C068  F077         	movff	?___ftmul+2,_scale$4001+2
 12224                           
 12225                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 12226  000B80  C075  F066         	movff	_scale$4001,___ftmul@f1
 12227  000B84  C076  F067         	movff	_scale$4001+1,___ftmul@f1+1
 12228  000B88  C077  F068         	movff	_scale$4001+2,___ftmul@f1+2
 12229  000B8C  0E00               	movlw	0
 12230  000B8E  6E29               	movwf	___wmul@multiplicand+1,c
 12231  000B90  0E03               	movlw	3
 12232  000B92  6E28               	movwf	___wmul@multiplicand,c
 12233  000B94  0E00               	movlw	0
 12234  000B96  6E1B               	movwf	___awmod@divisor+1,c
 12235  000B98  0E0A               	movlw	10
 12236  000B9A  6E1A               	movwf	___awmod@divisor,c
 12237  000B9C  0100               	movlb	0	; () banked
 12238  000B9E  5178               	movf	scale@scl& (0+255),w,b
 12239  000BA0  6E18               	movwf	___awmod@dividend,c
 12240  000BA2  6A19               	clrf	___awmod@dividend+1,c
 12241  000BA4  BE18               	btfsc	___awmod@dividend,7,c
 12242  000BA6  0619               	decf	___awmod@dividend+1,f,c
 12243  000BA8  EC15  F01D         	call	___awmod	;wreg free
 12244  000BAC  C018  F026         	movff	?___awmod,___wmul@multiplier
 12245  000BB0  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12246  000BB4  EC4E  F022         	call	___wmul	;wreg free
 12247  000BB8  0ED9               	movlw	low __powers_
 12248  000BBA  2426               	addwf	?___wmul,w,c
 12249  000BBC  6EF6               	movwf	tblptrl,c
 12250  000BBE  0E77               	movlw	high __powers_
 12251  000BC0  2027               	addwfc	?___wmul+1,w,c
 12252  000BC2  6EF7               	movwf	tblptrh,c
 12253  000BC4                     	if	0	;There are less than 3 active tblptr bytes
 12254  000BC4                     	endif
 12255  000BC4  0009               	tblrd		*+
 12256  000BC6  CFF5 F069          	movff	tablat,___ftmul@f2
 12257  000BCA  0009               	tblrd		*+
 12258  000BCC  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12259  000BD0  000A               	tblrd		*-
 12260  000BD2  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12261  000BD6  EC6D  F015         	call	___ftmul	;wreg free
 12262  000BDA  C066  F072         	movff	?___ftmul,?_scale
 12263  000BDE  C067  F073         	movff	?___ftmul+1,?_scale+1
 12264  000BE2  C068  F074         	movff	?___ftmul+2,?_scale+2
 12265  000BE6  0012               	return	
 12266  000BE8                     l1651:
 12267                           
 12268                           ;doprnt.c: 438: else if(scl > 10)
 12269  000BE8  0100               	movlb	0	; () banked
 12270  000BEA  5178               	movf	scale@scl& (0+255),w,b
 12271  000BEC  0A80               	xorlw	128
 12272  000BEE  0F75               	addlw	-139
 12273  000BF0  A0D8               	btfss	status,0,c
 12274  000BF2  D054               	goto	l1653
 12275                           
 12276                           ; BSR set to: 0
 12277                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 12278  000BF4  0E00               	movlw	0
 12279  000BF6  6E21               	movwf	___awdiv@divisor+1,c
 12280  000BF8  0E0A               	movlw	10
 12281  000BFA  6E20               	movwf	___awdiv@divisor,c
 12282  000BFC  5178               	movf	scale@scl& (0+255),w,b
 12283  000BFE  6E1E               	movwf	___awdiv@dividend,c
 12284  000C00  6A1F               	clrf	___awdiv@dividend+1,c
 12285  000C02  BE1E               	btfsc	___awdiv@dividend,7,c
 12286  000C04  061F               	decf	___awdiv@dividend+1,f,c
 12287  000C06  EC65  F01B         	call	___awdiv	;wreg free
 12288  000C0A  0E09               	movlw	9
 12289  000C0C  241E               	addwf	?___awdiv,w,c
 12290  000C0E  6E26               	movwf	___wmul@multiplier,c
 12291  000C10  0E00               	movlw	0
 12292  000C12  201F               	addwfc	?___awdiv+1,w,c
 12293  000C14  6E27               	movwf	___wmul@multiplier+1,c
 12294  000C16  0E00               	movlw	0
 12295  000C18  6E29               	movwf	___wmul@multiplicand+1,c
 12296  000C1A  0E03               	movlw	3
 12297  000C1C  6E28               	movwf	___wmul@multiplicand,c
 12298  000C1E  EC4E  F022         	call	___wmul	;wreg free
 12299  000C22  0ED9               	movlw	low __powers_
 12300  000C24  2426               	addwf	?___wmul,w,c
 12301  000C26  6EF6               	movwf	tblptrl,c
 12302  000C28  0E77               	movlw	high __powers_
 12303  000C2A  2027               	addwfc	?___wmul+1,w,c
 12304  000C2C  6EF7               	movwf	tblptrh,c
 12305  000C2E                     	if	0	;There are less than 3 active tblptr bytes
 12306  000C2E                     	endif
 12307  000C2E  0009               	tblrd		*+
 12308  000C30  CFF5 F066          	movff	tablat,___ftmul@f1
 12309  000C34  0009               	tblrd		*+
 12310  000C36  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12311  000C3A  000A               	tblrd		*-
 12312  000C3C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12313  000C40  0E00               	movlw	0
 12314  000C42  6E29               	movwf	___wmul@multiplicand+1,c
 12315  000C44  0E03               	movlw	3
 12316  000C46  6E28               	movwf	___wmul@multiplicand,c
 12317  000C48  0E00               	movlw	0
 12318  000C4A  6E1B               	movwf	___awmod@divisor+1,c
 12319  000C4C  0E0A               	movlw	10
 12320  000C4E  6E1A               	movwf	___awmod@divisor,c
 12321  000C50  0100               	movlb	0	; () banked
 12322  000C52  5178               	movf	scale@scl& (0+255),w,b
 12323  000C54  6E18               	movwf	___awmod@dividend,c
 12324  000C56  6A19               	clrf	___awmod@dividend+1,c
 12325  000C58  BE18               	btfsc	___awmod@dividend,7,c
 12326  000C5A  0619               	decf	___awmod@dividend+1,f,c
 12327  000C5C  EC15  F01D         	call	___awmod	;wreg free
 12328  000C60  C018  F026         	movff	?___awmod,___wmul@multiplier
 12329  000C64  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12330  000C68  EC4E  F022         	call	___wmul	;wreg free
 12331  000C6C  0ED9               	movlw	low __powers_
 12332  000C6E  2426               	addwf	?___wmul,w,c
 12333  000C70  6EF6               	movwf	tblptrl,c
 12334  000C72  0E77               	movlw	high __powers_
 12335  000C74  2027               	addwfc	?___wmul+1,w,c
 12336  000C76  6EF7               	movwf	tblptrh,c
 12337  000C78                     	if	0	;There are less than 3 active tblptr bytes
 12338  000C78                     	endif
 12339  000C78  0009               	tblrd		*+
 12340  000C7A  CFF5 F069          	movff	tablat,___ftmul@f2
 12341  000C7E  0009               	tblrd		*+
 12342  000C80  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12343  000C84  000A               	tblrd		*-
 12344  000C86  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12345  000C8A  EC6D  F015         	call	___ftmul	;wreg free
 12346  000C8E  C066  F072         	movff	?___ftmul,?_scale
 12347  000C92  C067  F073         	movff	?___ftmul+1,?_scale+1
 12348  000C96  C068  F074         	movff	?___ftmul+2,?_scale+2
 12349  000C9A  0012               	return	
 12350  000C9C                     l1653:
 12351                           
 12352                           ;doprnt.c: 440: return _powers_[scl];
 12353  000C9C  0100               	movlb	0	; () banked
 12354  000C9E  5178               	movf	scale@scl& (0+255),w,b
 12355  000CA0  0D03               	mullw	3
 12356  000CA2  0ED9               	movlw	low __powers_
 12357  000CA4  24F3               	addwf	prodl,w,c
 12358  000CA6  6EF6               	movwf	tblptrl,c
 12359  000CA8  0E77               	movlw	high __powers_
 12360  000CAA  20F4               	addwfc	prodh,w,c
 12361  000CAC  6EF7               	movwf	tblptrh,c
 12362  000CAE                     	if	0	;There are less than 3 active tblptr bytes
 12363  000CAE                     	endif
 12364  000CAE  0009               	tblrd		*+
 12365  000CB0  CFF5 F072          	movff	tablat,?_scale
 12366  000CB4  0009               	tblrd		*+
 12367  000CB6  CFF5 F073          	movff	tablat,?_scale+1
 12368  000CBA  000A               	tblrd		*-
 12369  000CBC  CFF5 F074          	movff	tablat,?_scale+2
 12370  000CC0  0012               	return	
 12371  000CC2                     __end_of_scale:
 12372                           	opt stack 0
 12373                           tosu	equ	0xFFF
 12374                           tosh	equ	0xFFE
 12375                           tosl	equ	0xFFD
 12376                           pclath	equ	0xFFA
 12377                           tblptru	equ	0xFF8
 12378                           tblptrh	equ	0xFF7
 12379                           tblptrl	equ	0xFF6
 12380                           tablat	equ	0xFF5
 12381                           prodh	equ	0xFF4
 12382                           prodl	equ	0xFF3
 12383                           intcon	equ	0xFF2
 12384                           intcon2	equ	0xFF1
 12385                           postinc0	equ	0xFEE
 12386                           wreg	equ	0xFE8
 12387                           indf1	equ	0xFE7
 12388                           postdec1	equ	0xFE5
 12389                           fsr1h	equ	0xFE2
 12390                           fsr1l	equ	0xFE1
 12391                           indf2	equ	0xFDF
 12392                           postinc2	equ	0xFDE
 12393                           postdec2	equ	0xFDD
 12394                           fsr2h	equ	0xFDA
 12395                           fsr2l	equ	0xFD9
 12396                           status	equ	0xFD8
 12397                           
 12398 ;; *************** function _fround *****************
 12399 ;; Defined at:
 12400 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;  prec            1    wreg     unsigned char 
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;  prec            1   27[BANK0 ] unsigned char 
 12405 ;; Return value:  Size  Location     Type
 12406 ;;                  3   18[BANK0 ] unsigned char 
 12407 ;; Registers used:
 12408 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12409 ;; Tracked objects:
 12410 ;;		On entry : 0/0
 12411 ;;		On exit  : 0/0
 12412 ;;		Unchanged: 0/0
 12413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12414 ;;      Params:         0       3       0       0       0       0       0
 12415 ;;      Locals:         0       7       0       0       0       0       0
 12416 ;;      Temps:          0       0       0       0       0       0       0
 12417 ;;      Totals:         0      10       0       0       0       0       0
 12418 ;;Total ram usage:       10 bytes
 12419 ;; Hardware stack levels used:    1
 12420 ;; Hardware stack levels required when called:    5
 12421 ;; This function calls:
 12422 ;;		___awdiv
 12423 ;;		___awmod
 12424 ;;		___ftmul
 12425 ;;		___wmul
 12426 ;; This function is called by:
 12427 ;;		_sprintf
 12428 ;; This function uses a non-reentrant model
 12429 ;;
 12430                           
 12431                           	psect	text41
 12432  0012C0                     __ptext41:
 12433                           	opt stack 0
 12434  0012C0                     _fround:
 12435                           	opt stack 23
 12436                           
 12437                           ;incstack = 0
 12438                           ;fround@prec stored from wreg
 12439  0012C0  0100               	movlb	0	; () banked
 12440  0012C2  6F7B               	movwf	fround@prec& (0+255),b
 12441                           
 12442                           ;doprnt.c: 413: if(prec>=110)
 12443  0012C4  0E6D               	movlw	109
 12444  0012C6  0100               	movlb	0	; () banked
 12445  0012C8  657B               	cpfsgt	fround@prec& (0+255),b
 12446  0012CA  D0A0               	goto	l1640
 12447                           
 12448                           ; BSR set to: 0
 12449                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 12450  0012CC  0E00               	movlw	0
 12451  0012CE  6E29               	movwf	___wmul@multiplicand+1,c
 12452  0012D0  0E03               	movlw	3
 12453  0012D2  6E28               	movwf	___wmul@multiplicand,c
 12454  0012D4  0E00               	movlw	0
 12455  0012D6  6E21               	movwf	___awdiv@divisor+1,c
 12456  0012D8  0E0A               	movlw	10
 12457  0012DA  6E20               	movwf	___awdiv@divisor,c
 12458  0012DC  0E00               	movlw	0
 12459  0012DE  6E1B               	movwf	___awmod@divisor+1,c
 12460  0012E0  0E64               	movlw	100
 12461  0012E2  6E1A               	movwf	___awmod@divisor,c
 12462  0012E4  C07B  F018         	movff	fround@prec,___awmod@dividend
 12463  0012E8  6A19               	clrf	___awmod@dividend+1,c
 12464  0012EA  EC15  F01D         	call	___awmod	;wreg free
 12465  0012EE  C018  F01E         	movff	?___awmod,___awdiv@dividend
 12466  0012F2  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 12467  0012F6  EC65  F01B         	call	___awdiv	;wreg free
 12468  0012FA  0E09               	movlw	9
 12469  0012FC  241E               	addwf	?___awdiv,w,c
 12470  0012FE  6E26               	movwf	___wmul@multiplier,c
 12471  001300  0E00               	movlw	0
 12472  001302  201F               	addwfc	?___awdiv+1,w,c
 12473  001304  6E27               	movwf	___wmul@multiplier+1,c
 12474  001306  EC4E  F022         	call	___wmul	;wreg free
 12475  00130A  0E00               	movlw	low __npowers_
 12476  00130C  2426               	addwf	?___wmul,w,c
 12477  00130E  6EF6               	movwf	tblptrl,c
 12478  001310  0E78               	movlw	high __npowers_
 12479  001312  2027               	addwfc	?___wmul+1,w,c
 12480  001314  6EF7               	movwf	tblptrh,c
 12481  001316                     	if	0	;There are less than 3 active tblptr bytes
 12482  001316                     	endif
 12483  001316  0009               	tblrd		*+
 12484  001318  CFF5 F069          	movff	tablat,___ftmul@f2
 12485  00131C  0009               	tblrd		*+
 12486  00131E  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12487  001322  000A               	tblrd		*-
 12488  001324  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12489  001328  0E00               	movlw	0
 12490  00132A  6E21               	movwf	___awdiv@divisor+1,c
 12491  00132C  0E64               	movlw	100
 12492  00132E  6E20               	movwf	___awdiv@divisor,c
 12493  001330  C07B  F01E         	movff	fround@prec,___awdiv@dividend
 12494  001334  6A1F               	clrf	___awdiv@dividend+1,c
 12495  001336  EC65  F01B         	call	___awdiv	;wreg free
 12496  00133A  0E12               	movlw	18
 12497  00133C  241E               	addwf	?___awdiv,w,c
 12498  00133E  6E26               	movwf	___wmul@multiplier,c
 12499  001340  0E00               	movlw	0
 12500  001342  201F               	addwfc	?___awdiv+1,w,c
 12501  001344  6E27               	movwf	___wmul@multiplier+1,c
 12502  001346  0E00               	movlw	0
 12503  001348  6E29               	movwf	___wmul@multiplicand+1,c
 12504  00134A  0E03               	movlw	3
 12505  00134C  6E28               	movwf	___wmul@multiplicand,c
 12506  00134E  EC4E  F022         	call	___wmul	;wreg free
 12507  001352  0E00               	movlw	low __npowers_
 12508  001354  2426               	addwf	?___wmul,w,c
 12509  001356  6EF6               	movwf	tblptrl,c
 12510  001358  0E78               	movlw	high __npowers_
 12511  00135A  2027               	addwfc	?___wmul+1,w,c
 12512  00135C  6EF7               	movwf	tblptrh,c
 12513  00135E                     	if	0	;There are less than 3 active tblptr bytes
 12514  00135E                     	endif
 12515  00135E  0009               	tblrd		*+
 12516  001360  CFF5 F066          	movff	tablat,___ftmul@f1
 12517  001364  0009               	tblrd		*+
 12518  001366  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12519  00136A  000A               	tblrd		*-
 12520  00136C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12521  001370  EC6D  F015         	call	___ftmul	;wreg free
 12522  001374  C066  F078         	movff	?___ftmul,_fround$3999
 12523  001378  C067  F079         	movff	?___ftmul+1,_fround$3999+1
 12524  00137C  C068  F07A         	movff	?___ftmul+2,_fround$3999+2
 12525                           
 12526                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 12527  001380  0E00               	movlw	0
 12528  001382  6E29               	movwf	___wmul@multiplicand+1,c
 12529  001384  0E03               	movlw	3
 12530  001386  6E28               	movwf	___wmul@multiplicand,c
 12531  001388  0E00               	movlw	0
 12532  00138A  6E1B               	movwf	___awmod@divisor+1,c
 12533  00138C  0E0A               	movlw	10
 12534  00138E  6E1A               	movwf	___awmod@divisor,c
 12535  001390  C07B  F018         	movff	fround@prec,___awmod@dividend
 12536  001394  6A19               	clrf	___awmod@dividend+1,c
 12537  001396  EC15  F01D         	call	___awmod	;wreg free
 12538  00139A  C018  F026         	movff	?___awmod,___wmul@multiplier
 12539  00139E  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12540  0013A2  EC4E  F022         	call	___wmul	;wreg free
 12541  0013A6  0E00               	movlw	low __npowers_
 12542  0013A8  2426               	addwf	?___wmul,w,c
 12543  0013AA  6EF6               	movwf	tblptrl,c
 12544  0013AC  0E78               	movlw	high __npowers_
 12545  0013AE  2027               	addwfc	?___wmul+1,w,c
 12546  0013B0  6EF7               	movwf	tblptrh,c
 12547  0013B2                     	if	0	;There are less than 3 active tblptr bytes
 12548  0013B2                     	endif
 12549  0013B2  0009               	tblrd		*+
 12550  0013B4  CFF5 F069          	movff	tablat,___ftmul@f2
 12551  0013B8  0009               	tblrd		*+
 12552  0013BA  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12553  0013BE  000A               	tblrd		*-
 12554  0013C0  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12555  0013C4  C078  F066         	movff	_fround$3999,___ftmul@f1
 12556  0013C8  C079  F067         	movff	_fround$3999+1,___ftmul@f1+1
 12557  0013CC  C07A  F068         	movff	_fround$3999+2,___ftmul@f1+2
 12558  0013D0  EC6D  F015         	call	___ftmul	;wreg free
 12559  0013D4  C066  F075         	movff	?___ftmul,_fround$4000
 12560  0013D8  C067  F076         	movff	?___ftmul+1,_fround$4000+1
 12561  0013DC  C068  F077         	movff	?___ftmul+2,_fround$4000+2
 12562                           
 12563                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 12564  0013E0  C075  F066         	movff	_fround$4000,___ftmul@f1
 12565  0013E4  C076  F067         	movff	_fround$4000+1,___ftmul@f1+1
 12566  0013E8  C077  F068         	movff	_fround$4000+2,___ftmul@f1+2
 12567  0013EC  0E00               	movlw	0
 12568  0013EE  0100               	movlb	0	; () banked
 12569  0013F0  6F69               	movwf	___ftmul@f2& (0+255),b
 12570  0013F2  0E00               	movlw	0
 12571  0013F4  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 12572  0013F6  0E3F               	movlw	63
 12573  0013F8  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 12574  0013FA  EC6D  F015         	call	___ftmul	;wreg free
 12575  0013FE  C066  F072         	movff	?___ftmul,?_fround
 12576  001402  C067  F073         	movff	?___ftmul+1,?_fround+1
 12577  001406  C068  F074         	movff	?___ftmul+2,?_fround+2
 12578  00140A  0012               	return	
 12579  00140C                     l1640:
 12580                           
 12581                           ;doprnt.c: 415: else if(prec > 10)
 12582  00140C  0E0A               	movlw	10
 12583  00140E  0100               	movlb	0	; () banked
 12584  001410  657B               	cpfsgt	fround@prec& (0+255),b
 12585  001412  D064               	goto	l1643
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 12589  001414  0E00               	movlw	0
 12590  001416  6E29               	movwf	___wmul@multiplicand+1,c
 12591  001418  0E03               	movlw	3
 12592  00141A  6E28               	movwf	___wmul@multiplicand,c
 12593  00141C  0E00               	movlw	0
 12594  00141E  6E1B               	movwf	___awmod@divisor+1,c
 12595  001420  0E0A               	movlw	10
 12596  001422  6E1A               	movwf	___awmod@divisor,c
 12597  001424  C07B  F018         	movff	fround@prec,___awmod@dividend
 12598  001428  6A19               	clrf	___awmod@dividend+1,c
 12599  00142A  EC15  F01D         	call	___awmod	;wreg free
 12600  00142E  C018  F026         	movff	?___awmod,___wmul@multiplier
 12601  001432  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 12602  001436  EC4E  F022         	call	___wmul	;wreg free
 12603  00143A  0E00               	movlw	low __npowers_
 12604  00143C  2426               	addwf	?___wmul,w,c
 12605  00143E  6EF6               	movwf	tblptrl,c
 12606  001440  0E78               	movlw	high __npowers_
 12607  001442  2027               	addwfc	?___wmul+1,w,c
 12608  001444  6EF7               	movwf	tblptrh,c
 12609  001446                     	if	0	;There are less than 3 active tblptr bytes
 12610  001446                     	endif
 12611  001446  0009               	tblrd		*+
 12612  001448  CFF5 F069          	movff	tablat,___ftmul@f2
 12613  00144C  0009               	tblrd		*+
 12614  00144E  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 12615  001452  000A               	tblrd		*-
 12616  001454  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 12617  001458  0E00               	movlw	0
 12618  00145A  6E21               	movwf	___awdiv@divisor+1,c
 12619  00145C  0E0A               	movlw	10
 12620  00145E  6E20               	movwf	___awdiv@divisor,c
 12621  001460  C07B  F01E         	movff	fround@prec,___awdiv@dividend
 12622  001464  6A1F               	clrf	___awdiv@dividend+1,c
 12623  001466  EC65  F01B         	call	___awdiv	;wreg free
 12624  00146A  0E09               	movlw	9
 12625  00146C  241E               	addwf	?___awdiv,w,c
 12626  00146E  6E26               	movwf	___wmul@multiplier,c
 12627  001470  0E00               	movlw	0
 12628  001472  201F               	addwfc	?___awdiv+1,w,c
 12629  001474  6E27               	movwf	___wmul@multiplier+1,c
 12630  001476  0E00               	movlw	0
 12631  001478  6E29               	movwf	___wmul@multiplicand+1,c
 12632  00147A  0E03               	movlw	3
 12633  00147C  6E28               	movwf	___wmul@multiplicand,c
 12634  00147E  EC4E  F022         	call	___wmul	;wreg free
 12635  001482  0E00               	movlw	low __npowers_
 12636  001484  2426               	addwf	?___wmul,w,c
 12637  001486  6EF6               	movwf	tblptrl,c
 12638  001488  0E78               	movlw	high __npowers_
 12639  00148A  2027               	addwfc	?___wmul+1,w,c
 12640  00148C  6EF7               	movwf	tblptrh,c
 12641  00148E                     	if	0	;There are less than 3 active tblptr bytes
 12642  00148E                     	endif
 12643  00148E  0009               	tblrd		*+
 12644  001490  CFF5 F066          	movff	tablat,___ftmul@f1
 12645  001494  0009               	tblrd		*+
 12646  001496  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12647  00149A  000A               	tblrd		*-
 12648  00149C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12649  0014A0  EC6D  F015         	call	___ftmul	;wreg free
 12650  0014A4  C066  F078         	movff	?___ftmul,_fround$3999
 12651  0014A8  C067  F079         	movff	?___ftmul+1,_fround$3999+1
 12652  0014AC  C068  F07A         	movff	?___ftmul+2,_fround$3999+2
 12653                           
 12654                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 12655  0014B0  C078  F066         	movff	_fround$3999,___ftmul@f1
 12656  0014B4  C079  F067         	movff	_fround$3999+1,___ftmul@f1+1
 12657  0014B8  C07A  F068         	movff	_fround$3999+2,___ftmul@f1+2
 12658  0014BC  0E00               	movlw	0
 12659  0014BE  0100               	movlb	0	; () banked
 12660  0014C0  6F69               	movwf	___ftmul@f2& (0+255),b
 12661  0014C2  0E00               	movlw	0
 12662  0014C4  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 12663  0014C6  0E3F               	movlw	63
 12664  0014C8  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 12665  0014CA  EC6D  F015         	call	___ftmul	;wreg free
 12666  0014CE  C066  F072         	movff	?___ftmul,?_fround
 12667  0014D2  C067  F073         	movff	?___ftmul+1,?_fround+1
 12668  0014D6  C068  F074         	movff	?___ftmul+2,?_fround+2
 12669  0014DA  0012               	return	
 12670  0014DC                     l1643:
 12671                           
 12672                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 12673  0014DC  0100               	movlb	0	; () banked
 12674  0014DE  517B               	movf	fround@prec& (0+255),w,b
 12675  0014E0  0D03               	mullw	3
 12676  0014E2  0E00               	movlw	low __npowers_
 12677  0014E4  24F3               	addwf	prodl,w,c
 12678  0014E6  6EF6               	movwf	tblptrl,c
 12679  0014E8  0E78               	movlw	high __npowers_
 12680  0014EA  20F4               	addwfc	prodh,w,c
 12681  0014EC  6EF7               	movwf	tblptrh,c
 12682  0014EE                     	if	0	;There are less than 3 active tblptr bytes
 12683  0014EE                     	endif
 12684  0014EE  0009               	tblrd		*+
 12685  0014F0  CFF5 F066          	movff	tablat,___ftmul@f1
 12686  0014F4  0009               	tblrd		*+
 12687  0014F6  CFF5 F067          	movff	tablat,___ftmul@f1+1
 12688  0014FA  000A               	tblrd		*-
 12689  0014FC  CFF5 F068          	movff	tablat,___ftmul@f1+2
 12690  001500  0E00               	movlw	0
 12691  001502  6F69               	movwf	___ftmul@f2& (0+255),b
 12692  001504  0E00               	movlw	0
 12693  001506  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 12694  001508  0E3F               	movlw	63
 12695  00150A  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 12696  00150C  EC6D  F015         	call	___ftmul	;wreg free
 12697  001510  C066  F072         	movff	?___ftmul,?_fround
 12698  001514  C067  F073         	movff	?___ftmul+1,?_fround+1
 12699  001518  C068  F074         	movff	?___ftmul+2,?_fround+2
 12700  00151C  0012               	return	
 12701  00151E                     __end_of_fround:
 12702                           	opt stack 0
 12703                           tosu	equ	0xFFF
 12704                           tosh	equ	0xFFE
 12705                           tosl	equ	0xFFD
 12706                           pclath	equ	0xFFA
 12707                           tblptru	equ	0xFF8
 12708                           tblptrh	equ	0xFF7
 12709                           tblptrl	equ	0xFF6
 12710                           tablat	equ	0xFF5
 12711                           prodh	equ	0xFF4
 12712                           prodl	equ	0xFF3
 12713                           intcon	equ	0xFF2
 12714                           intcon2	equ	0xFF1
 12715                           postinc0	equ	0xFEE
 12716                           wreg	equ	0xFE8
 12717                           indf1	equ	0xFE7
 12718                           postdec1	equ	0xFE5
 12719                           fsr1h	equ	0xFE2
 12720                           fsr1l	equ	0xFE1
 12721                           indf2	equ	0xFDF
 12722                           postinc2	equ	0xFDE
 12723                           postdec2	equ	0xFDD
 12724                           fsr2h	equ	0xFDA
 12725                           fsr2l	equ	0xFD9
 12726                           status	equ	0xFD8
 12727                           
 12728 ;; *************** function ___awmod *****************
 12729 ;; Defined at:
 12730 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 12731 ;; Parameters:    Size  Location     Type
 12732 ;;  dividend        2   23[COMRAM] int 
 12733 ;;  divisor         2   25[COMRAM] int 
 12734 ;; Auto vars:     Size  Location     Type
 12735 ;;  sign            1   28[COMRAM] unsigned char 
 12736 ;;  counter         1   27[COMRAM] unsigned char 
 12737 ;; Return value:  Size  Location     Type
 12738 ;;                  2   23[COMRAM] int 
 12739 ;; Registers used:
 12740 ;;		wreg, status,2, status,0
 12741 ;; Tracked objects:
 12742 ;;		On entry : 0/0
 12743 ;;		On exit  : 0/0
 12744 ;;		Unchanged: 0/0
 12745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12746 ;;      Params:         4       0       0       0       0       0       0
 12747 ;;      Locals:         2       0       0       0       0       0       0
 12748 ;;      Temps:          0       0       0       0       0       0       0
 12749 ;;      Totals:         6       0       0       0       0       0       0
 12750 ;;Total ram usage:        6 bytes
 12751 ;; Hardware stack levels used:    1
 12752 ;; Hardware stack levels required when called:    3
 12753 ;; This function calls:
 12754 ;;		Nothing
 12755 ;; This function is called by:
 12756 ;;		_fround
 12757 ;;		_scale
 12758 ;; This function uses a non-reentrant model
 12759 ;;
 12760                           
 12761                           	psect	text42
 12762  003A2A                     __ptext42:
 12763                           	opt stack 0
 12764  003A2A                     ___awmod:
 12765                           	opt stack 24
 12766                           
 12767                           ;incstack = 0
 12768  003A2A  0E00               	movlw	0
 12769  003A2C  6E1D               	movwf	___awmod@sign,c
 12770  003A2E  AE19               	btfss	___awmod@dividend+1,7,c
 12771  003A30  D006               	goto	l1899
 12772  003A32  6C18               	negf	___awmod@dividend,c
 12773  003A34  1E19               	comf	___awmod@dividend+1,f,c
 12774  003A36  B0D8               	btfsc	status,0,c
 12775  003A38  2A19               	incf	___awmod@dividend+1,f,c
 12776  003A3A  0E01               	movlw	1
 12777  003A3C  6E1D               	movwf	___awmod@sign,c
 12778  003A3E                     l1899:
 12779  003A3E  AE1B               	btfss	___awmod@divisor+1,7,c
 12780  003A40  D004               	goto	l1900
 12781  003A42  6C1A               	negf	___awmod@divisor,c
 12782  003A44  1E1B               	comf	___awmod@divisor+1,f,c
 12783  003A46  B0D8               	btfsc	status,0,c
 12784  003A48  2A1B               	incf	___awmod@divisor+1,f,c
 12785  003A4A                     l1900:
 12786  003A4A  501A               	movf	___awmod@divisor,w,c
 12787  003A4C  101B               	iorwf	___awmod@divisor+1,w,c
 12788  003A4E  B4D8               	btfsc	status,2,c
 12789  003A50  D018               	goto	l1907
 12790  003A52  0E01               	movlw	1
 12791  003A54  6E1C               	movwf	___awmod@counter,c
 12792  003A56  D004               	goto	l1902
 12793  003A58  90D8               	bcf	status,0,c
 12794  003A5A  361A               	rlcf	___awmod@divisor,f,c
 12795  003A5C  361B               	rlcf	___awmod@divisor+1,f,c
 12796  003A5E  2A1C               	incf	___awmod@counter,f,c
 12797  003A60                     l1902:
 12798  003A60  AE1B               	btfss	___awmod@divisor+1,7,c
 12799  003A62  D7FA               	goto	l1903
 12800  003A64                     u7580:
 12801  003A64  501A               	movf	___awmod@divisor,w,c
 12802  003A66  5C18               	subwf	___awmod@dividend,w,c
 12803  003A68  501B               	movf	___awmod@divisor+1,w,c
 12804  003A6A  5819               	subwfb	___awmod@dividend+1,w,c
 12805  003A6C  A0D8               	btfss	status,0,c
 12806  003A6E  D004               	goto	l1906
 12807  003A70  501A               	movf	___awmod@divisor,w,c
 12808  003A72  5E18               	subwf	___awmod@dividend,f,c
 12809  003A74  501B               	movf	___awmod@divisor+1,w,c
 12810  003A76  5A19               	subwfb	___awmod@dividend+1,f,c
 12811  003A78                     l1906:
 12812  003A78  90D8               	bcf	status,0,c
 12813  003A7A  321B               	rrcf	___awmod@divisor+1,f,c
 12814  003A7C  321A               	rrcf	___awmod@divisor,f,c
 12815  003A7E  2E1C               	decfsz	___awmod@counter,f,c
 12816  003A80  D7F1               	goto	u7580
 12817  003A82                     l1907:
 12818  003A82  501D               	movf	___awmod@sign,w,c
 12819  003A84  B4D8               	btfsc	status,2,c
 12820  003A86  D004               	goto	l1908
 12821  003A88  6C18               	negf	___awmod@dividend,c
 12822  003A8A  1E19               	comf	___awmod@dividend+1,f,c
 12823  003A8C  B0D8               	btfsc	status,0,c
 12824  003A8E  2A19               	incf	___awmod@dividend+1,f,c
 12825  003A90                     l1908:
 12826  003A90  C018  F018         	movff	___awmod@dividend,?___awmod
 12827  003A94  C019  F019         	movff	___awmod@dividend+1,?___awmod+1
 12828  003A98  0012               	return	
 12829  003A9A                     __end_of___awmod:
 12830                           	opt stack 0
 12831                           tosu	equ	0xFFF
 12832                           tosh	equ	0xFFE
 12833                           tosl	equ	0xFFD
 12834                           pclath	equ	0xFFA
 12835                           tblptru	equ	0xFF8
 12836                           tblptrh	equ	0xFF7
 12837                           tblptrl	equ	0xFF6
 12838                           tablat	equ	0xFF5
 12839                           prodh	equ	0xFF4
 12840                           prodl	equ	0xFF3
 12841                           intcon	equ	0xFF2
 12842                           intcon2	equ	0xFF1
 12843                           postinc0	equ	0xFEE
 12844                           wreg	equ	0xFE8
 12845                           indf1	equ	0xFE7
 12846                           postdec1	equ	0xFE5
 12847                           fsr1h	equ	0xFE2
 12848                           fsr1l	equ	0xFE1
 12849                           indf2	equ	0xFDF
 12850                           postinc2	equ	0xFDE
 12851                           postdec2	equ	0xFDD
 12852                           fsr2h	equ	0xFDA
 12853                           fsr2l	equ	0xFD9
 12854                           status	equ	0xFD8
 12855                           
 12856 ;; *************** function ___awdiv *****************
 12857 ;; Defined at:
 12858 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12859 ;; Parameters:    Size  Location     Type
 12860 ;;  dividend        2   29[COMRAM] int 
 12861 ;;  divisor         2   31[COMRAM] int 
 12862 ;; Auto vars:     Size  Location     Type
 12863 ;;  quotient        2   35[COMRAM] int 
 12864 ;;  sign            1   34[COMRAM] unsigned char 
 12865 ;;  counter         1   33[COMRAM] unsigned char 
 12866 ;; Return value:  Size  Location     Type
 12867 ;;                  2   29[COMRAM] int 
 12868 ;; Registers used:
 12869 ;;		wreg, status,2, status,0
 12870 ;; Tracked objects:
 12871 ;;		On entry : 0/0
 12872 ;;		On exit  : 0/0
 12873 ;;		Unchanged: 0/0
 12874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12875 ;;      Params:         4       0       0       0       0       0       0
 12876 ;;      Locals:         4       0       0       0       0       0       0
 12877 ;;      Temps:          0       0       0       0       0       0       0
 12878 ;;      Totals:         8       0       0       0       0       0       0
 12879 ;;Total ram usage:        8 bytes
 12880 ;; Hardware stack levels used:    1
 12881 ;; Hardware stack levels required when called:    3
 12882 ;; This function calls:
 12883 ;;		Nothing
 12884 ;; This function is called by:
 12885 ;;		_fround
 12886 ;;		_scale
 12887 ;;		_sprintf
 12888 ;; This function uses a non-reentrant model
 12889 ;;
 12890                           
 12891                           	psect	text43
 12892  0036CA                     __ptext43:
 12893                           	opt stack 0
 12894  0036CA                     ___awdiv:
 12895                           	opt stack 24
 12896                           
 12897                           ;incstack = 0
 12898  0036CA  0E00               	movlw	0
 12899  0036CC  6E23               	movwf	___awdiv@sign,c
 12900  0036CE  AE21               	btfss	___awdiv@divisor+1,7,c
 12901  0036D0  D006               	goto	l1886
 12902  0036D2  6C20               	negf	___awdiv@divisor,c
 12903  0036D4  1E21               	comf	___awdiv@divisor+1,f,c
 12904  0036D6  B0D8               	btfsc	status,0,c
 12905  0036D8  2A21               	incf	___awdiv@divisor+1,f,c
 12906  0036DA  0E01               	movlw	1
 12907  0036DC  6E23               	movwf	___awdiv@sign,c
 12908  0036DE                     l1886:
 12909  0036DE  AE1F               	btfss	___awdiv@dividend+1,7,c
 12910  0036E0  D006               	goto	l1887
 12911  0036E2  6C1E               	negf	___awdiv@dividend,c
 12912  0036E4  1E1F               	comf	___awdiv@dividend+1,f,c
 12913  0036E6  B0D8               	btfsc	status,0,c
 12914  0036E8  2A1F               	incf	___awdiv@dividend+1,f,c
 12915  0036EA  0E01               	movlw	1
 12916  0036EC  1A23               	xorwf	___awdiv@sign,f,c
 12917  0036EE                     l1887:
 12918  0036EE  0E00               	movlw	0
 12919  0036F0  6E25               	movwf	___awdiv@quotient+1,c
 12920  0036F2  0E00               	movlw	0
 12921  0036F4  6E24               	movwf	___awdiv@quotient,c
 12922  0036F6  5020               	movf	___awdiv@divisor,w,c
 12923  0036F8  1021               	iorwf	___awdiv@divisor+1,w,c
 12924  0036FA  B4D8               	btfsc	status,2,c
 12925  0036FC  D01C               	goto	l1894
 12926  0036FE  0E01               	movlw	1
 12927  003700  6E22               	movwf	___awdiv@counter,c
 12928  003702  D004               	goto	l1889
 12929  003704  90D8               	bcf	status,0,c
 12930  003706  3620               	rlcf	___awdiv@divisor,f,c
 12931  003708  3621               	rlcf	___awdiv@divisor+1,f,c
 12932  00370A  2A22               	incf	___awdiv@counter,f,c
 12933  00370C                     l1889:
 12934  00370C  AE21               	btfss	___awdiv@divisor+1,7,c
 12935  00370E  D7FA               	goto	l1890
 12936  003710                     u7520:
 12937  003710  90D8               	bcf	status,0,c
 12938  003712  3624               	rlcf	___awdiv@quotient,f,c
 12939  003714  3625               	rlcf	___awdiv@quotient+1,f,c
 12940  003716  5020               	movf	___awdiv@divisor,w,c
 12941  003718  5C1E               	subwf	___awdiv@dividend,w,c
 12942  00371A  5021               	movf	___awdiv@divisor+1,w,c
 12943  00371C  581F               	subwfb	___awdiv@dividend+1,w,c
 12944  00371E  A0D8               	btfss	status,0,c
 12945  003720  D005               	goto	l1893
 12946  003722  5020               	movf	___awdiv@divisor,w,c
 12947  003724  5E1E               	subwf	___awdiv@dividend,f,c
 12948  003726  5021               	movf	___awdiv@divisor+1,w,c
 12949  003728  5A1F               	subwfb	___awdiv@dividend+1,f,c
 12950  00372A  8024               	bsf	___awdiv@quotient,0,c
 12951  00372C                     l1893:
 12952  00372C  90D8               	bcf	status,0,c
 12953  00372E  3221               	rrcf	___awdiv@divisor+1,f,c
 12954  003730  3220               	rrcf	___awdiv@divisor,f,c
 12955  003732  2E22               	decfsz	___awdiv@counter,f,c
 12956  003734  D7ED               	goto	u7520
 12957  003736                     l1894:
 12958  003736  5023               	movf	___awdiv@sign,w,c
 12959  003738  B4D8               	btfsc	status,2,c
 12960  00373A  D004               	goto	l1895
 12961  00373C  6C24               	negf	___awdiv@quotient,c
 12962  00373E  1E25               	comf	___awdiv@quotient+1,f,c
 12963  003740  B0D8               	btfsc	status,0,c
 12964  003742  2A25               	incf	___awdiv@quotient+1,f,c
 12965  003744                     l1895:
 12966  003744  C024  F01E         	movff	___awdiv@quotient,?___awdiv
 12967  003748  C025  F01F         	movff	___awdiv@quotient+1,?___awdiv+1
 12968  00374C  0012               	return	
 12969  00374E                     __end_of___awdiv:
 12970                           	opt stack 0
 12971                           tosu	equ	0xFFF
 12972                           tosh	equ	0xFFE
 12973                           tosl	equ	0xFFD
 12974                           pclath	equ	0xFFA
 12975                           tblptru	equ	0xFF8
 12976                           tblptrh	equ	0xFF7
 12977                           tblptrl	equ	0xFF6
 12978                           tablat	equ	0xFF5
 12979                           prodh	equ	0xFF4
 12980                           prodl	equ	0xFF3
 12981                           intcon	equ	0xFF2
 12982                           intcon2	equ	0xFF1
 12983                           postinc0	equ	0xFEE
 12984                           wreg	equ	0xFE8
 12985                           indf1	equ	0xFE7
 12986                           postdec1	equ	0xFE5
 12987                           fsr1h	equ	0xFE2
 12988                           fsr1l	equ	0xFE1
 12989                           indf2	equ	0xFDF
 12990                           postinc2	equ	0xFDE
 12991                           postdec2	equ	0xFDD
 12992                           fsr2h	equ	0xFDA
 12993                           fsr2l	equ	0xFD9
 12994                           status	equ	0xFD8
 12995                           
 12996 ;; *************** function __tdiv_to_l_ *****************
 12997 ;; Defined at:
 12998 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  f1              3   23[COMRAM] float 
 13001 ;;  f2              3   26[COMRAM] float 
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;  quot            4   32[COMRAM] unsigned long 
 13004 ;;  exp1            1   37[COMRAM] unsigned char 
 13005 ;;  cntr            1   36[COMRAM] unsigned char 
 13006 ;; Return value:  Size  Location     Type
 13007 ;;                  4   23[COMRAM] unsigned long 
 13008 ;; Registers used:
 13009 ;;		wreg, status,2, status,0
 13010 ;; Tracked objects:
 13011 ;;		On entry : 0/0
 13012 ;;		On exit  : 0/0
 13013 ;;		Unchanged: 0/0
 13014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13015 ;;      Params:         6       0       0       0       0       0       0
 13016 ;;      Locals:         6       0       0       0       0       0       0
 13017 ;;      Temps:          3       0       0       0       0       0       0
 13018 ;;      Totals:        15       0       0       0       0       0       0
 13019 ;;Total ram usage:       15 bytes
 13020 ;; Hardware stack levels used:    1
 13021 ;; Hardware stack levels required when called:    3
 13022 ;; This function calls:
 13023 ;;		Nothing
 13024 ;; This function is called by:
 13025 ;;		_sprintf
 13026 ;; This function uses a non-reentrant model
 13027 ;;
 13028                           
 13029                           	psect	text44
 13030  0021DA                     __ptext44:
 13031                           	opt stack 0
 13032  0021DA                     __tdiv_to_l_:
 13033                           	opt stack 25
 13034                           
 13035                           ;incstack = 0
 13036  0021DA  C01A  F01E         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 13037  0021DE  6A1F               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 13038  0021E0  6A20               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 13039  0021E2  3419               	rlcf	__tdiv_to_l_@f1+1,w,c
 13040  0021E4  361E               	rlcf	??__tdiv_to_l_& (0+255),f,c
 13041  0021E6  E301               	bnc	u8061
 13042  0021E8  801F               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 13043  0021EA                     u8061:
 13044  0021EA  501E               	movf	??__tdiv_to_l_,w,c
 13045  0021EC  6E26               	movwf	__tdiv_to_l_@exp1,c
 13046  0021EE  5026               	movf	__tdiv_to_l_@exp1,w,c
 13047  0021F0  A4D8               	btfss	status,2,c
 13048  0021F2  D009               	goto	l2022
 13049  0021F4  0E00               	movlw	0
 13050  0021F6  6E18               	movwf	?__tdiv_to_l_,c
 13051  0021F8  0E00               	movlw	0
 13052  0021FA  6E19               	movwf	?__tdiv_to_l_+1,c
 13053  0021FC  0E00               	movlw	0
 13054  0021FE  6E1A               	movwf	?__tdiv_to_l_+2,c
 13055  002200  0E00               	movlw	0
 13056  002202  6E1B               	movwf	?__tdiv_to_l_+3,c
 13057  002204  0012               	return	
 13058  002206                     l2022:
 13059  002206  C01D  F01E         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 13060  00220A  6A1F               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 13061  00220C  6A20               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 13062  00220E  341C               	rlcf	__tdiv_to_l_@f2+1,w,c
 13063  002210  361E               	rlcf	??__tdiv_to_l_& (0+255),f,c
 13064  002212  E301               	bnc	u8081
 13065  002214  801F               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 13066  002216                     u8081:
 13067  002216  501E               	movf	??__tdiv_to_l_,w,c
 13068  002218  6E25               	movwf	__tdiv_to_l_@cntr,c
 13069  00221A  5025               	movf	__tdiv_to_l_@cntr,w,c
 13070  00221C  A4D8               	btfss	status,2,c
 13071  00221E  D009               	goto	l2024
 13072  002220  0E00               	movlw	0
 13073  002222  6E18               	movwf	?__tdiv_to_l_,c
 13074  002224  0E00               	movlw	0
 13075  002226  6E19               	movwf	?__tdiv_to_l_+1,c
 13076  002228  0E00               	movlw	0
 13077  00222A  6E1A               	movwf	?__tdiv_to_l_+2,c
 13078  00222C  0E00               	movlw	0
 13079  00222E  6E1B               	movwf	?__tdiv_to_l_+3,c
 13080  002230  0012               	return	
 13081  002232                     l2024:
 13082  002232  8E19               	bsf	__tdiv_to_l_@f1+1,7,c
 13083  002234  0EFF               	movlw	255
 13084  002236  1618               	andwf	__tdiv_to_l_@f1,f,c
 13085  002238  0EFF               	movlw	255
 13086  00223A  1619               	andwf	__tdiv_to_l_@f1+1,f,c
 13087  00223C  0E00               	movlw	0
 13088  00223E  161A               	andwf	__tdiv_to_l_@f1+2,f,c
 13089  002240  8E1C               	bsf	__tdiv_to_l_@f2+1,7,c
 13090  002242  0EFF               	movlw	255
 13091  002244  161B               	andwf	__tdiv_to_l_@f2,f,c
 13092  002246  0EFF               	movlw	255
 13093  002248  161C               	andwf	__tdiv_to_l_@f2+1,f,c
 13094  00224A  0E00               	movlw	0
 13095  00224C  161D               	andwf	__tdiv_to_l_@f2+2,f,c
 13096  00224E  0E00               	movlw	0
 13097  002250  6E21               	movwf	__tdiv_to_l_@quot,c
 13098  002252  0E00               	movlw	0
 13099  002254  6E22               	movwf	__tdiv_to_l_@quot+1,c
 13100  002256  0E00               	movlw	0
 13101  002258  6E23               	movwf	__tdiv_to_l_@quot+2,c
 13102  00225A  0E00               	movlw	0
 13103  00225C  6E24               	movwf	__tdiv_to_l_@quot+3,c
 13104  00225E  0E7F               	movlw	127
 13105  002260  5E26               	subwf	__tdiv_to_l_@exp1,f,c
 13106  002262  5025               	movf	__tdiv_to_l_@cntr,w,c
 13107  002264  0F98               	addlw	152
 13108  002266  5E26               	subwf	__tdiv_to_l_@exp1,f,c
 13109  002268  0E18               	movlw	24
 13110  00226A  6E25               	movwf	__tdiv_to_l_@cntr,c
 13111  00226C                     l2025:
 13112  00226C  90D8               	bcf	status,0,c
 13113  00226E  3621               	rlcf	__tdiv_to_l_@quot,f,c
 13114  002270  3622               	rlcf	__tdiv_to_l_@quot+1,f,c
 13115  002272  3623               	rlcf	__tdiv_to_l_@quot+2,f,c
 13116  002274  3624               	rlcf	__tdiv_to_l_@quot+3,f,c
 13117  002276  501B               	movf	__tdiv_to_l_@f2,w,c
 13118  002278  5C18               	subwf	__tdiv_to_l_@f1,w,c
 13119  00227A  501C               	movf	__tdiv_to_l_@f2+1,w,c
 13120  00227C  5819               	subwfb	__tdiv_to_l_@f1+1,w,c
 13121  00227E  501D               	movf	__tdiv_to_l_@f2+2,w,c
 13122  002280  581A               	subwfb	__tdiv_to_l_@f1+2,w,c
 13123  002282  A0D8               	btfss	status,0,c
 13124  002284  D007               	goto	l2026
 13125  002286  501B               	movf	__tdiv_to_l_@f2,w,c
 13126  002288  5E18               	subwf	__tdiv_to_l_@f1,f,c
 13127  00228A  501C               	movf	__tdiv_to_l_@f2+1,w,c
 13128  00228C  5A19               	subwfb	__tdiv_to_l_@f1+1,f,c
 13129  00228E  501D               	movf	__tdiv_to_l_@f2+2,w,c
 13130  002290  5A1A               	subwfb	__tdiv_to_l_@f1+2,f,c
 13131  002292  8021               	bsf	__tdiv_to_l_@quot,0,c
 13132  002294                     l2026:
 13133  002294  90D8               	bcf	status,0,c
 13134  002296  3618               	rlcf	__tdiv_to_l_@f1,f,c
 13135  002298  3619               	rlcf	__tdiv_to_l_@f1+1,f,c
 13136  00229A  361A               	rlcf	__tdiv_to_l_@f1+2,f,c
 13137  00229C  2E25               	decfsz	__tdiv_to_l_@cntr,f,c
 13138  00229E  D7E6               	goto	l2025
 13139  0022A0  AE26               	btfss	__tdiv_to_l_@exp1,7,c
 13140  0022A2  D016               	goto	l2028
 13141  0022A4  5026               	movf	__tdiv_to_l_@exp1,w,c
 13142  0022A6  0A80               	xorlw	128
 13143  0022A8  0F97               	addlw	151
 13144  0022AA  B0D8               	btfsc	status,0,c
 13145  0022AC  D009               	goto	l2029
 13146  0022AE  0E00               	movlw	0
 13147  0022B0  6E18               	movwf	?__tdiv_to_l_,c
 13148  0022B2  0E00               	movlw	0
 13149  0022B4  6E19               	movwf	?__tdiv_to_l_+1,c
 13150  0022B6  0E00               	movlw	0
 13151  0022B8  6E1A               	movwf	?__tdiv_to_l_+2,c
 13152  0022BA  0E00               	movlw	0
 13153  0022BC  6E1B               	movwf	?__tdiv_to_l_+3,c
 13154  0022BE  0012               	return	
 13155  0022C0                     l2029:
 13156  0022C0  90D8               	bcf	status,0,c
 13157  0022C2  3224               	rrcf	__tdiv_to_l_@quot+3,f,c
 13158  0022C4  3223               	rrcf	__tdiv_to_l_@quot+2,f,c
 13159  0022C6  3222               	rrcf	__tdiv_to_l_@quot+1,f,c
 13160  0022C8  3221               	rrcf	__tdiv_to_l_@quot,f,c
 13161  0022CA  3E26               	incfsz	__tdiv_to_l_@exp1,f,c
 13162  0022CC  D7F9               	goto	l2029
 13163  0022CE  D015               	goto	u8140
 13164  0022D0                     l2028:
 13165  0022D0  0E17               	movlw	23
 13166  0022D2  6426               	cpfsgt	__tdiv_to_l_@exp1,c
 13167  0022D4  D00F               	goto	l2034
 13168  0022D6  0E00               	movlw	0
 13169  0022D8  6E18               	movwf	?__tdiv_to_l_,c
 13170  0022DA  0E00               	movlw	0
 13171  0022DC  6E19               	movwf	?__tdiv_to_l_+1,c
 13172  0022DE  0E00               	movlw	0
 13173  0022E0  6E1A               	movwf	?__tdiv_to_l_+2,c
 13174  0022E2  0E00               	movlw	0
 13175  0022E4  6E1B               	movwf	?__tdiv_to_l_+3,c
 13176  0022E6  0012               	return	
 13177  0022E8  90D8               	bcf	status,0,c
 13178  0022EA  3621               	rlcf	__tdiv_to_l_@quot,f,c
 13179  0022EC  3622               	rlcf	__tdiv_to_l_@quot+1,f,c
 13180  0022EE  3623               	rlcf	__tdiv_to_l_@quot+2,f,c
 13181  0022F0  3624               	rlcf	__tdiv_to_l_@quot+3,f,c
 13182  0022F2  0626               	decf	__tdiv_to_l_@exp1,f,c
 13183  0022F4                     l2034:
 13184  0022F4  5026               	movf	__tdiv_to_l_@exp1,w,c
 13185  0022F6  A4D8               	btfss	status,2,c
 13186  0022F8  D7F7               	goto	l2035
 13187  0022FA                     u8140:
 13188  0022FA  C021  F018         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 13189  0022FE  C022  F019         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 13190  002302  C023  F01A         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 13191  002306  C024  F01B         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 13192  00230A  0012               	return		;funcret
 13193  00230C                     __end_of__tdiv_to_l_:
 13194                           	opt stack 0
 13195                           tosu	equ	0xFFF
 13196                           tosh	equ	0xFFE
 13197                           tosl	equ	0xFFD
 13198                           pclath	equ	0xFFA
 13199                           tblptru	equ	0xFF8
 13200                           tblptrh	equ	0xFF7
 13201                           tblptrl	equ	0xFF6
 13202                           tablat	equ	0xFF5
 13203                           prodh	equ	0xFF4
 13204                           prodl	equ	0xFF3
 13205                           intcon	equ	0xFF2
 13206                           intcon2	equ	0xFF1
 13207                           postinc0	equ	0xFEE
 13208                           wreg	equ	0xFE8
 13209                           indf1	equ	0xFE7
 13210                           postdec1	equ	0xFE5
 13211                           fsr1h	equ	0xFE2
 13212                           fsr1l	equ	0xFE1
 13213                           indf2	equ	0xFDF
 13214                           postinc2	equ	0xFDE
 13215                           postdec2	equ	0xFDD
 13216                           fsr2h	equ	0xFDA
 13217                           fsr2l	equ	0xFD9
 13218                           status	equ	0xFD8
 13219                           
 13220 ;; *************** function __div_to_l_ *****************
 13221 ;; Defined at:
 13222 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
 13223 ;; Parameters:    Size  Location     Type
 13224 ;;  f1              3   23[COMRAM] unsigned long 
 13225 ;;  f2              3   26[COMRAM] unsigned long 
 13226 ;; Auto vars:     Size  Location     Type
 13227 ;;  quot            4   29[COMRAM] unsigned long 
 13228 ;;  exp1            1   34[COMRAM] unsigned char 
 13229 ;;  cntr            1   33[COMRAM] unsigned char 
 13230 ;; Return value:  Size  Location     Type
 13231 ;;                  4   23[COMRAM] unsigned long 
 13232 ;; Registers used:
 13233 ;;		wreg, status,2, status,0
 13234 ;; Tracked objects:
 13235 ;;		On entry : 0/0
 13236 ;;		On exit  : 0/0
 13237 ;;		Unchanged: 0/0
 13238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13239 ;;      Params:         6       0       0       0       0       0       0
 13240 ;;      Locals:         6       0       0       0       0       0       0
 13241 ;;      Temps:          0       0       0       0       0       0       0
 13242 ;;      Totals:        12       0       0       0       0       0       0
 13243 ;;Total ram usage:       12 bytes
 13244 ;; Hardware stack levels used:    1
 13245 ;; Hardware stack levels required when called:    3
 13246 ;; This function calls:
 13247 ;;		Nothing
 13248 ;; This function is called by:
 13249 ;;		_sprintf
 13250 ;; This function uses a non-reentrant model
 13251 ;;
 13252                           
 13253                           	psect	text45
 13254  00255E                     __ptext45:
 13255                           	opt stack 0
 13256  00255E                     __div_to_l_:
 13257                           	opt stack 25
 13258                           
 13259                           ;incstack = 0
 13260  00255E  341A               	rlcf	__div_to_l_@f1+2,w,c
 13261  002560  341B               	rlcf	__div_to_l_@f1+3,w,c
 13262  002562  6E23               	movwf	__div_to_l_@exp1,c
 13263  002564  5023               	movf	__div_to_l_@exp1,w,c
 13264  002566  A4D8               	btfss	status,2,c
 13265  002568  D009               	goto	l1918
 13266  00256A  0E00               	movlw	0
 13267  00256C  6E18               	movwf	?__div_to_l_,c
 13268  00256E  0E00               	movlw	0
 13269  002570  6E19               	movwf	?__div_to_l_+1,c
 13270  002572  0E00               	movlw	0
 13271  002574  6E1A               	movwf	?__div_to_l_+2,c
 13272  002576  0E00               	movlw	0
 13273  002578  6E1B               	movwf	?__div_to_l_+3,c
 13274  00257A  0012               	return	
 13275  00257C                     l1918:
 13276  00257C  341D               	rlcf	__div_to_l_@f2+2,w,c
 13277  00257E  341E               	rlcf	__div_to_l_@f2+3,w,c
 13278  002580  6E22               	movwf	__div_to_l_@cntr,c
 13279  002582  5022               	movf	__div_to_l_@cntr,w,c
 13280  002584  A4D8               	btfss	status,2,c
 13281  002586  D009               	goto	l1920
 13282  002588  0E00               	movlw	0
 13283  00258A  6E18               	movwf	?__div_to_l_,c
 13284  00258C  0E00               	movlw	0
 13285  00258E  6E19               	movwf	?__div_to_l_+1,c
 13286  002590  0E00               	movlw	0
 13287  002592  6E1A               	movwf	?__div_to_l_+2,c
 13288  002594  0E00               	movlw	0
 13289  002596  6E1B               	movwf	?__div_to_l_+3,c
 13290  002598  0012               	return	
 13291  00259A                     l1920:
 13292  00259A  8E1A               	bsf	__div_to_l_@f1+2,7,c
 13293  00259C  0EFF               	movlw	255
 13294  00259E  1618               	andwf	__div_to_l_@f1,f,c
 13295  0025A0  0EFF               	movlw	255
 13296  0025A2  1619               	andwf	__div_to_l_@f1+1,f,c
 13297  0025A4  0EFF               	movlw	255
 13298  0025A6  161A               	andwf	__div_to_l_@f1+2,f,c
 13299  0025A8  0E00               	movlw	0
 13300  0025AA  161B               	andwf	__div_to_l_@f1+3,f,c
 13301  0025AC  8E1D               	bsf	__div_to_l_@f2+2,7,c
 13302  0025AE  0EFF               	movlw	255
 13303  0025B0  161B               	andwf	__div_to_l_@f2,f,c
 13304  0025B2  0EFF               	movlw	255
 13305  0025B4  161C               	andwf	__div_to_l_@f2+1,f,c
 13306  0025B6  0EFF               	movlw	255
 13307  0025B8  161D               	andwf	__div_to_l_@f2+2,f,c
 13308  0025BA  0E00               	movlw	0
 13309  0025BC  161E               	andwf	__div_to_l_@f2+3,f,c
 13310  0025BE  0E00               	movlw	0
 13311  0025C0  6E1E               	movwf	__div_to_l_@quot,c
 13312  0025C2  0E00               	movlw	0
 13313  0025C4  6E1F               	movwf	__div_to_l_@quot+1,c
 13314  0025C6  0E00               	movlw	0
 13315  0025C8  6E20               	movwf	__div_to_l_@quot+2,c
 13316  0025CA  0E00               	movlw	0
 13317  0025CC  6E21               	movwf	__div_to_l_@quot+3,c
 13318  0025CE  0E7F               	movlw	127
 13319  0025D0  5E23               	subwf	__div_to_l_@exp1,f,c
 13320  0025D2  5022               	movf	__div_to_l_@cntr,w,c
 13321  0025D4  0FA0               	addlw	160
 13322  0025D6  5E23               	subwf	__div_to_l_@exp1,f,c
 13323  0025D8  0E20               	movlw	32
 13324  0025DA  6E22               	movwf	__div_to_l_@cntr,c
 13325  0025DC  90D8               	bcf	status,0,c
 13326  0025DE  361E               	rlcf	__div_to_l_@quot,f,c
 13327  0025E0  361F               	rlcf	__div_to_l_@quot+1,f,c
 13328  0025E2  3620               	rlcf	__div_to_l_@quot+2,f,c
 13329  0025E4  3621               	rlcf	__div_to_l_@quot+3,f,c
 13330  0025E6  501B               	movf	__div_to_l_@f2,w,c
 13331  0025E8  5C18               	subwf	__div_to_l_@f1,w,c
 13332  0025EA  501C               	movf	__div_to_l_@f2+1,w,c
 13333  0025EC  5819               	subwfb	__div_to_l_@f1+1,w,c
 13334  0025EE  501D               	movf	__div_to_l_@f2+2,w,c
 13335  0025F0  581A               	subwfb	__div_to_l_@f1+2,w,c
 13336  0025F2  501E               	movf	__div_to_l_@f2+3,w,c
 13337  0025F4  581B               	subwfb	__div_to_l_@f1+3,w,c
 13338  0025F6  A0D8               	btfss	status,0,c
 13339  0025F8  D009               	goto	l1922
 13340  0025FA  501B               	movf	__div_to_l_@f2,w,c
 13341  0025FC  5E18               	subwf	__div_to_l_@f1,f,c
 13342  0025FE  501C               	movf	__div_to_l_@f2+1,w,c
 13343  002600  5A19               	subwfb	__div_to_l_@f1+1,f,c
 13344  002602  501D               	movf	__div_to_l_@f2+2,w,c
 13345  002604  5A1A               	subwfb	__div_to_l_@f1+2,f,c
 13346  002606  501E               	movf	__div_to_l_@f2+3,w,c
 13347  002608  5A1B               	subwfb	__div_to_l_@f1+3,f,c
 13348  00260A  801E               	bsf	__div_to_l_@quot,0,c
 13349  00260C                     l1922:
 13350  00260C  90D8               	bcf	status,0,c
 13351  00260E  3618               	rlcf	__div_to_l_@f1,f,c
 13352  002610  3619               	rlcf	__div_to_l_@f1+1,f,c
 13353  002612  361A               	rlcf	__div_to_l_@f1+2,f,c
 13354  002614  361B               	rlcf	__div_to_l_@f1+3,f,c
 13355  002616  2E22               	decfsz	__div_to_l_@cntr,f,c
 13356  002618  D7E1               	goto	l1921
 13357  00261A  AE23               	btfss	__div_to_l_@exp1,7,c
 13358  00261C  D016               	goto	l1924
 13359  00261E  5023               	movf	__div_to_l_@exp1,w,c
 13360  002620  0A80               	xorlw	128
 13361  002622  0F9F               	addlw	159
 13362  002624  B0D8               	btfsc	status,0,c
 13363  002626  D009               	goto	l1925
 13364  002628  0E00               	movlw	0
 13365  00262A  6E18               	movwf	?__div_to_l_,c
 13366  00262C  0E00               	movlw	0
 13367  00262E  6E19               	movwf	?__div_to_l_+1,c
 13368  002630  0E00               	movlw	0
 13369  002632  6E1A               	movwf	?__div_to_l_+2,c
 13370  002634  0E00               	movlw	0
 13371  002636  6E1B               	movwf	?__div_to_l_+3,c
 13372  002638  0012               	return	
 13373  00263A                     l1925:
 13374  00263A  90D8               	bcf	status,0,c
 13375  00263C  3221               	rrcf	__div_to_l_@quot+3,f,c
 13376  00263E  3220               	rrcf	__div_to_l_@quot+2,f,c
 13377  002640  321F               	rrcf	__div_to_l_@quot+1,f,c
 13378  002642  321E               	rrcf	__div_to_l_@quot,f,c
 13379  002644  3E23               	incfsz	__div_to_l_@exp1,f,c
 13380  002646  D7F9               	goto	l1925
 13381  002648  D015               	goto	u8210
 13382  00264A                     l1924:
 13383  00264A  0E1F               	movlw	31
 13384  00264C  6423               	cpfsgt	__div_to_l_@exp1,c
 13385  00264E  D00F               	goto	l1930
 13386  002650  0E00               	movlw	0
 13387  002652  6E18               	movwf	?__div_to_l_,c
 13388  002654  0E00               	movlw	0
 13389  002656  6E19               	movwf	?__div_to_l_+1,c
 13390  002658  0E00               	movlw	0
 13391  00265A  6E1A               	movwf	?__div_to_l_+2,c
 13392  00265C  0E00               	movlw	0
 13393  00265E  6E1B               	movwf	?__div_to_l_+3,c
 13394  002660  0012               	return	
 13395  002662  90D8               	bcf	status,0,c
 13396  002664  361E               	rlcf	__div_to_l_@quot,f,c
 13397  002666  361F               	rlcf	__div_to_l_@quot+1,f,c
 13398  002668  3620               	rlcf	__div_to_l_@quot+2,f,c
 13399  00266A  3621               	rlcf	__div_to_l_@quot+3,f,c
 13400  00266C  0623               	decf	__div_to_l_@exp1,f,c
 13401  00266E                     l1930:
 13402  00266E  5023               	movf	__div_to_l_@exp1,w,c
 13403  002670  A4D8               	btfss	status,2,c
 13404  002672  D7F7               	goto	l1931
 13405  002674                     u8210:
 13406  002674  C01E  F018         	movff	__div_to_l_@quot,?__div_to_l_
 13407  002678  C01F  F019         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 13408  00267C  C020  F01A         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 13409  002680  C021  F01B         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 13410  002684  0012               	return		;funcret
 13411  002686                     __end_of__div_to_l_:
 13412                           	opt stack 0
 13413                           tosu	equ	0xFFF
 13414                           tosh	equ	0xFFE
 13415                           tosl	equ	0xFFD
 13416                           pclath	equ	0xFFA
 13417                           tblptru	equ	0xFF8
 13418                           tblptrh	equ	0xFF7
 13419                           tblptrl	equ	0xFF6
 13420                           tablat	equ	0xFF5
 13421                           prodh	equ	0xFF4
 13422                           prodl	equ	0xFF3
 13423                           intcon	equ	0xFF2
 13424                           intcon2	equ	0xFF1
 13425                           postinc0	equ	0xFEE
 13426                           wreg	equ	0xFE8
 13427                           indf1	equ	0xFE7
 13428                           postdec1	equ	0xFE5
 13429                           fsr1h	equ	0xFE2
 13430                           fsr1l	equ	0xFE1
 13431                           indf2	equ	0xFDF
 13432                           postinc2	equ	0xFDE
 13433                           postdec2	equ	0xFDD
 13434                           fsr2h	equ	0xFDA
 13435                           fsr2l	equ	0xFD9
 13436                           status	equ	0xFD8
 13437                           
 13438 ;; *************** function ___llmod *****************
 13439 ;; Defined at:
 13440 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 13441 ;; Parameters:    Size  Location     Type
 13442 ;;  dividend        4   83[BANK0 ] unsigned long 
 13443 ;;  divisor         4   87[BANK0 ] unsigned long 
 13444 ;; Auto vars:     Size  Location     Type
 13445 ;;  counter         1   91[BANK0 ] unsigned char 
 13446 ;; Return value:  Size  Location     Type
 13447 ;;                  4   83[BANK0 ] unsigned long 
 13448 ;; Registers used:
 13449 ;;		wreg, status,2, status,0
 13450 ;; Tracked objects:
 13451 ;;		On entry : 0/0
 13452 ;;		On exit  : 0/0
 13453 ;;		Unchanged: 0/0
 13454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13455 ;;      Params:         0       8       0       0       0       0       0
 13456 ;;      Locals:         0       1       0       0       0       0       0
 13457 ;;      Temps:          0       0       0       0       0       0       0
 13458 ;;      Totals:         0       9       0       0       0       0       0
 13459 ;;Total ram usage:        9 bytes
 13460 ;; Hardware stack levels used:    1
 13461 ;; Hardware stack levels required when called:    3
 13462 ;; This function calls:
 13463 ;;		Nothing
 13464 ;; This function is called by:
 13465 ;;		_GroupRx
 13466 ;;		_GroupTx
 13467 ;;		_SetMcuRunTime
 13468 ;;		_sprintf
 13469 ;;		_DacSetValue
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           	psect	text46
 13474  003A9A                     __ptext46:
 13475                           	opt stack 0
 13476  003A9A                     ___llmod:
 13477                           	opt stack 25
 13478                           
 13479                           ;incstack = 0
 13480  003A9A  0100               	movlb	0	; () banked
 13481  003A9C  51B7               	movf	___llmod@divisor& (0+255),w,b
 13482  003A9E  11B8               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 13483  003AA0  11B9               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 13484  003AA2  11BA               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 13485  003AA4  B4D8               	btfsc	status,2,c
 13486  003AA6  D024               	goto	l2118
 13487                           
 13488                           ; BSR set to: 0
 13489  003AA8  0E01               	movlw	1
 13490  003AAA  6FBB               	movwf	___llmod@counter& (0+255),b
 13491  003AAC  D006               	goto	l2113
 13492  003AAE                     
 13493                           ; BSR set to: 0
 13494                           
 13495                           ; BSR set to: 0
 13496  003AAE  90D8               	bcf	status,0,c
 13497  003AB0  37B7               	rlcf	___llmod@divisor& (0+255),f,b
 13498  003AB2  37B8               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 13499  003AB4  37B9               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 13500  003AB6  37BA               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 13501  003AB8  2BBB               	incf	___llmod@counter& (0+255),f,b
 13502  003ABA                     l2113:
 13503                           
 13504                           ; BSR set to: 0
 13505                           
 13506                           ; BSR set to: 0
 13507  003ABA  AFBA               	btfss	(___llmod@divisor+3)& (0+255),7,b
 13508  003ABC  D7F8               	goto	l2114
 13509  003ABE                     u8260:
 13510                           
 13511                           ; BSR set to: 0
 13512                           
 13513                           ; BSR set to: 0
 13514                           
 13515                           ; BSR set to: 0
 13516  003ABE  51B7               	movf	___llmod@divisor& (0+255),w,b
 13517  003AC0  5DB3               	subwf	___llmod@dividend& (0+255),w,b
 13518  003AC2  51B8               	movf	(___llmod@divisor+1)& (0+255),w,b
 13519  003AC4  59B4               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 13520  003AC6  51B9               	movf	(___llmod@divisor+2)& (0+255),w,b
 13521  003AC8  59B5               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 13522  003ACA  51BA               	movf	(___llmod@divisor+3)& (0+255),w,b
 13523  003ACC  59B6               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 13524  003ACE  A0D8               	btfss	status,0,c
 13525  003AD0  D008               	goto	l2117
 13526                           
 13527                           ; BSR set to: 0
 13528  003AD2  51B7               	movf	___llmod@divisor& (0+255),w,b
 13529  003AD4  5FB3               	subwf	___llmod@dividend& (0+255),f,b
 13530  003AD6  51B8               	movf	(___llmod@divisor+1)& (0+255),w,b
 13531  003AD8  5BB4               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 13532  003ADA  51B9               	movf	(___llmod@divisor+2)& (0+255),w,b
 13533  003ADC  5BB5               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 13534  003ADE  51BA               	movf	(___llmod@divisor+3)& (0+255),w,b
 13535  003AE0  5BB6               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 13536  003AE2                     l2117:
 13537                           
 13538                           ; BSR set to: 0
 13539                           
 13540                           ; BSR set to: 0
 13541  003AE2  90D8               	bcf	status,0,c
 13542  003AE4  33BA               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 13543  003AE6  33B9               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 13544  003AE8  33B8               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 13545  003AEA  33B7               	rrcf	___llmod@divisor& (0+255),f,b
 13546                           
 13547                           ; BSR set to: 0
 13548  003AEC  2FBB               	decfsz	___llmod@counter& (0+255),f,b
 13549  003AEE  D7E7               	goto	u8260
 13550  003AF0                     l2118:
 13551                           
 13552                           ; BSR set to: 0
 13553                           
 13554                           ; BSR set to: 0
 13555  003AF0  C0B3  F0B3         	movff	___llmod@dividend,?___llmod
 13556  003AF4  C0B4  F0B4         	movff	___llmod@dividend+1,?___llmod+1
 13557  003AF8  C0B5  F0B5         	movff	___llmod@dividend+2,?___llmod+2
 13558  003AFC  C0B6  F0B6         	movff	___llmod@dividend+3,?___llmod+3
 13559                           
 13560                           ; BSR set to: 0
 13561  003B00  0012               	return		;funcret
 13562  003B02                     __end_of___llmod:
 13563                           	opt stack 0
 13564                           tosu	equ	0xFFF
 13565                           tosh	equ	0xFFE
 13566                           tosl	equ	0xFFD
 13567                           pclath	equ	0xFFA
 13568                           tblptru	equ	0xFF8
 13569                           tblptrh	equ	0xFF7
 13570                           tblptrl	equ	0xFF6
 13571                           tablat	equ	0xFF5
 13572                           prodh	equ	0xFF4
 13573                           prodl	equ	0xFF3
 13574                           intcon	equ	0xFF2
 13575                           intcon2	equ	0xFF1
 13576                           postinc0	equ	0xFEE
 13577                           wreg	equ	0xFE8
 13578                           indf1	equ	0xFE7
 13579                           postdec1	equ	0xFE5
 13580                           fsr1h	equ	0xFE2
 13581                           fsr1l	equ	0xFE1
 13582                           indf2	equ	0xFDF
 13583                           postinc2	equ	0xFDE
 13584                           postdec2	equ	0xFDD
 13585                           fsr2h	equ	0xFDA
 13586                           fsr2l	equ	0xFD9
 13587                           status	equ	0xFD8
 13588                           
 13589 ;; *************** function ___lldiv *****************
 13590 ;; Defined at:
 13591 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 13592 ;; Parameters:    Size  Location     Type
 13593 ;;  dividend        4   23[COMRAM] unsigned long 
 13594 ;;  divisor         4   27[COMRAM] unsigned long 
 13595 ;; Auto vars:     Size  Location     Type
 13596 ;;  quotient        4   31[COMRAM] unsigned long 
 13597 ;;  counter         1   35[COMRAM] unsigned char 
 13598 ;; Return value:  Size  Location     Type
 13599 ;;                  4   23[COMRAM] unsigned long 
 13600 ;; Registers used:
 13601 ;;		wreg, status,2, status,0
 13602 ;; Tracked objects:
 13603 ;;		On entry : 0/0
 13604 ;;		On exit  : 0/0
 13605 ;;		Unchanged: 0/0
 13606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13607 ;;      Params:         8       0       0       0       0       0       0
 13608 ;;      Locals:         5       0       0       0       0       0       0
 13609 ;;      Temps:          0       0       0       0       0       0       0
 13610 ;;      Totals:        13       0       0       0       0       0       0
 13611 ;;Total ram usage:       13 bytes
 13612 ;; Hardware stack levels used:    1
 13613 ;; Hardware stack levels required when called:    3
 13614 ;; This function calls:
 13615 ;;		Nothing
 13616 ;; This function is called by:
 13617 ;;		_set_system_type
 13618 ;;		_sprintf
 13619 ;; This function uses a non-reentrant model
 13620 ;;
 13621                           
 13622                           	psect	text47
 13623  00374E                     __ptext47:
 13624                           	opt stack 0
 13625  00374E                     ___lldiv:
 13626                           	opt stack 25
 13627                           
 13628                           ; BSR set to: 0
 13629                           ;incstack = 0
 13630  00374E  0E00               	movlw	0
 13631  003750  6E20               	movwf	___lldiv@quotient,c
 13632  003752  0E00               	movlw	0
 13633  003754  6E21               	movwf	___lldiv@quotient+1,c
 13634  003756  0E00               	movlw	0
 13635  003758  6E22               	movwf	___lldiv@quotient+2,c
 13636  00375A  0E00               	movlw	0
 13637  00375C  6E23               	movwf	___lldiv@quotient+3,c
 13638  00375E  501C               	movf	___lldiv@divisor,w,c
 13639  003760  101D               	iorwf	___lldiv@divisor+1,w,c
 13640  003762  101E               	iorwf	___lldiv@divisor+2,w,c
 13641  003764  101F               	iorwf	___lldiv@divisor+3,w,c
 13642  003766  B4D8               	btfsc	status,2,c
 13643  003768  D02A               	goto	l2108
 13644  00376A  0E01               	movlw	1
 13645  00376C  6E24               	movwf	___lldiv@counter,c
 13646  00376E  D006               	goto	l2103
 13647  003770  90D8               	bcf	status,0,c
 13648  003772  361C               	rlcf	___lldiv@divisor,f,c
 13649  003774  361D               	rlcf	___lldiv@divisor+1,f,c
 13650  003776  361E               	rlcf	___lldiv@divisor+2,f,c
 13651  003778  361F               	rlcf	___lldiv@divisor+3,f,c
 13652  00377A  2A24               	incf	___lldiv@counter,f,c
 13653  00377C                     l2103:
 13654  00377C  AE1F               	btfss	___lldiv@divisor+3,7,c
 13655  00377E  D7F8               	goto	l2104
 13656  003780                     u8230:
 13657  003780  90D8               	bcf	status,0,c
 13658  003782  3620               	rlcf	___lldiv@quotient,f,c
 13659  003784  3621               	rlcf	___lldiv@quotient+1,f,c
 13660  003786  3622               	rlcf	___lldiv@quotient+2,f,c
 13661  003788  3623               	rlcf	___lldiv@quotient+3,f,c
 13662  00378A  501C               	movf	___lldiv@divisor,w,c
 13663  00378C  5C18               	subwf	___lldiv@dividend,w,c
 13664  00378E  501D               	movf	___lldiv@divisor+1,w,c
 13665  003790  5819               	subwfb	___lldiv@dividend+1,w,c
 13666  003792  501E               	movf	___lldiv@divisor+2,w,c
 13667  003794  581A               	subwfb	___lldiv@dividend+2,w,c
 13668  003796  501F               	movf	___lldiv@divisor+3,w,c
 13669  003798  581B               	subwfb	___lldiv@dividend+3,w,c
 13670  00379A  A0D8               	btfss	status,0,c
 13671  00379C  D009               	goto	l2107
 13672  00379E  501C               	movf	___lldiv@divisor,w,c
 13673  0037A0  5E18               	subwf	___lldiv@dividend,f,c
 13674  0037A2  501D               	movf	___lldiv@divisor+1,w,c
 13675  0037A4  5A19               	subwfb	___lldiv@dividend+1,f,c
 13676  0037A6  501E               	movf	___lldiv@divisor+2,w,c
 13677  0037A8  5A1A               	subwfb	___lldiv@dividend+2,f,c
 13678  0037AA  501F               	movf	___lldiv@divisor+3,w,c
 13679  0037AC  5A1B               	subwfb	___lldiv@dividend+3,f,c
 13680  0037AE  8020               	bsf	___lldiv@quotient,0,c
 13681  0037B0                     l2107:
 13682  0037B0  90D8               	bcf	status,0,c
 13683  0037B2  321F               	rrcf	___lldiv@divisor+3,f,c
 13684  0037B4  321E               	rrcf	___lldiv@divisor+2,f,c
 13685  0037B6  321D               	rrcf	___lldiv@divisor+1,f,c
 13686  0037B8  321C               	rrcf	___lldiv@divisor,f,c
 13687  0037BA  2E24               	decfsz	___lldiv@counter,f,c
 13688  0037BC  D7E1               	goto	u8230
 13689  0037BE                     l2108:
 13690  0037BE  C020  F018         	movff	___lldiv@quotient,?___lldiv
 13691  0037C2  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
 13692  0037C6  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
 13693  0037CA  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
 13694  0037CE  0012               	return		;funcret
 13695  0037D0                     __end_of___lldiv:
 13696                           	opt stack 0
 13697                           tosu	equ	0xFFF
 13698                           tosh	equ	0xFFE
 13699                           tosl	equ	0xFFD
 13700                           pclath	equ	0xFFA
 13701                           tblptru	equ	0xFF8
 13702                           tblptrh	equ	0xFF7
 13703                           tblptrl	equ	0xFF6
 13704                           tablat	equ	0xFF5
 13705                           prodh	equ	0xFF4
 13706                           prodl	equ	0xFF3
 13707                           intcon	equ	0xFF2
 13708                           intcon2	equ	0xFF1
 13709                           postinc0	equ	0xFEE
 13710                           wreg	equ	0xFE8
 13711                           indf1	equ	0xFE7
 13712                           postdec1	equ	0xFE5
 13713                           fsr1h	equ	0xFE2
 13714                           fsr1l	equ	0xFE1
 13715                           indf2	equ	0xFDF
 13716                           postinc2	equ	0xFDE
 13717                           postdec2	equ	0xFDD
 13718                           fsr2h	equ	0xFDA
 13719                           fsr2l	equ	0xFD9
 13720                           status	equ	0xFD8
 13721                           
 13722 ;; *************** function _UART_Write_Text *****************
 13723 ;; Defined at:
 13724 ;;		line 225 in file "EusartApp.c"
 13725 ;; Parameters:    Size  Location     Type
 13726 ;;  text            2   24[COMRAM] PTR unsigned char 
 13727 ;;		 -> PrintTxStatus@dest(80), PrintRxStatus@dest(80), PrintSystemStatus@dest(80), PrintHelpScreen@dest(50), 
 13728 ;;		 -> SendUartSystemInitMessage@dest(50), STR_17(10), STR_16(10), STR_15(10), 
 13729 ;;		 -> STR_14(10), STR_13(10), STR_12(10), STR_11(10), 
 13730 ;;		 -> readUartByte@dest(50), STR_9(9), SampleSingleChannel@dest(50), STR_7(10), 
 13731 ;;		 -> STR_6(34), STR_5(32), STR_4(10), STR_3(29), 
 13732 ;;		 -> STR_2(33), STR_1(10), 
 13733 ;; Auto vars:     Size  Location     Type
 13734 ;;  i               2   28[COMRAM] int 
 13735 ;; Return value:  Size  Location     Type
 13736 ;;                  1    wreg      void 
 13737 ;; Registers used:
 13738 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13739 ;; Tracked objects:
 13740 ;;		On entry : 0/0
 13741 ;;		On exit  : 0/0
 13742 ;;		Unchanged: 0/0
 13743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13744 ;;      Params:         2       0       0       0       0       0       0
 13745 ;;      Locals:         2       0       0       0       0       0       0
 13746 ;;      Temps:          2       0       0       0       0       0       0
 13747 ;;      Totals:         6       0       0       0       0       0       0
 13748 ;;Total ram usage:        6 bytes
 13749 ;; Hardware stack levels used:    1
 13750 ;; Hardware stack levels required when called:    4
 13751 ;; This function calls:
 13752 ;;		_EUSART1_Write
 13753 ;; This function is called by:
 13754 ;;		_AdcSingleSample
 13755 ;;		_SampleSingleChannel
 13756 ;;		_readUartByte
 13757 ;;		_set_system_type
 13758 ;;		_SetUartRefrashRate
 13759 ;;		_SetUartMode
 13760 ;;		_SendUartSystemInitMessage
 13761 ;;		_PrintHelpScreen
 13762 ;;		_PrintSystemStatus
 13763 ;;		_PrintRxStatus
 13764 ;;		_PrintTxStatus
 13765 ;; This function uses a non-reentrant model
 13766 ;;
 13767                           
 13768                           	psect	text48
 13769  0039B8                     __ptext48:
 13770                           	opt stack 0
 13771  0039B8                     _UART_Write_Text:
 13772                           	opt stack 25
 13773                           
 13774                           ;EusartApp.c: 227: for(int i =0;text[i]!='\0';i++)
 13775                           
 13776                           ;incstack = 0
 13777  0039B8  0E00               	movlw	0
 13778  0039BA  6E1E               	movwf	UART_Write_Text@i+1,c
 13779  0039BC  0E00               	movlw	0
 13780  0039BE  6E1D               	movwf	UART_Write_Text@i,c
 13781  0039C0  D01A               	goto	l333
 13782  0039C2                     
 13783                           ;EusartApp.c: 228: {
 13784                           ;EusartApp.c: 229: EUSART1_Write(text[i]);
 13785  0039C2  501D               	movf	UART_Write_Text@i,w,c
 13786  0039C4  2419               	addwf	UART_Write_Text@text,w,c
 13787  0039C6  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 13788  0039C8  501E               	movf	UART_Write_Text@i+1,w,c
 13789  0039CA  201A               	addwfc	UART_Write_Text@text+1,w,c
 13790  0039CC  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 13791  0039CE  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 13792  0039D2  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 13793  0039D6  6AF8               	clrf	tblptru,c
 13794  0039D8  0E05               	movlw	(high __ramtop+-1)
 13795  0039DA  64F7               	cpfsgt	tblptrh,c
 13796  0039DC  D003               	bra	u8397
 13797  0039DE  0008               	tblrd		*
 13798  0039E0  50F5               	movf	tablat,w,c
 13799  0039E2  D005               	bra	u8390
 13800  0039E4                     u8397:
 13801  0039E4  CFF6 FFE9          	movff	tblptrl,fsr0l
 13802  0039E8  CFF7 FFEA          	movff	tblptrh,fsr0h
 13803  0039EC  50EF               	movf	indf0,w,c
 13804  0039EE                     u8390:
 13805  0039EE  EC00  F021         	call	_EUSART1_Write
 13806  0039F2  4A1D               	infsnz	UART_Write_Text@i,f,c
 13807  0039F4  2A1E               	incf	UART_Write_Text@i+1,f,c
 13808  0039F6                     l333:
 13809  0039F6  501D               	movf	UART_Write_Text@i,w,c
 13810  0039F8  2419               	addwf	UART_Write_Text@text,w,c
 13811  0039FA  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 13812  0039FC  501E               	movf	UART_Write_Text@i+1,w,c
 13813  0039FE  201A               	addwfc	UART_Write_Text@text+1,w,c
 13814  003A00  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 13815  003A02  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 13816  003A06  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 13817  003A0A  6AF8               	clrf	tblptru,c
 13818  003A0C  0E05               	movlw	(high __ramtop+-1)
 13819  003A0E  64F7               	cpfsgt	tblptrh,c
 13820  003A10  D003               	bra	u8407
 13821  003A12  0008               	tblrd		*
 13822  003A14  50F5               	movf	tablat,w,c
 13823  003A16  D005               	bra	u8400
 13824  003A18                     u8407:
 13825  003A18  CFF6 FFE9          	movff	tblptrl,fsr0l
 13826  003A1C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13827  003A20  50EF               	movf	indf0,w,c
 13828  003A22                     u8400:
 13829  003A22  0900               	iorlw	0
 13830  003A24  B4D8               	btfsc	status,2,c
 13831  003A26  0012               	return	
 13832  003A28  D7CC               	goto	l334
 13833  003A2A                     __end_of_UART_Write_Text:
 13834                           	opt stack 0
 13835                           tosu	equ	0xFFF
 13836                           tosh	equ	0xFFE
 13837                           tosl	equ	0xFFD
 13838                           pclath	equ	0xFFA
 13839                           tblptru	equ	0xFF8
 13840                           tblptrh	equ	0xFF7
 13841                           tblptrl	equ	0xFF6
 13842                           tablat	equ	0xFF5
 13843                           prodh	equ	0xFF4
 13844                           prodl	equ	0xFF3
 13845                           intcon	equ	0xFF2
 13846                           intcon2	equ	0xFF1
 13847                           indf0	equ	0xFEF
 13848                           postinc0	equ	0xFEE
 13849                           fsr0h	equ	0xFEA
 13850                           fsr0l	equ	0xFE9
 13851                           wreg	equ	0xFE8
 13852                           indf1	equ	0xFE7
 13853                           postdec1	equ	0xFE5
 13854                           fsr1h	equ	0xFE2
 13855                           fsr1l	equ	0xFE1
 13856                           indf2	equ	0xFDF
 13857                           postinc2	equ	0xFDE
 13858                           postdec2	equ	0xFDD
 13859                           fsr2h	equ	0xFDA
 13860                           fsr2l	equ	0xFD9
 13861                           status	equ	0xFD8
 13862                           
 13863 ;; *************** function _EUSART1_Write *****************
 13864 ;; Defined at:
 13865 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 13866 ;; Parameters:    Size  Location     Type
 13867 ;;  txData          1    wreg     unsigned char 
 13868 ;; Auto vars:     Size  Location     Type
 13869 ;;  txData          1   23[COMRAM] unsigned char 
 13870 ;; Return value:  Size  Location     Type
 13871 ;;                  1    wreg      void 
 13872 ;; Registers used:
 13873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13874 ;; Tracked objects:
 13875 ;;		On entry : 0/0
 13876 ;;		On exit  : 0/0
 13877 ;;		Unchanged: 0/0
 13878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13879 ;;      Params:         0       0       0       0       0       0       0
 13880 ;;      Locals:         1       0       0       0       0       0       0
 13881 ;;      Temps:          0       0       0       0       0       0       0
 13882 ;;      Totals:         1       0       0       0       0       0       0
 13883 ;;Total ram usage:        1 bytes
 13884 ;; Hardware stack levels used:    1
 13885 ;; Hardware stack levels required when called:    3
 13886 ;; This function calls:
 13887 ;;		Nothing
 13888 ;; This function is called by:
 13889 ;;		_UART_Write_Text
 13890 ;;		_WriteUartMessage
 13891 ;; This function uses a non-reentrant model
 13892 ;;
 13893                           
 13894                           	psect	text49
 13895  004200                     __ptext49:
 13896                           	opt stack 0
 13897  004200                     _EUSART1_Write:
 13898                           	opt stack 25
 13899                           
 13900                           ;incstack = 0
 13901                           ;EUSART1_Write@txData stored from wreg
 13902  004200  6E18               	movwf	EUSART1_Write@txData,c
 13903  004202                     
 13904                           ;eusart1.c: 160: {
 13905                           
 13906                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 13907  004202  0101               	movlb	1	; () banked
 13908  004204  51EA               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 13909  004206  B4D8               	btfsc	status,2,c
 13910  004208  D7FC               	goto	l8171
 13911                           
 13912                           ; BSR set to: 1
 13913                           ;eusart1.c: 161: }
 13914                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 13915  00420A  B89D               	btfsc	3997,4,c	;volatile
 13916  00420C  D003               	goto	l833
 13917                           
 13918                           ; BSR set to: 1
 13919                           ;eusart1.c: 164: {
 13920                           ;eusart1.c: 165: TXREG1 = txData;
 13921  00420E  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 13922                           
 13923                           ;eusart1.c: 166: }
 13924  004212  D012               	goto	l834
 13925  004214                     l833:
 13926                           
 13927                           ; BSR set to: 1
 13928                           ;eusart1.c: 167: else
 13929                           ;eusart1.c: 168: {
 13930                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 13931  004214  989D               	bcf	3997,4,c	;volatile
 13932                           
 13933                           ; BSR set to: 1
 13934                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 13935  004216  5044               	movf	_eusart1TxHead,w,c	;volatile
 13936  004218  0D01               	mullw	1
 13937  00421A  0E00               	movlw	low _eusart1TxBuffer
 13938  00421C  24F3               	addwf	prodl,w,c
 13939  00421E  6ED9               	movwf	fsr2l,c
 13940  004220  0E02               	movlw	high _eusart1TxBuffer
 13941  004222  20F4               	addwfc	prodh,w,c
 13942  004224  6EDA               	movwf	fsr2h,c
 13943  004226  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 13944                           
 13945                           ; BSR set to: 1
 13946  00422A  2A44               	incf	_eusart1TxHead,f,c	;volatile
 13947                           
 13948                           ; BSR set to: 1
 13949                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 13950  00422C  0E45               	movlw	69
 13951  00422E  6444               	cpfsgt	_eusart1TxHead,c	;volatile
 13952  004230  D002               	goto	l835
 13953                           
 13954                           ; BSR set to: 1
 13955                           ;eusart1.c: 172: {
 13956                           ;eusart1.c: 173: eusart1TxHead = 0;
 13957  004232  0E00               	movlw	0
 13958  004234  6E44               	movwf	_eusart1TxHead,c	;volatile
 13959  004236                     l835:
 13960                           
 13961                           ; BSR set to: 1
 13962                           ;eusart1.c: 174: }
 13963                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 13964                           
 13965                           ; BSR set to: 1
 13966  004236  07EA               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 13967  004238                     l834:
 13968                           
 13969                           ; BSR set to: 1
 13970                           ;eusart1.c: 176: }
 13971                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 13972                           
 13973                           ; BSR set to: 1
 13974  004238  889D               	bsf	3997,4,c	;volatile
 13975                           
 13976                           ; BSR set to: 1
 13977  00423A  0012               	return		;funcret
 13978  00423C                     __end_of_EUSART1_Write:
 13979                           	opt stack 0
 13980                           tosu	equ	0xFFF
 13981                           tosh	equ	0xFFE
 13982                           tosl	equ	0xFFD
 13983                           pclath	equ	0xFFA
 13984                           tblptru	equ	0xFF8
 13985                           tblptrh	equ	0xFF7
 13986                           tblptrl	equ	0xFF6
 13987                           tablat	equ	0xFF5
 13988                           prodh	equ	0xFF4
 13989                           prodl	equ	0xFF3
 13990                           intcon	equ	0xFF2
 13991                           intcon2	equ	0xFF1
 13992                           indf0	equ	0xFEF
 13993                           postinc0	equ	0xFEE
 13994                           fsr0h	equ	0xFEA
 13995                           fsr0l	equ	0xFE9
 13996                           wreg	equ	0xFE8
 13997                           indf1	equ	0xFE7
 13998                           postdec1	equ	0xFE5
 13999                           fsr1h	equ	0xFE2
 14000                           fsr1l	equ	0xFE1
 14001                           indf2	equ	0xFDF
 14002                           postinc2	equ	0xFDE
 14003                           postdec2	equ	0xFDD
 14004                           fsr2h	equ	0xFDA
 14005                           fsr2l	equ	0xFD9
 14006                           status	equ	0xFD8
 14007                           
 14008 ;; *************** function _SampleAllChannels *****************
 14009 ;; Defined at:
 14010 ;;		line 122 in file "AdcApp.c"
 14011 ;; Parameters:    Size  Location     Type
 14012 ;;		None
 14013 ;; Auto vars:     Size  Location     Type
 14014 ;;  _adcResult      2   86[BANK0 ] unsigned int 
 14015 ;;  adcRes          2   88[BANK0 ] unsigned int 
 14016 ;;  i               1   90[BANK0 ] unsigned char 
 14017 ;; Return value:  Size  Location     Type
 14018 ;;                  1    wreg      void 
 14019 ;; Registers used:
 14020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14021 ;; Tracked objects:
 14022 ;;		On entry : 0/0
 14023 ;;		On exit  : 0/0
 14024 ;;		Unchanged: 0/0
 14025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14026 ;;      Params:         0       0       0       0       0       0       0
 14027 ;;      Locals:         0       8       0       0       0       0       0
 14028 ;;      Temps:          0       0       0       0       0       0       0
 14029 ;;      Totals:         0       8       0       0       0       0       0
 14030 ;;Total ram usage:        8 bytes
 14031 ;; Hardware stack levels used:    1
 14032 ;; Hardware stack levels required when called:    8
 14033 ;; This function calls:
 14034 ;;		_ADC_GetConversion
 14035 ;;		___ftdiv
 14036 ;;		___ftmul
 14037 ;;		___fttol
 14038 ;;		___lwtoft
 14039 ;;		_pow
 14040 ;; This function is called by:
 14041 ;;		_main
 14042 ;; This function uses a non-reentrant model
 14043 ;;
 14044                           
 14045                           	psect	text50
 14046  00208E                     __ptext50:
 14047                           	opt stack 0
 14048  00208E                     _SampleAllChannels:
 14049                           	opt stack 22
 14050                           
 14051                           ;AdcApp.c: 124: uint16_t adcRes = 0x0;
 14052                           
 14053                           ; BSR set to: 1
 14054                           ;incstack = 0
 14055  00208E  0E00               	movlw	0
 14056  002090  0100               	movlb	0	; () banked
 14057  002092  6FB9               	movwf	(SampleAllChannels@adcRes+1)& (0+255),b
 14058  002094  0E00               	movlw	0
 14059  002096  6FB8               	movwf	SampleAllChannels@adcRes& (0+255),b
 14060                           
 14061                           ;AdcApp.c: 125: uint8_t i;
 14062                           ;AdcApp.c: 126: for (i=1;i<=4;i++)
 14063  002098  0E01               	movlw	1
 14064  00209A  6FBA               	movwf	SampleAllChannels@i& (0+255),b
 14065  00209C                     l9333:
 14066                           
 14067                           ; BSR set to: 0
 14068  00209C  0E04               	movlw	4
 14069  00209E  65BA               	cpfsgt	SampleAllChannels@i& (0+255),b
 14070  0020A0  D001               	goto	l184
 14071  0020A2  0012               	return	
 14072  0020A4                     l184:
 14073                           
 14074                           ; BSR set to: 0
 14075                           ;AdcApp.c: 127: {
 14076                           ;AdcApp.c: 128: adc_result_t _adcResult = ADC_GetConversion(channelArr[i]);
 14077                           
 14078                           ; BSR set to: 0
 14079  0020A4  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 14080  0020A6  0D01               	mullw	1
 14081  0020A8  0E33               	movlw	low _channelArr
 14082  0020AA  24F3               	addwf	prodl,w,c
 14083  0020AC  6EF6               	movwf	tblptrl,c
 14084  0020AE  0E78               	movlw	high _channelArr
 14085  0020B0  20F4               	addwfc	prodh,w,c
 14086  0020B2  6EF7               	movwf	tblptrh,c
 14087  0020B4                     	if	0	;There are less than 3 active tblptr bytes
 14088  0020B4                     	endif
 14089  0020B4  0008               	tblrd		*
 14090  0020B6  50F5               	movf	tablat,w,c
 14091  0020B8  ECF9  F021         	call	_ADC_GetConversion
 14092  0020BC  C018  F0B6         	movff	?_ADC_GetConversion,SampleAllChannels@_adcResult
 14093  0020C0  C019  F0B7         	movff	?_ADC_GetConversion+1,SampleAllChannels@_adcResult+1
 14094                           
 14095                           ;AdcApp.c: 129: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14096  0020C4  0E00               	movlw	0
 14097  0020C6  0100               	movlb	0	; () banked
 14098  0020C8  6FA5               	movwf	pow@y& (0+255),b
 14099  0020CA  0E20               	movlw	32
 14100  0020CC  6FA6               	movwf	(pow@y+1)& (0+255),b
 14101  0020CE  0E41               	movlw	65
 14102  0020D0  6FA7               	movwf	(pow@y+2)& (0+255),b
 14103  0020D2  0E00               	movlw	0
 14104  0020D4  6FA2               	movwf	pow@x& (0+255),b
 14105  0020D6  0E00               	movlw	0
 14106  0020D8  6FA3               	movwf	(pow@x+1)& (0+255),b
 14107  0020DA  0E40               	movlw	64
 14108  0020DC  6FA4               	movwf	(pow@x+2)& (0+255),b
 14109  0020DE  EC13  F00E         	call	_pow	;wreg free
 14110  0020E2  C0A2  F0B3         	movff	?_pow,_SampleAllChannels$3984
 14111  0020E6  C0A3  F0B4         	movff	?_pow+1,_SampleAllChannels$3984+1
 14112  0020EA  C0A4  F0B5         	movff	?_pow+2,_SampleAllChannels$3984+2
 14113                           
 14114                           ;AdcApp.c: 129: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14115  0020EE  0EC0               	movlw	192
 14116  0020F0  0100               	movlb	0	; () banked
 14117  0020F2  6F69               	movwf	___ftmul@f2& (0+255),b
 14118  0020F4  0E50               	movlw	80
 14119  0020F6  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 14120  0020F8  0E45               	movlw	69
 14121  0020FA  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 14122  0020FC  C0B3  F026         	movff	_SampleAllChannels$3984,___ftdiv@f2
 14123  002100  C0B4  F027         	movff	_SampleAllChannels$3984+1,___ftdiv@f2+1
 14124  002104  C0B5  F028         	movff	_SampleAllChannels$3984+2,___ftdiv@f2+2
 14125  002108  C0B6  F020         	movff	SampleAllChannels@_adcResult,___lwtoft@c
 14126  00210C  C0B7  F021         	movff	SampleAllChannels@_adcResult+1,___lwtoft@c+1
 14127  002110  EC61  F022         	call	___lwtoft	;wreg free
 14128  002114  C020  F023         	movff	?___lwtoft,___ftdiv@f1
 14129  002118  C021  F024         	movff	?___lwtoft+1,___ftdiv@f1+1
 14130  00211C  C022  F025         	movff	?___lwtoft+2,___ftdiv@f1+2
 14131  002120  ECE8  F015         	call	___ftdiv	;wreg free
 14132  002124  C023  F066         	movff	?___ftdiv,___ftmul@f1
 14133  002128  C024  F067         	movff	?___ftdiv+1,___ftmul@f1+1
 14134  00212C  C025  F068         	movff	?___ftdiv+2,___ftmul@f1+2
 14135  002130  EC6D  F015         	call	___ftmul	;wreg free
 14136  002134  C066  F079         	movff	?___ftmul,___fttol@f1
 14137  002138  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
 14138  00213C  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
 14139  002140  ECF1  F014         	call	___fttol	;wreg free
 14140  002144  C079  F0B8         	movff	?___fttol,SampleAllChannels@adcRes
 14141  002148  C07A  F0B9         	movff	?___fttol+1,SampleAllChannels@adcRes+1
 14142                           
 14143                           ;AdcApp.c: 130: if(channelArr[i] == 0x6) lastAdcTemp = adcRes;
 14144  00214C  0100               	movlb	0	; () banked
 14145  00214E  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 14146  002150  0D01               	mullw	1
 14147  002152  0E33               	movlw	low _channelArr
 14148  002154  24F3               	addwf	prodl,w,c
 14149  002156  6EF6               	movwf	tblptrl,c
 14150  002158  0E78               	movlw	high _channelArr
 14151  00215A  20F4               	addwfc	prodh,w,c
 14152  00215C  6EF7               	movwf	tblptrh,c
 14153  00215E                     	if	0	;There are less than 3 active tblptr bytes
 14154  00215E                     	endif
 14155  00215E  0008               	tblrd		*
 14156  002160  50F5               	movf	tablat,w,c
 14157  002162  0A06               	xorlw	6
 14158  002164  A4D8               	btfss	status,2,c
 14159  002166  D004               	goto	l186
 14160                           
 14161                           ; BSR set to: 0
 14162  002168  C0B8  F03F         	movff	SampleAllChannels@adcRes,_lastAdcTemp	;volatile
 14163  00216C  C0B9  F040         	movff	SampleAllChannels@adcRes+1,_lastAdcTemp+1	;volatile
 14164  002170                     l186:
 14165                           
 14166                           ; BSR set to: 0
 14167                           ;AdcApp.c: 131: if(channelArr[i] == 0x5) lastAdcFfwrRSSI = adcRes;
 14168                           
 14169                           ; BSR set to: 0
 14170  002170  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 14171  002172  0D01               	mullw	1
 14172  002174  0E33               	movlw	low _channelArr
 14173  002176  24F3               	addwf	prodl,w,c
 14174  002178  6EF6               	movwf	tblptrl,c
 14175  00217A  0E78               	movlw	high _channelArr
 14176  00217C  20F4               	addwfc	prodh,w,c
 14177  00217E  6EF7               	movwf	tblptrh,c
 14178  002180                     	if	0	;There are less than 3 active tblptr bytes
 14179  002180                     	endif
 14180  002180  0008               	tblrd		*
 14181  002182  50F5               	movf	tablat,w,c
 14182  002184  0A05               	xorlw	5
 14183  002186  A4D8               	btfss	status,2,c
 14184  002188  D004               	goto	l187
 14185                           
 14186                           ; BSR set to: 0
 14187  00218A  C0B8  F1CC         	movff	SampleAllChannels@adcRes,_lastAdcFfwrRSSI	;volatile
 14188  00218E  C0B9  F1CD         	movff	SampleAllChannels@adcRes+1,_lastAdcFfwrRSSI+1	;volatile
 14189  002192                     l187:
 14190                           
 14191                           ; BSR set to: 0
 14192                           ;AdcApp.c: 132: if(channelArr[i] == 0x4) lastAdcRREV = adcRes;
 14193                           
 14194                           ; BSR set to: 0
 14195  002192  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 14196  002194  0D01               	mullw	1
 14197  002196  0E33               	movlw	low _channelArr
 14198  002198  24F3               	addwf	prodl,w,c
 14199  00219A  6EF6               	movwf	tblptrl,c
 14200  00219C  0E78               	movlw	high _channelArr
 14201  00219E  20F4               	addwfc	prodh,w,c
 14202  0021A0  6EF7               	movwf	tblptrh,c
 14203  0021A2                     	if	0	;There are less than 3 active tblptr bytes
 14204  0021A2                     	endif
 14205  0021A2  0008               	tblrd		*
 14206  0021A4  50F5               	movf	tablat,w,c
 14207  0021A6  0A04               	xorlw	4
 14208  0021A8  A4D8               	btfss	status,2,c
 14209  0021AA  D004               	goto	l188
 14210                           
 14211                           ; BSR set to: 0
 14212  0021AC  C0B8  F1CA         	movff	SampleAllChannels@adcRes,_lastAdcRREV	;volatile
 14213  0021B0  C0B9  F1CB         	movff	SampleAllChannels@adcRes+1,_lastAdcRREV+1	;volatile
 14214  0021B4                     l188:
 14215                           
 14216                           ; BSR set to: 0
 14217                           ;AdcApp.c: 133: if(channelArr[i] == 0x7) lastAdcVgMon = adcRes;
 14218                           
 14219                           ; BSR set to: 0
 14220  0021B4  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 14221  0021B6  0D01               	mullw	1
 14222  0021B8  0E33               	movlw	low _channelArr
 14223  0021BA  24F3               	addwf	prodl,w,c
 14224  0021BC  6EF6               	movwf	tblptrl,c
 14225  0021BE  0E78               	movlw	high _channelArr
 14226  0021C0  20F4               	addwfc	prodh,w,c
 14227  0021C2  6EF7               	movwf	tblptrh,c
 14228  0021C4                     	if	0	;There are less than 3 active tblptr bytes
 14229  0021C4                     	endif
 14230  0021C4  0008               	tblrd		*
 14231  0021C6  50F5               	movf	tablat,w,c
 14232  0021C8  0A07               	xorlw	7
 14233  0021CA  A4D8               	btfss	status,2,c
 14234  0021CC  D004               	goto	l189
 14235                           
 14236                           ; BSR set to: 0
 14237  0021CE  C0B8  F1C8         	movff	SampleAllChannels@adcRes,_lastAdcVgMon	;volatile
 14238  0021D2  C0B9  F1C9         	movff	SampleAllChannels@adcRes+1,_lastAdcVgMon+1	;volatile
 14239  0021D6                     l189:
 14240                           
 14241                           ; BSR set to: 0
 14242                           
 14243                           ; BSR set to: 0
 14244  0021D6  2BBA               	incf	SampleAllChannels@i& (0+255),f,b
 14245  0021D8  D761               	goto	l9333
 14246  0021DA                     __end_of_SampleAllChannels:
 14247                           	opt stack 0
 14248                           tosu	equ	0xFFF
 14249                           tosh	equ	0xFFE
 14250                           tosl	equ	0xFFD
 14251                           pclath	equ	0xFFA
 14252                           tblptru	equ	0xFF8
 14253                           tblptrh	equ	0xFF7
 14254                           tblptrl	equ	0xFF6
 14255                           tablat	equ	0xFF5
 14256                           prodh	equ	0xFF4
 14257                           prodl	equ	0xFF3
 14258                           intcon	equ	0xFF2
 14259                           intcon2	equ	0xFF1
 14260                           indf0	equ	0xFEF
 14261                           postinc0	equ	0xFEE
 14262                           fsr0h	equ	0xFEA
 14263                           fsr0l	equ	0xFE9
 14264                           wreg	equ	0xFE8
 14265                           indf1	equ	0xFE7
 14266                           postdec1	equ	0xFE5
 14267                           fsr1h	equ	0xFE2
 14268                           fsr1l	equ	0xFE1
 14269                           indf2	equ	0xFDF
 14270                           postinc2	equ	0xFDE
 14271                           postdec2	equ	0xFDD
 14272                           fsr2h	equ	0xFDA
 14273                           fsr2l	equ	0xFD9
 14274                           status	equ	0xFD8
 14275                           
 14276 ;; *************** function ___lwtoft *****************
 14277 ;; Defined at:
 14278 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 14279 ;; Parameters:    Size  Location     Type
 14280 ;;  c               2   31[COMRAM] unsigned int 
 14281 ;; Auto vars:     Size  Location     Type
 14282 ;;		None
 14283 ;; Return value:  Size  Location     Type
 14284 ;;                  3   31[COMRAM] float 
 14285 ;; Registers used:
 14286 ;;		wreg, status,2, status,0, cstack
 14287 ;; Tracked objects:
 14288 ;;		On entry : 0/0
 14289 ;;		On exit  : 0/0
 14290 ;;		Unchanged: 0/0
 14291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14292 ;;      Params:         3       0       0       0       0       0       0
 14293 ;;      Locals:         0       0       0       0       0       0       0
 14294 ;;      Temps:          0       0       0       0       0       0       0
 14295 ;;      Totals:         3       0       0       0       0       0       0
 14296 ;;Total ram usage:        3 bytes
 14297 ;; Hardware stack levels used:    1
 14298 ;; Hardware stack levels required when called:    4
 14299 ;; This function calls:
 14300 ;;		___ftpack
 14301 ;; This function is called by:
 14302 ;;		_SampleSingleChannel
 14303 ;;		_SampleAllChannels
 14304 ;;		_CollectRxStatusParams
 14305 ;;		_CollectTxStatusParams
 14306 ;;		_DacAnalogToDigitalSpi
 14307 ;; This function uses a non-reentrant model
 14308 ;;
 14309                           
 14310                           	psect	text51
 14311  0044C2                     __ptext51:
 14312                           	opt stack 0
 14313  0044C2                     ___lwtoft:
 14314                           	opt stack 23
 14315                           
 14316                           ; BSR set to: 0
 14317                           ;incstack = 0
 14318  0044C2  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 14319  0044C6  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 14320  0044CA  6A1A               	clrf	___ftpack@arg+2,c
 14321  0044CC  0E8E               	movlw	142
 14322  0044CE  6E1B               	movwf	___ftpack@exp,c
 14323  0044D0  0E00               	movlw	0
 14324  0044D2  6E1C               	movwf	___ftpack@sign,c
 14325  0044D4  EC9C  F019         	call	___ftpack	;wreg free
 14326  0044D8  C018  F020         	movff	?___ftpack,?___lwtoft
 14327  0044DC  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 14328  0044E0  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 14329  0044E4  0012               	return	
 14330  0044E6                     __end_of___lwtoft:
 14331                           	opt stack 0
 14332                           tosu	equ	0xFFF
 14333                           tosh	equ	0xFFE
 14334                           tosl	equ	0xFFD
 14335                           pclath	equ	0xFFA
 14336                           tblptru	equ	0xFF8
 14337                           tblptrh	equ	0xFF7
 14338                           tblptrl	equ	0xFF6
 14339                           tablat	equ	0xFF5
 14340                           prodh	equ	0xFF4
 14341                           prodl	equ	0xFF3
 14342                           intcon	equ	0xFF2
 14343                           intcon2	equ	0xFF1
 14344                           indf0	equ	0xFEF
 14345                           postinc0	equ	0xFEE
 14346                           fsr0h	equ	0xFEA
 14347                           fsr0l	equ	0xFE9
 14348                           wreg	equ	0xFE8
 14349                           indf1	equ	0xFE7
 14350                           postdec1	equ	0xFE5
 14351                           fsr1h	equ	0xFE2
 14352                           fsr1l	equ	0xFE1
 14353                           indf2	equ	0xFDF
 14354                           postinc2	equ	0xFDE
 14355                           postdec2	equ	0xFDD
 14356                           fsr2h	equ	0xFDA
 14357                           fsr2l	equ	0xFD9
 14358                           status	equ	0xFD8
 14359                           
 14360 ;; *************** function _ADC_GetConversion *****************
 14361 ;; Defined at:
 14362 ;;		line 106 in file "mcc_generated_files/adc.c"
 14363 ;; Parameters:    Size  Location     Type
 14364 ;;  channel         1    wreg     enum E6975
 14365 ;; Auto vars:     Size  Location     Type
 14366 ;;  channel         1   27[COMRAM] enum E6975
 14367 ;; Return value:  Size  Location     Type
 14368 ;;                  2   23[COMRAM] unsigned int 
 14369 ;; Registers used:
 14370 ;;		wreg, status,2, status,0
 14371 ;; Tracked objects:
 14372 ;;		On entry : 0/0
 14373 ;;		On exit  : 0/0
 14374 ;;		Unchanged: 0/0
 14375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14376 ;;      Params:         2       0       0       0       0       0       0
 14377 ;;      Locals:         1       0       0       0       0       0       0
 14378 ;;      Temps:          2       0       0       0       0       0       0
 14379 ;;      Totals:         5       0       0       0       0       0       0
 14380 ;;Total ram usage:        5 bytes
 14381 ;; Hardware stack levels used:    1
 14382 ;; Hardware stack levels required when called:    3
 14383 ;; This function calls:
 14384 ;;		Nothing
 14385 ;; This function is called by:
 14386 ;;		_SampleSingleChannel
 14387 ;;		_SampleAllChannels
 14388 ;; This function uses a non-reentrant model
 14389 ;;
 14390                           
 14391                           	psect	text52
 14392  0043F2                     __ptext52:
 14393                           	opt stack 0
 14394  0043F2                     _ADC_GetConversion:
 14395                           	opt stack 26
 14396                           
 14397                           ;incstack = 0
 14398                           ;ADC_GetConversion@channel stored from wreg
 14399  0043F2  6E1C               	movwf	ADC_GetConversion@channel,c
 14400                           
 14401                           ;adc.c: 109: ADCON0bits.CHS = channel;
 14402  0043F4  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 14403  0043F8  461A               	rlncf	??_ADC_GetConversion,f,c
 14404  0043FA  461A               	rlncf	??_ADC_GetConversion,f,c
 14405  0043FC  50C2               	movf	4034,w,c	;volatile
 14406  0043FE  181A               	xorwf	??_ADC_GetConversion,w,c
 14407  004400  0B83               	andlw	-125
 14408  004402  181A               	xorwf	??_ADC_GetConversion,w,c
 14409  004404  6EC2               	movwf	4034,c	;volatile
 14410                           
 14411                           ;adc.c: 112: ADCON0bits.ADON = 1;
 14412  004406  80C2               	bsf	4034,0,c	;volatile
 14413                           
 14414                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 14415  004408  82C2               	bsf	4034,1,c	;volatile
 14416  00440A                     
 14417                           ;adc.c: 119: {
 14418  00440A  B2C2               	btfsc	4034,1,c	;volatile
 14419  00440C  D7FE               	goto	l1046
 14420                           
 14421                           ;adc.c: 120: }
 14422                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 14423  00440E  50C4               	movf	4036,w,c	;volatile
 14424  004410  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 14425  004412  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 14426  004414  50C3               	movf	4035,w,c	;volatile
 14427  004416  241A               	addwf	??_ADC_GetConversion,w,c
 14428  004418  6E18               	movwf	?_ADC_GetConversion,c
 14429  00441A  0E00               	movlw	0
 14430  00441C  201B               	addwfc	??_ADC_GetConversion+1,w,c
 14431  00441E  6E19               	movwf	?_ADC_GetConversion+1,c
 14432  004420  0012               	return	
 14433  004422                     __end_of_ADC_GetConversion:
 14434                           	opt stack 0
 14435                           tosu	equ	0xFFF
 14436                           tosh	equ	0xFFE
 14437                           tosl	equ	0xFFD
 14438                           pclath	equ	0xFFA
 14439                           tblptru	equ	0xFF8
 14440                           tblptrh	equ	0xFF7
 14441                           tblptrl	equ	0xFF6
 14442                           tablat	equ	0xFF5
 14443                           prodh	equ	0xFF4
 14444                           prodl	equ	0xFF3
 14445                           intcon	equ	0xFF2
 14446                           intcon2	equ	0xFF1
 14447                           indf0	equ	0xFEF
 14448                           postinc0	equ	0xFEE
 14449                           fsr0h	equ	0xFEA
 14450                           fsr0l	equ	0xFE9
 14451                           wreg	equ	0xFE8
 14452                           indf1	equ	0xFE7
 14453                           postdec1	equ	0xFE5
 14454                           fsr1h	equ	0xFE2
 14455                           fsr1l	equ	0xFE1
 14456                           indf2	equ	0xFDF
 14457                           postinc2	equ	0xFDE
 14458                           postdec2	equ	0xFDD
 14459                           fsr2h	equ	0xFDA
 14460                           fsr2l	equ	0xFD9
 14461                           status	equ	0xFD8
 14462                           
 14463 ;; *************** function _ReadSystemStatusFromEprom *****************
 14464 ;; Defined at:
 14465 ;;		line 19 in file "SystemStatus.c"
 14466 ;; Parameters:    Size  Location     Type
 14467 ;;		None
 14468 ;; Auto vars:     Size  Location     Type
 14469 ;;  sysData         2  106[BANK0 ] unsigned int 
 14470 ;; Return value:  Size  Location     Type
 14471 ;;                  1    wreg      void 
 14472 ;; Registers used:
 14473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14474 ;; Tracked objects:
 14475 ;;		On entry : 0/0
 14476 ;;		On exit  : 0/0
 14477 ;;		Unchanged: 0/0
 14478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14479 ;;      Params:         0       0       0       0       0       0       0
 14480 ;;      Locals:         0       2       0       0       0       0       0
 14481 ;;      Temps:          0       0       0       0       0       0       0
 14482 ;;      Totals:         0       2       0       0       0       0       0
 14483 ;;Total ram usage:        2 bytes
 14484 ;; Hardware stack levels used:    1
 14485 ;; Hardware stack levels required when called:    9
 14486 ;; This function calls:
 14487 ;;		_ReadIntFromEeprom
 14488 ;; This function is called by:
 14489 ;;		_main
 14490 ;; This function uses a non-reentrant model
 14491 ;;
 14492                           
 14493                           	psect	text53
 14494  0037D0                     __ptext53:
 14495                           	opt stack 0
 14496  0037D0                     _ReadSystemStatusFromEprom:
 14497                           	opt stack 21
 14498                           
 14499                           ;SystemStatus.c: 21: uint16_t sysData = ReadIntFromEeprom((0x50) | SYSTEM_INFO_ADDRES[0]
      +                          , 1);
 14500                           
 14501                           ;incstack = 0
 14502  0037D0  0E00               	movlw	0
 14503  0037D2  0100               	movlb	0	; () banked
 14504  0037D4  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 14505  0037D6  0E01               	movlw	1
 14506  0037D8  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 14507  0037DA  0E37               	movlw	low _SYSTEM_INFO_ADDRES
 14508  0037DC  6EF6               	movwf	tblptrl,c
 14509  0037DE                     	if	1	;There is more than 1 active tblptr byte
 14510  0037DE  0E78               	movlw	high _SYSTEM_INFO_ADDRES
 14511  0037E0  6EF7               	movwf	tblptrh,c
 14512  0037E2                     	endif
 14513  0037E2                     	if	0	;There are less than 3 active tblptr bytes
 14514  0037E2                     	endif
 14515  0037E2  0008               	tblrd		*
 14516  0037E4  50F5               	movf	tablat,w,c
 14517  0037E6  0950               	iorlw	80
 14518  0037E8  EC43  F013         	call	_ReadIntFromEeprom
 14519  0037EC  C0B3  F0CA         	movff	?_ReadIntFromEeprom,ReadSystemStatusFromEprom@sysData
 14520  0037F0  C0B4  F0CB         	movff	?_ReadIntFromEeprom+1,ReadSystemStatusFromEprom@sysData+1
 14521                           
 14522                           ;SystemStatus.c: 22: systemStatus.UnitType = sysData & 0x1;
 14523  0037F4  0100               	movlb	0	; () banked
 14524  0037F6  51CA               	movf	ReadSystemStatusFromEprom@sysData& (0+255),w,b
 14525  0037F8  0B01               	andlw	1
 14526  0037FA  6E34               	movwf	_systemStatus+3,c	;volatile
 14527                           
 14528                           ; BSR set to: 0
 14529                           ;SystemStatus.c: 23: sysData = ReadIntFromEeprom((0x50) | SYSTEM_INFO_ADDRES[1], 1);
 14530  0037FC  0E00               	movlw	0
 14531  0037FE  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 14532  003800  0E01               	movlw	1
 14533  003802  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 14534  003804  0E38               	movlw	low (_SYSTEM_INFO_ADDRES+1)
 14535  003806  6EF6               	movwf	tblptrl,c
 14536  003808  0E78               	movlw	high (_SYSTEM_INFO_ADDRES+1)
 14537  00380A  6EF7               	movwf	tblptrh,c
 14538  00380C                     	if	0	;tblptru may be non-zero
 14539  00380C                     	endif
 14540  00380C                     	if	0	;tblptru may be non-zero
 14541  00380C                     	endif
 14542  00380C  0008               	tblrd		*
 14543  00380E  50F5               	movf	tablat,w,c
 14544  003810  0950               	iorlw	80
 14545  003812  EC43  F013         	call	_ReadIntFromEeprom
 14546  003816  C0B3  F0CA         	movff	?_ReadIntFromEeprom,ReadSystemStatusFromEprom@sysData
 14547  00381A  C0B4  F0CB         	movff	?_ReadIntFromEeprom+1,ReadSystemStatusFromEprom@sysData+1
 14548                           
 14549                           ;SystemStatus.c: 24: systemStatus.UartMode = sysData & 0x1;
 14550  00381E  0100               	movlb	0	; () banked
 14551  003820  51CA               	movf	ReadSystemStatusFromEprom@sysData& (0+255),w,b
 14552  003822  0B01               	andlw	1
 14553  003824  6E39               	movwf	_systemStatus+8,c	;volatile
 14554                           
 14555                           ; BSR set to: 0
 14556                           ;SystemStatus.c: 25: sysData = ReadIntFromEeprom((0x50) | SYSTEM_INFO_ADDRES[2], 2);
 14557  003826  0E00               	movlw	0
 14558  003828  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 14559  00382A  0E02               	movlw	2
 14560  00382C  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 14561  00382E  0E39               	movlw	low (_SYSTEM_INFO_ADDRES+2)
 14562  003830  6EF6               	movwf	tblptrl,c
 14563  003832  0E78               	movlw	high (_SYSTEM_INFO_ADDRES+2)
 14564  003834  6EF7               	movwf	tblptrh,c
 14565  003836                     	if	0	;tblptru may be non-zero
 14566  003836                     	endif
 14567  003836                     	if	0	;tblptru may be non-zero
 14568  003836                     	endif
 14569  003836  0008               	tblrd		*
 14570  003838  50F5               	movf	tablat,w,c
 14571  00383A  0950               	iorlw	80
 14572  00383C  EC43  F013         	call	_ReadIntFromEeprom
 14573  003840  C0B3  F0CA         	movff	?_ReadIntFromEeprom,ReadSystemStatusFromEprom@sysData
 14574  003844  C0B4  F0CB         	movff	?_ReadIntFromEeprom+1,ReadSystemStatusFromEprom@sysData+1
 14575                           
 14576                           ;SystemStatus.c: 26: systemStatus.UartRefreshRate = sysData & 0x1F;
 14577  003848  0100               	movlb	0	; () banked
 14578  00384A  51CA               	movf	ReadSystemStatusFromEprom@sysData& (0+255),w,b
 14579  00384C  0B1F               	andlw	31
 14580  00384E  6E3A               	movwf	_systemStatus+9,c	;volatile
 14581                           
 14582                           ; BSR set to: 0
 14583  003850  0012               	return		;funcret
 14584  003852                     __end_of_ReadSystemStatusFromEprom:
 14585                           	opt stack 0
 14586                           tosu	equ	0xFFF
 14587                           tosh	equ	0xFFE
 14588                           tosl	equ	0xFFD
 14589                           pclath	equ	0xFFA
 14590                           tblptru	equ	0xFF8
 14591                           tblptrh	equ	0xFF7
 14592                           tblptrl	equ	0xFF6
 14593                           tablat	equ	0xFF5
 14594                           prodh	equ	0xFF4
 14595                           prodl	equ	0xFF3
 14596                           intcon	equ	0xFF2
 14597                           intcon2	equ	0xFF1
 14598                           indf0	equ	0xFEF
 14599                           postinc0	equ	0xFEE
 14600                           fsr0h	equ	0xFEA
 14601                           fsr0l	equ	0xFE9
 14602                           wreg	equ	0xFE8
 14603                           indf1	equ	0xFE7
 14604                           postdec1	equ	0xFE5
 14605                           fsr1h	equ	0xFE2
 14606                           fsr1l	equ	0xFE1
 14607                           indf2	equ	0xFDF
 14608                           postinc2	equ	0xFDE
 14609                           postdec2	equ	0xFDD
 14610                           fsr2h	equ	0xFDA
 14611                           fsr2l	equ	0xFD9
 14612                           status	equ	0xFD8
 14613                           
 14614 ;; *************** function _InitSystemApplicationManagers *****************
 14615 ;; Defined at:
 14616 ;;		line 33 in file "SystemSettings.c"
 14617 ;; Parameters:    Size  Location     Type
 14618 ;;		None
 14619 ;; Auto vars:     Size  Location     Type
 14620 ;;		None
 14621 ;; Return value:  Size  Location     Type
 14622 ;;                  1    wreg      void 
 14623 ;; Registers used:
 14624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14625 ;; Tracked objects:
 14626 ;;		On entry : 0/0
 14627 ;;		On exit  : 0/0
 14628 ;;		Unchanged: 0/0
 14629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14630 ;;      Params:         0       0       0       0       0       0       0
 14631 ;;      Locals:         0       0       0       0       0       0       0
 14632 ;;      Temps:          0       0       0       0       0       0       0
 14633 ;;      Totals:         0       0       0       0       0       0       0
 14634 ;;Total ram usage:        0 bytes
 14635 ;; Hardware stack levels used:    1
 14636 ;; Hardware stack levels required when called:   10
 14637 ;; This function calls:
 14638 ;;		_ClearMcuRunTime
 14639 ;;		_DacInit
 14640 ;;		_InitAdcApplicationMgr
 14641 ;;		_PLLInitialize
 14642 ;;		_TMR0_StartTimer
 14643 ;; This function is called by:
 14644 ;;		_main
 14645 ;; This function uses a non-reentrant model
 14646 ;;
 14647                           
 14648                           	psect	text54
 14649  0045C8                     __ptext54:
 14650                           	opt stack 0
 14651  0045C8                     _InitSystemApplicationManagers:
 14652                           	opt stack 20
 14653                           
 14654                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 14655                           
 14656                           ; BSR set to: 0
 14657                           ;incstack = 0
 14658  0045C8  EC30  F023         	call	_InitAdcApplicationMgr	;wreg free
 14659                           
 14660                           ;SystemSettings.c: 39: TMR0_StartTimer();
 14661  0045CC  EC35  F023         	call	_TMR0_StartTimer	;wreg free
 14662                           
 14663                           ;SystemSettings.c: 42: PLLInitialize();
 14664  0045D0  EC3B  F023         	call	_PLLInitialize	;wreg free
 14665                           
 14666                           ;SystemSettings.c: 45: ClearMcuRunTime();
 14667  0045D4  EC03  F023         	call	_ClearMcuRunTime	;wreg free
 14668                           
 14669                           ;SystemSettings.c: 48: DacInit();
 14670  0045D8  ECCF  F016         	call	_DacInit	;wreg free
 14671  0045DC  0012               	return		;funcret
 14672  0045DE                     __end_of_InitSystemApplicationManagers:
 14673                           	opt stack 0
 14674                           tosu	equ	0xFFF
 14675                           tosh	equ	0xFFE
 14676                           tosl	equ	0xFFD
 14677                           pclath	equ	0xFFA
 14678                           tblptru	equ	0xFF8
 14679                           tblptrh	equ	0xFF7
 14680                           tblptrl	equ	0xFF6
 14681                           tablat	equ	0xFF5
 14682                           prodh	equ	0xFF4
 14683                           prodl	equ	0xFF3
 14684                           intcon	equ	0xFF2
 14685                           intcon2	equ	0xFF1
 14686                           indf0	equ	0xFEF
 14687                           postinc0	equ	0xFEE
 14688                           fsr0h	equ	0xFEA
 14689                           fsr0l	equ	0xFE9
 14690                           wreg	equ	0xFE8
 14691                           indf1	equ	0xFE7
 14692                           postdec1	equ	0xFE5
 14693                           fsr1h	equ	0xFE2
 14694                           fsr1l	equ	0xFE1
 14695                           indf2	equ	0xFDF
 14696                           postinc2	equ	0xFDE
 14697                           postdec2	equ	0xFDD
 14698                           fsr2h	equ	0xFDA
 14699                           fsr2l	equ	0xFD9
 14700                           status	equ	0xFD8
 14701                           
 14702 ;; *************** function _TMR0_StartTimer *****************
 14703 ;; Defined at:
 14704 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 14705 ;; Parameters:    Size  Location     Type
 14706 ;;		None
 14707 ;; Auto vars:     Size  Location     Type
 14708 ;;		None
 14709 ;; Return value:  Size  Location     Type
 14710 ;;                  1    wreg      void 
 14711 ;; Registers used:
 14712 ;;		None
 14713 ;; Tracked objects:
 14714 ;;		On entry : 0/0
 14715 ;;		On exit  : 0/0
 14716 ;;		Unchanged: 0/0
 14717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14718 ;;      Params:         0       0       0       0       0       0       0
 14719 ;;      Locals:         0       0       0       0       0       0       0
 14720 ;;      Temps:          0       0       0       0       0       0       0
 14721 ;;      Totals:         0       0       0       0       0       0       0
 14722 ;;Total ram usage:        0 bytes
 14723 ;; Hardware stack levels used:    1
 14724 ;; Hardware stack levels required when called:    3
 14725 ;; This function calls:
 14726 ;;		Nothing
 14727 ;; This function is called by:
 14728 ;;		_InitSystemApplicationManagers
 14729 ;; This function uses a non-reentrant model
 14730 ;;
 14731                           
 14732                           	psect	text55
 14733  00466A                     __ptext55:
 14734                           	opt stack 0
 14735  00466A                     _TMR0_StartTimer:
 14736                           	opt stack 26
 14737                           
 14738                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 14739                           
 14740                           ;incstack = 0
 14741  00466A  8ED5               	bsf	4053,7,c	;volatile
 14742  00466C  0012               	return		;funcret
 14743  00466E                     __end_of_TMR0_StartTimer:
 14744                           	opt stack 0
 14745                           tosu	equ	0xFFF
 14746                           tosh	equ	0xFFE
 14747                           tosl	equ	0xFFD
 14748                           pclath	equ	0xFFA
 14749                           tblptru	equ	0xFF8
 14750                           tblptrh	equ	0xFF7
 14751                           tblptrl	equ	0xFF6
 14752                           tablat	equ	0xFF5
 14753                           prodh	equ	0xFF4
 14754                           prodl	equ	0xFF3
 14755                           intcon	equ	0xFF2
 14756                           intcon2	equ	0xFF1
 14757                           indf0	equ	0xFEF
 14758                           postinc0	equ	0xFEE
 14759                           fsr0h	equ	0xFEA
 14760                           fsr0l	equ	0xFE9
 14761                           wreg	equ	0xFE8
 14762                           indf1	equ	0xFE7
 14763                           postdec1	equ	0xFE5
 14764                           fsr1h	equ	0xFE2
 14765                           fsr1l	equ	0xFE1
 14766                           indf2	equ	0xFDF
 14767                           postinc2	equ	0xFDE
 14768                           postdec2	equ	0xFDD
 14769                           fsr2h	equ	0xFDA
 14770                           fsr2l	equ	0xFD9
 14771                           status	equ	0xFD8
 14772                           
 14773 ;; *************** function _PLLInitialize *****************
 14774 ;; Defined at:
 14775 ;;		line 31 in file "SyntApp.c"
 14776 ;; Parameters:    Size  Location     Type
 14777 ;;		None
 14778 ;; Auto vars:     Size  Location     Type
 14779 ;;		None
 14780 ;; Return value:  Size  Location     Type
 14781 ;;                  1    wreg      void 
 14782 ;; Registers used:
 14783 ;;		None
 14784 ;; Tracked objects:
 14785 ;;		On entry : 0/0
 14786 ;;		On exit  : 0/0
 14787 ;;		Unchanged: 0/0
 14788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14789 ;;      Params:         0       0       0       0       0       0       0
 14790 ;;      Locals:         0       0       0       0       0       0       0
 14791 ;;      Temps:          0       0       0       0       0       0       0
 14792 ;;      Totals:         0       0       0       0       0       0       0
 14793 ;;Total ram usage:        0 bytes
 14794 ;; Hardware stack levels used:    1
 14795 ;; Hardware stack levels required when called:    3
 14796 ;; This function calls:
 14797 ;;		Nothing
 14798 ;; This function is called by:
 14799 ;;		_InitSystemApplicationManagers
 14800 ;; This function uses a non-reentrant model
 14801 ;;
 14802                           
 14803                           	psect	text56
 14804  004676                     __ptext56:
 14805                           	opt stack 0
 14806  004676                     _PLLInitialize:
 14807                           	opt stack 26
 14808                           
 14809                           ;incstack = 0
 14810  004676  0012               	return		;funcret
 14811  004678                     __end_of_PLLInitialize:
 14812                           	opt stack 0
 14813                           tosu	equ	0xFFF
 14814                           tosh	equ	0xFFE
 14815                           tosl	equ	0xFFD
 14816                           pclath	equ	0xFFA
 14817                           tblptru	equ	0xFF8
 14818                           tblptrh	equ	0xFF7
 14819                           tblptrl	equ	0xFF6
 14820                           tablat	equ	0xFF5
 14821                           prodh	equ	0xFF4
 14822                           prodl	equ	0xFF3
 14823                           intcon	equ	0xFF2
 14824                           intcon2	equ	0xFF1
 14825                           indf0	equ	0xFEF
 14826                           postinc0	equ	0xFEE
 14827                           fsr0h	equ	0xFEA
 14828                           fsr0l	equ	0xFE9
 14829                           wreg	equ	0xFE8
 14830                           indf1	equ	0xFE7
 14831                           postdec1	equ	0xFE5
 14832                           fsr1h	equ	0xFE2
 14833                           fsr1l	equ	0xFE1
 14834                           indf2	equ	0xFDF
 14835                           postinc2	equ	0xFDE
 14836                           postdec2	equ	0xFDD
 14837                           fsr2h	equ	0xFDA
 14838                           fsr2l	equ	0xFD9
 14839                           status	equ	0xFD8
 14840                           
 14841 ;; *************** function _InitAdcApplicationMgr *****************
 14842 ;; Defined at:
 14843 ;;		line 23 in file "AdcApp.c"
 14844 ;; Parameters:    Size  Location     Type
 14845 ;;		None
 14846 ;; Auto vars:     Size  Location     Type
 14847 ;;		None
 14848 ;; Return value:  Size  Location     Type
 14849 ;;                  1    wreg      void 
 14850 ;; Registers used:
 14851 ;;		wreg, status,2
 14852 ;; Tracked objects:
 14853 ;;		On entry : 0/0
 14854 ;;		On exit  : 0/0
 14855 ;;		Unchanged: 0/0
 14856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14857 ;;      Params:         0       0       0       0       0       0       0
 14858 ;;      Locals:         0       0       0       0       0       0       0
 14859 ;;      Temps:          0       0       0       0       0       0       0
 14860 ;;      Totals:         0       0       0       0       0       0       0
 14861 ;;Total ram usage:        0 bytes
 14862 ;; Hardware stack levels used:    1
 14863 ;; Hardware stack levels required when called:    3
 14864 ;; This function calls:
 14865 ;;		Nothing
 14866 ;; This function is called by:
 14867 ;;		_InitSystemApplicationManagers
 14868 ;; This function uses a non-reentrant model
 14869 ;;
 14870                           
 14871                           	psect	text57
 14872  004660                     __ptext57:
 14873                           	opt stack 0
 14874  004660                     _InitAdcApplicationMgr:
 14875                           	opt stack 26
 14876                           
 14877                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 14878                           
 14879                           ;incstack = 0
 14880  004660  0E00               	movlw	0
 14881  004662  6E45               	movwf	_adcSampleMode,c
 14882  004664  0012               	return		;funcret
 14883  004666                     __end_of_InitAdcApplicationMgr:
 14884                           	opt stack 0
 14885                           tosu	equ	0xFFF
 14886                           tosh	equ	0xFFE
 14887                           tosl	equ	0xFFD
 14888                           pclath	equ	0xFFA
 14889                           tblptru	equ	0xFF8
 14890                           tblptrh	equ	0xFF7
 14891                           tblptrl	equ	0xFF6
 14892                           tablat	equ	0xFF5
 14893                           prodh	equ	0xFF4
 14894                           prodl	equ	0xFF3
 14895                           intcon	equ	0xFF2
 14896                           intcon2	equ	0xFF1
 14897                           indf0	equ	0xFEF
 14898                           postinc0	equ	0xFEE
 14899                           fsr0h	equ	0xFEA
 14900                           fsr0l	equ	0xFE9
 14901                           wreg	equ	0xFE8
 14902                           indf1	equ	0xFE7
 14903                           postdec1	equ	0xFE5
 14904                           fsr1h	equ	0xFE2
 14905                           fsr1l	equ	0xFE1
 14906                           indf2	equ	0xFDF
 14907                           postinc2	equ	0xFDE
 14908                           postdec2	equ	0xFDD
 14909                           fsr2h	equ	0xFDA
 14910                           fsr2l	equ	0xFD9
 14911                           status	equ	0xFD8
 14912                           
 14913 ;; *************** function _DacInit *****************
 14914 ;; Defined at:
 14915 ;;		line 12 in file "DacApp.c"
 14916 ;; Parameters:    Size  Location     Type
 14917 ;;		None
 14918 ;; Auto vars:     Size  Location     Type
 14919 ;;  dacInput        2  108[BANK0 ] unsigned int 
 14920 ;;  idx             1  110[BANK0 ] char 
 14921 ;; Return value:  Size  Location     Type
 14922 ;;                  1    wreg      void 
 14923 ;; Registers used:
 14924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14925 ;; Tracked objects:
 14926 ;;		On entry : 0/0
 14927 ;;		On exit  : 0/0
 14928 ;;		Unchanged: 0/0
 14929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14930 ;;      Params:         0       0       0       0       0       0       0
 14931 ;;      Locals:         0       3       0       0       0       0       0
 14932 ;;      Temps:          0       2       0       0       0       0       0
 14933 ;;      Totals:         0       5       0       0       0       0       0
 14934 ;;Total ram usage:        5 bytes
 14935 ;; Hardware stack levels used:    1
 14936 ;; Hardware stack levels required when called:    9
 14937 ;; This function calls:
 14938 ;;		_ReadIntFromEeprom
 14939 ;;		_SWSPI_send_word
 14940 ;;		_StoreIntInEeprom
 14941 ;; This function is called by:
 14942 ;;		_InitSystemApplicationManagers
 14943 ;; This function uses a non-reentrant model
 14944 ;;
 14945                           
 14946                           	psect	text58
 14947  002D9E                     __ptext58:
 14948                           	opt stack 0
 14949  002D9E                     _DacInit:
 14950                           	opt stack 20
 14951                           
 14952                           ;DacApp.c: 14: for(int8_t idx = 0; idx < (4); idx++)
 14953                           
 14954                           ;incstack = 0
 14955  002D9E  0E00               	movlw	0
 14956  002DA0  0100               	movlb	0	; () banked
 14957  002DA2  6FCE               	movwf	DacInit@idx& (0+255),b
 14958  002DA4                     l9211:
 14959                           
 14960                           ; BSR set to: 0
 14961  002DA4  51CE               	movf	DacInit@idx& (0+255),w,b
 14962  002DA6  0A80               	xorlw	128
 14963  002DA8  0F7C               	addlw	-132
 14964  002DAA  B0D8               	btfsc	status,0,c
 14965  002DAC  0012               	return	
 14966                           
 14967                           ; BSR set to: 0
 14968                           ;DacApp.c: 15: {
 14969                           ;DacApp.c: 16: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 14970                           
 14971                           ; BSR set to: 0
 14972                           
 14973                           ; BSR set to: 0
 14974  002DAE  0E00               	movlw	0
 14975  002DB0  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 14976  002DB2  0E02               	movlw	2
 14977  002DB4  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 14978  002DB6  51CE               	movf	DacInit@idx& (0+255),w,b
 14979  002DB8  0D01               	mullw	1
 14980  002DBA  0E2F               	movlw	low _DAC_ADDRES
 14981  002DBC  24F3               	addwf	prodl,w,c
 14982  002DBE  6EF6               	movwf	tblptrl,c
 14983  002DC0  0E78               	movlw	high _DAC_ADDRES
 14984  002DC2  20F4               	addwfc	prodh,w,c
 14985  002DC4  6EF7               	movwf	tblptrh,c
 14986  002DC6                     	if	0	;There are less than 3 active tblptr bytes
 14987  002DC6                     	endif
 14988  002DC6  0008               	tblrd		*
 14989  002DC8  50F5               	movf	tablat,w,c
 14990  002DCA  0940               	iorlw	64
 14991  002DCC  EC43  F013         	call	_ReadIntFromEeprom
 14992  002DD0  C0B3  F0CC         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 14993  002DD4  C0B4  F0CD         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 14994                           
 14995                           ;DacApp.c: 17: if(dacInput == 0xFFFF)
 14996  002DD8  0100               	movlb	0	; () banked
 14997  002DDA  29CC               	incf	DacInit@dacInput& (0+255),w,b
 14998  002DDC  E144               	bnz	l9223
 14999  002DDE  29CD               	incf	(DacInit@dacInput+1)& (0+255),w,b
 15000  002DE0  A4D8               	btfss	status,2,c
 15001  002DE2  D041               	goto	l401
 15002                           
 15003                           ; BSR set to: 0
 15004                           ;DacApp.c: 18: {
 15005                           ;DacApp.c: 19: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 15006  002DE4  51CE               	movf	DacInit@idx& (0+255),w,b
 15007  002DE6  0D02               	mullw	2
 15008  002DE8  0E27               	movlw	low _DAC_DEFAULT_INIT_VALUES
 15009  002DEA  24F3               	addwf	prodl,w,c
 15010  002DEC  6EF6               	movwf	tblptrl,c
 15011  002DEE  0E78               	movlw	high _DAC_DEFAULT_INIT_VALUES
 15012  002DF0  20F4               	addwfc	prodh,w,c
 15013  002DF2  6EF7               	movwf	tblptrh,c
 15014  002DF4                     	if	0	;There are less than 3 active tblptr bytes
 15015  002DF4                     	endif
 15016  002DF4  0009               	tblrd		*+
 15017  002DF6  CFF5 F0CA          	movff	tablat,??_DacInit
 15018  002DFA  0009               	tblrd		*+
 15019  002DFC  CFF5 F0CB          	movff	tablat,??_DacInit+1
 15020  002E00  C0CA  F028         	movff	??_DacInit,SWSPI_send_word@data
 15021  002E04  C0CB  F029         	movff	??_DacInit+1,SWSPI_send_word@data+1
 15022  002E08  6A2A               	clrf	SWSPI_send_word@data+2,c
 15023  002E0A  6A2B               	clrf	SWSPI_send_word@data+3,c
 15024  002E0C  0E01               	movlw	1
 15025  002E0E  6E2C               	movwf	SWSPI_send_word@dataSize,c
 15026  002E10  0E02               	movlw	2
 15027  002E12  ECF3  F019         	call	_SWSPI_send_word
 15028                           
 15029                           ;DacApp.c: 20: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 15030  002E16  0100               	movlb	0	; () banked
 15031  002E18  51CE               	movf	DacInit@idx& (0+255),w,b
 15032  002E1A  0D02               	mullw	2
 15033  002E1C  0E27               	movlw	low _DAC_DEFAULT_INIT_VALUES
 15034  002E1E  24F3               	addwf	prodl,w,c
 15035  002E20  6EF6               	movwf	tblptrl,c
 15036  002E22  0E78               	movlw	high _DAC_DEFAULT_INIT_VALUES
 15037  002E24  20F4               	addwfc	prodh,w,c
 15038  002E26  6EF7               	movwf	tblptrh,c
 15039  002E28                     	if	0	;There are less than 3 active tblptr bytes
 15040  002E28                     	endif
 15041  002E28  0009               	tblrd		*+
 15042  002E2A  CFF5 F0CA          	movff	tablat,??_DacInit
 15043  002E2E  0009               	tblrd		*+
 15044  002E30  CFF5 F0CB          	movff	tablat,??_DacInit+1
 15045  002E34  C0CA  F021         	movff	??_DacInit,StoreIntInEeprom@data
 15046  002E38  C0CB  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 15047  002E3C  6A23               	clrf	StoreIntInEeprom@data+2,c
 15048  002E3E  6A24               	clrf	StoreIntInEeprom@data+3,c
 15049  002E40  51CE               	movf	DacInit@idx& (0+255),w,b
 15050  002E42  0D01               	mullw	1
 15051  002E44  0E2F               	movlw	low _DAC_ADDRES
 15052  002E46  24F3               	addwf	prodl,w,c
 15053  002E48  6EF6               	movwf	tblptrl,c
 15054  002E4A  0E78               	movlw	high _DAC_ADDRES
 15055  002E4C  20F4               	addwfc	prodh,w,c
 15056  002E4E  6EF7               	movwf	tblptrh,c
 15057  002E50                     	if	0	;There are less than 3 active tblptr bytes
 15058  002E50                     	endif
 15059  002E50  0008               	tblrd		*
 15060  002E52  50F5               	movf	tablat,w,c
 15061  002E54  0940               	iorlw	64
 15062  002E56  6E25               	movwf	StoreIntInEeprom@address,c
 15063  002E58  0E00               	movlw	0
 15064  002E5A  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 15065  002E5C  0E02               	movlw	2
 15066  002E5E  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 15067  002E60  EC3C  F021         	call	_StoreIntInEeprom	;wreg free
 15068                           
 15069                           ;DacApp.c: 21: }
 15070  002E64  D00B               	goto	l402
 15071  002E66                     l401:
 15072  002E66                     l9223:
 15073                           
 15074                           ;DacApp.c: 22: else
 15075                           ;DacApp.c: 23: {
 15076                           ;DacApp.c: 24: SWSPI_send_word(EXT_DAC, dacInput, 1);
 15077  002E66  C0CC  F028         	movff	DacInit@dacInput,SWSPI_send_word@data
 15078  002E6A  C0CD  F029         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 15079  002E6E  6A2A               	clrf	SWSPI_send_word@data+2,c
 15080  002E70  6A2B               	clrf	SWSPI_send_word@data+3,c
 15081  002E72  0E01               	movlw	1
 15082  002E74  6E2C               	movwf	SWSPI_send_word@dataSize,c
 15083  002E76  0E02               	movlw	2
 15084  002E78  ECF3  F019         	call	_SWSPI_send_word
 15085  002E7C                     l402:
 15086  002E7C  0100               	movlb	0	; () banked
 15087  002E7E  2BCE               	incf	DacInit@idx& (0+255),f,b
 15088  002E80  D791               	goto	l9211
 15089  002E82                     __end_of_DacInit:
 15090                           	opt stack 0
 15091                           tosu	equ	0xFFF
 15092                           tosh	equ	0xFFE
 15093                           tosl	equ	0xFFD
 15094                           pclath	equ	0xFFA
 15095                           tblptru	equ	0xFF8
 15096                           tblptrh	equ	0xFF7
 15097                           tblptrl	equ	0xFF6
 15098                           tablat	equ	0xFF5
 15099                           prodh	equ	0xFF4
 15100                           prodl	equ	0xFF3
 15101                           intcon	equ	0xFF2
 15102                           intcon2	equ	0xFF1
 15103                           indf0	equ	0xFEF
 15104                           postinc0	equ	0xFEE
 15105                           fsr0h	equ	0xFEA
 15106                           fsr0l	equ	0xFE9
 15107                           wreg	equ	0xFE8
 15108                           indf1	equ	0xFE7
 15109                           postdec1	equ	0xFE5
 15110                           fsr1h	equ	0xFE2
 15111                           fsr1l	equ	0xFE1
 15112                           indf2	equ	0xFDF
 15113                           postinc2	equ	0xFDE
 15114                           postdec2	equ	0xFDD
 15115                           fsr2h	equ	0xFDA
 15116                           fsr2l	equ	0xFD9
 15117                           status	equ	0xFD8
 15118                           
 15119 ;; *************** function _StoreIntInEeprom *****************
 15120 ;; Defined at:
 15121 ;;		line 38 in file "SystemCommon.c"
 15122 ;; Parameters:    Size  Location     Type
 15123 ;;  data            4   32[COMRAM] unsigned long 
 15124 ;;  address         1   36[COMRAM] unsigned char 
 15125 ;;  numOfByes       2   37[COMRAM] int 
 15126 ;; Auto vars:     Size  Location     Type
 15127 ;;  val             1   39[COMRAM] unsigned char 
 15128 ;;  idx             1   40[COMRAM] unsigned char 
 15129 ;; Return value:  Size  Location     Type
 15130 ;;                  1    wreg      void 
 15131 ;; Registers used:
 15132 ;;		wreg, status,2, status,0, cstack
 15133 ;; Tracked objects:
 15134 ;;		On entry : 0/0
 15135 ;;		On exit  : 0/0
 15136 ;;		Unchanged: 0/0
 15137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15138 ;;      Params:         7       0       0       0       0       0       0
 15139 ;;      Locals:         2       0       0       0       0       0       0
 15140 ;;      Temps:          0       0       0       0       0       0       0
 15141 ;;      Totals:         9       0       0       0       0       0       0
 15142 ;;Total ram usage:        9 bytes
 15143 ;; Hardware stack levels used:    1
 15144 ;; Hardware stack levels required when called:    5
 15145 ;; This function calls:
 15146 ;;		_EepromWrite
 15147 ;;		_make8
 15148 ;; This function is called by:
 15149 ;;		_DacInit
 15150 ;;		_SaveSystemStatus
 15151 ;;		_DacSetValue
 15152 ;; This function uses a non-reentrant model
 15153 ;;
 15154                           
 15155                           	psect	text59
 15156  004278                     __ptext59:
 15157                           	opt stack 0
 15158  004278                     _StoreIntInEeprom:
 15159                           	opt stack 22
 15160                           
 15161                           ;SystemCommon.c: 40: for(uint8_t idx = numOfByes; idx; idx--)
 15162                           
 15163                           ; BSR set to: 0
 15164                           ;incstack = 0
 15165  004278  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 15166  00427C  D015               	goto	l1316
 15167  00427E                     
 15168                           ;SystemCommon.c: 41: {
 15169                           ;SystemCommon.c: 42: uint8_t val = make8(data, idx - 1);
 15170  00427E  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 15171  004282  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 15172  004286  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 15173  00428A  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 15174  00428E  0429               	decf	StoreIntInEeprom@idx,w,c
 15175  004290  6E1C               	movwf	make8@dataLocation,c
 15176  004292  ECD5  F01E         	call	_make8	;wreg free
 15177  004296  6E28               	movwf	StoreIntInEeprom@val,c
 15178                           
 15179                           ;SystemCommon.c: 43: EepromWrite(address - idx, val);
 15180  004298  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 15181  00429C  5029               	movf	StoreIntInEeprom@idx,w,c
 15182  00429E  0800               	sublw	0
 15183  0042A0  2425               	addwf	StoreIntInEeprom@address,w,c
 15184  0042A2  EC14  F023         	call	_EepromWrite
 15185  0042A6  0629               	decf	StoreIntInEeprom@idx,f,c
 15186  0042A8                     l1316:
 15187  0042A8  5029               	movf	StoreIntInEeprom@idx,w,c
 15188  0042AA  B4D8               	btfsc	status,2,c
 15189  0042AC  0012               	return	
 15190  0042AE  D7E7               	goto	l1317
 15191  0042B0                     __end_of_StoreIntInEeprom:
 15192                           	opt stack 0
 15193                           tosu	equ	0xFFF
 15194                           tosh	equ	0xFFE
 15195                           tosl	equ	0xFFD
 15196                           pclath	equ	0xFFA
 15197                           tblptru	equ	0xFF8
 15198                           tblptrh	equ	0xFF7
 15199                           tblptrl	equ	0xFF6
 15200                           tablat	equ	0xFF5
 15201                           prodh	equ	0xFF4
 15202                           prodl	equ	0xFF3
 15203                           intcon	equ	0xFF2
 15204                           intcon2	equ	0xFF1
 15205                           indf0	equ	0xFEF
 15206                           postinc0	equ	0xFEE
 15207                           fsr0h	equ	0xFEA
 15208                           fsr0l	equ	0xFE9
 15209                           wreg	equ	0xFE8
 15210                           indf1	equ	0xFE7
 15211                           postdec1	equ	0xFE5
 15212                           fsr1h	equ	0xFE2
 15213                           fsr1l	equ	0xFE1
 15214                           indf2	equ	0xFDF
 15215                           postinc2	equ	0xFDE
 15216                           postdec2	equ	0xFDD
 15217                           fsr2h	equ	0xFDA
 15218                           fsr2l	equ	0xFD9
 15219                           status	equ	0xFD8
 15220                           
 15221 ;; *************** function _EepromWrite *****************
 15222 ;; Defined at:
 15223 ;;		line 18 in file "FlashApp.c"
 15224 ;; Parameters:    Size  Location     Type
 15225 ;;  address         1    wreg     unsigned char 
 15226 ;;  data            1   26[COMRAM] unsigned char 
 15227 ;; Auto vars:     Size  Location     Type
 15228 ;;  address         1   27[COMRAM] unsigned char 
 15229 ;; Return value:  Size  Location     Type
 15230 ;;                  1    wreg      void 
 15231 ;; Registers used:
 15232 ;;		wreg, status,2, cstack
 15233 ;; Tracked objects:
 15234 ;;		On entry : 0/0
 15235 ;;		On exit  : 0/0
 15236 ;;		Unchanged: 0/0
 15237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15238 ;;      Params:         1       0       0       0       0       0       0
 15239 ;;      Locals:         1       0       0       0       0       0       0
 15240 ;;      Temps:          0       0       0       0       0       0       0
 15241 ;;      Totals:         2       0       0       0       0       0       0
 15242 ;;Total ram usage:        2 bytes
 15243 ;; Hardware stack levels used:    1
 15244 ;; Hardware stack levels required when called:    4
 15245 ;; This function calls:
 15246 ;;		_DATAEE_WriteByte
 15247 ;; This function is called by:
 15248 ;;		_StoreIntInEeprom
 15249 ;; This function uses a non-reentrant model
 15250 ;;
 15251                           
 15252                           	psect	text60
 15253  004628                     __ptext60:
 15254                           	opt stack 0
 15255  004628                     _EepromWrite:
 15256                           	opt stack 22
 15257                           
 15258                           ;incstack = 0
 15259                           ;EepromWrite@address stored from wreg
 15260  004628  6E1C               	movwf	EepromWrite@address,c
 15261                           
 15262                           ;FlashApp.c: 20: DATAEE_WriteByte(address, data);
 15263  00462A  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 15264  00462E  501C               	movf	EepromWrite@address,w,c
 15265  004630  ECAB  F021         	call	_DATAEE_WriteByte
 15266  004634  0012               	return		;funcret
 15267  004636                     __end_of_EepromWrite:
 15268                           	opt stack 0
 15269                           tosu	equ	0xFFF
 15270                           tosh	equ	0xFFE
 15271                           tosl	equ	0xFFD
 15272                           pclath	equ	0xFFA
 15273                           tblptru	equ	0xFF8
 15274                           tblptrh	equ	0xFF7
 15275                           tblptrl	equ	0xFF6
 15276                           tablat	equ	0xFF5
 15277                           prodh	equ	0xFF4
 15278                           prodl	equ	0xFF3
 15279                           intcon	equ	0xFF2
 15280                           intcon2	equ	0xFF1
 15281                           indf0	equ	0xFEF
 15282                           postinc0	equ	0xFEE
 15283                           fsr0h	equ	0xFEA
 15284                           fsr0l	equ	0xFE9
 15285                           wreg	equ	0xFE8
 15286                           indf1	equ	0xFE7
 15287                           postdec1	equ	0xFE5
 15288                           fsr1h	equ	0xFE2
 15289                           fsr1l	equ	0xFE1
 15290                           indf2	equ	0xFDF
 15291                           postinc2	equ	0xFDE
 15292                           postdec2	equ	0xFDD
 15293                           fsr2h	equ	0xFDA
 15294                           fsr2l	equ	0xFD9
 15295                           status	equ	0xFD8
 15296                           
 15297 ;; *************** function _DATAEE_WriteByte *****************
 15298 ;; Defined at:
 15299 ;;		line 167 in file "mcc_generated_files/memory.c"
 15300 ;; Parameters:    Size  Location     Type
 15301 ;;  bAdd            1    wreg     unsigned char 
 15302 ;;  bData           1   23[COMRAM] unsigned char 
 15303 ;; Auto vars:     Size  Location     Type
 15304 ;;  bAdd            1   24[COMRAM] unsigned char 
 15305 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 15306 ;; Return value:  Size  Location     Type
 15307 ;;                  1    wreg      void 
 15308 ;; Registers used:
 15309 ;;		wreg, status,2
 15310 ;; Tracked objects:
 15311 ;;		On entry : 0/0
 15312 ;;		On exit  : 0/0
 15313 ;;		Unchanged: 0/0
 15314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15315 ;;      Params:         1       0       0       0       0       0       0
 15316 ;;      Locals:         2       0       0       0       0       0       0
 15317 ;;      Temps:          0       0       0       0       0       0       0
 15318 ;;      Totals:         3       0       0       0       0       0       0
 15319 ;;Total ram usage:        3 bytes
 15320 ;; Hardware stack levels used:    1
 15321 ;; Hardware stack levels required when called:    3
 15322 ;; This function calls:
 15323 ;;		Nothing
 15324 ;; This function is called by:
 15325 ;;		_EepromWrite
 15326 ;; This function uses a non-reentrant model
 15327 ;;
 15328                           
 15329                           	psect	text61
 15330  004356                     __ptext61:
 15331                           	opt stack 0
 15332  004356                     _DATAEE_WriteByte:
 15333                           	opt stack 22
 15334                           
 15335                           ;incstack = 0
 15336                           ;DATAEE_WriteByte@bAdd stored from wreg
 15337  004356  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 15338                           
 15339                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 15340  004358  0E00               	movlw	0
 15341  00435A  BEF2               	btfsc	intcon,7,c	;volatile
 15342  00435C  0E01               	movlw	1
 15343  00435E  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 15344                           
 15345                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 15346  004360  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 15347                           
 15348                           ;memory.c: 172: EEDATA = bData;
 15349  004364  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 15350                           
 15351                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 15352  004368  9EA6               	bcf	4006,7,c	;volsfr
 15353                           
 15354                           ;memory.c: 174: EECON1bits.CFGS = 0;
 15355  00436A  9CA6               	bcf	4006,6,c	;volsfr
 15356                           
 15357                           ;memory.c: 175: EECON1bits.WREN = 1;
 15358  00436C  84A6               	bsf	4006,2,c	;volsfr
 15359                           
 15360                           ;memory.c: 176: INTCONbits.GIE = 0;
 15361  00436E  9EF2               	bcf	intcon,7,c	;volatile
 15362                           
 15363                           ;memory.c: 177: EECON2 = 0x55;
 15364  004370  0E55               	movlw	85
 15365  004372  6EA7               	movwf	4007,c	;volsfr
 15366                           
 15367                           ;memory.c: 178: EECON2 = 0xAA;
 15368  004374  0EAA               	movlw	170
 15369  004376  6EA7               	movwf	4007,c	;volsfr
 15370                           
 15371                           ;memory.c: 179: EECON1bits.WR = 1;
 15372  004378  82A6               	bsf	4006,1,c	;volsfr
 15373  00437A                     
 15374                           ;memory.c: 182: {
 15375  00437A  B2A6               	btfsc	4006,1,c	;volsfr
 15376  00437C  D7FE               	goto	l941
 15377                           
 15378                           ;memory.c: 183: }
 15379                           ;memory.c: 185: EECON1bits.WREN = 0;
 15380  00437E  94A6               	bcf	4006,2,c	;volsfr
 15381                           
 15382                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 15383  004380  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 15384  004382  D002               	bra	u4065
 15385  004384  9EF2               	bcf	intcon,7,c	;volatile
 15386  004386  D001               	bra	u4066
 15387  004388                     u4065:
 15388  004388  8EF2               	bsf	intcon,7,c	;volatile
 15389  00438A                     u4066:
 15390  00438A  0012               	return		;funcret
 15391  00438C                     __end_of_DATAEE_WriteByte:
 15392                           	opt stack 0
 15393                           tosu	equ	0xFFF
 15394                           tosh	equ	0xFFE
 15395                           tosl	equ	0xFFD
 15396                           pclath	equ	0xFFA
 15397                           tblptru	equ	0xFF8
 15398                           tblptrh	equ	0xFF7
 15399                           tblptrl	equ	0xFF6
 15400                           tablat	equ	0xFF5
 15401                           prodh	equ	0xFF4
 15402                           prodl	equ	0xFF3
 15403                           intcon	equ	0xFF2
 15404                           intcon2	equ	0xFF1
 15405                           indf0	equ	0xFEF
 15406                           postinc0	equ	0xFEE
 15407                           fsr0h	equ	0xFEA
 15408                           fsr0l	equ	0xFE9
 15409                           wreg	equ	0xFE8
 15410                           indf1	equ	0xFE7
 15411                           postdec1	equ	0xFE5
 15412                           fsr1h	equ	0xFE2
 15413                           fsr1l	equ	0xFE1
 15414                           indf2	equ	0xFDF
 15415                           postinc2	equ	0xFDE
 15416                           postdec2	equ	0xFDD
 15417                           fsr2h	equ	0xFDA
 15418                           fsr2l	equ	0xFD9
 15419                           status	equ	0xFD8
 15420                           
 15421 ;; *************** function _SWSPI_send_word *****************
 15422 ;; Defined at:
 15423 ;;		line 17 in file "SwSpiApp.c"
 15424 ;; Parameters:    Size  Location     Type
 15425 ;;  phrType         1    wreg     enum E181
 15426 ;;  data            4   39[COMRAM] unsigned long 
 15427 ;;  dataSize        1   43[COMRAM] unsigned char 
 15428 ;; Auto vars:     Size  Location     Type
 15429 ;;  phrType         1   47[COMRAM] enum E181
 15430 ;;  datac           1   44[COMRAM] unsigned char 
 15431 ;;  idx             2   45[COMRAM] int 
 15432 ;; Return value:  Size  Location     Type
 15433 ;;                  1    wreg      void 
 15434 ;; Registers used:
 15435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15436 ;; Tracked objects:
 15437 ;;		On entry : 0/0
 15438 ;;		On exit  : 0/0
 15439 ;;		Unchanged: 0/0
 15440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15441 ;;      Params:         5       0       0       0       0       0       0
 15442 ;;      Locals:         4       0       0       0       0       0       0
 15443 ;;      Temps:          0       0       0       0       0       0       0
 15444 ;;      Totals:         9       0       0       0       0       0       0
 15445 ;;Total ram usage:        9 bytes
 15446 ;; Hardware stack levels used:    1
 15447 ;; Hardware stack levels required when called:    6
 15448 ;; This function calls:
 15449 ;;		_SWSPI_DAC_send_bits
 15450 ;;		_SWSPI_Synth_send_bits
 15451 ;;		_SwSpi_Set_Dac_Sync_Pin
 15452 ;;		_SwSpi_Set_Synth_Le_Pin
 15453 ;;		_make8
 15454 ;; This function is called by:
 15455 ;;		_DacInit
 15456 ;;		_DacSetValue
 15457 ;; This function uses a non-reentrant model
 15458 ;;
 15459                           
 15460                           	psect	text62
 15461  0033E6                     __ptext62:
 15462                           	opt stack 0
 15463  0033E6                     _SWSPI_send_word:
 15464                           	opt stack 22
 15465                           
 15466                           ;incstack = 0
 15467                           ;SWSPI_send_word@phrType stored from wreg
 15468  0033E6  6E30               	movwf	SWSPI_send_word@phrType,c
 15469                           
 15470                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 15471  0033E8  9EF2               	bcf	intcon,7,c	;volatile
 15472                           
 15473                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 15474  0033EA  5030               	movf	SWSPI_send_word@phrType,w,c
 15475  0033EC  B4D8               	btfsc	status,2,c
 15476  0033EE  D003               	goto	u9040
 15477  0033F0  0430               	decf	SWSPI_send_word@phrType,w,c
 15478  0033F2  A4D8               	btfss	status,2,c
 15479  0033F4  D016               	goto	l557
 15480  0033F6                     u9040:
 15481                           
 15482                           ;SwSpiApp.c: 24: {
 15483                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 15484  0033F6  0E00               	movlw	0
 15485  0033F8  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 15486  0033FA  5030               	movf	SWSPI_send_word@phrType,w,c
 15487  0033FC  EC1E  F021         	call	_SwSpi_Set_Synth_Le_Pin
 15488                           
 15489                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 15490  003400  C028  F024         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 15491  003404  C029  F025         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 15492  003408  C02A  F026         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 15493  00340C  C02B  F027         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 15494  003410  5030               	movf	SWSPI_send_word@phrType,w,c
 15495  003412  EC84  F018         	call	_SWSPI_Synth_send_bits
 15496                           
 15497                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 15498  003416  0E01               	movlw	1
 15499  003418  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 15500  00341A  5030               	movf	SWSPI_send_word@phrType,w,c
 15501  00341C  EC1E  F021         	call	_SwSpi_Set_Synth_Le_Pin
 15502                           
 15503                           ;SwSpiApp.c: 28: }
 15504  003420  D02D               	goto	l561
 15505  003422                     l557:
 15506                           
 15507                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 15508  003422  0E02               	movlw	2
 15509  003424  1830               	xorwf	SWSPI_send_word@phrType,w,c
 15510  003426  A4D8               	btfss	status,2,c
 15511  003428  D029               	goto	l561
 15512                           
 15513                           ;SwSpiApp.c: 30: {
 15514                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 15515  00342A  0E00               	movlw	0
 15516  00342C  ECB2  F022         	call	_SwSpi_Set_Dac_Sync_Pin
 15517                           
 15518                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 15519  003430  0E01               	movlw	1
 15520  003432  242C               	addwf	SWSPI_send_word@dataSize,w,c
 15521  003434  6E2E               	movwf	SWSPI_send_word@idx,c
 15522  003436  6A2F               	clrf	SWSPI_send_word@idx+1,c
 15523  003438  0E00               	movlw	0
 15524  00343A  222F               	addwfc	SWSPI_send_word@idx+1,f,c
 15525  00343C                     l8991:
 15526  00343C  BE2F               	btfsc	SWSPI_send_word@idx+1,7,c
 15527  00343E  D01B               	goto	u9070
 15528  003440  502F               	movf	SWSPI_send_word@idx+1,w,c
 15529  003442  E103               	bnz	l8995
 15530  003444  042E               	decf	SWSPI_send_word@idx,w,c
 15531  003446  A0D8               	btfss	status,0,c
 15532  003448  D016               	goto	u9070
 15533  00344A                     l8995:
 15534                           
 15535                           ;SwSpiApp.c: 33: {
 15536                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 15537  00344A  C028  F018         	movff	SWSPI_send_word@data,make8@data
 15538  00344E  C029  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 15539  003452  C02A  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 15540  003456  C02B  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 15541  00345A  042E               	decf	SWSPI_send_word@idx,w,c
 15542  00345C  6E1C               	movwf	make8@dataLocation,c
 15543  00345E  ECD5  F01E         	call	_make8	;wreg free
 15544  003462  6E2D               	movwf	SWSPI_send_word@datac,c
 15545                           
 15546                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 15547  003464  C02D  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 15548  003468  5030               	movf	SWSPI_send_word@phrType,w,c
 15549  00346A  EC5D  F01F         	call	_SWSPI_DAC_send_bits
 15550  00346E  062E               	decf	SWSPI_send_word@idx,f,c
 15551  003470  A0D8               	btfss	status,0,c
 15552  003472  062F               	decf	SWSPI_send_word@idx+1,f,c
 15553  003474  D7E3               	goto	l8991
 15554  003476                     u9070:
 15555                           
 15556                           ;SwSpiApp.c: 36: }
 15557                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 15558  003476  0E01               	movlw	1
 15559  003478  ECB2  F022         	call	_SwSpi_Set_Dac_Sync_Pin
 15560  00347C                     l561:
 15561                           
 15562                           ;SwSpiApp.c: 38: }
 15563                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 15564  00347C  8EF2               	bsf	intcon,7,c	;volatile
 15565  00347E  0012               	return		;funcret
 15566  003480                     __end_of_SWSPI_send_word:
 15567                           	opt stack 0
 15568                           tosu	equ	0xFFF
 15569                           tosh	equ	0xFFE
 15570                           tosl	equ	0xFFD
 15571                           pclath	equ	0xFFA
 15572                           tblptru	equ	0xFF8
 15573                           tblptrh	equ	0xFF7
 15574                           tblptrl	equ	0xFF6
 15575                           tablat	equ	0xFF5
 15576                           prodh	equ	0xFF4
 15577                           prodl	equ	0xFF3
 15578                           intcon	equ	0xFF2
 15579                           intcon2	equ	0xFF1
 15580                           indf0	equ	0xFEF
 15581                           postinc0	equ	0xFEE
 15582                           fsr0h	equ	0xFEA
 15583                           fsr0l	equ	0xFE9
 15584                           wreg	equ	0xFE8
 15585                           indf1	equ	0xFE7
 15586                           postdec1	equ	0xFE5
 15587                           fsr1h	equ	0xFE2
 15588                           fsr1l	equ	0xFE1
 15589                           indf2	equ	0xFDF
 15590                           postinc2	equ	0xFDE
 15591                           postdec2	equ	0xFDD
 15592                           fsr2h	equ	0xFDA
 15593                           fsr2l	equ	0xFD9
 15594                           status	equ	0xFD8
 15595                           
 15596 ;; *************** function _make8 *****************
 15597 ;; Defined at:
 15598 ;;		line 81 in file "SystemCommon.c"
 15599 ;; Parameters:    Size  Location     Type
 15600 ;;  data            4   23[COMRAM] unsigned long 
 15601 ;;  dataLocation    1   27[COMRAM] unsigned char 
 15602 ;; Auto vars:     Size  Location     Type
 15603 ;;		None
 15604 ;; Return value:  Size  Location     Type
 15605 ;;                  1    wreg      unsigned char 
 15606 ;; Registers used:
 15607 ;;		wreg, status,2, status,0
 15608 ;; Tracked objects:
 15609 ;;		On entry : 0/0
 15610 ;;		On exit  : 0/0
 15611 ;;		Unchanged: 0/0
 15612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15613 ;;      Params:         5       0       0       0       0       0       0
 15614 ;;      Locals:         0       0       0       0       0       0       0
 15615 ;;      Temps:          4       0       0       0       0       0       0
 15616 ;;      Totals:         9       0       0       0       0       0       0
 15617 ;;Total ram usage:        9 bytes
 15618 ;; Hardware stack levels used:    1
 15619 ;; Hardware stack levels required when called:    3
 15620 ;; This function calls:
 15621 ;;		Nothing
 15622 ;; This function is called by:
 15623 ;;		_SWSPI_send_word
 15624 ;;		_StoreIntInEeprom
 15625 ;; This function uses a non-reentrant model
 15626 ;;
 15627                           
 15628                           	psect	text63
 15629  003DAA                     __ptext63:
 15630                           	opt stack 0
 15631  003DAA                     _make8:
 15632                           	opt stack 23
 15633                           
 15634                           ;SystemCommon.c: 83: switch(dataLocation)
 15635                           
 15636                           ;incstack = 0
 15637  003DAA  D01F               	goto	l1335
 15638  003DAC                     
 15639                           ;SystemCommon.c: 86: return (data & 0x000000ff);
 15640  003DAC  5018               	movf	make8@data,w,c
 15641  003DAE  0012               	return	
 15642  003DB0                     
 15643                           ;SystemCommon.c: 89: return (data & 0x0000ff00) >> 8;
 15644  003DB0  5019               	movf	make8@data+1,w,c
 15645  003DB2  0012               	return	
 15646  003DB4                     
 15647                           ;SystemCommon.c: 92: return (data & 0x00ff0000) >> 16;
 15648  003DB4  501A               	movf	make8@data+2,w,c
 15649  003DB6  0012               	return	
 15650  003DB8                     
 15651                           ;SystemCommon.c: 95: return (data & 0xff000000) >> 24;
 15652  003DB8  0E00               	movlw	0
 15653  003DBA  1418               	andwf	make8@data,w,c
 15654  003DBC  6E1D               	movwf	??_make8& (0+255),c
 15655  003DBE  0E00               	movlw	0
 15656  003DC0  1419               	andwf	make8@data+1,w,c
 15657  003DC2  6E1E               	movwf	(??_make8+1)& (0+255),c
 15658  003DC4  0E00               	movlw	0
 15659  003DC6  141A               	andwf	make8@data+2,w,c
 15660  003DC8  6E1F               	movwf	(??_make8+2)& (0+255),c
 15661  003DCA  0EFF               	movlw	255
 15662  003DCC  141B               	andwf	make8@data+3,w,c
 15663  003DCE  6E20               	movwf	(??_make8+3)& (0+255),c
 15664  003DD0  0E19               	movlw	25
 15665  003DD2  D005               	goto	u4510
 15666  003DD4                     u4515:
 15667  003DD4  90D8               	bcf	status,0,c
 15668  003DD6  3220               	rrcf	??_make8+3,f,c
 15669  003DD8  321F               	rrcf	??_make8+2,f,c
 15670  003DDA  321E               	rrcf	??_make8+1,f,c
 15671  003DDC  321D               	rrcf	??_make8,f,c
 15672  003DDE                     u4510:
 15673  003DDE  2EE8               	decfsz	wreg,f,c
 15674  003DE0  D7F9               	goto	u4515
 15675  003DE2  501D               	movf	??_make8,w,c
 15676  003DE4  0012               	return	
 15677  003DE6                     
 15678                           ;SystemCommon.c: 98: return (0);
 15679  003DE6  0E00               	movlw	0
 15680                           
 15681                           ;SystemCommon.c: 99: }
 15682  003DE8  0012               	return	
 15683  003DEA                     l1335:
 15684  003DEA  501C               	movf	make8@dataLocation,w,c
 15685                           
 15686                           ; Switch size 1, requested type "space"
 15687                           ; Number of cases is 4, Range of values is 0 to 3
 15688                           ; switch strategies available:
 15689                           ; Name         Instructions Cycles
 15690                           ; simple_byte           13     7 (average)
 15691                           ;	Chosen strategy is simple_byte
 15692  003DEC  0A00               	xorlw	0	; case 0
 15693  003DEE  B4D8               	btfsc	status,2,c
 15694  003DF0  D7DD               	goto	l1336
 15695  003DF2  0A01               	xorlw	1	; case 1
 15696  003DF4  B4D8               	btfsc	status,2,c
 15697  003DF6  D7DC               	goto	l1338
 15698  003DF8  0A03               	xorlw	3	; case 2
 15699  003DFA  B4D8               	btfsc	status,2,c
 15700  003DFC  D7DB               	goto	l1339
 15701  003DFE  0A01               	xorlw	1	; case 3
 15702  003E00  B4D8               	btfsc	status,2,c
 15703  003E02  D7DA               	goto	l1340
 15704  003E04  D7F0               	goto	l1341
 15705  003E06                     __end_of_make8:
 15706                           	opt stack 0
 15707                           tosu	equ	0xFFF
 15708                           tosh	equ	0xFFE
 15709                           tosl	equ	0xFFD
 15710                           pclath	equ	0xFFA
 15711                           tblptru	equ	0xFF8
 15712                           tblptrh	equ	0xFF7
 15713                           tblptrl	equ	0xFF6
 15714                           tablat	equ	0xFF5
 15715                           prodh	equ	0xFF4
 15716                           prodl	equ	0xFF3
 15717                           intcon	equ	0xFF2
 15718                           intcon2	equ	0xFF1
 15719                           indf0	equ	0xFEF
 15720                           postinc0	equ	0xFEE
 15721                           fsr0h	equ	0xFEA
 15722                           fsr0l	equ	0xFE9
 15723                           wreg	equ	0xFE8
 15724                           indf1	equ	0xFE7
 15725                           postdec1	equ	0xFE5
 15726                           fsr1h	equ	0xFE2
 15727                           fsr1l	equ	0xFE1
 15728                           indf2	equ	0xFDF
 15729                           postinc2	equ	0xFDE
 15730                           postdec2	equ	0xFDD
 15731                           fsr2h	equ	0xFDA
 15732                           fsr2l	equ	0xFD9
 15733                           status	equ	0xFD8
 15734                           
 15735 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 15736 ;; Defined at:
 15737 ;;		line 232 in file "SwSpiApp.c"
 15738 ;; Parameters:    Size  Location     Type
 15739 ;;  phrType         1    wreg     enum E181
 15740 ;;  cPinMode        1   23[COMRAM] unsigned char 
 15741 ;; Auto vars:     Size  Location     Type
 15742 ;;  phrType         1   24[COMRAM] enum E181
 15743 ;; Return value:  Size  Location     Type
 15744 ;;                  1    wreg      void 
 15745 ;; Registers used:
 15746 ;;		wreg, status,2, status,0
 15747 ;; Tracked objects:
 15748 ;;		On entry : 0/0
 15749 ;;		On exit  : 0/0
 15750 ;;		Unchanged: 0/0
 15751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15752 ;;      Params:         1       0       0       0       0       0       0
 15753 ;;      Locals:         1       0       0       0       0       0       0
 15754 ;;      Temps:          0       0       0       0       0       0       0
 15755 ;;      Totals:         2       0       0       0       0       0       0
 15756 ;;Total ram usage:        2 bytes
 15757 ;; Hardware stack levels used:    1
 15758 ;; Hardware stack levels required when called:    3
 15759 ;; This function calls:
 15760 ;;		Nothing
 15761 ;; This function is called by:
 15762 ;;		_SWSPI_send_word
 15763 ;; This function uses a non-reentrant model
 15764 ;;
 15765                           
 15766                           	psect	text64
 15767  00423C                     __ptext64:
 15768                           	opt stack 0
 15769  00423C                     _SwSpi_Set_Synth_Le_Pin:
 15770                           	opt stack 24
 15771                           
 15772                           ;incstack = 0
 15773                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 15774  00423C  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 15775                           
 15776                           ;SwSpiApp.c: 234: switch(phrType)
 15777  00423E  D014               	goto	l669
 15778  004240                     
 15779                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 15780  004240  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15781  004242  A4D8               	btfss	status,2,c
 15782  004244  D002               	goto	l671
 15783                           
 15784                           ;SwSpiApp.c: 238: {
 15785                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 15786  004246  848B               	bsf	3979,2,c	;volatile
 15787                           
 15788                           ;SwSpiApp.c: 240: }
 15789  004248  0012               	return	
 15790  00424A                     l671:
 15791                           
 15792                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 15793  00424A  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15794  00424C  A4D8               	btfss	status,2,c
 15795  00424E  0012               	return	
 15796                           
 15797                           ;SwSpiApp.c: 242: {
 15798                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 15799  004250  948B               	bcf	3979,2,c	;volatile
 15800                           
 15801                           ;SwSpiApp.c: 244: }
 15802                           ;SwSpiApp.c: 245: break;
 15803  004252  0012               	return	
 15804  004254                     
 15805                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 15806  004254  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15807  004256  A4D8               	btfss	status,2,c
 15808  004258  D002               	goto	l680
 15809                           
 15810                           ;SwSpiApp.c: 249: {
 15811                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 15812  00425A  868C               	bsf	3980,3,c	;volatile
 15813                           
 15814                           ;SwSpiApp.c: 251: }
 15815  00425C  0012               	return	
 15816  00425E                     l680:
 15817                           
 15818                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 15819  00425E  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15820  004260  A4D8               	btfss	status,2,c
 15821  004262  0012               	return	
 15822                           
 15823                           ;SwSpiApp.c: 253: {
 15824                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 15825  004264  968C               	bcf	3980,3,c	;volatile
 15826                           
 15827                           ;SwSpiApp.c: 257: }
 15828                           
 15829                           ;SwSpiApp.c: 255: }
 15830                           ;SwSpiApp.c: 256: break;
 15831  004266  0012               	return	
 15832  004268                     l669:
 15833  004268  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 15834                           
 15835                           ; Switch size 1, requested type "space"
 15836                           ; Number of cases is 2, Range of values is 0 to 1
 15837                           ; switch strategies available:
 15838                           ; Name         Instructions Cycles
 15839                           ; simple_byte            7     4 (average)
 15840                           ;	Chosen strategy is simple_byte
 15841  00426A  0A00               	xorlw	0	; case 0
 15842  00426C  B4D8               	btfsc	status,2,c
 15843  00426E  D7E8               	goto	l670
 15844  004270  0A01               	xorlw	1	; case 1
 15845  004272  A4D8               	btfss	status,2,c
 15846  004274  0012               	return	
 15847  004276  D7EE               	goto	l679
 15848  004278                     __end_of_SwSpi_Set_Synth_Le_Pin:
 15849                           	opt stack 0
 15850                           tosu	equ	0xFFF
 15851                           tosh	equ	0xFFE
 15852                           tosl	equ	0xFFD
 15853                           pclath	equ	0xFFA
 15854                           tblptru	equ	0xFF8
 15855                           tblptrh	equ	0xFF7
 15856                           tblptrl	equ	0xFF6
 15857                           tablat	equ	0xFF5
 15858                           prodh	equ	0xFF4
 15859                           prodl	equ	0xFF3
 15860                           intcon	equ	0xFF2
 15861                           intcon2	equ	0xFF1
 15862                           indf0	equ	0xFEF
 15863                           postinc0	equ	0xFEE
 15864                           fsr0h	equ	0xFEA
 15865                           fsr0l	equ	0xFE9
 15866                           wreg	equ	0xFE8
 15867                           indf1	equ	0xFE7
 15868                           postdec1	equ	0xFE5
 15869                           fsr1h	equ	0xFE2
 15870                           fsr1l	equ	0xFE1
 15871                           indf2	equ	0xFDF
 15872                           postinc2	equ	0xFDE
 15873                           postdec2	equ	0xFDD
 15874                           fsr2h	equ	0xFDA
 15875                           fsr2l	equ	0xFD9
 15876                           status	equ	0xFD8
 15877                           
 15878 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 15879 ;; Defined at:
 15880 ;;		line 260 in file "SwSpiApp.c"
 15881 ;; Parameters:    Size  Location     Type
 15882 ;;  cPinMode        1    wreg     unsigned char 
 15883 ;; Auto vars:     Size  Location     Type
 15884 ;;  cPinMode        1   23[COMRAM] unsigned char 
 15885 ;; Return value:  Size  Location     Type
 15886 ;;                  1    wreg      void 
 15887 ;; Registers used:
 15888 ;;		wreg, status,2, status,0
 15889 ;; Tracked objects:
 15890 ;;		On entry : 0/0
 15891 ;;		On exit  : 0/0
 15892 ;;		Unchanged: 0/0
 15893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15894 ;;      Params:         0       0       0       0       0       0       0
 15895 ;;      Locals:         1       0       0       0       0       0       0
 15896 ;;      Temps:          0       0       0       0       0       0       0
 15897 ;;      Totals:         1       0       0       0       0       0       0
 15898 ;;Total ram usage:        1 bytes
 15899 ;; Hardware stack levels used:    1
 15900 ;; Hardware stack levels required when called:    3
 15901 ;; This function calls:
 15902 ;;		Nothing
 15903 ;; This function is called by:
 15904 ;;		_SWSPI_send_word
 15905 ;; This function uses a non-reentrant model
 15906 ;;
 15907                           
 15908                           	psect	text65
 15909  004564                     __ptext65:
 15910                           	opt stack 0
 15911  004564                     _SwSpi_Set_Dac_Sync_Pin:
 15912                           	opt stack 24
 15913                           
 15914                           ;incstack = 0
 15915                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 15916  004564  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 15917                           
 15918                           ;SwSpiApp.c: 262: switch(cPinMode)
 15919  004566  D004               	goto	l690
 15920  004568                     
 15921                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 15922  004568  9489               	bcf	3977,2,c	;volatile
 15923                           
 15924                           ;SwSpiApp.c: 266: break;
 15925  00456A  0012               	return	
 15926  00456C                     
 15927                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 15928  00456C  8489               	bsf	3977,2,c	;volatile
 15929                           
 15930                           ;SwSpiApp.c: 271: }
 15931                           
 15932                           ;SwSpiApp.c: 270: break;
 15933  00456E  0012               	return	
 15934  004570                     l690:
 15935  004570  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 15936                           
 15937                           ; Switch size 1, requested type "space"
 15938                           ; Number of cases is 2, Range of values is 0 to 1
 15939                           ; switch strategies available:
 15940                           ; Name         Instructions Cycles
 15941                           ; simple_byte            7     4 (average)
 15942                           ;	Chosen strategy is simple_byte
 15943  004572  0A00               	xorlw	0	; case 0
 15944  004574  B4D8               	btfsc	status,2,c
 15945  004576  D7F8               	goto	l691
 15946  004578  0A01               	xorlw	1	; case 1
 15947  00457A  A4D8               	btfss	status,2,c
 15948  00457C  0012               	return	
 15949  00457E  D7F6               	goto	l695
 15950  004580                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 15951                           	opt stack 0
 15952                           tosu	equ	0xFFF
 15953                           tosh	equ	0xFFE
 15954                           tosl	equ	0xFFD
 15955                           pclath	equ	0xFFA
 15956                           tblptru	equ	0xFF8
 15957                           tblptrh	equ	0xFF7
 15958                           tblptrl	equ	0xFF6
 15959                           tablat	equ	0xFF5
 15960                           prodh	equ	0xFF4
 15961                           prodl	equ	0xFF3
 15962                           intcon	equ	0xFF2
 15963                           intcon2	equ	0xFF1
 15964                           indf0	equ	0xFEF
 15965                           postinc0	equ	0xFEE
 15966                           fsr0h	equ	0xFEA
 15967                           fsr0l	equ	0xFE9
 15968                           wreg	equ	0xFE8
 15969                           indf1	equ	0xFE7
 15970                           postdec1	equ	0xFE5
 15971                           fsr1h	equ	0xFE2
 15972                           fsr1l	equ	0xFE1
 15973                           indf2	equ	0xFDF
 15974                           postinc2	equ	0xFDE
 15975                           postdec2	equ	0xFDD
 15976                           fsr2h	equ	0xFDA
 15977                           fsr2l	equ	0xFD9
 15978                           status	equ	0xFD8
 15979                           
 15980 ;; *************** function _SWSPI_Synth_send_bits *****************
 15981 ;; Defined at:
 15982 ;;		line 67 in file "SwSpiApp.c"
 15983 ;; Parameters:    Size  Location     Type
 15984 ;;  phrType         1    wreg     enum E181
 15985 ;;  data            4   35[COMRAM] unsigned long 
 15986 ;; Auto vars:     Size  Location     Type
 15987 ;;  phrType         1   37[BANK0 ] enum E181
 15988 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 15989 ;;  mask            4   32[BANK0 ] unsigned long 
 15990 ;;  count           1   36[BANK0 ] unsigned char 
 15991 ;; Return value:  Size  Location     Type
 15992 ;;                  1    wreg      void 
 15993 ;; Registers used:
 15994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15995 ;; Tracked objects:
 15996 ;;		On entry : 0/0
 15997 ;;		On exit  : 0/0
 15998 ;;		Unchanged: 0/0
 15999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16000 ;;      Params:         4       0       0       0       0       0       0
 16001 ;;      Locals:         0      38       0       0       0       0       0
 16002 ;;      Temps:          0       0       0       0       0       0       0
 16003 ;;      Totals:         4      38       0       0       0       0       0
 16004 ;;Total ram usage:       42 bytes
 16005 ;; Hardware stack levels used:    1
 16006 ;; Hardware stack levels required when called:    5
 16007 ;; This function calls:
 16008 ;;		_Make32bitsArray
 16009 ;;		_SwSpi_Clk_Pin
 16010 ;;		_SwSpi_Data_Pin
 16011 ;;		_ZeroArray
 16012 ;; This function is called by:
 16013 ;;		_SWSPI_send_word
 16014 ;; This function uses a non-reentrant model
 16015 ;;
 16016                           
 16017                           	psect	text66
 16018  003108                     __ptext66:
 16019                           	opt stack 0
 16020  003108                     _SWSPI_Synth_send_bits:
 16021                           	opt stack 22
 16022                           
 16023                           ;incstack = 0
 16024                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 16025  003108  0100               	movlb	0	; () banked
 16026  00310A  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 16027                           
 16028                           ;SwSpiApp.c: 69: uint8_t count;
 16029                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 16030  00310C  0E01               	movlw	1
 16031  00310E  0100               	movlb	0	; () banked
 16032  003110  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 16033  003112  0E00               	movlw	0
 16034  003114  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 16035  003116  0E00               	movlw	0
 16036  003118  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 16037  00311A  0E00               	movlw	0
 16038  00311C  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 16039                           
 16040                           ; BSR set to: 0
 16041                           ;SwSpiApp.c: 72: bool bitArray[32];
 16042                           ;SwSpiApp.c: 73: ZeroArray(bitArray, sizeof(bitArray));
 16043  00311E  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 16044  003120  6E20               	movwf	ZeroArray@array,c
 16045  003122  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 16046  003124  6E21               	movwf	ZeroArray@array+1,c
 16047  003126  0E00               	movlw	0
 16048  003128  6E23               	movwf	ZeroArray@size+1,c
 16049  00312A  0E20               	movlw	32
 16050  00312C  6E22               	movwf	ZeroArray@size,c
 16051  00312E  ECA3  F022         	call	_ZeroArray	;wreg free
 16052                           
 16053                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 16054  003132  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 16055  003134  6E18               	movwf	Make32bitsArray@array,c
 16056  003136  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 16057  003138  6E19               	movwf	Make32bitsArray@array+1,c
 16058  00313A  C024  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 16059  00313E  C025  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 16060  003142  C026  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 16061  003146  C027  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 16062  00314A  EC31  F01F         	call	_Make32bitsArray	;wreg free
 16063                           
 16064                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 16065  00314E  0E00               	movlw	0
 16066  003150  0100               	movlb	0	; () banked
 16067  003152  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 16068  003154                     l8863:
 16069                           
 16070                           ; BSR set to: 0
 16071  003154  0E1F               	movlw	31
 16072  003156  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 16073  003158  D001               	goto	l575
 16074  00315A  D026               	goto	u8860
 16075  00315C                     l575:
 16076                           
 16077                           ; BSR set to: 0
 16078                           ;SwSpiApp.c: 78: {
 16079                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 16080                           
 16081                           ; BSR set to: 0
 16082  00315C  0E00               	movlw	0
 16083  00315E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16084  003160  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16085  003162  ECB4  F01F         	call	_SwSpi_Clk_Pin
 16086                           
 16087                           ;SwSpiApp.c: 82: if (bitArray[count])
 16088  003166  0100               	movlb	0	; () banked
 16089  003168  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 16090  00316A  0D01               	mullw	1
 16091  00316C  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 16092  00316E  24F3               	addwf	prodl,w,c
 16093  003170  6ED9               	movwf	fsr2l,c
 16094  003172  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 16095  003174  20F4               	addwfc	prodh,w,c
 16096  003176  6EDA               	movwf	fsr2h,c
 16097  003178  50DF               	movf	indf2,w,c
 16098  00317A  B4D8               	btfsc	status,2,c
 16099  00317C  D006               	goto	l577
 16100                           
 16101                           ; BSR set to: 0
 16102                           ;SwSpiApp.c: 83: {
 16103                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 16104  00317E  0E01               	movlw	1
 16105  003180  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16106  003182  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16107  003184  EC89  F01F         	call	_SwSpi_Data_Pin
 16108                           
 16109                           ;SwSpiApp.c: 85: }
 16110  003188  D006               	goto	l578
 16111  00318A                     l577:
 16112                           
 16113                           ;SwSpiApp.c: 86: else
 16114                           ;SwSpiApp.c: 87: {
 16115                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 16116  00318A  0E00               	movlw	0
 16117  00318C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16118  00318E  0100               	movlb	0	; () banked
 16119  003190  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16120  003192  EC89  F01F         	call	_SwSpi_Data_Pin
 16121  003196                     l578:
 16122                           
 16123                           ;SwSpiApp.c: 89: }
 16124                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 16125  003196  0E01               	movlw	1
 16126  003198  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16127  00319A  0100               	movlb	0	; () banked
 16128  00319C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16129  00319E  ECB4  F01F         	call	_SwSpi_Clk_Pin
 16130  0031A2  0100               	movlb	0	; () banked
 16131  0031A4  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 16132  0031A6  D7D6               	goto	l8863
 16133  0031A8                     u8860:
 16134                           
 16135                           ; BSR set to: 0
 16136                           ;SwSpiApp.c: 92: }
 16137                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 16138                           
 16139                           ; BSR set to: 0
 16140  0031A8  0E21               	movlw	33
 16141  0031AA                     u9677:
 16142  0031AA  2EE8               	decfsz	wreg,f,c
 16143  0031AC  D7FE               	bra	u9677
 16144  0031AE  F000               	nop	
 16145                           
 16146                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 16147  0031B0  0E00               	movlw	0
 16148  0031B2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16149  0031B4  0100               	movlb	0	; () banked
 16150  0031B6  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16151  0031B8  EC89  F01F         	call	_SwSpi_Data_Pin
 16152                           
 16153                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 16154  0031BC  0E00               	movlw	0
 16155  0031BE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16156  0031C0  0100               	movlb	0	; () banked
 16157  0031C2  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 16158  0031C4  ECB4  F01F         	call	_SwSpi_Clk_Pin
 16159  0031C8  0012               	return		;funcret
 16160  0031CA                     __end_of_SWSPI_Synth_send_bits:
 16161                           	opt stack 0
 16162                           tosu	equ	0xFFF
 16163                           tosh	equ	0xFFE
 16164                           tosl	equ	0xFFD
 16165                           pclath	equ	0xFFA
 16166                           tblptru	equ	0xFF8
 16167                           tblptrh	equ	0xFF7
 16168                           tblptrl	equ	0xFF6
 16169                           tablat	equ	0xFF5
 16170                           prodh	equ	0xFF4
 16171                           prodl	equ	0xFF3
 16172                           intcon	equ	0xFF2
 16173                           intcon2	equ	0xFF1
 16174                           indf0	equ	0xFEF
 16175                           postinc0	equ	0xFEE
 16176                           fsr0h	equ	0xFEA
 16177                           fsr0l	equ	0xFE9
 16178                           wreg	equ	0xFE8
 16179                           indf1	equ	0xFE7
 16180                           postdec1	equ	0xFE5
 16181                           fsr1h	equ	0xFE2
 16182                           fsr1l	equ	0xFE1
 16183                           indf2	equ	0xFDF
 16184                           postinc2	equ	0xFDE
 16185                           postdec2	equ	0xFDD
 16186                           fsr2h	equ	0xFDA
 16187                           fsr2l	equ	0xFD9
 16188                           status	equ	0xFD8
 16189                           
 16190 ;; *************** function _ZeroArray *****************
 16191 ;; Defined at:
 16192 ;;		line 33 in file "SystemCommon.c"
 16193 ;; Parameters:    Size  Location     Type
 16194 ;;  array           2   31[COMRAM] PTR unsigned char 
 16195 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), UpdateSynthFreq@regSynthArray(16), rxMsgDa
      +ta(20), 
 16196 ;;		 -> rxMsgQueue(20), 
 16197 ;;  size            2   33[COMRAM] int 
 16198 ;; Auto vars:     Size  Location     Type
 16199 ;;		None
 16200 ;; Return value:  Size  Location     Type
 16201 ;;                  1    wreg      void 
 16202 ;; Registers used:
 16203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16204 ;; Tracked objects:
 16205 ;;		On entry : 0/0
 16206 ;;		On exit  : 0/0
 16207 ;;		Unchanged: 0/0
 16208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16209 ;;      Params:         4       0       0       0       0       0       0
 16210 ;;      Locals:         0       0       0       0       0       0       0
 16211 ;;      Temps:          0       0       0       0       0       0       0
 16212 ;;      Totals:         4       0       0       0       0       0       0
 16213 ;;Total ram usage:        4 bytes
 16214 ;; Hardware stack levels used:    1
 16215 ;; Hardware stack levels required when called:    4
 16216 ;; This function calls:
 16217 ;;		_memset
 16218 ;; This function is called by:
 16219 ;;		_InitRxMessageParams
 16220 ;;		_SWSPI_Synth_send_bits
 16221 ;;		_GetIntFromUartData
 16222 ;;		_UpdateSynthFreq
 16223 ;; This function uses a non-reentrant model
 16224 ;;
 16225                           
 16226                           	psect	text67
 16227  004546                     __ptext67:
 16228                           	opt stack 0
 16229  004546                     _ZeroArray:
 16230                           	opt stack 24
 16231                           
 16232                           ;SystemCommon.c: 35: memset(array, 0x0, size);
 16233                           
 16234                           ;incstack = 0
 16235  004546  C020  F018         	movff	ZeroArray@array,memset@p1
 16236  00454A  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 16237  00454E  0E00               	movlw	0
 16238  004550  6E1B               	movwf	memset@c+1,c
 16239  004552  0E00               	movlw	0
 16240  004554  6E1A               	movwf	memset@c,c
 16241  004556  C022  F01C         	movff	ZeroArray@size,memset@n
 16242  00455A  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 16243  00455E  EC11  F022         	call	_memset	;wreg free
 16244  004562  0012               	return		;funcret
 16245  004564                     __end_of_ZeroArray:
 16246                           	opt stack 0
 16247                           tosu	equ	0xFFF
 16248                           tosh	equ	0xFFE
 16249                           tosl	equ	0xFFD
 16250                           pclath	equ	0xFFA
 16251                           tblptru	equ	0xFF8
 16252                           tblptrh	equ	0xFF7
 16253                           tblptrl	equ	0xFF6
 16254                           tablat	equ	0xFF5
 16255                           prodh	equ	0xFF4
 16256                           prodl	equ	0xFF3
 16257                           intcon	equ	0xFF2
 16258                           intcon2	equ	0xFF1
 16259                           indf0	equ	0xFEF
 16260                           postinc0	equ	0xFEE
 16261                           fsr0h	equ	0xFEA
 16262                           fsr0l	equ	0xFE9
 16263                           wreg	equ	0xFE8
 16264                           indf1	equ	0xFE7
 16265                           postdec1	equ	0xFE5
 16266                           fsr1h	equ	0xFE2
 16267                           fsr1l	equ	0xFE1
 16268                           indf2	equ	0xFDF
 16269                           postinc2	equ	0xFDE
 16270                           postdec2	equ	0xFDD
 16271                           fsr2h	equ	0xFDA
 16272                           fsr2l	equ	0xFD9
 16273                           status	equ	0xFD8
 16274                           
 16275 ;; *************** function _memset *****************
 16276 ;; Defined at:
 16277 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 16278 ;; Parameters:    Size  Location     Type
 16279 ;;  p1              2   23[COMRAM] PTR void 
 16280 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), UpdateSynthFreq@regSynthArray(16), rxMsgDa
      +ta(20), 
 16281 ;;		 -> rxMsgQueue(20), 
 16282 ;;  c               2   25[COMRAM] int 
 16283 ;;  n               2   27[COMRAM] unsigned int 
 16284 ;; Auto vars:     Size  Location     Type
 16285 ;;  p               2   29[COMRAM] PTR unsigned char 
 16286 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), UpdateSynthFreq@regSynthArray(16), rxMsgDa
      +ta(20), 
 16287 ;;		 -> rxMsgQueue(20), 
 16288 ;; Return value:  Size  Location     Type
 16289 ;;                  2   23[COMRAM] PTR void 
 16290 ;; Registers used:
 16291 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16292 ;; Tracked objects:
 16293 ;;		On entry : 0/0
 16294 ;;		On exit  : 0/0
 16295 ;;		Unchanged: 0/0
 16296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16297 ;;      Params:         6       0       0       0       0       0       0
 16298 ;;      Locals:         2       0       0       0       0       0       0
 16299 ;;      Temps:          0       0       0       0       0       0       0
 16300 ;;      Totals:         8       0       0       0       0       0       0
 16301 ;;Total ram usage:        8 bytes
 16302 ;; Hardware stack levels used:    1
 16303 ;; Hardware stack levels required when called:    3
 16304 ;; This function calls:
 16305 ;;		Nothing
 16306 ;; This function is called by:
 16307 ;;		_ZeroArray
 16308 ;; This function uses a non-reentrant model
 16309 ;;
 16310                           
 16311                           	psect	text68
 16312  004422                     __ptext68:
 16313                           	opt stack 0
 16314  004422                     _memset:
 16315                           	opt stack 24
 16316                           
 16317                           ;incstack = 0
 16318  004422  C018  F01E         	movff	memset@p1,memset@p
 16319  004426  C019  F01F         	movff	memset@p1+1,memset@p+1
 16320  00442A  D008               	goto	l2180
 16321  00442C                     l7897:
 16322  00442C  C01E  FFD9         	movff	memset@p,fsr2l
 16323  004430  C01F  FFDA         	movff	memset@p+1,fsr2h
 16324  004434  C01A  FFDF         	movff	memset@c,indf2
 16325  004438  4A1E               	infsnz	memset@p,f,c
 16326  00443A  2A1F               	incf	memset@p+1,f,c
 16327  00443C                     l2180:
 16328  00443C  061C               	decf	memset@n,f,c
 16329  00443E  A0D8               	btfss	status,0,c
 16330  004440  061D               	decf	memset@n+1,f,c
 16331  004442  281C               	incf	memset@n,w,c
 16332  004444  E1F3               	bnz	l7897
 16333  004446  281D               	incf	memset@n+1,w,c
 16334  004448  B4D8               	btfsc	status,2,c
 16335  00444A  0012               	return	
 16336  00444C  D7EF               	goto	l2181
 16337  00444E                     __end_of_memset:
 16338                           	opt stack 0
 16339                           tosu	equ	0xFFF
 16340                           tosh	equ	0xFFE
 16341                           tosl	equ	0xFFD
 16342                           pclath	equ	0xFFA
 16343                           tblptru	equ	0xFF8
 16344                           tblptrh	equ	0xFF7
 16345                           tblptrl	equ	0xFF6
 16346                           tablat	equ	0xFF5
 16347                           prodh	equ	0xFF4
 16348                           prodl	equ	0xFF3
 16349                           intcon	equ	0xFF2
 16350                           intcon2	equ	0xFF1
 16351                           indf0	equ	0xFEF
 16352                           postinc0	equ	0xFEE
 16353                           fsr0h	equ	0xFEA
 16354                           fsr0l	equ	0xFE9
 16355                           wreg	equ	0xFE8
 16356                           indf1	equ	0xFE7
 16357                           postdec1	equ	0xFE5
 16358                           fsr1h	equ	0xFE2
 16359                           fsr1l	equ	0xFE1
 16360                           indf2	equ	0xFDF
 16361                           postinc2	equ	0xFDE
 16362                           postdec2	equ	0xFDD
 16363                           fsr2h	equ	0xFDA
 16364                           fsr2l	equ	0xFD9
 16365                           status	equ	0xFD8
 16366                           
 16367 ;; *************** function _Make32bitsArray *****************
 16368 ;; Defined at:
 16369 ;;		line 24 in file "SystemCommon.c"
 16370 ;; Parameters:    Size  Location     Type
 16371 ;;  array           2   23[COMRAM] PTR unsigned char 
 16372 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 16373 ;;  data            4   25[COMRAM] unsigned long 
 16374 ;; Auto vars:     Size  Location     Type
 16375 ;;  idx             2   31[COMRAM] int 
 16376 ;; Return value:  Size  Location     Type
 16377 ;;                  1    wreg      void 
 16378 ;; Registers used:
 16379 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16380 ;; Tracked objects:
 16381 ;;		On entry : 0/0
 16382 ;;		On exit  : 0/0
 16383 ;;		Unchanged: 0/0
 16384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16385 ;;      Params:         6       0       0       0       0       0       0
 16386 ;;      Locals:         2       0       0       0       0       0       0
 16387 ;;      Temps:          2       0       0       0       0       0       0
 16388 ;;      Totals:        10       0       0       0       0       0       0
 16389 ;;Total ram usage:       10 bytes
 16390 ;; Hardware stack levels used:    1
 16391 ;; Hardware stack levels required when called:    3
 16392 ;; This function calls:
 16393 ;;		Nothing
 16394 ;; This function is called by:
 16395 ;;		_SWSPI_Synth_send_bits
 16396 ;; This function uses a non-reentrant model
 16397 ;;
 16398                           
 16399                           	psect	text69
 16400  003E62                     __ptext69:
 16401                           	opt stack 0
 16402  003E62                     _Make32bitsArray:
 16403                           	opt stack 23
 16404                           
 16405                           ;SystemCommon.c: 26: for(int idx = 0; idx <= 32; idx++)
 16406                           
 16407                           ;incstack = 0
 16408  003E62  0E00               	movlw	0
 16409  003E64  6E21               	movwf	Make32bitsArray@idx+1,c
 16410  003E66  0E00               	movlw	0
 16411  003E68  6E20               	movwf	Make32bitsArray@idx,c
 16412  003E6A                     l5789:
 16413  003E6A  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 16414  003E6C  D006               	goto	l1308
 16415  003E6E  5021               	movf	Make32bitsArray@idx+1,w,c
 16416  003E70  E123               	bnz	l1310
 16417  003E72  0E21               	movlw	33
 16418  003E74  5C20               	subwf	Make32bitsArray@idx,w,c
 16419  003E76  B0D8               	btfsc	status,0,c
 16420  003E78  0012               	return	
 16421  003E7A                     l1308:
 16422                           
 16423                           ;SystemCommon.c: 27: {
 16424                           ;SystemCommon.c: 28: array[32 - idx - 1] = data % 2;
 16425  003E7A  0E01               	movlw	1
 16426  003E7C  2420               	addwf	Make32bitsArray@idx,w,c
 16427  003E7E  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 16428  003E80  0E00               	movlw	0
 16429  003E82  2021               	addwfc	Make32bitsArray@idx+1,w,c
 16430  003E84  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 16431  003E86  1E1E               	comf	??_Make32bitsArray,f,c
 16432  003E88  1E1F               	comf	??_Make32bitsArray+1,f,c
 16433  003E8A  4A1E               	infsnz	??_Make32bitsArray,f,c
 16434  003E8C  2A1F               	incf	??_Make32bitsArray+1,f,c
 16435  003E8E  0E20               	movlw	32
 16436  003E90  261E               	addwf	??_Make32bitsArray,f,c
 16437  003E92  0E00               	movlw	0
 16438  003E94  221F               	addwfc	??_Make32bitsArray+1,f,c
 16439  003E96  501E               	movf	??_Make32bitsArray,w,c
 16440  003E98  2418               	addwf	Make32bitsArray@array,w,c
 16441  003E9A  6ED9               	movwf	fsr2l,c
 16442  003E9C  501F               	movf	??_Make32bitsArray+1,w,c
 16443  003E9E  2019               	addwfc	Make32bitsArray@array+1,w,c
 16444  003EA0  6EDA               	movwf	fsr2h,c
 16445  003EA2  501A               	movf	Make32bitsArray@data,w,c
 16446  003EA4  0B01               	andlw	1
 16447  003EA6  6EDF               	movwf	indf2,c
 16448                           
 16449                           ;SystemCommon.c: 29: data /= 2;
 16450  003EA8  90D8               	bcf	status,0,c
 16451  003EAA  321D               	rrcf	Make32bitsArray@data+3,f,c
 16452  003EAC  321C               	rrcf	Make32bitsArray@data+2,f,c
 16453  003EAE  321B               	rrcf	Make32bitsArray@data+1,f,c
 16454  003EB0  321A               	rrcf	Make32bitsArray@data,f,c
 16455  003EB2  4A20               	infsnz	Make32bitsArray@idx,f,c
 16456  003EB4  2A21               	incf	Make32bitsArray@idx+1,f,c
 16457  003EB6  D7D9               	goto	l5789
 16458  003EB8                     l1310:
 16459  003EB8  0012               	return		;funcret
 16460  003EBA                     __end_of_Make32bitsArray:
 16461                           	opt stack 0
 16462                           tosu	equ	0xFFF
 16463                           tosh	equ	0xFFE
 16464                           tosl	equ	0xFFD
 16465                           pclath	equ	0xFFA
 16466                           tblptru	equ	0xFF8
 16467                           tblptrh	equ	0xFF7
 16468                           tblptrl	equ	0xFF6
 16469                           tablat	equ	0xFF5
 16470                           prodh	equ	0xFF4
 16471                           prodl	equ	0xFF3
 16472                           intcon	equ	0xFF2
 16473                           intcon2	equ	0xFF1
 16474                           indf0	equ	0xFEF
 16475                           postinc0	equ	0xFEE
 16476                           fsr0h	equ	0xFEA
 16477                           fsr0l	equ	0xFE9
 16478                           wreg	equ	0xFE8
 16479                           indf1	equ	0xFE7
 16480                           postdec1	equ	0xFE5
 16481                           fsr1h	equ	0xFE2
 16482                           fsr1l	equ	0xFE1
 16483                           indf2	equ	0xFDF
 16484                           postinc2	equ	0xFDE
 16485                           postdec2	equ	0xFDD
 16486                           fsr2h	equ	0xFDA
 16487                           fsr2l	equ	0xFD9
 16488                           status	equ	0xFD8
 16489                           
 16490 ;; *************** function _SWSPI_DAC_send_bits *****************
 16491 ;; Defined at:
 16492 ;;		line 43 in file "SwSpiApp.c"
 16493 ;; Parameters:    Size  Location     Type
 16494 ;;  phrType         1    wreg     enum E181
 16495 ;;  data            1   25[COMRAM] unsigned char 
 16496 ;; Auto vars:     Size  Location     Type
 16497 ;;  phrType         1   27[COMRAM] enum E181
 16498 ;;  count           1   26[COMRAM] unsigned char 
 16499 ;; Return value:  Size  Location     Type
 16500 ;;                  1    wreg      void 
 16501 ;; Registers used:
 16502 ;;		wreg, status,2, status,0, cstack
 16503 ;; Tracked objects:
 16504 ;;		On entry : 0/0
 16505 ;;		On exit  : 0/0
 16506 ;;		Unchanged: 0/0
 16507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16508 ;;      Params:         1       0       0       0       0       0       0
 16509 ;;      Locals:         2       0       0       0       0       0       0
 16510 ;;      Temps:          0       0       0       0       0       0       0
 16511 ;;      Totals:         3       0       0       0       0       0       0
 16512 ;;Total ram usage:        3 bytes
 16513 ;; Hardware stack levels used:    1
 16514 ;; Hardware stack levels required when called:    4
 16515 ;; This function calls:
 16516 ;;		_SwSpi_Clk_Pin
 16517 ;;		_SwSpi_Data_Pin
 16518 ;; This function is called by:
 16519 ;;		_SWSPI_send_word
 16520 ;; This function uses a non-reentrant model
 16521 ;;
 16522                           
 16523                           	psect	text70
 16524  003EBA                     __ptext70:
 16525                           	opt stack 0
 16526  003EBA                     _SWSPI_DAC_send_bits:
 16527                           	opt stack 23
 16528                           
 16529                           ;incstack = 0
 16530                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 16531  003EBA  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 16532                           
 16533                           ;SwSpiApp.c: 45: uint8_t count;
 16534                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 16535  003EBC  0E08               	movlw	8
 16536  003EBE  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 16537  003EC0  D01A               	goto	l567
 16538  003EC2                     
 16539                           ;SwSpiApp.c: 47: {
 16540                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 16541  003EC2  0E01               	movlw	1
 16542  003EC4  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16543  003EC6  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16544  003EC8  ECB4  F01F         	call	_SwSpi_Clk_Pin
 16545                           
 16546                           ;SwSpiApp.c: 50: if (data & 0X80)
 16547  003ECC  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 16548  003ECE  D006               	goto	l569
 16549                           
 16550                           ;SwSpiApp.c: 51: {
 16551                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 16552  003ED0  0E01               	movlw	1
 16553  003ED2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16554  003ED4  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16555  003ED6  EC89  F01F         	call	_SwSpi_Data_Pin
 16556                           
 16557                           ;SwSpiApp.c: 54: }
 16558  003EDA  D005               	goto	l570
 16559  003EDC                     l569:
 16560                           
 16561                           ;SwSpiApp.c: 55: else
 16562                           ;SwSpiApp.c: 56: {
 16563                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 16564  003EDC  0E00               	movlw	0
 16565  003EDE  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16566  003EE0  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16567  003EE2  EC89  F01F         	call	_SwSpi_Data_Pin
 16568  003EE6                     l570:
 16569                           
 16570                           ;SwSpiApp.c: 58: }
 16571                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 16572  003EE6  0E00               	movlw	0
 16573  003EE8  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16574  003EEA  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16575  003EEC  ECB4  F01F         	call	_SwSpi_Clk_Pin
 16576  003EF0  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 16577  003EF2  90D8               	bcf	status,0,c
 16578  003EF4  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 16579  003EF6                     l567:
 16580  003EF6  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 16581  003EF8  A4D8               	btfss	status,2,c
 16582  003EFA  D7E3               	goto	l568
 16583                           
 16584                           ;SwSpiApp.c: 61: }
 16585                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 16586  003EFC  0E00               	movlw	0
 16587  003EFE  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16588  003F00  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16589  003F02  EC89  F01F         	call	_SwSpi_Data_Pin
 16590                           
 16591                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 16592  003F06  0E00               	movlw	0
 16593  003F08  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16594  003F0A  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16595  003F0C  ECB4  F01F         	call	_SwSpi_Clk_Pin
 16596  003F10  0012               	return		;funcret
 16597  003F12                     __end_of_SWSPI_DAC_send_bits:
 16598                           	opt stack 0
 16599                           tosu	equ	0xFFF
 16600                           tosh	equ	0xFFE
 16601                           tosl	equ	0xFFD
 16602                           pclath	equ	0xFFA
 16603                           tblptru	equ	0xFF8
 16604                           tblptrh	equ	0xFF7
 16605                           tblptrl	equ	0xFF6
 16606                           tablat	equ	0xFF5
 16607                           prodh	equ	0xFF4
 16608                           prodl	equ	0xFF3
 16609                           intcon	equ	0xFF2
 16610                           intcon2	equ	0xFF1
 16611                           indf0	equ	0xFEF
 16612                           postinc0	equ	0xFEE
 16613                           fsr0h	equ	0xFEA
 16614                           fsr0l	equ	0xFE9
 16615                           wreg	equ	0xFE8
 16616                           indf1	equ	0xFE7
 16617                           postdec1	equ	0xFE5
 16618                           fsr1h	equ	0xFE2
 16619                           fsr1l	equ	0xFE1
 16620                           indf2	equ	0xFDF
 16621                           postinc2	equ	0xFDE
 16622                           postdec2	equ	0xFDD
 16623                           fsr2h	equ	0xFDA
 16624                           fsr2l	equ	0xFD9
 16625                           status	equ	0xFD8
 16626                           
 16627 ;; *************** function _SwSpi_Data_Pin *****************
 16628 ;; Defined at:
 16629 ;;		line 103 in file "SwSpiApp.c"
 16630 ;; Parameters:    Size  Location     Type
 16631 ;;  phrType         1    wreg     enum E181
 16632 ;;  cPinMode        1   23[COMRAM] unsigned char 
 16633 ;; Auto vars:     Size  Location     Type
 16634 ;;  phrType         1   24[COMRAM] enum E181
 16635 ;; Return value:  Size  Location     Type
 16636 ;;                  1    wreg      void 
 16637 ;; Registers used:
 16638 ;;		wreg, status,2, status,0
 16639 ;; Tracked objects:
 16640 ;;		On entry : 0/0
 16641 ;;		On exit  : 0/0
 16642 ;;		Unchanged: 0/0
 16643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16644 ;;      Params:         1       0       0       0       0       0       0
 16645 ;;      Locals:         1       0       0       0       0       0       0
 16646 ;;      Temps:          0       0       0       0       0       0       0
 16647 ;;      Totals:         2       0       0       0       0       0       0
 16648 ;;Total ram usage:        2 bytes
 16649 ;; Hardware stack levels used:    1
 16650 ;; Hardware stack levels required when called:    3
 16651 ;; This function calls:
 16652 ;;		Nothing
 16653 ;; This function is called by:
 16654 ;;		_SWSPI_DAC_send_bits
 16655 ;;		_SWSPI_Synth_send_bits
 16656 ;; This function uses a non-reentrant model
 16657 ;;
 16658                           
 16659                           	psect	text71
 16660  003F12                     __ptext71:
 16661                           	opt stack 0
 16662  003F12                     _SwSpi_Data_Pin:
 16663                           	opt stack 23
 16664                           
 16665                           ;incstack = 0
 16666                           ;SwSpi_Data_Pin@phrType stored from wreg
 16667  003F12  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 16668                           
 16669                           ;SwSpiApp.c: 105: switch(phrType)
 16670  003F14  D01E               	goto	l582
 16671  003F16                     
 16672                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 16673  003F16  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 16674  003F18  A4D8               	btfss	status,2,c
 16675  003F1A  D002               	goto	l584
 16676                           
 16677                           ;SwSpiApp.c: 109: {
 16678                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 16679  003F1C  808C               	bsf	3980,0,c	;volatile
 16680                           
 16681                           ;SwSpiApp.c: 111: }
 16682  003F1E  0012               	return	
 16683  003F20                     l584:
 16684                           
 16685                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 16686  003F20  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 16687  003F22  A4D8               	btfss	status,2,c
 16688  003F24  0012               	return	
 16689                           
 16690                           ;SwSpiApp.c: 113: {
 16691                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 16692  003F26  908C               	bcf	3980,0,c	;volatile
 16693                           
 16694                           ;SwSpiApp.c: 115: }
 16695                           ;SwSpiApp.c: 116: break;
 16696  003F28  0012               	return	
 16697  003F2A                     
 16698                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 16699  003F2A  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 16700  003F2C  A4D8               	btfss	status,2,c
 16701  003F2E  D002               	goto	l593
 16702                           
 16703                           ;SwSpiApp.c: 120: {
 16704                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 16705  003F30  8A8B               	bsf	3979,5,c	;volatile
 16706                           
 16707                           ;SwSpiApp.c: 122: }
 16708  003F32  0012               	return	
 16709  003F34                     l593:
 16710                           
 16711                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 16712  003F34  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 16713  003F36  A4D8               	btfss	status,2,c
 16714  003F38  0012               	return	
 16715                           
 16716                           ;SwSpiApp.c: 124: {
 16717                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 16718  003F3A  9A8B               	bcf	3979,5,c	;volatile
 16719                           
 16720                           ;SwSpiApp.c: 126: }
 16721                           ;SwSpiApp.c: 127: break;
 16722  003F3C  0012               	return	
 16723  003F3E                     
 16724                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 16725  003F3E  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 16726  003F40  A4D8               	btfss	status,2,c
 16727  003F42  D002               	goto	l601
 16728                           
 16729                           ;SwSpiApp.c: 131: {
 16730                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 16731  003F44  8889               	bsf	3977,4,c	;volatile
 16732                           
 16733                           ;SwSpiApp.c: 133: }
 16734  003F46  0012               	return	
 16735  003F48                     l601:
 16736                           
 16737                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 16738  003F48  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 16739  003F4A  A4D8               	btfss	status,2,c
 16740  003F4C  0012               	return	
 16741                           
 16742                           ;SwSpiApp.c: 135: {
 16743                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 16744  003F4E  9889               	bcf	3977,4,c	;volatile
 16745                           
 16746                           ;SwSpiApp.c: 139: }
 16747                           
 16748                           ;SwSpiApp.c: 137: }
 16749                           ;SwSpiApp.c: 138: break;
 16750  003F50  0012               	return	
 16751  003F52                     l582:
 16752  003F52  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 16753                           
 16754                           ; Switch size 1, requested type "space"
 16755                           ; Number of cases is 3, Range of values is 0 to 2
 16756                           ; switch strategies available:
 16757                           ; Name         Instructions Cycles
 16758                           ; simple_byte           10     6 (average)
 16759                           ;	Chosen strategy is simple_byte
 16760  003F54  0A00               	xorlw	0	; case 0
 16761  003F56  B4D8               	btfsc	status,2,c
 16762  003F58  D7DE               	goto	l583
 16763  003F5A  0A01               	xorlw	1	; case 1
 16764  003F5C  B4D8               	btfsc	status,2,c
 16765  003F5E  D7E5               	goto	l592
 16766  003F60  0A03               	xorlw	3	; case 2
 16767  003F62  A4D8               	btfss	status,2,c
 16768  003F64  0012               	return	
 16769  003F66  D7EB               	goto	l600
 16770  003F68                     __end_of_SwSpi_Data_Pin:
 16771                           	opt stack 0
 16772                           tosu	equ	0xFFF
 16773                           tosh	equ	0xFFE
 16774                           tosl	equ	0xFFD
 16775                           pclath	equ	0xFFA
 16776                           tblptru	equ	0xFF8
 16777                           tblptrh	equ	0xFF7
 16778                           tblptrl	equ	0xFF6
 16779                           tablat	equ	0xFF5
 16780                           prodh	equ	0xFF4
 16781                           prodl	equ	0xFF3
 16782                           intcon	equ	0xFF2
 16783                           intcon2	equ	0xFF1
 16784                           indf0	equ	0xFEF
 16785                           postinc0	equ	0xFEE
 16786                           fsr0h	equ	0xFEA
 16787                           fsr0l	equ	0xFE9
 16788                           wreg	equ	0xFE8
 16789                           indf1	equ	0xFE7
 16790                           postdec1	equ	0xFE5
 16791                           fsr1h	equ	0xFE2
 16792                           fsr1l	equ	0xFE1
 16793                           indf2	equ	0xFDF
 16794                           postinc2	equ	0xFDE
 16795                           postdec2	equ	0xFDD
 16796                           fsr2h	equ	0xFDA
 16797                           fsr2l	equ	0xFD9
 16798                           status	equ	0xFD8
 16799                           
 16800 ;; *************** function _SwSpi_Clk_Pin *****************
 16801 ;; Defined at:
 16802 ;;		line 142 in file "SwSpiApp.c"
 16803 ;; Parameters:    Size  Location     Type
 16804 ;;  phrType         1    wreg     enum E181
 16805 ;;  cPinMode        1   23[COMRAM] unsigned char 
 16806 ;; Auto vars:     Size  Location     Type
 16807 ;;  phrType         1   24[COMRAM] enum E181
 16808 ;; Return value:  Size  Location     Type
 16809 ;;                  1    wreg      void 
 16810 ;; Registers used:
 16811 ;;		wreg, status,2, status,0
 16812 ;; Tracked objects:
 16813 ;;		On entry : 0/0
 16814 ;;		On exit  : 0/0
 16815 ;;		Unchanged: 0/0
 16816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16817 ;;      Params:         1       0       0       0       0       0       0
 16818 ;;      Locals:         1       0       0       0       0       0       0
 16819 ;;      Temps:          0       0       0       0       0       0       0
 16820 ;;      Totals:         2       0       0       0       0       0       0
 16821 ;;Total ram usage:        2 bytes
 16822 ;; Hardware stack levels used:    1
 16823 ;; Hardware stack levels required when called:    3
 16824 ;; This function calls:
 16825 ;;		Nothing
 16826 ;; This function is called by:
 16827 ;;		_SWSPI_DAC_send_bits
 16828 ;;		_SWSPI_Synth_send_bits
 16829 ;;		_SwSpi_Synth_Toggle_Clock
 16830 ;; This function uses a non-reentrant model
 16831 ;;
 16832                           
 16833                           	psect	text72
 16834  003F68                     __ptext72:
 16835                           	opt stack 0
 16836  003F68                     _SwSpi_Clk_Pin:
 16837                           	opt stack 23
 16838                           
 16839                           ;incstack = 0
 16840                           ;SwSpi_Clk_Pin@phrType stored from wreg
 16841  003F68  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 16842                           
 16843                           ;SwSpiApp.c: 144: switch(phrType)
 16844  003F6A  D01E               	goto	l611
 16845  003F6C                     
 16846                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 16847  003F6C  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 16848  003F6E  A4D8               	btfss	status,2,c
 16849  003F70  D002               	goto	l613
 16850                           
 16851                           ;SwSpiApp.c: 148: {
 16852                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 16853  003F72  868B               	bsf	3979,3,c	;volatile
 16854                           
 16855                           ;SwSpiApp.c: 150: }
 16856  003F74  0012               	return	
 16857  003F76                     l613:
 16858                           
 16859                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 16860  003F76  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 16861  003F78  A4D8               	btfss	status,2,c
 16862  003F7A  0012               	return	
 16863                           
 16864                           ;SwSpiApp.c: 152: {
 16865                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 16866  003F7C  968B               	bcf	3979,3,c	;volatile
 16867                           
 16868                           ;SwSpiApp.c: 154: }
 16869                           ;SwSpiApp.c: 155: break;
 16870  003F7E  0012               	return	
 16871  003F80                     
 16872                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 16873  003F80  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 16874  003F82  A4D8               	btfss	status,2,c
 16875  003F84  D002               	goto	l622
 16876                           
 16877                           ;SwSpiApp.c: 159: {
 16878                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 16879  003F86  888B               	bsf	3979,4,c	;volatile
 16880                           
 16881                           ;SwSpiApp.c: 161: }
 16882  003F88  0012               	return	
 16883  003F8A                     l622:
 16884                           
 16885                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 16886  003F8A  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 16887  003F8C  A4D8               	btfss	status,2,c
 16888  003F8E  0012               	return	
 16889                           
 16890                           ;SwSpiApp.c: 163: {
 16891                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 16892  003F90  988B               	bcf	3979,4,c	;volatile
 16893                           
 16894                           ;SwSpiApp.c: 165: }
 16895                           ;SwSpiApp.c: 167: break;
 16896  003F92  0012               	return	
 16897  003F94                     
 16898                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 16899  003F94  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 16900  003F96  A4D8               	btfss	status,2,c
 16901  003F98  D002               	goto	l630
 16902                           
 16903                           ;SwSpiApp.c: 171: {
 16904                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 16905  003F9A  8689               	bsf	3977,3,c	;volatile
 16906                           
 16907                           ;SwSpiApp.c: 173: }
 16908  003F9C  0012               	return	
 16909  003F9E                     l630:
 16910                           
 16911                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 16912  003F9E  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 16913  003FA0  A4D8               	btfss	status,2,c
 16914  003FA2  0012               	return	
 16915                           
 16916                           ;SwSpiApp.c: 175: {
 16917                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 16918  003FA4  9689               	bcf	3977,3,c	;volatile
 16919                           
 16920                           ;SwSpiApp.c: 179: }
 16921                           
 16922                           ;SwSpiApp.c: 177: }
 16923                           ;SwSpiApp.c: 178: break;
 16924  003FA6  0012               	return	
 16925  003FA8                     l611:
 16926  003FA8  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 16927                           
 16928                           ; Switch size 1, requested type "space"
 16929                           ; Number of cases is 3, Range of values is 0 to 2
 16930                           ; switch strategies available:
 16931                           ; Name         Instructions Cycles
 16932                           ; simple_byte           10     6 (average)
 16933                           ;	Chosen strategy is simple_byte
 16934  003FAA  0A00               	xorlw	0	; case 0
 16935  003FAC  B4D8               	btfsc	status,2,c
 16936  003FAE  D7DE               	goto	l612
 16937  003FB0  0A01               	xorlw	1	; case 1
 16938  003FB2  B4D8               	btfsc	status,2,c
 16939  003FB4  D7E5               	goto	l621
 16940  003FB6  0A03               	xorlw	3	; case 2
 16941  003FB8  A4D8               	btfss	status,2,c
 16942  003FBA  0012               	return	
 16943  003FBC  D7EB               	goto	l629
 16944  003FBE                     __end_of_SwSpi_Clk_Pin:
 16945                           	opt stack 0
 16946                           tosu	equ	0xFFF
 16947                           tosh	equ	0xFFE
 16948                           tosl	equ	0xFFD
 16949                           pclath	equ	0xFFA
 16950                           tblptru	equ	0xFF8
 16951                           tblptrh	equ	0xFF7
 16952                           tblptrl	equ	0xFF6
 16953                           tablat	equ	0xFF5
 16954                           prodh	equ	0xFF4
 16955                           prodl	equ	0xFF3
 16956                           intcon	equ	0xFF2
 16957                           intcon2	equ	0xFF1
 16958                           indf0	equ	0xFEF
 16959                           postinc0	equ	0xFEE
 16960                           fsr0h	equ	0xFEA
 16961                           fsr0l	equ	0xFE9
 16962                           wreg	equ	0xFE8
 16963                           indf1	equ	0xFE7
 16964                           postdec1	equ	0xFE5
 16965                           fsr1h	equ	0xFE2
 16966                           fsr1l	equ	0xFE1
 16967                           indf2	equ	0xFDF
 16968                           postinc2	equ	0xFDE
 16969                           postdec2	equ	0xFDD
 16970                           fsr2h	equ	0xFDA
 16971                           fsr2l	equ	0xFD9
 16972                           status	equ	0xFD8
 16973                           
 16974 ;; *************** function _ReadIntFromEeprom *****************
 16975 ;; Defined at:
 16976 ;;		line 47 in file "SystemCommon.c"
 16977 ;; Parameters:    Size  Location     Type
 16978 ;;  address         1    wreg     unsigned char 
 16979 ;;  numOfByes       2   83[BANK0 ] int 
 16980 ;; Auto vars:     Size  Location     Type
 16981 ;;  address         1  100[BANK0 ] unsigned char 
 16982 ;;  base            4   90[BANK0 ] unsigned long 
 16983 ;;  idx             1  105[BANK0 ] unsigned char 
 16984 ;;  retVal          4  101[BANK0 ] unsigned long 
 16985 ;; Return value:  Size  Location     Type
 16986 ;;                  4   83[BANK0 ] unsigned long 
 16987 ;; Registers used:
 16988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16989 ;; Tracked objects:
 16990 ;;		On entry : 0/0
 16991 ;;		On exit  : 0/0
 16992 ;;		Unchanged: 0/0
 16993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16994 ;;      Params:         0       4       0       0       0       0       0
 16995 ;;      Locals:         0      16       0       0       0       0       0
 16996 ;;      Temps:          0       3       0       0       0       0       0
 16997 ;;      Totals:         0      23       0       0       0       0       0
 16998 ;;Total ram usage:       23 bytes
 16999 ;; Hardware stack levels used:    1
 17000 ;; Hardware stack levels required when called:    8
 17001 ;; This function calls:
 17002 ;;		_EepromRead
 17003 ;;		___awtoft
 17004 ;;		___fttol
 17005 ;;		___lmul
 17006 ;;		_pow
 17007 ;; This function is called by:
 17008 ;;		_DacInit
 17009 ;;		_ReadSystemStatusFromEprom
 17010 ;;		_DacReadValue
 17011 ;; This function uses a non-reentrant model
 17012 ;;
 17013                           
 17014                           	psect	text73
 17015  002686                     __ptext73:
 17016                           	opt stack 0
 17017  002686                     _ReadIntFromEeprom:
 17018                           	opt stack 21
 17019                           
 17020                           ;incstack = 0
 17021                           ;ReadIntFromEeprom@address stored from wreg
 17022  002686  0100               	movlb	0	; () banked
 17023  002688  6FC4               	movwf	ReadIntFromEeprom@address& (0+255),b
 17024                           
 17025                           ;SystemCommon.c: 49: uint32_t retVal = 0x00;
 17026  00268A  0E00               	movlw	0
 17027  00268C  0100               	movlb	0	; () banked
 17028  00268E  6FC5               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 17029  002690  0E00               	movlw	0
 17030  002692  6FC6               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 17031  002694  0E00               	movlw	0
 17032  002696  6FC7               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 17033  002698  0E00               	movlw	0
 17034  00269A  6FC8               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 17035                           
 17036                           ; BSR set to: 0
 17037                           ;SystemCommon.c: 50: address -= numOfByes;
 17038  00269C  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 17039  00269E  5FC4               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 17040                           
 17041                           ; BSR set to: 0
 17042                           ;SystemCommon.c: 52: for(uint8_t idx = 0; idx < numOfByes; idx++)
 17043  0026A0  0E00               	movlw	0
 17044  0026A2  6FC9               	movwf	ReadIntFromEeprom@idx& (0+255),b
 17045  0026A4  D06D               	goto	l1322
 17046  0026A6                     
 17047                           ; BSR set to: 0
 17048                           ;SystemCommon.c: 53: {
 17049                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 17050                           
 17051                           ; BSR set to: 0
 17052  0026A6  51C9               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 17053  0026A8  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 17054  0026AA  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 17055  0026AC  0E01               	movlw	1
 17056  0026AE  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 17057  0026B0  0E00               	movlw	0
 17058  0026B2  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17059  0026B4  1FB7               	comf	??_ReadIntFromEeprom& (0+255),f,b
 17060  0026B6  1FB8               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17061  0026B8  4BB7               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 17062  0026BA  2BB8               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17063  0026BC  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 17064  0026BE  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 17065  0026C0  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 17066  0026C2  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17067  0026C4  90D8               	bcf	status,0,c
 17068  0026C6  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 17069  0026C8  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17070  0026CA  90D8               	bcf	status,0,c
 17071  0026CC  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 17072  0026CE  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17073  0026D0  90D8               	bcf	status,0,c
 17074  0026D2  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 17075  0026D4  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 17076  0026D6  C0B7  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 17077  0026DA  C0B8  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 17078  0026DE  EC58  F021         	call	___awtoft	;wreg free
 17079  0026E2  C020  F0BE         	movff	?___awtoft,_ReadIntFromEeprom$3997
 17080  0026E6  C021  F0BF         	movff	?___awtoft+1,_ReadIntFromEeprom$3997+1
 17081  0026EA  C022  F0C0         	movff	?___awtoft+2,_ReadIntFromEeprom$3997+2
 17082                           
 17083                           ;SystemCommon.c: 53: {
 17084                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 17085  0026EE  C0BE  F0A5         	movff	_ReadIntFromEeprom$3997,pow@y
 17086  0026F2  C0BF  F0A6         	movff	_ReadIntFromEeprom$3997+1,pow@y+1
 17087  0026F6  C0C0  F0A7         	movff	_ReadIntFromEeprom$3997+2,pow@y+2
 17088  0026FA  0E00               	movlw	0
 17089  0026FC  0100               	movlb	0	; () banked
 17090  0026FE  6FA2               	movwf	pow@x& (0+255),b
 17091  002700  0E00               	movlw	0
 17092  002702  6FA3               	movwf	(pow@x+1)& (0+255),b
 17093  002704  0E40               	movlw	64
 17094  002706  6FA4               	movwf	(pow@x+2)& (0+255),b
 17095  002708  EC13  F00E         	call	_pow	;wreg free
 17096  00270C  C0A2  F0C1         	movff	?_pow,_ReadIntFromEeprom$3998
 17097  002710  C0A3  F0C2         	movff	?_pow+1,_ReadIntFromEeprom$3998+1
 17098  002714  C0A4  F0C3         	movff	?_pow+2,_ReadIntFromEeprom$3998+2
 17099                           
 17100                           ;SystemCommon.c: 53: {
 17101                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 17102  002718  C0C1  F079         	movff	_ReadIntFromEeprom$3998,___fttol@f1
 17103  00271C  C0C2  F07A         	movff	_ReadIntFromEeprom$3998+1,___fttol@f1+1
 17104  002720  C0C3  F07B         	movff	_ReadIntFromEeprom$3998+2,___fttol@f1+2
 17105  002724  ECF1  F014         	call	___fttol	;wreg free
 17106  002728  C079  F0BA         	movff	?___fttol,ReadIntFromEeprom@base
 17107  00272C  C07A  F0BB         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 17108  002730  C07B  F0BC         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 17109  002734  C07C  F0BD         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 17110                           
 17111                           ;SystemCommon.c: 55: retVal = retVal | EepromRead(address + idx) * base;
 17112  002738  0100               	movlb	0	; () banked
 17113  00273A  51C4               	movf	ReadIntFromEeprom@address& (0+255),w,b
 17114  00273C  25C9               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 17115  00273E  EC2B  F023         	call	_EepromRead
 17116  002742  0100               	movlb	0	; () banked
 17117  002744  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 17118  002746  51B7               	movf	??_ReadIntFromEeprom& (0+255),w,b
 17119  002748  6E1A               	movwf	___lmul@multiplier,c
 17120  00274A  6A1B               	clrf	___lmul@multiplier+1,c
 17121  00274C  6A1C               	clrf	___lmul@multiplier+2,c
 17122  00274E  6A1D               	clrf	___lmul@multiplier+3,c
 17123  002750  C0BA  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 17124  002754  C0BB  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 17125  002758  C0BC  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 17126  00275C  C0BD  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 17127  002760  ECDF  F01F         	call	___lmul	;wreg free
 17128  002764  0100               	movlb	0	; () banked
 17129  002766  51C5               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 17130  002768  101A               	iorwf	?___lmul,w,c
 17131  00276A  6FC5               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 17132  00276C  51C6               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 17133  00276E  101B               	iorwf	?___lmul+1,w,c
 17134  002770  6FC6               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 17135  002772  51C7               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 17136  002774  101C               	iorwf	?___lmul+2,w,c
 17137  002776  6FC7               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 17138  002778  51C8               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 17139  00277A  101D               	iorwf	?___lmul+3,w,c
 17140  00277C  6FC8               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 17141                           
 17142                           ; BSR set to: 0
 17143  00277E  2BC9               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 17144  002780                     l1322:
 17145                           
 17146                           ; BSR set to: 0
 17147                           
 17148                           ; BSR set to: 0
 17149  002780  51C9               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 17150  002782  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 17151  002784  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 17152  002786  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 17153  002788  5DB7               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 17154  00278A  51B8               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 17155  00278C  0A80               	xorlw	128
 17156  00278E  6FB9               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 17157  002790  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 17158  002792  0A80               	xorlw	128
 17159  002794  59B9               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 17160  002796  A0D8               	btfss	status,0,c
 17161  002798  D786               	goto	l1323
 17162                           
 17163                           ; BSR set to: 0
 17164                           ;SystemCommon.c: 56: }
 17165                           ;SystemCommon.c: 57: return retVal;
 17166  00279A  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 17167  00279E  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 17168  0027A2  C0C7  F0B5         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 17169  0027A6  C0C8  F0B6         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 17170                           
 17171                           ; BSR set to: 0
 17172  0027AA  0012               	return		;funcret
 17173  0027AC                     __end_of_ReadIntFromEeprom:
 17174                           	opt stack 0
 17175                           tosu	equ	0xFFF
 17176                           tosh	equ	0xFFE
 17177                           tosl	equ	0xFFD
 17178                           pclath	equ	0xFFA
 17179                           tblptru	equ	0xFF8
 17180                           tblptrh	equ	0xFF7
 17181                           tblptrl	equ	0xFF6
 17182                           tablat	equ	0xFF5
 17183                           prodh	equ	0xFF4
 17184                           prodl	equ	0xFF3
 17185                           intcon	equ	0xFF2
 17186                           intcon2	equ	0xFF1
 17187                           indf0	equ	0xFEF
 17188                           postinc0	equ	0xFEE
 17189                           fsr0h	equ	0xFEA
 17190                           fsr0l	equ	0xFE9
 17191                           wreg	equ	0xFE8
 17192                           indf1	equ	0xFE7
 17193                           postdec1	equ	0xFE5
 17194                           fsr1h	equ	0xFE2
 17195                           fsr1l	equ	0xFE1
 17196                           indf2	equ	0xFDF
 17197                           postinc2	equ	0xFDE
 17198                           postdec2	equ	0xFDD
 17199                           fsr2h	equ	0xFDA
 17200                           fsr2l	equ	0xFD9
 17201                           status	equ	0xFD8
 17202                           
 17203 ;; *************** function _pow *****************
 17204 ;; Defined at:
 17205 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 17206 ;; Parameters:    Size  Location     Type
 17207 ;;  x               3   66[BANK0 ] unsigned long 
 17208 ;;  y               3   69[BANK0 ] unsigned long 
 17209 ;; Auto vars:     Size  Location     Type
 17210 ;;  yi              4   79[BANK0 ] unsigned long 
 17211 ;;  sign            1   78[BANK0 ] unsigned char 
 17212 ;; Return value:  Size  Location     Type
 17213 ;;                  3   66[BANK0 ] unsigned char 
 17214 ;; Registers used:
 17215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17216 ;; Tracked objects:
 17217 ;;		On entry : 0/0
 17218 ;;		On exit  : 0/0
 17219 ;;		Unchanged: 0/0
 17220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17221 ;;      Params:         0       6       0       0       0       0       0
 17222 ;;      Locals:         0      11       0       0       0       0       0
 17223 ;;      Temps:          0       0       0       0       0       0       0
 17224 ;;      Totals:         0      17       0       0       0       0       0
 17225 ;;Total ram usage:       17 bytes
 17226 ;; Hardware stack levels used:    1
 17227 ;; Hardware stack levels required when called:    7
 17228 ;; This function calls:
 17229 ;;		___ftge
 17230 ;;		___ftmul
 17231 ;;		___ftneg
 17232 ;;		___fttol
 17233 ;;		___lltoft
 17234 ;;		_exp
 17235 ;;		_log
 17236 ;; This function is called by:
 17237 ;;		_SampleSingleChannel
 17238 ;;		_SampleAllChannels
 17239 ;;		_GroupRx
 17240 ;;		_GroupTx
 17241 ;;		_ReadIntFromEeprom
 17242 ;;		_DacSetValue
 17243 ;;		_DacAnalogToDigitalSpi
 17244 ;;		_CalcSynthRegParams
 17245 ;; This function uses a non-reentrant model
 17246 ;;
 17247                           
 17248                           	psect	text74
 17249  001C26                     __ptext74:
 17250                           	opt stack 0
 17251  001C26                     _pow:
 17252                           	opt stack 21
 17253                           
 17254                           ; BSR set to: 0
 17255                           ;incstack = 0
 17256  001C26  0E00               	movlw	0
 17257  001C28  0100               	movlb	0	; () banked
 17258  001C2A  6FAE               	movwf	pow@sign& (0+255),b
 17259                           
 17260                           ; BSR set to: 0
 17261  001C2C  51A2               	movf	pow@x& (0+255),w,b
 17262  001C2E  11A3               	iorwf	(pow@x+1)& (0+255),w,b
 17263  001C30  11A4               	iorwf	(pow@x+2)& (0+255),w,b
 17264  001C32  A4D8               	btfss	status,2,c
 17265  001C34  D01D               	goto	l2192
 17266                           
 17267                           ; BSR set to: 0
 17268  001C36  0E00               	movlw	0
 17269  001C38  6E18               	movwf	___ftge@ff1,c
 17270  001C3A  0E00               	movlw	0
 17271  001C3C  6E19               	movwf	___ftge@ff1+1,c
 17272  001C3E  0E00               	movlw	0
 17273  001C40  6E1A               	movwf	___ftge@ff1+2,c
 17274  001C42  C0A5  F01B         	movff	pow@y,___ftge@ff2
 17275  001C46  C0A6  F01C         	movff	pow@y+1,___ftge@ff2+1
 17276  001C4A  C0A7  F01D         	movff	pow@y+2,___ftge@ff2+2
 17277  001C4E  EC1D  F01B         	call	___ftge	;wreg free
 17278  001C52  A0D8               	btfss	status,0,c
 17279  001C54  D005               	goto	l2193
 17280  001C56  0E00               	movlw	0
 17281  001C58  0101               	movlb	1	; () banked
 17282  001C5A  6FC3               	movwf	(_errno+1)& (0+255),b
 17283  001C5C  0E21               	movlw	33
 17284  001C5E  6FC2               	movwf	_errno& (0+255),b
 17285  001C60                     l2193:
 17286  001C60  0E00               	movlw	0
 17287  001C62  0100               	movlb	0	; () banked
 17288  001C64  6FA2               	movwf	?_pow& (0+255),b
 17289  001C66  0E00               	movlw	0
 17290  001C68  6FA3               	movwf	(?_pow+1)& (0+255),b
 17291  001C6A  0E00               	movlw	0
 17292  001C6C  6FA4               	movwf	(?_pow+2)& (0+255),b
 17293                           
 17294                           ; BSR set to: 0
 17295  001C6E  0012               	return	
 17296  001C70                     l2192:
 17297                           
 17298                           ; BSR set to: 0
 17299                           
 17300                           ; BSR set to: 0
 17301  001C70  51A5               	movf	pow@y& (0+255),w,b
 17302  001C72  11A6               	iorwf	(pow@y+1)& (0+255),w,b
 17303  001C74  11A7               	iorwf	(pow@y+2)& (0+255),w,b
 17304  001C76  A4D8               	btfss	status,2,c
 17305  001C78  D007               	goto	l2195
 17306                           
 17307                           ; BSR set to: 0
 17308  001C7A  0E00               	movlw	0
 17309  001C7C  6FA2               	movwf	?_pow& (0+255),b
 17310  001C7E  0E80               	movlw	128
 17311  001C80  6FA3               	movwf	(?_pow+1)& (0+255),b
 17312  001C82  0E3F               	movlw	63
 17313  001C84  6FA4               	movwf	(?_pow+2)& (0+255),b
 17314                           
 17315                           ; BSR set to: 0
 17316  001C86  0012               	return	
 17317  001C88                     l2195:
 17318                           
 17319                           ; BSR set to: 0
 17320                           
 17321                           ; BSR set to: 0
 17322  001C88  AFA4               	btfss	(pow@x+2)& (0+255),7,b
 17323  001C8A  D043               	goto	l2196
 17324                           
 17325                           ; BSR set to: 0
 17326  001C8C  C0A5  F079         	movff	pow@y,___fttol@f1
 17327  001C90  C0A6  F07A         	movff	pow@y+1,___fttol@f1+1
 17328  001C94  C0A7  F07B         	movff	pow@y+2,___fttol@f1+2
 17329  001C98  ECF1  F014         	call	___fttol	;wreg free
 17330  001C9C  C079  F0AF         	movff	?___fttol,pow@yi
 17331  001CA0  C07A  F0B0         	movff	?___fttol+1,pow@yi+1
 17332  001CA4  C07B  F0B1         	movff	?___fttol+2,pow@yi+2
 17333  001CA8  C07C  F0B2         	movff	?___fttol+3,pow@yi+3
 17334  001CAC  C0AF  F020         	movff	pow@yi,___lltoft@c
 17335  001CB0  C0B0  F021         	movff	pow@yi+1,___lltoft@c+1
 17336  001CB4  C0B1  F022         	movff	pow@yi+2,___lltoft@c+2
 17337  001CB8  C0B2  F023         	movff	pow@yi+3,___lltoft@c+3
 17338  001CBC  EC03  F01F         	call	___lltoft	;wreg free
 17339  001CC0  0100               	movlb	0	; () banked
 17340  001CC2  51A5               	movf	pow@y& (0+255),w,b
 17341  001CC4  1820               	xorwf	?___lltoft,w,c
 17342  001CC6  E107               	bnz	u8460
 17343  001CC8  51A6               	movf	(pow@y+1)& (0+255),w,b
 17344  001CCA  1821               	xorwf	?___lltoft+1,w,c
 17345  001CCC  E104               	bnz	u8460
 17346  001CCE  51A7               	movf	(pow@y+2)& (0+255),w,b
 17347  001CD0  1822               	xorwf	?___lltoft+2,w,c
 17348  001CD2  B4D8               	btfsc	status,2,c
 17349  001CD4  D00D               	goto	l2197
 17350  001CD6                     u8460:
 17351                           
 17352                           ; BSR set to: 0
 17353  001CD6  0E00               	movlw	0
 17354  001CD8  0101               	movlb	1	; () banked
 17355  001CDA  6FC3               	movwf	(_errno+1)& (0+255),b
 17356  001CDC  0E21               	movlw	33
 17357  001CDE  6FC2               	movwf	_errno& (0+255),b
 17358  001CE0  0E00               	movlw	0
 17359  001CE2  0100               	movlb	0	; () banked
 17360  001CE4  6FA2               	movwf	?_pow& (0+255),b
 17361  001CE6  0E00               	movlw	0
 17362  001CE8  6FA3               	movwf	(?_pow+1)& (0+255),b
 17363  001CEA  0E00               	movlw	0
 17364  001CEC  6FA4               	movwf	(?_pow+2)& (0+255),b
 17365                           
 17366                           ; BSR set to: 0
 17367  001CEE  0012               	return	
 17368  001CF0                     l2197:
 17369                           
 17370                           ; BSR set to: 0
 17371                           
 17372                           ; BSR set to: 0
 17373  001CF0  51AF               	movf	pow@yi& (0+255),w,b
 17374  001CF2  0B01               	andlw	1
 17375  001CF4  6FAE               	movwf	pow@sign& (0+255),b
 17376                           
 17377                           ; BSR set to: 0
 17378  001CF6  C0A2  F018         	movff	pow@x,___ftneg@f1
 17379  001CFA  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 17380  001CFE  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 17381  001D02  EC73  F022         	call	___ftneg	;wreg free
 17382  001D06  C018  F0A2         	movff	?___ftneg,pow@x
 17383  001D0A  C019  F0A3         	movff	?___ftneg+1,pow@x+1
 17384  001D0E  C01A  F0A4         	movff	?___ftneg+2,pow@x+2
 17385  001D12                     l2196:
 17386  001D12  C0A2  F092         	movff	pow@x,log@x
 17387  001D16  C0A3  F093         	movff	pow@x+1,log@x+1
 17388  001D1A  C0A4  F094         	movff	pow@x+2,log@x+2
 17389  001D1E  EC86  F011         	call	_log	;wreg free
 17390  001D22  C092  F0A8         	movff	?_log,_pow$4003
 17391  001D26  C093  F0A9         	movff	?_log+1,_pow$4003+1
 17392  001D2A  C094  F0AA         	movff	?_log+2,_pow$4003+2
 17393  001D2E  C0A8  F066         	movff	_pow$4003,___ftmul@f1
 17394  001D32  C0A9  F067         	movff	_pow$4003+1,___ftmul@f1+1
 17395  001D36  C0AA  F068         	movff	_pow$4003+2,___ftmul@f1+2
 17396  001D3A  C0A5  F069         	movff	pow@y,___ftmul@f2
 17397  001D3E  C0A6  F06A         	movff	pow@y+1,___ftmul@f2+1
 17398  001D42  C0A7  F06B         	movff	pow@y+2,___ftmul@f2+2
 17399  001D46  EC6D  F015         	call	___ftmul	;wreg free
 17400  001D4A  C066  F0AB         	movff	?___ftmul,_pow$4004
 17401  001D4E  C067  F0AC         	movff	?___ftmul+1,_pow$4004+1
 17402  001D52  C068  F0AD         	movff	?___ftmul+2,_pow$4004+2
 17403  001D56  C0AB  F099         	movff	_pow$4004,exp@x
 17404  001D5A  C0AC  F09A         	movff	_pow$4004+1,exp@x+1
 17405  001D5E  C0AD  F09B         	movff	_pow$4004+2,exp@x+2
 17406  001D62  EC8F  F00A         	call	_exp	;wreg free
 17407  001D66  C099  F0A2         	movff	?_exp,pow@x
 17408  001D6A  C09A  F0A3         	movff	?_exp+1,pow@x+1
 17409  001D6E  C09B  F0A4         	movff	?_exp+2,pow@x+2
 17410  001D72  0100               	movlb	0	; () banked
 17411  001D74  51AE               	movf	pow@sign& (0+255),w,b
 17412  001D76  B4D8               	btfsc	status,2,c
 17413  001D78  D00F               	goto	l2198
 17414                           
 17415                           ; BSR set to: 0
 17416  001D7A  C0A2  F018         	movff	pow@x,___ftneg@f1
 17417  001D7E  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 17418  001D82  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 17419  001D86  EC73  F022         	call	___ftneg	;wreg free
 17420  001D8A  C018  F0A2         	movff	?___ftneg,?_pow
 17421  001D8E  C019  F0A3         	movff	?___ftneg+1,?_pow+1
 17422  001D92  C01A  F0A4         	movff	?___ftneg+2,?_pow+2
 17423  001D96  0012               	return	
 17424  001D98                     l2198:
 17425                           
 17426                           ; BSR set to: 0
 17427  001D98  C0A2  F0A2         	movff	pow@x,?_pow
 17428  001D9C  C0A3  F0A3         	movff	pow@x+1,?_pow+1
 17429  001DA0  C0A4  F0A4         	movff	pow@x+2,?_pow+2
 17430  001DA4  0012               	return		;funcret
 17431  001DA6                     __end_of_pow:
 17432                           	opt stack 0
 17433                           tosu	equ	0xFFF
 17434                           tosh	equ	0xFFE
 17435                           tosl	equ	0xFFD
 17436                           pclath	equ	0xFFA
 17437                           tblptru	equ	0xFF8
 17438                           tblptrh	equ	0xFF7
 17439                           tblptrl	equ	0xFF6
 17440                           tablat	equ	0xFF5
 17441                           prodh	equ	0xFF4
 17442                           prodl	equ	0xFF3
 17443                           intcon	equ	0xFF2
 17444                           intcon2	equ	0xFF1
 17445                           indf0	equ	0xFEF
 17446                           postinc0	equ	0xFEE
 17447                           fsr0h	equ	0xFEA
 17448                           fsr0l	equ	0xFE9
 17449                           wreg	equ	0xFE8
 17450                           indf1	equ	0xFE7
 17451                           postdec1	equ	0xFE5
 17452                           fsr1h	equ	0xFE2
 17453                           fsr1l	equ	0xFE1
 17454                           indf2	equ	0xFDF
 17455                           postinc2	equ	0xFDE
 17456                           postdec2	equ	0xFDD
 17457                           fsr2h	equ	0xFDA
 17458                           fsr2l	equ	0xFD9
 17459                           status	equ	0xFD8
 17460                           
 17461 ;; *************** function _log *****************
 17462 ;; Defined at:
 17463 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 17464 ;; Parameters:    Size  Location     Type
 17465 ;;  x               3   50[BANK0 ] unsigned char 
 17466 ;; Auto vars:     Size  Location     Type
 17467 ;;  exponent        2   53[BANK0 ] int 
 17468 ;; Return value:  Size  Location     Type
 17469 ;;                  3   50[BANK0 ] int 
 17470 ;; Registers used:
 17471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17472 ;; Tracked objects:
 17473 ;;		On entry : 0/0
 17474 ;;		On exit  : 0/0
 17475 ;;		Unchanged: 0/0
 17476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17477 ;;      Params:         0       3       0       0       0       0       0
 17478 ;;      Locals:         0       2       0       0       0       0       0
 17479 ;;      Temps:          0       0       0       0       0       0       0
 17480 ;;      Totals:         0       5       0       0       0       0       0
 17481 ;;Total ram usage:        5 bytes
 17482 ;; Hardware stack levels used:    1
 17483 ;; Hardware stack levels required when called:    6
 17484 ;; This function calls:
 17485 ;;		___awtoft
 17486 ;;		___ftadd
 17487 ;;		___ftmul
 17488 ;;		_eval_poly
 17489 ;;		_frexp
 17490 ;; This function is called by:
 17491 ;;		_pow
 17492 ;; This function uses a non-reentrant model
 17493 ;;
 17494                           
 17495                           	psect	text75
 17496  00230C                     __ptext75:
 17497                           	opt stack 0
 17498  00230C                     _log:
 17499                           	opt stack 21
 17500                           
 17501                           ;incstack = 0
 17502  00230C  0100               	movlb	0	; () banked
 17503  00230E  AF94               	btfss	(log@x+2)& (0+255),7,b
 17504  002310  D00D               	goto	l2458
 17505                           
 17506                           ; BSR set to: 0
 17507  002312  0E00               	movlw	0
 17508  002314  0101               	movlb	1	; () banked
 17509  002316  6FC3               	movwf	(_errno+1)& (0+255),b
 17510  002318  0E21               	movlw	33
 17511  00231A  6FC2               	movwf	_errno& (0+255),b
 17512  00231C  0E00               	movlw	0
 17513  00231E  0100               	movlb	0	; () banked
 17514  002320  6F92               	movwf	?_log& (0+255),b
 17515  002322  0E00               	movlw	0
 17516  002324  6F93               	movwf	(?_log+1)& (0+255),b
 17517  002326  0E00               	movlw	0
 17518  002328  6F94               	movwf	(?_log+2)& (0+255),b
 17519                           
 17520                           ; BSR set to: 0
 17521  00232A  0012               	return	
 17522  00232C                     l2458:
 17523                           
 17524                           ; BSR set to: 0
 17525                           
 17526                           ; BSR set to: 0
 17527  00232C  5192               	movf	log@x& (0+255),w,b
 17528  00232E  1193               	iorwf	(log@x+1)& (0+255),w,b
 17529  002330  1194               	iorwf	(log@x+2)& (0+255),w,b
 17530  002332  A4D8               	btfss	status,2,c
 17531  002334  D00D               	goto	l2460
 17532                           
 17533                           ; BSR set to: 0
 17534  002336  0E00               	movlw	0
 17535  002338  0101               	movlb	1	; () banked
 17536  00233A  6FC3               	movwf	(_errno+1)& (0+255),b
 17537  00233C  0E22               	movlw	34
 17538  00233E  6FC2               	movwf	_errno& (0+255),b
 17539  002340  0E00               	movlw	0
 17540  002342  0100               	movlb	0	; () banked
 17541  002344  6F92               	movwf	?_log& (0+255),b
 17542  002346  0E00               	movlw	0
 17543  002348  6F93               	movwf	(?_log+1)& (0+255),b
 17544  00234A  0E00               	movlw	0
 17545  00234C  6F94               	movwf	(?_log+2)& (0+255),b
 17546                           
 17547                           ; BSR set to: 0
 17548  00234E  0012               	return	
 17549  002350                     l2460:
 17550                           
 17551                           ; BSR set to: 0
 17552                           
 17553                           ; BSR set to: 0
 17554  002350  0E00               	movlw	0
 17555  002352  6F69               	movwf	___ftmul@f2& (0+255),b
 17556  002354  0E00               	movlw	0
 17557  002356  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 17558  002358  0E40               	movlw	64
 17559  00235A  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 17560  00235C  0E95               	movlw	low log@exponent
 17561  00235E  6E1B               	movwf	frexp@eptr,c
 17562  002360  0E00               	movlw	high log@exponent
 17563  002362  6E1C               	movwf	frexp@eptr+1,c
 17564  002364  C092  F018         	movff	log@x,frexp@value
 17565  002368  C093  F019         	movff	log@x+1,frexp@value+1
 17566  00236C  C094  F01A         	movff	log@x+2,frexp@value+2
 17567  002370  ECD5  F01A         	call	_frexp	;wreg free
 17568  002374  C018  F066         	movff	?_frexp,___ftmul@f1
 17569  002378  C019  F067         	movff	?_frexp+1,___ftmul@f1+1
 17570  00237C  C01A  F068         	movff	?_frexp+2,___ftmul@f1+2
 17571  002380  EC6D  F015         	call	___ftmul	;wreg free
 17572  002384  C066  F07C         	movff	?___ftmul,___ftadd@f1
 17573  002388  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 17574  00238C  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 17575  002390  0E00               	movlw	0
 17576  002392  0100               	movlb	0	; () banked
 17577  002394  6F7F               	movwf	___ftadd@f2& (0+255),b
 17578  002396  0E80               	movlw	128
 17579  002398  6F80               	movwf	(___ftadd@f2+1)& (0+255),b
 17580  00239A  0EBF               	movlw	191
 17581  00239C  6F81               	movwf	(___ftadd@f2+2)& (0+255),b
 17582  00239E  EC75  F00C         	call	___ftadd	;wreg free
 17583  0023A2  C07C  F092         	movff	?___ftadd,log@x
 17584  0023A6  C07D  F093         	movff	?___ftadd+1,log@x+1
 17585  0023AA  C07E  F094         	movff	?___ftadd+2,log@x+2
 17586  0023AE  0100               	movlb	0	; () banked
 17587  0023B0  0795               	decf	log@exponent& (0+255),f,b
 17588  0023B2  A0D8               	btfss	status,0,c
 17589  0023B4  0796               	decf	(log@exponent+1)& (0+255),f,b
 17590                           
 17591                           ; BSR set to: 0
 17592  0023B6  C092  F088         	movff	log@x,eval_poly@x
 17593  0023BA  C093  F089         	movff	log@x+1,eval_poly@x+1
 17594  0023BE  C094  F08A         	movff	log@x+2,eval_poly@x+2
 17595  0023C2  0E58               	movlw	low log@coeff
 17596  0023C4  6F8B               	movwf	eval_poly@d& (0+255),b
 17597  0023C6  0E78               	movlw	high log@coeff
 17598  0023C8  6F8C               	movwf	(eval_poly@d+1)& (0+255),b
 17599  0023CA  0E00               	movlw	0
 17600  0023CC  6F8E               	movwf	(eval_poly@n+1)& (0+255),b
 17601  0023CE  0E08               	movlw	8
 17602  0023D0  6F8D               	movwf	eval_poly@n& (0+255),b
 17603  0023D2  ECB2  F017         	call	_eval_poly	;wreg free
 17604  0023D6  C088  F092         	movff	?_eval_poly,log@x
 17605  0023DA  C089  F093         	movff	?_eval_poly+1,log@x+1
 17606  0023DE  C08A  F094         	movff	?_eval_poly+2,log@x+2
 17607  0023E2  0E72               	movlw	114
 17608  0023E4  0100               	movlb	0	; () banked
 17609  0023E6  6F69               	movwf	___ftmul@f2& (0+255),b
 17610  0023E8  0E31               	movlw	49
 17611  0023EA  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 17612  0023EC  0E3F               	movlw	63
 17613  0023EE  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 17614  0023F0  C095  F020         	movff	log@exponent,___awtoft@c
 17615  0023F4  C096  F021         	movff	log@exponent+1,___awtoft@c+1
 17616  0023F8  EC58  F021         	call	___awtoft	;wreg free
 17617  0023FC  C020  F066         	movff	?___awtoft,___ftmul@f1
 17618  002400  C021  F067         	movff	?___awtoft+1,___ftmul@f1+1
 17619  002404  C022  F068         	movff	?___awtoft+2,___ftmul@f1+2
 17620  002408  EC6D  F015         	call	___ftmul	;wreg free
 17621  00240C  C066  F07C         	movff	?___ftmul,___ftadd@f1
 17622  002410  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 17623  002414  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 17624  002418  C092  F07F         	movff	log@x,___ftadd@f2
 17625  00241C  C093  F080         	movff	log@x+1,___ftadd@f2+1
 17626  002420  C094  F081         	movff	log@x+2,___ftadd@f2+2
 17627  002424  EC75  F00C         	call	___ftadd	;wreg free
 17628  002428  C07C  F092         	movff	?___ftadd,?_log
 17629  00242C  C07D  F093         	movff	?___ftadd+1,?_log+1
 17630  002430  C07E  F094         	movff	?___ftadd+2,?_log+2
 17631  002434  0012               	return	
 17632  002436                     __end_of_log:
 17633                           	opt stack 0
 17634                           tosu	equ	0xFFF
 17635                           tosh	equ	0xFFE
 17636                           tosl	equ	0xFFD
 17637                           pclath	equ	0xFFA
 17638                           tblptru	equ	0xFF8
 17639                           tblptrh	equ	0xFF7
 17640                           tblptrl	equ	0xFF6
 17641                           tablat	equ	0xFF5
 17642                           prodh	equ	0xFF4
 17643                           prodl	equ	0xFF3
 17644                           intcon	equ	0xFF2
 17645                           intcon2	equ	0xFF1
 17646                           indf0	equ	0xFEF
 17647                           postinc0	equ	0xFEE
 17648                           fsr0h	equ	0xFEA
 17649                           fsr0l	equ	0xFE9
 17650                           wreg	equ	0xFE8
 17651                           indf1	equ	0xFE7
 17652                           postdec1	equ	0xFE5
 17653                           fsr1h	equ	0xFE2
 17654                           fsr1l	equ	0xFE1
 17655                           indf2	equ	0xFDF
 17656                           postinc2	equ	0xFDE
 17657                           postdec2	equ	0xFDD
 17658                           fsr2h	equ	0xFDA
 17659                           fsr2l	equ	0xFD9
 17660                           status	equ	0xFD8
 17661                           
 17662 ;; *************** function _exp *****************
 17663 ;; Defined at:
 17664 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 17665 ;; Parameters:    Size  Location     Type
 17666 ;;  x               3   57[BANK0 ] int 
 17667 ;; Auto vars:     Size  Location     Type
 17668 ;;  exponent        2   63[BANK0 ] int 
 17669 ;;  sign            1   65[BANK0 ] unsigned char 
 17670 ;; Return value:  Size  Location     Type
 17671 ;;                  3   57[BANK0 ] unsigned char 
 17672 ;; Registers used:
 17673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17674 ;; Tracked objects:
 17675 ;;		On entry : 0/0
 17676 ;;		On exit  : 0/0
 17677 ;;		Unchanged: 0/0
 17678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17679 ;;      Params:         0       3       0       0       0       0       0
 17680 ;;      Locals:         0       6       0       0       0       0       0
 17681 ;;      Temps:          0       0       0       0       0       0       0
 17682 ;;      Totals:         0       9       0       0       0       0       0
 17683 ;;Total ram usage:        9 bytes
 17684 ;; Hardware stack levels used:    1
 17685 ;; Hardware stack levels required when called:    6
 17686 ;; This function calls:
 17687 ;;		___awtoft
 17688 ;;		___ftdiv
 17689 ;;		___ftge
 17690 ;;		___ftmul
 17691 ;;		___ftneg
 17692 ;;		___ftsub
 17693 ;;		___fttol
 17694 ;;		_eval_poly
 17695 ;;		_floor
 17696 ;;		_ldexp
 17697 ;; This function is called by:
 17698 ;;		_pow
 17699 ;; This function uses a non-reentrant model
 17700 ;;
 17701                           
 17702                           	psect	text76
 17703  00151E                     __ptext76:
 17704                           	opt stack 0
 17705  00151E                     _exp:
 17706                           	opt stack 21
 17707                           
 17708                           ;incstack = 0
 17709  00151E  0100               	movlb	0	; () banked
 17710  001520  5199               	movf	exp@x& (0+255),w,b
 17711  001522  119A               	iorwf	(exp@x+1)& (0+255),w,b
 17712  001524  119B               	iorwf	(exp@x+2)& (0+255),w,b
 17713  001526  A4D8               	btfss	status,2,c
 17714  001528  D007               	goto	l2394
 17715                           
 17716                           ; BSR set to: 0
 17717  00152A  0E00               	movlw	0
 17718  00152C  6F99               	movwf	?_exp& (0+255),b
 17719  00152E  0E80               	movlw	128
 17720  001530  6F9A               	movwf	(?_exp+1)& (0+255),b
 17721  001532  0E3F               	movlw	63
 17722  001534  6F9B               	movwf	(?_exp+2)& (0+255),b
 17723                           
 17724                           ; BSR set to: 0
 17725  001536  0012               	return	
 17726  001538                     l2394:
 17727                           
 17728                           ; BSR set to: 0
 17729                           
 17730                           ; BSR set to: 0
 17731  001538  0E72               	movlw	114
 17732  00153A  6E18               	movwf	___ftge@ff1,c
 17733  00153C  0E31               	movlw	49
 17734  00153E  6E19               	movwf	___ftge@ff1+1,c
 17735  001540  0E44               	movlw	68
 17736  001542  6E1A               	movwf	___ftge@ff1+2,c
 17737  001544  C099  F01B         	movff	exp@x,___ftge@ff2
 17738  001548  C09A  F01C         	movff	exp@x+1,___ftge@ff2+1
 17739  00154C  C09B  F01D         	movff	exp@x+2,___ftge@ff2+2
 17740  001550  EC1D  F01B         	call	___ftge	;wreg free
 17741  001554  B0D8               	btfsc	status,0,c
 17742  001556  D00D               	goto	l2396
 17743  001558  0E00               	movlw	0
 17744  00155A  0101               	movlb	1	; () banked
 17745  00155C  6FC3               	movwf	(_errno+1)& (0+255),b
 17746  00155E  0E22               	movlw	34
 17747  001560  6FC2               	movwf	_errno& (0+255),b
 17748  001562  0EFF               	movlw	255
 17749  001564  0100               	movlb	0	; () banked
 17750  001566  6F99               	movwf	?_exp& (0+255),b
 17751  001568  0E7F               	movlw	127
 17752  00156A  6F9A               	movwf	(?_exp+1)& (0+255),b
 17753  00156C  0E7F               	movlw	127
 17754  00156E  6F9B               	movwf	(?_exp+2)& (0+255),b
 17755                           
 17756                           ; BSR set to: 0
 17757  001570  0012               	return	
 17758  001572                     l2396:
 17759                           
 17760                           ; BSR set to: 0
 17761  001572  C099  F018         	movff	exp@x,___ftge@ff1
 17762  001576  C09A  F019         	movff	exp@x+1,___ftge@ff1+1
 17763  00157A  C09B  F01A         	movff	exp@x+2,___ftge@ff1+2
 17764  00157E  0E49               	movlw	73
 17765  001580  6E1B               	movwf	___ftge@ff2,c
 17766  001582  0E3A               	movlw	58
 17767  001584  6E1C               	movwf	___ftge@ff2+1,c
 17768  001586  0EC4               	movlw	196
 17769  001588  6E1D               	movwf	___ftge@ff2+2,c
 17770  00158A  EC1D  F01B         	call	___ftge	;wreg free
 17771  00158E  B0D8               	btfsc	status,0,c
 17772  001590  D00D               	goto	l2397
 17773  001592  0E00               	movlw	0
 17774  001594  0101               	movlb	1	; () banked
 17775  001596  6FC3               	movwf	(_errno+1)& (0+255),b
 17776  001598  0E22               	movlw	34
 17777  00159A  6FC2               	movwf	_errno& (0+255),b
 17778  00159C  0E00               	movlw	0
 17779  00159E  0100               	movlb	0	; () banked
 17780  0015A0  6F99               	movwf	?_exp& (0+255),b
 17781  0015A2  0E00               	movlw	0
 17782  0015A4  6F9A               	movwf	(?_exp+1)& (0+255),b
 17783  0015A6  0E00               	movlw	0
 17784  0015A8  6F9B               	movwf	(?_exp+2)& (0+255),b
 17785                           
 17786                           ; BSR set to: 0
 17787  0015AA  0012               	return	
 17788  0015AC                     l2397:
 17789                           
 17790                           ; BSR set to: 0
 17791  0015AC  0100               	movlb	0	; () banked
 17792  0015AE  AF9B               	btfss	(exp@x+2)& (0+255),7,b
 17793  0015B0  D002               	goto	u8340
 17794  0015B2  0E01               	movlw	1
 17795  0015B4  D001               	goto	u8350
 17796  0015B6                     u8340:
 17797  0015B6  0E00               	movlw	0
 17798  0015B8                     u8350:
 17799  0015B8  6FA1               	movwf	exp@sign& (0+255),b
 17800                           
 17801                           ; BSR set to: 0
 17802  0015BA  51A1               	movf	exp@sign& (0+255),w,b
 17803  0015BC  B4D8               	btfsc	status,2,c
 17804  0015BE  D00E               	goto	l2398
 17805                           
 17806                           ; BSR set to: 0
 17807  0015C0  C099  F018         	movff	exp@x,___ftneg@f1
 17808  0015C4  C09A  F019         	movff	exp@x+1,___ftneg@f1+1
 17809  0015C8  C09B  F01A         	movff	exp@x+2,___ftneg@f1+2
 17810  0015CC  EC73  F022         	call	___ftneg	;wreg free
 17811  0015D0  C018  F099         	movff	?___ftneg,exp@x
 17812  0015D4  C019  F09A         	movff	?___ftneg+1,exp@x+1
 17813  0015D8  C01A  F09B         	movff	?___ftneg+2,exp@x+2
 17814  0015DC                     l2398:
 17815  0015DC  C099  F066         	movff	exp@x,___ftmul@f1
 17816  0015E0  C09A  F067         	movff	exp@x+1,___ftmul@f1+1
 17817  0015E4  C09B  F068         	movff	exp@x+2,___ftmul@f1+2
 17818  0015E8  0EAA               	movlw	170
 17819  0015EA  0100               	movlb	0	; () banked
 17820  0015EC  6F69               	movwf	___ftmul@f2& (0+255),b
 17821  0015EE  0EB8               	movlw	184
 17822  0015F0  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 17823  0015F2  0E3F               	movlw	63
 17824  0015F4  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 17825  0015F6  EC6D  F015         	call	___ftmul	;wreg free
 17826  0015FA  C066  F099         	movff	?___ftmul,exp@x
 17827  0015FE  C067  F09A         	movff	?___ftmul+1,exp@x+1
 17828  001602  C068  F09B         	movff	?___ftmul+2,exp@x+2
 17829  001606  C099  F090         	movff	exp@x,floor@x
 17830  00160A  C09A  F091         	movff	exp@x+1,floor@x+1
 17831  00160E  C09B  F092         	movff	exp@x+2,floor@x+2
 17832  001612  EC41  F017         	call	_floor	;wreg free
 17833  001616  C090  F09C         	movff	?_floor,_exp$4005
 17834  00161A  C091  F09D         	movff	?_floor+1,_exp$4005+1
 17835  00161E  C092  F09E         	movff	?_floor+2,_exp$4005+2
 17836  001622  C09C  F079         	movff	_exp$4005,___fttol@f1
 17837  001626  C09D  F07A         	movff	_exp$4005+1,___fttol@f1+1
 17838  00162A  C09E  F07B         	movff	_exp$4005+2,___fttol@f1+2
 17839  00162E  ECF1  F014         	call	___fttol	;wreg free
 17840  001632  C079  F09F         	movff	?___fttol,exp@exponent
 17841  001636  C07A  F0A0         	movff	?___fttol+1,exp@exponent+1
 17842  00163A  C099  F088         	movff	exp@x,___ftsub@f1
 17843  00163E  C09A  F089         	movff	exp@x+1,___ftsub@f1+1
 17844  001642  C09B  F08A         	movff	exp@x+2,___ftsub@f1+2
 17845  001646  C09F  F020         	movff	exp@exponent,___awtoft@c
 17846  00164A  C0A0  F021         	movff	exp@exponent+1,___awtoft@c+1
 17847  00164E  EC58  F021         	call	___awtoft	;wreg free
 17848  001652  C020  F08B         	movff	?___awtoft,___ftsub@f2
 17849  001656  C021  F08C         	movff	?___awtoft+1,___ftsub@f2+1
 17850  00165A  C022  F08D         	movff	?___awtoft+2,___ftsub@f2+2
 17851  00165E  ECBE  F020         	call	___ftsub	;wreg free
 17852  001662  C088  F099         	movff	?___ftsub,exp@x
 17853  001666  C089  F09A         	movff	?___ftsub+1,exp@x+1
 17854  00166A  C08A  F09B         	movff	?___ftsub+2,exp@x+2
 17855  00166E  C099  F088         	movff	exp@x,eval_poly@x
 17856  001672  C09A  F089         	movff	exp@x+1,eval_poly@x+1
 17857  001676  C09B  F08A         	movff	exp@x+2,eval_poly@x+2
 17858  00167A  0E3A               	movlw	low exp@coeff
 17859  00167C  0100               	movlb	0	; () banked
 17860  00167E  6F8B               	movwf	eval_poly@d& (0+255),b
 17861  001680  0E78               	movlw	high exp@coeff
 17862  001682  6F8C               	movwf	(eval_poly@d+1)& (0+255),b
 17863  001684  0E00               	movlw	0
 17864  001686  6F8E               	movwf	(eval_poly@n+1)& (0+255),b
 17865  001688  0E09               	movlw	9
 17866  00168A  6F8D               	movwf	eval_poly@n& (0+255),b
 17867  00168C  ECB2  F017         	call	_eval_poly	;wreg free
 17868  001690  C088  F092         	movff	?_eval_poly,ldexp@value
 17869  001694  C089  F093         	movff	?_eval_poly+1,ldexp@value+1
 17870  001698  C08A  F094         	movff	?_eval_poly+2,ldexp@value+2
 17871  00169C  C09F  F095         	movff	exp@exponent,ldexp@newexp
 17872  0016A0  C0A0  F096         	movff	exp@exponent+1,ldexp@newexp+1
 17873  0016A4  EC1D  F018         	call	_ldexp	;wreg free
 17874  0016A8  C092  F099         	movff	?_ldexp,exp@x
 17875  0016AC  C093  F09A         	movff	?_ldexp+1,exp@x+1
 17876  0016B0  C094  F09B         	movff	?_ldexp+2,exp@x+2
 17877  0016B4  0100               	movlb	0	; () banked
 17878  0016B6  51A1               	movf	exp@sign& (0+255),w,b
 17879  0016B8  B4D8               	btfsc	status,2,c
 17880  0016BA  D025               	goto	l2399
 17881                           
 17882                           ; BSR set to: 0
 17883  0016BC  2999               	incf	exp@x& (0+255),w,b
 17884  0016BE  E10E               	bnz	l8553
 17885  0016C0  0E7F               	movlw	127
 17886  0016C2  199A               	xorwf	(exp@x+1)& (0+255),w,b
 17887  0016C4  E10B               	bnz	l8553
 17888  0016C6  0E7F               	movlw	127
 17889  0016C8  199B               	xorwf	(exp@x+2)& (0+255),w,b
 17890  0016CA  A4D8               	btfss	status,2,c
 17891  0016CC  D007               	goto	l2400
 17892                           
 17893                           ; BSR set to: 0
 17894  0016CE  0E00               	movlw	0
 17895  0016D0  6F99               	movwf	?_exp& (0+255),b
 17896  0016D2  0E00               	movlw	0
 17897  0016D4  6F9A               	movwf	(?_exp+1)& (0+255),b
 17898  0016D6  0E00               	movlw	0
 17899  0016D8  6F9B               	movwf	(?_exp+2)& (0+255),b
 17900                           
 17901                           ; BSR set to: 0
 17902  0016DA  0012               	return	
 17903  0016DC                     l2400:
 17904  0016DC                     l8553:
 17905                           
 17906                           ; BSR set to: 0
 17907  0016DC  0E00               	movlw	0
 17908  0016DE  6E23               	movwf	___ftdiv@f1,c
 17909  0016E0  0E80               	movlw	128
 17910  0016E2  6E24               	movwf	___ftdiv@f1+1,c
 17911  0016E4  0E3F               	movlw	63
 17912  0016E6  6E25               	movwf	___ftdiv@f1+2,c
 17913  0016E8  C099  F026         	movff	exp@x,___ftdiv@f2
 17914  0016EC  C09A  F027         	movff	exp@x+1,___ftdiv@f2+1
 17915  0016F0  C09B  F028         	movff	exp@x+2,___ftdiv@f2+2
 17916  0016F4  ECE8  F015         	call	___ftdiv	;wreg free
 17917  0016F8  C023  F099         	movff	?___ftdiv,?_exp
 17918  0016FC  C024  F09A         	movff	?___ftdiv+1,?_exp+1
 17919  001700  C025  F09B         	movff	?___ftdiv+2,?_exp+2
 17920  001704  0012               	return	
 17921  001706                     l2399:
 17922                           
 17923                           ; BSR set to: 0
 17924  001706  C099  F099         	movff	exp@x,?_exp
 17925  00170A  C09A  F09A         	movff	exp@x+1,?_exp+1
 17926  00170E  C09B  F09B         	movff	exp@x+2,?_exp+2
 17927  001712  0012               	return		;funcret
 17928  001714                     __end_of_exp:
 17929                           	opt stack 0
 17930                           tosu	equ	0xFFF
 17931                           tosh	equ	0xFFE
 17932                           tosl	equ	0xFFD
 17933                           pclath	equ	0xFFA
 17934                           tblptru	equ	0xFF8
 17935                           tblptrh	equ	0xFF7
 17936                           tblptrl	equ	0xFF6
 17937                           tablat	equ	0xFF5
 17938                           prodh	equ	0xFF4
 17939                           prodl	equ	0xFF3
 17940                           intcon	equ	0xFF2
 17941                           intcon2	equ	0xFF1
 17942                           indf0	equ	0xFEF
 17943                           postinc0	equ	0xFEE
 17944                           fsr0h	equ	0xFEA
 17945                           fsr0l	equ	0xFE9
 17946                           wreg	equ	0xFE8
 17947                           indf1	equ	0xFE7
 17948                           postdec1	equ	0xFE5
 17949                           fsr1h	equ	0xFE2
 17950                           fsr1l	equ	0xFE1
 17951                           indf2	equ	0xFDF
 17952                           postinc2	equ	0xFDE
 17953                           postdec2	equ	0xFDD
 17954                           fsr2h	equ	0xFDA
 17955                           fsr2l	equ	0xFD9
 17956                           status	equ	0xFD8
 17957                           
 17958 ;; *************** function _ldexp *****************
 17959 ;; Defined at:
 17960 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 17961 ;; Parameters:    Size  Location     Type
 17962 ;;  value           3   50[BANK0 ] unsigned char 
 17963 ;;  newexp          2   53[BANK0 ] int 
 17964 ;; Auto vars:     Size  Location     Type
 17965 ;;		None
 17966 ;; Return value:  Size  Location     Type
 17967 ;;                  3   50[BANK0 ] int 
 17968 ;; Registers used:
 17969 ;;		wreg, status,2, status,0
 17970 ;; Tracked objects:
 17971 ;;		On entry : 0/0
 17972 ;;		On exit  : 0/0
 17973 ;;		Unchanged: 0/0
 17974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17975 ;;      Params:         0       5       0       0       0       0       0
 17976 ;;      Locals:         0       0       0       0       0       0       0
 17977 ;;      Temps:          0       2       0       0       0       0       0
 17978 ;;      Totals:         0       7       0       0       0       0       0
 17979 ;;Total ram usage:        7 bytes
 17980 ;; Hardware stack levels used:    1
 17981 ;; Hardware stack levels required when called:    3
 17982 ;; This function calls:
 17983 ;;		Nothing
 17984 ;; This function is called by:
 17985 ;;		_exp
 17986 ;; This function uses a non-reentrant model
 17987 ;;
 17988                           
 17989                           	psect	text77
 17990  00303A                     __ptext77:
 17991                           	opt stack 0
 17992  00303A                     _ldexp:
 17993                           	opt stack 23
 17994                           
 17995                           ;incstack = 0
 17996  00303A  0100               	movlb	0	; () banked
 17997  00303C  5192               	movf	ldexp@value& (0+255),w,b
 17998  00303E  1193               	iorwf	(ldexp@value+1)& (0+255),w,b
 17999  003040  1194               	iorwf	(ldexp@value+2)& (0+255),w,b
 18000  003042  A4D8               	btfss	status,2,c
 18001  003044  D007               	goto	l2418
 18002                           
 18003                           ; BSR set to: 0
 18004  003046  0E00               	movlw	0
 18005  003048  6F92               	movwf	?_ldexp& (0+255),b
 18006  00304A  0E00               	movlw	0
 18007  00304C  6F93               	movwf	(?_ldexp+1)& (0+255),b
 18008  00304E  0E00               	movlw	0
 18009  003050  6F94               	movwf	(?_ldexp+2)& (0+255),b
 18010                           
 18011                           ; BSR set to: 0
 18012  003052  0012               	return	
 18013  003054                     l2418:
 18014                           
 18015                           ; BSR set to: 0
 18016                           
 18017                           ; BSR set to: 0
 18018  003054  5194               	movf	(ldexp@value+2)& (0+255),w,b
 18019  003056  0B7F               	andlw	127
 18020  003058  6F97               	movwf	??_ldexp& (0+255),b
 18021  00305A  6B98               	clrf	(??_ldexp+1)& (0+255),b
 18022  00305C  90D8               	bcf	status,0,c
 18023  00305E  3797               	rlcf	??_ldexp& (0+255),f,b
 18024  003060  3798               	rlcf	(??_ldexp+1)& (0+255),f,b
 18025  003062  5197               	movf	??_ldexp& (0+255),w,b
 18026  003064  2795               	addwf	ldexp@newexp& (0+255),f,b
 18027  003066  5198               	movf	(??_ldexp+1)& (0+255),w,b
 18028  003068  2396               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 18029  00306A  AF93               	btfss	(ldexp@value+1)& (0+255),7,b
 18030  00306C  D003               	goto	u7770
 18031  00306E  6B97               	clrf	??_ldexp& (0+255),b
 18032  003070  2B97               	incf	??_ldexp& (0+255),f,b
 18033  003072  D002               	goto	u7778
 18034  003074                     u7770:
 18035  003074  0100               	movlb	0	; () banked
 18036  003076  6B97               	clrf	??_ldexp& (0+255),b
 18037  003078                     u7778:
 18038  003078  5197               	movf	??_ldexp& (0+255),w,b
 18039  00307A  2795               	addwf	ldexp@newexp& (0+255),f,b
 18040  00307C  0E00               	movlw	0
 18041  00307E  2396               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 18042  003080  AF96               	btfss	(ldexp@newexp+1)& (0+255),7,b
 18043  003082  D00D               	goto	l2420
 18044                           
 18045                           ; BSR set to: 0
 18046  003084  0E00               	movlw	0
 18047  003086  0101               	movlb	1	; () banked
 18048  003088  6FC3               	movwf	(_errno+1)& (0+255),b
 18049  00308A  0E22               	movlw	34
 18050  00308C  6FC2               	movwf	_errno& (0+255),b
 18051  00308E  0E00               	movlw	0
 18052  003090  0100               	movlb	0	; () banked
 18053  003092  6F92               	movwf	?_ldexp& (0+255),b
 18054  003094  0E00               	movlw	0
 18055  003096  6F93               	movwf	(?_ldexp+1)& (0+255),b
 18056  003098  0E00               	movlw	0
 18057  00309A                     L3:
 18058  00309A  6F94               	movwf	(?_ldexp+2)& (0+255),b
 18059                           
 18060                           ; BSR set to: 0
 18061  00309C  0012               	return	
 18062  00309E                     l2420:
 18063                           
 18064                           ; BSR set to: 0
 18065                           
 18066                           ; BSR set to: 0
 18067  00309E  BF96               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 18068  0030A0  D017               	goto	l2422
 18069  0030A2  0596               	decf	(ldexp@newexp+1)& (0+255),w,b
 18070  0030A4  A0D8               	btfss	status,0,c
 18071  0030A6  D014               	goto	l2422
 18072                           
 18073                           ; BSR set to: 0
 18074  0030A8  0E00               	movlw	0
 18075  0030AA  0101               	movlb	1	; () banked
 18076  0030AC  6FC3               	movwf	(_errno+1)& (0+255),b
 18077  0030AE  0E22               	movlw	34
 18078  0030B0  6FC2               	movwf	_errno& (0+255),b
 18079                           
 18080                           ; BSR set to: 1
 18081  0030B2  0100               	movlb	0	; () banked
 18082  0030B4  AF94               	btfss	(ldexp@value+2)& (0+255),7,b
 18083  0030B6  D006               	goto	l2423
 18084                           
 18085                           ; BSR set to: 0
 18086  0030B8  0EFF               	movlw	255
 18087  0030BA  6F92               	movwf	?_ldexp& (0+255),b
 18088  0030BC  0E7F               	movlw	127
 18089  0030BE  6F93               	movwf	(?_ldexp+1)& (0+255),b
 18090  0030C0  0EFF               	movlw	255
 18091  0030C2  D7EB               	goto	L3
 18092  0030C4                     l2423:
 18093                           
 18094                           ; BSR set to: 0
 18095                           
 18096                           ; BSR set to: 0
 18097  0030C4  0EFF               	movlw	255
 18098  0030C6  6F92               	movwf	?_ldexp& (0+255),b
 18099  0030C8  0E7F               	movlw	127
 18100  0030CA  6F93               	movwf	(?_ldexp+1)& (0+255),b
 18101  0030CC  0E7F               	movlw	127
 18102  0030CE  D7E5               	goto	L3
 18103  0030D0                     l2422:
 18104                           
 18105                           ; BSR set to: 0
 18106                           
 18107                           ; BSR set to: 0
 18108  0030D0  3596               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 18109  0030D2  3196               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 18110  0030D4  6F98               	movwf	(??_ldexp+1)& (0+255),b
 18111  0030D6  3195               	rrcf	ldexp@newexp& (0+255),w,b
 18112  0030D8  6F97               	movwf	??_ldexp& (0+255),b
 18113  0030DA  5194               	movf	(ldexp@value+2)& (0+255),w,b
 18114  0030DC  1997               	xorwf	??_ldexp& (0+255),w,b
 18115  0030DE  0B80               	andlw	-128
 18116  0030E0  1997               	xorwf	??_ldexp& (0+255),w,b
 18117  0030E2  6F94               	movwf	(ldexp@value+2)& (0+255),b
 18118  0030E4  C095  F097         	movff	ldexp@newexp,??_ldexp
 18119  0030E8  0E01               	movlw	1
 18120  0030EA  1797               	andwf	??_ldexp& (0+255),f,b
 18121  0030EC  3397               	rrcf	??_ldexp& (0+255),f,b
 18122  0030EE  3397               	rrcf	??_ldexp& (0+255),f,b
 18123  0030F0  5193               	movf	(ldexp@value+1)& (0+255),w,b
 18124  0030F2  1997               	xorwf	??_ldexp& (0+255),w,b
 18125  0030F4  0B7F               	andlw	-129
 18126  0030F6  1997               	xorwf	??_ldexp& (0+255),w,b
 18127  0030F8  6F93               	movwf	(ldexp@value+1)& (0+255),b
 18128                           
 18129                           ; BSR set to: 0
 18130                           
 18131                           ; BSR set to: 0
 18132                           
 18133                           ; BSR set to: 0
 18134  0030FA  C092  F092         	movff	ldexp@value,?_ldexp
 18135  0030FE  C093  F093         	movff	ldexp@value+1,?_ldexp+1
 18136  003102  C094  F094         	movff	ldexp@value+2,?_ldexp+2
 18137  003106  0012               	return	
 18138  003108                     __end_of_ldexp:
 18139                           	opt stack 0
 18140                           tosu	equ	0xFFF
 18141                           tosh	equ	0xFFE
 18142                           tosl	equ	0xFFD
 18143                           pclath	equ	0xFFA
 18144                           tblptru	equ	0xFF8
 18145                           tblptrh	equ	0xFF7
 18146                           tblptrl	equ	0xFF6
 18147                           tablat	equ	0xFF5
 18148                           prodh	equ	0xFF4
 18149                           prodl	equ	0xFF3
 18150                           intcon	equ	0xFF2
 18151                           intcon2	equ	0xFF1
 18152                           indf0	equ	0xFEF
 18153                           postinc0	equ	0xFEE
 18154                           fsr0h	equ	0xFEA
 18155                           fsr0l	equ	0xFE9
 18156                           wreg	equ	0xFE8
 18157                           indf1	equ	0xFE7
 18158                           postdec1	equ	0xFE5
 18159                           fsr1h	equ	0xFE2
 18160                           fsr1l	equ	0xFE1
 18161                           indf2	equ	0xFDF
 18162                           postinc2	equ	0xFDE
 18163                           postdec2	equ	0xFDD
 18164                           fsr2h	equ	0xFDA
 18165                           fsr2l	equ	0xFD9
 18166                           status	equ	0xFD8
 18167                           
 18168 ;; *************** function _floor *****************
 18169 ;; Defined at:
 18170 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 18171 ;; Parameters:    Size  Location     Type
 18172 ;;  x               3   48[BANK0 ] int 
 18173 ;; Auto vars:     Size  Location     Type
 18174 ;;  i               3   51[BANK0 ] int 
 18175 ;;  expon           2   54[BANK0 ] int 
 18176 ;; Return value:  Size  Location     Type
 18177 ;;                  3   48[BANK0 ] int 
 18178 ;; Registers used:
 18179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18180 ;; Tracked objects:
 18181 ;;		On entry : 0/0
 18182 ;;		On exit  : 0/0
 18183 ;;		Unchanged: 0/0
 18184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18185 ;;      Params:         0       3       0       0       0       0       0
 18186 ;;      Locals:         0       5       0       0       0       0       0
 18187 ;;      Temps:          0       0       0       0       0       0       0
 18188 ;;      Totals:         0       8       0       0       0       0       0
 18189 ;;Total ram usage:        8 bytes
 18190 ;; Hardware stack levels used:    1
 18191 ;; Hardware stack levels required when called:    5
 18192 ;; This function calls:
 18193 ;;		___altoft
 18194 ;;		___ftadd
 18195 ;;		___ftge
 18196 ;;		___fttol
 18197 ;;		_frexp
 18198 ;; This function is called by:
 18199 ;;		_exp
 18200 ;; This function uses a non-reentrant model
 18201 ;;
 18202                           
 18203                           	psect	text78
 18204  002E82                     __ptext78:
 18205                           	opt stack 0
 18206  002E82                     _floor:
 18207                           	opt stack 21
 18208                           
 18209                           ; BSR set to: 0
 18210                           ;incstack = 0
 18211  002E82  C090  F018         	movff	floor@x,frexp@value
 18212  002E86  C091  F019         	movff	floor@x+1,frexp@value+1
 18213  002E8A  C092  F01A         	movff	floor@x+2,frexp@value+2
 18214  002E8E  0E96               	movlw	low floor@expon
 18215  002E90  6E1B               	movwf	frexp@eptr,c
 18216  002E92  0E00               	movlw	high floor@expon
 18217  002E94  6E1C               	movwf	frexp@eptr+1,c
 18218  002E96  ECD5  F01A         	call	_frexp	;wreg free
 18219  002E9A  0100               	movlb	0	; () banked
 18220  002E9C  AF97               	btfss	(floor@expon+1)& (0+255),7,b
 18221  002E9E  D010               	goto	l2405
 18222                           
 18223                           ; BSR set to: 0
 18224  002EA0  AF92               	btfss	(floor@x+2)& (0+255),7,b
 18225  002EA2  D007               	goto	l2406
 18226                           
 18227                           ; BSR set to: 0
 18228  002EA4  0E00               	movlw	0
 18229  002EA6  6F90               	movwf	?_floor& (0+255),b
 18230  002EA8  0E80               	movlw	128
 18231  002EAA  6F91               	movwf	(?_floor+1)& (0+255),b
 18232  002EAC  0EBF               	movlw	191
 18233  002EAE  6F92               	movwf	(?_floor+2)& (0+255),b
 18234                           
 18235                           ; BSR set to: 0
 18236  002EB0  0012               	return	
 18237  002EB2                     l2406:
 18238                           
 18239                           ; BSR set to: 0
 18240                           
 18241                           ; BSR set to: 0
 18242  002EB2  0E00               	movlw	0
 18243  002EB4  6F90               	movwf	?_floor& (0+255),b
 18244  002EB6  0E00               	movlw	0
 18245  002EB8  6F91               	movwf	(?_floor+1)& (0+255),b
 18246  002EBA  0E00               	movlw	0
 18247  002EBC  6F92               	movwf	(?_floor+2)& (0+255),b
 18248                           
 18249                           ; BSR set to: 0
 18250  002EBE  0012               	return	
 18251  002EC0                     l2405:
 18252                           
 18253                           ; BSR set to: 0
 18254                           
 18255                           ; BSR set to: 0
 18256  002EC0  5197               	movf	(floor@expon+1)& (0+255),w,b
 18257  002EC2  E104               	bnz	u7730
 18258  002EC4  0E15               	movlw	21
 18259  002EC6  5D96               	subwf	floor@expon& (0+255),w,b
 18260  002EC8  A0D8               	btfss	status,0,c
 18261  002ECA  D007               	goto	l2408
 18262  002ECC                     u7730:
 18263                           
 18264                           ; BSR set to: 0
 18265  002ECC  C090  F090         	movff	floor@x,?_floor
 18266  002ED0  C091  F091         	movff	floor@x+1,?_floor+1
 18267  002ED4  C092  F092         	movff	floor@x+2,?_floor+2
 18268  002ED8  0012               	return	
 18269  002EDA                     l2408:
 18270                           
 18271                           ; BSR set to: 0
 18272                           
 18273                           ; BSR set to: 0
 18274  002EDA  C090  F079         	movff	floor@x,___fttol@f1
 18275  002EDE  C091  F07A         	movff	floor@x+1,___fttol@f1+1
 18276  002EE2  C092  F07B         	movff	floor@x+2,___fttol@f1+2
 18277  002EE6  ECF1  F014         	call	___fttol	;wreg free
 18278  002EEA  C079  F088         	movff	?___fttol,___altoft@c
 18279  002EEE  C07A  F089         	movff	?___fttol+1,___altoft@c+1
 18280  002EF2  C07B  F08A         	movff	?___fttol+2,___altoft@c+2
 18281  002EF6  C07C  F08B         	movff	?___fttol+3,___altoft@c+3
 18282  002EFA  EC29  F01C         	call	___altoft	;wreg free
 18283  002EFE  C088  F093         	movff	?___altoft,floor@i
 18284  002F02  C089  F094         	movff	?___altoft+1,floor@i+1
 18285  002F06  C08A  F095         	movff	?___altoft+2,floor@i+2
 18286  002F0A  C090  F018         	movff	floor@x,___ftge@ff1
 18287  002F0E  C091  F019         	movff	floor@x+1,___ftge@ff1+1
 18288  002F12  C092  F01A         	movff	floor@x+2,___ftge@ff1+2
 18289  002F16  C093  F01B         	movff	floor@i,___ftge@ff2
 18290  002F1A  C094  F01C         	movff	floor@i+1,___ftge@ff2+1
 18291  002F1E  C095  F01D         	movff	floor@i+2,___ftge@ff2+2
 18292  002F22  EC1D  F01B         	call	___ftge	;wreg free
 18293  002F26  B0D8               	btfsc	status,0,c
 18294  002F28  D016               	goto	l2409
 18295  002F2A  C093  F07C         	movff	floor@i,___ftadd@f1
 18296  002F2E  C094  F07D         	movff	floor@i+1,___ftadd@f1+1
 18297  002F32  C095  F07E         	movff	floor@i+2,___ftadd@f1+2
 18298  002F36  0E00               	movlw	0
 18299  002F38  0100               	movlb	0	; () banked
 18300  002F3A  6F7F               	movwf	___ftadd@f2& (0+255),b
 18301  002F3C  0E80               	movlw	128
 18302  002F3E  6F80               	movwf	(___ftadd@f2+1)& (0+255),b
 18303  002F40  0EBF               	movlw	191
 18304  002F42  6F81               	movwf	(___ftadd@f2+2)& (0+255),b
 18305  002F44  EC75  F00C         	call	___ftadd	;wreg free
 18306  002F48  C07C  F090         	movff	?___ftadd,?_floor
 18307  002F4C  C07D  F091         	movff	?___ftadd+1,?_floor+1
 18308  002F50  C07E  F092         	movff	?___ftadd+2,?_floor+2
 18309  002F54  0012               	return	
 18310  002F56                     l2409:
 18311  002F56  C093  F090         	movff	floor@i,?_floor
 18312  002F5A  C094  F091         	movff	floor@i+1,?_floor+1
 18313  002F5E  C095  F092         	movff	floor@i+2,?_floor+2
 18314  002F62  0012               	return		;funcret
 18315  002F64                     __end_of_floor:
 18316                           	opt stack 0
 18317                           tosu	equ	0xFFF
 18318                           tosh	equ	0xFFE
 18319                           tosl	equ	0xFFD
 18320                           pclath	equ	0xFFA
 18321                           tblptru	equ	0xFF8
 18322                           tblptrh	equ	0xFF7
 18323                           tblptrl	equ	0xFF6
 18324                           tablat	equ	0xFF5
 18325                           prodh	equ	0xFF4
 18326                           prodl	equ	0xFF3
 18327                           intcon	equ	0xFF2
 18328                           intcon2	equ	0xFF1
 18329                           indf0	equ	0xFEF
 18330                           postinc0	equ	0xFEE
 18331                           fsr0h	equ	0xFEA
 18332                           fsr0l	equ	0xFE9
 18333                           wreg	equ	0xFE8
 18334                           indf1	equ	0xFE7
 18335                           postdec1	equ	0xFE5
 18336                           fsr1h	equ	0xFE2
 18337                           fsr1l	equ	0xFE1
 18338                           indf2	equ	0xFDF
 18339                           postinc2	equ	0xFDE
 18340                           postdec2	equ	0xFDD
 18341                           fsr2h	equ	0xFDA
 18342                           fsr2l	equ	0xFD9
 18343                           status	equ	0xFD8
 18344                           
 18345 ;; *************** function _frexp *****************
 18346 ;; Defined at:
 18347 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 18348 ;; Parameters:    Size  Location     Type
 18349 ;;  value           3   23[COMRAM] int 
 18350 ;;  eptr            2   26[COMRAM] PTR int 
 18351 ;;		 -> log@exponent(2), floor@expon(2), 
 18352 ;; Auto vars:     Size  Location     Type
 18353 ;;		None
 18354 ;; Return value:  Size  Location     Type
 18355 ;;                  3   23[COMRAM] PTR int 
 18356 ;; Registers used:
 18357 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18358 ;; Tracked objects:
 18359 ;;		On entry : 0/0
 18360 ;;		On exit  : 0/0
 18361 ;;		Unchanged: 0/0
 18362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18363 ;;      Params:         5       0       0       0       0       0       0
 18364 ;;      Locals:         0       0       0       0       0       0       0
 18365 ;;      Temps:          2       0       0       0       0       0       0
 18366 ;;      Totals:         7       0       0       0       0       0       0
 18367 ;;Total ram usage:        7 bytes
 18368 ;; Hardware stack levels used:    1
 18369 ;; Hardware stack levels required when called:    3
 18370 ;; This function calls:
 18371 ;;		Nothing
 18372 ;; This function is called by:
 18373 ;;		_floor
 18374 ;;		_log
 18375 ;; This function uses a non-reentrant model
 18376 ;;
 18377                           
 18378                           	psect	text79
 18379  0035AA                     __ptext79:
 18380                           	opt stack 0
 18381  0035AA                     _frexp:
 18382                           	opt stack 23
 18383                           
 18384                           ;incstack = 0
 18385  0035AA  5018               	movf	frexp@value,w,c
 18386  0035AC  1019               	iorwf	frexp@value+1,w,c
 18387  0035AE  101A               	iorwf	frexp@value+2,w,c
 18388  0035B0  A4D8               	btfss	status,2,c
 18389  0035B2  D00F               	goto	l2414
 18390  0035B4  C01B  FFD9         	movff	frexp@eptr,fsr2l
 18391  0035B8  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 18392  0035BC  0E00               	movlw	0
 18393  0035BE  6EDE               	movwf	postinc2,c
 18394  0035C0  0E00               	movlw	0
 18395  0035C2  6EDD               	movwf	postdec2,c
 18396  0035C4  0E00               	movlw	0
 18397  0035C6  6E18               	movwf	?_frexp,c
 18398  0035C8  0E00               	movlw	0
 18399  0035CA  6E19               	movwf	?_frexp+1,c
 18400  0035CC  0E00               	movlw	0
 18401  0035CE  6E1A               	movwf	?_frexp+2,c
 18402  0035D0  0012               	return	
 18403  0035D2                     l2414:
 18404  0035D2  501A               	movf	frexp@value+2,w,c
 18405  0035D4  0B7F               	andlw	127
 18406  0035D6  6E1D               	movwf	??_frexp& (0+255),c
 18407  0035D8  6A1E               	clrf	(??_frexp+1)& (0+255),c
 18408  0035DA  90D8               	bcf	status,0,c
 18409  0035DC  361D               	rlcf	??_frexp,f,c
 18410  0035DE  361E               	rlcf	??_frexp+1,f,c
 18411  0035E0  C01B  FFD9         	movff	frexp@eptr,fsr2l
 18412  0035E4  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 18413  0035E8  C01D  FFDE         	movff	??_frexp,postinc2
 18414  0035EC  C01E  FFDD         	movff	??_frexp+1,postdec2
 18415  0035F0  AE19               	btfss	frexp@value+1,7,c
 18416  0035F2  D003               	goto	u7350
 18417  0035F4  6A1D               	clrf	??_frexp& (0+255),c
 18418  0035F6  2A1D               	incf	??_frexp& (0+255),f,c
 18419  0035F8  D001               	goto	u7358
 18420  0035FA                     u7350:
 18421  0035FA  6A1D               	clrf	??_frexp& (0+255),c
 18422  0035FC                     u7358:
 18423  0035FC  501D               	movf	??_frexp,w,c
 18424  0035FE  C01B  FFD9         	movff	frexp@eptr,fsr2l
 18425  003602  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 18426  003606  12DE               	iorwf	postinc2,f,c
 18427  003608  0E00               	movlw	0
 18428  00360A  12DD               	iorwf	postdec2,f,c
 18429  00360C  C01B  FFD9         	movff	frexp@eptr,fsr2l
 18430  003610  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 18431  003614  0E82               	movlw	130
 18432  003616  26DE               	addwf	postinc2,f,c
 18433  003618  0EFF               	movlw	255
 18434  00361A  22DD               	addwfc	postdec2,f,c
 18435  00361C  801A               	bsf	frexp@value+2,0,c
 18436  00361E  821A               	bsf	frexp@value+2,1,c
 18437  003620  841A               	bsf	frexp@value+2,2,c
 18438  003622  861A               	bsf	frexp@value+2,3,c
 18439  003624  881A               	bsf	frexp@value+2,4,c
 18440  003626  8A1A               	bsf	frexp@value+2,5,c
 18441  003628  9C1A               	bcf	frexp@value+2,6,c
 18442  00362A  9E19               	bcf	frexp@value+1,7,c
 18443  00362C  C018  F018         	movff	frexp@value,?_frexp
 18444  003630  C019  F019         	movff	frexp@value+1,?_frexp+1
 18445  003634  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 18446  003638  0012               	return	
 18447  00363A                     __end_of_frexp:
 18448                           	opt stack 0
 18449                           tosu	equ	0xFFF
 18450                           tosh	equ	0xFFE
 18451                           tosl	equ	0xFFD
 18452                           pclath	equ	0xFFA
 18453                           tblptru	equ	0xFF8
 18454                           tblptrh	equ	0xFF7
 18455                           tblptrl	equ	0xFF6
 18456                           tablat	equ	0xFF5
 18457                           prodh	equ	0xFF4
 18458                           prodl	equ	0xFF3
 18459                           intcon	equ	0xFF2
 18460                           intcon2	equ	0xFF1
 18461                           indf0	equ	0xFEF
 18462                           postinc0	equ	0xFEE
 18463                           fsr0h	equ	0xFEA
 18464                           fsr0l	equ	0xFE9
 18465                           wreg	equ	0xFE8
 18466                           indf1	equ	0xFE7
 18467                           postdec1	equ	0xFE5
 18468                           fsr1h	equ	0xFE2
 18469                           fsr1l	equ	0xFE1
 18470                           indf2	equ	0xFDF
 18471                           postinc2	equ	0xFDE
 18472                           postdec2	equ	0xFDD
 18473                           fsr2h	equ	0xFDA
 18474                           fsr2l	equ	0xFD9
 18475                           status	equ	0xFD8
 18476                           
 18477 ;; *************** function ___fttol *****************
 18478 ;; Defined at:
 18479 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 18480 ;; Parameters:    Size  Location     Type
 18481 ;;  f1              3   25[BANK0 ] float 
 18482 ;; Auto vars:     Size  Location     Type
 18483 ;;  lval            4   35[BANK0 ] unsigned long 
 18484 ;;  exp1            1   39[BANK0 ] unsigned char 
 18485 ;;  sign1           1   34[BANK0 ] unsigned char 
 18486 ;; Return value:  Size  Location     Type
 18487 ;;                  4   25[BANK0 ] long 
 18488 ;; Registers used:
 18489 ;;		wreg, status,2, status,0
 18490 ;; Tracked objects:
 18491 ;;		On entry : 0/0
 18492 ;;		On exit  : 0/0
 18493 ;;		Unchanged: 0/0
 18494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18495 ;;      Params:         0       4       0       0       0       0       0
 18496 ;;      Locals:         0       6       0       0       0       0       0
 18497 ;;      Temps:          0       5       0       0       0       0       0
 18498 ;;      Totals:         0      15       0       0       0       0       0
 18499 ;;Total ram usage:       15 bytes
 18500 ;; Hardware stack levels used:    1
 18501 ;; Hardware stack levels required when called:    3
 18502 ;; This function calls:
 18503 ;;		Nothing
 18504 ;; This function is called by:
 18505 ;;		_SampleSingleChannel
 18506 ;;		_SampleAllChannels
 18507 ;;		_GroupRx
 18508 ;;		_GroupTx
 18509 ;;		_ReadIntFromEeprom
 18510 ;;		_sprintf
 18511 ;;		_pow
 18512 ;;		_exp
 18513 ;;		_floor
 18514 ;;		_DacSetValue
 18515 ;;		_DacAnalogToDigitalSpi
 18516 ;;		_UpdateSynthFreq
 18517 ;;		_CalcSynthRegParams
 18518 ;; This function uses a non-reentrant model
 18519 ;;
 18520                           
 18521                           	psect	text80
 18522  0029E2                     __ptext80:
 18523                           	opt stack 0
 18524  0029E2                     ___fttol:
 18525                           	opt stack 25
 18526                           
 18527                           ;incstack = 0
 18528  0029E2  C07B  F07D         	movff	___fttol@f1+2,??___fttol
 18529  0029E6  0100               	movlb	0	; () banked
 18530  0029E8  6B7E               	clrf	(??___fttol+1)& (0+255),b
 18531  0029EA  6B7F               	clrf	(??___fttol+2)& (0+255),b
 18532  0029EC  357A               	rlcf	(___fttol@f1+1)& (0+255),w,b
 18533  0029EE  377D               	rlcf	??___fttol& (0+255),f,b
 18534  0029F0  E301               	bnc	u7261
 18535  0029F2  817E               	bsf	(??___fttol+1)& (0+255),0,b
 18536  0029F4                     u7261:
 18537  0029F4  517D               	movf	??___fttol& (0+255),w,b
 18538  0029F6  6F87               	movwf	___fttol@exp1& (0+255),b
 18539  0029F8  5187               	movf	___fttol@exp1& (0+255),w,b
 18540  0029FA  A4D8               	btfss	status,2,c
 18541  0029FC  D009               	goto	l2067
 18542                           
 18543                           ; BSR set to: 0
 18544  0029FE  0E00               	movlw	0
 18545  002A00  6F79               	movwf	?___fttol& (0+255),b
 18546  002A02  0E00               	movlw	0
 18547  002A04  6F7A               	movwf	(?___fttol+1)& (0+255),b
 18548  002A06  0E00               	movlw	0
 18549  002A08  6F7B               	movwf	(?___fttol+2)& (0+255),b
 18550  002A0A  0E00               	movlw	0
 18551  002A0C  6F7C               	movwf	(?___fttol+3)& (0+255),b
 18552                           
 18553                           ; BSR set to: 0
 18554  002A0E  0012               	return	
 18555  002A10                     l2067:
 18556                           
 18557                           ; BSR set to: 0
 18558                           
 18559                           ; BSR set to: 0
 18560  002A10  0E17               	movlw	23
 18561  002A12  6F7D               	movwf	??___fttol& (0+255),b
 18562  002A14  C079  F07E         	movff	___fttol@f1,??___fttol+1
 18563  002A18  C07A  F07F         	movff	___fttol@f1+1,??___fttol+2
 18564  002A1C  C07B  F080         	movff	___fttol@f1+2,??___fttol+3
 18565  002A20  297D               	incf	??___fttol& (0+255),w,b
 18566  002A22  6F81               	movwf	(??___fttol+4)& (0+255),b
 18567  002A24  D004               	goto	u7280
 18568  002A26                     u7285:
 18569  002A26  90D8               	bcf	status,0,c
 18570  002A28  3380               	rrcf	(??___fttol+3)& (0+255),f,b
 18571  002A2A  337F               	rrcf	(??___fttol+2)& (0+255),f,b
 18572  002A2C  337E               	rrcf	(??___fttol+1)& (0+255),f,b
 18573  002A2E                     u7280:
 18574  002A2E  2F81               	decfsz	(??___fttol+4)& (0+255),f,b
 18575  002A30  D7FA               	goto	u7285
 18576  002A32  0100               	movlb	0	; () banked
 18577  002A34  517E               	movf	(??___fttol+1)& (0+255),w,b
 18578  002A36  6F82               	movwf	___fttol@sign1& (0+255),b
 18579                           
 18580                           ; BSR set to: 0
 18581  002A38  8F7A               	bsf	(___fttol@f1+1)& (0+255),7,b
 18582                           
 18583                           ; BSR set to: 0
 18584  002A3A  0EFF               	movlw	255
 18585  002A3C  1779               	andwf	___fttol@f1& (0+255),f,b
 18586  002A3E  0EFF               	movlw	255
 18587  002A40  177A               	andwf	(___fttol@f1+1)& (0+255),f,b
 18588  002A42  0E00               	movlw	0
 18589  002A44  177B               	andwf	(___fttol@f1+2)& (0+255),f,b
 18590                           
 18591                           ; BSR set to: 0
 18592  002A46  5179               	movf	___fttol@f1& (0+255),w,b
 18593  002A48  6F83               	movwf	___fttol@lval& (0+255),b
 18594  002A4A  517A               	movf	(___fttol@f1+1)& (0+255),w,b
 18595  002A4C  6F84               	movwf	(___fttol@lval+1)& (0+255),b
 18596  002A4E  517B               	movf	(___fttol@f1+2)& (0+255),w,b
 18597  002A50  6F85               	movwf	(___fttol@lval+2)& (0+255),b
 18598  002A52  6B86               	clrf	(___fttol@lval+3)& (0+255),b
 18599                           
 18600                           ; BSR set to: 0
 18601  002A54  0E8E               	movlw	142
 18602  002A56  5F87               	subwf	___fttol@exp1& (0+255),f,b
 18603                           
 18604                           ; BSR set to: 0
 18605  002A58  AF87               	btfss	___fttol@exp1& (0+255),7,b
 18606  002A5A  D016               	goto	l2069
 18607                           
 18608                           ; BSR set to: 0
 18609  002A5C  5187               	movf	___fttol@exp1& (0+255),w,b
 18610  002A5E  0A80               	xorlw	128
 18611  002A60  0F8F               	addlw	143
 18612  002A62  B0D8               	btfsc	status,0,c
 18613  002A64  D009               	goto	l2070
 18614                           
 18615                           ; BSR set to: 0
 18616  002A66  0E00               	movlw	0
 18617  002A68  6F79               	movwf	?___fttol& (0+255),b
 18618  002A6A  0E00               	movlw	0
 18619  002A6C  6F7A               	movwf	(?___fttol+1)& (0+255),b
 18620  002A6E  0E00               	movlw	0
 18621  002A70  6F7B               	movwf	(?___fttol+2)& (0+255),b
 18622  002A72  0E00               	movlw	0
 18623  002A74  6F7C               	movwf	(?___fttol+3)& (0+255),b
 18624                           
 18625                           ; BSR set to: 0
 18626  002A76  0012               	return	
 18627  002A78                     l2070:
 18628                           
 18629                           ; BSR set to: 0
 18630                           
 18631                           ; BSR set to: 0
 18632                           
 18633                           ; BSR set to: 0
 18634  002A78  90D8               	bcf	status,0,c
 18635  002A7A  3386               	rrcf	(___fttol@lval+3)& (0+255),f,b
 18636  002A7C  3385               	rrcf	(___fttol@lval+2)& (0+255),f,b
 18637  002A7E  3384               	rrcf	(___fttol@lval+1)& (0+255),f,b
 18638  002A80  3383               	rrcf	___fttol@lval& (0+255),f,b
 18639                           
 18640                           ; BSR set to: 0
 18641  002A82  3F87               	incfsz	___fttol@exp1& (0+255),f,b
 18642  002A84  D7F9               	goto	l2070
 18643                           
 18644                           ; BSR set to: 0
 18645  002A86  D015               	goto	u7320
 18646  002A88                     l2069:
 18647                           
 18648                           ; BSR set to: 0
 18649                           
 18650                           ; BSR set to: 0
 18651  002A88  0E17               	movlw	23
 18652  002A8A  6587               	cpfsgt	___fttol@exp1& (0+255),b
 18653  002A8C  D00F               	goto	l2075
 18654                           
 18655                           ; BSR set to: 0
 18656  002A8E  0E00               	movlw	0
 18657  002A90  6F79               	movwf	?___fttol& (0+255),b
 18658  002A92  0E00               	movlw	0
 18659  002A94  6F7A               	movwf	(?___fttol+1)& (0+255),b
 18660  002A96  0E00               	movlw	0
 18661  002A98  6F7B               	movwf	(?___fttol+2)& (0+255),b
 18662  002A9A  0E00               	movlw	0
 18663  002A9C  6F7C               	movwf	(?___fttol+3)& (0+255),b
 18664                           
 18665                           ; BSR set to: 0
 18666  002A9E  0012               	return	
 18667  002AA0                     
 18668                           ; BSR set to: 0
 18669                           
 18670                           ; BSR set to: 0
 18671  002AA0  90D8               	bcf	status,0,c
 18672  002AA2  3783               	rlcf	___fttol@lval& (0+255),f,b
 18673  002AA4  3784               	rlcf	(___fttol@lval+1)& (0+255),f,b
 18674  002AA6  3785               	rlcf	(___fttol@lval+2)& (0+255),f,b
 18675  002AA8  3786               	rlcf	(___fttol@lval+3)& (0+255),f,b
 18676  002AAA  0787               	decf	___fttol@exp1& (0+255),f,b
 18677  002AAC                     l2075:
 18678                           
 18679                           ; BSR set to: 0
 18680                           
 18681                           ; BSR set to: 0
 18682  002AAC  5187               	movf	___fttol@exp1& (0+255),w,b
 18683  002AAE  A4D8               	btfss	status,2,c
 18684  002AB0  D7F7               	goto	l2076
 18685  002AB2                     u7320:
 18686                           
 18687                           ; BSR set to: 0
 18688                           
 18689                           ; BSR set to: 0
 18690                           
 18691                           ; BSR set to: 0
 18692  002AB2  5182               	movf	___fttol@sign1& (0+255),w,b
 18693  002AB4  B4D8               	btfsc	status,2,c
 18694  002AB6  D008               	goto	l2078
 18695                           
 18696                           ; BSR set to: 0
 18697  002AB8  1F86               	comf	(___fttol@lval+3)& (0+255),f,b
 18698  002ABA  1F85               	comf	(___fttol@lval+2)& (0+255),f,b
 18699  002ABC  1F84               	comf	(___fttol@lval+1)& (0+255),f,b
 18700  002ABE  6D83               	negf	___fttol@lval& (0+255),b
 18701  002AC0  0E00               	movlw	0
 18702  002AC2  2384               	addwfc	(___fttol@lval+1)& (0+255),f,b
 18703  002AC4  2385               	addwfc	(___fttol@lval+2)& (0+255),f,b
 18704  002AC6  2386               	addwfc	(___fttol@lval+3)& (0+255),f,b
 18705  002AC8                     l2078:
 18706                           
 18707                           ; BSR set to: 0
 18708                           
 18709                           ; BSR set to: 0
 18710  002AC8  C083  F079         	movff	___fttol@lval,?___fttol
 18711  002ACC  C084  F07A         	movff	___fttol@lval+1,?___fttol+1
 18712  002AD0  C085  F07B         	movff	___fttol@lval+2,?___fttol+2
 18713  002AD4  C086  F07C         	movff	___fttol@lval+3,?___fttol+3
 18714  002AD8  0012               	return	
 18715  002ADA                     __end_of___fttol:
 18716                           	opt stack 0
 18717                           tosu	equ	0xFFF
 18718                           tosh	equ	0xFFE
 18719                           tosl	equ	0xFFD
 18720                           pclath	equ	0xFFA
 18721                           tblptru	equ	0xFF8
 18722                           tblptrh	equ	0xFF7
 18723                           tblptrl	equ	0xFF6
 18724                           tablat	equ	0xFF5
 18725                           prodh	equ	0xFF4
 18726                           prodl	equ	0xFF3
 18727                           intcon	equ	0xFF2
 18728                           intcon2	equ	0xFF1
 18729                           indf0	equ	0xFEF
 18730                           postinc0	equ	0xFEE
 18731                           fsr0h	equ	0xFEA
 18732                           fsr0l	equ	0xFE9
 18733                           wreg	equ	0xFE8
 18734                           indf1	equ	0xFE7
 18735                           postdec1	equ	0xFE5
 18736                           fsr1h	equ	0xFE2
 18737                           fsr1l	equ	0xFE1
 18738                           indf2	equ	0xFDF
 18739                           postinc2	equ	0xFDE
 18740                           postdec2	equ	0xFDD
 18741                           fsr2h	equ	0xFDA
 18742                           fsr2l	equ	0xFD9
 18743                           status	equ	0xFD8
 18744                           
 18745 ;; *************** function ___ftge *****************
 18746 ;; Defined at:
 18747 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 18748 ;; Parameters:    Size  Location     Type
 18749 ;;  ff1             3   23[COMRAM] float 
 18750 ;;  ff2             3   26[COMRAM] float 
 18751 ;; Auto vars:     Size  Location     Type
 18752 ;;		None
 18753 ;; Return value:  Size  Location     Type
 18754 ;;		None               void
 18755 ;; Registers used:
 18756 ;;		wreg, status,2, status,0
 18757 ;; Tracked objects:
 18758 ;;		On entry : 0/0
 18759 ;;		On exit  : 0/0
 18760 ;;		Unchanged: 0/0
 18761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18762 ;;      Params:         6       0       0       0       0       0       0
 18763 ;;      Locals:         0       0       0       0       0       0       0
 18764 ;;      Temps:          3       0       0       0       0       0       0
 18765 ;;      Totals:         9       0       0       0       0       0       0
 18766 ;;Total ram usage:        9 bytes
 18767 ;; Hardware stack levels used:    1
 18768 ;; Hardware stack levels required when called:    3
 18769 ;; This function calls:
 18770 ;;		Nothing
 18771 ;; This function is called by:
 18772 ;;		_sprintf
 18773 ;;		_pow
 18774 ;;		_exp
 18775 ;;		_floor
 18776 ;; This function uses a non-reentrant model
 18777 ;;
 18778                           
 18779                           	psect	text81
 18780  00363A                     __ptext81:
 18781                           	opt stack 0
 18782  00363A                     ___ftge:
 18783                           	opt stack 25
 18784                           
 18785                           ; BSR set to: 0
 18786                           ;incstack = 0
 18787  00363A  AE1A               	btfss	___ftge@ff1+2,7,c
 18788  00363C  D016               	goto	l2039
 18789  00363E  C018  F01E         	movff	___ftge@ff1,??___ftge
 18790  003642  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 18791  003646  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 18792  00364A  1E1E               	comf	??___ftge,f,c
 18793  00364C  1E1F               	comf	??___ftge+1,f,c
 18794  00364E  1E20               	comf	??___ftge+2,f,c
 18795  003650  2A1E               	incf	??___ftge,f,c
 18796  003652  0E00               	movlw	0
 18797  003654  221F               	addwfc	??___ftge+1,f,c
 18798  003656  2220               	addwfc	??___ftge+2,f,c
 18799  003658  0E00               	movlw	0
 18800  00365A  241E               	addwf	??___ftge,w,c
 18801  00365C  6E18               	movwf	___ftge@ff1,c
 18802  00365E  0E00               	movlw	0
 18803  003660  201F               	addwfc	??___ftge+1,w,c
 18804  003662  6E19               	movwf	___ftge@ff1+1,c
 18805  003664  0E80               	movlw	128
 18806  003666  2020               	addwfc	??___ftge+2,w,c
 18807  003668  6E1A               	movwf	___ftge@ff1+2,c
 18808  00366A                     l2039:
 18809  00366A  AE1D               	btfss	___ftge@ff2+2,7,c
 18810  00366C  D016               	goto	l2040
 18811  00366E  C01B  F01E         	movff	___ftge@ff2,??___ftge
 18812  003672  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 18813  003676  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 18814  00367A  1E1E               	comf	??___ftge,f,c
 18815  00367C  1E1F               	comf	??___ftge+1,f,c
 18816  00367E  1E20               	comf	??___ftge+2,f,c
 18817  003680  2A1E               	incf	??___ftge,f,c
 18818  003682  0E00               	movlw	0
 18819  003684  221F               	addwfc	??___ftge+1,f,c
 18820  003686  2220               	addwfc	??___ftge+2,f,c
 18821  003688  0E00               	movlw	0
 18822  00368A  241E               	addwf	??___ftge,w,c
 18823  00368C  6E1B               	movwf	___ftge@ff2,c
 18824  00368E  0E00               	movlw	0
 18825  003690  201F               	addwfc	??___ftge+1,w,c
 18826  003692  6E1C               	movwf	___ftge@ff2+1,c
 18827  003694  0E80               	movlw	128
 18828  003696  2020               	addwfc	??___ftge+2,w,c
 18829  003698  6E1D               	movwf	___ftge@ff2+2,c
 18830  00369A                     l2040:
 18831  00369A  0E00               	movlw	0
 18832  00369C  1A18               	xorwf	___ftge@ff1,f,c
 18833  00369E  0E00               	movlw	0
 18834  0036A0  1A19               	xorwf	___ftge@ff1+1,f,c
 18835  0036A2  0E80               	movlw	128
 18836  0036A4  1A1A               	xorwf	___ftge@ff1+2,f,c
 18837  0036A6  0E00               	movlw	0
 18838  0036A8  1A1B               	xorwf	___ftge@ff2,f,c
 18839  0036AA  0E00               	movlw	0
 18840  0036AC  1A1C               	xorwf	___ftge@ff2+1,f,c
 18841  0036AE  0E80               	movlw	128
 18842  0036B0  1A1D               	xorwf	___ftge@ff2+2,f,c
 18843  0036B2  501B               	movf	___ftge@ff2,w,c
 18844  0036B4  5C18               	subwf	___ftge@ff1,w,c
 18845  0036B6  501C               	movf	___ftge@ff2+1,w,c
 18846  0036B8  5819               	subwfb	___ftge@ff1+1,w,c
 18847  0036BA  501D               	movf	___ftge@ff2+2,w,c
 18848  0036BC  581A               	subwfb	___ftge@ff1+2,w,c
 18849  0036BE  B0D8               	btfsc	status,0,c
 18850  0036C0  D002               	goto	l7609
 18851  0036C2  90D8               	bcf	status,0,c
 18852  0036C4  0012               	return	
 18853  0036C6                     l7609:
 18854  0036C6  80D8               	bsf	status,0,c
 18855  0036C8  0012               	return	
 18856  0036CA                     __end_of___ftge:
 18857                           	opt stack 0
 18858                           tosu	equ	0xFFF
 18859                           tosh	equ	0xFFE
 18860                           tosl	equ	0xFFD
 18861                           pclath	equ	0xFFA
 18862                           tblptru	equ	0xFF8
 18863                           tblptrh	equ	0xFF7
 18864                           tblptrl	equ	0xFF6
 18865                           tablat	equ	0xFF5
 18866                           prodh	equ	0xFF4
 18867                           prodl	equ	0xFF3
 18868                           intcon	equ	0xFF2
 18869                           intcon2	equ	0xFF1
 18870                           indf0	equ	0xFEF
 18871                           postinc0	equ	0xFEE
 18872                           fsr0h	equ	0xFEA
 18873                           fsr0l	equ	0xFE9
 18874                           wreg	equ	0xFE8
 18875                           indf1	equ	0xFE7
 18876                           postdec1	equ	0xFE5
 18877                           fsr1h	equ	0xFE2
 18878                           fsr1l	equ	0xFE1
 18879                           indf2	equ	0xFDF
 18880                           postinc2	equ	0xFDE
 18881                           postdec2	equ	0xFDD
 18882                           fsr2h	equ	0xFDA
 18883                           fsr2l	equ	0xFD9
 18884                           status	equ	0xFD8
 18885                           
 18886 ;; *************** function ___altoft *****************
 18887 ;; Defined at:
 18888 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 18889 ;; Parameters:    Size  Location     Type
 18890 ;;  c               4   40[BANK0 ] long 
 18891 ;; Auto vars:     Size  Location     Type
 18892 ;;  sign            1   47[COMRAM] unsigned char 
 18893 ;;  exp             1   46[COMRAM] unsigned char 
 18894 ;; Return value:  Size  Location     Type
 18895 ;;                  3   40[BANK0 ] float 
 18896 ;; Registers used:
 18897 ;;		wreg, status,2, status,0, cstack
 18898 ;; Tracked objects:
 18899 ;;		On entry : 0/0
 18900 ;;		On exit  : 0/0
 18901 ;;		Unchanged: 0/0
 18902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18903 ;;      Params:         0       4       0       0       0       0       0
 18904 ;;      Locals:         2       0       0       0       0       0       0
 18905 ;;      Temps:          0       4       0       0       0       0       0
 18906 ;;      Totals:         2       8       0       0       0       0       0
 18907 ;;Total ram usage:       10 bytes
 18908 ;; Hardware stack levels used:    1
 18909 ;; Hardware stack levels required when called:    4
 18910 ;; This function calls:
 18911 ;;		___ftpack
 18912 ;; This function is called by:
 18913 ;;		_floor
 18914 ;;		_CalcSynthRegParams
 18915 ;; This function uses a non-reentrant model
 18916 ;;
 18917                           
 18918                           	psect	text82
 18919  003852                     __ptext82:
 18920                           	opt stack 0
 18921  003852                     ___altoft:
 18922                           	opt stack 21
 18923                           
 18924                           ;incstack = 0
 18925  003852  0E00               	movlw	0
 18926  003854  6E30               	movwf	___altoft@sign,c
 18927  003856  0E8E               	movlw	142
 18928  003858  6E2F               	movwf	___altoft@exp,c
 18929  00385A  0100               	movlb	0	; () banked
 18930  00385C  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
 18931  00385E  D011               	goto	l1803
 18932                           
 18933                           ; BSR set to: 0
 18934  003860  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
 18935  003862  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
 18936  003864  1F89               	comf	(___altoft@c+1)& (0+255),f,b
 18937  003866  6D88               	negf	___altoft@c& (0+255),b
 18938  003868  0E00               	movlw	0
 18939  00386A  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
 18940  00386C  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
 18941  00386E  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
 18942                           
 18943                           ; BSR set to: 0
 18944  003870  0E01               	movlw	1
 18945  003872  6E30               	movwf	___altoft@sign,c
 18946                           
 18947                           ; BSR set to: 0
 18948  003874  D006               	goto	l1803
 18949  003876                     
 18950                           ; BSR set to: 0
 18951                           
 18952                           ; BSR set to: 0
 18953  003876  90D8               	bcf	status,0,c
 18954  003878  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
 18955  00387A  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
 18956  00387C  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
 18957  00387E  3388               	rrcf	___altoft@c& (0+255),f,b
 18958  003880  2A2F               	incf	___altoft@exp,f,c
 18959  003882                     l1803:
 18960                           
 18961                           ; BSR set to: 0
 18962                           
 18963                           ; BSR set to: 0
 18964  003882  0E00               	movlw	0
 18965  003884  1588               	andwf	___altoft@c& (0+255),w,b
 18966  003886  6F8C               	movwf	??___altoft& (0+255),b
 18967  003888  0E00               	movlw	0
 18968  00388A  1589               	andwf	(___altoft@c+1)& (0+255),w,b
 18969  00388C  6F8D               	movwf	(??___altoft+1)& (0+255),b
 18970  00388E  0E00               	movlw	0
 18971  003890  158A               	andwf	(___altoft@c+2)& (0+255),w,b
 18972  003892  6F8E               	movwf	(??___altoft+2)& (0+255),b
 18973  003894  0EFF               	movlw	255
 18974  003896  158B               	andwf	(___altoft@c+3)& (0+255),w,b
 18975  003898  6F8F               	movwf	(??___altoft+3)& (0+255),b
 18976  00389A  518C               	movf	??___altoft& (0+255),w,b
 18977  00389C  118D               	iorwf	(??___altoft+1)& (0+255),w,b
 18978  00389E  118E               	iorwf	(??___altoft+2)& (0+255),w,b
 18979  0038A0  118F               	iorwf	(??___altoft+3)& (0+255),w,b
 18980  0038A2  A4D8               	btfss	status,2,c
 18981  0038A4  D7E8               	goto	l1804
 18982                           
 18983                           ; BSR set to: 0
 18984                           
 18985                           ; BSR set to: 0
 18986  0038A6  C088  F018         	movff	___altoft@c,___ftpack@arg
 18987  0038AA  C089  F019         	movff	___altoft@c+1,___ftpack@arg+1
 18988  0038AE  C08A  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 18989  0038B2  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 18990  0038B6  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 18991  0038BA  EC9C  F019         	call	___ftpack	;wreg free
 18992  0038BE  C018  F088         	movff	?___ftpack,?___altoft
 18993  0038C2  C019  F089         	movff	?___ftpack+1,?___altoft+1
 18994  0038C6  C01A  F08A         	movff	?___ftpack+2,?___altoft+2
 18995  0038CA  0012               	return	
 18996  0038CC                     __end_of___altoft:
 18997                           	opt stack 0
 18998                           tosu	equ	0xFFF
 18999                           tosh	equ	0xFFE
 19000                           tosl	equ	0xFFD
 19001                           pclath	equ	0xFFA
 19002                           tblptru	equ	0xFF8
 19003                           tblptrh	equ	0xFF7
 19004                           tblptrl	equ	0xFF6
 19005                           tablat	equ	0xFF5
 19006                           prodh	equ	0xFF4
 19007                           prodl	equ	0xFF3
 19008                           intcon	equ	0xFF2
 19009                           intcon2	equ	0xFF1
 19010                           indf0	equ	0xFEF
 19011                           postinc0	equ	0xFEE
 19012                           fsr0h	equ	0xFEA
 19013                           fsr0l	equ	0xFE9
 19014                           wreg	equ	0xFE8
 19015                           indf1	equ	0xFE7
 19016                           postdec1	equ	0xFE5
 19017                           fsr1h	equ	0xFE2
 19018                           fsr1l	equ	0xFE1
 19019                           indf2	equ	0xFDF
 19020                           postinc2	equ	0xFDE
 19021                           postdec2	equ	0xFDD
 19022                           fsr2h	equ	0xFDA
 19023                           fsr2l	equ	0xFD9
 19024                           status	equ	0xFD8
 19025                           
 19026 ;; *************** function _eval_poly *****************
 19027 ;; Defined at:
 19028 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 19029 ;; Parameters:    Size  Location     Type
 19030 ;;  x               3   40[BANK0 ] float 
 19031 ;;  d               2   43[BANK0 ] PTR const 
 19032 ;;		 -> log@coeff(27), exp@coeff(30), 
 19033 ;;  n               2   45[BANK0 ] int 
 19034 ;; Auto vars:     Size  Location     Type
 19035 ;;  res             3   47[BANK0 ] int 
 19036 ;; Return value:  Size  Location     Type
 19037 ;;                  3   40[BANK0 ] int 
 19038 ;; Registers used:
 19039 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19040 ;; Tracked objects:
 19041 ;;		On entry : 0/0
 19042 ;;		On exit  : 0/0
 19043 ;;		Unchanged: 0/0
 19044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19045 ;;      Params:         0       7       0       0       0       0       0
 19046 ;;      Locals:         0       3       0       0       0       0       0
 19047 ;;      Temps:          2       0       0       0       0       0       0
 19048 ;;      Totals:         2      10       0       0       0       0       0
 19049 ;;Total ram usage:       12 bytes
 19050 ;; Hardware stack levels used:    1
 19051 ;; Hardware stack levels required when called:    5
 19052 ;; This function calls:
 19053 ;;		___ftadd
 19054 ;;		___ftmul
 19055 ;;		___wmul
 19056 ;; This function is called by:
 19057 ;;		_exp
 19058 ;;		_log
 19059 ;; This function uses a non-reentrant model
 19060 ;;
 19061                           
 19062                           	psect	text83
 19063  002F64                     __ptext83:
 19064                           	opt stack 0
 19065  002F64                     _eval_poly:
 19066                           	opt stack 21
 19067                           
 19068                           ;incstack = 0
 19069  002F64  C08D  F026         	movff	eval_poly@n,___wmul@multiplier
 19070  002F68  C08E  F027         	movff	eval_poly@n+1,___wmul@multiplier+1
 19071  002F6C  0E00               	movlw	0
 19072  002F6E  6E29               	movwf	___wmul@multiplicand+1,c
 19073  002F70  0E03               	movlw	3
 19074  002F72  6E28               	movwf	___wmul@multiplicand,c
 19075  002F74  EC4E  F022         	call	___wmul	;wreg free
 19076  002F78  C08B  F02F         	movff	eval_poly@d,??_eval_poly
 19077  002F7C  C08C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 19078  002F80  5026               	movf	?___wmul,w,c
 19079  002F82  262F               	addwf	??_eval_poly,f,c
 19080  002F84  5027               	movf	?___wmul+1,w,c
 19081  002F86  2230               	addwfc	??_eval_poly+1,f,c
 19082  002F88  C02F  FFF6         	movff	??_eval_poly,tblptrl
 19083  002F8C  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 19084  002F90                     	if	0	;tblptru may be non-zero
 19085  002F90                     	endif
 19086  002F90                     	if	0	;tblptru may be non-zero
 19087  002F90                     	endif
 19088  002F90  0009               	tblrd		*+
 19089  002F92  CFF5 F08F          	movff	tablat,eval_poly@res
 19090  002F96  0009               	tblrd		*+
 19091  002F98  CFF5 F090          	movff	tablat,eval_poly@res+1
 19092  002F9C  000A               	tblrd		*-
 19093  002F9E  CFF5 F091          	movff	tablat,eval_poly@res+2
 19094  002FA2  D03F               	goto	l2466
 19095  002FA4  C08F  F069         	movff	eval_poly@res,___ftmul@f2
 19096  002FA8  C090  F06A         	movff	eval_poly@res+1,___ftmul@f2+1
 19097  002FAC  C091  F06B         	movff	eval_poly@res+2,___ftmul@f2+2
 19098  002FB0  C088  F066         	movff	eval_poly@x,___ftmul@f1
 19099  002FB4  C089  F067         	movff	eval_poly@x+1,___ftmul@f1+1
 19100  002FB8  C08A  F068         	movff	eval_poly@x+2,___ftmul@f1+2
 19101  002FBC  EC6D  F015         	call	___ftmul	;wreg free
 19102  002FC0  C066  F07C         	movff	?___ftmul,___ftadd@f1
 19103  002FC4  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 19104  002FC8  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 19105  002FCC  0E00               	movlw	0
 19106  002FCE  6E29               	movwf	___wmul@multiplicand+1,c
 19107  002FD0  0E03               	movlw	3
 19108  002FD2  6E28               	movwf	___wmul@multiplicand,c
 19109  002FD4  0100               	movlb	0	; () banked
 19110  002FD6  078D               	decf	eval_poly@n& (0+255),f,b
 19111  002FD8  A0D8               	btfss	status,0,c
 19112  002FDA  078E               	decf	(eval_poly@n+1)& (0+255),f,b
 19113  002FDC  C08D  F026         	movff	eval_poly@n,___wmul@multiplier
 19114  002FE0  C08E  F027         	movff	eval_poly@n+1,___wmul@multiplier+1
 19115  002FE4  EC4E  F022         	call	___wmul	;wreg free
 19116  002FE8  C08B  F02F         	movff	eval_poly@d,??_eval_poly
 19117  002FEC  C08C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 19118  002FF0  5026               	movf	?___wmul,w,c
 19119  002FF2  262F               	addwf	??_eval_poly,f,c
 19120  002FF4  5027               	movf	?___wmul+1,w,c
 19121  002FF6  2230               	addwfc	??_eval_poly+1,f,c
 19122  002FF8  C02F  FFF6         	movff	??_eval_poly,tblptrl
 19123  002FFC  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 19124  003000                     	if	0	;tblptru may be non-zero
 19125  003000                     	endif
 19126  003000                     	if	0	;tblptru may be non-zero
 19127  003000                     	endif
 19128  003000  0009               	tblrd		*+
 19129  003002  CFF5 F07F          	movff	tablat,___ftadd@f2
 19130  003006  0009               	tblrd		*+
 19131  003008  CFF5 F080          	movff	tablat,___ftadd@f2+1
 19132  00300C  000A               	tblrd		*-
 19133  00300E  CFF5 F081          	movff	tablat,___ftadd@f2+2
 19134  003012  EC75  F00C         	call	___ftadd	;wreg free
 19135  003016  C07C  F08F         	movff	?___ftadd,eval_poly@res
 19136  00301A  C07D  F090         	movff	?___ftadd+1,eval_poly@res+1
 19137  00301E  C07E  F091         	movff	?___ftadd+2,eval_poly@res+2
 19138  003022                     l2466:
 19139  003022  0100               	movlb	0	; () banked
 19140  003024  518D               	movf	eval_poly@n& (0+255),w,b
 19141  003026  118E               	iorwf	(eval_poly@n+1)& (0+255),w,b
 19142  003028  A4D8               	btfss	status,2,c
 19143  00302A  D7BC               	goto	l2467
 19144                           
 19145                           ; BSR set to: 0
 19146  00302C  C08F  F088         	movff	eval_poly@res,?_eval_poly
 19147  003030  C090  F089         	movff	eval_poly@res+1,?_eval_poly+1
 19148  003034  C091  F08A         	movff	eval_poly@res+2,?_eval_poly+2
 19149                           
 19150                           ; BSR set to: 0
 19151  003038  0012               	return		;funcret
 19152  00303A                     __end_of_eval_poly:
 19153                           	opt stack 0
 19154                           tosu	equ	0xFFF
 19155                           tosh	equ	0xFFE
 19156                           tosl	equ	0xFFD
 19157                           pclath	equ	0xFFA
 19158                           tblptru	equ	0xFF8
 19159                           tblptrh	equ	0xFF7
 19160                           tblptrl	equ	0xFF6
 19161                           tablat	equ	0xFF5
 19162                           prodh	equ	0xFF4
 19163                           prodl	equ	0xFF3
 19164                           intcon	equ	0xFF2
 19165                           intcon2	equ	0xFF1
 19166                           indf0	equ	0xFEF
 19167                           postinc0	equ	0xFEE
 19168                           fsr0h	equ	0xFEA
 19169                           fsr0l	equ	0xFE9
 19170                           wreg	equ	0xFE8
 19171                           indf1	equ	0xFE7
 19172                           postdec1	equ	0xFE5
 19173                           fsr1h	equ	0xFE2
 19174                           fsr1l	equ	0xFE1
 19175                           indf2	equ	0xFDF
 19176                           postinc2	equ	0xFDE
 19177                           postdec2	equ	0xFDD
 19178                           fsr2h	equ	0xFDA
 19179                           fsr2l	equ	0xFD9
 19180                           status	equ	0xFD8
 19181                           
 19182 ;; *************** function ___wmul *****************
 19183 ;; Defined at:
 19184 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 19185 ;; Parameters:    Size  Location     Type
 19186 ;;  multiplier      2   37[COMRAM] unsigned int 
 19187 ;;  multiplicand    2   39[COMRAM] unsigned int 
 19188 ;; Auto vars:     Size  Location     Type
 19189 ;;  product         2   41[COMRAM] unsigned int 
 19190 ;; Return value:  Size  Location     Type
 19191 ;;                  2   37[COMRAM] unsigned int 
 19192 ;; Registers used:
 19193 ;;		wreg, status,2, status,0, prodl, prodh
 19194 ;; Tracked objects:
 19195 ;;		On entry : 0/0
 19196 ;;		On exit  : 0/0
 19197 ;;		Unchanged: 0/0
 19198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19199 ;;      Params:         4       0       0       0       0       0       0
 19200 ;;      Locals:         2       0       0       0       0       0       0
 19201 ;;      Temps:          0       0       0       0       0       0       0
 19202 ;;      Totals:         6       0       0       0       0       0       0
 19203 ;;Total ram usage:        6 bytes
 19204 ;; Hardware stack levels used:    1
 19205 ;; Hardware stack levels required when called:    3
 19206 ;; This function calls:
 19207 ;;		Nothing
 19208 ;; This function is called by:
 19209 ;;		_fround
 19210 ;;		_scale
 19211 ;;		_sprintf
 19212 ;;		_eval_poly
 19213 ;; This function uses a non-reentrant model
 19214 ;;
 19215                           
 19216                           	psect	text84
 19217  00449C                     __ptext84:
 19218                           	opt stack 0
 19219  00449C                     ___wmul:
 19220                           	opt stack 24
 19221                           
 19222                           ; BSR set to: 0
 19223                           ;incstack = 0
 19224  00449C  5026               	movf	___wmul@multiplier,w,c
 19225  00449E  0228               	mulwf	___wmul@multiplicand,c
 19226  0044A0  CFF3 F02A          	movff	prodl,___wmul@product
 19227  0044A4  CFF4 F02B          	movff	prodh,___wmul@product+1
 19228  0044A8  5026               	movf	___wmul@multiplier,w,c
 19229  0044AA  0229               	mulwf	___wmul@multiplicand+1,c
 19230  0044AC  50F3               	movf	prodl,w,c
 19231  0044AE  262B               	addwf	___wmul@product+1,f,c
 19232  0044B0  5027               	movf	___wmul@multiplier+1,w,c
 19233  0044B2  0228               	mulwf	___wmul@multiplicand,c
 19234  0044B4  50F3               	movf	prodl,w,c
 19235  0044B6  262B               	addwf	___wmul@product+1,f,c
 19236  0044B8  C02A  F026         	movff	___wmul@product,?___wmul
 19237  0044BC  C02B  F027         	movff	___wmul@product+1,?___wmul+1
 19238  0044C0  0012               	return	
 19239  0044C2                     __end_of___wmul:
 19240                           	opt stack 0
 19241                           tosu	equ	0xFFF
 19242                           tosh	equ	0xFFE
 19243                           tosl	equ	0xFFD
 19244                           pclath	equ	0xFFA
 19245                           tblptru	equ	0xFF8
 19246                           tblptrh	equ	0xFF7
 19247                           tblptrl	equ	0xFF6
 19248                           tablat	equ	0xFF5
 19249                           prodh	equ	0xFF4
 19250                           prodl	equ	0xFF3
 19251                           intcon	equ	0xFF2
 19252                           intcon2	equ	0xFF1
 19253                           indf0	equ	0xFEF
 19254                           postinc0	equ	0xFEE
 19255                           fsr0h	equ	0xFEA
 19256                           fsr0l	equ	0xFE9
 19257                           wreg	equ	0xFE8
 19258                           indf1	equ	0xFE7
 19259                           postdec1	equ	0xFE5
 19260                           fsr1h	equ	0xFE2
 19261                           fsr1l	equ	0xFE1
 19262                           indf2	equ	0xFDF
 19263                           postinc2	equ	0xFDE
 19264                           postdec2	equ	0xFDD
 19265                           fsr2h	equ	0xFDA
 19266                           fsr2l	equ	0xFD9
 19267                           status	equ	0xFD8
 19268                           
 19269 ;; *************** function ___ftmul *****************
 19270 ;; Defined at:
 19271 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 19272 ;; Parameters:    Size  Location     Type
 19273 ;;  f1              3    6[BANK0 ] float 
 19274 ;;  f2              3    9[BANK0 ] float 
 19275 ;; Auto vars:     Size  Location     Type
 19276 ;;  f3_as_produc    3   13[BANK0 ] unsigned um
 19277 ;;  sign            1   17[BANK0 ] unsigned char 
 19278 ;;  cntr            1   16[BANK0 ] unsigned char 
 19279 ;;  exp             1   12[BANK0 ] unsigned char 
 19280 ;; Return value:  Size  Location     Type
 19281 ;;                  3    6[BANK0 ] float 
 19282 ;; Registers used:
 19283 ;;		wreg, status,2, status,0, cstack
 19284 ;; Tracked objects:
 19285 ;;		On entry : 0/0
 19286 ;;		On exit  : 0/0
 19287 ;;		Unchanged: 0/0
 19288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19289 ;;      Params:         0       6       0       0       0       0       0
 19290 ;;      Locals:         0       6       0       0       0       0       0
 19291 ;;      Temps:          3       0       0       0       0       0       0
 19292 ;;      Totals:         3      12       0       0       0       0       0
 19293 ;;Total ram usage:       15 bytes
 19294 ;; Hardware stack levels used:    1
 19295 ;; Hardware stack levels required when called:    4
 19296 ;; This function calls:
 19297 ;;		___ftpack
 19298 ;; This function is called by:
 19299 ;;		_SampleSingleChannel
 19300 ;;		_SampleAllChannels
 19301 ;;		_fround
 19302 ;;		_scale
 19303 ;;		_sprintf
 19304 ;;		_pow
 19305 ;;		_exp
 19306 ;;		_log
 19307 ;;		_eval_poly
 19308 ;;		_DacAnalogToDigitalSpi
 19309 ;;		_CalcSynthRegParams
 19310 ;; This function uses a non-reentrant model
 19311 ;;
 19312                           
 19313                           	psect	text85
 19314  002ADA                     __ptext85:
 19315                           	opt stack 0
 19316  002ADA                     ___ftmul:
 19317                           	opt stack 23
 19318                           
 19319                           ;incstack = 0
 19320  002ADA  C068  F02C         	movff	___ftmul@f1+2,??___ftmul
 19321  002ADE  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 19322  002AE0  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 19323  002AE2  0100               	movlb	0	; () banked
 19324  002AE4  3567               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 19325  002AE6  362C               	rlcf	??___ftmul& (0+255),f,c
 19326  002AE8  E301               	bnc	u7171
 19327  002AEA  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 19328  002AEC                     u7171:
 19329  002AEC  502C               	movf	??___ftmul,w,c
 19330  002AEE  6F6C               	movwf	___ftmul@exp& (0+255),b
 19331  002AF0  516C               	movf	___ftmul@exp& (0+255),w,b
 19332  002AF2  A4D8               	btfss	status,2,c
 19333  002AF4  D007               	goto	l2046
 19334                           
 19335                           ; BSR set to: 0
 19336  002AF6  0E00               	movlw	0
 19337  002AF8  6F66               	movwf	?___ftmul& (0+255),b
 19338  002AFA  0E00               	movlw	0
 19339  002AFC  6F67               	movwf	(?___ftmul+1)& (0+255),b
 19340  002AFE  0E00               	movlw	0
 19341  002B00  6F68               	movwf	(?___ftmul+2)& (0+255),b
 19342                           
 19343                           ; BSR set to: 0
 19344  002B02  0012               	return	
 19345  002B04                     l2046:
 19346                           
 19347                           ; BSR set to: 0
 19348                           
 19349                           ; BSR set to: 0
 19350  002B04  C06B  F02C         	movff	___ftmul@f2+2,??___ftmul
 19351  002B08  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 19352  002B0A  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 19353  002B0C  356A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 19354  002B0E  362C               	rlcf	??___ftmul& (0+255),f,c
 19355  002B10  E301               	bnc	u7191
 19356  002B12  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 19357  002B14                     u7191:
 19358  002B14  502C               	movf	??___ftmul,w,c
 19359  002B16  6F71               	movwf	___ftmul@sign& (0+255),b
 19360  002B18  5171               	movf	___ftmul@sign& (0+255),w,b
 19361  002B1A  A4D8               	btfss	status,2,c
 19362  002B1C  D007               	goto	l2048
 19363                           
 19364                           ; BSR set to: 0
 19365  002B1E  0E00               	movlw	0
 19366  002B20  6F66               	movwf	?___ftmul& (0+255),b
 19367  002B22  0E00               	movlw	0
 19368  002B24  6F67               	movwf	(?___ftmul+1)& (0+255),b
 19369  002B26  0E00               	movlw	0
 19370  002B28  6F68               	movwf	(?___ftmul+2)& (0+255),b
 19371                           
 19372                           ; BSR set to: 0
 19373  002B2A  0012               	return	
 19374  002B2C                     l2048:
 19375                           
 19376                           ; BSR set to: 0
 19377                           
 19378                           ; BSR set to: 0
 19379  002B2C  5171               	movf	___ftmul@sign& (0+255),w,b
 19380  002B2E  0F7B               	addlw	123
 19381  002B30  276C               	addwf	___ftmul@exp& (0+255),f,b
 19382                           
 19383                           ; BSR set to: 0
 19384  002B32  C068  F071         	movff	___ftmul@f1+2,___ftmul@sign
 19385  002B36  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 19386  002B38  1B71               	xorwf	___ftmul@sign& (0+255),f,b
 19387  002B3A  0E80               	movlw	128
 19388  002B3C  1771               	andwf	___ftmul@sign& (0+255),f,b
 19389                           
 19390                           ; BSR set to: 0
 19391  002B3E  8F67               	bsf	(___ftmul@f1+1)& (0+255),7,b
 19392                           
 19393                           ; BSR set to: 0
 19394  002B40  8F6A               	bsf	(___ftmul@f2+1)& (0+255),7,b
 19395                           
 19396                           ; BSR set to: 0
 19397  002B42  0EFF               	movlw	255
 19398  002B44  1769               	andwf	___ftmul@f2& (0+255),f,b
 19399  002B46  0EFF               	movlw	255
 19400  002B48  176A               	andwf	(___ftmul@f2+1)& (0+255),f,b
 19401  002B4A  0E00               	movlw	0
 19402  002B4C  176B               	andwf	(___ftmul@f2+2)& (0+255),f,b
 19403                           
 19404                           ; BSR set to: 0
 19405  002B4E  0E00               	movlw	0
 19406  002B50  6F6D               	movwf	___ftmul@f3_as_product& (0+255),b
 19407  002B52  0E00               	movlw	0
 19408  002B54  6F6E               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 19409  002B56  0E00               	movlw	0
 19410  002B58  6F6F               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 19411                           
 19412                           ; BSR set to: 0
 19413  002B5A  0E07               	movlw	7
 19414  002B5C  6F70               	movwf	___ftmul@cntr& (0+255),b
 19415  002B5E                     
 19416                           ; BSR set to: 0
 19417                           
 19418                           ; BSR set to: 0
 19419  002B5E  A166               	btfss	___ftmul@f1& (0+255),0,b
 19420  002B60  D006               	goto	l2050
 19421                           
 19422                           ; BSR set to: 0
 19423  002B62  5169               	movf	___ftmul@f2& (0+255),w,b
 19424  002B64  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 19425  002B66  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 19426  002B68  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 19427  002B6A  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 19428  002B6C  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 19429  002B6E                     l2050:
 19430                           
 19431                           ; BSR set to: 0
 19432                           
 19433                           ; BSR set to: 0
 19434  002B6E  90D8               	bcf	status,0,c
 19435  002B70  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 19436  002B72  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 19437  002B74  3366               	rrcf	___ftmul@f1& (0+255),f,b
 19438  002B76  90D8               	bcf	status,0,c
 19439  002B78  3769               	rlcf	___ftmul@f2& (0+255),f,b
 19440  002B7A  376A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 19441  002B7C  376B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 19442                           
 19443                           ; BSR set to: 0
 19444  002B7E  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 19445  002B80  D7EE               	goto	l2049
 19446                           
 19447                           ; BSR set to: 0
 19448                           
 19449                           ; BSR set to: 0
 19450  002B82  0E09               	movlw	9
 19451  002B84  6F70               	movwf	___ftmul@cntr& (0+255),b
 19452  002B86                     
 19453                           ; BSR set to: 0
 19454                           
 19455                           ; BSR set to: 0
 19456  002B86  A166               	btfss	___ftmul@f1& (0+255),0,b
 19457  002B88  D006               	goto	l2053
 19458                           
 19459                           ; BSR set to: 0
 19460  002B8A  5169               	movf	___ftmul@f2& (0+255),w,b
 19461  002B8C  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 19462  002B8E  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 19463  002B90  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 19464  002B92  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 19465  002B94  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 19466  002B96                     l2053:
 19467                           
 19468                           ; BSR set to: 0
 19469                           
 19470                           ; BSR set to: 0
 19471  002B96  90D8               	bcf	status,0,c
 19472  002B98  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 19473  002B9A  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 19474  002B9C  3366               	rrcf	___ftmul@f1& (0+255),f,b
 19475  002B9E  90D8               	bcf	status,0,c
 19476  002BA0  336F               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 19477  002BA2  336E               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 19478  002BA4  336D               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 19479                           
 19480                           ; BSR set to: 0
 19481  002BA6  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 19482  002BA8  D7EE               	goto	l2052
 19483                           
 19484                           ; BSR set to: 0
 19485                           
 19486                           ; BSR set to: 0
 19487  002BAA  C06D  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 19488  002BAE  C06E  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 19489  002BB2  C06F  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 19490  002BB6  C06C  F01B         	movff	___ftmul@exp,___ftpack@exp
 19491  002BBA  C071  F01C         	movff	___ftmul@sign,___ftpack@sign
 19492  002BBE  EC9C  F019         	call	___ftpack	;wreg free
 19493  002BC2  C018  F066         	movff	?___ftpack,?___ftmul
 19494  002BC6  C019  F067         	movff	?___ftpack+1,?___ftmul+1
 19495  002BCA  C01A  F068         	movff	?___ftpack+2,?___ftmul+2
 19496  002BCE  0012               	return	
 19497  002BD0                     __end_of___ftmul:
 19498                           	opt stack 0
 19499                           tosu	equ	0xFFF
 19500                           tosh	equ	0xFFE
 19501                           tosl	equ	0xFFD
 19502                           pclath	equ	0xFFA
 19503                           tblptru	equ	0xFF8
 19504                           tblptrh	equ	0xFF7
 19505                           tblptrl	equ	0xFF6
 19506                           tablat	equ	0xFF5
 19507                           prodh	equ	0xFF4
 19508                           prodl	equ	0xFF3
 19509                           intcon	equ	0xFF2
 19510                           intcon2	equ	0xFF1
 19511                           indf0	equ	0xFEF
 19512                           postinc0	equ	0xFEE
 19513                           fsr0h	equ	0xFEA
 19514                           fsr0l	equ	0xFE9
 19515                           wreg	equ	0xFE8
 19516                           indf1	equ	0xFE7
 19517                           postdec1	equ	0xFE5
 19518                           fsr1h	equ	0xFE2
 19519                           fsr1l	equ	0xFE1
 19520                           indf2	equ	0xFDF
 19521                           postinc2	equ	0xFDE
 19522                           postdec2	equ	0xFDD
 19523                           fsr2h	equ	0xFDA
 19524                           fsr2l	equ	0xFD9
 19525                           status	equ	0xFD8
 19526                           
 19527 ;; *************** function ___ftsub *****************
 19528 ;; Defined at:
 19529 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 19530 ;; Parameters:    Size  Location     Type
 19531 ;;  f1              3   40[BANK0 ] float 
 19532 ;;  f2              3   43[BANK0 ] float 
 19533 ;; Auto vars:     Size  Location     Type
 19534 ;;		None
 19535 ;; Return value:  Size  Location     Type
 19536 ;;                  3   40[BANK0 ] float 
 19537 ;; Registers used:
 19538 ;;		wreg, status,2, status,0, cstack
 19539 ;; Tracked objects:
 19540 ;;		On entry : 0/0
 19541 ;;		On exit  : 0/0
 19542 ;;		Unchanged: 0/0
 19543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19544 ;;      Params:         0       6       0       0       0       0       0
 19545 ;;      Locals:         0       0       0       0       0       0       0
 19546 ;;      Temps:          0       0       0       0       0       0       0
 19547 ;;      Totals:         0       6       0       0       0       0       0
 19548 ;;Total ram usage:        6 bytes
 19549 ;; Hardware stack levels used:    1
 19550 ;; Hardware stack levels required when called:    5
 19551 ;; This function calls:
 19552 ;;		___ftadd
 19553 ;; This function is called by:
 19554 ;;		_sprintf
 19555 ;;		_exp
 19556 ;; This function uses a non-reentrant model
 19557 ;;
 19558                           
 19559                           	psect	text86
 19560  00417C                     __ptext86:
 19561                           	opt stack 0
 19562  00417C                     ___ftsub:
 19563                           	opt stack 23
 19564                           
 19565                           ;incstack = 0
 19566  00417C  0100               	movlb	0	; () banked
 19567  00417E  518B               	movf	___ftsub@f2& (0+255),w,b
 19568  004180  118C               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 19569  004182  118D               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 19570  004184  B4D8               	btfsc	status,2,c
 19571  004186  D006               	goto	l2063
 19572                           
 19573                           ; BSR set to: 0
 19574  004188  0E00               	movlw	0
 19575  00418A  1B8B               	xorwf	___ftsub@f2& (0+255),f,b
 19576  00418C  0E00               	movlw	0
 19577  00418E  1B8C               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 19578  004190  0E80               	movlw	128
 19579  004192  1B8D               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 19580  004194                     l2063:
 19581                           
 19582                           ; BSR set to: 0
 19583                           
 19584                           ; BSR set to: 0
 19585  004194  C088  F07C         	movff	___ftsub@f1,___ftadd@f1
 19586  004198  C089  F07D         	movff	___ftsub@f1+1,___ftadd@f1+1
 19587  00419C  C08A  F07E         	movff	___ftsub@f1+2,___ftadd@f1+2
 19588  0041A0  C08B  F07F         	movff	___ftsub@f2,___ftadd@f2
 19589  0041A4  C08C  F080         	movff	___ftsub@f2+1,___ftadd@f2+1
 19590  0041A8  C08D  F081         	movff	___ftsub@f2+2,___ftadd@f2+2
 19591  0041AC  EC75  F00C         	call	___ftadd	;wreg free
 19592  0041B0  C07C  F088         	movff	?___ftadd,?___ftsub
 19593  0041B4  C07D  F089         	movff	?___ftadd+1,?___ftsub+1
 19594  0041B8  C07E  F08A         	movff	?___ftadd+2,?___ftsub+2
 19595  0041BC  0012               	return	
 19596  0041BE                     __end_of___ftsub:
 19597                           	opt stack 0
 19598                           tosu	equ	0xFFF
 19599                           tosh	equ	0xFFE
 19600                           tosl	equ	0xFFD
 19601                           pclath	equ	0xFFA
 19602                           tblptru	equ	0xFF8
 19603                           tblptrh	equ	0xFF7
 19604                           tblptrl	equ	0xFF6
 19605                           tablat	equ	0xFF5
 19606                           prodh	equ	0xFF4
 19607                           prodl	equ	0xFF3
 19608                           intcon	equ	0xFF2
 19609                           intcon2	equ	0xFF1
 19610                           indf0	equ	0xFEF
 19611                           postinc0	equ	0xFEE
 19612                           fsr0h	equ	0xFEA
 19613                           fsr0l	equ	0xFE9
 19614                           wreg	equ	0xFE8
 19615                           indf1	equ	0xFE7
 19616                           postdec1	equ	0xFE5
 19617                           fsr1h	equ	0xFE2
 19618                           fsr1l	equ	0xFE1
 19619                           indf2	equ	0xFDF
 19620                           postinc2	equ	0xFDE
 19621                           postdec2	equ	0xFDD
 19622                           fsr2h	equ	0xFDA
 19623                           fsr2l	equ	0xFD9
 19624                           status	equ	0xFD8
 19625                           
 19626 ;; *************** function ___ftadd *****************
 19627 ;; Defined at:
 19628 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 19629 ;; Parameters:    Size  Location     Type
 19630 ;;  f1              3   28[BANK0 ] float 
 19631 ;;  f2              3   31[BANK0 ] float 
 19632 ;; Auto vars:     Size  Location     Type
 19633 ;;  exp1            1   39[BANK0 ] unsigned char 
 19634 ;;  exp2            1   38[BANK0 ] unsigned char 
 19635 ;;  sign            1   37[BANK0 ] unsigned char 
 19636 ;; Return value:  Size  Location     Type
 19637 ;;                  3   28[BANK0 ] float 
 19638 ;; Registers used:
 19639 ;;		wreg, status,2, status,0, cstack
 19640 ;; Tracked objects:
 19641 ;;		On entry : 0/0
 19642 ;;		On exit  : 0/0
 19643 ;;		Unchanged: 0/0
 19644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19645 ;;      Params:         0       6       0       0       0       0       0
 19646 ;;      Locals:         0       3       0       0       0       0       0
 19647 ;;      Temps:          0       3       0       0       0       0       0
 19648 ;;      Totals:         0      12       0       0       0       0       0
 19649 ;;Total ram usage:       12 bytes
 19650 ;; Hardware stack levels used:    1
 19651 ;; Hardware stack levels required when called:    4
 19652 ;; This function calls:
 19653 ;;		___ftpack
 19654 ;; This function is called by:
 19655 ;;		_sprintf
 19656 ;;		___ftsub
 19657 ;;		_floor
 19658 ;;		_log
 19659 ;;		_eval_poly
 19660 ;;		_DacAnalogToDigitalSpi
 19661 ;; This function uses a non-reentrant model
 19662 ;;
 19663                           
 19664                           	psect	text87
 19665  0018EA                     __ptext87:
 19666                           	opt stack 0
 19667  0018EA                     ___ftadd:
 19668                           	opt stack 23
 19669                           
 19670                           ;incstack = 0
 19671  0018EA  C07E  F082         	movff	___ftadd@f1+2,??___ftadd
 19672  0018EE  0100               	movlb	0	; () banked
 19673  0018F0  6B83               	clrf	(??___ftadd+1)& (0+255),b
 19674  0018F2  6B84               	clrf	(??___ftadd+2)& (0+255),b
 19675  0018F4  357D               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 19676  0018F6  3782               	rlcf	??___ftadd& (0+255),f,b
 19677  0018F8  E301               	bnc	u6961
 19678  0018FA  8183               	bsf	(??___ftadd+1)& (0+255),0,b
 19679  0018FC                     u6961:
 19680  0018FC  5182               	movf	??___ftadd& (0+255),w,b
 19681  0018FE  6F87               	movwf	___ftadd@exp1& (0+255),b
 19682  001900  C081  F082         	movff	___ftadd@f2+2,??___ftadd
 19683  001904  6B83               	clrf	(??___ftadd+1)& (0+255),b
 19684  001906  6B84               	clrf	(??___ftadd+2)& (0+255),b
 19685  001908  3580               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 19686  00190A  3782               	rlcf	??___ftadd& (0+255),f,b
 19687  00190C  E301               	bnc	u6971
 19688  00190E  8183               	bsf	(??___ftadd+1)& (0+255),0,b
 19689  001910                     u6971:
 19690  001910  5182               	movf	??___ftadd& (0+255),w,b
 19691  001912  6F86               	movwf	___ftadd@exp2& (0+255),b
 19692                           
 19693                           ; BSR set to: 0
 19694  001914  5187               	movf	___ftadd@exp1& (0+255),w,b
 19695  001916  B4D8               	btfsc	status,2,c
 19696  001918  D00B               	goto	u7000
 19697                           
 19698                           ; BSR set to: 0
 19699  00191A  5186               	movf	___ftadd@exp2& (0+255),w,b
 19700  00191C  5D87               	subwf	___ftadd@exp1& (0+255),w,b
 19701  00191E  B0D8               	btfsc	status,0,c
 19702  001920  D00E               	goto	l1981
 19703                           
 19704                           ; BSR set to: 0
 19705  001922  5187               	movf	___ftadd@exp1& (0+255),w,b
 19706  001924  0800               	sublw	0
 19707  001926  2586               	addwf	___ftadd@exp2& (0+255),w,b
 19708  001928  6F82               	movwf	??___ftadd& (0+255),b
 19709  00192A  0E18               	movlw	24
 19710  00192C  6582               	cpfsgt	??___ftadd& (0+255),b
 19711  00192E  D007               	goto	l1981
 19712  001930                     u7000:
 19713                           
 19714                           ; BSR set to: 0
 19715  001930  C07F  F07C         	movff	___ftadd@f2,?___ftadd
 19716  001934  C080  F07D         	movff	___ftadd@f2+1,?___ftadd+1
 19717  001938  C081  F07E         	movff	___ftadd@f2+2,?___ftadd+2
 19718  00193C  0012               	return	
 19719  00193E                     l1981:
 19720                           
 19721                           ; BSR set to: 0
 19722                           
 19723                           ; BSR set to: 0
 19724  00193E  5186               	movf	___ftadd@exp2& (0+255),w,b
 19725  001940  B4D8               	btfsc	status,2,c
 19726  001942  D00B               	goto	u7030
 19727                           
 19728                           ; BSR set to: 0
 19729  001944  5187               	movf	___ftadd@exp1& (0+255),w,b
 19730  001946  5D86               	subwf	___ftadd@exp2& (0+255),w,b
 19731  001948  B0D8               	btfsc	status,0,c
 19732  00194A  D00E               	goto	l1985
 19733                           
 19734                           ; BSR set to: 0
 19735  00194C  5186               	movf	___ftadd@exp2& (0+255),w,b
 19736  00194E  0800               	sublw	0
 19737  001950  2587               	addwf	___ftadd@exp1& (0+255),w,b
 19738  001952  6F82               	movwf	??___ftadd& (0+255),b
 19739  001954  0E18               	movlw	24
 19740  001956  6582               	cpfsgt	??___ftadd& (0+255),b
 19741  001958  D007               	goto	l1985
 19742  00195A                     u7030:
 19743                           
 19744                           ; BSR set to: 0
 19745  00195A  C07C  F07C         	movff	___ftadd@f1,?___ftadd
 19746  00195E  C07D  F07D         	movff	___ftadd@f1+1,?___ftadd+1
 19747  001962  C07E  F07E         	movff	___ftadd@f1+2,?___ftadd+2
 19748  001966  0012               	return	
 19749  001968                     l1985:
 19750                           
 19751                           ; BSR set to: 0
 19752                           
 19753                           ; BSR set to: 0
 19754  001968  0E06               	movlw	6
 19755  00196A  6F85               	movwf	___ftadd@sign& (0+255),b
 19756                           
 19757                           ; BSR set to: 0
 19758  00196C  BF7E               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 19759                           
 19760                           ; BSR set to: 0
 19761  00196E  8F85               	bsf	___ftadd@sign& (0+255),7,b
 19762                           
 19763                           ; BSR set to: 0
 19764                           
 19765                           ; BSR set to: 0
 19766  001970  BF81               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 19767                           
 19768                           ; BSR set to: 0
 19769  001972  8D85               	bsf	___ftadd@sign& (0+255),6,b
 19770                           
 19771                           ; BSR set to: 0
 19772  001974  8F7D               	bsf	(___ftadd@f1+1)& (0+255),7,b
 19773                           
 19774                           ; BSR set to: 0
 19775  001976  0EFF               	movlw	255
 19776  001978  177C               	andwf	___ftadd@f1& (0+255),f,b
 19777  00197A  0EFF               	movlw	255
 19778  00197C  177D               	andwf	(___ftadd@f1+1)& (0+255),f,b
 19779  00197E  0E00               	movlw	0
 19780  001980  177E               	andwf	(___ftadd@f1+2)& (0+255),f,b
 19781  001982  8F80               	bsf	(___ftadd@f2+1)& (0+255),7,b
 19782                           
 19783                           ; BSR set to: 0
 19784  001984  0EFF               	movlw	255
 19785  001986  177F               	andwf	___ftadd@f2& (0+255),f,b
 19786  001988  0EFF               	movlw	255
 19787  00198A  1780               	andwf	(___ftadd@f2+1)& (0+255),f,b
 19788  00198C  0E00               	movlw	0
 19789  00198E  1781               	andwf	(___ftadd@f2+2)& (0+255),f,b
 19790                           
 19791                           ; BSR set to: 0
 19792  001990  5186               	movf	___ftadd@exp2& (0+255),w,b
 19793  001992  5D87               	subwf	___ftadd@exp1& (0+255),w,b
 19794  001994  B0D8               	btfsc	status,0,c
 19795  001996  D01B               	goto	l1990
 19796  001998                     u7060:
 19797                           
 19798                           ; BSR set to: 0
 19799                           
 19800                           ; BSR set to: 0
 19801  001998  90D8               	bcf	status,0,c
 19802  00199A  377F               	rlcf	___ftadd@f2& (0+255),f,b
 19803  00199C  3780               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 19804  00199E  3781               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 19805  0019A0  0786               	decf	___ftadd@exp2& (0+255),f,b
 19806                           
 19807                           ; BSR set to: 0
 19808  0019A2  5187               	movf	___ftadd@exp1& (0+255),w,b
 19809  0019A4  1986               	xorwf	___ftadd@exp2& (0+255),w,b
 19810  0019A6  B4D8               	btfsc	status,2,c
 19811  0019A8  D00D               	goto	l1995
 19812                           
 19813                           ; BSR set to: 0
 19814  0019AA  0785               	decf	___ftadd@sign& (0+255),f,b
 19815  0019AC  C085  F082         	movff	___ftadd@sign,??___ftadd
 19816  0019B0  0E07               	movlw	7
 19817  0019B2  1782               	andwf	??___ftadd& (0+255),f,b
 19818  0019B4  B4D8               	btfsc	status,2,c
 19819  0019B6  D006               	goto	l1995
 19820  0019B8  D7EF               	goto	u7060
 19821  0019BA                     
 19822                           ; BSR set to: 0
 19823                           
 19824                           ; BSR set to: 0
 19825  0019BA  90D8               	bcf	status,0,c
 19826  0019BC  337E               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 19827  0019BE  337D               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 19828  0019C0  337C               	rrcf	___ftadd@f1& (0+255),f,b
 19829  0019C2  2B87               	incf	___ftadd@exp1& (0+255),f,b
 19830  0019C4                     l1995:
 19831                           
 19832                           ; BSR set to: 0
 19833                           
 19834                           ; BSR set to: 0
 19835  0019C4  5186               	movf	___ftadd@exp2& (0+255),w,b
 19836  0019C6  1987               	xorwf	___ftadd@exp1& (0+255),w,b
 19837  0019C8  B4D8               	btfsc	status,2,c
 19838  0019CA  D01F               	goto	u7130
 19839  0019CC  D7F6               	goto	l1996
 19840  0019CE                     l1990:
 19841                           
 19842                           ; BSR set to: 0
 19843                           
 19844                           ; BSR set to: 0
 19845  0019CE  5187               	movf	___ftadd@exp1& (0+255),w,b
 19846  0019D0  5D86               	subwf	___ftadd@exp2& (0+255),w,b
 19847  0019D2  B0D8               	btfsc	status,0,c
 19848  0019D4  D01A               	goto	u7130
 19849  0019D6                     u7100:
 19850                           
 19851                           ; BSR set to: 0
 19852                           
 19853                           ; BSR set to: 0
 19854  0019D6  90D8               	bcf	status,0,c
 19855  0019D8  377C               	rlcf	___ftadd@f1& (0+255),f,b
 19856  0019DA  377D               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 19857  0019DC  377E               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 19858  0019DE  0787               	decf	___ftadd@exp1& (0+255),f,b
 19859                           
 19860                           ; BSR set to: 0
 19861  0019E0  5187               	movf	___ftadd@exp1& (0+255),w,b
 19862  0019E2  1986               	xorwf	___ftadd@exp2& (0+255),w,b
 19863  0019E4  B4D8               	btfsc	status,2,c
 19864  0019E6  D00D               	goto	l2004
 19865                           
 19866                           ; BSR set to: 0
 19867  0019E8  0785               	decf	___ftadd@sign& (0+255),f,b
 19868  0019EA  C085  F082         	movff	___ftadd@sign,??___ftadd
 19869  0019EE  0E07               	movlw	7
 19870  0019F0  1782               	andwf	??___ftadd& (0+255),f,b
 19871  0019F2  B4D8               	btfsc	status,2,c
 19872  0019F4  D006               	goto	l2004
 19873  0019F6  D7EF               	goto	u7100
 19874  0019F8                     
 19875                           ; BSR set to: 0
 19876                           
 19877                           ; BSR set to: 0
 19878  0019F8  90D8               	bcf	status,0,c
 19879  0019FA  3381               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 19880  0019FC  3380               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 19881  0019FE  337F               	rrcf	___ftadd@f2& (0+255),f,b
 19882  001A00  2B86               	incf	___ftadd@exp2& (0+255),f,b
 19883  001A02                     l2004:
 19884                           
 19885                           ; BSR set to: 0
 19886                           
 19887                           ; BSR set to: 0
 19888  001A02  5186               	movf	___ftadd@exp2& (0+255),w,b
 19889  001A04  1987               	xorwf	___ftadd@exp1& (0+255),w,b
 19890  001A06  A4D8               	btfss	status,2,c
 19891  001A08  D7F7               	goto	l2005
 19892  001A0A                     u7130:
 19893                           
 19894                           ; BSR set to: 0
 19895                           
 19896                           ; BSR set to: 0
 19897                           
 19898                           ; BSR set to: 0
 19899  001A0A  AF85               	btfss	___ftadd@sign& (0+255),7,b
 19900  001A0C  D00C               	goto	l2007
 19901                           
 19902                           ; BSR set to: 0
 19903  001A0E  0EFF               	movlw	255
 19904  001A10  1B7C               	xorwf	___ftadd@f1& (0+255),f,b
 19905  001A12  0EFF               	movlw	255
 19906  001A14  1B7D               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 19907  001A16  0EFF               	movlw	255
 19908  001A18  1B7E               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 19909  001A1A  0E01               	movlw	1
 19910  001A1C  277C               	addwf	___ftadd@f1& (0+255),f,b
 19911  001A1E  0E00               	movlw	0
 19912  001A20  237D               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 19913  001A22  0E00               	movlw	0
 19914  001A24  237E               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 19915  001A26                     l2007:
 19916                           
 19917                           ; BSR set to: 0
 19918  001A26  AD85               	btfss	___ftadd@sign& (0+255),6,b
 19919  001A28  D00C               	goto	l2008
 19920                           
 19921                           ; BSR set to: 0
 19922  001A2A  0EFF               	movlw	255
 19923  001A2C  1B7F               	xorwf	___ftadd@f2& (0+255),f,b
 19924  001A2E  0EFF               	movlw	255
 19925  001A30  1B80               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 19926  001A32  0EFF               	movlw	255
 19927  001A34  1B81               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 19928  001A36  0E01               	movlw	1
 19929  001A38  277F               	addwf	___ftadd@f2& (0+255),f,b
 19930  001A3A  0E00               	movlw	0
 19931  001A3C  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19932  001A3E  0E00               	movlw	0
 19933  001A40  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19934  001A42                     l2008:
 19935                           
 19936                           ; BSR set to: 0
 19937                           
 19938                           ; BSR set to: 0
 19939  001A42  0E00               	movlw	0
 19940  001A44  6F85               	movwf	___ftadd@sign& (0+255),b
 19941                           
 19942                           ; BSR set to: 0
 19943  001A46  517C               	movf	___ftadd@f1& (0+255),w,b
 19944  001A48  277F               	addwf	___ftadd@f2& (0+255),f,b
 19945  001A4A  517D               	movf	(___ftadd@f1+1)& (0+255),w,b
 19946  001A4C  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19947  001A4E  517E               	movf	(___ftadd@f1+2)& (0+255),w,b
 19948  001A50  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19949                           
 19950                           ; BSR set to: 0
 19951  001A52  AF81               	btfss	(___ftadd@f2+2)& (0+255),7,b
 19952  001A54  D00E               	goto	l2009
 19953                           
 19954                           ; BSR set to: 0
 19955  001A56  0EFF               	movlw	255
 19956  001A58  1B7F               	xorwf	___ftadd@f2& (0+255),f,b
 19957  001A5A  0EFF               	movlw	255
 19958  001A5C  1B80               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 19959  001A5E  0EFF               	movlw	255
 19960  001A60  1B81               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 19961  001A62  0E01               	movlw	1
 19962  001A64  277F               	addwf	___ftadd@f2& (0+255),f,b
 19963  001A66  0E00               	movlw	0
 19964  001A68  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19965  001A6A  0E00               	movlw	0
 19966  001A6C  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19967                           
 19968                           ; BSR set to: 0
 19969  001A6E  0E01               	movlw	1
 19970  001A70  6F85               	movwf	___ftadd@sign& (0+255),b
 19971  001A72                     l2009:
 19972                           
 19973                           ; BSR set to: 0
 19974                           
 19975                           ; BSR set to: 0
 19976  001A72  C07F  F018         	movff	___ftadd@f2,___ftpack@arg
 19977  001A76  C080  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 19978  001A7A  C081  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 19979  001A7E  C087  F01B         	movff	___ftadd@exp1,___ftpack@exp
 19980  001A82  C085  F01C         	movff	___ftadd@sign,___ftpack@sign
 19981  001A86  EC9C  F019         	call	___ftpack	;wreg free
 19982  001A8A  C018  F07C         	movff	?___ftpack,?___ftadd
 19983  001A8E  C019  F07D         	movff	?___ftpack+1,?___ftadd+1
 19984  001A92  C01A  F07E         	movff	?___ftpack+2,?___ftadd+2
 19985  001A96  0012               	return	
 19986  001A98                     __end_of___ftadd:
 19987                           	opt stack 0
 19988                           tosu	equ	0xFFF
 19989                           tosh	equ	0xFFE
 19990                           tosl	equ	0xFFD
 19991                           pclath	equ	0xFFA
 19992                           tblptru	equ	0xFF8
 19993                           tblptrh	equ	0xFF7
 19994                           tblptrl	equ	0xFF6
 19995                           tablat	equ	0xFF5
 19996                           prodh	equ	0xFF4
 19997                           prodl	equ	0xFF3
 19998                           intcon	equ	0xFF2
 19999                           intcon2	equ	0xFF1
 20000                           indf0	equ	0xFEF
 20001                           postinc0	equ	0xFEE
 20002                           fsr0h	equ	0xFEA
 20003                           fsr0l	equ	0xFE9
 20004                           wreg	equ	0xFE8
 20005                           indf1	equ	0xFE7
 20006                           postdec1	equ	0xFE5
 20007                           fsr1h	equ	0xFE2
 20008                           fsr1l	equ	0xFE1
 20009                           indf2	equ	0xFDF
 20010                           postinc2	equ	0xFDE
 20011                           postdec2	equ	0xFDD
 20012                           fsr2h	equ	0xFDA
 20013                           fsr2l	equ	0xFD9
 20014                           status	equ	0xFD8
 20015                           
 20016 ;; *************** function ___ftneg *****************
 20017 ;; Defined at:
 20018 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 20019 ;; Parameters:    Size  Location     Type
 20020 ;;  f1              3   23[COMRAM] float 
 20021 ;; Auto vars:     Size  Location     Type
 20022 ;;		None
 20023 ;; Return value:  Size  Location     Type
 20024 ;;                  3   23[COMRAM] float 
 20025 ;; Registers used:
 20026 ;;		wreg, status,2, status,0
 20027 ;; Tracked objects:
 20028 ;;		On entry : 0/0
 20029 ;;		On exit  : 0/0
 20030 ;;		Unchanged: 0/0
 20031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20032 ;;      Params:         3       0       0       0       0       0       0
 20033 ;;      Locals:         0       0       0       0       0       0       0
 20034 ;;      Temps:          0       0       0       0       0       0       0
 20035 ;;      Totals:         3       0       0       0       0       0       0
 20036 ;;Total ram usage:        3 bytes
 20037 ;; Hardware stack levels used:    1
 20038 ;; Hardware stack levels required when called:    3
 20039 ;; This function calls:
 20040 ;;		Nothing
 20041 ;; This function is called by:
 20042 ;;		_sprintf
 20043 ;;		_pow
 20044 ;;		_exp
 20045 ;; This function uses a non-reentrant model
 20046 ;;
 20047                           
 20048                           	psect	text88
 20049  0044E6                     __ptext88:
 20050                           	opt stack 0
 20051  0044E6                     ___ftneg:
 20052                           	opt stack 25
 20053                           
 20054                           ;incstack = 0
 20055  0044E6  5018               	movf	___ftneg@f1,w,c
 20056  0044E8  1019               	iorwf	___ftneg@f1+1,w,c
 20057  0044EA  101A               	iorwf	___ftneg@f1+2,w,c
 20058  0044EC  B4D8               	btfsc	status,2,c
 20059  0044EE  D006               	goto	l2057
 20060  0044F0  0E00               	movlw	0
 20061  0044F2  1A18               	xorwf	___ftneg@f1,f,c
 20062  0044F4  0E00               	movlw	0
 20063  0044F6  1A19               	xorwf	___ftneg@f1+1,f,c
 20064  0044F8  0E80               	movlw	128
 20065  0044FA  1A1A               	xorwf	___ftneg@f1+2,f,c
 20066  0044FC                     l2057:
 20067  0044FC  C018  F018         	movff	___ftneg@f1,?___ftneg
 20068  004500  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 20069  004504  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 20070  004508  0012               	return		;funcret
 20071  00450A                     __end_of___ftneg:
 20072                           	opt stack 0
 20073                           tosu	equ	0xFFF
 20074                           tosh	equ	0xFFE
 20075                           tosl	equ	0xFFD
 20076                           pclath	equ	0xFFA
 20077                           tblptru	equ	0xFF8
 20078                           tblptrh	equ	0xFF7
 20079                           tblptrl	equ	0xFF6
 20080                           tablat	equ	0xFF5
 20081                           prodh	equ	0xFF4
 20082                           prodl	equ	0xFF3
 20083                           intcon	equ	0xFF2
 20084                           intcon2	equ	0xFF1
 20085                           indf0	equ	0xFEF
 20086                           postinc0	equ	0xFEE
 20087                           fsr0h	equ	0xFEA
 20088                           fsr0l	equ	0xFE9
 20089                           wreg	equ	0xFE8
 20090                           indf1	equ	0xFE7
 20091                           postdec1	equ	0xFE5
 20092                           fsr1h	equ	0xFE2
 20093                           fsr1l	equ	0xFE1
 20094                           indf2	equ	0xFDF
 20095                           postinc2	equ	0xFDE
 20096                           postdec2	equ	0xFDD
 20097                           fsr2h	equ	0xFDA
 20098                           fsr2l	equ	0xFD9
 20099                           status	equ	0xFD8
 20100                           
 20101 ;; *************** function ___ftdiv *****************
 20102 ;; Defined at:
 20103 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 20104 ;; Parameters:    Size  Location     Type
 20105 ;;  f1              3   34[COMRAM] float 
 20106 ;;  f2              3   37[COMRAM] float 
 20107 ;; Auto vars:     Size  Location     Type
 20108 ;;  f3              3    1[BANK0 ] float 
 20109 ;;  sign            1    5[BANK0 ] unsigned char 
 20110 ;;  exp             1    4[BANK0 ] unsigned char 
 20111 ;;  cntr            1    0[BANK0 ] unsigned char 
 20112 ;; Return value:  Size  Location     Type
 20113 ;;                  3   34[COMRAM] float 
 20114 ;; Registers used:
 20115 ;;		wreg, status,2, status,0, cstack
 20116 ;; Tracked objects:
 20117 ;;		On entry : 0/0
 20118 ;;		On exit  : 0/0
 20119 ;;		Unchanged: 0/0
 20120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20121 ;;      Params:         6       0       0       0       0       0       0
 20122 ;;      Locals:         0       6       0       0       0       0       0
 20123 ;;      Temps:          3       0       0       0       0       0       0
 20124 ;;      Totals:         9       6       0       0       0       0       0
 20125 ;;Total ram usage:       15 bytes
 20126 ;; Hardware stack levels used:    1
 20127 ;; Hardware stack levels required when called:    4
 20128 ;; This function calls:
 20129 ;;		___ftpack
 20130 ;; This function is called by:
 20131 ;;		_SampleSingleChannel
 20132 ;;		_SampleAllChannels
 20133 ;;		_exp
 20134 ;;		_DacAnalogToDigitalSpi
 20135 ;;		_CalcSynthRegParams
 20136 ;; This function uses a non-reentrant model
 20137 ;;
 20138                           
 20139                           	psect	text89
 20140  002BD0                     __ptext89:
 20141                           	opt stack 0
 20142  002BD0                     ___ftdiv:
 20143                           	opt stack 22
 20144                           
 20145                           ;incstack = 0
 20146  002BD0  C025  F029         	movff	___ftdiv@f1+2,??___ftdiv
 20147  002BD4  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 20148  002BD6  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 20149  002BD8  3424               	rlcf	___ftdiv@f1+1,w,c
 20150  002BDA  3629               	rlcf	??___ftdiv& (0+255),f,c
 20151  002BDC  E301               	bnc	u7431
 20152  002BDE  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 20153  002BE0                     u7431:
 20154  002BE0  5029               	movf	??___ftdiv,w,c
 20155  002BE2  0100               	movlb	0	; () banked
 20156  002BE4  6F64               	movwf	___ftdiv@exp& (0+255),b
 20157  002BE6  5164               	movf	___ftdiv@exp& (0+255),w,b
 20158  002BE8  A4D8               	btfss	status,2,c
 20159  002BEA  D007               	goto	l2014
 20160                           
 20161                           ; BSR set to: 0
 20162  002BEC  0E00               	movlw	0
 20163  002BEE  6E23               	movwf	?___ftdiv,c
 20164  002BF0  0E00               	movlw	0
 20165  002BF2  6E24               	movwf	?___ftdiv+1,c
 20166  002BF4  0E00               	movlw	0
 20167  002BF6  6E25               	movwf	?___ftdiv+2,c
 20168                           
 20169                           ; BSR set to: 0
 20170  002BF8  0012               	return	
 20171  002BFA                     l2014:
 20172                           
 20173                           ; BSR set to: 0
 20174                           
 20175                           ; BSR set to: 0
 20176  002BFA  C028  F029         	movff	___ftdiv@f2+2,??___ftdiv
 20177  002BFE  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 20178  002C00  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 20179  002C02  3427               	rlcf	___ftdiv@f2+1,w,c
 20180  002C04  3629               	rlcf	??___ftdiv& (0+255),f,c
 20181  002C06  E301               	bnc	u7451
 20182  002C08  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 20183  002C0A                     u7451:
 20184  002C0A  5029               	movf	??___ftdiv,w,c
 20185  002C0C  6F65               	movwf	___ftdiv@sign& (0+255),b
 20186  002C0E  5165               	movf	___ftdiv@sign& (0+255),w,b
 20187  002C10  A4D8               	btfss	status,2,c
 20188  002C12  D007               	goto	l2016
 20189                           
 20190                           ; BSR set to: 0
 20191  002C14  0E00               	movlw	0
 20192  002C16  6E23               	movwf	?___ftdiv,c
 20193  002C18  0E00               	movlw	0
 20194  002C1A  6E24               	movwf	?___ftdiv+1,c
 20195  002C1C  0E00               	movlw	0
 20196  002C1E  6E25               	movwf	?___ftdiv+2,c
 20197                           
 20198                           ; BSR set to: 0
 20199  002C20  0012               	return	
 20200  002C22                     l2016:
 20201                           
 20202                           ; BSR set to: 0
 20203                           
 20204                           ; BSR set to: 0
 20205  002C22  0E00               	movlw	0
 20206  002C24  6F61               	movwf	___ftdiv@f3& (0+255),b
 20207  002C26  0E00               	movlw	0
 20208  002C28  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
 20209  002C2A  0E00               	movlw	0
 20210  002C2C  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
 20211                           
 20212                           ; BSR set to: 0
 20213  002C2E  5165               	movf	___ftdiv@sign& (0+255),w,b
 20214  002C30  0F89               	addlw	137
 20215  002C32  5F64               	subwf	___ftdiv@exp& (0+255),f,b
 20216                           
 20217                           ; BSR set to: 0
 20218  002C34  C025  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
 20219                           
 20220                           ; BSR set to: 0
 20221  002C38  5028               	movf	___ftdiv@f2+2,w,c
 20222  002C3A  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
 20223                           
 20224                           ; BSR set to: 0
 20225  002C3C  0E80               	movlw	128
 20226  002C3E  1765               	andwf	___ftdiv@sign& (0+255),f,b
 20227                           
 20228                           ; BSR set to: 0
 20229  002C40  8E24               	bsf	___ftdiv@f1+1,7,c
 20230                           
 20231                           ; BSR set to: 0
 20232  002C42  0EFF               	movlw	255
 20233  002C44  1623               	andwf	___ftdiv@f1,f,c
 20234  002C46  0EFF               	movlw	255
 20235  002C48  1624               	andwf	___ftdiv@f1+1,f,c
 20236  002C4A  0E00               	movlw	0
 20237  002C4C  1625               	andwf	___ftdiv@f1+2,f,c
 20238                           
 20239                           ; BSR set to: 0
 20240  002C4E  8E27               	bsf	___ftdiv@f2+1,7,c
 20241                           
 20242                           ; BSR set to: 0
 20243  002C50  0EFF               	movlw	255
 20244  002C52  1626               	andwf	___ftdiv@f2,f,c
 20245  002C54  0EFF               	movlw	255
 20246  002C56  1627               	andwf	___ftdiv@f2+1,f,c
 20247  002C58  0E00               	movlw	0
 20248  002C5A  1628               	andwf	___ftdiv@f2+2,f,c
 20249                           
 20250                           ; BSR set to: 0
 20251  002C5C  0E18               	movlw	24
 20252  002C5E  6F60               	movwf	___ftdiv@cntr& (0+255),b
 20253  002C60                     
 20254                           ; BSR set to: 0
 20255                           
 20256                           ; BSR set to: 0
 20257  002C60  90D8               	bcf	status,0,c
 20258  002C62  3761               	rlcf	___ftdiv@f3& (0+255),f,b
 20259  002C64  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 20260  002C66  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 20261                           
 20262                           ; BSR set to: 0
 20263  002C68  5026               	movf	___ftdiv@f2,w,c
 20264  002C6A  5C23               	subwf	___ftdiv@f1,w,c
 20265  002C6C  5027               	movf	___ftdiv@f2+1,w,c
 20266  002C6E  5824               	subwfb	___ftdiv@f1+1,w,c
 20267  002C70  5028               	movf	___ftdiv@f2+2,w,c
 20268  002C72  5825               	subwfb	___ftdiv@f1+2,w,c
 20269  002C74  A0D8               	btfss	status,0,c
 20270  002C76  D007               	goto	l2018
 20271                           
 20272                           ; BSR set to: 0
 20273  002C78  5026               	movf	___ftdiv@f2,w,c
 20274  002C7A  5E23               	subwf	___ftdiv@f1,f,c
 20275  002C7C  5027               	movf	___ftdiv@f2+1,w,c
 20276  002C7E  5A24               	subwfb	___ftdiv@f1+1,f,c
 20277  002C80  5028               	movf	___ftdiv@f2+2,w,c
 20278  002C82  5A25               	subwfb	___ftdiv@f1+2,f,c
 20279                           
 20280                           ; BSR set to: 0
 20281  002C84  8161               	bsf	___ftdiv@f3& (0+255),0,b
 20282  002C86                     l2018:
 20283                           
 20284                           ; BSR set to: 0
 20285  002C86  90D8               	bcf	status,0,c
 20286  002C88  3623               	rlcf	___ftdiv@f1,f,c
 20287  002C8A  3624               	rlcf	___ftdiv@f1+1,f,c
 20288  002C8C  3625               	rlcf	___ftdiv@f1+2,f,c
 20289                           
 20290                           ; BSR set to: 0
 20291  002C8E  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
 20292  002C90  D7E7               	goto	l2017
 20293                           
 20294                           ; BSR set to: 0
 20295                           
 20296                           ; BSR set to: 0
 20297  002C92  C061  F018         	movff	___ftdiv@f3,___ftpack@arg
 20298  002C96  C062  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 20299  002C9A  C063  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 20300  002C9E  C064  F01B         	movff	___ftdiv@exp,___ftpack@exp
 20301  002CA2  C065  F01C         	movff	___ftdiv@sign,___ftpack@sign
 20302  002CA6  EC9C  F019         	call	___ftpack	;wreg free
 20303  002CAA  C018  F023         	movff	?___ftpack,?___ftdiv
 20304  002CAE  C019  F024         	movff	?___ftpack+1,?___ftdiv+1
 20305  002CB2  C01A  F025         	movff	?___ftpack+2,?___ftdiv+2
 20306  002CB6  0012               	return	
 20307  002CB8                     __end_of___ftdiv:
 20308                           	opt stack 0
 20309                           tosu	equ	0xFFF
 20310                           tosh	equ	0xFFE
 20311                           tosl	equ	0xFFD
 20312                           pclath	equ	0xFFA
 20313                           tblptru	equ	0xFF8
 20314                           tblptrh	equ	0xFF7
 20315                           tblptrl	equ	0xFF6
 20316                           tablat	equ	0xFF5
 20317                           prodh	equ	0xFF4
 20318                           prodl	equ	0xFF3
 20319                           intcon	equ	0xFF2
 20320                           intcon2	equ	0xFF1
 20321                           indf0	equ	0xFEF
 20322                           postinc0	equ	0xFEE
 20323                           fsr0h	equ	0xFEA
 20324                           fsr0l	equ	0xFE9
 20325                           wreg	equ	0xFE8
 20326                           indf1	equ	0xFE7
 20327                           postdec1	equ	0xFE5
 20328                           fsr1h	equ	0xFE2
 20329                           fsr1l	equ	0xFE1
 20330                           indf2	equ	0xFDF
 20331                           postinc2	equ	0xFDE
 20332                           postdec2	equ	0xFDD
 20333                           fsr2h	equ	0xFDA
 20334                           fsr2l	equ	0xFD9
 20335                           status	equ	0xFD8
 20336                           
 20337 ;; *************** function ___awtoft *****************
 20338 ;; Defined at:
 20339 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 20340 ;; Parameters:    Size  Location     Type
 20341 ;;  c               2   31[COMRAM] int 
 20342 ;; Auto vars:     Size  Location     Type
 20343 ;;  sign            1   34[COMRAM] unsigned char 
 20344 ;; Return value:  Size  Location     Type
 20345 ;;                  3   31[COMRAM] float 
 20346 ;; Registers used:
 20347 ;;		wreg, status,2, status,0, cstack
 20348 ;; Tracked objects:
 20349 ;;		On entry : 0/0
 20350 ;;		On exit  : 0/0
 20351 ;;		Unchanged: 0/0
 20352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20353 ;;      Params:         3       0       0       0       0       0       0
 20354 ;;      Locals:         1       0       0       0       0       0       0
 20355 ;;      Temps:          0       0       0       0       0       0       0
 20356 ;;      Totals:         4       0       0       0       0       0       0
 20357 ;;Total ram usage:        4 bytes
 20358 ;; Hardware stack levels used:    1
 20359 ;; Hardware stack levels required when called:    4
 20360 ;; This function calls:
 20361 ;;		___ftpack
 20362 ;; This function is called by:
 20363 ;;		_GroupRx
 20364 ;;		_GroupTx
 20365 ;;		_ReadIntFromEeprom
 20366 ;;		_exp
 20367 ;;		_log
 20368 ;;		_DacSetValue
 20369 ;;		_CalcSynthRegParams
 20370 ;; This function uses a non-reentrant model
 20371 ;;
 20372                           
 20373                           	psect	text90
 20374  0042B0                     __ptext90:
 20375                           	opt stack 0
 20376  0042B0                     ___awtoft:
 20377                           	opt stack 22
 20378                           
 20379                           ;incstack = 0
 20380  0042B0  0E00               	movlw	0
 20381  0042B2  6E23               	movwf	___awtoft@sign,c
 20382  0042B4  AE21               	btfss	___awtoft@c+1,7,c
 20383  0042B6  D006               	goto	l1914
 20384  0042B8  6C20               	negf	___awtoft@c,c
 20385  0042BA  1E21               	comf	___awtoft@c+1,f,c
 20386  0042BC  B0D8               	btfsc	status,0,c
 20387  0042BE  2A21               	incf	___awtoft@c+1,f,c
 20388  0042C0  0E01               	movlw	1
 20389  0042C2  6E23               	movwf	___awtoft@sign,c
 20390  0042C4                     l1914:
 20391  0042C4  C020  F018         	movff	___awtoft@c,___ftpack@arg
 20392  0042C8  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 20393  0042CC  6A1A               	clrf	___ftpack@arg+2,c
 20394  0042CE  0E8E               	movlw	142
 20395  0042D0  6E1B               	movwf	___ftpack@exp,c
 20396  0042D2  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 20397  0042D6  EC9C  F019         	call	___ftpack	;wreg free
 20398  0042DA  C018  F020         	movff	?___ftpack,?___awtoft
 20399  0042DE  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 20400  0042E2  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 20401  0042E6  0012               	return	
 20402  0042E8                     __end_of___awtoft:
 20403                           	opt stack 0
 20404                           tosu	equ	0xFFF
 20405                           tosh	equ	0xFFE
 20406                           tosl	equ	0xFFD
 20407                           pclath	equ	0xFFA
 20408                           tblptru	equ	0xFF8
 20409                           tblptrh	equ	0xFF7
 20410                           tblptrl	equ	0xFF6
 20411                           tablat	equ	0xFF5
 20412                           prodh	equ	0xFF4
 20413                           prodl	equ	0xFF3
 20414                           intcon	equ	0xFF2
 20415                           intcon2	equ	0xFF1
 20416                           indf0	equ	0xFEF
 20417                           postinc0	equ	0xFEE
 20418                           fsr0h	equ	0xFEA
 20419                           fsr0l	equ	0xFE9
 20420                           wreg	equ	0xFE8
 20421                           indf1	equ	0xFE7
 20422                           postdec1	equ	0xFE5
 20423                           fsr1h	equ	0xFE2
 20424                           fsr1l	equ	0xFE1
 20425                           indf2	equ	0xFDF
 20426                           postinc2	equ	0xFDE
 20427                           postdec2	equ	0xFDD
 20428                           fsr2h	equ	0xFDA
 20429                           fsr2l	equ	0xFD9
 20430                           status	equ	0xFD8
 20431                           
 20432 ;; *************** function ___lltoft *****************
 20433 ;; Defined at:
 20434 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 20435 ;; Parameters:    Size  Location     Type
 20436 ;;  c               4   31[COMRAM] unsigned long 
 20437 ;; Auto vars:     Size  Location     Type
 20438 ;;  exp             1   39[COMRAM] unsigned char 
 20439 ;; Return value:  Size  Location     Type
 20440 ;;                  3   31[COMRAM] float 
 20441 ;; Registers used:
 20442 ;;		wreg, status,2, status,0, cstack
 20443 ;; Tracked objects:
 20444 ;;		On entry : 0/0
 20445 ;;		On exit  : 0/0
 20446 ;;		Unchanged: 0/0
 20447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20448 ;;      Params:         4       0       0       0       0       0       0
 20449 ;;      Locals:         1       0       0       0       0       0       0
 20450 ;;      Temps:          4       0       0       0       0       0       0
 20451 ;;      Totals:         9       0       0       0       0       0       0
 20452 ;;Total ram usage:        9 bytes
 20453 ;; Hardware stack levels used:    1
 20454 ;; Hardware stack levels required when called:    4
 20455 ;; This function calls:
 20456 ;;		___ftpack
 20457 ;; This function is called by:
 20458 ;;		_CollectRxStatusParams
 20459 ;;		_CollectTxStatusParams
 20460 ;;		_sprintf
 20461 ;;		_pow
 20462 ;;		_UpdateSynthFreq
 20463 ;; This function uses a non-reentrant model
 20464 ;;
 20465                           
 20466                           	psect	text91
 20467  003E06                     __ptext91:
 20468                           	opt stack 0
 20469  003E06                     ___lltoft:
 20470                           	opt stack 24
 20471                           
 20472                           ;incstack = 0
 20473  003E06  0E8E               	movlw	142
 20474  003E08  6E28               	movwf	___lltoft@exp,c
 20475  003E0A  D006               	goto	l2124
 20476  003E0C  90D8               	bcf	status,0,c
 20477  003E0E  3223               	rrcf	___lltoft@c+3,f,c
 20478  003E10  3222               	rrcf	___lltoft@c+2,f,c
 20479  003E12  3221               	rrcf	___lltoft@c+1,f,c
 20480  003E14  3220               	rrcf	___lltoft@c,f,c
 20481  003E16  2A28               	incf	___lltoft@exp,f,c
 20482  003E18                     l2124:
 20483  003E18  0E00               	movlw	0
 20484  003E1A  1420               	andwf	___lltoft@c,w,c
 20485  003E1C  6E24               	movwf	??___lltoft& (0+255),c
 20486  003E1E  0E00               	movlw	0
 20487  003E20  1421               	andwf	___lltoft@c+1,w,c
 20488  003E22  6E25               	movwf	(??___lltoft+1)& (0+255),c
 20489  003E24  0E00               	movlw	0
 20490  003E26  1422               	andwf	___lltoft@c+2,w,c
 20491  003E28  6E26               	movwf	(??___lltoft+2)& (0+255),c
 20492  003E2A  0EFF               	movlw	255
 20493  003E2C  1423               	andwf	___lltoft@c+3,w,c
 20494  003E2E  6E27               	movwf	(??___lltoft+3)& (0+255),c
 20495  003E30  5024               	movf	??___lltoft,w,c
 20496  003E32  1025               	iorwf	??___lltoft+1,w,c
 20497  003E34  1026               	iorwf	??___lltoft+2,w,c
 20498  003E36  1027               	iorwf	??___lltoft+3,w,c
 20499  003E38  A4D8               	btfss	status,2,c
 20500  003E3A  D7E8               	goto	l2125
 20501  003E3C  C020  F018         	movff	___lltoft@c,___ftpack@arg
 20502  003E40  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 20503  003E44  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 20504  003E48  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 20505  003E4C  0E00               	movlw	0
 20506  003E4E  6E1C               	movwf	___ftpack@sign,c
 20507  003E50  EC9C  F019         	call	___ftpack	;wreg free
 20508  003E54  C018  F020         	movff	?___ftpack,?___lltoft
 20509  003E58  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 20510  003E5C  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 20511  003E60  0012               	return	
 20512  003E62                     __end_of___lltoft:
 20513                           	opt stack 0
 20514                           tosu	equ	0xFFF
 20515                           tosh	equ	0xFFE
 20516                           tosl	equ	0xFFD
 20517                           pclath	equ	0xFFA
 20518                           tblptru	equ	0xFF8
 20519                           tblptrh	equ	0xFF7
 20520                           tblptrl	equ	0xFF6
 20521                           tablat	equ	0xFF5
 20522                           prodh	equ	0xFF4
 20523                           prodl	equ	0xFF3
 20524                           intcon	equ	0xFF2
 20525                           intcon2	equ	0xFF1
 20526                           indf0	equ	0xFEF
 20527                           postinc0	equ	0xFEE
 20528                           fsr0h	equ	0xFEA
 20529                           fsr0l	equ	0xFE9
 20530                           wreg	equ	0xFE8
 20531                           indf1	equ	0xFE7
 20532                           postdec1	equ	0xFE5
 20533                           fsr1h	equ	0xFE2
 20534                           fsr1l	equ	0xFE1
 20535                           indf2	equ	0xFDF
 20536                           postinc2	equ	0xFDE
 20537                           postdec2	equ	0xFDD
 20538                           fsr2h	equ	0xFDA
 20539                           fsr2l	equ	0xFD9
 20540                           status	equ	0xFD8
 20541                           
 20542 ;; *************** function ___ftpack *****************
 20543 ;; Defined at:
 20544 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 20545 ;; Parameters:    Size  Location     Type
 20546 ;;  arg             3   23[COMRAM] unsigned um
 20547 ;;  exp             1   26[COMRAM] unsigned char 
 20548 ;;  sign            1   27[COMRAM] unsigned char 
 20549 ;; Auto vars:     Size  Location     Type
 20550 ;;		None
 20551 ;; Return value:  Size  Location     Type
 20552 ;;                  3   23[COMRAM] float 
 20553 ;; Registers used:
 20554 ;;		wreg, status,2, status,0
 20555 ;; Tracked objects:
 20556 ;;		On entry : 0/0
 20557 ;;		On exit  : 0/0
 20558 ;;		Unchanged: 0/0
 20559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20560 ;;      Params:         5       0       0       0       0       0       0
 20561 ;;      Locals:         0       0       0       0       0       0       0
 20562 ;;      Temps:          3       0       0       0       0       0       0
 20563 ;;      Totals:         8       0       0       0       0       0       0
 20564 ;;Total ram usage:        8 bytes
 20565 ;; Hardware stack levels used:    1
 20566 ;; Hardware stack levels required when called:    3
 20567 ;; This function calls:
 20568 ;;		Nothing
 20569 ;; This function is called by:
 20570 ;;		___altoft
 20571 ;;		___awtoft
 20572 ;;		___ftadd
 20573 ;;		___ftdiv
 20574 ;;		___ftmul
 20575 ;;		___lltoft
 20576 ;;		___lwtoft
 20577 ;; This function uses a non-reentrant model
 20578 ;;
 20579                           
 20580                           	psect	text92
 20581  003338                     __ptext92:
 20582                           	opt stack 0
 20583  003338                     ___ftpack:
 20584                           	opt stack 23
 20585                           
 20586                           ;incstack = 0
 20587  003338  501B               	movf	___ftpack@exp,w,c
 20588  00333A  B4D8               	btfsc	status,2,c
 20589  00333C  D005               	goto	u6870
 20590  00333E  5018               	movf	___ftpack@arg,w,c
 20591  003340  1019               	iorwf	___ftpack@arg+1,w,c
 20592  003342  101A               	iorwf	___ftpack@arg+2,w,c
 20593  003344  A4D8               	btfss	status,2,c
 20594  003346  D00C               	goto	l1950
 20595  003348                     u6870:
 20596  003348  0E00               	movlw	0
 20597  00334A  6E18               	movwf	?___ftpack,c
 20598  00334C  0E00               	movlw	0
 20599  00334E  6E19               	movwf	?___ftpack+1,c
 20600  003350  0E00               	movlw	0
 20601  003352  6E1A               	movwf	?___ftpack+2,c
 20602  003354  0012               	return	
 20603  003356  2A1B               	incf	___ftpack@exp,f,c
 20604  003358  90D8               	bcf	status,0,c
 20605  00335A  321A               	rrcf	___ftpack@arg+2,f,c
 20606  00335C  3219               	rrcf	___ftpack@arg+1,f,c
 20607  00335E  3218               	rrcf	___ftpack@arg,f,c
 20608  003360                     l1950:
 20609  003360  0E00               	movlw	0
 20610  003362  1418               	andwf	___ftpack@arg,w,c
 20611  003364  6E1D               	movwf	??___ftpack& (0+255),c
 20612  003366  0E00               	movlw	0
 20613  003368  1419               	andwf	___ftpack@arg+1,w,c
 20614  00336A  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 20615  00336C  0EFE               	movlw	254
 20616  00336E  141A               	andwf	___ftpack@arg+2,w,c
 20617  003370  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 20618  003372  501D               	movf	??___ftpack,w,c
 20619  003374  101E               	iorwf	??___ftpack+1,w,c
 20620  003376  101F               	iorwf	??___ftpack+2,w,c
 20621  003378  B4D8               	btfsc	status,2,c
 20622  00337A  D00C               	goto	l1953
 20623  00337C  D7EC               	goto	l1951
 20624  00337E  2A1B               	incf	___ftpack@exp,f,c
 20625  003380  0E01               	movlw	1
 20626  003382  2618               	addwf	___ftpack@arg,f,c
 20627  003384  0E00               	movlw	0
 20628  003386  2219               	addwfc	___ftpack@arg+1,f,c
 20629  003388  0E00               	movlw	0
 20630  00338A  221A               	addwfc	___ftpack@arg+2,f,c
 20631  00338C  90D8               	bcf	status,0,c
 20632  00338E  321A               	rrcf	___ftpack@arg+2,f,c
 20633  003390  3219               	rrcf	___ftpack@arg+1,f,c
 20634  003392  3218               	rrcf	___ftpack@arg,f,c
 20635  003394                     l1953:
 20636  003394  0E00               	movlw	0
 20637  003396  1418               	andwf	___ftpack@arg,w,c
 20638  003398  6E1D               	movwf	??___ftpack& (0+255),c
 20639  00339A  0E00               	movlw	0
 20640  00339C  1419               	andwf	___ftpack@arg+1,w,c
 20641  00339E  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 20642  0033A0  0EFF               	movlw	255
 20643  0033A2  141A               	andwf	___ftpack@arg+2,w,c
 20644  0033A4  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 20645  0033A6  501D               	movf	??___ftpack,w,c
 20646  0033A8  101E               	iorwf	??___ftpack+1,w,c
 20647  0033AA  101F               	iorwf	??___ftpack+2,w,c
 20648  0033AC  B4D8               	btfsc	status,2,c
 20649  0033AE  D006               	goto	l1956
 20650  0033B0  D7E6               	goto	l1954
 20651  0033B2  061B               	decf	___ftpack@exp,f,c
 20652  0033B4  90D8               	bcf	status,0,c
 20653  0033B6  3618               	rlcf	___ftpack@arg,f,c
 20654  0033B8  3619               	rlcf	___ftpack@arg+1,f,c
 20655  0033BA  361A               	rlcf	___ftpack@arg+2,f,c
 20656  0033BC                     l1956:
 20657  0033BC  BE19               	btfsc	___ftpack@arg+1,7,c
 20658  0033BE  D003               	goto	u6910
 20659  0033C0  0E02               	movlw	2
 20660  0033C2  601B               	cpfslt	___ftpack@exp,c
 20661  0033C4  D7F6               	goto	l1957
 20662  0033C6                     u6910:
 20663  0033C6  A01B               	btfss	___ftpack@exp,0,c
 20664  0033C8  9E19               	bcf	___ftpack@arg+1,7,c
 20665  0033CA  90D8               	bcf	status,0,c
 20666  0033CC  321B               	rrcf	___ftpack@exp,f,c
 20667  0033CE  501B               	movf	___ftpack@exp,w,c
 20668  0033D0  121A               	iorwf	___ftpack@arg+2,f,c
 20669  0033D2  501C               	movf	___ftpack@sign,w,c
 20670  0033D4  A4D8               	btfss	status,2,c
 20671  0033D6  8E1A               	bsf	___ftpack@arg+2,7,c
 20672  0033D8  C018  F018         	movff	___ftpack@arg,?___ftpack
 20673  0033DC  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 20674  0033E0  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 20675  0033E4  0012               	return	
 20676  0033E6                     __end_of___ftpack:
 20677                           	opt stack 0
 20678                           tosu	equ	0xFFF
 20679                           tosh	equ	0xFFE
 20680                           tosl	equ	0xFFD
 20681                           pclath	equ	0xFFA
 20682                           tblptru	equ	0xFF8
 20683                           tblptrh	equ	0xFF7
 20684                           tblptrl	equ	0xFF6
 20685                           tablat	equ	0xFF5
 20686                           prodh	equ	0xFF4
 20687                           prodl	equ	0xFF3
 20688                           intcon	equ	0xFF2
 20689                           intcon2	equ	0xFF1
 20690                           indf0	equ	0xFEF
 20691                           postinc0	equ	0xFEE
 20692                           fsr0h	equ	0xFEA
 20693                           fsr0l	equ	0xFE9
 20694                           wreg	equ	0xFE8
 20695                           indf1	equ	0xFE7
 20696                           postdec1	equ	0xFE5
 20697                           fsr1h	equ	0xFE2
 20698                           fsr1l	equ	0xFE1
 20699                           indf2	equ	0xFDF
 20700                           postinc2	equ	0xFDE
 20701                           postdec2	equ	0xFDD
 20702                           fsr2h	equ	0xFDA
 20703                           fsr2l	equ	0xFD9
 20704                           status	equ	0xFD8
 20705                           
 20706 ;; *************** function ___lmul *****************
 20707 ;; Defined at:
 20708 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 20709 ;; Parameters:    Size  Location     Type
 20710 ;;  multiplier      4   25[COMRAM] unsigned long 
 20711 ;;  multiplicand    4   29[COMRAM] unsigned long 
 20712 ;; Auto vars:     Size  Location     Type
 20713 ;;  product         4   33[COMRAM] unsigned long 
 20714 ;; Return value:  Size  Location     Type
 20715 ;;                  4   25[COMRAM] unsigned long 
 20716 ;; Registers used:
 20717 ;;		wreg, status,2, status,0
 20718 ;; Tracked objects:
 20719 ;;		On entry : 0/0
 20720 ;;		On exit  : 0/0
 20721 ;;		Unchanged: 0/0
 20722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20723 ;;      Params:         8       0       0       0       0       0       0
 20724 ;;      Locals:         4       0       0       0       0       0       0
 20725 ;;      Temps:          0       0       0       0       0       0       0
 20726 ;;      Totals:        12       0       0       0       0       0       0
 20727 ;;Total ram usage:       12 bytes
 20728 ;; Hardware stack levels used:    1
 20729 ;; Hardware stack levels required when called:    3
 20730 ;; This function calls:
 20731 ;;		Nothing
 20732 ;; This function is called by:
 20733 ;;		_ReadIntFromEeprom
 20734 ;;		_strtol
 20735 ;; This function uses a non-reentrant model
 20736 ;;
 20737                           
 20738                           	psect	text93
 20739  003FBE                     __ptext93:
 20740                           	opt stack 0
 20741  003FBE                     ___lmul:
 20742                           	opt stack 23
 20743                           
 20744                           ;incstack = 0
 20745  003FBE  0E00               	movlw	0
 20746  003FC0  6E22               	movwf	___lmul@product,c
 20747  003FC2  0E00               	movlw	0
 20748  003FC4  6E23               	movwf	___lmul@product+1,c
 20749  003FC6  0E00               	movlw	0
 20750  003FC8  6E24               	movwf	___lmul@product+2,c
 20751  003FCA  0E00               	movlw	0
 20752  003FCC  6E25               	movwf	___lmul@product+3,c
 20753  003FCE  A01A               	btfss	___lmul@multiplier,0,c
 20754  003FD0  D008               	goto	l1731
 20755  003FD2  501E               	movf	___lmul@multiplicand,w,c
 20756  003FD4  2622               	addwf	___lmul@product,f,c
 20757  003FD6  501F               	movf	___lmul@multiplicand+1,w,c
 20758  003FD8  2223               	addwfc	___lmul@product+1,f,c
 20759  003FDA  5020               	movf	___lmul@multiplicand+2,w,c
 20760  003FDC  2224               	addwfc	___lmul@product+2,f,c
 20761  003FDE  5021               	movf	___lmul@multiplicand+3,w,c
 20762  003FE0  2225               	addwfc	___lmul@product+3,f,c
 20763  003FE2                     l1731:
 20764  003FE2  90D8               	bcf	status,0,c
 20765  003FE4  361E               	rlcf	___lmul@multiplicand,f,c
 20766  003FE6  361F               	rlcf	___lmul@multiplicand+1,f,c
 20767  003FE8  3620               	rlcf	___lmul@multiplicand+2,f,c
 20768  003FEA  3621               	rlcf	___lmul@multiplicand+3,f,c
 20769  003FEC  90D8               	bcf	status,0,c
 20770  003FEE  321D               	rrcf	___lmul@multiplier+3,f,c
 20771  003FF0  321C               	rrcf	___lmul@multiplier+2,f,c
 20772  003FF2  321B               	rrcf	___lmul@multiplier+1,f,c
 20773  003FF4  321A               	rrcf	___lmul@multiplier,f,c
 20774  003FF6  501A               	movf	___lmul@multiplier,w,c
 20775  003FF8  101B               	iorwf	___lmul@multiplier+1,w,c
 20776  003FFA  101C               	iorwf	___lmul@multiplier+2,w,c
 20777  003FFC  101D               	iorwf	___lmul@multiplier+3,w,c
 20778  003FFE  A4D8               	btfss	status,2,c
 20779  004000  D7E6               	goto	l1730
 20780  004002  C022  F01A         	movff	___lmul@product,?___lmul
 20781  004006  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 20782  00400A  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 20783  00400E  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 20784  004012  0012               	return		;funcret
 20785  004014                     __end_of___lmul:
 20786                           	opt stack 0
 20787                           tosu	equ	0xFFF
 20788                           tosh	equ	0xFFE
 20789                           tosl	equ	0xFFD
 20790                           pclath	equ	0xFFA
 20791                           tblptru	equ	0xFF8
 20792                           tblptrh	equ	0xFF7
 20793                           tblptrl	equ	0xFF6
 20794                           tablat	equ	0xFF5
 20795                           prodh	equ	0xFF4
 20796                           prodl	equ	0xFF3
 20797                           intcon	equ	0xFF2
 20798                           intcon2	equ	0xFF1
 20799                           indf0	equ	0xFEF
 20800                           postinc0	equ	0xFEE
 20801                           fsr0h	equ	0xFEA
 20802                           fsr0l	equ	0xFE9
 20803                           wreg	equ	0xFE8
 20804                           indf1	equ	0xFE7
 20805                           postdec1	equ	0xFE5
 20806                           fsr1h	equ	0xFE2
 20807                           fsr1l	equ	0xFE1
 20808                           indf2	equ	0xFDF
 20809                           postinc2	equ	0xFDE
 20810                           postdec2	equ	0xFDD
 20811                           fsr2h	equ	0xFDA
 20812                           fsr2l	equ	0xFD9
 20813                           status	equ	0xFD8
 20814                           
 20815 ;; *************** function _EepromRead *****************
 20816 ;; Defined at:
 20817 ;;		line 13 in file "FlashApp.c"
 20818 ;; Parameters:    Size  Location     Type
 20819 ;;  address         1    wreg     unsigned char 
 20820 ;; Auto vars:     Size  Location     Type
 20821 ;;  address         1   24[COMRAM] unsigned char 
 20822 ;; Return value:  Size  Location     Type
 20823 ;;                  1    wreg      unsigned char 
 20824 ;; Registers used:
 20825 ;;		wreg, status,2, cstack
 20826 ;; Tracked objects:
 20827 ;;		On entry : 0/0
 20828 ;;		On exit  : 0/0
 20829 ;;		Unchanged: 0/0
 20830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20831 ;;      Params:         0       0       0       0       0       0       0
 20832 ;;      Locals:         1       0       0       0       0       0       0
 20833 ;;      Temps:          0       0       0       0       0       0       0
 20834 ;;      Totals:         1       0       0       0       0       0       0
 20835 ;;Total ram usage:        1 bytes
 20836 ;; Hardware stack levels used:    1
 20837 ;; Hardware stack levels required when called:    4
 20838 ;; This function calls:
 20839 ;;		_DATAEE_ReadByte
 20840 ;; This function is called by:
 20841 ;;		_ReadIntFromEeprom
 20842 ;; This function uses a non-reentrant model
 20843 ;;
 20844                           
 20845                           	psect	text94
 20846  004656                     __ptext94:
 20847                           	opt stack 0
 20848  004656                     _EepromRead:
 20849                           	opt stack 24
 20850                           
 20851                           ;incstack = 0
 20852                           ;EepromRead@address stored from wreg
 20853  004656  6E19               	movwf	EepromRead@address,c
 20854                           
 20855                           ;FlashApp.c: 15: return DATAEE_ReadByte(address);
 20856  004658  5019               	movf	EepromRead@address,w,c
 20857  00465A  ECF9  F022         	call	_DATAEE_ReadByte
 20858  00465E  0012               	return	
 20859  004660                     __end_of_EepromRead:
 20860                           	opt stack 0
 20861                           tosu	equ	0xFFF
 20862                           tosh	equ	0xFFE
 20863                           tosl	equ	0xFFD
 20864                           pclath	equ	0xFFA
 20865                           tblptru	equ	0xFF8
 20866                           tblptrh	equ	0xFF7
 20867                           tblptrl	equ	0xFF6
 20868                           tablat	equ	0xFF5
 20869                           prodh	equ	0xFF4
 20870                           prodl	equ	0xFF3
 20871                           intcon	equ	0xFF2
 20872                           intcon2	equ	0xFF1
 20873                           indf0	equ	0xFEF
 20874                           postinc0	equ	0xFEE
 20875                           fsr0h	equ	0xFEA
 20876                           fsr0l	equ	0xFE9
 20877                           wreg	equ	0xFE8
 20878                           indf1	equ	0xFE7
 20879                           postdec1	equ	0xFE5
 20880                           fsr1h	equ	0xFE2
 20881                           fsr1l	equ	0xFE1
 20882                           indf2	equ	0xFDF
 20883                           postinc2	equ	0xFDE
 20884                           postdec2	equ	0xFDD
 20885                           fsr2h	equ	0xFDA
 20886                           fsr2l	equ	0xFD9
 20887                           status	equ	0xFD8
 20888                           
 20889 ;; *************** function _DATAEE_ReadByte *****************
 20890 ;; Defined at:
 20891 ;;		line 194 in file "mcc_generated_files/memory.c"
 20892 ;; Parameters:    Size  Location     Type
 20893 ;;  bAdd            1    wreg     unsigned char 
 20894 ;; Auto vars:     Size  Location     Type
 20895 ;;  bAdd            1   23[COMRAM] unsigned char 
 20896 ;; Return value:  Size  Location     Type
 20897 ;;                  1    wreg      unsigned char 
 20898 ;; Registers used:
 20899 ;;		wreg, status,2
 20900 ;; Tracked objects:
 20901 ;;		On entry : 0/0
 20902 ;;		On exit  : 0/0
 20903 ;;		Unchanged: 0/0
 20904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20905 ;;      Params:         0       0       0       0       0       0       0
 20906 ;;      Locals:         1       0       0       0       0       0       0
 20907 ;;      Temps:          0       0       0       0       0       0       0
 20908 ;;      Totals:         1       0       0       0       0       0       0
 20909 ;;Total ram usage:        1 bytes
 20910 ;; Hardware stack levels used:    1
 20911 ;; Hardware stack levels required when called:    3
 20912 ;; This function calls:
 20913 ;;		Nothing
 20914 ;; This function is called by:
 20915 ;;		_EepromRead
 20916 ;; This function uses a non-reentrant model
 20917 ;;
 20918                           
 20919                           	psect	text95
 20920  0045F2                     __ptext95:
 20921                           	opt stack 0
 20922  0045F2                     _DATAEE_ReadByte:
 20923                           	opt stack 24
 20924                           
 20925                           ;incstack = 0
 20926                           ;DATAEE_ReadByte@bAdd stored from wreg
 20927  0045F2  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 20928                           
 20929                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 20930  0045F4  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 20931                           
 20932                           ;memory.c: 198: EECON1bits.CFGS = 0;
 20933  0045F8  9CA6               	bcf	4006,6,c	;volsfr
 20934                           
 20935                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 20936  0045FA  9EA6               	bcf	4006,7,c	;volsfr
 20937                           
 20938                           ;memory.c: 200: EECON1bits.RD = 1;
 20939  0045FC  80A6               	bsf	4006,0,c	;volsfr
 20940                           
 20941                           ;memory.c: 201: __nop();
 20942  0045FE  F000               	nop	
 20943                           
 20944                           ;memory.c: 202: __nop();
 20945  004600  F000               	nop	
 20946                           
 20947                           ;memory.c: 204: return (EEDATA);
 20948  004602  50A8               	movf	4008,w,c	;volatile
 20949  004604  0012               	return	
 20950  004606                     __end_of_DATAEE_ReadByte:
 20951                           	opt stack 0
 20952                           tosu	equ	0xFFF
 20953                           tosh	equ	0xFFE
 20954                           tosl	equ	0xFFD
 20955                           pclath	equ	0xFFA
 20956                           tblptru	equ	0xFF8
 20957                           tblptrh	equ	0xFF7
 20958                           tblptrl	equ	0xFF6
 20959                           tablat	equ	0xFF5
 20960                           prodh	equ	0xFF4
 20961                           prodl	equ	0xFF3
 20962                           intcon	equ	0xFF2
 20963                           intcon2	equ	0xFF1
 20964                           indf0	equ	0xFEF
 20965                           postinc0	equ	0xFEE
 20966                           fsr0h	equ	0xFEA
 20967                           fsr0l	equ	0xFE9
 20968                           wreg	equ	0xFE8
 20969                           indf1	equ	0xFE7
 20970                           postdec1	equ	0xFE5
 20971                           fsr1h	equ	0xFE2
 20972                           fsr1l	equ	0xFE1
 20973                           indf2	equ	0xFDF
 20974                           postinc2	equ	0xFDE
 20975                           postdec2	equ	0xFDD
 20976                           fsr2h	equ	0xFDA
 20977                           fsr2l	equ	0xFD9
 20978                           status	equ	0xFD8
 20979                           
 20980 ;; *************** function _ClearMcuRunTime *****************
 20981 ;; Defined at:
 20982 ;;		line 53 in file "SystemStatus.c"
 20983 ;; Parameters:    Size  Location     Type
 20984 ;;		None
 20985 ;; Auto vars:     Size  Location     Type
 20986 ;;		None
 20987 ;; Return value:  Size  Location     Type
 20988 ;;                  1    wreg      void 
 20989 ;; Registers used:
 20990 ;;		wreg, status,2
 20991 ;; Tracked objects:
 20992 ;;		On entry : 0/0
 20993 ;;		On exit  : 0/0
 20994 ;;		Unchanged: 0/0
 20995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20996 ;;      Params:         0       0       0       0       0       0       0
 20997 ;;      Locals:         0       0       0       0       0       0       0
 20998 ;;      Temps:          0       0       0       0       0       0       0
 20999 ;;      Totals:         0       0       0       0       0       0       0
 21000 ;;Total ram usage:        0 bytes
 21001 ;; Hardware stack levels used:    1
 21002 ;; Hardware stack levels required when called:    3
 21003 ;; This function calls:
 21004 ;;		Nothing
 21005 ;; This function is called by:
 21006 ;;		_InitSystemApplicationManagers
 21007 ;; This function uses a non-reentrant model
 21008 ;;
 21009                           
 21010                           	psect	text96
 21011  004606                     __ptext96:
 21012                           	opt stack 0
 21013  004606                     _ClearMcuRunTime:
 21014                           	opt stack 26
 21015                           
 21016                           ;SystemStatus.c: 55: mcuRunTimeIn5SecTicks = 0;
 21017                           
 21018                           ;incstack = 0
 21019  004606  0E00               	movlw	0
 21020  004608  0101               	movlb	1	; () banked
 21021  00460A  6FB2               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 21022  00460C  0E00               	movlw	0
 21023  00460E  6FB3               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 21024  004610  0E00               	movlw	0
 21025  004612  6FB4               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 21026  004614  0E00               	movlw	0
 21027  004616  6FB5               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 21028                           
 21029                           ; BSR set to: 1
 21030  004618  0012               	return		;funcret
 21031  00461A                     __end_of_ClearMcuRunTime:
 21032                           	opt stack 0
 21033                           tosu	equ	0xFFF
 21034                           tosh	equ	0xFFE
 21035                           tosl	equ	0xFFD
 21036                           pclath	equ	0xFFA
 21037                           tblptru	equ	0xFF8
 21038                           tblptrh	equ	0xFF7
 21039                           tblptrl	equ	0xFF6
 21040                           tablat	equ	0xFF5
 21041                           prodh	equ	0xFF4
 21042                           prodl	equ	0xFF3
 21043                           intcon	equ	0xFF2
 21044                           intcon2	equ	0xFF1
 21045                           indf0	equ	0xFEF
 21046                           postinc0	equ	0xFEE
 21047                           fsr0h	equ	0xFEA
 21048                           fsr0l	equ	0xFE9
 21049                           wreg	equ	0xFE8
 21050                           indf1	equ	0xFE7
 21051                           postdec1	equ	0xFE5
 21052                           fsr1h	equ	0xFE2
 21053                           fsr1l	equ	0xFE1
 21054                           indf2	equ	0xFDF
 21055                           postinc2	equ	0xFDE
 21056                           postdec2	equ	0xFDD
 21057                           fsr2h	equ	0xFDA
 21058                           fsr2l	equ	0xFD9
 21059                           status	equ	0xFD8
 21060                           
 21061 ;; *************** function _BlinkOkLeds *****************
 21062 ;; Defined at:
 21063 ;;		line 24 in file "LedsApp.c"
 21064 ;; Parameters:    Size  Location     Type
 21065 ;;  state           1    wreg     enum E7690
 21066 ;; Auto vars:     Size  Location     Type
 21067 ;;  state           1   26[COMRAM] enum E7690
 21068 ;;  idx             2   27[COMRAM] int 
 21069 ;; Return value:  Size  Location     Type
 21070 ;;                  1    wreg      void 
 21071 ;; Registers used:
 21072 ;;		wreg, status,2, status,0
 21073 ;; Tracked objects:
 21074 ;;		On entry : 0/0
 21075 ;;		On exit  : 0/0
 21076 ;;		Unchanged: 0/0
 21077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21078 ;;      Params:         0       0       0       0       0       0       0
 21079 ;;      Locals:         3       0       0       0       0       0       0
 21080 ;;      Temps:          3       0       0       0       0       0       0
 21081 ;;      Totals:         6       0       0       0       0       0       0
 21082 ;;Total ram usage:        6 bytes
 21083 ;; Hardware stack levels used:    1
 21084 ;; Hardware stack levels required when called:    3
 21085 ;; This function calls:
 21086 ;;		Nothing
 21087 ;; This function is called by:
 21088 ;;		_main
 21089 ;; This function uses a non-reentrant model
 21090 ;;
 21091                           
 21092                           	psect	text97
 21093  003D4C                     __ptext97:
 21094                           	opt stack 0
 21095  003D4C                     _BlinkOkLeds:
 21096                           	opt stack 27
 21097                           
 21098                           ; BSR set to: 1
 21099                           ;incstack = 0
 21100                           ;BlinkOkLeds@state stored from wreg
 21101  003D4C  6E1B               	movwf	BlinkOkLeds@state,c
 21102                           
 21103                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 21104  003D4E  0E00               	movlw	0
 21105  003D50  6E1D               	movwf	BlinkOkLeds@idx+1,c
 21106  003D52  0E00               	movlw	0
 21107  003D54  6E1C               	movwf	BlinkOkLeds@idx,c
 21108  003D56                     l7093:
 21109  003D56  501B               	movf	BlinkOkLeds@state,w,c
 21110  003D58  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 21111  003D5A  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 21112  003D5C  5018               	movf	??_BlinkOkLeds,w,c
 21113  003D5E  5C1C               	subwf	BlinkOkLeds@idx,w,c
 21114  003D60  501D               	movf	BlinkOkLeds@idx+1,w,c
 21115  003D62  0A80               	xorlw	128
 21116  003D64  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 21117  003D66  5019               	movf	??_BlinkOkLeds+1,w,c
 21118  003D68  0A80               	xorlw	128
 21119  003D6A  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 21120  003D6C  B0D8               	btfsc	status,0,c
 21121  003D6E  0012               	return	
 21122                           
 21123                           ;LedsApp.c: 27: {
 21124                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 21125  003D70  908B               	bcf	3979,0,c	;volatile
 21126                           
 21127                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 21128  003D72  0E02               	movlw	2
 21129  003D74  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 21130  003D76  0E04               	movlw	4
 21131  003D78  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 21132  003D7A  0EBA               	movlw	186
 21133  003D7C                     u9687:
 21134  003D7C  2EE8               	decfsz	wreg,f,c
 21135  003D7E  D7FE               	bra	u9687
 21136  003D80  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 21137  003D82  D7FC               	bra	u9687
 21138  003D84  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 21139  003D86  D7FA               	bra	u9687
 21140  003D88  D000               	nop2	
 21141                           
 21142                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 21143  003D8A  808B               	bsf	3979,0,c	;volatile
 21144                           
 21145                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 21146  003D8C  0E02               	movlw	2
 21147  003D8E  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 21148  003D90  0E04               	movlw	4
 21149  003D92  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 21150  003D94  0EBA               	movlw	186
 21151  003D96                     u9697:
 21152  003D96  2EE8               	decfsz	wreg,f,c
 21153  003D98  D7FE               	bra	u9697
 21154  003D9A  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 21155  003D9C  D7FC               	bra	u9697
 21156  003D9E  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 21157  003DA0  D7FA               	bra	u9697
 21158  003DA2  D000               	nop2	
 21159  003DA4  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 21160  003DA6  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 21161  003DA8  D7D6               	goto	l7093
 21162  003DAA                     __end_of_BlinkOkLeds:
 21163                           	opt stack 0
 21164                           tosu	equ	0xFFF
 21165                           tosh	equ	0xFFE
 21166                           tosl	equ	0xFFD
 21167                           pclath	equ	0xFFA
 21168                           tblptru	equ	0xFF8
 21169                           tblptrh	equ	0xFF7
 21170                           tblptrl	equ	0xFF6
 21171                           tablat	equ	0xFF5
 21172                           prodh	equ	0xFF4
 21173                           prodl	equ	0xFF3
 21174                           intcon	equ	0xFF2
 21175                           intcon2	equ	0xFF1
 21176                           indf0	equ	0xFEF
 21177                           postinc0	equ	0xFEE
 21178                           fsr0h	equ	0xFEA
 21179                           fsr0l	equ	0xFE9
 21180                           wreg	equ	0xFE8
 21181                           indf1	equ	0xFE7
 21182                           postdec1	equ	0xFE5
 21183                           fsr1h	equ	0xFE2
 21184                           fsr1l	equ	0xFE1
 21185                           indf2	equ	0xFDF
 21186                           postinc2	equ	0xFDE
 21187                           postdec2	equ	0xFDD
 21188                           fsr2h	equ	0xFDA
 21189                           fsr2l	equ	0xFD9
 21190                           status	equ	0xFD8
 21191                           
 21192 ;; *************** function _INTERRUPT_InterruptManager *****************
 21193 ;; Defined at:
 21194 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 21195 ;; Parameters:    Size  Location     Type
 21196 ;;		None
 21197 ;; Auto vars:     Size  Location     Type
 21198 ;;		None
 21199 ;; Return value:  Size  Location     Type
 21200 ;;                  1    wreg      void 
 21201 ;; Registers used:
 21202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21203 ;; Tracked objects:
 21204 ;;		On entry : 0/0
 21205 ;;		On exit  : 0/0
 21206 ;;		Unchanged: 0/0
 21207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21208 ;;      Params:         0       0       0       0       0       0       0
 21209 ;;      Locals:         0       0       0       0       0       0       0
 21210 ;;      Temps:         18       0       0       0       0       0       0
 21211 ;;      Totals:        18       0       0       0       0       0       0
 21212 ;;Total ram usage:       18 bytes
 21213 ;; Hardware stack levels used:    1
 21214 ;; Hardware stack levels required when called:    2
 21215 ;; This function calls:
 21216 ;;		_EUSART1_Receive_ISR
 21217 ;;		_EUSART1_Transmit_ISR
 21218 ;;		_MEMORY_ISR
 21219 ;;		_PIN_MANAGER_IOC
 21220 ;;		_TMR0_ISR
 21221 ;; This function is called by:
 21222 ;;		Interrupt level 2
 21223 ;; This function uses a non-reentrant model
 21224 ;;
 21225                           
 21226                           	psect	intcode
 21227  000008                     __pintcode:
 21228                           	opt stack 0
 21229  000008                     _INTERRUPT_InterruptManager:
 21230                           	opt stack 20
 21231                           
 21232                           ;incstack = 0
 21233  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21234  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 21235  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 21236  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 21237  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 21238  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 21239  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 21240  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 21241  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 21242  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 21243  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 21244  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 21245  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 21246  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 21247  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 21248  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 21249  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 21250  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 21251  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 21252                           
 21253                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 21254  000052  B6F2               	btfsc	intcon,3,c	;volatile
 21255  000054  A0F2               	btfss	intcon,0,c	;volatile
 21256  000056  D003               	goto	i2l768
 21257                           
 21258                           ;interrupt_manager.c: 61: {
 21259                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 21260  000058  EC37  F023         	call	_PIN_MANAGER_IOC	;wreg free
 21261                           
 21262                           ;interrupt_manager.c: 63: }
 21263  00005C  D019               	goto	i2l777
 21264  00005E                     i2l768:
 21265                           
 21266                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 21267  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 21268  000060  A4F2               	btfss	intcon,2,c	;volatile
 21269  000062  D003               	goto	i2l770
 21270                           
 21271                           ;interrupt_manager.c: 65: {
 21272                           ;interrupt_manager.c: 66: TMR0_ISR();
 21273  000064  EC42  F019         	call	_TMR0_ISR	;wreg free
 21274                           
 21275                           ;interrupt_manager.c: 67: }
 21276  000068  D013               	goto	i2l777
 21277  00006A                     i2l770:
 21278                           
 21279                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 21280  00006A  ACF2               	btfss	intcon,6,c	;volatile
 21281  00006C  D011               	goto	i2l777
 21282                           
 21283                           ;interrupt_manager.c: 69: {
 21284                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 21285  00006E  B8A0               	btfsc	4000,4,c	;volatile
 21286  000070  A8A1               	btfss	4001,4,c	;volatile
 21287  000072  D003               	goto	i2l773
 21288                           
 21289                           ;interrupt_manager.c: 71: {
 21290                           ;interrupt_manager.c: 72: MEMORY_ISR();
 21291  000074  EC39  F023         	call	_MEMORY_ISR	;wreg free
 21292                           
 21293                           ;interrupt_manager.c: 73: }
 21294  000078  D00B               	goto	i2l777
 21295  00007A                     i2l773:
 21296                           
 21297                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 21298  00007A  B89D               	btfsc	3997,4,c	;volatile
 21299  00007C  A89E               	btfss	3998,4,c	;volatile
 21300  00007E  D003               	goto	i2l775
 21301                           
 21302                           ;interrupt_manager.c: 75: {
 21303                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 21304  000080  EC74  F021         	call	_EUSART1_Transmit_ISR	;wreg free
 21305                           
 21306                           ;interrupt_manager.c: 77: }
 21307  000084  D005               	goto	i2l777
 21308  000086                     i2l775:
 21309                           
 21310                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 21311  000086  BA9D               	btfsc	3997,5,c	;volatile
 21312  000088  AA9E               	btfss	3998,5,c	;volatile
 21313  00008A  D002               	goto	i2l777
 21314                           
 21315                           ;interrupt_manager.c: 79: {
 21316                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 21317  00008C  ECE0  F021         	call	_EUSART1_Receive_ISR	;wreg free
 21318  000090                     i2l777:
 21319                           
 21320                           ;interrupt_manager.c: 87: else
 21321                           ;interrupt_manager.c: 88: {
 21322                           
 21323                           ;interrupt_manager.c: 85: }
 21324                           ;interrupt_manager.c: 86: }
 21325                           
 21326                           ;interrupt_manager.c: 82: else
 21327                           ;interrupt_manager.c: 83: {
 21328  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 21329  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 21330  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 21331  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 21332  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 21333  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 21334  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 21335  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 21336  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 21337  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 21338  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 21339  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 21340  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 21341  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 21342  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 21343  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 21344  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 21345  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 21346  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21347  0000DA  0011               	retfie		f
 21348  0000DC                     __end_of_INTERRUPT_InterruptManager:
 21349                           	opt stack 0
 21350                           tosu	equ	0xFFF
 21351                           tosh	equ	0xFFE
 21352                           tosl	equ	0xFFD
 21353                           pclatu	equ	0xFFB
 21354                           pclath	equ	0xFFA
 21355                           tblptru	equ	0xFF8
 21356                           tblptrh	equ	0xFF7
 21357                           tblptrl	equ	0xFF6
 21358                           tablat	equ	0xFF5
 21359                           prodh	equ	0xFF4
 21360                           prodl	equ	0xFF3
 21361                           intcon	equ	0xFF2
 21362                           intcon2	equ	0xFF1
 21363                           indf0	equ	0xFEF
 21364                           postinc0	equ	0xFEE
 21365                           fsr0h	equ	0xFEA
 21366                           fsr0l	equ	0xFE9
 21367                           wreg	equ	0xFE8
 21368                           indf1	equ	0xFE7
 21369                           postdec1	equ	0xFE5
 21370                           fsr1h	equ	0xFE2
 21371                           fsr1l	equ	0xFE1
 21372                           indf2	equ	0xFDF
 21373                           postinc2	equ	0xFDE
 21374                           postdec2	equ	0xFDD
 21375                           fsr2h	equ	0xFDA
 21376                           fsr2l	equ	0xFD9
 21377                           status	equ	0xFD8
 21378                           
 21379 ;; *************** function _TMR0_ISR *****************
 21380 ;; Defined at:
 21381 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 21382 ;; Parameters:    Size  Location     Type
 21383 ;;		None
 21384 ;; Auto vars:     Size  Location     Type
 21385 ;;		None
 21386 ;; Return value:  Size  Location     Type
 21387 ;;                  1    wreg      void 
 21388 ;; Registers used:
 21389 ;;		wreg, status,2, status,0, cstack
 21390 ;; Tracked objects:
 21391 ;;		On entry : 0/0
 21392 ;;		On exit  : 0/0
 21393 ;;		Unchanged: 0/0
 21394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21395 ;;      Params:         0       0       0       0       0       0       0
 21396 ;;      Locals:         0       0       0       0       0       0       0
 21397 ;;      Temps:          0       0       0       0       0       0       0
 21398 ;;      Totals:         0       0       0       0       0       0       0
 21399 ;;Total ram usage:        0 bytes
 21400 ;; Hardware stack levels used:    1
 21401 ;; Hardware stack levels required when called:    1
 21402 ;; This function calls:
 21403 ;;		___lwmod
 21404 ;; This function is called by:
 21405 ;;		_INTERRUPT_InterruptManager
 21406 ;; This function uses a non-reentrant model
 21407 ;;
 21408                           
 21409                           	psect	text99
 21410  003284                     __ptext99:
 21411                           	opt stack 0
 21412  003284                     _TMR0_ISR:
 21413                           	opt stack 20
 21414                           
 21415                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 21416                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 21417                           
 21418                           ;incstack = 0
 21419  003284  94F2               	bcf	intcon,2,c	;volatile
 21420                           
 21421                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 21422  003286  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 21423  003288  6ED7               	movwf	4055,c	;volatile
 21424                           
 21425                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 21426  00328A  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 21427                           
 21428                           ;tmr0.c: 146: CountCallBack ++;
 21429  00328E  4A3B               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 21430  003290  2A3C               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 21431                           
 21432                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 21433  003292  C03B  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 21434  003296  C03C  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 21435  00329A  0E00               	movlw	0
 21436  00329C  6E04               	movwf	___lwmod@divisor+1,c
 21437  00329E  0E14               	movlw	20
 21438  0032A0  6E03               	movwf	___lwmod@divisor,c
 21439  0032A2  ECDF  F020         	call	___lwmod	;wreg free
 21440  0032A6  5001               	movf	?___lwmod,w,c
 21441  0032A8  1002               	iorwf	?___lwmod+1,w,c
 21442  0032AA  A4D8               	btfss	status,2,c
 21443  0032AC  D003               	goto	i2l1001
 21444                           
 21445                           ;tmr0.c: 148: {
 21446                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 21447  0032AE  0E01               	movlw	1
 21448  0032B0  0101               	movlb	1	; () banked
 21449  0032B2  6FDB               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 21450  0032B4                     i2l1001:
 21451                           
 21452                           ;tmr0.c: 150: }
 21453                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 21454                           
 21455                           ; BSR set to: 1
 21456  0032B4  C03B  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 21457  0032B8  C03C  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 21458  0032BC  0E00               	movlw	0
 21459  0032BE  6E04               	movwf	___lwmod@divisor+1,c
 21460  0032C0  0E32               	movlw	50
 21461  0032C2  6E03               	movwf	___lwmod@divisor,c
 21462  0032C4  ECDF  F020         	call	___lwmod	;wreg free
 21463  0032C8  5001               	movf	?___lwmod,w,c
 21464  0032CA  1002               	iorwf	?___lwmod+1,w,c
 21465  0032CC  A4D8               	btfss	status,2,c
 21466  0032CE  D003               	goto	i2l1002
 21467                           
 21468                           ;tmr0.c: 153: {
 21469                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 21470  0032D0  0E01               	movlw	1
 21471  0032D2  0101               	movlb	1	; () banked
 21472  0032D4  6FDA               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 21473  0032D6                     i2l1002:
 21474                           
 21475                           ;tmr0.c: 155: }
 21476                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 21477                           
 21478                           ; BSR set to: 1
 21479  0032D6  C03B  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 21480  0032DA  C03C  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 21481  0032DE  0E01               	movlw	1
 21482  0032E0  6E04               	movwf	___lwmod@divisor+1,c
 21483  0032E2  0E2C               	movlw	44
 21484  0032E4  6E03               	movwf	___lwmod@divisor,c
 21485  0032E6  ECDF  F020         	call	___lwmod	;wreg free
 21486  0032EA  5001               	movf	?___lwmod,w,c
 21487  0032EC  1002               	iorwf	?___lwmod+1,w,c
 21488  0032EE  A4D8               	btfss	status,2,c
 21489  0032F0  D003               	goto	i2l1003
 21490                           
 21491                           ;tmr0.c: 157: {
 21492                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 21493  0032F2  0E01               	movlw	1
 21494  0032F4  0101               	movlb	1	; () banked
 21495  0032F6  6FD9               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 21496  0032F8                     i2l1003:
 21497                           
 21498                           ;tmr0.c: 159: }
 21499                           ;tmr0.c: 160: if ((CountCallBack % 200) == 0)
 21500                           
 21501                           ; BSR set to: 1
 21502  0032F8  C03B  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 21503  0032FC  C03C  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 21504  003300  0E00               	movlw	0
 21505  003302  6E04               	movwf	___lwmod@divisor+1,c
 21506  003304  0EC8               	movlw	200
 21507  003306  6E03               	movwf	___lwmod@divisor,c
 21508  003308  ECDF  F020         	call	___lwmod	;wreg free
 21509  00330C  5001               	movf	?___lwmod,w,c
 21510  00330E  1002               	iorwf	?___lwmod+1,w,c
 21511  003310  A4D8               	btfss	status,2,c
 21512  003312  D003               	goto	i2l1004
 21513                           
 21514                           ;tmr0.c: 161: {
 21515                           ;tmr0.c: 162: TimertenSecFlag = 1;
 21516  003314  0E01               	movlw	1
 21517  003316  0101               	movlb	1	; () banked
 21518  003318  6FD8               	movwf	_TimertenSecFlag& (0+255),b	;volatile
 21519  00331A                     i2l1004:
 21520                           
 21521                           ;tmr0.c: 163: }
 21522                           ;tmr0.c: 165: CountCallBack %= 300;
 21523                           
 21524                           ; BSR set to: 1
 21525  00331A  C03B  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 21526  00331E  C03C  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 21527  003322  0E01               	movlw	1
 21528  003324  6E04               	movwf	___lwmod@divisor+1,c
 21529  003326  0E2C               	movlw	44
 21530  003328  6E03               	movwf	___lwmod@divisor,c
 21531  00332A  ECDF  F020         	call	___lwmod	;wreg free
 21532  00332E  C001  F03B         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 21533  003332  C002  F03C         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 21534  003336  0012               	return		;funcret
 21535  003338                     __end_of_TMR0_ISR:
 21536                           	opt stack 0
 21537                           tosu	equ	0xFFF
 21538                           tosh	equ	0xFFE
 21539                           tosl	equ	0xFFD
 21540                           pclatu	equ	0xFFB
 21541                           pclath	equ	0xFFA
 21542                           tblptru	equ	0xFF8
 21543                           tblptrh	equ	0xFF7
 21544                           tblptrl	equ	0xFF6
 21545                           tablat	equ	0xFF5
 21546                           prodh	equ	0xFF4
 21547                           prodl	equ	0xFF3
 21548                           intcon	equ	0xFF2
 21549                           intcon2	equ	0xFF1
 21550                           indf0	equ	0xFEF
 21551                           postinc0	equ	0xFEE
 21552                           fsr0h	equ	0xFEA
 21553                           fsr0l	equ	0xFE9
 21554                           wreg	equ	0xFE8
 21555                           indf1	equ	0xFE7
 21556                           postdec1	equ	0xFE5
 21557                           fsr1h	equ	0xFE2
 21558                           fsr1l	equ	0xFE1
 21559                           indf2	equ	0xFDF
 21560                           postinc2	equ	0xFDE
 21561                           postdec2	equ	0xFDD
 21562                           fsr2h	equ	0xFDA
 21563                           fsr2l	equ	0xFD9
 21564                           status	equ	0xFD8
 21565                           
 21566 ;; *************** function ___lwmod *****************
 21567 ;; Defined at:
 21568 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 21569 ;; Parameters:    Size  Location     Type
 21570 ;;  dividend        2    0[COMRAM] unsigned int 
 21571 ;;  divisor         2    2[COMRAM] unsigned int 
 21572 ;; Auto vars:     Size  Location     Type
 21573 ;;  counter         1    4[COMRAM] unsigned char 
 21574 ;; Return value:  Size  Location     Type
 21575 ;;                  2    0[COMRAM] unsigned int 
 21576 ;; Registers used:
 21577 ;;		wreg, status,2, status,0
 21578 ;; Tracked objects:
 21579 ;;		On entry : 0/0
 21580 ;;		On exit  : 0/0
 21581 ;;		Unchanged: 0/0
 21582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21583 ;;      Params:         4       0       0       0       0       0       0
 21584 ;;      Locals:         1       0       0       0       0       0       0
 21585 ;;      Temps:          0       0       0       0       0       0       0
 21586 ;;      Totals:         5       0       0       0       0       0       0
 21587 ;;Total ram usage:        5 bytes
 21588 ;; Hardware stack levels used:    1
 21589 ;; This function calls:
 21590 ;;		Nothing
 21591 ;; This function is called by:
 21592 ;;		_TMR0_ISR
 21593 ;; This function uses a non-reentrant model
 21594 ;;
 21595                           
 21596                           	psect	text100
 21597  0041BE                     __ptext100:
 21598                           	opt stack 0
 21599  0041BE                     ___lwmod:
 21600                           	opt stack 20
 21601                           
 21602                           ;incstack = 0
 21603  0041BE  5003               	movf	___lwmod@divisor,w,c
 21604  0041C0  1004               	iorwf	___lwmod@divisor+1,w,c
 21605  0041C2  B4D8               	btfsc	status,2,c
 21606  0041C4  D018               	goto	i2l2171
 21607  0041C6  0E01               	movlw	1
 21608  0041C8  6E05               	movwf	___lwmod@counter,c
 21609  0041CA  D004               	goto	i2l2166
 21610  0041CC  90D8               	bcf	status,0,c
 21611  0041CE  3603               	rlcf	___lwmod@divisor,f,c
 21612  0041D0  3604               	rlcf	___lwmod@divisor+1,f,c
 21613  0041D2  2A05               	incf	___lwmod@counter,f,c
 21614  0041D4                     i2l2166:
 21615  0041D4  AE04               	btfss	___lwmod@divisor+1,7,c
 21616  0041D6  D7FA               	goto	i2l2167
 21617  0041D8                     i2u613_40:
 21618  0041D8  5003               	movf	___lwmod@divisor,w,c
 21619  0041DA  5C01               	subwf	___lwmod@dividend,w,c
 21620  0041DC  5004               	movf	___lwmod@divisor+1,w,c
 21621  0041DE  5802               	subwfb	___lwmod@dividend+1,w,c
 21622  0041E0  A0D8               	btfss	status,0,c
 21623  0041E2  D004               	goto	i2l2170
 21624  0041E4  5003               	movf	___lwmod@divisor,w,c
 21625  0041E6  5E01               	subwf	___lwmod@dividend,f,c
 21626  0041E8  5004               	movf	___lwmod@divisor+1,w,c
 21627  0041EA  5A02               	subwfb	___lwmod@dividend+1,f,c
 21628  0041EC                     i2l2170:
 21629  0041EC  90D8               	bcf	status,0,c
 21630  0041EE  3204               	rrcf	___lwmod@divisor+1,f,c
 21631  0041F0  3203               	rrcf	___lwmod@divisor,f,c
 21632  0041F2  2E05               	decfsz	___lwmod@counter,f,c
 21633  0041F4  D7F1               	goto	i2u613_40
 21634  0041F6                     i2l2171:
 21635  0041F6  C001  F001         	movff	___lwmod@dividend,?___lwmod
 21636  0041FA  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 21637  0041FE  0012               	return		;funcret
 21638  004200                     __end_of___lwmod:
 21639                           	opt stack 0
 21640                           tosu	equ	0xFFF
 21641                           tosh	equ	0xFFE
 21642                           tosl	equ	0xFFD
 21643                           pclatu	equ	0xFFB
 21644                           pclath	equ	0xFFA
 21645                           tblptru	equ	0xFF8
 21646                           tblptrh	equ	0xFF7
 21647                           tblptrl	equ	0xFF6
 21648                           tablat	equ	0xFF5
 21649                           prodh	equ	0xFF4
 21650                           prodl	equ	0xFF3
 21651                           intcon	equ	0xFF2
 21652                           intcon2	equ	0xFF1
 21653                           indf0	equ	0xFEF
 21654                           postinc0	equ	0xFEE
 21655                           fsr0h	equ	0xFEA
 21656                           fsr0l	equ	0xFE9
 21657                           wreg	equ	0xFE8
 21658                           indf1	equ	0xFE7
 21659                           postdec1	equ	0xFE5
 21660                           fsr1h	equ	0xFE2
 21661                           fsr1l	equ	0xFE1
 21662                           indf2	equ	0xFDF
 21663                           postinc2	equ	0xFDE
 21664                           postdec2	equ	0xFDD
 21665                           fsr2h	equ	0xFDA
 21666                           fsr2l	equ	0xFD9
 21667                           status	equ	0xFD8
 21668                           
 21669 ;; *************** function _PIN_MANAGER_IOC *****************
 21670 ;; Defined at:
 21671 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 21672 ;; Parameters:    Size  Location     Type
 21673 ;;		None
 21674 ;; Auto vars:     Size  Location     Type
 21675 ;;		None
 21676 ;; Return value:  Size  Location     Type
 21677 ;;                  1    wreg      void 
 21678 ;; Registers used:
 21679 ;;		None
 21680 ;; Tracked objects:
 21681 ;;		On entry : 0/0
 21682 ;;		On exit  : 0/0
 21683 ;;		Unchanged: 0/0
 21684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21685 ;;      Params:         0       0       0       0       0       0       0
 21686 ;;      Locals:         0       0       0       0       0       0       0
 21687 ;;      Temps:          0       0       0       0       0       0       0
 21688 ;;      Totals:         0       0       0       0       0       0       0
 21689 ;;Total ram usage:        0 bytes
 21690 ;; Hardware stack levels used:    1
 21691 ;; This function calls:
 21692 ;;		Nothing
 21693 ;; This function is called by:
 21694 ;;		_INTERRUPT_InterruptManager
 21695 ;; This function uses a non-reentrant model
 21696 ;;
 21697                           
 21698                           	psect	text101
 21699  00466E                     __ptext101:
 21700                           	opt stack 0
 21701  00466E                     _PIN_MANAGER_IOC:
 21702                           	opt stack 21
 21703                           
 21704                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 21705                           
 21706                           ;incstack = 0
 21707  00466E  90F2               	bcf	intcon,0,c	;volatile
 21708  004670  0012               	return		;funcret
 21709  004672                     __end_of_PIN_MANAGER_IOC:
 21710                           	opt stack 0
 21711                           tosu	equ	0xFFF
 21712                           tosh	equ	0xFFE
 21713                           tosl	equ	0xFFD
 21714                           pclatu	equ	0xFFB
 21715                           pclath	equ	0xFFA
 21716                           tblptru	equ	0xFF8
 21717                           tblptrh	equ	0xFF7
 21718                           tblptrl	equ	0xFF6
 21719                           tablat	equ	0xFF5
 21720                           prodh	equ	0xFF4
 21721                           prodl	equ	0xFF3
 21722                           intcon	equ	0xFF2
 21723                           intcon2	equ	0xFF1
 21724                           indf0	equ	0xFEF
 21725                           postinc0	equ	0xFEE
 21726                           fsr0h	equ	0xFEA
 21727                           fsr0l	equ	0xFE9
 21728                           wreg	equ	0xFE8
 21729                           indf1	equ	0xFE7
 21730                           postdec1	equ	0xFE5
 21731                           fsr1h	equ	0xFE2
 21732                           fsr1l	equ	0xFE1
 21733                           indf2	equ	0xFDF
 21734                           postinc2	equ	0xFDE
 21735                           postdec2	equ	0xFDD
 21736                           fsr2h	equ	0xFDA
 21737                           fsr2l	equ	0xFD9
 21738                           status	equ	0xFD8
 21739                           
 21740 ;; *************** function _MEMORY_ISR *****************
 21741 ;; Defined at:
 21742 ;;		line 206 in file "mcc_generated_files/memory.c"
 21743 ;; Parameters:    Size  Location     Type
 21744 ;;		None
 21745 ;; Auto vars:     Size  Location     Type
 21746 ;;		None
 21747 ;; Return value:  Size  Location     Type
 21748 ;;                  1    wreg      void 
 21749 ;; Registers used:
 21750 ;;		None
 21751 ;; Tracked objects:
 21752 ;;		On entry : 0/0
 21753 ;;		On exit  : 0/0
 21754 ;;		Unchanged: 0/0
 21755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21756 ;;      Params:         0       0       0       0       0       0       0
 21757 ;;      Locals:         0       0       0       0       0       0       0
 21758 ;;      Temps:          0       0       0       0       0       0       0
 21759 ;;      Totals:         0       0       0       0       0       0       0
 21760 ;;Total ram usage:        0 bytes
 21761 ;; Hardware stack levels used:    1
 21762 ;; This function calls:
 21763 ;;		Nothing
 21764 ;; This function is called by:
 21765 ;;		_INTERRUPT_InterruptManager
 21766 ;; This function uses a non-reentrant model
 21767 ;;
 21768                           
 21769                           	psect	text102
 21770  004672                     __ptext102:
 21771                           	opt stack 0
 21772  004672                     _MEMORY_ISR:
 21773                           	opt stack 21
 21774                           
 21775                           ;memory.c: 209: PIR2bits.EEIF = 0;
 21776                           
 21777                           ;incstack = 0
 21778  004672  98A1               	bcf	4001,4,c	;volatile
 21779  004674  0012               	return		;funcret
 21780  004676                     __end_of_MEMORY_ISR:
 21781                           	opt stack 0
 21782                           tosu	equ	0xFFF
 21783                           tosh	equ	0xFFE
 21784                           tosl	equ	0xFFD
 21785                           pclatu	equ	0xFFB
 21786                           pclath	equ	0xFFA
 21787                           tblptru	equ	0xFF8
 21788                           tblptrh	equ	0xFF7
 21789                           tblptrl	equ	0xFF6
 21790                           tablat	equ	0xFF5
 21791                           prodh	equ	0xFF4
 21792                           prodl	equ	0xFF3
 21793                           intcon	equ	0xFF2
 21794                           intcon2	equ	0xFF1
 21795                           indf0	equ	0xFEF
 21796                           postinc0	equ	0xFEE
 21797                           fsr0h	equ	0xFEA
 21798                           fsr0l	equ	0xFE9
 21799                           wreg	equ	0xFE8
 21800                           indf1	equ	0xFE7
 21801                           postdec1	equ	0xFE5
 21802                           fsr1h	equ	0xFE2
 21803                           fsr1l	equ	0xFE1
 21804                           indf2	equ	0xFDF
 21805                           postinc2	equ	0xFDE
 21806                           postdec2	equ	0xFDD
 21807                           fsr2h	equ	0xFDA
 21808                           fsr2l	equ	0xFD9
 21809                           status	equ	0xFD8
 21810                           
 21811 ;; *************** function _EUSART1_Transmit_ISR *****************
 21812 ;; Defined at:
 21813 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 21814 ;; Parameters:    Size  Location     Type
 21815 ;;		None
 21816 ;; Auto vars:     Size  Location     Type
 21817 ;;		None
 21818 ;; Return value:  Size  Location     Type
 21819 ;;                  1    wreg      void 
 21820 ;; Registers used:
 21821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21822 ;; Tracked objects:
 21823 ;;		On entry : 0/0
 21824 ;;		On exit  : 0/0
 21825 ;;		Unchanged: 0/0
 21826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21827 ;;      Params:         0       0       0       0       0       0       0
 21828 ;;      Locals:         0       0       0       0       0       0       0
 21829 ;;      Temps:          0       0       0       0       0       0       0
 21830 ;;      Totals:         0       0       0       0       0       0       0
 21831 ;;Total ram usage:        0 bytes
 21832 ;; Hardware stack levels used:    1
 21833 ;; This function calls:
 21834 ;;		Nothing
 21835 ;; This function is called by:
 21836 ;;		_INTERRUPT_InterruptManager
 21837 ;; This function uses a non-reentrant model
 21838 ;;
 21839                           
 21840                           	psect	text103
 21841  0042E8                     __ptext103:
 21842                           	opt stack 0
 21843  0042E8                     _EUSART1_Transmit_ISR:
 21844                           	opt stack 21
 21845                           
 21846                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 21847                           
 21848                           ;incstack = 0
 21849  0042E8  0E46               	movlw	70
 21850  0042EA  0101               	movlb	1	; () banked
 21851  0042EC  61EA               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 21852  0042EE  D012               	goto	i2l839
 21853                           
 21854                           ; BSR set to: 1
 21855                           ;eusart1.c: 186: {
 21856                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 21857  0042F0  5043               	movf	_eusart1TxTail,w,c	;volatile
 21858  0042F2  0D01               	mullw	1
 21859  0042F4  0E00               	movlw	low _eusart1TxBuffer
 21860  0042F6  24F3               	addwf	prodl,w,c
 21861  0042F8  6ED9               	movwf	fsr2l,c
 21862  0042FA  0E02               	movlw	high _eusart1TxBuffer
 21863  0042FC  20F4               	addwfc	prodh,w,c
 21864  0042FE  6EDA               	movwf	fsr2h,c
 21865  004300  50DF               	movf	indf2,w,c
 21866  004302  6EAD               	movwf	4013,c	;volatile
 21867                           
 21868                           ; BSR set to: 1
 21869  004304  2A43               	incf	_eusart1TxTail,f,c	;volatile
 21870                           
 21871                           ; BSR set to: 1
 21872                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 21873  004306  0E45               	movlw	69
 21874  004308  6443               	cpfsgt	_eusart1TxTail,c	;volatile
 21875  00430A  D002               	goto	i2l840
 21876                           
 21877                           ; BSR set to: 1
 21878                           ;eusart1.c: 189: {
 21879                           ;eusart1.c: 190: eusart1TxTail = 0;
 21880  00430C  0E00               	movlw	0
 21881  00430E  6E43               	movwf	_eusart1TxTail,c	;volatile
 21882  004310                     i2l840:
 21883                           
 21884                           ; BSR set to: 1
 21885                           ;eusart1.c: 191: }
 21886                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 21887                           
 21888                           ; BSR set to: 1
 21889  004310  2BEA               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 21890                           
 21891                           ;eusart1.c: 193: }
 21892  004312  0012               	return	
 21893  004314                     i2l839:
 21894                           
 21895                           ; BSR set to: 1
 21896                           ;eusart1.c: 194: else
 21897                           ;eusart1.c: 195: {
 21898                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 21899  004314  989D               	bcf	3997,4,c	;volatile
 21900                           
 21901                           ; BSR set to: 1
 21902                           ;eusart1.c: 197: eusart1TxTail = 0;
 21903  004316  0E00               	movlw	0
 21904  004318  6E43               	movwf	_eusart1TxTail,c	;volatile
 21905                           
 21906                           ;eusart1.c: 198: eusart1TxHead = 0;
 21907  00431A  0E00               	movlw	0
 21908  00431C  6E44               	movwf	_eusart1TxHead,c	;volatile
 21909  00431E  0012               	return	
 21910  004320                     __end_of_EUSART1_Transmit_ISR:
 21911                           	opt stack 0
 21912                           tosu	equ	0xFFF
 21913                           tosh	equ	0xFFE
 21914                           tosl	equ	0xFFD
 21915                           pclatu	equ	0xFFB
 21916                           pclath	equ	0xFFA
 21917                           tblptru	equ	0xFF8
 21918                           tblptrh	equ	0xFF7
 21919                           tblptrl	equ	0xFF6
 21920                           tablat	equ	0xFF5
 21921                           prodh	equ	0xFF4
 21922                           prodl	equ	0xFF3
 21923                           intcon	equ	0xFF2
 21924                           intcon2	equ	0xFF1
 21925                           indf0	equ	0xFEF
 21926                           postinc0	equ	0xFEE
 21927                           fsr0h	equ	0xFEA
 21928                           fsr0l	equ	0xFE9
 21929                           wreg	equ	0xFE8
 21930                           indf1	equ	0xFE7
 21931                           postdec1	equ	0xFE5
 21932                           fsr1h	equ	0xFE2
 21933                           fsr1l	equ	0xFE1
 21934                           indf2	equ	0xFDF
 21935                           postinc2	equ	0xFDE
 21936                           postdec2	equ	0xFDD
 21937                           fsr2h	equ	0xFDA
 21938                           fsr2l	equ	0xFD9
 21939                           status	equ	0xFD8
 21940                           
 21941 ;; *************** function _EUSART1_Receive_ISR *****************
 21942 ;; Defined at:
 21943 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 21944 ;; Parameters:    Size  Location     Type
 21945 ;;		None
 21946 ;; Auto vars:     Size  Location     Type
 21947 ;;		None
 21948 ;; Return value:  Size  Location     Type
 21949 ;;                  1    wreg      void 
 21950 ;; Registers used:
 21951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21952 ;; Tracked objects:
 21953 ;;		On entry : 0/0
 21954 ;;		On exit  : 0/0
 21955 ;;		Unchanged: 0/0
 21956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21957 ;;      Params:         0       0       0       0       0       0       0
 21958 ;;      Locals:         0       0       0       0       0       0       0
 21959 ;;      Temps:          0       0       0       0       0       0       0
 21960 ;;      Totals:         0       0       0       0       0       0       0
 21961 ;;Total ram usage:        0 bytes
 21962 ;; Hardware stack levels used:    1
 21963 ;; This function calls:
 21964 ;;		Nothing
 21965 ;; This function is called by:
 21966 ;;		_INTERRUPT_InterruptManager
 21967 ;; This function uses a non-reentrant model
 21968 ;;
 21969                           
 21970                           	psect	text104
 21971  0043C0                     __ptext104:
 21972                           	opt stack 0
 21973  0043C0                     _EUSART1_Receive_ISR:
 21974                           	opt stack 21
 21975                           
 21976                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 21977                           
 21978                           ; BSR set to: 1
 21979                           ;incstack = 0
 21980  0043C0  A2AB               	btfss	4011,1,c	;volatile
 21981  0043C2  D002               	goto	i2l845
 21982                           
 21983                           ;eusart1.c: 206: {
 21984                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 21985  0043C4  98AB               	bcf	4011,4,c	;volatile
 21986                           
 21987                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 21988  0043C6  88AB               	bsf	4011,4,c	;volatile
 21989  0043C8                     i2l845:
 21990                           
 21991                           ;eusart1.c: 210: }
 21992                           ;eusart1.c: 212: TXREG1 = RCREG1;
 21993  0043C8  CFAE FFAD          	movff	4014,4013	;volatile
 21994                           
 21995                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 21996  0043CC  5042               	movf	_eusart1RxHead,w,c	;volatile
 21997  0043CE  0D01               	mullw	1
 21998  0043D0  0E46               	movlw	low _eusart1RxBuffer
 21999  0043D2  24F3               	addwf	prodl,w,c
 22000  0043D4  6ED9               	movwf	fsr2l,c
 22001  0043D6  0E02               	movlw	high _eusart1RxBuffer
 22002  0043D8  20F4               	addwfc	prodh,w,c
 22003  0043DA  6EDA               	movwf	fsr2h,c
 22004  0043DC  CFAE FFDF          	movff	4014,indf2	;volatile
 22005  0043E0  2A42               	incf	_eusart1RxHead,f,c	;volatile
 22006                           
 22007                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 22008  0043E2  0E27               	movlw	39
 22009  0043E4  6442               	cpfsgt	_eusart1RxHead,c	;volatile
 22010  0043E6  D002               	goto	i2l846
 22011                           
 22012                           ;eusart1.c: 217: {
 22013                           ;eusart1.c: 218: eusart1RxHead = 0;
 22014  0043E8  0E00               	movlw	0
 22015  0043EA  6E42               	movwf	_eusart1RxHead,c	;volatile
 22016  0043EC                     i2l846:
 22017                           
 22018                           ;eusart1.c: 219: }
 22019                           ;eusart1.c: 220: eusart1RxCount++;
 22020  0043EC  0101               	movlb	1	; () banked
 22021  0043EE  2BD5               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 22022                           
 22023                           ; BSR set to: 1
 22024  0043F0  0012               	return		;funcret
 22025  0043F2                     __end_of_EUSART1_Receive_ISR:
 22026                           	opt stack 0
 22027                           tosu	equ	0xFFF
 22028                           tosh	equ	0xFFE
 22029                           tosl	equ	0xFFD
 22030                           pclatu	equ	0xFFB
 22031                           pclath	equ	0xFFA
 22032                           tblptru	equ	0xFF8
 22033                           tblptrh	equ	0xFF7
 22034                           tblptrl	equ	0xFF6
 22035                           tablat	equ	0xFF5
 22036                           prodh	equ	0xFF4
 22037                           prodl	equ	0xFF3
 22038                           intcon	equ	0xFF2
 22039                           intcon2	equ	0xFF1
 22040                           indf0	equ	0xFEF
 22041                           postinc0	equ	0xFEE
 22042                           fsr0h	equ	0xFEA
 22043                           fsr0l	equ	0xFE9
 22044                           wreg	equ	0xFE8
 22045                           indf1	equ	0xFE7
 22046                           postdec1	equ	0xFE5
 22047                           fsr1h	equ	0xFE2
 22048                           fsr1l	equ	0xFE1
 22049                           indf2	equ	0xFDF
 22050                           postinc2	equ	0xFDE
 22051                           postdec2	equ	0xFDD
 22052                           fsr2h	equ	0xFDA
 22053                           fsr2l	equ	0xFD9
 22054                           status	equ	0xFD8
 22055                           tosu	equ	0xFFF
 22056                           tosh	equ	0xFFE
 22057                           tosl	equ	0xFFD
 22058                           pclatu	equ	0xFFB
 22059                           pclath	equ	0xFFA
 22060                           tblptru	equ	0xFF8
 22061                           tblptrh	equ	0xFF7
 22062                           tblptrl	equ	0xFF6
 22063                           tablat	equ	0xFF5
 22064                           prodh	equ	0xFF4
 22065                           prodl	equ	0xFF3
 22066                           intcon	equ	0xFF2
 22067                           intcon2	equ	0xFF1
 22068                           indf0	equ	0xFEF
 22069                           postinc0	equ	0xFEE
 22070                           fsr0h	equ	0xFEA
 22071                           fsr0l	equ	0xFE9
 22072                           wreg	equ	0xFE8
 22073                           indf1	equ	0xFE7
 22074                           postdec1	equ	0xFE5
 22075                           fsr1h	equ	0xFE2
 22076                           fsr1l	equ	0xFE1
 22077                           indf2	equ	0xFDF
 22078                           postinc2	equ	0xFDE
 22079                           postdec2	equ	0xFDD
 22080                           fsr2h	equ	0xFDA
 22081                           fsr2l	equ	0xFD9
 22082                           status	equ	0xFD8
 22083                           
 22084                           	psect	text105
 22085  000000                     __ptext105:
 22086                           	opt stack 0
 22087                           tosu	equ	0xFFF
 22088                           tosh	equ	0xFFE
 22089                           tosl	equ	0xFFD
 22090                           pclatu	equ	0xFFB
 22091                           pclath	equ	0xFFA
 22092                           tblptru	equ	0xFF8
 22093                           tblptrh	equ	0xFF7
 22094                           tblptrl	equ	0xFF6
 22095                           tablat	equ	0xFF5
 22096                           prodh	equ	0xFF4
 22097                           prodl	equ	0xFF3
 22098                           intcon	equ	0xFF2
 22099                           intcon2	equ	0xFF1
 22100                           indf0	equ	0xFEF
 22101                           postinc0	equ	0xFEE
 22102                           fsr0h	equ	0xFEA
 22103                           fsr0l	equ	0xFE9
 22104                           wreg	equ	0xFE8
 22105                           indf1	equ	0xFE7
 22106                           postdec1	equ	0xFE5
 22107                           fsr1h	equ	0xFE2
 22108                           fsr1l	equ	0xFE1
 22109                           indf2	equ	0xFDF
 22110                           postinc2	equ	0xFDE
 22111                           postdec2	equ	0xFDD
 22112                           fsr2h	equ	0xFDA
 22113                           fsr2l	equ	0xFD9
 22114                           status	equ	0xFD8
 22115                           
 22116                           	psect	rparam
 22117  0000                     tosu	equ	0xFFF
 22118                           tosh	equ	0xFFE
 22119                           tosl	equ	0xFFD
 22120                           pclatu	equ	0xFFB
 22121                           pclath	equ	0xFFA
 22122                           tblptru	equ	0xFF8
 22123                           tblptrh	equ	0xFF7
 22124                           tblptrl	equ	0xFF6
 22125                           tablat	equ	0xFF5
 22126                           prodh	equ	0xFF4
 22127                           prodl	equ	0xFF3
 22128                           intcon	equ	0xFF2
 22129                           intcon2	equ	0xFF1
 22130                           indf0	equ	0xFEF
 22131                           postinc0	equ	0xFEE
 22132                           fsr0h	equ	0xFEA
 22133                           fsr0l	equ	0xFE9
 22134                           wreg	equ	0xFE8
 22135                           indf1	equ	0xFE7
 22136                           postdec1	equ	0xFE5
 22137                           fsr1h	equ	0xFE2
 22138                           fsr1l	equ	0xFE1
 22139                           indf2	equ	0xFDF
 22140                           postinc2	equ	0xFDE
 22141                           postdec2	equ	0xFDD
 22142                           fsr2h	equ	0xFDA
 22143                           fsr2l	equ	0xFD9
 22144                           status	equ	0xFD8
 22145                           
 22146                           	psect	temp
 22147  000048                     btemp:
 22148                           	opt stack 0
 22149  000048                     	ds	1
 22150  0000                     int$flags	set	btemp
 22151  0000                     wtemp6	set	btemp+1
 22152                           tosu	equ	0xFFF
 22153                           tosh	equ	0xFFE
 22154                           tosl	equ	0xFFD
 22155                           pclatu	equ	0xFFB
 22156                           pclath	equ	0xFFA
 22157                           tblptru	equ	0xFF8
 22158                           tblptrh	equ	0xFF7
 22159                           tblptrl	equ	0xFF6
 22160                           tablat	equ	0xFF5
 22161                           prodh	equ	0xFF4
 22162                           prodl	equ	0xFF3
 22163                           intcon	equ	0xFF2
 22164                           intcon2	equ	0xFF1
 22165                           indf0	equ	0xFEF
 22166                           postinc0	equ	0xFEE
 22167                           fsr0h	equ	0xFEA
 22168                           fsr0l	equ	0xFE9
 22169                           wreg	equ	0xFE8
 22170                           indf1	equ	0xFE7
 22171                           postdec1	equ	0xFE5
 22172                           fsr1h	equ	0xFE2
 22173                           fsr1l	equ	0xFE1
 22174                           indf2	equ	0xFDF
 22175                           postinc2	equ	0xFDE
 22176                           postdec2	equ	0xFDD
 22177                           fsr2h	equ	0xFDA
 22178                           fsr2l	equ	0xFD9
 22179                           status	equ	0xFD8


Data Sizes:
    Strings     1931
    Constant    298
    Data        12
    BSS         288
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    142     142
    BANK1           256    135     235
    BANK2           256      0     182
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartByte$4007	PTR FTN()void  size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 32
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), UpdateSynthFreq@regSynthArray(COMRAM[16]), rxMsgData(BANK2[20]), 
		 -> rxMsgQueue(BANK2[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 32
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), UpdateSynthFreq@regSynthArray(COMRAM[16]), rxMsgData(BANK2[20]), 
		 -> rxMsgQueue(BANK2[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 101
		 -> STR_72(CODE[22]), STR_71(CODE[13]), STR_70(CODE[23]), STR_69(CODE[10]), 
		 -> STR_68(CODE[24]), STR_67(CODE[36]), STR_66(CODE[24]), STR_65(CODE[36]), 
		 -> STR_64(CODE[22]), STR_63(CODE[22]), STR_62(CODE[13]), STR_61(CODE[23]), 
		 -> STR_60(CODE[10]), STR_59(CODE[24]), STR_58(CODE[36]), STR_57(CODE[24]), 
		 -> STR_56(CODE[59]), STR_55(CODE[22]), STR_54(CODE[18]), STR_53(CODE[15]), 
		 -> STR_52(CODE[22]), STR_51(CODE[13]), STR_49(CODE[49]), STR_48(CODE[34]), 
		 -> STR_47(CODE[39]), STR_46(CODE[73]), STR_45(CODE[37]), STR_44(CODE[38]), 
		 -> STR_43(CODE[85]), STR_42(CODE[52]), STR_41(CODE[46]), STR_40(CODE[29]), 
		 -> STR_39(CODE[101]), STR_38(CODE[86]), STR_37(CODE[61]), STR_36(CODE[62]), 
		 -> STR_35(CODE[45]), STR_34(CODE[74]), STR_33(CODE[25]), STR_32(CODE[79]), 
		 -> STR_31(CODE[75]), STR_30(CODE[46]), STR_29(CODE[61]), STR_28(CODE[66]), 
		 -> STR_27(CODE[23]), STR_26(CODE[31]), STR_24(CODE[20]), STR_22(CODE[20]), 
		 -> STR_20(CODE[18]), STR_19(CODE[20]), STR_18(CODE[31]), STR_10(CODE[11]), 
		 -> STR_8(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_73(CODE[7]), STR_50(CODE[6]), STR_25(CODE[9]), STR_23(CODE[12]), 
		 -> STR_21(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> PrintTxStatus@dest(BANK1[80]), PrintRxStatus@dest(BANK1[80]), PrintSystemStatus@dest(BANK1[80]), PrintHelpScreen@dest(BANK1[50]), 
		 -> SendUartSystemInitMessage@dest(BANK1[50]), readUartByte@dest(BANK1[50]), SampleSingleChannel@dest(BANK1[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    SetUartMode@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    SetUartRefrashRate@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    set_system_type@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    sp__memset	PTR void  size(2) Largest target is 32
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), UpdateSynthFreq@regSynthArray(COMRAM[16]), rxMsgData(BANK2[20]), 
		 -> rxMsgQueue(BANK2[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), UpdateSynthFreq@regSynthArray(COMRAM[16]), rxMsgData(BANK2[20]), 
		 -> rxMsgQueue(BANK2[20]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GroupCommon@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 80
		 -> PrintTxStatus@dest(BANK1[80]), PrintRxStatus@dest(BANK1[80]), PrintSystemStatus@dest(BANK1[80]), PrintHelpScreen@dest(BANK1[50]), 
		 -> SendUartSystemInitMessage@dest(BANK1[50]), STR_17(CODE[10]), STR_16(CODE[10]), STR_15(CODE[10]), 
		 -> STR_14(CODE[10]), STR_13(CODE[10]), STR_12(CODE[10]), STR_11(CODE[10]), 
		 -> readUartByte@dest(BANK1[50]), STR_9(CODE[9]), SampleSingleChannel@dest(BANK1[50]), STR_7(CODE[10]), 
		 -> STR_6(CODE[34]), STR_5(CODE[32]), STR_4(CODE[10]), STR_3(CODE[29]), 
		 -> STR_2(CODE[33]), STR_1(CODE[10]), 

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 

    S48$SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_50(CODE[6]), 

    systemStatus.SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_50(CODE[6]), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _CollectTxStatusParams->___lltoft
    _CollectRxStatusParams->___lltoft
    _AdcSingleSample->_UART_Write_Text
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _SaveSystemStatus->_StoreIntInEeprom
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    _UART_Write_Text->_EUSART1_Write
    ___lwtoft->___ftpack
    _DacInit->_SWSPI_send_word
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_ZeroArray
    _ZeroArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    _eval_poly->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftmul->___wmul
    ___ftadd->___ftmul
    ___ftdiv->___lwtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartByte
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _PrintTxStatus->_sprintf
    _PrintRxStatus->_sprintf
    _set_system_type->_GetIntFromUartData
    _SetUartRefrashRate->_GetIntFromUartData
    _SetUartMode->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _PrintSystemStatus->_sprintf
    _PrintHelpScreen->_sprintf
    _SetMcuRunTime->___llmod
    _SendUartSystemInitMessage->_sprintf
    _SampleSingleChannel->_sprintf
    _sprintf->___llmod
    _scale->___ftmul
    _fround->___ftmul
    ___llmod->_pow
    _SampleAllChannels->_pow
    _ReadSystemStatusFromEprom->_ReadIntFromEeprom
    _InitSystemApplicationManagers->_DacInit
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_scale
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartByte
    _readUartByte->_GroupCommon
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _GroupTx->_PrintTxStatus
    _GroupRx->_PrintRxStatus
    _GroupCommon->_PrintSystemStatus

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1538908
                        _BlinkOkLeds
      _InitSystemApplicationManagers
          _ReadSystemStatusFromEprom
                  _SampleAllChannels
                _SampleSingleChannel
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                        56    56      0  801674
                                            139 BANK0      3     3      0
                                             82 BANK1     53    53      0
                       _EUSART1_Read
                        _GroupCommon *
                            _GroupRx *
                            _GroupTx *
                _InitRxMessageParams
                    _UART_Write_Text
                            _sprintf
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    1369
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupTx                                             10     8      2  241294
                                            131 BANK0      8     8      0
                                             80 BANK1      2     0      2
                    _AdcSingleSample
              _CollectTxStatusParams
                 _GetIntFromUartData
                      _PrintTxStatus
                           ___awtoft
                            ___fttol
                            ___llmod
                                _pow
 ---------------------------------------------------------------------------------
 (3) _PrintTxStatus                                       80    80      0   93131
                                              0 BANK1     80    80      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _CollectTxStatusParams                                0     0      0    7269
                           ___lltoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _GroupRx                                             10     8      2  241294
                                            131 BANK0      8     8      0
                                             80 BANK1      2     0      2
                    _AdcSingleSample
              _CollectRxStatusParams
                 _GetIntFromUartData
                      _PrintRxStatus
                           ___awtoft
                            ___fttol
                            ___llmod
                                _pow
 ---------------------------------------------------------------------------------
 (3) _PrintRxStatus                                       80    80      0   93131
                                              0 BANK1     80    80      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _CollectRxStatusParams                                0     0      0    7269
                           ___lltoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _AdcSingleSample                                     10     5      5    6799
                                             30 COMRAM    10     5      5
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (2) _GroupCommon                                          3     1      2  223958
                                            131 BANK0      1     1      0
                                             80 BANK1      2     0      2
                    _PrintHelpScreen
                  _PrintSystemStatus
                   _SaveSystemStatus
                        _SetUartMode
                 _SetUartRefrashRate
                    _set_system_type
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _set_system_type                                      6     4      2   12294
                                             23 BANK0      6     4      2
                 _GetIntFromUartData
                    _UART_Write_Text
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _SetUartRefrashRate                                   6     4      2   11333
                                             23 BANK0      6     4      2
                 _GetIntFromUartData
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (3) _SetUartMode                                          6     4      2   11302
                                             23 BANK0      6     4      2
                 _GetIntFromUartData
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (3) _GetIntFromUartData                                  17    13      4    4801
                                              6 BANK0     17    13      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (4) _strtol                                              16    10      6    2453
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (6) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _SaveSystemStatus                                     0     0      0    1974
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _PrintSystemStatus                                   80    80      0   92821
                                              0 BANK1     80    80      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _PrintHelpScreen                                     50    50      0   93999
                                              0 BANK1     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0    1672
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           50    50      0   92945
                                              0 BANK1     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SampleSingleChannel                                 59    59      0  233898
                                            131 BANK0      2     2      0
                                              0 BANK1     57    57      0
                  _ADC_GetConversion
                    _UART_Write_Text
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    36      8   86189
                                             92 BANK0     39    31      8
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   17570
                                             18 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              10     7      3   17291
                                             18 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2053
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             29 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     634
                                             23 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     853
                                             23 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8    1672
                                             83 BANK0      9     1      8
                           ___awtoft (ARG)
                            ___fttol (ARG)
                            ___lldiv (ARG)
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     961
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      6     4      2    6312
                                             24 COMRAM     6     4      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SampleAllChannels                                    8     8      0  141455
                                             83 BANK0      8     8      0
                  _ADC_GetConversion
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    3644
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ReadSystemStatusFromEprom                            2     2      0  129058
                                            106 BANK0      2     2      0
                  _ReadIntFromEeprom
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  138018
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  138018
                                            106 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    1974
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     263
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     143
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _SWSPI_send_word                                      9     4      5    6831
                                             39 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5     414
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SWSPI_Synth_send_bits                               42    38      4    3523
                                             35 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    1369
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _Make32bitsArray                                     10     4      6     265
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (4) _SWSPI_DAC_send_bits                                  3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Data_Pin                                       2     1      1     610
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Clk_Pin                                        2     1      1     762
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ReadIntFromEeprom                                   23    19      4  128956
                                             83 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 17    11      6  121243
                                             66 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   38822
                                             50 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                  9     6      3   62824
                                             57 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                7     2      5     539
                                             50 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                                8     5      3   14374
                                             48 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4    2351
                                             25 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1458
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    3727
                                             46 COMRAM     2     2      0
                                             40 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   19135
                                             46 COMRAM     2     2      0
                                             40 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3582
                                             37 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    9061
                                             43 COMRAM     3     3      0
                                              6 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6294
                                             40 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5698
                                             28 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     425
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    4713
                                             34 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3836
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3625
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _EepromRead                                           1     1      0      44
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (4) _DATAEE_ReadByte                                      1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BlinkOkLeds
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
     _TMR0_StartTimer
   _ReadSystemStatusFromEprom
     _ReadIntFromEeprom
       _EepromRead
         _DATAEE_ReadByte
       ___awtoft
         ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lmul
         _EepromRead (ARG)
           _DATAEE_ReadByte
       _pow
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
   _SampleAllChannels
     _ADC_GetConversion
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
   _SampleSingleChannel
     _ADC_GetConversion
     _UART_Write_Text
       _EUSART1_Write
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SendUartSystemInitMessage
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SetMcuRunTime
     ___llmod
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       _pow (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _GroupCommon *
       _PrintHelpScreen
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _PrintSystemStatus
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SaveSystemStatus
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
       _SetUartMode
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
       _SetUartRefrashRate
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
       _set_system_type
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
         ___lldiv
       _testLeds
     _GroupRx *
       _AdcSingleSample
         _UART_Write_Text
           _EUSART1_Write
       _CollectRxStatusParams
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
       _GetIntFromUartData
         _ZeroArray
           _memset
         _strtol
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _isalpha
             _isupper
           _isdigit
           _isspace
           _toupper
       _PrintRxStatus
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___awtoft
         ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _pow
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
     _GroupTx *
       _AdcSingleSample
         _UART_Write_Text
           _EUSART1_Write
       _CollectTxStatusParams
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
       _GetIntFromUartData
         _ZeroArray
           _memset
         _strtol
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _isalpha
             _isupper
           _isdigit
           _isspace
           _toupper
       _PrintTxStatus
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___awtoft
         ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _pow
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _UART_Write_Text *
       _EUSART1_Write
     _sprintf *
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _toupper *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      B6       8       71.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100     87      EB       6       91.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     8E      8E       4       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     276       9        0.0%
DATA                 0      0     276      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 29 14:31:30 2018

              __end_of_keepAliveSignalLed 45B2                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 01EA                             ___altoft@sign 0030  
                                      l70 3C46                                        l72 3C8C  
                            ___awdiv@sign 0023                       __end_of_BlinkOkLeds 3DAA  
                         _SWSPI_send_word 33E6                       ___wmul@multiplicand 0028  
                         _timer0ReloadVal 0046            __size_of_CollectTxStatusParams 0066  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
           __end_of_CollectTxStatusParams 3B68                              ___ftadd@exp1 0087  
                            ___ftadd@exp2 0086                               __CFG_LVP$ON 000000  
           SampleSingleChannel@_adcResult 0135                              ___ftadd@sign 0085  
                             ?_MEMORY_ISR 0001                                       l150 2910  
                                     l310 119C                                       l303 1108  
                                     l304 1144                                       l401 2E66  
                                     l153 2926                                       l321 1252  
                                     l402 2E7C                                       l162 2978  
                                     l146 28F6                                       l314 11C6  
                                     l147 28EE                                       l315 11DC  
                                     l164 298E                                       l156 293C  
                                     l333 39F6                                       l317 11E2  
                                     l309 1158                                       l334 39C2  
                                     l166 29A4                                       l158 2952  
                                     l318 1222                                       l175 1C14  
                                     l159 296C                                       l319 11EC  
                                     l600 3F3E                                       l184 20A4  
                                     l176 1B6C                                       l168 29BA  
                                     l280 0FFC                                       l601 3F48  
                                     l177 1B8A                                       l169 29D4  
                                     l186 2170                                       l178 1BA8  
                                     l290 1094                                       l611 3FA8  
                                     l187 2192                                       l179 1BC6  
                                     l275 128C                                       l291 104C  
                                     l612 3F6C                                       l188 21B4  
                                     l276 0FDA                                       l621 3F80  
                                     l613 3F76                                       l189 21D6  
                                     l293 1056                                       l285 101E  
                                     l630 3F9E                                       l622 3F8A  
                                     l294 1060                                       l278 0FE6  
                                     l295 106A                                       l296 10AA  
                                     l561 347C                                       l297 11B0  
                                     l289 103E                                       l570 3EE6  
                                     l298 10B8                                       l299 10F4  
                                     l820 414C                                       l629 3F94  
                                     l557 3422                                       l582 3F52  
                                     l670 4240                                       l822 4172  
                                     l583 3F16                                       l567 3EF6  
                                     l575 315C                                       l671 424A  
                                     l592 3F2A                                       l584 3F20  
                                     l568 3EC2                                       l680 425E  
                                     l593 3F34                                       l569 3EDC  
                                     l577 318A                                       l833 4214  
                                     l578 3196                                       l690 4570  
                                     l834 4238                                       l691 4568  
                                     l835 4236                                       l669 4268  
                                     l941 437A                                       l695 456C  
                                     l679 4254                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                         ??_Make32bitsArray 001E  
                                     _exp 151E                                       _log 230C  
                                     _pow 1C26                              _txStatistics 0187  
                            ___awmod@sign 001D                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                       ??_set_system_type 0030            ?_InitSystemApplicationManagers 0001  
                            ___ftdiv@cntr 0060                              ___ftdiv@sign 0065  
                                    l1201 28A2                                      l2004 1A02  
                                    l2005 19F8                                      l1213 252C  
                                    l1205 27B2                                      l2014 2BFA  
                                    l1310 3EB8                                      l1046 440A  
                                    l2022 2206                                      l1222 2446  
                                    l1230 38D8                                      l2007 1A26  
                                    l2103 377C                                      l1231 38DE  
                                    l2016 2C22                                      l2008 1A42  
                                    l2040 369A                                      l2104 3770  
                                    l2024 2232                                      l1208 27BC  
                                    l1232 38EC                                      l2017 2C60  
                                    l2009 1A72                                      l2113 3ABA  
                                    l2025 226C                                      l1217 243C  
                                    l1233 38F2                                      l2018 2C86  
                                    l2050 2B6E                                      l1322 2780  
                                    l2114 3AAE                                      l2034 22F4  
                                    l2026 2294                                      l1234 3900  
                                    l1323 26A6                                      l2107 37B0  
                                    l2035 22E8                                      l1227 3914  
                                    l1235 390E                                      l2124 3E18  
                                    l2052 2B86                                      l1308 3E7A  
                                    l1340 3DB8                                      l1316 42A8  
                                    l2108 37BE                                      l2028 22D0  
                                    l1228 38D2                                      l2125 3E0C  
                                    l2053 2B96                                      l1341 3DE6  
                                    l1317 427E                                      l2117 3AE2  
                                    l2029 22C0                                      l2046 2B04  
                                    l2070 2A78                                      l2118 3AF0  
                                    l2063 4194                                      l2039 366A  
                                    l1335 3DEA                                      l2048 2B2C  
                                    l2400 16DC                                      l1336 3DAC  
                                    l1328 3544                                      l2057 44FC  
                                    l2049 2B5E                                      l1361 3C0E  
                                    l1345 3508                                      l1338 3DB0  
                                    l1354 3CE0                                      l1346 34F0  
                                    l2075 2AAC                                      l2067 2A10  
                                    l1339 3DB4                                      l1363 3C20  
                                    l2076 2AA0                                      l2420 309E  
                                    l2180 443C                                      l1700 05B6  
                                    l1348 34FA                                      l2069 2A88  
                                    l2405 2EC0                                      l2181 442C  
                                    l1701 05BA                                      l2078 2AC8  
                                    l2414 35D2                                      l2406 2EB2  
                                    l2422 30D0                                      l1702 05DC  
                                    l2423 30C4                                      l1703 0710  
                                    l2431 446E                                      l2351 180C  
                                    l2335 1754                                      l2408 2EDA  
                                    l2192 1C70                                      l1640 140C  
                                    l1704 062C                                      l2352 1878  
                                    l2409 2F56                                      l2193 1C60  
                                    l1713 07D6                                      l2441 4494  
                                    l2345 17D0                                      l2337 176C  
                                    l1730 3FCE                                      l2418 3054  
                                    l1650 0A92                                      l1714 086C  
                                    l1706 0732                                      l2354 189C  
                                    l2346 17E0                                      l1554 3B7E  
                                    l1731 3FE2                                      l1803 3882  
                                    l2195 1C88                                      l1643 14DC  
                                    l1651 0BE8                                      l1715 07E2  
                                    l1707 071C                                      l2355 18D8  
                                    l2339 17C0                                      l1555 3B96  
                                    l1804 3876                                      l2460 2350  
                                    l2196 1D12                                      l1900 3A4A  
                                    l2436 4520                                      l2348 17FA  
                                    l2197 1CF0                                      l1653 0C9C  
                                    l1709 0776                                      l1557 3BA8  
                                    l2198 1D98                                      l1902 3A60  
                                    l1646 0AB8                                      l1662 0110  
                                    l2446 453E                                      l1903 3A58  
                                    l1647 09DE                                      l1663 01A4  
                                    l2359 45EE                                      l1559 3BBA  
                                    l1920 259A                                      l1672 073C  
                                    l1680 041A                                      l1921 25DC  
                                    l1673 01F6                                      l1657 00EC  
                                    l1914 42C4                                      l2466 3022  
                                    l2394 1538                                      l2458 232C  
                                    l1930 266E                                      l1922 260C  
                                    l1906 3A78                                      l1666 0114  
                                    l1658 0106                                      l2467 2FA4  
                                    l1931 2662                                      l1907 3A82  
                                    l1683 03C2                                      l1675 0288  
                                    l1659 0170                                      l2396 1572  
                                    l1924 264A                                      l1908 3A90  
                                    l1676 02EE                                      l1668 015C  
                                    l2397 15AC                                      l1925 263A  
                                    l1669 013E                                      l1950 3360  
                                    l2398 15DC                                      l1918 257C  
                                    l1694 0572                                      l1678 0314  
                                    l1951 3356                                      l2399 1706  
                                    l1695 04DC                                      l1679 0354  
                                    l1953 3394                                      l1697 0592  
                                    l1689 0480                                      l1954 337E  
                                    l1890 3704                                      l1698 057C  
                                    l1956 33BC                                      l1957 33B2  
                                    l1981 193E                                      l1893 372C  
                                    l1990 19CE                                      l1894 3736  
                                    l1886 36DE                                      l1895 3744  
                                    l1887 36EE                                      l1985 1968  
                                    l1889 370C                                      l1995 19C4  
                                    l1899 3A3E                                      l1996 19BA  
                                    ?_exp 0099                                      l7093 3D56  
                                    ?_log 0092                                      l9211 2DA4  
                                    l8171 4202                                      l6573 3C36  
                                    l9223 2E66                                      l7609 36C6  
                                    l5789 3E6A                                      l9333 209C  
                                    l8711 0484                                      l9159 3508  
                                    l8553 16DC                                      l9187 3CE0  
                                    l8815 07E2                                      l8833 3534  
                                    l8739 057C                                      l8691 039C  
                                    l8683 0354                                      l8851 357C  
                                    ?_pow 00A2                                      l8863 3154  
                                    l7897 442C                                      l8795 077A  
                                    l8991 343C                                      STR_1 7FD0  
                                    STR_2 7DD1                                      STR_3 7E4E  
                                    STR_4 7FD0                                      l8995 344A  
                                    STR_5 7DF2                                      STR_6 7DAF  
                                    STR_7 7FD0                                      STR_8 7FF9  
                                    STR_9 7FE3                        EepromWrite@address 001C  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u4065 4388  
                                    u4066 438A                                      u4510 3DDE  
                                    u7000 1930                                      u4515 3DD4  
                                    u7100 19D6                                      u7030 195A  
                                    u7130 1A0A                                      u6170 45A4  
                                    u7060 1998                                      u7320 2AB2  
                                    u8210 2674                                      u9010 29CC  
                                    u7171 2AEC                                      u8140 22FA  
                                    u6188 45A6                                      u7261 29F4  
                                    u8061 21EA                                      u7350 35FA  
                                    u8230 3780                                      u7431 2BE0  
                                    u7191 2B14                                      u7280 2A2E  
                                    u9040 33F6                                      u8400 3A22  
                                    u7520 3710                                      u9120 3CDA  
                                    u8081 2216                                      u7451 2C0A  
                                    u8340 15B6                                      u8260 3ABE  
                                    u7285 2A26                                      u6910 33C6  
                                    u7358 35FC                                      u8350 15B8  
                                    u9070 3476                                      u8407 3A18  
                                    u7730 2ECC                                      u7650 4490  
                                    u8460 1CD6                                      u7580 3A64  
                                    u8700 05B0                                      u8620 039C  
                                    u8540 022E                                      u6870 3348  
                                    u8390 39EE                                      u7670 4460  
                                    u7910 17A6                                      u8800 0894  
                                    u9520 1190                                      u6961 18FC  
                                    u8545 0224                                      u7770 3074  
                                    u9450 1138                                      u6971 1910  
                                    u8660 04BC                                      u8580 0326  
                                    u7860 175C                                      u8397 39E4  
                                    u8590 0366                                      u8830 357C  
                                    u9390 10E8                                      u7778 3078  
                                    u8770 07B2                                      u8690 05A0  
                                    u7890 1796                                      u9627 3C4E  
                                    u8860 31A8                                      u9637 3C5E  
                                    u8790 087C                                      u8950 2964  
                                    u9558 1266                                      u9647 3C6E  
                                    u9559 1284                                      u9657 3C7E  
                                    u8890 2902                                      u9667 1BFC  
                                    u9677 31AA                                      u9687 3D7C  
                                    u9697 3D96                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 4200  
                 ??_InitAdcApplicationMgr 0018                                      _main 3B68  
                            ___ftpack@arg 0018                             ?_EUSART1_Read 0001  
                            ___ftpack@exp 001B                           _TMR0_StartTimer 466A  
                         __end_of_DacInit 2E82                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      indf0 000FEF  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0099                                      log@x 0092  
               SampleSingleChannel@adcRes 0137                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A2                                      pow@y 00A5  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 4636                              _sprintf$4002 00CA  
                           _adcSampleMode 0045               __end_of_SampleSingleChannel 1C26  
                         GroupCommon@data 0150                              ___ftmul@cntr 0070  
                            ___param_bank 000000                              ___ftmul@sign 0071  
                 __end_of_UART_Write_Text 3A2A                           __end_of_GroupRx 28C8  
                         __end_of_GroupTx 255E                              ___fttol@exp1 0087  
               __size_of_DATAEE_WriteByte 0036                                     ??_exp 0031  
                                   ??_log 0031                              ___fttol@lval 0083  
                                   ??_pow 0031                   __end_of_TMR0_Initialize 43C0  
                  _ReadIntFromEeprom$3997 00BE                    _ReadIntFromEeprom$3998 00C1  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 4628  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                         __end_of___awdiv 374E                                     _EEADR 000FA9  
                         __end_of___ftadd 1A98                                     STR_10 7FBB  
                                   STR_11 7FD0                                     STR_12 7FD0  
                                   STR_20 7F62                                     STR_13 7FD0  
                                   STR_21 7FF3                                     STR_14 7FD0  
                                   STR_22 7F4E                                     STR_30 7C78  
                                   STR_15 7FD0                                     STR_23 7FAF  
                                   STR_31 79D2                                     STR_16 7FD0  
                                   STR_24 7F3A                                     STR_40 7E31  
                                   STR_32 7983                                     STR_17 7FD0  
                                   STR_25 7FDA                                     STR_33 7E6B  
                                   STR_41 7C4A           __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                                   STR_26 7E12                                     STR_50 7FF3  
                                   STR_18 7E12                                     STR_42 7BE5  
                                   STR_34 7A1D                                     STR_51 7FA2  
                                   STR_19 7F26                                     STR_27 7ECC  
                                   STR_35 7CA6                                     STR_43 792E  
                                   STR_60 7FC6                                     STR_52 7F10  
                                   STR_44 7CFA                                     STR_36 7AF2  
                                   STR_28 7AB0                           __end_of___awmod 3A9A  
                                   STR_53 7F86                                     STR_61 7EE3  
                                   STR_45 7D20                                     STR_37 7B6D  
                                   STR_29 7B30                                     STR_70 7EE3  
                                   STR_62 7F95                                     STR_54 7F74  
                                   STR_46 7A67                                     STR_38 78D8  
                                   STR_63 7EFA                                     STR_71 7F95  
                                   STR_55 7EFA                                     STR_47 7CD3  
                                   STR_39 7873                                     STR_72 7EFA  
                                   STR_64 7EFA                                     STR_48 7D8D  
                                   STR_56 7BAA                                     STR_73 7FEC  
                                   STR_57 7E84                                     STR_65 7D45  
                                   STR_49 7C19                                     STR_66 7E84  
                                   STR_58 7D69                                     STR_67 7D69  
                                   STR_59 7E9C                                     STR_68 7EB4  
                                   STR_69 7FC6                           __end_of___ftdiv 2CB8  
                         __end_of___ftneg 450A                           __end_of___lldiv 37D0  
                              _EepromRead 4656                           __end_of___ftmul 2BD0  
                                   _T0CON 000FD5                           ___awdiv@divisor 0020  
                         __end_of___llmod 3B02                           __end_of___ftsub 41BE  
                         __end_of___fttol 2ADA                            __CFG_DEBUG$OFF 000000  
             __size_of_SetUartRefrashRate 0060                           __end_of___lwmod 4200  
                   _CollectRxStatusParams 3CEE                       StoreIntInEeprom@idx 0029  
                                   i2l840 4310                                     i2l770 006A  
                                   i2l845 43C8                                     i2l773 007A  
                                   i2l846 43EC                                     i2l839 4314  
                                   i2l775 0086                                     i2l768 005E  
                                   i2l777 0090                           ___awdiv@counter 0022  
                     StoreIntInEeprom@val 0028                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
              ?_ReadSystemStatusFromEprom 0001                       _SWSPI_DAC_send_bits 3EBA  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                        ?_PrintHelpScreen 0001                             __CFG_WRT1$OFF 000000  
              __end_of_GetIntFromUartData 35AA                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 001E                 ?_TMR0_SetInterruptHandler 0018  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0028  
                    _EUSART1_Transmit_ISR 42E8                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                        __end_of_TMR0_ISR 3338                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                         _DATAEE_ReadByte 45F2                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 4672  
                                   _make8 3DAA                           __end_of_dpowers 77D9  
          __size_of_SWSPI_Synth_send_bits 00C2                                     _count 01C6  
                                   _floor 2E82                                     _ldexp 303A  
                       PrintRxStatus@dest 0100                                     _frexp 35AA  
                                   _errno 01C2             __end_of_SWSPI_Synth_send_bits 31CA  
                                   _scale 08A2                           __end_of_isalpha 4476  
                         __end_of_isdigit 4528                                     _group 01D3  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                           ??_GroupCommon 0031                           __end_of_isspace 449C  
                          ?_EUSART1_Write 0001                           __end_of_isupper 4546  
                                   pclath 000FFA                                     tablat 000FF5  
                                   pow@yi 00AF                            ??_EUSART1_Read 0018  
                                   status 000FD8                                     wtemp6 0049  
                         __end_of_sprintf 08A2                      ReadIntFromEeprom@idx 00C9  
                          __CFG_HFOFST$ON 000000                           __end_of_toupper 45F2  
          SwSpi_Set_Synth_Le_Pin@cPinMode 0018                       __size_of_MEMORY_ISR 0004  
                          __CFG_PBADEN$ON 000000                               exp@exponent 009F  
                    ?_SWSPI_DAC_send_bits 001A                               ldexp@newexp 0095  
                 __end_of_SWSPI_send_word 3480                               _BlinkOkLeds 3D4C  
                         __initialization 4014                               log@exponent 0095  
              __end_of_EUSART1_Initialize 4356                              __end_of_main 3BCC  
             ?_INTERRUPT_InterruptManager 0001                                    ??_main 0031  
                           ___fttol@sign1 0082                        _TimerKeepAliveFlag 01D9  
                           __activetblptr 000002                       set_system_type@data 0077  
              ?_SendUartSystemInitMessage 0001                      __size_of__tdiv_to_l_ 0132  
                           ??_SetUartMode 0030                     ?_EUSART1_Transmit_ISR 0001  
       __end_of_ReadSystemStatusFromEprom 3852                   __end_of_TMR0_StartTimer 466E  
                                  ?_make8 0018                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  ?_floor 0090                                    ?_ldexp 0092  
                                  ?_frexp 0018                          __end_of___altoft 38CC  
                        ___llmod@dividend 00B3                                    ?_scale 0072  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                 ??_DacInit 00CA  
                                  _EECON2 000FA7                             ?_readUartByte 0001  
                        ___awdiv@dividend 001E                          __end_of___awtoft 42E8  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 33E6  
                        __end_of___lltoft 3E62                                    i2l1001 32B4  
                                  i2l1002 32D6                                    i2l1003 32F8  
                                  i2l1004 331A                                    i2l2170 41EC  
                                  i2l2171 41F6                                    i2l2166 41D4  
                                  i2l2167 41CC                            __CFG_WDTEN$OFF 000000  
                    StoreIntInEeprom@data 0021                                    _TABLAT 000FF5  
                             _EepromWrite 4628                                    _RCREG1 000FAE  
                        __end_of___lwtoft 44E6                                    _RCSTA1 000FAB  
         __size_of_SwSpi_Set_Synth_Le_Pin 003C                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                    _SwSpi_Set_Dac_Sync_Pin 4564  
                 __size_of_SwSpi_Data_Pin 0056                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                     ??_SWSPI_DAC_send_bits 001B  
                     __end_of_GroupCommon 3944                                 ??_GroupRx 00E3  
                               ??_GroupTx 00E3                            __CFG_XINST$OFF 000000  
                             GroupRx@data 0150                          __end_of__powers_ 7800  
                             GroupTx@data 0150                         _PrintSystemStatus 31CA  
                                  _cState 01D4                                    ___ftge 363A  
                                  ___lmul 3FBE                 SWSPI_Synth_send_bits@data 0024  
                                  ___wmul 449C                                 ??___awdiv 0022  
                               ??___ftadd 0082                 SWSPI_Synth_send_bits@mask 0080  
                          __CFG_STVREN$ON 000000                                 ??___awmod 001C  
                        ?_UART_Write_Text 0019                                 ??___ftdiv 0029  
                               ??___ftneg 001B                                 ??___lldiv 0020  
                               ??___ftmul 002C                     __end_of_PLLInitialize 4678  
                               ??___llmod 0031                                 ??___ftsub 002F  
                               ??___fttol 007D                                 ??___lwmod 0005  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                        ?_PrintSystemStatus 0001  
                    AdcSingleSample@cType 0028                          ?_TMR0_Initialize 0001  
                                  _memset 4422                                    _fround 12C0  
                      __end_of_DAC_ADDRES 7833                                    clear_0 403A  
                                  clear_1 4046                                    clear_2 4052  
                        ___awdiv@quotient 0024                                    _retNum 01B6  
                         ___awmod@divisor 001A                                    _rxFreq 01BE  
                                  _txFreq 01BA                           ___awmod@counter 001C  
                  ?_CollectRxStatusParams 0001                   __end_of_DATAEE_ReadByte 4606  
                             ?_EepromRead 0001                                    _strtol 1714  
                                  floor@i 0093                     __end_of_SwSpi_Clk_Pin 3FBE  
                                  floor@x 0090                     ___ftmul@f3_as_product 006D  
                SWSPI_DAC_send_bits@count 001B                                 ??_isalpha 001B  
                               ??_isdigit 0018                         ?_SaveSystemStatus 0001  
                     ??_PrintSystemStatus 0031                          __end_of_testLeds 3C8E  
                           ?_SetMcuSystem 0001         __end_of_SendUartSystemInitMessage 2D9E  
                            __mediumconst 7748                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                        ??_SaveSystemStatus 002A  
                          ??_readUartByte 00EB                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0044  
                        ?_PIN_MANAGER_IOC 0001                                 ??_sprintf 00C4  
                   ReadIntFromEeprom@base 00BA                         PrintTxStatus@dest 0100  
                         _eusart1RxBuffer 0246                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                         _eusart1TxBuffer 0200                       __end_of_SetUartMode 3C2E  
                        __end_ofexp@coeff 7858                         _SYSTEM_Initialize 4580  
                        __end_oflog@coeff 7873                                __accesstop 0060  
                 __end_of__initialization 4058                                ___altoft@c 0088  
                           ZeroArray@size 0022                                ___ftadd@f1 007C  
                              ___ftadd@f2 007F                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 008F                             ___rparam_used 000001  
                              ___ftdiv@f1 0023                                ___ftdiv@f2 0026  
                              ___ftdiv@f3 0061                                ___ftneg@f1 0018  
               __end_of_PrintSystemStatus 3284                                ___awtoft@c 0020  
                              ___ftmul@f1 0066                                ___ftmul@f2 0069  
                        ?_SWSPI_send_word 0028                                ___ftsub@f1 0088  
                              ___ftsub@f2 008B                                ___fttol@f1 0079  
                         _Make32bitsArray 3E62                            __pcstackCOMRAM 0001  
                            _systemStatus 0031                              __pidataBANK1 4636  
                     ??_SYSTEM_Initialize 001C                     __end_of_PrintRxStatus 208E  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 3E06                          _DATAEE_WriteByte 4356  
                           __end_of_floor 2F64                             __end_of_ldexp 3108  
                           __end_of_frexp 363A                     __end_of_PrintTxStatus 1F1A  
                           __end_of_scale 0CC2                           _set_system_type 3480  
                  _SwSpi_Set_Synth_Le_Pin 423C                                ___lwtoft@c 0020  
         __end_of_DAC_DEFAULT_INIT_VALUES 782F                      __end_of_EUSART1_Read 417C  
                            ??_MEMORY_ISR 0001                 __size_of_StoreIntInEeprom 0038  
                  __size_of_SetMcuRunTime 0046                    ??_EUSART1_Transmit_ISR 0001  
                              __div_to_l_ 255E                            ??_SetMcuSystem 001C  
                   TMR0_ISR@CountCallBack 003B             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                         _lastAdcFfwrRSSI 01CC                        _keepAliveSignalLed 459A  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 43F2  
                __size_of_AdcSingleSample 011A                                   ??_make8 001D  
                         __div_to_l_@exp1 0023                                   ??_floor 0031  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0097  
                         __div_to_l_@cntr 0022                                   ??_frexp 001D  
                                 ??_scale 002F                 __end_of_SYSTEM_Initialize 459A  
                         __div_to_l_@quot 001E                             _eusart1RxHead 0042  
                     PrintHelpScreen@dest 0100                             _eusart1TxHead 0044  
                           _eusart1RxTail 0041                                __pbssBANK1 0187  
                              __pbssBANK2 0200                               _GroupCommon 38CC  
                           _eusart1TxTail 0043                       ?_keepAliveSignalLed 0001  
                      __size_of_eval_poly 00D6                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 7833                                _channelNum 003D  
                              __pnvCOMRAM 0046            __size_of_InitAdcApplicationMgr 0006  
                           __div_to_l_@f1 0018                             __div_to_l_@f2 001B  
           __end_of_InitAdcApplicationMgr 4666                       __size_of_EepromRead 000A  
                      __end_of_MEMORY_ISR 4676           ??_InitSystemApplicationManagers 0031  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
        __end_of_TMR0_SetInterruptHandler 4656                                   ?___lmul 001A  
                                 ?___wmul 0026                                ??_TMR0_ISR 0006  
                      __CFG_CCP3MX$PORTB5 000000                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 4564                                 ?___altoft 0088  
                                 ?_memset 0018                         _ReadIntFromEeprom 2686  
                                 ?_fround 0072                            ___lmul@product 0022  
                               ?___awtoft 0020                                 ?___ftpack 0018  
                               ?___lltoft 0020                   __size_of_ADC_Initialize 0016  
                               ?___lwtoft 0020                        ?_ReadIntFromEeprom 00B3  
                                 ?_strtol 0026                          ?_DATAEE_ReadByte 0001  
                   _CollectTxStatusParams 3B02               SampleAllChannels@_adcResult 00B6  
             ??_ReadSystemStatusFromEprom 0031                               _SetUartMode 3BCC  
                                 _OSCCON2 000FD2                                   _TBLPTRH 000FF7  
                                 _TBLPTRL 000FF6                                   _TBLPTRU 000FF8  
                         readUartByte@idx 0184                   SampleSingleChannel@dest 0100  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
                     ??_ReadIntFromEeprom 00B7                                   _DacInit 2D9E  
                   GetIntFromUartData@idx 0075                            _SwSpi_Data_Pin 3F12  
                    DATAEE_WriteByte@bAdd 0019                   __end_of_Make32bitsArray 3EBA  
                           _SetMcuRunTime 40AE                        _GetIntFromUartData 3516  
                         __CFG_PWRTEN$OFF 000000                   __end_of_set_system_type 3516  
              __size_of_PrintSystemStatus 00BA                                   _GroupRx 27AC  
                                 _GroupTx 2436                         __end_of__npowers_ 7827  
                                 __Hparam 0000                                _scale$4001 0075  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                               ?_testLeds 0001                 __end_of_ReadIntFromEeprom 27AC  
                     ?_GetIntFromUartData 0066                           __size_of___ftge 0090  
                                 ___awdiv 36CA                           __size_of___lmul 0056  
                                 ___ftadd 18EA                                   ___awmod 3A2A  
                                 ___ftdiv 2BD0                      __end_of_readUartByte 12C0  
                                 ___ftneg 44E6                                   ___lldiv 374E  
                         __size_of___wmul 0026                                   ___ftmul 2ADA  
                                 ___llmod 3A9A                                   ___ftsub 417C  
                                 ___fttol 29E2                  __size_of_ClearMcuRunTime 0014  
                                 ___lwmod 41BE                                ??___altoft 008C  
              SWSPI_Synth_send_bits@count 0084                     _mcuRunTimeIn5SecTicks 01B2  
              __end_of_SetUartRefrashRate 3CEE                                   _crcCalc 01D0  
                                 _channel 01D6                                   __pcinit 4014  
                              ??___awtoft 0023                                ??___ftpack 001D  
                       __end_of_eval_poly 303A                           __size_of_memset 002C  
                         __size_of_fround 025E                                   __ramtop 0600  
            __size_of_SampleSingleChannel 018E                                ??___lltoft 0024  
                                 __ptext0 3B68                                   __ptext1 0FD2  
                                 __ptext2 40F4                                   __ptext3 38CC  
                                 __ptext4 27AC                                   __ptext5 2436  
                                 __ptext6 1DA6                                   __ptext7 3B02  
                                 __ptext8 1F1A                                   __ptext9 3CEE  
                              ??___lwtoft 0023                                 _T0CONbits 000FD5  
                             ?__div_to_l_ 0018                           __size_of_strtol 01D6  
                                 _dpowers 77B1                     AdcSingleSample@chType 001F  
                   _OSCILLATOR_Initialize 461A                                   _isalpha 444E  
                            __size_of_exp 01F6                              __size_of_log 012A  
                                 _isdigit 450A                              __size_of_pow 0180  
             ??_SendUartSystemInitMessage 0031                          ___awmod@dividend 0018  
                      _EUSART1_Initialize 4320                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 4476                 StoreIntInEeprom@numOfByes 0026  
                                 _isupper 4528                     AdcSingleSample@retNum 0024  
                                 _request 01D2                      ??_GetIntFromUartData 006A  
              __size_of_SYSTEM_Initialize 001A                   ?_SwSpi_Set_Dac_Sync_Pin 0001  
                                 _sprintf 00E0                    __end_of_SwSpi_Data_Pin 3F68  
                 StoreIntInEeprom@address 0025                                   _toupper 45DE  
                    end_of_initialization 4058                                   exp@sign 00A1  
                     ?_EUSART1_Initialize 0001                              ?_EepromWrite 001B  
                   _SWSPI_Synth_send_bits 3108                __end_of_TEST_PLL_REGISTERS 777D  
                __size_of_PrintHelpScreen 0310                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 7748  
                       ??_AdcSingleSample 0024                 _ReadSystemStatusFromEprom 37D0  
                         ___lldiv@divisor 001C                                _numSamples 01C4  
                    __end_of_SetMcuSystem 464C                                   pow@sign 00AE  
                         ___lldiv@counter 0024                         readUartByte@chRec 0186  
                              ??_testLeds 0018                      SWSPI_send_word@datac 002D  
                              _rxMsgQueue 02A2                                   postdec1 000FE5  
                                 postdec2 000FDD                __end_of_PLL_INIT_REGISTERS 77B1  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0044                       _InitRxMessageParams 40F4  
                 ??_CollectRxStatusParams 0029                               testLeds@idx 0019  
                          __tdiv_to_l_@f1 0018                            __tdiv_to_l_@f2 001B  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 45DE  
  __size_of_InitSystemApplicationManagers 0016             _InitSystemApplicationManagers 45C8  
                           ??__tdiv_to_l_ 001E                                   strtol@a 0061  
                                 strtol@c 0065                                   strtol@s 0026  
                _TMR0_SetInterruptHandler 464C                                 _PORTBbits 000F81  
                               _PORTDbits 000F83                              ??_EepromRead 0019  
                        _StoreIntInEeprom 4278                    ?_CollectTxStatusParams 0001  
                          ZeroArray@array 0020            __end_of_SwSpi_Set_Dac_Sync_Pin 4580  
                            strtol@endptr 0028                      ?_InitRxMessageParams 0001  
                     EUSART1_Write@txData 0018                           ?_SwSpi_Data_Pin 0018  
                __end_of_DATAEE_WriteByte 438C               __end_of_SWSPI_DAC_send_bits 3F12  
           SendUartSystemInitMessage@dest 0100                          ?_Make32bitsArray 0018  
                             ___ftdiv@exp 0064                              _EUSART1_Read 4138  
               __size_of_SaveSystemStatus 0074                 _SendUartSystemInitMessage 2CB8  
                 SampleAllChannels@adcRes 00B8                       __size_of__div_to_l_ 0128  
                        ?_set_system_type 0077                        __end_of_EepromRead 4660  
                             ___ftmul@exp 006C                           _synthCalcParams 026E  
                 ?_SwSpi_Set_Synth_Le_Pin 0018                              _needToSample 01D7  
              __size_of_ReadIntFromEeprom 0126                              _lastAdcVgMon 01C8  
            __end_of_INTERRUPT_Initialize 466A                            __end_of___ftge 36CA  
                          __end_of___lmul 4014                        GroupCommon@request 00E3  
                          __end_of___wmul 44C2                         __size_of_TMR0_ISR 00B4  
                          _ADC_Initialize 45B2                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 444E                            __end_of_fround 151E  
               AdcSingleSample@numSamples 0020                         _SampleAllChannels 208E  
                              floor@expon 0096                  __size_of_UART_Write_Text 0072  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 18EA  
                      ?_SampleAllChannels 0001                       start_initialization 4014  
                              eval_poly@d 008B                                eval_poly@n 008D  
                              eval_poly@x 0088          ReadSystemStatusFromEprom@sysData 00CA  
                        BlinkOkLeds@state 001B                  __size_of_TMR0_Initialize 0034  
                              ldexp@value 0092           __size_of_PIN_MANAGER_Initialize 0048  
                     __end_of__tdiv_to_l_ 230C                     ??_InitRxMessageParams 0024  
                             __end_of_exp 1714                               __end_of_log 2436  
                             __end_of_pow 1DA6                    ?_SWSPI_Synth_send_bits 0024  
                         ??_SetMcuRunTime 0031                              ?_GroupCommon 0150  
                   __end_of_EUSART1_Write 423C                       ??_SampleAllChannels 0031  
                  __size_of_PLLInitialize 0002                                frexp@value 0018  
                         ___llmod@divisor 00B7                  SetUartRefrashRate@retNum 0079  
                         ___llmod@counter 00BB                       DATAEE_ReadByte@bAdd 0018  
                __size_of_PIN_MANAGER_IOC 0004                     __size_of_readUartByte 02EE  
                  __size_of_SwSpi_Clk_Pin 0056            __end_of_SwSpi_Set_Synth_Le_Pin 4278  
                       ??_PrintHelpScreen 0031                                  ??___ftge 001E  
                                ??___lmul 0022                                  ??___wmul 002A  
                    __size_of_BlinkOkLeds 005E                    __end_of_ADC_Initialize 45C8  
                             __pdataBANK1 01DC                   SWSPI_DAC_send_bits@data 001A  
                          GroupRx@request 00EA                              _GroupRx$3993 00E4  
                            _GroupRx$3994 00E7                 __end_of_SampleAllChannels 21DA  
                                ??_memset 001E                                  ??_fround 002F  
                            _GroupTx$3995 00E4                              _GroupTx$3996 00E7  
                           sprintf@tmpval 00DB                  __size_of_SWSPI_send_word 009A  
                                ??_strtol 002C                            _eusart1RxCount 01D5  
                       __size_of___altoft 007A                                fround@prec 007B  
                               _ZeroArray 4546                           DacInit@dacInput 00CC  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                          GroupTx@request 00EA                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                              ?_SetUartMode 0077  
                       __size_of___lwtoft 0024             __size_of_EUSART1_Transmit_ISR 0038  
                           __pcstackBANK0 0060                             __pcstackBANK1 0100  
                            _isalpha$3680 001C                     PrintSystemStatus@dest 0100  
                            _isdigit$3683 0019                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                              _readUartByte 0FD2  
                  __size_of_PrintRxStatus 0174                     set_system_type@retNum 0079  
                  __size_of_PrintTxStatus 0174                     __size_of_SetMcuSystem 000A  
                     _SampleSingleChannel 1A98              __size_of_EUSART1_Receive_ISR 0032  
           SWSPI_Synth_send_bits@bitArray 0060                               sprintf@flag 00D1  
                             sprintf@fval 00DF                               sprintf@prec 00D3  
                 _DAC_DEFAULT_INIT_VALUES 7827                      __size_of_EepromWrite 000E  
                   _TMR0_InterruptHandler 01E8                                 __pnvBANK1 01E8  
                __size_of_TMR0_StartTimer 0004                __end_of_SYSTEM_INFO_ADDRES 783A  
                                ?_GroupRx 0150                                  ?_GroupTx 0150  
                  _PIN_MANAGER_Initialize 4066                     _InitAdcApplicationMgr 4660  
                               __pintcode 0008                             __pmediumconst 7748  
                                ?___awdiv 001E                                 __ptext100 41BE  
                               __ptext101 466E                                 __ptext102 4672  
                               __ptext103 42E8                                 __ptext104 43C0  
                               __ptext105 0000                                  ?___ftadd 007C  
                                ?___awmod 0018                                  ?___ftdiv 0023  
                                ?___ftneg 0018                                  ?___lldiv 0018  
                                ?___ftmul 0066                                  ?___llmod 00B3  
                                ?___ftsub 0088                                 __npowers_ 7800  
                                ?___fttol 0079                                  ?___lwmod 0001  
                         ?_ADC_Initialize 0001                         __size_of_testLeds 0060  
                           _PLLInitialize 4676               __size_of_keepAliveSignalLed 0018  
      __size_of_ReadSystemStatusFromEprom 0082                      ?_SampleSingleChannel 0001  
            ??_INTERRUPT_InterruptManager 0006                          __CFG_PRICLKEN$ON 000000  
                             __tdiv_to_l_ 21DA                              ??__div_to_l_ 001E  
                              ?_ZeroArray 0020                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 3F68                                  ?_isalpha 0001  
                                ?_isdigit 0001                                 _eval_poly 2F64  
                         _TimerOneSecFlag 01DB                                  ?_isspace 0001  
                         _AdcSingleSample 28C8                              _SetMcuSystem 4642  
                                ?_isupper 0001                            __size_of_make8 005C  
                      _SetUartRefrashRate 3C8E                                  ?_sprintf 00BC  
                          __size_of_floor 00E2                            __size_of_ldexp 00CE  
                          __size_of_frexp 0090                            __size_of_scale 0420  
                __size_of_DATAEE_ReadByte 0014                                  ?_toupper 0001  
                       ??_UART_Write_Text 001B                      _INTERRUPT_Initialize 4666  
                       ??_TMR0_Initialize 001A                            ___wmul@product 002A  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                __end_of_StoreIntInEeprom 42B0                    _SampleAllChannels$3984 00B3  
                     ?_SetUartRefrashRate 0077                          _SaveSystemStatus 3944  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                    Make32bitsArray@array 0018                                  _PIR1bits 000F9E  
                      __end_of__div_to_l_ 2686                                  _PIR2bits 000FA1  
                               _rxMsgData 028E                                  i2u613_40 41D8  
                        readUartByte@dest 0152                       SWSPI_send_word@data 0028  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                         SetUartMode@data 0077                                 make8@data 0018  
                                _TMR0_ISR 3284                        _TEST_PLL_REGISTERS 7749  
                          ?_PLLInitialize 0001                             _PrintRxStatus 1F1A  
                       ??_PIN_MANAGER_IOC 0001                   ??_CollectTxStatusParams 0029  
                   ??_SampleSingleChannel 00E3                __size_of_SampleAllChannels 014C  
          __size_of_CollectRxStatusParams 005E        __size_of_SendUartSystemInitMessage 00E6  
                           _PrintTxStatus 1DA6             __end_of_CollectRxStatusParams 3D4C  
                  GetIntFromUartData@data 0066                   SWSPI_send_word@dataSize 002C  
                              _ADCON0bits 000FC2                         ___wmul@multiplier 0026  
                    ??_SetUartRefrashRate 0030                            ?_SwSpi_Clk_Pin 0018  
                      __end_of_channelArr 7837                          ??_SwSpi_Data_Pin 0019  
                              ?_eval_poly 0088                        _PLL_INIT_REGISTERS 777D  
                             _lastAdcRREV 01CA                     DATAEE_WriteByte@bData 0018  
                            _isspace$3686 0019                               _lastAdcTemp 003F  
                       ??_SWSPI_send_word 002D                                DacInit@idx 00CE  
                              _DAC_ADDRES 782F               __size_of_GetIntFromUartData 0094  
                       ___lmul@multiplier 001A                               _INTCON2bits 000FF1  
                               copy_data0 4028                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 00E4                         ?_DATAEE_WriteByte 0018  
                _SampleSingleChannel$3983 0132                     EUSART1_Read@readValue 0019  
                    __size_of_GroupCommon 0078                        ??_DATAEE_WriteByte 0019  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                                __Hrparam 0000                    ?_InitAdcApplicationMgr 0001  
                        __size_of_GroupRx 011C                          __size_of_GroupTx 0128  
                                __Lrparam 0000                         _ADC_GetConversion 43F2  
                      __CFG_BOREN$SBORDIS 000000                           _ClearMcuRunTime 4606  
                       __CFG_P2BMX$PORTD2 000000                            ?_PrintRxStatus 0001  
                 ??_OSCILLATOR_Initialize 0018                        ?_ADC_GetConversion 0018  
                       ??_TMR0_StartTimer 0018                            ?_PrintTxStatus 0001  
                        __size_of___awdiv 0084                          __size_of___ftadd 01AE  
                        __size_of___awmod 0070                          __size_of___ftdiv 00E8  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                                ___altoft 3852                          __size_of___ftmul 00F6  
                        __size_of___llmod 0068                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0036  
                 __end_of_AdcSingleSample 29E2                          __size_of___lwmod 0042  
                                ___awtoft 42B0                                  ___ftpack 3338  
                             _fround$4000 0075                               _fround$3999 0078  
                                ___lltoft 3E06                                  ___lwtoft 44C2  
                             ??_ZeroArray 0024                       ??_ADC_GetConversion 001A  
                                _exp$4005 009C                                sprintf@exp 00D9  
                            _isupper$3689 0019                                sprintf@val 00D5  
                                _dataSize 01D1                     SwSpi_Clk_Pin@cPinMode 0018  
                        __size_of_isalpha 0028                                  _crcGiven 01CF  
                        __size_of_isdigit 001E                   ??_SWSPI_Synth_send_bits 0028  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                                __ptext10 28C8                                  __ptext11 3C2E  
                                __ptext20 444E                                  __ptext12 3480  
                                __ptext21 4528                                  __ptext13 3C8E  
                                __ptext30 464C                                  __ptext22 3944  
                                __ptext14 3BCC                                  __ptext31 4066  
                                __ptext23 31CA                                  __ptext15 3516  
                                __ptext40 08A2                                  __ptext32 461A  
                                __ptext24 0CC2                                  __ptext16 1714  
                                __ptext41 12C0                                  __ptext33 4666  
                                __ptext25 4138                                  __ptext17 45DE  
                                __ptext50 208E                                  __ptext42 3A2A  
                                __ptext34 4320                                  __ptext26 459A  
                                __ptext18 4476                                  __ptext51 44C2  
                                __ptext43 36CA                                  __ptext35 45B2  
                                __ptext27 4642                                  __ptext19 450A  
                                __ptext60 4628                                  __ptext52 43F2  
                                __ptext44 21DA                                  __ptext36 40AE  
                                __ptext28 4580                                  __ptext61 4356  
                                __ptext53 37D0                                  __ptext45 255E  
                                __ptext37 2CB8                                  __ptext29 438C  
                                __ptext70 3EBA                                  __ptext62 33E6  
                                __ptext54 45C8                                  __ptext46 3A9A  
                                __ptext38 1A98                                  __ptext71 3F12  
                                __ptext63 3DAA                                  __ptext55 466A  
                                __ptext47 374E                                  __ptext39 00E0  
                                __ptext80 29E2                                  __ptext72 3F68  
                                __ptext64 423C                                  __ptext56 4676  
                                __ptext48 39B8                                  __ptext81 363A  
                                __ptext73 2686                                  __ptext65 4564  
                                __ptext57 4660                                  __ptext49 4200  
                                __ptext90 42B0                                  __ptext82 3852  
                                __ptext74 1C26                                  __ptext66 3108  
                                __ptext58 2D9E                                  __ptext91 3E06  
                                __ptext83 2F64                                  __ptext75 230C  
                                __ptext67 4546                                  __ptext59 4278  
                                __ptext92 3338                                  __ptext84 449C  
                                __ptext76 151E                                  __ptext68 4422  
                                __ptext93 3FBE                                  __ptext85 2ADA  
                                __ptext77 303A                                  __ptext69 3E62  
                                __ptext94 4656                                  __ptext86 417C  
                                __ptext78 2E82                                  __ptext95 45F2  
                                __ptext87 18EA                                  __ptext79 35AA  
                                __ptext96 4606                                  __ptext88 44E6  
                                __ptext97 3D4C                                  __ptext89 2BD0  
                                __ptext99 3284                          __size_of_isupper 001E  
                                __powers_ 77D9                      __size_of_SetUartMode 0062  
            SWSPI_Synth_send_bits@phrType 0085                                  _pow$4003 00A8  
                                _pow$4004 00AB                       GetIntFromUartData@c 0074  
                         _PrintHelpScreen 0CC2                          __size_of_sprintf 07C2  
             DATAEE_WriteByte@GIEBitValue 001A                          __size_of_toupper 0014  
                     UART_Write_Text@text 0019                             __size_of_main 0064  
                                _msgCount 01CE              _TMR0_DefaultInterruptHandler 000000  
                       ??_DATAEE_ReadByte 0018                 __end_of_ADC_GetConversion 4422  
                      SampleAllChannels@i 00BA              __size_of_SWSPI_DAC_send_bits 0058  
                     Make32bitsArray@data 001A                        SWSPI_send_word@idx 002E  
                             _groupsArray 01DC                           ??_PLLInitialize 0018  
                                _testLeds 3C2E                                  int$flags 0048  
                __size_of_Make32bitsArray 0058                                strtol@base 002A  
                              strtol@sign 0060        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                           EepromWrite@data 001B  
                         ??_SwSpi_Clk_Pin 0019                  __size_of_set_system_type 0096  
                     _EUSART1_Receive_ISR 43C0               __end_of_InitRxMessageParams 4138  
                                exp@coeff 783A                                _MEMORY_ISR 4672  
                                log@coeff 7858                    SWSPI_send_word@phrType 0030  
                              _INTCONbits 000FF2                               ??_eval_poly 002F  
                  SetUartRefrashRate@data 0077                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                                  scale@scl 0078  
                                intlevel2 0000                                 sprintf@ap 00CF  
                               sprintf@cp 00CD                          __tdiv_to_l_@exp1 0026  
                        __tdiv_to_l_@cntr 0025                                 sprintf@sp 00BC  
                        __tdiv_to_l_@quot 0021                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 40F4                          ___lwmod@dividend 0001  
                                isspace@c 001A                          ___lldiv@dividend 0018  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 461A  
                              _RCSTA1bits 000FAB                                  isupper@c 001A  
                ReadIntFromEeprom@address 00C4              __end_of_EUSART1_Transmit_ISR 4320  
                           ??_BlinkOkLeds 0018                          ??_ADC_Initialize 0018  
                         ??_PrintRxStatus 0031                        Make32bitsArray@idx 0020  
                       _TimerSamplingFlag 01DA                           ??_PrintTxStatus 0031  
                    SwSpi_Clk_Pin@phrType 0019                     SwSpi_Data_Pin@phrType 0019  
                        ?_AdcSingleSample 001F                    __size_of_EUSART1_Write 003C  
                            ?__tdiv_to_l_ 0018                  ??_SwSpi_Set_Dac_Sync_Pin 0018  
                      _SYSTEM_INFO_ADDRES 7837                           _UART_Write_Text 39B8  
                                sprintf@c 00E2                                  sprintf@f 00BE  
                       EepromRead@address 0019                  __end_of_SaveSystemStatus 39B8  
                       SetUartMode@retNum 0079                              _rxStatistics 019D  
                        ___lldiv@quotient 0020                           ___lwmod@divisor 0003  
                         _TMR0_Initialize 438C                   __end_of_PrintHelpScreen 0FD2  
                         ___lwmod@counter 0005                                  toupper@c 0018  
              ReadIntFromEeprom@numOfByes 00B3                         __CFG_T3CMX$PORTC0 000000  
                 ReadIntFromEeprom@retVal 00C5                             ??_EepromWrite 001C  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 40AE  
                        UART_Write_Text@i 001D              GetIntFromUartData@dataRegArr 006C  
                       __CFG_FOSC$INTIO67 000000                           _PIN_MANAGER_IOC 466E  
                         _TimertenSecFlag 01D8                         ?_StoreIntInEeprom 0021  
              __size_of_ADC_GetConversion 0030                        ??_StoreIntInEeprom 0028  
