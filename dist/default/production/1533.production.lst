

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 26 09:44:37 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   106                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   107  0000                     
   108                           ; Version 1.45
   109                           ; Generated 16/11/2017 GMT
   110                           ; 
   111                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution.
   125                           ; 
   126                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   127                           ;        software without specific prior written permission.
   128                           ; 
   129                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   130                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   131                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   132                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   133                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   134                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   135                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   136                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   137                           ; 
   138                           ; 
   139                           ; Code-generator required, PIC18F45K22 Definitions
   140                           ; 
   141                           ; SFR Addresses
   142  0000                     
   143 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   144  0000                     
   145                           	psect	idataCOMRAM
   146  002AB0                     __pidataCOMRAM:
   147                           	opt stack 0
   148                           
   149                           ;initializer for _writeAddress
   150  002AB0  4000               	dw	16384
   151  002AB2  0000               	dw	0
   152                           
   153                           	psect	idataBANK0
   154  002A78                     __pidataBANK0:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _groupsArray
   158  002A78  44                 	db	low _GroupRx
   159  002A79  26                 	db	high _GroupRx
   160  002A7A  22                 	db	low _GroupTx
   161  002A7B  24                 	db	high _GroupTx
   162  002A7C  10                 	db	low _GroupCommon
   163  002A7D  29                 	db	high _GroupCommon
   164  002A7E  00                 	db	0
   165  002A7F  00                 	db	0
   166  002A80  00                 	db	0
   167  002A81  00                 	db	0
   168  002A82  00                 	db	0
   169  002A83  00                 	db	0
   170                           
   171                           ;initializer for _readAddress
   172  002A84  4000               	dw	16384
   173  002A86  0000               	dw	0
   174                           
   175                           	psect	mediumconst
   176  007A44                     __pmediumconst:
   177                           	opt stack 0
   178  007A44  00                 	db	0
   179  007A45                     _TEST_PLL_REGISTERS:
   180                           	opt stack 0
   181  007A45  041C               	dw	1052
   182  007A47  0001               	dw	1
   183  007A49  300B               	dw	12299
   184  007A4B  0061               	dw	97
   185  007A4D  26BA               	dw	9914
   186  007A4F  00C0               	dw	192
   187  007A51  FCC9               	dw	64713
   188  007A53  1A19               	dw	6681
   189  007A55  0428               	dw	1064
   190  007A57  102D               	dw	4141
   191  007A59  00E7               	dw	231
   192  007A5B  1200               	dw	4608
   193  007A5D  6076               	dw	24694
   194  007A5F  3505               	dw	13573
   195  007A61  0025               	dw	37
   196  007A63  0080               	dw	128
   197  007A65  8B84               	dw	35716
   198  007A67  3200               	dw	12800
   199  007A69  0003               	dw	3
   200  007A6B  0000               	dw	0
   201  007A6D  0032               	dw	50
   202  007A6F  0008               	dw	8
   203  007A71  AAA1               	dw	43681
   204  007A73  01AA               	dw	426
   205  007A75  0EDA               	dw	3802
   206  007A77  0003               	dw	3
   207  007A79                     __end_of_TEST_PLL_REGISTERS:
   208                           	opt stack 0
   209  007A79                     _PLL_INIT_REGISTERS:
   210                           	opt stack 0
   211  007A79  041C               	dw	1052
   212  007A7B  0001               	dw	1
   213  007A7D  300B               	dw	12299
   214  007A7F  0061               	dw	97
   215  007A81  323A               	dw	12858
   216  007A83  00C0               	dw	192
   217  007A85  BCC9               	dw	48329
   218  007A87  2221               	dw	8737
   219  007A89  0428               	dw	1064
   220  007A8B  102D               	dw	4141
   221  007A8D  00E7               	dw	231
   222  007A8F  1200               	dw	4608
   223  007A91  2076               	dw	8310
   224  007A93  3501               	dw	13569
   225  007A95  0025               	dw	37
   226  007A97  0080               	dw	128
   227  007A99  9B84               	dw	39812
   228  007A9B  3400               	dw	13312
   229  007A9D  0003               	dw	3
   230  007A9F  0000               	dw	0
   231  007AA1  0012               	dw	18
   232  007AA3  0000               	dw	0
   233  007AA5  0001               	dw	1
   234  007AA7  0600               	dw	1536
   235  007AA9  0340               	dw	832
   236  007AAB  0020               	dw	32
   237  007AAD                     __end_of_PLL_INIT_REGISTERS:
   238                           	opt stack 0
   239  007AAD                     _dpowers:
   240                           	opt stack 0
   241  007AAD  0001               	dw	1
   242  007AAF  000A               	dw	10
   243  007AB1  0064               	dw	100
   244  007AB3  03E8               	dw	1000
   245  007AB5  2710               	dw	10000
   246  007AB7                     __end_of_dpowers:
   247                           	opt stack 0
   248  007AB7                     _channelArr:
   249                           	opt stack 0
   250  007AB7  04                 	db	4
   251  007AB8  05                 	db	5
   252  007AB9  06                 	db	6
   253  007ABA  07                 	db	7
   254  007ABB                     __end_of_channelArr:
   255                           	opt stack 0
   256  007ABB                     exp@coeff:
   257                           	opt stack 0
   258  007ABB  00                 	db	0
   259  007ABC  80                 	db	128
   260  007ABD  3F                 	db	63
   261  007ABE  72                 	db	114
   262  007ABF  31                 	db	49
   263  007AC0  3F                 	db	63
   264  007AC1  FE                 	db	254
   265  007AC2  75                 	db	117
   266  007AC3  3E                 	db	62
   267  007AC4  58                 	db	88
   268  007AC5  63                 	db	99
   269  007AC6  3D                 	db	61
   270  007AC7  95                 	db	149
   271  007AC8  1D                 	db	29
   272  007AC9  3C                 	db	60
   273  007ACA  C5                 	db	197
   274  007ACB  AE                 	db	174
   275  007ACC  3A                 	db	58
   276  007ACD  79                 	db	121
   277  007ACE  21                 	db	33
   278  007ACF  39                 	db	57
   279  007AD0  94                 	db	148
   280  007AD1  80                 	db	128
   281  007AD2  37                 	db	55
   282  007AD3  93                 	db	147
   283  007AD4  A7                 	db	167
   284  007AD5  35                 	db	53
   285  007AD6  56                 	db	86
   286  007AD7  15                 	db	21
   287  007AD8  34                 	db	52
   288  007AD9                     __end_ofexp@coeff:
   289                           	opt stack 0
   290  007AD9                     log@coeff:
   291                           	opt stack 0
   292  007AD9  00                 	db	0
   293  007ADA  00                 	db	0
   294  007ADB  00                 	db	0
   295  007ADC  00                 	db	0
   296  007ADD  80                 	db	128
   297  007ADE  3F                 	db	63
   298  007ADF  F0                 	db	240
   299  007AE0  FF                 	db	255
   300  007AE1  BE                 	db	190
   301  007AE2  E2                 	db	226
   302  007AE3  A9                 	db	169
   303  007AE4  3E                 	db	62
   304  007AE5  83                 	db	131
   305  007AE6  76                 	db	118
   306  007AE7  BE                 	db	190
   307  007AE8  AE                 	db	174
   308  007AE9  2B                 	db	43
   309  007AEA  3E                 	db	62
   310  007AEB  3C                 	db	60
   311  007AEC  C3                 	db	195
   312  007AED  BD                 	db	189
   313  007AEE  D2                 	db	210
   314  007AEF  13                 	db	19
   315  007AF0  3D                 	db	61
   316  007AF1  78                 	db	120
   317  007AF2  D3                 	db	211
   318  007AF3  BB                 	db	187
   319  007AF4                     __end_oflog@coeff:
   320                           	opt stack 0
   321  007AF4                     STR_33:
   322                           
   323                           ; BSR set to: 0
   324  007AF4  24                 	db	36
   325  007AF5  52                 	db	82	;'R'
   326  007AF6  43                 	db	67	;'C'
   327  007AF7  50                 	db	80	;'P'
   328  007AF8  20                 	db	32
   329  007AF9  3C                 	db	60	;'<'
   330  007AFA  58                 	db	88	;'X'
   331  007AFB  3E                 	db	62	;'>'
   332  007AFC  3C                 	db	60	;'<'
   333  007AFD  63                 	db	99	;'c'
   334  007AFE  72                 	db	114	;'r'
   335  007AFF  3E                 	db	62	;'>'
   336  007B00  20                 	db	32
   337  007B01  20                 	db	32
   338  007B02  20                 	db	32
   339  007B03  20                 	db	32
   340  007B04  20                 	db	32
   341  007B05  53                 	db	83	;'S'
   342  007B06  65                 	db	101	;'e'
   343  007B07  74                 	db	116	;'t'
   344  007B08  20                 	db	32
   345  007B09  43                 	db	67	;'C'
   346  007B0A  6F                 	db	111	;'o'
   347  007B0B  6D                 	db	109	;'m'
   348  007B0C  70                 	db	112	;'p'
   349  007B0D  72                 	db	114	;'r'
   350  007B0E  65                 	db	101	;'e'
   351  007B0F  73                 	db	115	;'s'
   352  007B10  73                 	db	115	;'s'
   353  007B11  69                 	db	105	;'i'
   354  007B12  6F                 	db	111	;'o'
   355  007B13  6E                 	db	110	;'n'
   356  007B14  20                 	db	32
   357  007B15  6F                 	db	111	;'o'
   358  007B16  70                 	db	112	;'p'
   359  007B17  65                 	db	101	;'e'
   360  007B18  72                 	db	114	;'r'
   361  007B19  61                 	db	97	;'a'
   362  007B1A  74                 	db	116	;'t'
   363  007B1B  69                 	db	105	;'i'
   364  007B1C  6F                 	db	111	;'o'
   365  007B1D  6E                 	db	110	;'n'
   366  007B1E  20                 	db	32
   367  007B1F  6D                 	db	109	;'m'
   368  007B20  6F                 	db	111	;'o'
   369  007B21  64                 	db	100	;'d'
   370  007B22  65                 	db	101	;'e'
   371  007B23  20                 	db	32
   372  007B24  61                 	db	97	;'a'
   373  007B25  74                 	db	116	;'t'
   374  007B26  20                 	db	32
   375  007B27  52                 	db	82	;'R'
   376  007B28  58                 	db	88	;'X'
   377  007B29  20                 	db	32
   378  007B2A  73                 	db	115	;'s'
   379  007B2B  79                 	db	121	;'y'
   380  007B2C  73                 	db	115	;'s'
   381  007B2D  74                 	db	116	;'t'
   382  007B2E  65                 	db	101	;'e'
   383  007B2F  6D                 	db	109	;'m'
   384  007B30  3A                 	db	58	;':'
   385  007B31  20                 	db	32
   386  007B32  41                 	db	65	;'A'
   387  007B33  75                 	db	117	;'u'
   388  007B34  74                 	db	116	;'t'
   389  007B35  6F                 	db	111	;'o'
   390  007B36  6D                 	db	109	;'m'
   391  007B37  61                 	db	97	;'a'
   392  007B38  74                 	db	116	;'t'
   393  007B39  69                 	db	105	;'i'
   394  007B3A  63                 	db	99	;'c'
   395  007B3B  5B                 	db	91	;'['
   396  007B3C  31                 	db	49	;'1'
   397  007B3D  5D                 	db	93	;']'
   398  007B3E  20                 	db	32
   399  007B3F  4D                 	db	77	;'M'
   400  007B40  61                 	db	97	;'a'
   401  007B41  6E                 	db	110	;'n'
   402  007B42  75                 	db	117	;'u'
   403  007B43  61                 	db	97	;'a'
   404  007B44  6C                 	db	108	;'l'
   405  007B45  5B                 	db	91	;'['
   406  007B46  30                 	db	48	;'0'
   407  007B47  5D                 	db	93	;']'
   408  007B48  20                 	db	32
   409  007B49  5B                 	db	91	;'['
   410  007B4A  44                 	db	68	;'D'
   411  007B4B  65                 	db	101	;'e'
   412  007B4C  66                 	db	102	;'f'
   413  007B4D  61                 	db	97	;'a'
   414  007B4E  75                 	db	117	;'u'
   415  007B4F  6C                 	db	108	;'l'
   416  007B50  74                 	db	116	;'t'
   417  007B51  20                 	db	32
   418  007B52  3D                 	db	61	;'='
   419  007B53  20                 	db	32
   420  007B54  30                 	db	48	;'0'
   421  007B55  5D                 	db	93	;']'
   422  007B56  0D                 	db	13
   423  007B57  0A                 	db	10
   424  007B58  00                 	db	0
   425  007B59                     STR_32:
   426                           
   427                           ; BSR set to: 0
   428  007B59  24                 	db	36
   429  007B5A  52                 	db	82	;'R'
   430  007B5B  43                 	db	67	;'C'
   431  007B5C  52                 	db	82	;'R'
   432  007B5D  20                 	db	32
   433  007B5E  3C                 	db	60	;'<'
   434  007B5F  58                 	db	88	;'X'
   435  007B60  3E                 	db	62	;'>'
   436  007B61  3C                 	db	60	;'<'
   437  007B62  63                 	db	99	;'c'
   438  007B63  72                 	db	114	;'r'
   439  007B64  3E                 	db	62	;'>'
   440  007B65  20                 	db	32
   441  007B66  20                 	db	32
   442  007B67  20                 	db	32
   443  007B68  20                 	db	32
   444  007B69  20                 	db	32
   445  007B6A  53                 	db	83	;'S'
   446  007B6B  65                 	db	101	;'e'
   447  007B6C  74                 	db	116	;'t'
   448  007B6D  20                 	db	32
   449  007B6E  43                 	db	67	;'C'
   450  007B6F  6F                 	db	111	;'o'
   451  007B70  6D                 	db	109	;'m'
   452  007B71  70                 	db	112	;'p'
   453  007B72  72                 	db	114	;'r'
   454  007B73  65                 	db	101	;'e'
   455  007B74  73                 	db	115	;'s'
   456  007B75  73                 	db	115	;'s'
   457  007B76  69                 	db	105	;'i'
   458  007B77  6F                 	db	111	;'o'
   459  007B78  6E                 	db	110	;'n'
   460  007B79  20                 	db	32
   461  007B7A  72                 	db	114	;'r'
   462  007B7B  61                 	db	97	;'a'
   463  007B7C  6E                 	db	110	;'n'
   464  007B7D  67                 	db	103	;'g'
   465  007B7E  65                 	db	101	;'e'
   466  007B7F  20                 	db	32
   467  007B80  61                 	db	97	;'a'
   468  007B81  74                 	db	116	;'t'
   469  007B82  20                 	db	32
   470  007B83  52                 	db	82	;'R'
   471  007B84  58                 	db	88	;'X'
   472  007B85  20                 	db	32
   473  007B86  73                 	db	115	;'s'
   474  007B87  79                 	db	121	;'y'
   475  007B88  73                 	db	115	;'s'
   476  007B89  74                 	db	116	;'t'
   477  007B8A  65                 	db	101	;'e'
   478  007B8B  6D                 	db	109	;'m'
   479  007B8C  2E                 	db	46
   480  007B8D  20                 	db	32
   481  007B8E  48                 	db	72	;'H'
   482  007B8F  69                 	db	105	;'i'
   483  007B90  67                 	db	103	;'g'
   484  007B91  68                 	db	104	;'h'
   485  007B92  20                 	db	32
   486  007B93  5B                 	db	91	;'['
   487  007B94  31                 	db	49	;'1'
   488  007B95  5D                 	db	93	;']'
   489  007B96  20                 	db	32
   490  007B97  4C                 	db	76	;'L'
   491  007B98  6F                 	db	111	;'o'
   492  007B99  77                 	db	119	;'w'
   493  007B9A  20                 	db	32
   494  007B9B  5B                 	db	91	;'['
   495  007B9C  30                 	db	48	;'0'
   496  007B9D  5D                 	db	93	;']'
   497  007B9E  20                 	db	32
   498  007B9F  5B                 	db	91	;'['
   499  007BA0  44                 	db	68	;'D'
   500  007BA1  65                 	db	101	;'e'
   501  007BA2  66                 	db	102	;'f'
   502  007BA3  61                 	db	97	;'a'
   503  007BA4  75                 	db	117	;'u'
   504  007BA5  6C                 	db	108	;'l'
   505  007BA6  74                 	db	116	;'t'
   506  007BA7  20                 	db	32
   507  007BA8  3D                 	db	61	;'='
   508  007BA9  20                 	db	32
   509  007BAA  30                 	db	48	;'0'
   510  007BAB  5D                 	db	93	;']'
   511  007BAC  0D                 	db	13
   512  007BAD  0A                 	db	10
   513  007BAE  00                 	db	0
   514  007BAF                     STR_37:
   515                           
   516                           ; BSR set to: 0
   517  007BAF  24                 	db	36
   518  007BB0  53                 	db	83	;'S'
   519  007BB1  42                 	db	66	;'B'
   520  007BB2  55                 	db	85	;'U'
   521  007BB3  20                 	db	32
   522  007BB4  3C                 	db	60	;'<'
   523  007BB5  58                 	db	88	;'X'
   524  007BB6  3E                 	db	62	;'>'
   525  007BB7  3C                 	db	60	;'<'
   526  007BB8  63                 	db	99	;'c'
   527  007BB9  72                 	db	114	;'r'
   528  007BBA  3E                 	db	62	;'>'
   529  007BBB  20                 	db	32
   530  007BBC  20                 	db	32
   531  007BBD  20                 	db	32
   532  007BBE  20                 	db	32
   533  007BBF  20                 	db	32
   534  007BC0  53                 	db	83	;'S'
   535  007BC1  65                 	db	101	;'e'
   536  007BC2  74                 	db	116	;'t'
   537  007BC3  20                 	db	32
   538  007BC4  55                 	db	85	;'U'
   539  007BC5  41                 	db	65	;'A'
   540  007BC6  52                 	db	82	;'R'
   541  007BC7  54                 	db	84	;'T'
   542  007BC8  20                 	db	32
   543  007BC9  61                 	db	97	;'a'
   544  007BCA  75                 	db	117	;'u'
   545  007BCB  74                 	db	116	;'t'
   546  007BCC  6F                 	db	111	;'o'
   547  007BCD  6D                 	db	109	;'m'
   548  007BCE  61                 	db	97	;'a'
   549  007BCF  74                 	db	116	;'t'
   550  007BD0  69                 	db	105	;'i'
   551  007BD1  63                 	db	99	;'c'
   552  007BD2  20                 	db	32
   553  007BD3  6F                 	db	111	;'o'
   554  007BD4  70                 	db	112	;'p'
   555  007BD5  65                 	db	101	;'e'
   556  007BD6  72                 	db	114	;'r'
   557  007BD7  61                 	db	97	;'a'
   558  007BD8  74                 	db	116	;'t'
   559  007BD9  69                 	db	105	;'i'
   560  007BDA  6F                 	db	111	;'o'
   561  007BDB  6E                 	db	110	;'n'
   562  007BDC  3A                 	db	58	;':'
   563  007BDD  20                 	db	32
   564  007BDE  41                 	db	65	;'A'
   565  007BDF  75                 	db	117	;'u'
   566  007BE0  74                 	db	116	;'t'
   567  007BE1  6F                 	db	111	;'o'
   568  007BE2  6D                 	db	109	;'m'
   569  007BE3  61                 	db	97	;'a'
   570  007BE4  74                 	db	116	;'t'
   571  007BE5  69                 	db	105	;'i'
   572  007BE6  63                 	db	99	;'c'
   573  007BE7  5B                 	db	91	;'['
   574  007BE8  31                 	db	49	;'1'
   575  007BE9  5D                 	db	93	;']'
   576  007BEA  20                 	db	32
   577  007BEB  4D                 	db	77	;'M'
   578  007BEC  61                 	db	97	;'a'
   579  007BED  6E                 	db	110	;'n'
   580  007BEE  75                 	db	117	;'u'
   581  007BEF  61                 	db	97	;'a'
   582  007BF0  6C                 	db	108	;'l'
   583  007BF1  5B                 	db	91	;'['
   584  007BF2  30                 	db	48	;'0'
   585  007BF3  5D                 	db	93	;']'
   586  007BF4  20                 	db	32
   587  007BF5  5B                 	db	91	;'['
   588  007BF6  44                 	db	68	;'D'
   589  007BF7  65                 	db	101	;'e'
   590  007BF8  66                 	db	102	;'f'
   591  007BF9  61                 	db	97	;'a'
   592  007BFA  75                 	db	117	;'u'
   593  007BFB  6C                 	db	108	;'l'
   594  007BFC  74                 	db	116	;'t'
   595  007BFD  20                 	db	32
   596  007BFE  3D                 	db	61	;'='
   597  007BFF  20                 	db	32
   598  007C00  30                 	db	48	;'0'
   599  007C01  5D                 	db	93	;']'
   600  007C02  0D                 	db	13
   601  007C03  0A                 	db	10
   602  007C04  00                 	db	0
   603  007C05                     STR_26:
   604                           
   605                           ; BSR set to: 0
   606  007C05  24                 	db	36
   607  007C06  54                 	db	84	;'T'
   608  007C07  58                 	db	88	;'X'
   609  007C08  20                 	db	32
   610  007C09  3C                 	db	60	;'<'
   611  007C0A  58                 	db	88	;'X'
   612  007C0B  3E                 	db	62	;'>'
   613  007C0C  3C                 	db	60	;'<'
   614  007C0D  63                 	db	99	;'c'
   615  007C0E  72                 	db	114	;'r'
   616  007C0F  3E                 	db	62	;'>'
   617  007C10  20                 	db	32
   618  007C11  20                 	db	32
   619  007C12  20                 	db	32
   620  007C13  20                 	db	32
   621  007C14  20                 	db	32
   622  007C15  20                 	db	32
   623  007C16  54                 	db	84	;'T'
   624  007C17  75                 	db	117	;'u'
   625  007C18  72                 	db	114	;'r'
   626  007C19  6E                 	db	110	;'n'
   627  007C1A  20                 	db	32
   628  007C1B  6F                 	db	111	;'o'
   629  007C1C  6E                 	db	110	;'n'
   630  007C1D  5B                 	db	91	;'['
   631  007C1E  31                 	db	49	;'1'
   632  007C1F  5D                 	db	93	;']'
   633  007C20  20                 	db	32
   634  007C21  2F                 	db	47
   635  007C22  20                 	db	32
   636  007C23  6F                 	db	111	;'o'
   637  007C24  66                 	db	102	;'f'
   638  007C25  66                 	db	102	;'f'
   639  007C26  5B                 	db	91	;'['
   640  007C27  30                 	db	48	;'0'
   641  007C28  5D                 	db	93	;']'
   642  007C29  20                 	db	32
   643  007C2A  74                 	db	116	;'t'
   644  007C2B  72                 	db	114	;'r'
   645  007C2C  61                 	db	97	;'a'
   646  007C2D  6E                 	db	110	;'n'
   647  007C2E  73                 	db	115	;'s'
   648  007C2F  6D                 	db	109	;'m'
   649  007C30  69                 	db	105	;'i'
   650  007C31  73                 	db	115	;'s'
   651  007C32  73                 	db	115	;'s'
   652  007C33  69                 	db	105	;'i'
   653  007C34  6F                 	db	111	;'o'
   654  007C35  6E                 	db	110	;'n'
   655  007C36  20                 	db	32
   656  007C37  61                 	db	97	;'a'
   657  007C38  74                 	db	116	;'t'
   658  007C39  20                 	db	32
   659  007C3A  54                 	db	84	;'T'
   660  007C3B  58                 	db	88	;'X'
   661  007C3C  20                 	db	32
   662  007C3D  73                 	db	115	;'s'
   663  007C3E  79                 	db	121	;'y'
   664  007C3F  73                 	db	115	;'s'
   665  007C40  74                 	db	116	;'t'
   666  007C41  65                 	db	101	;'e'
   667  007C42  6D                 	db	109	;'m'
   668  007C43  20                 	db	32
   669  007C44  5B                 	db	91	;'['
   670  007C45  44                 	db	68	;'D'
   671  007C46  65                 	db	101	;'e'
   672  007C47  66                 	db	102	;'f'
   673  007C48  61                 	db	97	;'a'
   674  007C49  75                 	db	117	;'u'
   675  007C4A  6C                 	db	108	;'l'
   676  007C4B  74                 	db	116	;'t'
   677  007C4C  20                 	db	32
   678  007C4D  3D                 	db	61	;'='
   679  007C4E  20                 	db	32
   680  007C4F  30                 	db	48	;'0'
   681  007C50  5D                 	db	93	;']'
   682  007C51  0D                 	db	13
   683  007C52  0A                 	db	10
   684  007C53  00                 	db	0
   685  007C54                     STR_25:
   686                           
   687                           ; BSR set to: 0
   688  007C54  24                 	db	36
   689  007C55  54                 	db	84	;'T'
   690  007C56  42                 	db	66	;'B'
   691  007C57  20                 	db	32
   692  007C58  3C                 	db	60	;'<'
   693  007C59  58                 	db	88	;'X'
   694  007C5A  3E                 	db	62	;'>'
   695  007C5B  3C                 	db	60	;'<'
   696  007C5C  63                 	db	99	;'c'
   697  007C5D  72                 	db	114	;'r'
   698  007C5E  3E                 	db	62	;'>'
   699  007C5F  20                 	db	32
   700  007C60  20                 	db	32
   701  007C61  20                 	db	32
   702  007C62  20                 	db	32
   703  007C63  20                 	db	32
   704  007C64  20                 	db	32
   705  007C65  54                 	db	84	;'T'
   706  007C66  75                 	db	117	;'u'
   707  007C67  72                 	db	114	;'r'
   708  007C68  6E                 	db	110	;'n'
   709  007C69  20                 	db	32
   710  007C6A  6F                 	db	111	;'o'
   711  007C6B  6E                 	db	110	;'n'
   712  007C6C  5B                 	db	91	;'['
   713  007C6D  31                 	db	49	;'1'
   714  007C6E  5D                 	db	93	;']'
   715  007C6F  20                 	db	32
   716  007C70  2F                 	db	47
   717  007C71  20                 	db	32
   718  007C72  6F                 	db	111	;'o'
   719  007C73  66                 	db	102	;'f'
   720  007C74  66                 	db	102	;'f'
   721  007C75  5B                 	db	91	;'['
   722  007C76  30                 	db	48	;'0'
   723  007C77  5D                 	db	93	;']'
   724  007C78  20                 	db	32
   725  007C79  42                 	db	66	;'B'
   726  007C7A  49                 	db	73	;'I'
   727  007C7B  54                 	db	84	;'T'
   728  007C7C  20                 	db	32
   729  007C7D  6D                 	db	109	;'m'
   730  007C7E  6F                 	db	111	;'o'
   731  007C7F  64                 	db	100	;'d'
   732  007C80  65                 	db	101	;'e'
   733  007C81  20                 	db	32
   734  007C82  61                 	db	97	;'a'
   735  007C83  74                 	db	116	;'t'
   736  007C84  20                 	db	32
   737  007C85  54                 	db	84	;'T'
   738  007C86  58                 	db	88	;'X'
   739  007C87  20                 	db	32
   740  007C88  73                 	db	115	;'s'
   741  007C89  79                 	db	121	;'y'
   742  007C8A  73                 	db	115	;'s'
   743  007C8B  74                 	db	116	;'t'
   744  007C8C  65                 	db	101	;'e'
   745  007C8D  6D                 	db	109	;'m'
   746  007C8E  20                 	db	32
   747  007C8F  5B                 	db	91	;'['
   748  007C90  44                 	db	68	;'D'
   749  007C91  65                 	db	101	;'e'
   750  007C92  66                 	db	102	;'f'
   751  007C93  61                 	db	97	;'a'
   752  007C94  75                 	db	117	;'u'
   753  007C95  6C                 	db	108	;'l'
   754  007C96  74                 	db	116	;'t'
   755  007C97  20                 	db	32
   756  007C98  3D                 	db	61	;'='
   757  007C99  20                 	db	32
   758  007C9A  30                 	db	48	;'0'
   759  007C9B  5D                 	db	93	;']'
   760  007C9C  0D                 	db	13
   761  007C9D  0A                 	db	10
   762  007C9E  00                 	db	0
   763  007C9F                     STR_28:
   764                           
   765                           ; BSR set to: 0
   766  007C9F  24                 	db	36
   767  007CA0  52                 	db	82	;'R'
   768  007CA1  49                 	db	73	;'I'
   769  007CA2  20                 	db	32
   770  007CA3  3C                 	db	60	;'<'
   771  007CA4  58                 	db	88	;'X'
   772  007CA5  58                 	db	88	;'X'
   773  007CA6  58                 	db	88	;'X'
   774  007CA7  58                 	db	88	;'X'
   775  007CA8  3E                 	db	62	;'>'
   776  007CA9  3C                 	db	60	;'<'
   777  007CAA  63                 	db	99	;'c'
   778  007CAB  72                 	db	114	;'r'
   779  007CAC  3E                 	db	62	;'>'
   780  007CAD  20                 	db	32
   781  007CAE  20                 	db	32
   782  007CAF  20                 	db	32
   783  007CB0  49                 	db	73	;'I'
   784  007CB1  6E                 	db	110	;'n'
   785  007CB2  69                 	db	105	;'i'
   786  007CB3  74                 	db	116	;'t'
   787  007CB4  20                 	db	32
   788  007CB5  52                 	db	82	;'R'
   789  007CB6  58                 	db	88	;'X'
   790  007CB7  20                 	db	32
   791  007CB8  73                 	db	115	;'s'
   792  007CB9  79                 	db	121	;'y'
   793  007CBA  73                 	db	115	;'s'
   794  007CBB  74                 	db	116	;'t'
   795  007CBC  65                 	db	101	;'e'
   796  007CBD  6D                 	db	109	;'m'
   797  007CBE  20                 	db	32
   798  007CBF  61                 	db	97	;'a'
   799  007CC0  6E                 	db	110	;'n'
   800  007CC1  64                 	db	100	;'d'
   801  007CC2  20                 	db	32
   802  007CC3  73                 	db	115	;'s'
   803  007CC4  65                 	db	101	;'e'
   804  007CC5  74                 	db	116	;'t'
   805  007CC6  20                 	db	32
   806  007CC7  66                 	db	102	;'f'
   807  007CC8  72                 	db	114	;'r'
   808  007CC9  65                 	db	101	;'e'
   809  007CCA  71                 	db	113	;'q'
   810  007CCB  75                 	db	117	;'u'
   811  007CCC  65                 	db	101	;'e'
   812  007CCD  6E                 	db	110	;'n'
   813  007CCE  63                 	db	99	;'c'
   814  007CCF  79                 	db	121	;'y'
   815  007CD0  20                 	db	32
   816  007CD1  61                 	db	97	;'a'
   817  007CD2  74                 	db	116	;'t'
   818  007CD3  20                 	db	32
   819  007CD4  58                 	db	88	;'X'
   820  007CD5  58                 	db	88	;'X'
   821  007CD6  58                 	db	88	;'X'
   822  007CD7  58                 	db	88	;'X'
   823  007CD8  20                 	db	32
   824  007CD9  28                 	db	40
   825  007CDA  30                 	db	48	;'0'
   826  007CDB  2D                 	db	45
   827  007CDC  39                 	db	57	;'9'
   828  007CDD  39                 	db	57	;'9'
   829  007CDE  39                 	db	57	;'9'
   830  007CDF  39                 	db	57	;'9'
   831  007CE0  29                 	db	41
   832  007CE1  5B                 	db	91	;'['
   833  007CE2  4D                 	db	77	;'M'
   834  007CE3  48                 	db	72	;'H'
   835  007CE4  7A                 	db	122	;'z'
   836  007CE5  5D                 	db	93	;']'
   837  007CE6  0D                 	db	13
   838  007CE7  0A                 	db	10
   839  007CE8  00                 	db	0
   840  007CE9                     STR_22:
   841                           
   842                           ; BSR set to: 0
   843  007CE9  24                 	db	36
   844  007CEA  54                 	db	84	;'T'
   845  007CEB  49                 	db	73	;'I'
   846  007CEC  20                 	db	32
   847  007CED  3C                 	db	60	;'<'
   848  007CEE  58                 	db	88	;'X'
   849  007CEF  58                 	db	88	;'X'
   850  007CF0  58                 	db	88	;'X'
   851  007CF1  58                 	db	88	;'X'
   852  007CF2  3E                 	db	62	;'>'
   853  007CF3  3C                 	db	60	;'<'
   854  007CF4  63                 	db	99	;'c'
   855  007CF5  72                 	db	114	;'r'
   856  007CF6  3E                 	db	62	;'>'
   857  007CF7  20                 	db	32
   858  007CF8  20                 	db	32
   859  007CF9  20                 	db	32
   860  007CFA  49                 	db	73	;'I'
   861  007CFB  6E                 	db	110	;'n'
   862  007CFC  69                 	db	105	;'i'
   863  007CFD  74                 	db	116	;'t'
   864  007CFE  20                 	db	32
   865  007CFF  54                 	db	84	;'T'
   866  007D00  58                 	db	88	;'X'
   867  007D01  20                 	db	32
   868  007D02  73                 	db	115	;'s'
   869  007D03  79                 	db	121	;'y'
   870  007D04  73                 	db	115	;'s'
   871  007D05  74                 	db	116	;'t'
   872  007D06  65                 	db	101	;'e'
   873  007D07  6D                 	db	109	;'m'
   874  007D08  20                 	db	32
   875  007D09  61                 	db	97	;'a'
   876  007D0A  6E                 	db	110	;'n'
   877  007D0B  64                 	db	100	;'d'
   878  007D0C  20                 	db	32
   879  007D0D  73                 	db	115	;'s'
   880  007D0E  65                 	db	101	;'e'
   881  007D0F  74                 	db	116	;'t'
   882  007D10  20                 	db	32
   883  007D11  66                 	db	102	;'f'
   884  007D12  72                 	db	114	;'r'
   885  007D13  65                 	db	101	;'e'
   886  007D14  71                 	db	113	;'q'
   887  007D15  75                 	db	117	;'u'
   888  007D16  65                 	db	101	;'e'
   889  007D17  6E                 	db	110	;'n'
   890  007D18  63                 	db	99	;'c'
   891  007D19  79                 	db	121	;'y'
   892  007D1A  20                 	db	32
   893  007D1B  28                 	db	40
   894  007D1C  30                 	db	48	;'0'
   895  007D1D  2D                 	db	45
   896  007D1E  39                 	db	57	;'9'
   897  007D1F  39                 	db	57	;'9'
   898  007D20  39                 	db	57	;'9'
   899  007D21  39                 	db	57	;'9'
   900  007D22  29                 	db	41
   901  007D23  5B                 	db	91	;'['
   902  007D24  4D                 	db	77	;'M'
   903  007D25  48                 	db	72	;'H'
   904  007D26  7A                 	db	122	;'z'
   905  007D27  5D                 	db	93	;']'
   906  007D28  0D                 	db	13
   907  007D29  0A                 	db	10
   908  007D2A  00                 	db	0
   909  007D2B                     STR_30:
   910                           
   911                           ; BSR set to: 0
   912  007D2B  24                 	db	36
   913  007D2C  52                 	db	82	;'R'
   914  007D2D  42                 	db	66	;'B'
   915  007D2E  20                 	db	32
   916  007D2F  3C                 	db	60	;'<'
   917  007D30  58                 	db	88	;'X'
   918  007D31  3E                 	db	62	;'>'
   919  007D32  3C                 	db	60	;'<'
   920  007D33  63                 	db	99	;'c'
   921  007D34  72                 	db	114	;'r'
   922  007D35  3E                 	db	62	;'>'
   923  007D36  20                 	db	32
   924  007D37  20                 	db	32
   925  007D38  20                 	db	32
   926  007D39  20                 	db	32
   927  007D3A  20                 	db	32
   928  007D3B  20                 	db	32
   929  007D3C  54                 	db	84	;'T'
   930  007D3D  75                 	db	117	;'u'
   931  007D3E  72                 	db	114	;'r'
   932  007D3F  6E                 	db	110	;'n'
   933  007D40  20                 	db	32
   934  007D41  6F                 	db	111	;'o'
   935  007D42  6E                 	db	110	;'n'
   936  007D43  5B                 	db	91	;'['
   937  007D44  31                 	db	49	;'1'
   938  007D45  5D                 	db	93	;']'
   939  007D46  20                 	db	32
   940  007D47  2F                 	db	47
   941  007D48  20                 	db	32
   942  007D49  6F                 	db	111	;'o'
   943  007D4A  66                 	db	102	;'f'
   944  007D4B  66                 	db	102	;'f'
   945  007D4C  5B                 	db	91	;'['
   946  007D4D  30                 	db	48	;'0'
   947  007D4E  5D                 	db	93	;']'
   948  007D4F  20                 	db	32
   949  007D50  42                 	db	66	;'B'
   950  007D51  49                 	db	73	;'I'
   951  007D52  54                 	db	84	;'T'
   952  007D53  20                 	db	32
   953  007D54  6D                 	db	109	;'m'
   954  007D55  6F                 	db	111	;'o'
   955  007D56  64                 	db	100	;'d'
   956  007D57  65                 	db	101	;'e'
   957  007D58  20                 	db	32
   958  007D59  61                 	db	97	;'a'
   959  007D5A  74                 	db	116	;'t'
   960  007D5B  20                 	db	32
   961  007D5C  52                 	db	82	;'R'
   962  007D5D  58                 	db	88	;'X'
   963  007D5E  20                 	db	32
   964  007D5F  73                 	db	115	;'s'
   965  007D60  79                 	db	121	;'y'
   966  007D61  73                 	db	115	;'s'
   967  007D62  74                 	db	116	;'t'
   968  007D63  65                 	db	101	;'e'
   969  007D64  6D                 	db	109	;'m'
   970  007D65  2E                 	db	46
   971  007D66  0D                 	db	13
   972  007D67  0A                 	db	10
   973  007D68  00                 	db	0
   974  007D69                     STR_23:
   975                           
   976                           ; BSR set to: 0
   977  007D69  24                 	db	36
   978  007D6A  54                 	db	84	;'T'
   979  007D6B  46                 	db	70	;'F'
   980  007D6C  20                 	db	32
   981  007D6D  3C                 	db	60	;'<'
   982  007D6E  58                 	db	88	;'X'
   983  007D6F  58                 	db	88	;'X'
   984  007D70  58                 	db	88	;'X'
   985  007D71  58                 	db	88	;'X'
   986  007D72  3E                 	db	62	;'>'
   987  007D73  3C                 	db	60	;'<'
   988  007D74  63                 	db	99	;'c'
   989  007D75  72                 	db	114	;'r'
   990  007D76  3E                 	db	62	;'>'
   991  007D77  20                 	db	32
   992  007D78  20                 	db	32
   993  007D79  20                 	db	32
   994  007D7A  53                 	db	83	;'S'
   995  007D7B  65                 	db	101	;'e'
   996  007D7C  74                 	db	116	;'t'
   997  007D7D  20                 	db	32
   998  007D7E  54                 	db	84	;'T'
   999  007D7F  58                 	db	88	;'X'
  1000  007D80  20                 	db	32
  1001  007D81  73                 	db	115	;'s'
  1002  007D82  79                 	db	121	;'y'
  1003  007D83  73                 	db	115	;'s'
  1004  007D84  74                 	db	116	;'t'
  1005  007D85  65                 	db	101	;'e'
  1006  007D86  6D                 	db	109	;'m'
  1007  007D87  20                 	db	32
  1008  007D88  66                 	db	102	;'f'
  1009  007D89  72                 	db	114	;'r'
  1010  007D8A  65                 	db	101	;'e'
  1011  007D8B  71                 	db	113	;'q'
  1012  007D8C  75                 	db	117	;'u'
  1013  007D8D  65                 	db	101	;'e'
  1014  007D8E  6E                 	db	110	;'n'
  1015  007D8F  63                 	db	99	;'c'
  1016  007D90  79                 	db	121	;'y'
  1017  007D91  20                 	db	32
  1018  007D92  61                 	db	97	;'a'
  1019  007D93  74                 	db	116	;'t'
  1020  007D94  20                 	db	32
  1021  007D95  28                 	db	40
  1022  007D96  30                 	db	48	;'0'
  1023  007D97  2D                 	db	45
  1024  007D98  39                 	db	57	;'9'
  1025  007D99  39                 	db	57	;'9'
  1026  007D9A  39                 	db	57	;'9'
  1027  007D9B  39                 	db	57	;'9'
  1028  007D9C  29                 	db	41
  1029  007D9D  5B                 	db	91	;'['
  1030  007D9E  4D                 	db	77	;'M'
  1031  007D9F  48                 	db	72	;'H'
  1032  007DA0  7A                 	db	122	;'z'
  1033  007DA1  5D                 	db	93	;']'
  1034  007DA2  2E                 	db	46
  1035  007DA3  0D                 	db	13
  1036  007DA4  0A                 	db	10
  1037  007DA5  00                 	db	0
  1038  007DA6                     STR_31:
  1039                           
  1040                           ; BSR set to: 0
  1041  007DA6  24                 	db	36
  1042  007DA7  52                 	db	82	;'R'
  1043  007DA8  58                 	db	88	;'X'
  1044  007DA9  20                 	db	32
  1045  007DAA  3C                 	db	60	;'<'
  1046  007DAB  58                 	db	88	;'X'
  1047  007DAC  3E                 	db	62	;'>'
  1048  007DAD  3C                 	db	60	;'<'
  1049  007DAE  63                 	db	99	;'c'
  1050  007DAF  72                 	db	114	;'r'
  1051  007DB0  3E                 	db	62	;'>'
  1052  007DB1  20                 	db	32
  1053  007DB2  20                 	db	32
  1054  007DB3  20                 	db	32
  1055  007DB4  20                 	db	32
  1056  007DB5  20                 	db	32
  1057  007DB6  20                 	db	32
  1058  007DB7  54                 	db	84	;'T'
  1059  007DB8  75                 	db	117	;'u'
  1060  007DB9  72                 	db	114	;'r'
  1061  007DBA  6E                 	db	110	;'n'
  1062  007DBB  20                 	db	32
  1063  007DBC  6F                 	db	111	;'o'
  1064  007DBD  6E                 	db	110	;'n'
  1065  007DBE  5B                 	db	91	;'['
  1066  007DBF  31                 	db	49	;'1'
  1067  007DC0  5D                 	db	93	;']'
  1068  007DC1  20                 	db	32
  1069  007DC2  2F                 	db	47
  1070  007DC3  20                 	db	32
  1071  007DC4  6F                 	db	111	;'o'
  1072  007DC5  66                 	db	102	;'f'
  1073  007DC6  66                 	db	102	;'f'
  1074  007DC7  5B                 	db	91	;'['
  1075  007DC8  30                 	db	48	;'0'
  1076  007DC9  5D                 	db	93	;']'
  1077  007DCA  20                 	db	32
  1078  007DCB  72                 	db	114	;'r'
  1079  007DCC  65                 	db	101	;'e'
  1080  007DCD  63                 	db	99	;'c'
  1081  007DCE  65                 	db	101	;'e'
  1082  007DCF  69                 	db	105	;'i'
  1083  007DD0  76                 	db	118	;'v'
  1084  007DD1  65                 	db	101	;'e'
  1085  007DD2  20                 	db	32
  1086  007DD3  61                 	db	97	;'a'
  1087  007DD4  74                 	db	116	;'t'
  1088  007DD5  20                 	db	32
  1089  007DD6  52                 	db	82	;'R'
  1090  007DD7  58                 	db	88	;'X'
  1091  007DD8  20                 	db	32
  1092  007DD9  73                 	db	115	;'s'
  1093  007DDA  79                 	db	121	;'y'
  1094  007DDB  73                 	db	115	;'s'
  1095  007DDC  74                 	db	116	;'t'
  1096  007DDD  65                 	db	101	;'e'
  1097  007DDE  6D                 	db	109	;'m'
  1098  007DDF  2E                 	db	46
  1099  007DE0  0D                 	db	13
  1100  007DE1  0A                 	db	10
  1101  007DE2  00                 	db	0
  1102  007DE3                     STR_36:
  1103                           
  1104                           ; BSR set to: 0
  1105  007DE3  24                 	db	36
  1106  007DE4  53                 	db	83	;'S'
  1107  007DE5  42                 	db	66	;'B'
  1108  007DE6  54                 	db	84	;'T'
  1109  007DE7  20                 	db	32
  1110  007DE8  3C                 	db	60	;'<'
  1111  007DE9  58                 	db	88	;'X'
  1112  007DEA  58                 	db	88	;'X'
  1113  007DEB  3E                 	db	62	;'>'
  1114  007DEC  3C                 	db	60	;'<'
  1115  007DED  63                 	db	99	;'c'
  1116  007DEE  72                 	db	114	;'r'
  1117  007DEF  3E                 	db	62	;'>'
  1118  007DF0  20                 	db	32
  1119  007DF1  20                 	db	32
  1120  007DF2  20                 	db	32
  1121  007DF3  20                 	db	32
  1122  007DF4  53                 	db	83	;'S'
  1123  007DF5  65                 	db	101	;'e'
  1124  007DF6  74                 	db	116	;'t'
  1125  007DF7  20                 	db	32
  1126  007DF8  55                 	db	85	;'U'
  1127  007DF9  41                 	db	65	;'A'
  1128  007DFA  52                 	db	82	;'R'
  1129  007DFB  54                 	db	84	;'T'
  1130  007DFC  20                 	db	32
  1131  007DFD  72                 	db	114	;'r'
  1132  007DFE  65                 	db	101	;'e'
  1133  007DFF  66                 	db	102	;'f'
  1134  007E00  72                 	db	114	;'r'
  1135  007E01  65                 	db	101	;'e'
  1136  007E02  73                 	db	115	;'s'
  1137  007E03  68                 	db	104	;'h'
  1138  007E04  20                 	db	32
  1139  007E05  72                 	db	114	;'r'
  1140  007E06  61                 	db	97	;'a'
  1141  007E07  74                 	db	116	;'t'
  1142  007E08  65                 	db	101	;'e'
  1143  007E09  20                 	db	32
  1144  007E0A  28                 	db	40
  1145  007E0B  31                 	db	49	;'1'
  1146  007E0C  2D                 	db	45
  1147  007E0D  32                 	db	50	;'2'
  1148  007E0E  30                 	db	48	;'0'
  1149  007E0F  29                 	db	41
  1150  007E10  5B                 	db	91	;'['
  1151  007E11  48                 	db	72	;'H'
  1152  007E12  7A                 	db	122	;'z'
  1153  007E13  5D                 	db	93	;']'
  1154  007E14  2E                 	db	46
  1155  007E15  0D                 	db	13
  1156  007E16  0A                 	db	10
  1157  007E17  00                 	db	0
  1158  007E18                     STR_35:
  1159                           
  1160                           ; BSR set to: 0
  1161  007E18  24                 	db	36
  1162  007E19  53                 	db	83	;'S'
  1163  007E1A  48                 	db	72	;'H'
  1164  007E1B  20                 	db	32
  1165  007E1C  3C                 	db	60	;'<'
  1166  007E1D  63                 	db	99	;'c'
  1167  007E1E  72                 	db	114	;'r'
  1168  007E1F  3E                 	db	62	;'>'
  1169  007E20  20                 	db	32
  1170  007E21  20                 	db	32
  1171  007E22  20                 	db	32
  1172  007E23  20                 	db	32
  1173  007E24  20                 	db	32
  1174  007E25  20                 	db	32
  1175  007E26  20                 	db	32
  1176  007E27  20                 	db	32
  1177  007E28  20                 	db	32
  1178  007E29  50                 	db	80	;'P'
  1179  007E2A  72                 	db	114	;'r'
  1180  007E2B  69                 	db	105	;'i'
  1181  007E2C  6E                 	db	110	;'n'
  1182  007E2D  74                 	db	116	;'t'
  1183  007E2E  20                 	db	32
  1184  007E2F  73                 	db	115	;'s'
  1185  007E30  79                 	db	121	;'y'
  1186  007E31  73                 	db	115	;'s'
  1187  007E32  74                 	db	116	;'t'
  1188  007E33  65                 	db	101	;'e'
  1189  007E34  6D                 	db	109	;'m'
  1190  007E35  20                 	db	32
  1191  007E36  68                 	db	104	;'h'
  1192  007E37  65                 	db	101	;'e'
  1193  007E38  6C                 	db	108	;'l'
  1194  007E39  70                 	db	112	;'p'
  1195  007E3A  20                 	db	32
  1196  007E3B  6D                 	db	109	;'m'
  1197  007E3C  65                 	db	101	;'e'
  1198  007E3D  73                 	db	115	;'s'
  1199  007E3E  73                 	db	115	;'s'
  1200  007E3F  61                 	db	97	;'a'
  1201  007E40  67                 	db	103	;'g'
  1202  007E41  65                 	db	101	;'e'
  1203  007E42  2E                 	db	46
  1204  007E43  0D                 	db	13
  1205  007E44  0A                 	db	10
  1206  007E45  00                 	db	0
  1207  007E46                     STR_24:
  1208                           
  1209                           ; BSR set to: 0
  1210  007E46  24                 	db	36
  1211  007E47  54                 	db	84	;'T'
  1212  007E48  51                 	db	81	;'Q'
  1213  007E49  20                 	db	32
  1214  007E4A  3C                 	db	60	;'<'
  1215  007E4B  63                 	db	99	;'c'
  1216  007E4C  72                 	db	114	;'r'
  1217  007E4D  3E                 	db	62	;'>'
  1218  007E4E  20                 	db	32
  1219  007E4F  20                 	db	32
  1220  007E50  20                 	db	32
  1221  007E51  20                 	db	32
  1222  007E52  20                 	db	32
  1223  007E53  20                 	db	32
  1224  007E54  20                 	db	32
  1225  007E55  20                 	db	32
  1226  007E56  20                 	db	32
  1227  007E57  47                 	db	71	;'G'
  1228  007E58  65                 	db	101	;'e'
  1229  007E59  74                 	db	116	;'t'
  1230  007E5A  20                 	db	32
  1231  007E5B  73                 	db	115	;'s'
  1232  007E5C  74                 	db	116	;'t'
  1233  007E5D  61                 	db	97	;'a'
  1234  007E5E  74                 	db	116	;'t'
  1235  007E5F  75                 	db	117	;'u'
  1236  007E60  73                 	db	115	;'s'
  1237  007E61  20                 	db	32
  1238  007E62  66                 	db	102	;'f'
  1239  007E63  72                 	db	114	;'r'
  1240  007E64  6F                 	db	111	;'o'
  1241  007E65  6D                 	db	109	;'m'
  1242  007E66  20                 	db	32
  1243  007E67  54                 	db	84	;'T'
  1244  007E68  58                 	db	88	;'X'
  1245  007E69  20                 	db	32
  1246  007E6A  73                 	db	115	;'s'
  1247  007E6B  79                 	db	121	;'y'
  1248  007E6C  73                 	db	115	;'s'
  1249  007E6D  74                 	db	116	;'t'
  1250  007E6E  65                 	db	101	;'e'
  1251  007E6F  6D                 	db	109	;'m'
  1252  007E70  2E                 	db	46
  1253  007E71  0D                 	db	13
  1254  007E72  0A                 	db	10
  1255  007E73  00                 	db	0
  1256  007E74                     STR_29:
  1257                           
  1258                           ; BSR set to: 0
  1259  007E74  24                 	db	36
  1260  007E75  52                 	db	82	;'R'
  1261  007E76  51                 	db	81	;'Q'
  1262  007E77  20                 	db	32
  1263  007E78  3C                 	db	60	;'<'
  1264  007E79  63                 	db	99	;'c'
  1265  007E7A  72                 	db	114	;'r'
  1266  007E7B  3E                 	db	62	;'>'
  1267  007E7C  20                 	db	32
  1268  007E7D  20                 	db	32
  1269  007E7E  20                 	db	32
  1270  007E7F  20                 	db	32
  1271  007E80  20                 	db	32
  1272  007E81  20                 	db	32
  1273  007E82  20                 	db	32
  1274  007E83  20                 	db	32
  1275  007E84  20                 	db	32
  1276  007E85  47                 	db	71	;'G'
  1277  007E86  65                 	db	101	;'e'
  1278  007E87  74                 	db	116	;'t'
  1279  007E88  20                 	db	32
  1280  007E89  73                 	db	115	;'s'
  1281  007E8A  74                 	db	116	;'t'
  1282  007E8B  61                 	db	97	;'a'
  1283  007E8C  74                 	db	116	;'t'
  1284  007E8D  75                 	db	117	;'u'
  1285  007E8E  73                 	db	115	;'s'
  1286  007E8F  20                 	db	32
  1287  007E90  66                 	db	102	;'f'
  1288  007E91  72                 	db	114	;'r'
  1289  007E92  6F                 	db	111	;'o'
  1290  007E93  6D                 	db	109	;'m'
  1291  007E94  20                 	db	32
  1292  007E95  52                 	db	82	;'R'
  1293  007E96  58                 	db	88	;'X'
  1294  007E97  20                 	db	32
  1295  007E98  73                 	db	115	;'s'
  1296  007E99  79                 	db	121	;'y'
  1297  007E9A  73                 	db	115	;'s'
  1298  007E9B  74                 	db	116	;'t'
  1299  007E9C  65                 	db	101	;'e'
  1300  007E9D  6D                 	db	109	;'m'
  1301  007E9E  0D                 	db	13
  1302  007E9F  0A                 	db	10
  1303  007EA0  00                 	db	0
  1304  007EA1                     STR_38:
  1305                           
  1306                           ; BSR set to: 0
  1307  007EA1  24                 	db	36
  1308  007EA2  53                 	db	83	;'S'
  1309  007EA3  51                 	db	81	;'Q'
  1310  007EA4  20                 	db	32
  1311  007EA5  3C                 	db	60	;'<'
  1312  007EA6  58                 	db	88	;'X'
  1313  007EA7  3E                 	db	62	;'>'
  1314  007EA8  3C                 	db	60	;'<'
  1315  007EA9  63                 	db	99	;'c'
  1316  007EAA  72                 	db	114	;'r'
  1317  007EAB  3E                 	db	62	;'>'
  1318  007EAC  20                 	db	32
  1319  007EAD  20                 	db	32
  1320  007EAE  20                 	db	32
  1321  007EAF  20                 	db	32
  1322  007EB0  20                 	db	32
  1323  007EB1  20                 	db	32
  1324  007EB2  47                 	db	71	;'G'
  1325  007EB3  65                 	db	101	;'e'
  1326  007EB4  74                 	db	116	;'t'
  1327  007EB5  20                 	db	32
  1328  007EB6  73                 	db	115	;'s'
  1329  007EB7  79                 	db	121	;'y'
  1330  007EB8  73                 	db	115	;'s'
  1331  007EB9  74                 	db	116	;'t'
  1332  007EBA  65                 	db	101	;'e'
  1333  007EBB  6D                 	db	109	;'m'
  1334  007EBC  20                 	db	32
  1335  007EBD  73                 	db	115	;'s'
  1336  007EBE  74                 	db	116	;'t'
  1337  007EBF  61                 	db	97	;'a'
  1338  007EC0  74                 	db	116	;'t'
  1339  007EC1  75                 	db	117	;'u'
  1340  007EC2  73                 	db	115	;'s'
  1341  007EC3  2E                 	db	46
  1342  007EC4  0D                 	db	13
  1343  007EC5  0A                 	db	10
  1344  007EC6  00                 	db	0
  1345  007EC7                     STR_39:
  1346                           
  1347                           ; BSR set to: 0
  1348  007EC7  24                 	db	36
  1349  007EC8  53                 	db	83	;'S'
  1350  007EC9  4C                 	db	76	;'L'
  1351  007ECA  20                 	db	32
  1352  007ECB  3C                 	db	60	;'<'
  1353  007ECC  63                 	db	99	;'c'
  1354  007ECD  72                 	db	114	;'r'
  1355  007ECE  3E                 	db	62	;'>'
  1356  007ECF  20                 	db	32
  1357  007ED0  20                 	db	32
  1358  007ED1  20                 	db	32
  1359  007ED2  20                 	db	32
  1360  007ED3  20                 	db	32
  1361  007ED4  20                 	db	32
  1362  007ED5  20                 	db	32
  1363  007ED6  20                 	db	32
  1364  007ED7  20                 	db	32
  1365  007ED8  54                 	db	84	;'T'
  1366  007ED9  65                 	db	101	;'e'
  1367  007EDA  73                 	db	115	;'s'
  1368  007EDB  74                 	db	116	;'t'
  1369  007EDC  20                 	db	32
  1370  007EDD  73                 	db	115	;'s'
  1371  007EDE  79                 	db	121	;'y'
  1372  007EDF  73                 	db	115	;'s'
  1373  007EE0  74                 	db	116	;'t'
  1374  007EE1  65                 	db	101	;'e'
  1375  007EE2  6D                 	db	109	;'m'
  1376  007EE3  20                 	db	32
  1377  007EE4  4C                 	db	76	;'L'
  1378  007EE5  45                 	db	69	;'E'
  1379  007EE6  44                 	db	68	;'D'
  1380  007EE7  73                 	db	115	;'s'
  1381  007EE8  2E                 	db	46
  1382  007EE9  0D                 	db	13
  1383  007EEA  0A                 	db	10
  1384  007EEB  00                 	db	0
  1385  007EEC                     STR_12:
  1386                           
  1387                           ; BSR set to: 0
  1388  007EEC  2A                 	db	42
  1389  007EED  2A                 	db	42
  1390  007EEE  2A                 	db	42
  1391  007EEF  2A                 	db	42
  1392  007EF0  2A                 	db	42
  1393  007EF1  2A                 	db	42
  1394  007EF2  2A                 	db	42
  1395  007EF3  2A                 	db	42
  1396  007EF4  2A                 	db	42
  1397  007EF5  2A                 	db	42
  1398  007EF6  2A                 	db	42
  1399  007EF7  2A                 	db	42
  1400  007EF8  2A                 	db	42
  1401  007EF9  2A                 	db	42
  1402  007EFA  2A                 	db	42
  1403  007EFB  2A                 	db	42
  1404  007EFC  2A                 	db	42
  1405  007EFD  2A                 	db	42
  1406  007EFE  2A                 	db	42
  1407  007EFF  2A                 	db	42
  1408  007F00  2A                 	db	42
  1409  007F01  2A                 	db	42
  1410  007F02  2A                 	db	42
  1411  007F03  2A                 	db	42
  1412  007F04  2A                 	db	42
  1413  007F05  2A                 	db	42
  1414  007F06  2A                 	db	42
  1415  007F07  20                 	db	32
  1416  007F08  0A                 	db	10
  1417  007F09  0D                 	db	13
  1418  007F0A  00                 	db	0
  1419  007F0B                     STR_34:
  1420                           
  1421                           ; BSR set to: 0
  1422  007F0B  0A                 	db	10
  1423  007F0C  0D                 	db	13
  1424  007F0D  3C                 	db	60	;'<'
  1425  007F0E  43                 	db	67	;'C'
  1426  007F0F  6F                 	db	111	;'o'
  1427  007F10  6D                 	db	109	;'m'
  1428  007F11  6D                 	db	109	;'m'
  1429  007F12  6F                 	db	111	;'o'
  1430  007F13  6E                 	db	110	;'n'
  1431  007F14  20                 	db	32
  1432  007F15  73                 	db	115	;'s'
  1433  007F16  79                 	db	121	;'y'
  1434  007F17  73                 	db	115	;'s'
  1435  007F18  74                 	db	116	;'t'
  1436  007F19  65                 	db	101	;'e'
  1437  007F1A  6D                 	db	109	;'m'
  1438  007F1B  20                 	db	32
  1439  007F1C  63                 	db	99	;'c'
  1440  007F1D  6F                 	db	111	;'o'
  1441  007F1E  6D                 	db	109	;'m'
  1442  007F1F  6D                 	db	109	;'m'
  1443  007F20  61                 	db	97	;'a'
  1444  007F21  6E                 	db	110	;'n'
  1445  007F22  64                 	db	100	;'d'
  1446  007F23  73                 	db	115	;'s'
  1447  007F24  3E                 	db	62	;'>'
  1448  007F25  0A                 	db	10
  1449  007F26  0D                 	db	13
  1450  007F27  00                 	db	0
  1451  007F28                     STR_27:
  1452                           
  1453                           ; BSR set to: 0
  1454  007F28  0A                 	db	10
  1455  007F29  0D                 	db	13
  1456  007F2A  3C                 	db	60	;'<'
  1457  007F2B  52                 	db	82	;'R'
  1458  007F2C  58                 	db	88	;'X'
  1459  007F2D  20                 	db	32
  1460  007F2E  73                 	db	115	;'s'
  1461  007F2F  79                 	db	121	;'y'
  1462  007F30  73                 	db	115	;'s'
  1463  007F31  74                 	db	116	;'t'
  1464  007F32  65                 	db	101	;'e'
  1465  007F33  6D                 	db	109	;'m'
  1466  007F34  20                 	db	32
  1467  007F35  63                 	db	99	;'c'
  1468  007F36  6F                 	db	111	;'o'
  1469  007F37  6D                 	db	109	;'m'
  1470  007F38  6D                 	db	109	;'m'
  1471  007F39  61                 	db	97	;'a'
  1472  007F3A  6E                 	db	110	;'n'
  1473  007F3B  64                 	db	100	;'d'
  1474  007F3C  73                 	db	115	;'s'
  1475  007F3D  3E                 	db	62	;'>'
  1476  007F3E  0A                 	db	10
  1477  007F3F  0D                 	db	13
  1478  007F40  00                 	db	0
  1479  007F41                     STR_21:
  1480                           
  1481                           ; BSR set to: 0
  1482  007F41  3C                 	db	60	;'<'
  1483  007F42  54                 	db	84	;'T'
  1484  007F43  58                 	db	88	;'X'
  1485  007F44  20                 	db	32
  1486  007F45  73                 	db	115	;'s'
  1487  007F46  79                 	db	121	;'y'
  1488  007F47  73                 	db	115	;'s'
  1489  007F48  74                 	db	116	;'t'
  1490  007F49  65                 	db	101	;'e'
  1491  007F4A  6D                 	db	109	;'m'
  1492  007F4B  20                 	db	32
  1493  007F4C  63                 	db	99	;'c'
  1494  007F4D  6F                 	db	111	;'o'
  1495  007F4E  6D                 	db	109	;'m'
  1496  007F4F  6D                 	db	109	;'m'
  1497  007F50  61                 	db	97	;'a'
  1498  007F51  6E                 	db	110	;'n'
  1499  007F52  64                 	db	100	;'d'
  1500  007F53  73                 	db	115	;'s'
  1501  007F54  3E                 	db	62	;'>'
  1502  007F55  0A                 	db	10
  1503  007F56  0D                 	db	13
  1504  007F57  00                 	db	0
  1505  007F58                     STR_13:
  1506                           
  1507                           ; BSR set to: 0
  1508  007F58  46                 	db	70	;'F'
  1509  007F59  41                 	db	65	;'A'
  1510  007F5A  53                 	db	83	;'S'
  1511  007F5B  54                 	db	84	;'T'
  1512  007F5C  20                 	db	32
  1513  007F5D  4C                 	db	76	;'L'
  1514  007F5E  49                 	db	73	;'I'
  1515  007F5F  4E                 	db	78	;'N'
  1516  007F60  4B                 	db	75	;'K'
  1517  007F61  20                 	db	32
  1518  007F62  53                 	db	83	;'S'
  1519  007F63  59                 	db	89	;'Y'
  1520  007F64  53                 	db	83	;'S'
  1521  007F65  54                 	db	84	;'T'
  1522  007F66  45                 	db	69	;'E'
  1523  007F67  4D                 	db	77	;'M'
  1524  007F68  20                 	db	32
  1525  007F69  0A                 	db	10
  1526  007F6A  0D                 	db	13
  1527  007F6B  00                 	db	0
  1528  007F6C                     STR_18:
  1529                           
  1530                           ; BSR set to: 0
  1531  007F6C  43                 	db	67	;'C'
  1532  007F6D  6F                 	db	111	;'o'
  1533  007F6E  6D                 	db	109	;'m'
  1534  007F6F  70                 	db	112	;'p'
  1535  007F70  69                 	db	105	;'i'
  1536  007F71  6C                 	db	108	;'l'
  1537  007F72  65                 	db	101	;'e'
  1538  007F73  20                 	db	32
  1539  007F74  74                 	db	116	;'t'
  1540  007F75  69                 	db	105	;'i'
  1541  007F76  6D                 	db	109	;'m'
  1542  007F77  65                 	db	101	;'e'
  1543  007F78  3A                 	db	58	;':'
  1544  007F79  20                 	db	32
  1545  007F7A  25                 	db	37
  1546  007F7B  73                 	db	115	;'s'
  1547  007F7C  20                 	db	32
  1548  007F7D  0A                 	db	10
  1549  007F7E  0D                 	db	13
  1550  007F7F  00                 	db	0
  1551  007F80                     STR_16:
  1552                           
  1553                           ; BSR set to: 0
  1554  007F80  43                 	db	67	;'C'
  1555  007F81  6F                 	db	111	;'o'
  1556  007F82  6D                 	db	109	;'m'
  1557  007F83  70                 	db	112	;'p'
  1558  007F84  69                 	db	105	;'i'
  1559  007F85  6C                 	db	108	;'l'
  1560  007F86  65                 	db	101	;'e'
  1561  007F87  20                 	db	32
  1562  007F88  64                 	db	100	;'d'
  1563  007F89  61                 	db	97	;'a'
  1564  007F8A  74                 	db	116	;'t'
  1565  007F8B  65                 	db	101	;'e'
  1566  007F8C  3A                 	db	58	;':'
  1567  007F8D  20                 	db	32
  1568  007F8E  25                 	db	37
  1569  007F8F  73                 	db	115	;'s'
  1570  007F90  20                 	db	32
  1571  007F91  0A                 	db	10
  1572  007F92  0D                 	db	13
  1573  007F93  00                 	db	0
  1574  007F94                     STR_3:
  1575                           
  1576                           ; BSR set to: 0
  1577  007F94  53                 	db	83	;'S'
  1578  007F95  41                 	db	65	;'A'
  1579  007F96  4D                 	db	77	;'M'
  1580  007F97  50                 	db	80	;'P'
  1581  007F98  4C                 	db	76	;'L'
  1582  007F99  45                 	db	69	;'E'
  1583  007F9A  20                 	db	32
  1584  007F9B  43                 	db	67	;'C'
  1585  007F9C  48                 	db	72	;'H'
  1586  007F9D  41                 	db	65	;'A'
  1587  007F9E  4E                 	db	78	;'N'
  1588  007F9F  4E                 	db	78	;'N'
  1589  007FA0  45                 	db	69	;'E'
  1590  007FA1  4C                 	db	76	;'L'
  1591  007FA2  20                 	db	32
  1592  007FA3  4E                 	db	78	;'N'
  1593  007FA4  41                 	db	65	;'A'
  1594  007FA5  4D                 	db	77	;'M'
  1595  007FA6  45                 	db	69	;'E'
  1596  007FA7  00                 	db	0
  1597  007FA8                     STR_14:
  1598                           
  1599                           ; BSR set to: 0
  1600  007FA8  53                 	db	83	;'S'
  1601  007FA9  57                 	db	87	;'W'
  1602  007FAA  20                 	db	32
  1603  007FAB  56                 	db	86	;'V'
  1604  007FAC  45                 	db	69	;'E'
  1605  007FAD  53                 	db	83	;'S'
  1606  007FAE  52                 	db	82	;'R'
  1607  007FAF  49                 	db	73	;'I'
  1608  007FB0  4F                 	db	79	;'O'
  1609  007FB1  4E                 	db	78	;'N'
  1610  007FB2  3A                 	db	58	;':'
  1611  007FB3  20                 	db	32
  1612  007FB4  25                 	db	37
  1613  007FB5  73                 	db	115	;'s'
  1614  007FB6  20                 	db	32
  1615  007FB7  0A                 	db	10
  1616  007FB8  0D                 	db	13
  1617  007FB9  00                 	db	0
  1618  007FBA                     STR_17:
  1619                           
  1620                           ; BSR set to: 0
  1621  007FBA  4D                 	db	77	;'M'
  1622  007FBB  61                 	db	97	;'a'
  1623  007FBC  72                 	db	114	;'r'
  1624  007FBD  20                 	db	32
  1625  007FBE  32                 	db	50	;'2'
  1626  007FBF  35                 	db	53	;'5'
  1627  007FC0  20                 	db	32
  1628  007FC1  32                 	db	50	;'2'
  1629  007FC2  30                 	db	48	;'0'
  1630  007FC3  31                 	db	49	;'1'
  1631  007FC4  38                 	db	56	;'8'
  1632  007FC5  00                 	db	0
  1633  007FC6                     STR_8:
  1634                           
  1635                           ; BSR set to: 0
  1636  007FC6  4E                 	db	78	;'N'
  1637  007FC7  4F                 	db	79	;'O'
  1638  007FC8  54                 	db	84	;'T'
  1639  007FC9  20                 	db	32
  1640  007FCA  4F                 	db	79	;'O'
  1641  007FCB  2E                 	db	46
  1642  007FCC  4B                 	db	75	;'K'
  1643  007FCD  20                 	db	32
  1644  007FCE  0A                 	db	10
  1645  007FCF  0D                 	db	13
  1646  007FD0  00                 	db	0
  1647  007FD1                     STR_1:
  1648                           
  1649                           ; BSR set to: 0
  1650  007FD1  4E                 	db	78	;'N'
  1651  007FD2  4F                 	db	79	;'O'
  1652  007FD3  54                 	db	84	;'T'
  1653  007FD4  20                 	db	32
  1654  007FD5  4F                 	db	79	;'O'
  1655  007FD6  4B                 	db	75	;'K'
  1656  007FD7  20                 	db	32
  1657  007FD8  0A                 	db	10
  1658  007FD9  0D                 	db	13
  1659  007FDA  00                 	db	0
  1660  007FDB                     STR_19:
  1661                           
  1662                           ; BSR set to: 0
  1663  007FDB  31                 	db	49	;'1'
  1664  007FDC  37                 	db	55	;'7'
  1665  007FDD  3A                 	db	58	;':'
  1666  007FDE  35                 	db	53	;'5'
  1667  007FDF  35                 	db	53	;'5'
  1668  007FE0  3A                 	db	58	;':'
  1669  007FE1  34                 	db	52	;'4'
  1670  007FE2  32                 	db	50	;'2'
  1671  007FE3  00                 	db	0
  1672  007FE4                     STR_7:
  1673                           
  1674                           ; BSR set to: 0
  1675  007FE4  0A                 	db	10
  1676  007FE5  0D                 	db	13
  1677  007FE6  20                 	db	32
  1678  007FE7  4F                 	db	79	;'O'
  1679  007FE8  4B                 	db	75	;'K'
  1680  007FE9  20                 	db	32
  1681  007FEA  0A                 	db	10
  1682  007FEB  0D                 	db	13
  1683  007FEC  00                 	db	0
  1684  007FED                     STR_40:
  1685                           
  1686                           ; BSR set to: 0
  1687  007FED  28                 	db	40
  1688  007FEE  6E                 	db	110	;'n'
  1689  007FEF  75                 	db	117	;'u'
  1690  007FF0  6C                 	db	108	;'l'
  1691  007FF1  6C                 	db	108	;'l'
  1692  007FF2  29                 	db	41
  1693  007FF3  00                 	db	0
  1694  007FF4                     STR_15:
  1695                           
  1696                           ; BSR set to: 0
  1697  007FF4  31                 	db	49	;'1'
  1698  007FF5  5F                 	db	95	;'_'
  1699  007FF6  30                 	db	48	;'0'
  1700  007FF7  30                 	db	48	;'0'
  1701  007FF8  32                 	db	50	;'2'
  1702  007FF9  00                 	db	0
  1703  007FFA                     STR_6:
  1704                           
  1705                           ; BSR set to: 0
  1706  007FFA  25                 	db	37
  1707  007FFB  64                 	db	100	;'d'
  1708  007FFC  20                 	db	32
  1709  007FFD  09                 	db	9
  1710  007FFE  00                 	db	0
  1711  0000                     
  1712                           ; #config settings
  1713  007FFF  00                 	db	0	; dummy byte at the end
  1714  0000                     
  1715                           	psect	nvCOMRAM
  1716  000046                     __pnvCOMRAM:
  1717                           	opt stack 0
  1718  000046                     _timer0ReloadVal:
  1719                           	opt stack 0
  1720  000046                     	ds	2
  1721                           
  1722                           	psect	nvBANK0
  1723  0000D7                     __pnvBANK0:
  1724                           	opt stack 0
  1725  0000D7                     _TMR0_InterruptHandler:
  1726                           	opt stack 0
  1727  0000D7                     	ds	2
  1728  0000D9                     _eusart1TxBufferRemaining:
  1729                           	opt stack 0
  1730  0000D9                     	ds	1
  1731  0000                     _ANSELA	set	3896
  1732  0000                     _ANSELE	set	3900
  1733  0000                     _ANSELD	set	3899
  1734  0000                     _ANSELB	set	3897
  1735  0000                     _ANSELC	set	3898
  1736  0000                     _ADCON0bits	set	4034
  1737  0000                     _ADRESH	set	4036
  1738  0000                     _ADRESL	set	4035
  1739  0000                     _ADCON2	set	4032
  1740  0000                     _ADCON1	set	4033
  1741  0000                     _ADCON0	set	4034
  1742  0000                     _T0CONbits	set	4053
  1743  0000                     _T0CON	set	4053
  1744  0000                     _TMR0L	set	4054
  1745  0000                     _TMR0H	set	4055
  1746  0000                     _EEDATA	set	4008
  1747  0000                     _EEADR	set	4009
  1748  0000                     _EECON2	set	4007
  1749  0000                     _EECON1bits	set	4006
  1750  0000                     _TABLAT	set	4085
  1751  0000                     _TBLPTRL	set	4086
  1752  0000                     _TBLPTRH	set	4087
  1753  0000                     _TBLPTRU	set	4088
  1754  0000                     _INTCON2bits	set	4081
  1755  0000                     _WPUB	set	3937
  1756  0000                     _TRISD	set	3989
  1757  0000                     _TRISC	set	3988
  1758  0000                     _TRISB	set	3987
  1759  0000                     _TRISA	set	3986
  1760  0000                     _TRISE	set	3990
  1761  0000                     _LATC	set	3979
  1762  0000                     _LATB	set	3978
  1763  0000                     _LATA	set	3977
  1764  0000                     _LATD	set	3980
  1765  0000                     _LATE	set	3981
  1766  0000                     _RCREG1	set	4014
  1767  0000                     _RCSTA1bits	set	4011
  1768  0000                     _TXREG1	set	4013
  1769  0000                     _SPBRGH1	set	4016
  1770  0000                     _SPBRG1	set	4015
  1771  0000                     _TXSTA1	set	4012
  1772  0000                     _RCSTA1	set	4011
  1773  0000                     _BAUDCON1	set	4024
  1774  0000                     _PIR1bits	set	3998
  1775  0000                     _PIE1bits	set	3997
  1776  0000                     _PIR2bits	set	4001
  1777  0000                     _PIE2bits	set	4000
  1778  0000                     _RCONbits	set	4048
  1779  0000                     _OSCTUNE	set	3995
  1780  0000                     _OSCCON2	set	4050
  1781  0000                     _OSCCON	set	4051
  1782  0000                     _LATAbits	set	3977
  1783  0000                     _LATDbits	set	3980
  1784  0000                     _INTCONbits	set	4082
  1785  0000                     _IOCB	set	3938
  1786  0000                     _LATCbits	set	3979
  1787  0000                     _LATBbits	set	3978
  1788                           
  1789                           	psect	cinit
  1790  001EA6                     __pcinit:
  1791                           	opt stack 0
  1792  001EA6                     start_initialization:
  1793                           	opt stack 0
  1794  001EA6                     __initialization:
  1795                           	opt stack 0
  1796                           
  1797                           ; Initialize objects allocated to BANK0 (16 bytes)
  1798                           ; load TBLPTR registers with __pidataBANK0
  1799  001EA6  0E78               	movlw	low __pidataBANK0
  1800  001EA8  6EF6               	movwf	tblptrl,c
  1801  001EAA  0E2A               	movlw	high __pidataBANK0
  1802  001EAC  6EF7               	movwf	tblptrh,c
  1803  001EAE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1804  001EB0  6EF8               	movwf	tblptru,c
  1805  001EB2  EE00  F0C7         	lfsr	0,__pdataBANK0
  1806  001EB6  EE10 F010          	lfsr	1,16
  1807  001EBA                     copy_data0:
  1808  001EBA  0009               	tblrd		*+
  1809  001EBC  CFF5 FFEE          	movff	tablat,postinc0
  1810  001EC0  50E5               	movf	postdec1,w,c
  1811  001EC2  50E1               	movf	fsr1l,w,c
  1812  001EC4  E1FA               	bnz	copy_data0
  1813                           
  1814                           ; Initialize objects allocated to COMRAM (4 bytes)
  1815                           ; load TBLPTR registers with __pidataCOMRAM
  1816  001EC6  0EB0               	movlw	low __pidataCOMRAM
  1817  001EC8  6EF6               	movwf	tblptrl,c
  1818  001ECA  0E2A               	movlw	high __pidataCOMRAM
  1819  001ECC  6EF7               	movwf	tblptrh,c
  1820  001ECE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1821  001ED0  6EF8               	movwf	tblptru,c
  1822  001ED2  EE00  F042         	lfsr	0,__pdataCOMRAM
  1823  001ED6  EE10 F004          	lfsr	1,4
  1824  001EDA                     copy_data1:
  1825  001EDA  0009               	tblrd		*+
  1826  001EDC  CFF5 FFEE          	movff	tablat,postinc0
  1827  001EE0  50E5               	movf	postdec1,w,c
  1828  001EE2  50E1               	movf	fsr1l,w,c
  1829  001EE4  E1FA               	bnz	copy_data1
  1830                           
  1831                           ; Clear objects allocated to BANK1 (214 bytes)
  1832  001EE6  EE01  F000         	lfsr	0,__pbssBANK1
  1833  001EEA  0ED6               	movlw	214
  1834  001EEC                     clear_0:
  1835  001EEC  6AEE               	clrf	postinc0,c
  1836  001EEE  06E8               	decf	wreg,f,c
  1837  001EF0  E1FD               	bnz	clear_0
  1838                           
  1839                           ; Clear objects allocated to BANK0 (26 bytes)
  1840  001EF2  EE00  F0AD         	lfsr	0,__pbssBANK0
  1841  001EF6  0E1A               	movlw	26
  1842  001EF8                     clear_1:
  1843  001EF8  6AEE               	clrf	postinc0,c
  1844  001EFA  06E8               	decf	wreg,f,c
  1845  001EFC  E1FD               	bnz	clear_1
  1846                           
  1847                           ; Clear objects allocated to COMRAM (17 bytes)
  1848  001EFE  EE00  F031         	lfsr	0,__pbssCOMRAM
  1849  001F02  0E11               	movlw	17
  1850  001F04                     clear_2:
  1851  001F04  6AEE               	clrf	postinc0,c
  1852  001F06  06E8               	decf	wreg,f,c
  1853  001F08  E1FD               	bnz	clear_2
  1854  001F0A                     end_of_initialization:
  1855                           	opt stack 0
  1856  001F0A                     __end_of__initialization:
  1857                           	opt stack 0
  1858  001F0A  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1859  001F0C  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1860  001F0E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1861  001F10  6EF8               	movwf	tblptru,c
  1862  001F12  0100               	movlb	0
  1863  001F14  EFEA  F011         	goto	_main	;jump to C main() function
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           
  1873                           	psect	bssCOMRAM
  1874  000031                     __pbssCOMRAM:
  1875                           	opt stack 0
  1876  000031                     _numOfValidateSamples:
  1877                           	opt stack 0
  1878  000031                     	ds	4
  1879  000035                     TMR0_ISR@CountCallBack:
  1880                           	opt stack 0
  1881  000035                     	ds	2
  1882  000037                     _channelNum:
  1883                           	opt stack 0
  1884  000037                     	ds	2
  1885  000039                     _eusart1RxTail:
  1886                           	opt stack 0
  1887  000039                     	ds	1
  1888  00003A                     _eusart1RxHead:
  1889                           	opt stack 0
  1890  00003A                     	ds	1
  1891  00003B                     _eusart1TxTail:
  1892                           	opt stack 0
  1893  00003B                     	ds	1
  1894  00003C                     _eusart1TxHead:
  1895                           	opt stack 0
  1896  00003C                     	ds	1
  1897  00003D                     _adcSampleMode:
  1898                           	opt stack 0
  1899  00003D                     	ds	1
  1900  00003E                     _numOfReadSamples:
  1901                           	opt stack 0
  1902  00003E                     	ds	4
  1903                           tblptru	equ	0xFF8
  1904                           tblptrh	equ	0xFF7
  1905                           tblptrl	equ	0xFF6
  1906                           tablat	equ	0xFF5
  1907                           postinc0	equ	0xFEE
  1908                           wreg	equ	0xFE8
  1909                           postdec1	equ	0xFE5
  1910                           fsr1l	equ	0xFE1
  1911                           
  1912                           	psect	dataCOMRAM
  1913  000042                     __pdataCOMRAM:
  1914                           	opt stack 0
  1915  000042                     _writeAddress:
  1916                           	opt stack 0
  1917  000042                     	ds	4
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           postdec1	equ	0xFE5
  1925                           fsr1l	equ	0xFE1
  1926                           
  1927                           	psect	bssBANK0
  1928  0000AD                     __pbssBANK0:
  1929                           	opt stack 0
  1930  0000AD                     _mcuRunTimeIn5SecTicks:
  1931                           	opt stack 0
  1932  0000AD                     	ds	4
  1933  0000B1                     _errno:
  1934                           	opt stack 0
  1935  0000B1                     	ds	2
  1936  0000B3                     _sampleCount:
  1937                           	opt stack 0
  1938  0000B3                     	ds	2
  1939  0000B5                     _numSamples:
  1940                           	opt stack 0
  1941  0000B5                     	ds	2
  1942  0000B7                     _count:
  1943                           	opt stack 0
  1944  0000B7                     	ds	2
  1945  0000B9                     _isReWriteDone:
  1946                           	opt stack 0
  1947  0000B9                     	ds	1
  1948  0000BA                     _msgCount:
  1949                           	opt stack 0
  1950  0000BA                     	ds	1
  1951  0000BB                     _crcGiven:
  1952                           	opt stack 0
  1953  0000BB                     	ds	1
  1954  0000BC                     _crcCalc:
  1955                           	opt stack 0
  1956  0000BC                     	ds	1
  1957  0000BD                     _dataSize:
  1958                           	opt stack 0
  1959  0000BD                     	ds	1
  1960  0000BE                     _request:
  1961                           	opt stack 0
  1962  0000BE                     	ds	1
  1963  0000BF                     _group:
  1964                           	opt stack 0
  1965  0000BF                     	ds	1
  1966  0000C0                     _cState:
  1967                           	opt stack 0
  1968  0000C0                     	ds	1
  1969  0000C1                     _eusart1RxCount:
  1970                           	opt stack 0
  1971  0000C1                     	ds	1
  1972  0000C2                     _channel:
  1973                           	opt stack 0
  1974  0000C2                     	ds	1
  1975  0000C3                     _needToSample:
  1976                           	opt stack 0
  1977  0000C3                     	ds	1
  1978  0000C4                     _TimerKeepAliveFlag:
  1979                           	opt stack 0
  1980  0000C4                     	ds	1
  1981  0000C5                     _TimerSamplingFlag:
  1982                           	opt stack 0
  1983  0000C5                     	ds	1
  1984  0000C6                     _TimerOneSecFlag:
  1985                           	opt stack 0
  1986  0000C6                     	ds	1
  1987                           tblptru	equ	0xFF8
  1988                           tblptrh	equ	0xFF7
  1989                           tblptrl	equ	0xFF6
  1990                           tablat	equ	0xFF5
  1991                           postinc0	equ	0xFEE
  1992                           wreg	equ	0xFE8
  1993                           postdec1	equ	0xFE5
  1994                           fsr1l	equ	0xFE1
  1995                           
  1996                           	psect	dataBANK0
  1997  0000C7                     __pdataBANK0:
  1998                           	opt stack 0
  1999  0000C7                     _groupsArray:
  2000                           	opt stack 0
  2001  0000C7                     	ds	12
  2002  0000D3                     _readAddress:
  2003                           	opt stack 0
  2004  0000D3                     	ds	4
  2005                           tblptru	equ	0xFF8
  2006                           tblptrh	equ	0xFF7
  2007                           tblptrl	equ	0xFF6
  2008                           tablat	equ	0xFF5
  2009                           postinc0	equ	0xFEE
  2010                           wreg	equ	0xFE8
  2011                           postdec1	equ	0xFE5
  2012                           fsr1l	equ	0xFE1
  2013                           
  2014                           	psect	bssBANK1
  2015  000100                     __pbssBANK1:
  2016                           	opt stack 0
  2017  000100                     _eusart1TxBuffer:
  2018                           	opt stack 0
  2019  000100                     	ds	70
  2020  000146                     _eusart1RxBuffer:
  2021                           	opt stack 0
  2022  000146                     	ds	40
  2023  00016E                     _sampleArray:
  2024                           	opt stack 0
  2025  00016E                     	ds	64
  2026  0001AE                     _rxMsgData:
  2027                           	opt stack 0
  2028  0001AE                     	ds	20
  2029  0001C2                     _rxMsgQueue:
  2030                           	opt stack 0
  2031  0001C2                     	ds	20
  2032                           tblptru	equ	0xFF8
  2033                           tblptrh	equ	0xFF7
  2034                           tblptrl	equ	0xFF6
  2035                           tablat	equ	0xFF5
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           postdec1	equ	0xFE5
  2039                           fsr1l	equ	0xFE1
  2040                           
  2041                           	psect	cstackBANK2
  2042  000200                     __pcstackBANK2:
  2043                           	opt stack 0
  2044  000200                     SampleSingleChannel@dest:
  2045                           	opt stack 0
  2046  000200                     readUartByte@dest:
  2047                           	opt stack 0
  2048                           
  2049                           ; 50 bytes @ 0x0
  2050  000200                     	ds	50
  2051  000232                     readUartByte@idx:
  2052                           	opt stack 0
  2053  000232                     _SampleSingleChannel$2939:
  2054                           	opt stack 0
  2055                           
  2056                           ; 3 bytes @ 0x32
  2057  000232                     	ds	2
  2058  000234                     readUartByte@chRec:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0x34
  2062  000234                     	ds	1
  2063  000235                     SampleSingleChannel@_adcResult:
  2064                           	opt stack 0
  2065                           
  2066                           ; 2 bytes @ 0x35
  2067  000235                     	ds	2
  2068  000237                     SampleSingleChannel@adcRes:
  2069                           	opt stack 0
  2070                           
  2071                           ; 2 bytes @ 0x37
  2072  000237                     	ds	2
  2073                           tblptru	equ	0xFF8
  2074                           tblptrh	equ	0xFF7
  2075                           tblptrl	equ	0xFF6
  2076                           tablat	equ	0xFF5
  2077                           postinc0	equ	0xFEE
  2078                           wreg	equ	0xFE8
  2079                           postdec1	equ	0xFE5
  2080                           fsr1l	equ	0xFE1
  2081                           
  2082                           	psect	cstackBANK0
  2083  000060                     __pcstackBANK0:
  2084                           	opt stack 0
  2085  000060                     sprintf@flag:
  2086                           	opt stack 0
  2087  000060                     ___ftdiv@cntr:
  2088                           	opt stack 0
  2089  000060                     strtol@sign:
  2090                           	opt stack 0
  2091                           
  2092                           ; 1 bytes @ 0x0
  2093  000060                     	ds	1
  2094  000061                     sprintf@prec:
  2095                           	opt stack 0
  2096  000061                     ___ftdiv@f3:
  2097                           	opt stack 0
  2098  000061                     strtol@a:
  2099                           	opt stack 0
  2100                           
  2101                           ; 4 bytes @ 0x1
  2102  000061                     	ds	1
  2103  000062                     sprintf@ap:
  2104                           	opt stack 0
  2105                           
  2106                           ; 2 bytes @ 0x2
  2107  000062                     	ds	2
  2108  000064                     ___ftdiv@exp:
  2109                           	opt stack 0
  2110  000064                     sprintf@cp:
  2111                           	opt stack 0
  2112                           
  2113                           ; 2 bytes @ 0x4
  2114  000064                     	ds	1
  2115  000065                     ___ftdiv@sign:
  2116                           	opt stack 0
  2117  000065                     strtol@c:
  2118                           	opt stack 0
  2119                           
  2120                           ; 1 bytes @ 0x5
  2121  000065                     	ds	1
  2122  000066                     ?___ftmul:
  2123                           	opt stack 0
  2124  000066                     ?_GetIntFromUartData:
  2125                           	opt stack 0
  2126  000066                     GetIntFromUartData@data:
  2127                           	opt stack 0
  2128  000066                     sprintf@val:
  2129                           	opt stack 0
  2130  000066                     ___ftmul@f1:
  2131                           	opt stack 0
  2132                           
  2133                           ; 3 bytes @ 0x6
  2134  000066                     	ds	2
  2135  000068                     sprintf@c:
  2136                           	opt stack 0
  2137                           
  2138                           ; 1 bytes @ 0x8
  2139  000068                     	ds	1
  2140  000069                     ___ftmul@f2:
  2141                           	opt stack 0
  2142  000069                     SendUartSystemInitMessage@dest:
  2143                           	opt stack 0
  2144  000069                     PrintHelpScreen@dest:
  2145                           	opt stack 0
  2146                           
  2147                           ; 50 bytes @ 0x9
  2148  000069                     	ds	1
  2149  00006A                     GetIntFromUartData@dataRegArr:
  2150                           	opt stack 0
  2151                           
  2152                           ; 8 bytes @ 0xA
  2153  00006A                     	ds	2
  2154  00006C                     ___ftmul@exp:
  2155                           	opt stack 0
  2156                           
  2157                           ; 1 bytes @ 0xC
  2158  00006C                     	ds	1
  2159  00006D                     ___ftmul@f3_as_product:
  2160                           	opt stack 0
  2161                           
  2162                           ; 3 bytes @ 0xD
  2163  00006D                     	ds	3
  2164  000070                     ___ftmul@cntr:
  2165                           	opt stack 0
  2166                           
  2167                           ; 1 bytes @ 0x10
  2168  000070                     	ds	1
  2169  000071                     ___ftmul@sign:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x11
  2173  000071                     	ds	1
  2174  000072                     ?___ftadd:
  2175                           	opt stack 0
  2176  000072                     ?___fttol:
  2177                           	opt stack 0
  2178  000072                     GetIntFromUartData@c:
  2179                           	opt stack 0
  2180  000072                     ___ftadd@f1:
  2181                           	opt stack 0
  2182  000072                     ___fttol@f1:
  2183                           	opt stack 0
  2184                           
  2185                           ; 3 bytes @ 0x12
  2186  000072                     	ds	1
  2187  000073                     GetIntFromUartData@idx:
  2188                           	opt stack 0
  2189                           
  2190                           ; 2 bytes @ 0x13
  2191  000073                     	ds	2
  2192  000075                     AdcSingleSample@data:
  2193                           	opt stack 0
  2194  000075                     ___ftadd@f2:
  2195                           	opt stack 0
  2196                           
  2197                           ; 3 bytes @ 0x15
  2198  000075                     	ds	1
  2199  000076                     ??___fttol:
  2200                           
  2201                           ; 1 bytes @ 0x16
  2202  000076                     	ds	1
  2203  000077                     AdcSingleSample@cType:
  2204                           	opt stack 0
  2205                           
  2206                           ; 1 bytes @ 0x17
  2207  000077                     	ds	1
  2208  000078                     ??___ftadd:
  2209  000078                     AdcSingleSample@retNum:
  2210                           	opt stack 0
  2211                           
  2212                           ; 4 bytes @ 0x18
  2213  000078                     	ds	3
  2214  00007B                     ___ftadd@sign:
  2215                           	opt stack 0
  2216  00007B                     ___fttol@sign1:
  2217                           	opt stack 0
  2218                           
  2219                           ; 1 bytes @ 0x1B
  2220  00007B                     	ds	1
  2221  00007C                     ___ftadd@exp2:
  2222                           	opt stack 0
  2223  00007C                     ___fttol@lval:
  2224                           	opt stack 0
  2225                           
  2226                           ; 4 bytes @ 0x1C
  2227  00007C                     	ds	1
  2228  00007D                     ___ftadd@exp1:
  2229                           	opt stack 0
  2230                           
  2231                           ; 1 bytes @ 0x1D
  2232  00007D                     	ds	1
  2233  00007E                     ?___ftsub:
  2234                           	opt stack 0
  2235  00007E                     ?_eval_poly:
  2236                           	opt stack 0
  2237  00007E                     ___ftsub@f1:
  2238                           	opt stack 0
  2239  00007E                     eval_poly@x:
  2240                           	opt stack 0
  2241                           
  2242                           ; 3 bytes @ 0x1E
  2243  00007E                     	ds	2
  2244  000080                     ___fttol@exp1:
  2245                           	opt stack 0
  2246                           
  2247                           ; 1 bytes @ 0x20
  2248  000080                     	ds	1
  2249  000081                     ?___altoft:
  2250                           	opt stack 0
  2251  000081                     eval_poly@d:
  2252                           	opt stack 0
  2253  000081                     ___ftsub@f2:
  2254                           	opt stack 0
  2255  000081                     ___altoft@c:
  2256                           	opt stack 0
  2257                           
  2258                           ; 4 bytes @ 0x21
  2259  000081                     	ds	2
  2260  000083                     eval_poly@n:
  2261                           	opt stack 0
  2262                           
  2263                           ; 2 bytes @ 0x23
  2264  000083                     	ds	2
  2265  000085                     ??___altoft:
  2266  000085                     eval_poly@res:
  2267                           	opt stack 0
  2268                           
  2269                           ; 3 bytes @ 0x25
  2270  000085                     	ds	3
  2271  000088                     ?_log:
  2272                           	opt stack 0
  2273  000088                     ?_ldexp:
  2274                           	opt stack 0
  2275  000088                     ldexp@value:
  2276                           	opt stack 0
  2277  000088                     log@x:
  2278                           	opt stack 0
  2279                           
  2280                           ; 3 bytes @ 0x28
  2281  000088                     	ds	1
  2282  000089                     ?_floor:
  2283                           	opt stack 0
  2284  000089                     floor@x:
  2285                           	opt stack 0
  2286                           
  2287                           ; 3 bytes @ 0x29
  2288  000089                     	ds	2
  2289  00008B                     ldexp@newexp:
  2290                           	opt stack 0
  2291  00008B                     log@exponent:
  2292                           	opt stack 0
  2293                           
  2294                           ; 2 bytes @ 0x2B
  2295  00008B                     	ds	1
  2296  00008C                     floor@i:
  2297                           	opt stack 0
  2298                           
  2299                           ; 3 bytes @ 0x2C
  2300  00008C                     	ds	1
  2301  00008D                     ??_ldexp:
  2302                           
  2303                           ; 1 bytes @ 0x2D
  2304  00008D                     	ds	2
  2305  00008F                     floor@expon:
  2306                           	opt stack 0
  2307                           
  2308                           ; 2 bytes @ 0x2F
  2309  00008F                     	ds	2
  2310  000091                     ?_exp:
  2311                           	opt stack 0
  2312  000091                     exp@x:
  2313                           	opt stack 0
  2314                           
  2315                           ; 3 bytes @ 0x31
  2316  000091                     	ds	3
  2317  000094                     _exp$2942:
  2318                           	opt stack 0
  2319                           
  2320                           ; 3 bytes @ 0x34
  2321  000094                     	ds	3
  2322  000097                     exp@exponent:
  2323                           	opt stack 0
  2324                           
  2325                           ; 2 bytes @ 0x37
  2326  000097                     	ds	2
  2327  000099                     exp@sign:
  2328                           	opt stack 0
  2329                           
  2330                           ; 1 bytes @ 0x39
  2331  000099                     	ds	1
  2332  00009A                     ?_pow:
  2333                           	opt stack 0
  2334  00009A                     pow@x:
  2335                           	opt stack 0
  2336                           
  2337                           ; 3 bytes @ 0x3A
  2338  00009A                     	ds	1
  2339  00009B                     GroupRx@data:
  2340                           	opt stack 0
  2341  00009B                     GroupTx@data:
  2342                           	opt stack 0
  2343  00009B                     GroupCommon@data:
  2344                           	opt stack 0
  2345                           
  2346                           ; 2 bytes @ 0x3B
  2347  00009B                     	ds	2
  2348  00009D                     GroupRx@request:
  2349                           	opt stack 0
  2350  00009D                     GroupTx@request:
  2351                           	opt stack 0
  2352  00009D                     GroupCommon@request:
  2353                           	opt stack 0
  2354  00009D                     pow@y:
  2355                           	opt stack 0
  2356                           
  2357                           ; 3 bytes @ 0x3D
  2358  00009D                     	ds	1
  2359  00009E                     ??_readUartByte:
  2360                           
  2361                           ; 1 bytes @ 0x3E
  2362  00009E                     	ds	2
  2363  0000A0                     _pow$2940:
  2364                           	opt stack 0
  2365                           
  2366                           ; 3 bytes @ 0x40
  2367  0000A0                     	ds	3
  2368  0000A3                     _pow$2941:
  2369                           	opt stack 0
  2370                           
  2371                           ; 3 bytes @ 0x43
  2372  0000A3                     	ds	3
  2373  0000A6                     pow@sign:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x46
  2377  0000A6                     	ds	1
  2378  0000A7                     pow@yi:
  2379                           	opt stack 0
  2380                           
  2381                           ; 4 bytes @ 0x47
  2382  0000A7                     	ds	4
  2383  0000AB                     ??_SampleSingleChannel:
  2384                           
  2385                           ; 1 bytes @ 0x4B
  2386  0000AB                     	ds	2
  2387                           tblptru	equ	0xFF8
  2388                           tblptrh	equ	0xFF7
  2389                           tblptrl	equ	0xFF6
  2390                           tablat	equ	0xFF5
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           postdec1	equ	0xFE5
  2394                           fsr1l	equ	0xFE1
  2395                           
  2396                           	psect	cstackCOMRAM
  2397  000001                     __pcstackCOMRAM:
  2398                           	opt stack 0
  2399  000001                     ?i2___lwmod:
  2400                           	opt stack 0
  2401  000001                     i2___lwmod@dividend:
  2402                           	opt stack 0
  2403                           
  2404                           ; 2 bytes @ 0x0
  2405  000001                     	ds	2
  2406  000003                     i2___lwmod@divisor:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x2
  2410  000003                     	ds	2
  2411  000005                     i2___lwmod@counter:
  2412                           	opt stack 0
  2413                           
  2414                           ; 1 bytes @ 0x4
  2415  000005                     	ds	1
  2416  000006                     ??_INTERRUPT_InterruptManager:
  2417                           
  2418                           ; 1 bytes @ 0x5
  2419  000006                     	ds	18
  2420  000018                     ??_EUSART1_Read:
  2421  000018                     ??_isspace:
  2422  000018                     ??_isdigit:
  2423  000018                     ??_isupper:
  2424  000018                     ??_BlinkOkLeds:
  2425  000018                     ??_keepAliveSignalLed:
  2426  000018                     ??_testLeds:
  2427  000018                     ?_ADC_GetConversion:
  2428                           	opt stack 0
  2429  000018                     ?___wmul:
  2430                           	opt stack 0
  2431  000018                     ?___lwdiv:
  2432                           	opt stack 0
  2433  000018                     ?___ftpack:
  2434                           	opt stack 0
  2435  000018                     ?_frexp:
  2436                           	opt stack 0
  2437  000018                     ?___ftneg:
  2438                           	opt stack 0
  2439  000018                     ?___lmul:
  2440                           	opt stack 0
  2441  000018                     ?___lldiv:
  2442                           	opt stack 0
  2443  000018                     SwSpi_Data_Pin@cPinMode:
  2444                           	opt stack 0
  2445  000018                     SwSpi_Clk_Pin@cPinMode:
  2446                           	opt stack 0
  2447  000018                     SwSpi_Set_CE_Pin@cPinMode:
  2448                           	opt stack 0
  2449  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  2450                           	opt stack 0
  2451  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  2452                           	opt stack 0
  2453  000018                     EUSART1_Write@txData:
  2454                           	opt stack 0
  2455  000018                     toupper@c:
  2456                           	opt stack 0
  2457  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  2458                           	opt stack 0
  2459  000018                     ___wmul@multiplier:
  2460                           	opt stack 0
  2461  000018                     ___lwdiv@dividend:
  2462                           	opt stack 0
  2463  000018                     memset@p1:
  2464                           	opt stack 0
  2465  000018                     ___ftpack@arg:
  2466                           	opt stack 0
  2467  000018                     ___ftge@ff1:
  2468                           	opt stack 0
  2469  000018                     ___ftneg@f1:
  2470                           	opt stack 0
  2471  000018                     frexp@value:
  2472                           	opt stack 0
  2473  000018                     make8@data:
  2474                           	opt stack 0
  2475  000018                     ___lmul@multiplier:
  2476                           	opt stack 0
  2477  000018                     ___lldiv@dividend:
  2478                           	opt stack 0
  2479                           
  2480                           ; 4 bytes @ 0x17
  2481  000018                     	ds	1
  2482  000019                     SwSpi_Data_Pin@phrType:
  2483                           	opt stack 0
  2484  000019                     SwSpi_Clk_Pin@phrType:
  2485                           	opt stack 0
  2486  000019                     SwSpi_Set_CE_Pin@phrType:
  2487                           	opt stack 0
  2488  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  2489                           	opt stack 0
  2490  000019                     _isdigit$2612:
  2491                           	opt stack 0
  2492  000019                     _isspace$2615:
  2493                           	opt stack 0
  2494  000019                     _isupper$2618:
  2495                           	opt stack 0
  2496  000019                     testLeds@idx:
  2497                           	opt stack 0
  2498  000019                     UART_Write_Text@text:
  2499                           	opt stack 0
  2500  000019                     EUSART1_Read@readValue:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0x18
  2504  000019                     	ds	1
  2505  00001A                     ??_ADC_GetConversion:
  2506  00001A                     ??_TMR0_Initialize:
  2507  00001A                     SWSPI_DAC_send_bits@data:
  2508                           	opt stack 0
  2509  00001A                     SWSPI_Synth_send_bits@data:
  2510                           	opt stack 0
  2511  00001A                     isdigit@c:
  2512                           	opt stack 0
  2513  00001A                     isspace@c:
  2514                           	opt stack 0
  2515  00001A                     isupper@c:
  2516                           	opt stack 0
  2517  00001A                     ___wmul@multiplicand:
  2518                           	opt stack 0
  2519  00001A                     ___lwdiv@divisor:
  2520                           	opt stack 0
  2521  00001A                     memset@c:
  2522                           	opt stack 0
  2523                           
  2524                           ; 2 bytes @ 0x19
  2525  00001A                     	ds	1
  2526  00001B                     ??_UART_Write_Text:
  2527  00001B                     ??_isalpha:
  2528  00001B                     BlinkOkLeds@state:
  2529                           	opt stack 0
  2530  00001B                     SWSPI_DAC_send_bits@count:
  2531                           	opt stack 0
  2532  00001B                     SWSPI_Synth_send_bits@count:
  2533                           	opt stack 0
  2534  00001B                     ___ftpack@exp:
  2535                           	opt stack 0
  2536  00001B                     frexp@eptr:
  2537                           	opt stack 0
  2538  00001B                     ___ftge@ff2:
  2539                           	opt stack 0
  2540                           
  2541                           ; 3 bytes @ 0x1A
  2542  00001B                     	ds	1
  2543  00001C                     SWSPI_DAC_send_bits@phrType:
  2544                           	opt stack 0
  2545  00001C                     SWSPI_Synth_send_bits@phrType:
  2546                           	opt stack 0
  2547  00001C                     ADC_GetConversion@channel:
  2548                           	opt stack 0
  2549  00001C                     make8@dataLocation:
  2550                           	opt stack 0
  2551  00001C                     ___ftpack@sign:
  2552                           	opt stack 0
  2553  00001C                     ___lwdiv@counter:
  2554                           	opt stack 0
  2555  00001C                     _isalpha$2609:
  2556                           	opt stack 0
  2557  00001C                     BlinkOkLeds@idx:
  2558                           	opt stack 0
  2559  00001C                     ___wmul@product:
  2560                           	opt stack 0
  2561  00001C                     memset@n:
  2562                           	opt stack 0
  2563  00001C                     ___lmul@multiplicand:
  2564                           	opt stack 0
  2565  00001C                     ___lldiv@divisor:
  2566                           	opt stack 0
  2567                           
  2568                           ; 4 bytes @ 0x1B
  2569  00001C                     	ds	1
  2570  00001D                     ??_make8:
  2571  00001D                     ??___ftpack:
  2572  00001D                     ??_frexp:
  2573  00001D                     isalpha@c:
  2574                           	opt stack 0
  2575  00001D                     UART_Write_Text@i:
  2576                           	opt stack 0
  2577  00001D                     ___lwdiv@quotient:
  2578                           	opt stack 0
  2579                           
  2580                           ; 2 bytes @ 0x1C
  2581  00001D                     	ds	1
  2582  00001E                     ??___ftge:
  2583  00001E                     memset@p:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x1D
  2587  00001E                     	ds	1
  2588  00001F                     ?___lwmod:
  2589                           	opt stack 0
  2590  00001F                     ___lwmod@dividend:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x1E
  2594  00001F                     	ds	1
  2595  000020                     ?___awtoft:
  2596                           	opt stack 0
  2597  000020                     ?___lltoft:
  2598                           	opt stack 0
  2599  000020                     ?___lwtoft:
  2600                           	opt stack 0
  2601  000020                     ZeroArray@array:
  2602                           	opt stack 0
  2603  000020                     ___awtoft@c:
  2604                           	opt stack 0
  2605  000020                     ___lwtoft@c:
  2606                           	opt stack 0
  2607  000020                     ___lmul@product:
  2608                           	opt stack 0
  2609  000020                     ___lldiv@quotient:
  2610                           	opt stack 0
  2611  000020                     ___lltoft@c:
  2612                           	opt stack 0
  2613                           
  2614                           ; 4 bytes @ 0x1F
  2615  000020                     	ds	1
  2616  000021                     ___lwmod@divisor:
  2617                           	opt stack 0
  2618  000021                     SWSPI_send_word@data:
  2619                           	opt stack 0
  2620                           
  2621                           ; 4 bytes @ 0x20
  2622  000021                     	ds	1
  2623  000022                     ZeroArray@size:
  2624                           	opt stack 0
  2625                           
  2626                           ; 2 bytes @ 0x21
  2627  000022                     	ds	1
  2628  000023                     ?___ftdiv:
  2629                           	opt stack 0
  2630  000023                     ___awtoft@sign:
  2631                           	opt stack 0
  2632  000023                     ___lwmod@counter:
  2633                           	opt stack 0
  2634  000023                     ___ftdiv@f1:
  2635                           	opt stack 0
  2636                           
  2637                           ; 3 bytes @ 0x22
  2638  000023                     	ds	1
  2639  000024                     ??___lltoft:
  2640  000024                     ?_sprintf:
  2641                           	opt stack 0
  2642  000024                     ?_strtol:
  2643                           	opt stack 0
  2644  000024                     ___lldiv@counter:
  2645                           	opt stack 0
  2646  000024                     sprintf@sp:
  2647                           	opt stack 0
  2648  000024                     strtol@s:
  2649                           	opt stack 0
  2650                           
  2651                           ; 2 bytes @ 0x23
  2652  000024                     	ds	1
  2653  000025                     ?___llmod:
  2654                           	opt stack 0
  2655  000025                     SWSPI_send_word@dataSize:
  2656                           	opt stack 0
  2657  000025                     ___llmod@dividend:
  2658                           	opt stack 0
  2659                           
  2660                           ; 4 bytes @ 0x24
  2661  000025                     	ds	1
  2662  000026                     SWSPI_send_word@datac:
  2663                           	opt stack 0
  2664  000026                     sprintf@f:
  2665                           	opt stack 0
  2666  000026                     strtol@endptr:
  2667                           	opt stack 0
  2668  000026                     ___ftdiv@f2:
  2669                           	opt stack 0
  2670                           
  2671                           ; 3 bytes @ 0x25
  2672  000026                     	ds	1
  2673  000027                     SWSPI_send_word@idx:
  2674                           	opt stack 0
  2675                           
  2676                           ; 2 bytes @ 0x26
  2677  000027                     	ds	1
  2678  000028                     ___lltoft@exp:
  2679                           	opt stack 0
  2680  000028                     strtol@base:
  2681                           	opt stack 0
  2682                           
  2683                           ; 2 bytes @ 0x27
  2684  000028                     	ds	1
  2685  000029                     ??___ftdiv:
  2686  000029                     SWSPI_send_word@phrType:
  2687                           	opt stack 0
  2688  000029                     ___llmod@divisor:
  2689                           	opt stack 0
  2690                           
  2691                           ; 4 bytes @ 0x28
  2692  000029                     	ds	1
  2693  00002A                     ??_sprintf:
  2694  00002A                     ??_strtol:
  2695  00002A                     ??_PLLInitialize:
  2696                           
  2697                           ; 1 bytes @ 0x29
  2698  00002A                     	ds	1
  2699  00002B                     
  2700                           ; 1 bytes @ 0x2A
  2701  00002B                     	ds	1
  2702  00002C                     ??___ftmul:
  2703  00002C                     PLLInitialize@idx:
  2704                           	opt stack 0
  2705                           
  2706                           ; 2 bytes @ 0x2B
  2707  00002C                     	ds	1
  2708  00002D                     ___llmod@counter:
  2709                           	opt stack 0
  2710                           
  2711                           ; 1 bytes @ 0x2C
  2712  00002D                     	ds	1
  2713  00002E                     ??_GetIntFromUartData:
  2714  00002E                     PLLInitialize@idx_592:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x2D
  2718  00002E                     	ds	1
  2719  00002F                     ??_eval_poly:
  2720  00002F                     ___altoft@exp:
  2721                           	opt stack 0
  2722                           
  2723                           ; 1 bytes @ 0x2E
  2724  00002F                     	ds	1
  2725  000030                     ___altoft@sign:
  2726                           	opt stack 0
  2727                           
  2728                           ; 1 bytes @ 0x2F
  2729  000030                     	ds	1
  2730  000031                     tblptru	equ	0xFF8
  2731                           tblptrh	equ	0xFF7
  2732                           tblptrl	equ	0xFF6
  2733                           tablat	equ	0xFF5
  2734                           postinc0	equ	0xFEE
  2735                           wreg	equ	0xFE8
  2736                           postdec1	equ	0xFE5
  2737                           fsr1l	equ	0xFE1
  2738                           
  2739                           ; 1 bytes @ 0x30
  2740 ;;
  2741 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2742 ;;
  2743 ;; *************** function _main *****************
  2744 ;; Defined at:
  2745 ;;		line 13 in file "main.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2759 ;;      Params:         0       0       0       0       0       0       0
  2760 ;;      Locals:         0       0       0       0       0       0       0
  2761 ;;      Temps:          0       0       0       0       0       0       0
  2762 ;;      Totals:         0       0       0       0       0       0       0
  2763 ;;Total ram usage:        0 bytes
  2764 ;; Hardware stack levels required when called:   10
  2765 ;; This function calls:
  2766 ;;		_BlinkOkLeds
  2767 ;;		_InitSystemApplicationManagers
  2768 ;;		_SampleSingleChannel
  2769 ;;		_SendUartSystemInitMessage
  2770 ;;		_SetMcuRunTime
  2771 ;;		_SetMcuSystem
  2772 ;;		_keepAliveSignalLed
  2773 ;;		_readUartByte
  2774 ;; This function is called by:
  2775 ;;		Startup code after reset
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           	psect	text0
  2780  0023D4                     __ptext0:
  2781                           	opt stack 0
  2782  0023D4                     _main:
  2783                           	opt stack 21
  2784                           
  2785                           ;main.c: 16: SetMcuSystem();
  2786                           
  2787                           ;incstack = 0
  2788  0023D4  EC4B  F015         	call	_SetMcuSystem	;wreg free
  2789                           
  2790                           ;main.c: 19: InitSystemApplicationManagers();
  2791  0023D8  EC1D  F015         	call	_InitSystemApplicationManagers	;wreg free
  2792                           
  2793                           ;main.c: 22: SendUartSystemInitMessage();
  2794  0023DC  ECC4  F00B         	call	_SendUartSystemInitMessage	;wreg free
  2795                           
  2796                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  2797  0023E0  0E03               	movlw	3
  2798  0023E2  EC5D  F010         	call	_BlinkOkLeds
  2799  0023E6                     
  2800                           ;main.c: 29: {
  2801                           ;main.c: 30: readUartByte();
  2802  0023E6  EC70  F000         	call	_readUartByte	;wreg free
  2803                           
  2804                           ;main.c: 32: if (TimerOneSecFlag == 1)
  2805  0023EA  0100               	movlb	0	; () banked
  2806  0023EC  05C6               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  2807  0023EE  A4D8               	btfss	status,2,c
  2808  0023F0  D006               	goto	l1280
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;main.c: 33: {
  2812                           ;main.c: 35: SetMcuRunTime();
  2813  0023F2  EC9D  F012         	call	_SetMcuRunTime	;wreg free
  2814                           
  2815                           ;main.c: 36: TimerOneSecFlag = 0;
  2816  0023F6  0E00               	movlw	0
  2817  0023F8  0100               	movlb	0	; () banked
  2818  0023FA  6FC6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  2819                           
  2820                           ;main.c: 37: }
  2821  0023FC  D7F4               	goto	l1279
  2822  0023FE                     l1280:
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;main.c: 38: else if (TimerKeepAliveFlag == 1)
  2826                           
  2827                           ; BSR set to: 0
  2828  0023FE  05C4               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  2829  002400  A4D8               	btfss	status,2,c
  2830  002402  D006               	goto	l1282
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;main.c: 39: {
  2834                           ;main.c: 40: keepAliveSignalLed();
  2835  002404  EC06  F015         	call	_keepAliveSignalLed	;wreg free
  2836                           
  2837                           ;main.c: 41: TimerKeepAliveFlag = 0;
  2838  002408  0E00               	movlw	0
  2839  00240A  0100               	movlb	0	; () banked
  2840  00240C  6FC4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  2841                           
  2842                           ;main.c: 42: }
  2843  00240E  D7EB               	goto	l1279
  2844  002410                     l1282:
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;main.c: 43: else if (TimerSamplingFlag == 1)
  2848                           
  2849                           ; BSR set to: 0
  2850  002410  05C5               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  2851  002412  A4D8               	btfss	status,2,c
  2852  002414  D7E8               	goto	l1279
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;main.c: 44: {
  2856                           ;main.c: 45: if(1 == needToSample)
  2857  002416  05C3               	decf	_needToSample& (0+255),w,b	;volatile
  2858  002418  A4D8               	btfss	status,2,c
  2859  00241A  D7E5               	goto	l1279
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;main.c: 46: {
  2863                           ;main.c: 47: SampleSingleChannel();
  2864  00241C  EC5C  F009         	call	_SampleSingleChannel	;wreg free
  2865  002420  D7E2               	goto	l1279
  2866  002422                     __end_of_main:
  2867                           	opt stack 0
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           postdec1	equ	0xFE5
  2875                           fsr1l	equ	0xFE1
  2876                           status	equ	0xFD8
  2877                           
  2878 ;; *************** function _readUartByte *****************
  2879 ;; Defined at:
  2880 ;;		line 28 in file "EusartApp.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;		None
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  idx             2   50[BANK2 ] int 
  2885 ;;  dest           50    0[BANK2 ] unsigned char [50]
  2886 ;;  chRec           1   52[BANK2 ] unsigned char 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  1    wreg      void 
  2889 ;; Registers used:
  2890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2896 ;;      Params:         0       0       0       0       0       0       0
  2897 ;;      Locals:         0       0       0      53       0       0       0
  2898 ;;      Temps:          0       3       0       0       0       0       0
  2899 ;;      Totals:         0       3       0      53       0       0       0
  2900 ;;Total ram usage:       56 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    9
  2903 ;; This function calls:
  2904 ;;		_EUSART1_Read
  2905 ;;		_GroupCommon
  2906 ;;		_GroupRx
  2907 ;;		_GroupTx
  2908 ;;		_InitRxMessageParams
  2909 ;;		_UART_Write_Text
  2910 ;;		_sprintf
  2911 ;;		_toupper
  2912 ;; This function is called by:
  2913 ;;		_main
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text1
  2918  0000E0                     __ptext1:
  2919                           	opt stack 0
  2920  0000E0                     _readUartByte:
  2921                           	opt stack 21
  2922                           
  2923                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2924                           
  2925                           ;incstack = 0
  2926  0000E0  0E00               	movlw	0
  2927  0000E2  0102               	movlb	2	; () banked
  2928  0000E4  6F34               	movwf	readUartByte@chRec& (0+255),b
  2929                           
  2930                           ;EusartApp.c: 32: char dest[50];
  2931                           ;EusartApp.c: 34: switch(cState)
  2932  0000E6  D157               	goto	l178
  2933  0000E8                     
  2934                           ;EusartApp.c: 38: InitRxMessageParams();
  2935                           
  2936                           ; BSR set to: 2
  2937  0000E8  EC59  F012         	call	_InitRxMessageParams	;wreg free
  2938                           
  2939                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2940  0000EC  0E01               	movlw	1
  2941  0000EE  0100               	movlb	0	; () banked
  2942  0000F0  6FC0               	movwf	_cState& (0+255),b
  2943                           
  2944                           ;EusartApp.c: 40: break;
  2945  0000F2  0012               	return	
  2946  0000F4                     
  2947                           ; BSR set to: 0
  2948                           ;EusartApp.c: 44: chRec = EUSART1_Read();
  2949                           
  2950                           ; BSR set to: 0
  2951  0000F4  EC7B  F012         	call	_EUSART1_Read	;wreg free
  2952  0000F8  0102               	movlb	2	; () banked
  2953  0000FA  6F34               	movwf	readUartByte@chRec& (0+255),b
  2954                           
  2955                           ; BSR set to: 2
  2956                           ;EusartApp.c: 46: if(chRec == (0x24))
  2957  0000FC  0E24               	movlw	36
  2958  0000FE  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  2959  000100  A4D8               	btfss	status,2,c
  2960  000102  0012               	return	
  2961                           
  2962                           ; BSR set to: 2
  2963                           ;EusartApp.c: 47: {
  2964                           ;EusartApp.c: 48: cState = READ_STREAM;
  2965  000104  0E02               	movlw	2
  2966  000106  0100               	movlb	0	; () banked
  2967  000108  6FC0               	movwf	_cState& (0+255),b
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;EusartApp.c: 49: }
  2971                           ;EusartApp.c: 50: break;
  2972  00010A  0012               	return	
  2973  00010C                     
  2974                           ; BSR set to: 0
  2975                           ;EusartApp.c: 54: if(eusart1RxCount > 0)
  2976                           
  2977                           ; BSR set to: 0
  2978  00010C  51C1               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2979  00010E  B4D8               	btfsc	status,2,c
  2980  000110  0012               	return	
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;EusartApp.c: 55: {
  2984                           ;EusartApp.c: 56: chRec = EUSART1_Read();
  2985  000112  EC7B  F012         	call	_EUSART1_Read	;wreg free
  2986  000116  0102               	movlb	2	; () banked
  2987  000118  6F34               	movwf	readUartByte@chRec& (0+255),b
  2988                           
  2989                           ; BSR set to: 2
  2990                           ;EusartApp.c: 57: if(chRec == (0))
  2991  00011A  5134               	movf	readUartByte@chRec& (0+255),w,b
  2992  00011C  B4D8               	btfsc	status,2,c
  2993  00011E  0012               	return	
  2994                           
  2995                           ; BSR set to: 2
  2996                           ;EusartApp.c: 61: else if(chRec == (0xd))
  2997                           
  2998                           ; BSR set to: 2
  2999                           
  3000                           ; BSR set to: 2
  3001                           ;EusartApp.c: 60: }
  3002                           
  3003                           ; BSR set to: 2
  3004                           ;EusartApp.c: 58: {
  3005                           ;EusartApp.c: 59: return;
  3006  000120  0E0D               	movlw	13
  3007  000122  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3008  000124  A4D8               	btfss	status,2,c
  3009  000126  D004               	goto	l188
  3010                           
  3011                           ; BSR set to: 2
  3012                           ;EusartApp.c: 62: {
  3013                           ;EusartApp.c: 63: cState = READ_GROUP;
  3014  000128  0E03               	movlw	3
  3015  00012A  0100               	movlb	0	; () banked
  3016  00012C  6FC0               	movwf	_cState& (0+255),b
  3017                           
  3018                           ;EusartApp.c: 64: }
  3019  00012E  0012               	return	
  3020  000130                     l188:
  3021                           
  3022                           ;EusartApp.c: 65: else
  3023                           ;EusartApp.c: 66: {
  3024                           ;EusartApp.c: 67: if(chRec != ' ')
  3025                           
  3026                           ; BSR set to: 0
  3027  000130  0E20               	movlw	32
  3028  000132  0102               	movlb	2	; () banked
  3029  000134  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3030  000136  B4D8               	btfsc	status,2,c
  3031  000138  0012               	return	
  3032                           
  3033                           ; BSR set to: 2
  3034                           ;EusartApp.c: 68: {
  3035                           ;EusartApp.c: 69: rxMsgQueue[msgCount++] = chRec;
  3036  00013A  0100               	movlb	0	; () banked
  3037  00013C  51BA               	movf	_msgCount& (0+255),w,b
  3038  00013E  0D01               	mullw	1
  3039  000140  0EC2               	movlw	low _rxMsgQueue
  3040  000142  24F3               	addwf	prodl,w,c
  3041  000144  6ED9               	movwf	fsr2l,c
  3042  000146  0E01               	movlw	high _rxMsgQueue
  3043  000148  20F4               	addwfc	prodh,w,c
  3044  00014A  6EDA               	movwf	fsr2h,c
  3045  00014C  C234  FFDF         	movff	readUartByte@chRec,indf2
  3046                           
  3047                           ; BSR set to: 0
  3048  000150  2BBA               	incf	_msgCount& (0+255),f,b
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;EusartApp.c: 76: }
  3052                           ;EusartApp.c: 77: break;
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;EusartApp.c: 73: else
  3056                           ;EusartApp.c: 74: {
  3057                           ;EusartApp.c: 75: return;
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;EusartApp.c: 70: }
  3061                           ;EusartApp.c: 71: }
  3062                           ;EusartApp.c: 72: }
  3063                           
  3064                           ; BSR set to: 0
  3065                           
  3066                           ; BSR set to: 0
  3067  000152  0012               	return	
  3068  000154                     
  3069                           ; BSR set to: 0
  3070                           ;EusartApp.c: 81: chRec = toupper(rxMsgQueue[0]);
  3071                           
  3072                           ; BSR set to: 0
  3073  000154  0101               	movlb	1	; () banked
  3074  000156  51C2               	movf	_rxMsgQueue& (0+255),w,b
  3075  000158  EC28  F015         	call	_toupper
  3076  00015C  0102               	movlb	2	; () banked
  3077  00015E  6F34               	movwf	readUartByte@chRec& (0+255),b
  3078                           
  3079                           ;EusartApp.c: 83: switch(chRec)
  3080  000160  D026               	goto	l193
  3081  000162                     
  3082                           ; BSR set to: 2
  3083                           ;EusartApp.c: 87: group = RX_GROUP;
  3084                           
  3085                           ; BSR set to: 2
  3086  000162  0E00               	movlw	0
  3087  000164  0100               	movlb	0	; () banked
  3088  000166  6FBF               	movwf	_group& (0+255),b
  3089                           
  3090                           ;EusartApp.c: 88: cState = READ_REQUEST;
  3091  000168  0E04               	movlw	4
  3092  00016A  6FC0               	movwf	_cState& (0+255),b
  3093                           
  3094                           ;EusartApp.c: 89: break;
  3095  00016C  0012               	return	
  3096  00016E                     
  3097                           ;EusartApp.c: 93: group = TX_GROUP;
  3098                           
  3099                           ; BSR set to: 0
  3100  00016E  0E01               	movlw	1
  3101  000170  0100               	movlb	0	; () banked
  3102  000172  6FBF               	movwf	_group& (0+255),b
  3103                           
  3104                           ;EusartApp.c: 94: cState = READ_REQUEST;
  3105  000174  0E04               	movlw	4
  3106  000176  6FC0               	movwf	_cState& (0+255),b
  3107                           
  3108                           ;EusartApp.c: 95: break;
  3109  000178  0012               	return	
  3110  00017A                     
  3111                           ;EusartApp.c: 99: group = COMMON_GROUP;
  3112                           
  3113                           ; BSR set to: 0
  3114  00017A  0E02               	movlw	2
  3115  00017C  0100               	movlb	0	; () banked
  3116  00017E  6FBF               	movwf	_group& (0+255),b
  3117                           
  3118                           ;EusartApp.c: 100: cState = READ_REQUEST;
  3119  000180  0E04               	movlw	4
  3120  000182  6FC0               	movwf	_cState& (0+255),b
  3121                           
  3122                           ;EusartApp.c: 101: break;
  3123  000184  0012               	return	
  3124  000186                     
  3125                           ;EusartApp.c: 104: sprintf(dest, "NOT O.K \n\r");
  3126                           
  3127                           ; BSR set to: 0
  3128  000186  0E00               	movlw	low readUartByte@dest
  3129  000188  6E24               	movwf	sprintf@sp,c
  3130  00018A  0E02               	movlw	high readUartByte@dest
  3131  00018C  6E25               	movwf	sprintf@sp+1,c
  3132  00018E  0EC6               	movlw	low STR_8
  3133  000190  6E26               	movwf	sprintf@f,c
  3134  000192  0E7F               	movlw	high STR_8
  3135  000194  6E27               	movwf	sprintf@f+1,c
  3136  000196  ECFB  F004         	call	_sprintf	;wreg free
  3137                           
  3138                           ;EusartApp.c: 105: UART_Write_Text(dest);
  3139  00019A  0E00               	movlw	low readUartByte@dest
  3140  00019C  6E19               	movwf	UART_Write_Text@text,c
  3141  00019E  0E02               	movlw	high readUartByte@dest
  3142  0001A0  6E1A               	movwf	UART_Write_Text@text+1,c
  3143  0001A2  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  3144                           
  3145                           ;EusartApp.c: 106: cState = START_RX_MESSAGE_READ;
  3146  0001A6  0E00               	movlw	0
  3147  0001A8  0100               	movlb	0	; () banked
  3148  0001AA  6FC0               	movwf	_cState& (0+255),b
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;EusartApp.c: 108: }
  3152                           
  3153                           ;EusartApp.c: 107: break;
  3154  0001AC  0012               	return	
  3155  0001AE                     l193:
  3156                           
  3157                           ; BSR set to: 0
  3158  0001AE  0102               	movlb	2	; () banked
  3159  0001B0  5134               	movf	readUartByte@chRec& (0+255),w,b
  3160                           
  3161                           ; Switch size 1, requested type "space"
  3162                           ; Number of cases is 3, Range of values is 82 to 84
  3163                           ; switch strategies available:
  3164                           ; Name         Instructions Cycles
  3165                           ; simple_byte           10     6 (average)
  3166                           ;	Chosen strategy is simple_byte
  3167  0001B2  0A52               	xorlw	82	; case 82
  3168  0001B4  B4D8               	btfsc	status,2,c
  3169  0001B6  D7D5               	goto	l194
  3170  0001B8  0A01               	xorlw	1	; case 83
  3171  0001BA  B4D8               	btfsc	status,2,c
  3172  0001BC  D7DE               	goto	l197
  3173  0001BE  0A07               	xorlw	7	; case 84
  3174  0001C0  B4D8               	btfsc	status,2,c
  3175  0001C2  D7D5               	goto	l196
  3176  0001C4  D7E0               	goto	l198
  3177  0001C6                     
  3178                           ;EusartApp.c: 113: chRec = toupper(rxMsgQueue[1]);
  3179                           
  3180                           ; BSR set to: 2
  3181  0001C6  0101               	movlb	1	; () banked
  3182  0001C8  51C3               	movf	(_rxMsgQueue+1)& (0+255),w,b
  3183  0001CA  EC28  F015         	call	_toupper
  3184  0001CE  0102               	movlb	2	; () banked
  3185  0001D0  6F34               	movwf	readUartByte@chRec& (0+255),b
  3186                           
  3187                           ;EusartApp.c: 115: switch(group)
  3188  0001D2  D072               	goto	l200
  3189  0001D4                     
  3190                           ;EusartApp.c: 119: if( chRec == 'I' || chRec == 'F' || chRec == 'Q' ||
  3191                           ;EusartApp.c: 120: chRec == 'X' || chRec == 'C' || chRec == 'S' ||
  3192                           ;EusartApp.c: 121: chRec == 'C')
  3193                           
  3194                           ; BSR set to: 2
  3195  0001D4  0E49               	movlw	73
  3196  0001D6  0102               	movlb	2	; () banked
  3197  0001D8  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3198  0001DA  B4D8               	btfsc	status,2,c
  3199  0001DC  D018               	goto	u7840
  3200                           
  3201                           ; BSR set to: 2
  3202  0001DE  0E46               	movlw	70
  3203  0001E0  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3204  0001E2  B4D8               	btfsc	status,2,c
  3205  0001E4  D014               	goto	u7840
  3206                           
  3207                           ; BSR set to: 2
  3208  0001E6  0E51               	movlw	81
  3209  0001E8  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3210  0001EA  B4D8               	btfsc	status,2,c
  3211  0001EC  D010               	goto	u7840
  3212                           
  3213                           ; BSR set to: 2
  3214  0001EE  0E58               	movlw	88
  3215  0001F0  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3216  0001F2  B4D8               	btfsc	status,2,c
  3217  0001F4  D00C               	goto	u7840
  3218                           
  3219                           ; BSR set to: 2
  3220  0001F6  0E43               	movlw	67
  3221  0001F8  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3222  0001FA  B4D8               	btfsc	status,2,c
  3223  0001FC  D008               	goto	u7840
  3224                           
  3225                           ; BSR set to: 2
  3226  0001FE  0E53               	movlw	83
  3227  000200  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3228  000202  B4D8               	btfsc	status,2,c
  3229  000204  D004               	goto	u7840
  3230                           
  3231                           ; BSR set to: 2
  3232  000206  0E43               	movlw	67
  3233  000208  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3234  00020A  A4D8               	btfss	status,2,c
  3235  00020C  D007               	goto	l202
  3236  00020E                     u7840:
  3237                           
  3238                           ; BSR set to: 2
  3239                           ;EusartApp.c: 122: {
  3240                           ;EusartApp.c: 124: request = chRec - '0';
  3241                           
  3242                           ; BSR set to: 2
  3243  00020E  5134               	movf	readUartByte@chRec& (0+255),w,b
  3244  000210  0FD0               	addlw	208
  3245  000212  0100               	movlb	0	; () banked
  3246  000214  6FBE               	movwf	_request& (0+255),b
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;EusartApp.c: 125: cState = READ_DATA_SIZE;
  3250  000216  0E05               	movlw	5
  3251  000218  6FC0               	movwf	_cState& (0+255),b
  3252                           
  3253                           ;EusartApp.c: 127: }
  3254  00021A  0012               	return	
  3255  00021C                     l202:
  3256                           
  3257                           ;EusartApp.c: 128: else
  3258                           ;EusartApp.c: 129: {
  3259                           ;EusartApp.c: 130: UART_Write_Text("NOT OK \n\r");
  3260                           
  3261                           ; BSR set to: 0
  3262  00021C  0ED1               	movlw	low STR_1
  3263  00021E  6E19               	movwf	UART_Write_Text@text,c
  3264  000220  0E7F               	movlw	high STR_1
  3265  000222  6E1A               	movwf	UART_Write_Text@text+1,c
  3266  000224  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  3267                           
  3268                           ;EusartApp.c: 131: cState = START_RX_MESSAGE_READ;
  3269  000228  0E00               	movlw	0
  3270  00022A  0100               	movlb	0	; () banked
  3271  00022C  6FC0               	movwf	_cState& (0+255),b
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;EusartApp.c: 132: }
  3275                           ;EusartApp.c: 133: return;
  3276                           
  3277                           ; BSR set to: 0
  3278  00022E  0012               	return	
  3279  000230                     
  3280                           ; BSR set to: 0
  3281                           ;EusartApp.c: 137: if(chRec == 'I' || chRec == 'F' || chRec == 'Q' || chRec == 'X' || ch
      +                          Rec == 'B' || chRec == 'S')
  3282                           
  3283                           ; BSR set to: 0
  3284  000230  0E49               	movlw	73
  3285  000232  0102               	movlb	2	; () banked
  3286  000234  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3287  000236  B4D8               	btfsc	status,2,c
  3288  000238  D014               	goto	u7900
  3289                           
  3290                           ; BSR set to: 2
  3291  00023A  0E46               	movlw	70
  3292  00023C  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3293  00023E  B4D8               	btfsc	status,2,c
  3294  000240  D010               	goto	u7900
  3295                           
  3296                           ; BSR set to: 2
  3297  000242  0E51               	movlw	81
  3298  000244  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3299  000246  B4D8               	btfsc	status,2,c
  3300  000248  D00C               	goto	u7900
  3301                           
  3302                           ; BSR set to: 2
  3303  00024A  0E58               	movlw	88
  3304  00024C  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3305  00024E  B4D8               	btfsc	status,2,c
  3306  000250  D008               	goto	u7900
  3307                           
  3308                           ; BSR set to: 2
  3309  000252  0E42               	movlw	66
  3310  000254  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3311  000256  B4D8               	btfsc	status,2,c
  3312  000258  D004               	goto	u7900
  3313                           
  3314                           ; BSR set to: 2
  3315  00025A  0E53               	movlw	83
  3316  00025C  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3317  00025E  A4D8               	btfss	status,2,c
  3318  000260  D007               	goto	l207
  3319  000262                     u7900:
  3320                           
  3321                           ; BSR set to: 2
  3322                           ;EusartApp.c: 138: {
  3323                           ;EusartApp.c: 139: request = (chRec - '0');
  3324                           
  3325                           ; BSR set to: 2
  3326  000262  5134               	movf	readUartByte@chRec& (0+255),w,b
  3327  000264  0FD0               	addlw	208
  3328  000266  0100               	movlb	0	; () banked
  3329  000268  6FBE               	movwf	_request& (0+255),b
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;EusartApp.c: 140: cState = READ_DATA_SIZE;
  3333  00026A  0E05               	movlw	5
  3334  00026C  6FC0               	movwf	_cState& (0+255),b
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;EusartApp.c: 142: }
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;EusartApp.c: 141: return;
  3341  00026E  0012               	return	
  3342  000270                     l207:
  3343                           
  3344                           ;EusartApp.c: 143: else
  3345                           ;EusartApp.c: 144: {
  3346                           ;EusartApp.c: 145: UART_Write_Text("NOT OK \n\r");
  3347                           
  3348                           ; BSR set to: 0
  3349  000270  0ED1               	movlw	low STR_1
  3350  000272  6E19               	movwf	UART_Write_Text@text,c
  3351  000274  0E7F               	movlw	high STR_1
  3352  000276  6E1A               	movwf	UART_Write_Text@text+1,c
  3353  000278  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  3354                           
  3355                           ;EusartApp.c: 146: cState = START_RX_MESSAGE_READ;
  3356  00027C  0E00               	movlw	0
  3357  00027E  0100               	movlb	0	; () banked
  3358  000280  6FC0               	movwf	_cState& (0+255),b
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;EusartApp.c: 147: }
  3362                           ;EusartApp.c: 148: break;
  3363  000282  0012               	return	
  3364  000284                     
  3365                           ; BSR set to: 0
  3366                           ;EusartApp.c: 152: if(chRec == 'H' || chRec == 'L')
  3367                           
  3368                           ; BSR set to: 0
  3369  000284  0E48               	movlw	72
  3370  000286  0102               	movlb	2	; () banked
  3371  000288  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3372  00028A  B4D8               	btfsc	status,2,c
  3373  00028C  D004               	goto	u7920
  3374                           
  3375                           ; BSR set to: 2
  3376  00028E  0E4C               	movlw	76
  3377  000290  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3378  000292  A4D8               	btfss	status,2,c
  3379  000294  D007               	goto	l213
  3380  000296                     u7920:
  3381                           
  3382                           ; BSR set to: 2
  3383                           ;EusartApp.c: 153: {
  3384                           ;EusartApp.c: 154: request = (chRec - '0');
  3385                           
  3386                           ; BSR set to: 2
  3387  000296  5134               	movf	readUartByte@chRec& (0+255),w,b
  3388  000298  0FD0               	addlw	208
  3389  00029A  0100               	movlb	0	; () banked
  3390  00029C  6FBE               	movwf	_request& (0+255),b
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;EusartApp.c: 155: cState = READ_DATA_SIZE;
  3394  00029E  0E05               	movlw	5
  3395  0002A0  6FC0               	movwf	_cState& (0+255),b
  3396                           
  3397                           ;EusartApp.c: 156: }
  3398  0002A2  0012               	return	
  3399  0002A4                     l213:
  3400                           
  3401                           ;EusartApp.c: 157: else
  3402                           ;EusartApp.c: 158: {
  3403                           ;EusartApp.c: 159: UART_Write_Text("NOT OK \n\r");
  3404                           
  3405                           ; BSR set to: 0
  3406  0002A4  0ED1               	movlw	low STR_1
  3407  0002A6  6E19               	movwf	UART_Write_Text@text,c
  3408  0002A8  0E7F               	movlw	high STR_1
  3409  0002AA  6E1A               	movwf	UART_Write_Text@text+1,c
  3410  0002AC  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  3411                           
  3412                           ;EusartApp.c: 160: cState = START_RX_MESSAGE_READ;
  3413  0002B0  0E00               	movlw	0
  3414  0002B2  0100               	movlb	0	; () banked
  3415  0002B4  6FC0               	movwf	_cState& (0+255),b
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;EusartApp.c: 161: }
  3419                           ;EusartApp.c: 162: }
  3420  0002B6  0012               	return	
  3421  0002B8                     l200:
  3422                           
  3423                           ; BSR set to: 0
  3424  0002B8  0100               	movlb	0	; () banked
  3425  0002BA  51BF               	movf	_group& (0+255),w,b
  3426                           
  3427                           ; Switch size 1, requested type "space"
  3428                           ; Number of cases is 3, Range of values is 0 to 2
  3429                           ; switch strategies available:
  3430                           ; Name         Instructions Cycles
  3431                           ; simple_byte           10     6 (average)
  3432                           ;	Chosen strategy is simple_byte
  3433  0002BC  0A00               	xorlw	0	; case 0
  3434  0002BE  B4D8               	btfsc	status,2,c
  3435  0002C0  D789               	goto	l201
  3436  0002C2  0A01               	xorlw	1	; case 1
  3437  0002C4  B4D8               	btfsc	status,2,c
  3438  0002C6  D7B4               	goto	l206
  3439  0002C8  0A03               	xorlw	3	; case 2
  3440  0002CA  A4D8               	btfss	status,2,c
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;EusartApp.c: 163: return;
  3444  0002CC  0012               	return	
  3445  0002CE  D7DA               	goto	l212
  3446  0002D0                     
  3447                           ; BSR set to: 0
  3448                           ;EusartApp.c: 167: dataSize = msgCount - 2;
  3449                           
  3450                           ; BSR set to: 0
  3451  0002D0  51BA               	movf	_msgCount& (0+255),w,b
  3452  0002D2  0FFE               	addlw	254
  3453  0002D4  6FBD               	movwf	_dataSize& (0+255),b
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;EusartApp.c: 168: rxMsgData[(0x0)] = dataSize;
  3457  0002D6  C0BD  F1AE         	movff	_dataSize,_rxMsgData
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;EusartApp.c: 169: if(dataSize == 0)
  3461  0002DA  51BD               	movf	_dataSize& (0+255),w,b
  3462  0002DC  A4D8               	btfss	status,2,c
  3463  0002DE  D003               	goto	l218
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;EusartApp.c: 170: {
  3467                           ;EusartApp.c: 171: cState = JUMP_FUNCTION;
  3468  0002E0  0E08               	movlw	8
  3469  0002E2  6FC0               	movwf	_cState& (0+255),b
  3470                           
  3471                           ;EusartApp.c: 172: }
  3472  0002E4  0012               	return	
  3473  0002E6                     l218:
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;EusartApp.c: 173: else
  3477                           ;EusartApp.c: 174: {
  3478                           ;EusartApp.c: 175: cState = READ_DATA;
  3479                           
  3480                           ; BSR set to: 0
  3481  0002E6  0E06               	movlw	6
  3482  0002E8  6FC0               	movwf	_cState& (0+255),b
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;EusartApp.c: 176: }
  3486                           ;EusartApp.c: 178: break;
  3487  0002EA  0012               	return	
  3488  0002EC                     
  3489                           ; BSR set to: 0
  3490                           ;EusartApp.c: 182: for(int idx = 1; idx < dataSize + 1; idx++)
  3491                           
  3492                           ; BSR set to: 0
  3493  0002EC  0E00               	movlw	0
  3494  0002EE  0102               	movlb	2	; () banked
  3495  0002F0  6F33               	movwf	(readUartByte@idx+1)& (0+255),b
  3496  0002F2  0E01               	movlw	1
  3497  0002F4  6F32               	movwf	readUartByte@idx& (0+255),b
  3498  0002F6  D01B               	goto	l221
  3499  0002F8                     
  3500                           ;EusartApp.c: 183: {
  3501                           ;EusartApp.c: 184: rxMsgData[idx] = rxMsgQueue[(0x2) + idx - 1];
  3502                           
  3503                           ; BSR set to: 2
  3504  0002F8  0E01               	movlw	1
  3505  0002FA  0102               	movlb	2	; () banked
  3506  0002FC  2532               	addwf	readUartByte@idx& (0+255),w,b
  3507  0002FE  0100               	movlb	0	; () banked
  3508  000300  6F9E               	movwf	??_readUartByte& (0+255),b
  3509  000302  0E00               	movlw	0
  3510  000304  0102               	movlb	2	; () banked
  3511  000306  2133               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  3512  000308  0100               	movlb	0	; () banked
  3513  00030A  6F9F               	movwf	(??_readUartByte+1)& (0+255),b
  3514  00030C  0EC2               	movlw	low _rxMsgQueue
  3515  00030E  259E               	addwf	??_readUartByte& (0+255),w,b
  3516  000310  6ED9               	movwf	fsr2l,c
  3517  000312  0E01               	movlw	high _rxMsgQueue
  3518  000314  219F               	addwfc	(??_readUartByte+1)& (0+255),w,b
  3519  000316  6EDA               	movwf	fsr2h,c
  3520  000318  0EAE               	movlw	low _rxMsgData
  3521  00031A  0102               	movlb	2	; () banked
  3522  00031C  2532               	addwf	readUartByte@idx& (0+255),w,b
  3523  00031E  6EE1               	movwf	fsr1l,c
  3524  000320  0E01               	movlw	high _rxMsgData
  3525  000322  2133               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  3526  000324  6EE2               	movwf	fsr1h,c
  3527  000326  CFDF FFE7          	movff	indf2,indf1
  3528                           
  3529                           ; BSR set to: 2
  3530  00032A  4B32               	infsnz	readUartByte@idx& (0+255),f,b
  3531  00032C  2B33               	incf	(readUartByte@idx+1)& (0+255),f,b
  3532  00032E                     l221:
  3533                           
  3534                           ; BSR set to: 2
  3535                           
  3536                           ; BSR set to: 2
  3537  00032E  0100               	movlb	0	; () banked
  3538  000330  51BD               	movf	_dataSize& (0+255),w,b
  3539  000332  6F9E               	movwf	??_readUartByte& (0+255),b
  3540  000334  6B9F               	clrf	(??_readUartByte+1)& (0+255),b
  3541  000336  0E01               	movlw	1
  3542  000338  279E               	addwf	??_readUartByte& (0+255),f,b
  3543  00033A  0E00               	movlw	0
  3544  00033C  239F               	addwfc	(??_readUartByte+1)& (0+255),f,b
  3545  00033E  519E               	movf	??_readUartByte& (0+255),w,b
  3546  000340  0102               	movlb	2	; () banked
  3547  000342  5D32               	subwf	readUartByte@idx& (0+255),w,b
  3548  000344  5133               	movf	(readUartByte@idx+1)& (0+255),w,b
  3549  000346  0A80               	xorlw	128
  3550  000348  0100               	movlb	0	; () banked
  3551  00034A  6FA0               	movwf	(??_readUartByte+2)& (0+255),b
  3552  00034C  519F               	movf	(??_readUartByte+1)& (0+255),w,b
  3553  00034E  0A80               	xorlw	128
  3554  000350  59A0               	subwfb	(??_readUartByte+2)& (0+255),w,b
  3555  000352  A0D8               	btfss	status,0,c
  3556  000354  D7D1               	goto	l222
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;EusartApp.c: 185: }
  3560                           ;EusartApp.c: 187: cState = JUMP_FUNCTION;
  3561                           
  3562                           ; BSR set to: 0
  3563  000356  0E08               	movlw	8
  3564  000358  6FC0               	movwf	_cState& (0+255),b
  3565                           
  3566                           ;EusartApp.c: 188: break;
  3567  00035A  0012               	return	
  3568  00035C                     
  3569                           ; BSR set to: 0
  3570                           ;EusartApp.c: 192: groupsArray[group](request, rxMsgData);
  3571                           
  3572                           ; BSR set to: 0
  3573  00035C  51BF               	movf	_group& (0+255),w,b
  3574  00035E  0D02               	mullw	2
  3575  000360  0EC7               	movlw	low _groupsArray
  3576  000362  24F3               	addwf	prodl,w,c
  3577  000364  6ED9               	movwf	fsr2l,c
  3578  000366  0E00               	movlw	high _groupsArray
  3579  000368  20F4               	addwfc	prodh,w,c
  3580  00036A  6EDA               	movwf	fsr2h,c
  3581  00036C  D801               	call	u7958
  3582  00036E  D00F               	goto	u7959
  3583  000370                     u7958:
  3584  000370  0005               	push	
  3585  000372  6EFA               	movwf	pclath,c
  3586  000374  50DE               	movf	postinc2,w,c
  3587  000376  6EFD               	movwf	tosl,c
  3588  000378  50DE               	movf	postinc2,w,c
  3589  00037A  6EFE               	movwf	tosh,c
  3590  00037C  50F8               	movf	tblptru,w,c
  3591  00037E  6EFF               	movwf	tosu,c
  3592  000380  50FA               	movf	pclath,w,c
  3593  000382  0EAE               	movlw	low _rxMsgData
  3594  000384  6F9B               	movwf	GroupCommon@data& (0+255),b
  3595  000386  0E01               	movlw	high _rxMsgData
  3596  000388  6F9C               	movwf	(GroupCommon@data+1)& (0+255),b
  3597  00038A  51BE               	movf	_request& (0+255),w,b
  3598  00038C  0012               	return		;indir
  3599  00038E                     u7959:
  3600                           
  3601                           ;EusartApp.c: 193: cState = START_RX_MESSAGE_READ;
  3602  00038E  0E00               	movlw	0
  3603  000390  0100               	movlb	0	; () banked
  3604  000392  6FC0               	movwf	_cState& (0+255),b
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;EusartApp.c: 195: }
  3608                           
  3609                           ;EusartApp.c: 194: break;
  3610  000394  0012               	return	
  3611  000396                     l178:
  3612                           
  3613                           ; BSR set to: 0
  3614  000396  0100               	movlb	0	; () banked
  3615  000398  51C0               	movf	_cState& (0+255),w,b
  3616                           
  3617                           ; Switch size 1, requested type "space"
  3618                           ; Number of cases is 8, Range of values is 0 to 8
  3619                           ; switch strategies available:
  3620                           ; Name         Instructions Cycles
  3621                           ; simple_byte           25    13 (average)
  3622                           ;	Chosen strategy is simple_byte
  3623  00039A  0A00               	xorlw	0	; case 0
  3624  00039C  B4D8               	btfsc	status,2,c
  3625  00039E  D6A4               	goto	l179
  3626  0003A0  0A01               	xorlw	1	; case 1
  3627  0003A2  B4D8               	btfsc	status,2,c
  3628  0003A4  D6A7               	goto	l181
  3629  0003A6  0A03               	xorlw	3	; case 2
  3630  0003A8  B4D8               	btfsc	status,2,c
  3631  0003AA  D6B0               	goto	l183
  3632  0003AC  0A01               	xorlw	1	; case 3
  3633  0003AE  B4D8               	btfsc	status,2,c
  3634  0003B0  D6D1               	goto	l192
  3635  0003B2  0A07               	xorlw	7	; case 4
  3636  0003B4  B4D8               	btfsc	status,2,c
  3637  0003B6  D707               	goto	l199
  3638  0003B8  0A01               	xorlw	1	; case 5
  3639  0003BA  B4D8               	btfsc	status,2,c
  3640  0003BC  D789               	goto	l217
  3641  0003BE  0A03               	xorlw	3	; case 6
  3642  0003C0  B4D8               	btfsc	status,2,c
  3643  0003C2  D794               	goto	l220
  3644  0003C4  0A0E               	xorlw	14	; case 8
  3645  0003C6  A4D8               	btfss	status,2,c
  3646  0003C8  0012               	return	
  3647  0003CA  D7C8               	goto	l224
  3648  0003CC                     __end_of_readUartByte:
  3649                           	opt stack 0
  3650                           tosu	equ	0xFFF
  3651                           tosh	equ	0xFFE
  3652                           tosl	equ	0xFFD
  3653                           pclath	equ	0xFFA
  3654                           tblptru	equ	0xFF8
  3655                           tblptrh	equ	0xFF7
  3656                           tblptrl	equ	0xFF6
  3657                           tablat	equ	0xFF5
  3658                           prodh	equ	0xFF4
  3659                           prodl	equ	0xFF3
  3660                           postinc0	equ	0xFEE
  3661                           wreg	equ	0xFE8
  3662                           indf1	equ	0xFE7
  3663                           postdec1	equ	0xFE5
  3664                           fsr1h	equ	0xFE2
  3665                           fsr1l	equ	0xFE1
  3666                           indf2	equ	0xFDF
  3667                           postinc2	equ	0xFDE
  3668                           fsr2h	equ	0xFDA
  3669                           fsr2l	equ	0xFD9
  3670                           status	equ	0xFD8
  3671                           
  3672 ;; *************** function _InitRxMessageParams *****************
  3673 ;; Defined at:
  3674 ;;		line 198 in file "EusartApp.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;		None
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;		None
  3679 ;; Return value:  Size  Location     Type
  3680 ;;                  1    wreg      void 
  3681 ;; Registers used:
  3682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3688 ;;      Params:         0       0       0       0       0       0       0
  3689 ;;      Locals:         0       0       0       0       0       0       0
  3690 ;;      Temps:          0       0       0       0       0       0       0
  3691 ;;      Totals:         0       0       0       0       0       0       0
  3692 ;;Total ram usage:        0 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    5
  3695 ;; This function calls:
  3696 ;;		_ZeroArray
  3697 ;; This function is called by:
  3698 ;;		_readUartByte
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           	psect	text2
  3703  0024B2                     __ptext2:
  3704                           	opt stack 0
  3705  0024B2                     _InitRxMessageParams:
  3706                           	opt stack 24
  3707                           
  3708                           ;EusartApp.c: 200: group = 0;
  3709                           
  3710                           ;incstack = 0
  3711  0024B2  0E00               	movlw	0
  3712  0024B4  0100               	movlb	0	; () banked
  3713  0024B6  6FBF               	movwf	_group& (0+255),b
  3714                           
  3715                           ;EusartApp.c: 201: request = 0;
  3716  0024B8  0E00               	movlw	0
  3717  0024BA  6FBE               	movwf	_request& (0+255),b
  3718                           
  3719                           ;EusartApp.c: 202: msgCount = 0;
  3720  0024BC  0E00               	movlw	0
  3721  0024BE  6FBA               	movwf	_msgCount& (0+255),b
  3722                           
  3723                           ;EusartApp.c: 203: dataSize = 0;
  3724  0024C0  0E00               	movlw	0
  3725  0024C2  6FBD               	movwf	_dataSize& (0+255),b
  3726                           
  3727                           ;EusartApp.c: 204: crcCalc = 0;
  3728  0024C4  0E00               	movlw	0
  3729  0024C6  6FBC               	movwf	_crcCalc& (0+255),b
  3730                           
  3731                           ;EusartApp.c: 205: crcGiven = 0;
  3732  0024C8  0E00               	movlw	0
  3733  0024CA  6FBB               	movwf	_crcGiven& (0+255),b
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;EusartApp.c: 206: ZeroArray(rxMsgQueue, (0x14));
  3737  0024CC  0EC2               	movlw	low _rxMsgQueue
  3738  0024CE  6E20               	movwf	ZeroArray@array,c
  3739  0024D0  0E01               	movlw	high _rxMsgQueue
  3740  0024D2  6E21               	movwf	ZeroArray@array+1,c
  3741  0024D4  0E00               	movlw	0
  3742  0024D6  6E23               	movwf	ZeroArray@size+1,c
  3743  0024D8  0E14               	movlw	20
  3744  0024DA  6E22               	movwf	ZeroArray@size,c
  3745  0024DC  ECDC  F014         	call	_ZeroArray
  3746                           
  3747                           ;EusartApp.c: 207: ZeroArray(rxMsgData, (0x14));
  3748  0024E0  0EAE               	movlw	low _rxMsgData
  3749  0024E2  6E20               	movwf	ZeroArray@array,c
  3750  0024E4  0E01               	movlw	high _rxMsgData
  3751  0024E6  6E21               	movwf	ZeroArray@array+1,c
  3752  0024E8  0E00               	movlw	0
  3753  0024EA  6E23               	movwf	ZeroArray@size+1,c
  3754  0024EC  0E14               	movlw	20
  3755  0024EE  6E22               	movwf	ZeroArray@size,c
  3756  0024F0  ECDC  F014         	call	_ZeroArray	;wreg free
  3757  0024F4  0012               	return		;funcret
  3758  0024F6                     __end_of_InitRxMessageParams:
  3759                           	opt stack 0
  3760                           tosu	equ	0xFFF
  3761                           tosh	equ	0xFFE
  3762                           tosl	equ	0xFFD
  3763                           pclath	equ	0xFFA
  3764                           tblptru	equ	0xFF8
  3765                           tblptrh	equ	0xFF7
  3766                           tblptrl	equ	0xFF6
  3767                           tablat	equ	0xFF5
  3768                           prodh	equ	0xFF4
  3769                           prodl	equ	0xFF3
  3770                           postinc0	equ	0xFEE
  3771                           wreg	equ	0xFE8
  3772                           indf1	equ	0xFE7
  3773                           postdec1	equ	0xFE5
  3774                           fsr1h	equ	0xFE2
  3775                           fsr1l	equ	0xFE1
  3776                           indf2	equ	0xFDF
  3777                           postinc2	equ	0xFDE
  3778                           fsr2h	equ	0xFDA
  3779                           fsr2l	equ	0xFD9
  3780                           status	equ	0xFD8
  3781                           
  3782 ;; *************** function _GroupCommon *****************
  3783 ;; Defined at:
  3784 ;;		line 79 in file "MessageFunctions.c"
  3785 ;; Parameters:    Size  Location     Type
  3786 ;;  request         1    wreg     enum E6
  3787 ;;  data            2   59[BANK0 ] PTR unsigned char 
  3788 ;;		 -> rxMsgData(20), 
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;  request         1   61[BANK0 ] enum E6
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      void 
  3793 ;; Registers used:
  3794 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3800 ;;      Params:         0       2       0       0       0       0       0
  3801 ;;      Locals:         0       1       0       0       0       0       0
  3802 ;;      Temps:          0       0       0       0       0       0       0
  3803 ;;      Totals:         0       3       0       0       0       0       0
  3804 ;;Total ram usage:        3 bytes
  3805 ;; Hardware stack levels used:    1
  3806 ;; Hardware stack levels required when called:    6
  3807 ;; This function calls:
  3808 ;;		_PrintHelpScreen
  3809 ;;		_testLeds
  3810 ;; This function is called by:
  3811 ;;		_readUartByte
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815                           	psect	text3
  3816  002910                     __ptext3:
  3817                           	opt stack 0
  3818  002910                     _GroupCommon:
  3819                           	opt stack 23
  3820                           
  3821                           ;incstack = 0
  3822                           ;GroupCommon@request stored from wreg
  3823  002910  0100               	movlb	0	; () banked
  3824  002912  6F9D               	movwf	GroupCommon@request& (0+255),b
  3825                           
  3826                           ;MessageFunctions.c: 81: switch (request)
  3827  002914  D006               	goto	l1103
  3828  002916                     
  3829                           ;MessageFunctions.c: 84: PrintHelpScreen();
  3830  002916  ECE6  F001         	call	_PrintHelpScreen	;wreg free
  3831                           
  3832                           ;MessageFunctions.c: 85: break;
  3833  00291A  0012               	return	
  3834  00291C                     
  3835                           ;MessageFunctions.c: 88: testLeds();
  3836  00291C  EC2D  F010         	call	_testLeds	;wreg free
  3837                           
  3838                           ;MessageFunctions.c: 93: }
  3839                           
  3840                           ;MessageFunctions.c: 92: break;
  3841                           
  3842                           ;MessageFunctions.c: 91: default:
  3843                           
  3844                           ;MessageFunctions.c: 89: break;
  3845  002920  0012               	return	
  3846  002922                     l1103:
  3847  002922  0100               	movlb	0	; () banked
  3848  002924  519D               	movf	GroupCommon@request& (0+255),w,b
  3849                           
  3850                           ; Switch size 1, requested type "space"
  3851                           ; Number of cases is 2, Range of values is 24 to 28
  3852                           ; switch strategies available:
  3853                           ; Name         Instructions Cycles
  3854                           ; simple_byte            7     4 (average)
  3855                           ;	Chosen strategy is simple_byte
  3856  002926  0A18               	xorlw	24	; case 24
  3857  002928  B4D8               	btfsc	status,2,c
  3858  00292A  D7F5               	goto	l1104
  3859  00292C  0A04               	xorlw	4	; case 28
  3860  00292E  A4D8               	btfss	status,2,c
  3861  002930  0012               	return	
  3862  002932  D7F4               	goto	l1106
  3863  002934                     __end_of_GroupCommon:
  3864                           	opt stack 0
  3865                           tosu	equ	0xFFF
  3866                           tosh	equ	0xFFE
  3867                           tosl	equ	0xFFD
  3868                           pclath	equ	0xFFA
  3869                           tblptru	equ	0xFF8
  3870                           tblptrh	equ	0xFF7
  3871                           tblptrl	equ	0xFF6
  3872                           tablat	equ	0xFF5
  3873                           prodh	equ	0xFF4
  3874                           prodl	equ	0xFF3
  3875                           postinc0	equ	0xFEE
  3876                           wreg	equ	0xFE8
  3877                           indf1	equ	0xFE7
  3878                           postdec1	equ	0xFE5
  3879                           fsr1h	equ	0xFE2
  3880                           fsr1l	equ	0xFE1
  3881                           indf2	equ	0xFDF
  3882                           postinc2	equ	0xFDE
  3883                           fsr2h	equ	0xFDA
  3884                           fsr2l	equ	0xFD9
  3885                           status	equ	0xFD8
  3886                           
  3887 ;; *************** function _GroupRx *****************
  3888 ;; Defined at:
  3889 ;;		line 11 in file "MessageFunctions.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;  request         1    wreg     enum E6
  3892 ;;  data            2   59[BANK0 ] PTR unsigned char 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;  request         1   61[BANK0 ] enum E6
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3904 ;;      Params:         0       2       0       0       0       0       0
  3905 ;;      Locals:         0       1       0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0
  3907 ;;      Totals:         0       3       0       0       0       0       0
  3908 ;;Total ram usage:        3 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    8
  3911 ;; This function calls:
  3912 ;;		_AdcSingleSample
  3913 ;; This function is called by:
  3914 ;;		_readUartByte
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text4
  3919  002644                     __ptext4:
  3920                           	opt stack 0
  3921  002644                     _GroupRx:
  3922                           	opt stack 21
  3923                           
  3924                           ;incstack = 0
  3925                           ;GroupRx@request stored from wreg
  3926  002644  0100               	movlb	0	; () banked
  3927  002646  6F9D               	movwf	GroupRx@request& (0+255),b
  3928                           
  3929                           ;MessageFunctions.c: 13: switch (request)
  3930  002648  D008               	goto	l1077
  3931  00264A                     
  3932                           ;MessageFunctions.c: 34: AdcSingleSample(RX_TYPE, data);
  3933  00264A  C09B  F075         	movff	GroupRx@data,AdcSingleSample@data
  3934  00264E  C09C  F076         	movff	GroupRx@data+1,AdcSingleSample@data+1
  3935  002652  0E01               	movlw	1
  3936  002654  EC2A  F008         	call	_AdcSingleSample
  3937                           
  3938                           ;MessageFunctions.c: 39: }
  3939                           
  3940                           ;MessageFunctions.c: 38: break;
  3941                           
  3942                           ;MessageFunctions.c: 37: default:
  3943                           
  3944                           ;MessageFunctions.c: 35: break;
  3945  002658  0012               	return	
  3946  00265A                     l1077:
  3947  00265A  0100               	movlb	0	; () banked
  3948  00265C  519D               	movf	GroupRx@request& (0+255),w,b
  3949                           
  3950                           ; Switch size 1, requested type "space"
  3951                           ; Number of cases is 6, Range of values is 18 to 40
  3952                           ; switch strategies available:
  3953                           ; Name         Instructions Cycles
  3954                           ; simple_byte           19    10 (average)
  3955                           ;	Chosen strategy is simple_byte
  3956  00265E  0A12               	xorlw	18	; case 18
  3957  002660  B4D8               	btfsc	status,2,c
  3958  002662  0012               	return	
  3959  002664  0A04               	xorlw	4	; case 22
  3960  002666  B4D8               	btfsc	status,2,c
  3961  002668  0012               	return	
  3962  00266A  0A0F               	xorlw	15	; case 25
  3963  00266C  B4D8               	btfsc	status,2,c
  3964  00266E  0012               	return	
  3965  002670  0A38               	xorlw	56	; case 33
  3966  002672  B4D8               	btfsc	status,2,c
  3967  002674  0012               	return	
  3968  002676  0A02               	xorlw	2	; case 35
  3969  002678  B4D8               	btfsc	status,2,c
  3970  00267A  D7E7               	goto	l1084
  3971  00267C  0A0B               	xorlw	11	; case 40
  3972  00267E  0012               	return	
  3973  002680                     __end_of_GroupRx:
  3974                           	opt stack 0
  3975                           tosu	equ	0xFFF
  3976                           tosh	equ	0xFFE
  3977                           tosl	equ	0xFFD
  3978                           pclath	equ	0xFFA
  3979                           tblptru	equ	0xFF8
  3980                           tblptrh	equ	0xFF7
  3981                           tblptrl	equ	0xFF6
  3982                           tablat	equ	0xFF5
  3983                           prodh	equ	0xFF4
  3984                           prodl	equ	0xFF3
  3985                           postinc0	equ	0xFEE
  3986                           wreg	equ	0xFE8
  3987                           indf1	equ	0xFE7
  3988                           postdec1	equ	0xFE5
  3989                           fsr1h	equ	0xFE2
  3990                           fsr1l	equ	0xFE1
  3991                           indf2	equ	0xFDF
  3992                           postinc2	equ	0xFDE
  3993                           fsr2h	equ	0xFDA
  3994                           fsr2l	equ	0xFD9
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function _GroupTx *****************
  3998 ;; Defined at:
  3999 ;;		line 42 in file "MessageFunctions.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  request         1    wreg     enum E6
  4002 ;;  data            2   59[BANK0 ] PTR unsigned char 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;  request         1   61[BANK0 ] enum E6
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      void 
  4007 ;; Registers used:
  4008 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4014 ;;      Params:         0       2       0       0       0       0       0
  4015 ;;      Locals:         0       1       0       0       0       0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0
  4017 ;;      Totals:         0       3       0       0       0       0       0
  4018 ;;Total ram usage:        3 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    8
  4021 ;; This function calls:
  4022 ;;		_AdcSingleSample
  4023 ;; This function is called by:
  4024 ;;		_readUartByte
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text5
  4029  002422                     __ptext5:
  4030                           	opt stack 0
  4031  002422                     _GroupTx:
  4032                           	opt stack 21
  4033                           
  4034                           ;incstack = 0
  4035                           ;GroupTx@request stored from wreg
  4036  002422  0100               	movlb	0	; () banked
  4037  002424  6F9D               	movwf	GroupTx@request& (0+255),b
  4038                           
  4039                           ;MessageFunctions.c: 44: switch (request)
  4040  002426  D008               	goto	l1089
  4041  002428                     
  4042                           ;MessageFunctions.c: 71: AdcSingleSample(TX_TYPE, data);
  4043  002428  C09B  F075         	movff	GroupTx@data,AdcSingleSample@data
  4044  00242C  C09C  F076         	movff	GroupTx@data+1,AdcSingleSample@data+1
  4045  002430  0E00               	movlw	0
  4046  002432  EC2A  F008         	call	_AdcSingleSample
  4047                           
  4048                           ;MessageFunctions.c: 76: }
  4049                           
  4050                           ;MessageFunctions.c: 75: break;
  4051                           
  4052                           ;MessageFunctions.c: 74: default:
  4053                           
  4054                           ;MessageFunctions.c: 72: break;
  4055  002436  0012               	return	
  4056  002438                     l1089:
  4057  002438  0100               	movlb	0	; () banked
  4058  00243A  519D               	movf	GroupTx@request& (0+255),w,b
  4059                           
  4060                           ; Switch size 1, requested type "space"
  4061                           ; Number of cases is 8, Range of values is 18 to 101
  4062                           ; switch strategies available:
  4063                           ; Name         Instructions Cycles
  4064                           ; simple_byte           25    13 (average)
  4065                           ;	Chosen strategy is simple_byte
  4066  00243C  0A12               	xorlw	18	; case 18
  4067  00243E  B4D8               	btfsc	status,2,c
  4068  002440  0012               	return	
  4069  002442  0A04               	xorlw	4	; case 22
  4070  002444  B4D8               	btfsc	status,2,c
  4071  002446  0012               	return	
  4072  002448  0A0F               	xorlw	15	; case 25
  4073  00244A  B4D8               	btfsc	status,2,c
  4074  00244C  0012               	return	
  4075  00244E  0A38               	xorlw	56	; case 33
  4076  002450  B4D8               	btfsc	status,2,c
  4077  002452  0012               	return	
  4078  002454  0A02               	xorlw	2	; case 35
  4079  002456  B4D8               	btfsc	status,2,c
  4080  002458  D7E7               	goto	l1098
  4081  00245A  0A0B               	xorlw	11	; case 40
  4082  00245C  B4D8               	btfsc	status,2,c
  4083  00245E  0012               	return	
  4084  002460  0A4B               	xorlw	75	; case 99
  4085  002462  B4D8               	btfsc	status,2,c
  4086  002464  0012               	return	
  4087  002466  0A06               	xorlw	6	; case 101
  4088  002468  0012               	return	
  4089  00246A                     __end_of_GroupTx:
  4090                           	opt stack 0
  4091                           tosu	equ	0xFFF
  4092                           tosh	equ	0xFFE
  4093                           tosl	equ	0xFFD
  4094                           pclath	equ	0xFFA
  4095                           tblptru	equ	0xFF8
  4096                           tblptrh	equ	0xFF7
  4097                           tblptrl	equ	0xFF6
  4098                           tablat	equ	0xFF5
  4099                           prodh	equ	0xFF4
  4100                           prodl	equ	0xFF3
  4101                           postinc0	equ	0xFEE
  4102                           wreg	equ	0xFE8
  4103                           indf1	equ	0xFE7
  4104                           postdec1	equ	0xFE5
  4105                           fsr1h	equ	0xFE2
  4106                           fsr1l	equ	0xFE1
  4107                           indf2	equ	0xFDF
  4108                           postinc2	equ	0xFDE
  4109                           fsr2h	equ	0xFDA
  4110                           fsr2l	equ	0xFD9
  4111                           status	equ	0xFD8
  4112                           
  4113 ;; *************** function _AdcSingleSample *****************
  4114 ;; Defined at:
  4115 ;;		line 46 in file "AdcApp.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;  cType           1    wreg     enum E177
  4118 ;;  data            2   21[BANK0 ] PTR unsigned char 
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;  cType           1   23[BANK0 ] enum E177
  4121 ;;  retNum          4   24[BANK0 ] unsigned long 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      void 
  4124 ;; Registers used:
  4125 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4131 ;;      Params:         0       2       0       0       0       0       0
  4132 ;;      Locals:         0       5       0       0       0       0       0
  4133 ;;      Temps:          1       0       0       0       0       0       0
  4134 ;;      Totals:         1       7       0       0       0       0       0
  4135 ;;Total ram usage:        8 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    7
  4138 ;; This function calls:
  4139 ;;		_GetIntFromUartData
  4140 ;;		_UART_Write_Text
  4141 ;;		___lldiv
  4142 ;;		___llmod
  4143 ;; This function is called by:
  4144 ;;		_GroupRx
  4145 ;;		_GroupTx
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text6
  4150  001054                     __ptext6:
  4151                           	opt stack 0
  4152  001054                     _AdcSingleSample:
  4153                           	opt stack 21
  4154                           
  4155                           ;incstack = 0
  4156                           ;AdcSingleSample@cType stored from wreg
  4157  001054  0100               	movlb	0	; () banked
  4158  001056  6F77               	movwf	AdcSingleSample@cType& (0+255),b
  4159                           
  4160                           ;AdcApp.c: 48: uint32_t retNum = 0x0;
  4161  001058  0E00               	movlw	0
  4162  00105A  0100               	movlb	0	; () banked
  4163  00105C  6F78               	movwf	AdcSingleSample@retNum& (0+255),b
  4164  00105E  0E00               	movlw	0
  4165  001060  6F79               	movwf	(AdcSingleSample@retNum+1)& (0+255),b
  4166  001062  0E00               	movlw	0
  4167  001064  6F7A               	movwf	(AdcSingleSample@retNum+2)& (0+255),b
  4168  001066  0E00               	movlw	0
  4169  001068  6F7B               	movwf	(AdcSingleSample@retNum+3)& (0+255),b
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;AdcApp.c: 50: if(data[0] == '0')
  4173  00106A  C075  FFD9         	movff	AdcSingleSample@data,fsr2l
  4174  00106E  C076  FFDA         	movff	AdcSingleSample@data+1,fsr2h
  4175  001072  0E30               	movlw	48
  4176  001074  18DE               	xorwf	postinc2,w,c
  4177  001076  A4D8               	btfss	status,2,c
  4178  001078  D007               	goto	l100
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;AdcApp.c: 51: {
  4182                           ;AdcApp.c: 52: UART_Write_Text("NOT OK \n\r");
  4183  00107A  0ED1               	movlw	low STR_1
  4184  00107C  6E19               	movwf	UART_Write_Text@text,c
  4185  00107E  0E7F               	movlw	high STR_1
  4186  001080  6E1A               	movwf	UART_Write_Text@text+1,c
  4187  001082  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  4188                           
  4189                           ;AdcApp.c: 53: }
  4190  001086  0012               	return	
  4191  001088                     l100:
  4192                           
  4193                           ;AdcApp.c: 54: else
  4194                           ;AdcApp.c: 55: {
  4195                           ;AdcApp.c: 56: retNum = GetIntFromUartData(data);
  4196  001088  C075  F066         	movff	AdcSingleSample@data,GetIntFromUartData@data
  4197  00108C  C076  F067         	movff	AdcSingleSample@data+1,GetIntFromUartData@data+1
  4198  001090  ECB2  F00D         	call	_GetIntFromUartData	;wreg free
  4199  001094  C066  F078         	movff	?_GetIntFromUartData,AdcSingleSample@retNum
  4200  001098  C067  F079         	movff	?_GetIntFromUartData+1,AdcSingleSample@retNum+1
  4201  00109C  C068  F07A         	movff	?_GetIntFromUartData+2,AdcSingleSample@retNum+2
  4202  0010A0  C069  F07B         	movff	?_GetIntFromUartData+3,AdcSingleSample@retNum+3
  4203                           
  4204                           ;AdcApp.c: 57: channelNum = (retNum / 0xA) % 0x64;
  4205  0010A4  0E0A               	movlw	10
  4206  0010A6  6E1C               	movwf	___lldiv@divisor,c
  4207  0010A8  0E00               	movlw	0
  4208  0010AA  6E1D               	movwf	___lldiv@divisor+1,c
  4209  0010AC  0E00               	movlw	0
  4210  0010AE  6E1E               	movwf	___lldiv@divisor+2,c
  4211  0010B0  0E00               	movlw	0
  4212  0010B2  6E1F               	movwf	___lldiv@divisor+3,c
  4213  0010B4  C078  F018         	movff	AdcSingleSample@retNum,___lldiv@dividend
  4214  0010B8  C079  F019         	movff	AdcSingleSample@retNum+1,___lldiv@dividend+1
  4215  0010BC  C07A  F01A         	movff	AdcSingleSample@retNum+2,___lldiv@dividend+2
  4216  0010C0  C07B  F01B         	movff	AdcSingleSample@retNum+3,___lldiv@dividend+3
  4217  0010C4  ECD5  F00E         	call	___lldiv	;wreg free
  4218  0010C8  C018  F025         	movff	?___lldiv,___llmod@dividend
  4219  0010CC  C019  F026         	movff	?___lldiv+1,___llmod@dividend+1
  4220  0010D0  C01A  F027         	movff	?___lldiv+2,___llmod@dividend+2
  4221  0010D4  C01B  F028         	movff	?___lldiv+3,___llmod@dividend+3
  4222  0010D8  0E64               	movlw	100
  4223  0010DA  6E29               	movwf	___llmod@divisor,c
  4224  0010DC  0E00               	movlw	0
  4225  0010DE  6E2A               	movwf	___llmod@divisor+1,c
  4226  0010E0  0E00               	movlw	0
  4227  0010E2  6E2B               	movwf	___llmod@divisor+2,c
  4228  0010E4  0E00               	movlw	0
  4229  0010E6  6E2C               	movwf	___llmod@divisor+3,c
  4230  0010E8  ECFA  F00F         	call	___llmod	;wreg free
  4231  0010EC  C025  F037         	movff	?___llmod,_channelNum
  4232  0010F0  C026  F038         	movff	?___llmod+1,_channelNum+1
  4233                           
  4234                           ;AdcApp.c: 58: numSamples = retNum % 0xA;
  4235  0010F4  C078  F025         	movff	AdcSingleSample@retNum,___llmod@dividend
  4236  0010F8  C079  F026         	movff	AdcSingleSample@retNum+1,___llmod@dividend+1
  4237  0010FC  C07A  F027         	movff	AdcSingleSample@retNum+2,___llmod@dividend+2
  4238  001100  C07B  F028         	movff	AdcSingleSample@retNum+3,___llmod@dividend+3
  4239  001104  0E0A               	movlw	10
  4240  001106  6E29               	movwf	___llmod@divisor,c
  4241  001108  0E00               	movlw	0
  4242  00110A  6E2A               	movwf	___llmod@divisor+1,c
  4243  00110C  0E00               	movlw	0
  4244  00110E  6E2B               	movwf	___llmod@divisor+2,c
  4245  001110  0E00               	movlw	0
  4246  001112  6E2C               	movwf	___llmod@divisor+3,c
  4247  001114  ECFA  F00F         	call	___llmod	;wreg free
  4248  001118  C025  F0B5         	movff	?___llmod,_numSamples
  4249  00111C  C026  F0B6         	movff	?___llmod+1,_numSamples+1
  4250                           
  4251                           ;AdcApp.c: 60: if(channelNum > (0x04))
  4252  001120  5038               	movf	_channelNum+1,w,c
  4253  001122  E104               	bnz	u7460
  4254  001124  0E05               	movlw	5
  4255  001126  5C37               	subwf	_channelNum,w,c
  4256  001128  A0D8               	btfss	status,0,c
  4257  00112A  D007               	goto	l102
  4258  00112C                     u7460:
  4259                           
  4260                           ;AdcApp.c: 61: {
  4261                           ;AdcApp.c: 62: UART_Write_Text("NOT OK \n\r");
  4262  00112C  0ED1               	movlw	low STR_1
  4263  00112E  6E19               	movwf	UART_Write_Text@text,c
  4264  001130  0E7F               	movlw	high STR_1
  4265  001132  6E1A               	movwf	UART_Write_Text@text+1,c
  4266  001134  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  4267                           
  4268                           ;AdcApp.c: 63: }
  4269  001138  0012               	return	
  4270  00113A                     l102:
  4271                           
  4272                           ;AdcApp.c: 64: else
  4273                           ;AdcApp.c: 65: {
  4274                           ;AdcApp.c: 66: if(cType == TX_TYPE)
  4275  00113A  0100               	movlb	0	; () banked
  4276  00113C  5177               	movf	AdcSingleSample@cType& (0+255),w,b
  4277  00113E  A4D8               	btfss	status,2,c
  4278  001140  D01C               	goto	l109
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;AdcApp.c: 67: {
  4282                           ;AdcApp.c: 68: if(channelNum == 0) UART_Write_Text("SAMPLE CHANNEL NAME");
  4283  001142  5037               	movf	_channelNum,w,c
  4284  001144  1038               	iorwf	_channelNum+1,w,c
  4285  001146  A4D8               	btfss	status,2,c
  4286  001148  D006               	goto	l105
  4287                           
  4288                           ; BSR set to: 0
  4289  00114A  0E94               	movlw	low STR_3
  4290  00114C  6E19               	movwf	UART_Write_Text@text,c
  4291  00114E  0E7F               	movlw	high STR_3
  4292  001150  6E1A               	movwf	UART_Write_Text@text+1,c
  4293  001152  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  4294  001156                     l105:
  4295                           
  4296                           ;AdcApp.c: 69: if(channelNum == 0x0 || channelNum == 0x1)
  4297  001156  5037               	movf	_channelNum,w,c
  4298  001158  1038               	iorwf	_channelNum+1,w,c
  4299  00115A  B4D8               	btfsc	status,2,c
  4300  00115C  D004               	goto	u7500
  4301  00115E  0437               	decf	_channelNum,w,c
  4302  001160  1038               	iorwf	_channelNum+1,w,c
  4303  001162  A4D8               	btfss	status,2,c
  4304  001164  D004               	goto	l106
  4305  001166                     u7500:
  4306                           
  4307                           ;AdcApp.c: 70: {
  4308                           ;AdcApp.c: 71: needToSample = 1;
  4309  001166  0E01               	movlw	1
  4310  001168  0100               	movlb	0	; () banked
  4311  00116A  6FC3               	movwf	_needToSample& (0+255),b	;volatile
  4312                           
  4313                           ;AdcApp.c: 72: }
  4314  00116C  D006               	goto	l109
  4315  00116E                     l106:
  4316                           
  4317                           ;AdcApp.c: 73: else
  4318                           ;AdcApp.c: 74: {
  4319                           ;AdcApp.c: 75: UART_Write_Text("NOT OK \n\r");
  4320                           
  4321                           ; BSR set to: 0
  4322  00116E  0ED1               	movlw	low STR_1
  4323  001170  6E19               	movwf	UART_Write_Text@text,c
  4324  001172  0E7F               	movlw	high STR_1
  4325  001174  6E1A               	movwf	UART_Write_Text@text+1,c
  4326  001176  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  4327  00117A                     l109:
  4328                           
  4329                           ;AdcApp.c: 76: }
  4330                           ;AdcApp.c: 78: }
  4331                           ;AdcApp.c: 80: if(cType == RX_TYPE)
  4332  00117A  0100               	movlb	0	; () banked
  4333  00117C  0577               	decf	AdcSingleSample@cType& (0+255),w,b
  4334  00117E  A4D8               	btfss	status,2,c
  4335  001180  D003               	goto	l110
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;AdcApp.c: 81: {
  4339                           ;AdcApp.c: 82: needToSample = 1;
  4340  001182  0E01               	movlw	1
  4341  001184  6FC3               	movwf	_needToSample& (0+255),b	;volatile
  4342                           
  4343                           ;AdcApp.c: 83: }
  4344  001186  0012               	return	
  4345  001188                     l110:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;AdcApp.c: 84: else
  4349                           ;AdcApp.c: 85: {
  4350                           ;AdcApp.c: 86: UART_Write_Text("NOT OK \n\r");
  4351                           
  4352                           ; BSR set to: 0
  4353  001188  0ED1               	movlw	low STR_1
  4354  00118A  6E19               	movwf	UART_Write_Text@text,c
  4355  00118C  0E7F               	movlw	high STR_1
  4356  00118E  6E1A               	movwf	UART_Write_Text@text+1,c
  4357  001190  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  4358  001194  0012               	return	
  4359  001196                     __end_of_AdcSingleSample:
  4360                           	opt stack 0
  4361                           tosu	equ	0xFFF
  4362                           tosh	equ	0xFFE
  4363                           tosl	equ	0xFFD
  4364                           pclath	equ	0xFFA
  4365                           tblptru	equ	0xFF8
  4366                           tblptrh	equ	0xFF7
  4367                           tblptrl	equ	0xFF6
  4368                           tablat	equ	0xFF5
  4369                           prodh	equ	0xFF4
  4370                           prodl	equ	0xFF3
  4371                           postinc0	equ	0xFEE
  4372                           wreg	equ	0xFE8
  4373                           indf1	equ	0xFE7
  4374                           postdec1	equ	0xFE5
  4375                           fsr1h	equ	0xFE2
  4376                           fsr1l	equ	0xFE1
  4377                           indf2	equ	0xFDF
  4378                           postinc2	equ	0xFDE
  4379                           fsr2h	equ	0xFDA
  4380                           fsr2l	equ	0xFD9
  4381                           status	equ	0xFD8
  4382                           
  4383 ;; *************** function ___lldiv *****************
  4384 ;; Defined at:
  4385 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;  dividend        4   23[COMRAM] unsigned long 
  4388 ;;  divisor         4   27[COMRAM] unsigned long 
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;  quotient        4   31[COMRAM] unsigned long 
  4391 ;;  counter         1   35[COMRAM] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  4   23[COMRAM] unsigned long 
  4394 ;; Registers used:
  4395 ;;		wreg, status,2, status,0
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4401 ;;      Params:         8       0       0       0       0       0       0
  4402 ;;      Locals:         5       0       0       0       0       0       0
  4403 ;;      Temps:          0       0       0       0       0       0       0
  4404 ;;      Totals:        13       0       0       0       0       0       0
  4405 ;;Total ram usage:       13 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    3
  4408 ;; This function calls:
  4409 ;;		Nothing
  4410 ;; This function is called by:
  4411 ;;		_AdcSingleSample
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text7
  4416  001DAA                     __ptext7:
  4417                           	opt stack 0
  4418  001DAA                     ___lldiv:
  4419                           	opt stack 24
  4420                           
  4421                           ;incstack = 0
  4422  001DAA  0E00               	movlw	0
  4423  001DAC  6E20               	movwf	___lldiv@quotient,c
  4424  001DAE  0E00               	movlw	0
  4425  001DB0  6E21               	movwf	___lldiv@quotient+1,c
  4426  001DB2  0E00               	movlw	0
  4427  001DB4  6E22               	movwf	___lldiv@quotient+2,c
  4428  001DB6  0E00               	movlw	0
  4429  001DB8  6E23               	movwf	___lldiv@quotient+3,c
  4430  001DBA  501C               	movf	___lldiv@divisor,w,c
  4431  001DBC  101D               	iorwf	___lldiv@divisor+1,w,c
  4432  001DBE  101E               	iorwf	___lldiv@divisor+2,w,c
  4433  001DC0  101F               	iorwf	___lldiv@divisor+3,w,c
  4434  001DC2  B4D8               	btfsc	status,2,c
  4435  001DC4  D02A               	goto	l1681
  4436  001DC6  0E01               	movlw	1
  4437  001DC8  6E24               	movwf	___lldiv@counter,c
  4438  001DCA  D006               	goto	l1676
  4439  001DCC  90D8               	bcf	status,0,c
  4440  001DCE  361C               	rlcf	___lldiv@divisor,f,c
  4441  001DD0  361D               	rlcf	___lldiv@divisor+1,f,c
  4442  001DD2  361E               	rlcf	___lldiv@divisor+2,f,c
  4443  001DD4  361F               	rlcf	___lldiv@divisor+3,f,c
  4444  001DD6  2A24               	incf	___lldiv@counter,f,c
  4445  001DD8                     l1676:
  4446  001DD8  AE1F               	btfss	___lldiv@divisor+3,7,c
  4447  001DDA  D7F8               	goto	l1677
  4448  001DDC                     u7280:
  4449  001DDC  90D8               	bcf	status,0,c
  4450  001DDE  3620               	rlcf	___lldiv@quotient,f,c
  4451  001DE0  3621               	rlcf	___lldiv@quotient+1,f,c
  4452  001DE2  3622               	rlcf	___lldiv@quotient+2,f,c
  4453  001DE4  3623               	rlcf	___lldiv@quotient+3,f,c
  4454  001DE6  501C               	movf	___lldiv@divisor,w,c
  4455  001DE8  5C18               	subwf	___lldiv@dividend,w,c
  4456  001DEA  501D               	movf	___lldiv@divisor+1,w,c
  4457  001DEC  5819               	subwfb	___lldiv@dividend+1,w,c
  4458  001DEE  501E               	movf	___lldiv@divisor+2,w,c
  4459  001DF0  581A               	subwfb	___lldiv@dividend+2,w,c
  4460  001DF2  501F               	movf	___lldiv@divisor+3,w,c
  4461  001DF4  581B               	subwfb	___lldiv@dividend+3,w,c
  4462  001DF6  A0D8               	btfss	status,0,c
  4463  001DF8  D009               	goto	l1680
  4464  001DFA  501C               	movf	___lldiv@divisor,w,c
  4465  001DFC  5E18               	subwf	___lldiv@dividend,f,c
  4466  001DFE  501D               	movf	___lldiv@divisor+1,w,c
  4467  001E00  5A19               	subwfb	___lldiv@dividend+1,f,c
  4468  001E02  501E               	movf	___lldiv@divisor+2,w,c
  4469  001E04  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4470  001E06  501F               	movf	___lldiv@divisor+3,w,c
  4471  001E08  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4472  001E0A  8020               	bsf	___lldiv@quotient,0,c
  4473  001E0C                     l1680:
  4474  001E0C  90D8               	bcf	status,0,c
  4475  001E0E  321F               	rrcf	___lldiv@divisor+3,f,c
  4476  001E10  321E               	rrcf	___lldiv@divisor+2,f,c
  4477  001E12  321D               	rrcf	___lldiv@divisor+1,f,c
  4478  001E14  321C               	rrcf	___lldiv@divisor,f,c
  4479  001E16  2E24               	decfsz	___lldiv@counter,f,c
  4480  001E18  D7E1               	goto	u7280
  4481  001E1A                     l1681:
  4482  001E1A  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4483  001E1E  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4484  001E22  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4485  001E26  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4486  001E2A  0012               	return		;funcret
  4487  001E2C                     __end_of___lldiv:
  4488                           	opt stack 0
  4489                           tosu	equ	0xFFF
  4490                           tosh	equ	0xFFE
  4491                           tosl	equ	0xFFD
  4492                           pclath	equ	0xFFA
  4493                           tblptru	equ	0xFF8
  4494                           tblptrh	equ	0xFF7
  4495                           tblptrl	equ	0xFF6
  4496                           tablat	equ	0xFF5
  4497                           prodh	equ	0xFF4
  4498                           prodl	equ	0xFF3
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           indf1	equ	0xFE7
  4502                           postdec1	equ	0xFE5
  4503                           fsr1h	equ	0xFE2
  4504                           fsr1l	equ	0xFE1
  4505                           indf2	equ	0xFDF
  4506                           postinc2	equ	0xFDE
  4507                           fsr2h	equ	0xFDA
  4508                           fsr2l	equ	0xFD9
  4509                           status	equ	0xFD8
  4510                           
  4511 ;; *************** function _GetIntFromUartData *****************
  4512 ;; Defined at:
  4513 ;;		line 40 in file "SystemCommon.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  data            2    6[BANK0 ] PTR unsigned char 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  c               1   18[BANK0 ] unsigned char 
  4518 ;;  idx             2   19[BANK0 ] int 
  4519 ;;  dataRegArr      8   10[BANK0 ] unsigned char [8]
  4520 ;; Return value:  Size  Location     Type
  4521 ;;                  4    6[BANK0 ] unsigned long 
  4522 ;; Registers used:
  4523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4529 ;;      Params:         0       4       0       0       0       0       0
  4530 ;;      Locals:         0      11       0       0       0       0       0
  4531 ;;      Temps:          2       0       0       0       0       0       0
  4532 ;;      Totals:         2      15       0       0       0       0       0
  4533 ;;Total ram usage:       17 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    6
  4536 ;; This function calls:
  4537 ;;		_ZeroArray
  4538 ;;		_strtol
  4539 ;; This function is called by:
  4540 ;;		_AdcSingleSample
  4541 ;;		_DacSetValue
  4542 ;;		_UpdateRxFreq
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           	psect	text8
  4547  001B64                     __ptext8:
  4548                           	opt stack 0
  4549  001B64                     _GetIntFromUartData:
  4550                           	opt stack 21
  4551                           
  4552                           ;SystemCommon.c: 42: char dataRegArr[8];
  4553                           ;SystemCommon.c: 43: ZeroArray(dataRegArr, 8);
  4554                           
  4555                           ;incstack = 0
  4556  001B64  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  4557  001B66  6E20               	movwf	ZeroArray@array,c
  4558  001B68  0E00               	movlw	high GetIntFromUartData@dataRegArr
  4559  001B6A  6E21               	movwf	ZeroArray@array+1,c
  4560  001B6C  0E00               	movlw	0
  4561  001B6E  6E23               	movwf	ZeroArray@size+1,c
  4562  001B70  0E08               	movlw	8
  4563  001B72  6E22               	movwf	ZeroArray@size,c
  4564  001B74  ECDC  F014         	call	_ZeroArray	;wreg free
  4565                           
  4566                           ;SystemCommon.c: 45: for(int idx = 0; idx < 8; idx++)
  4567  001B78  0E00               	movlw	0
  4568  001B7A  0100               	movlb	0	; () banked
  4569  001B7C  6F74               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  4570  001B7E  0E00               	movlw	0
  4571  001B80  6F73               	movwf	GetIntFromUartData@idx& (0+255),b
  4572  001B82                     l6722:
  4573                           
  4574                           ; BSR set to: 0
  4575  001B82  BF74               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  4576  001B84  D006               	goto	l1152
  4577  001B86  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  4578  001B88  E120               	bnz	l6740
  4579  001B8A  0E08               	movlw	8
  4580  001B8C  5D73               	subwf	GetIntFromUartData@idx& (0+255),w,b
  4581  001B8E  B0D8               	btfsc	status,0,c
  4582  001B90  D01C               	goto	u7080
  4583  001B92                     l1152:
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;SystemCommon.c: 46: {
  4587                           ;SystemCommon.c: 47: char c = data[idx + 1];
  4588                           
  4589                           ; BSR set to: 0
  4590  001B92  0E01               	movlw	1
  4591  001B94  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  4592  001B96  6E2E               	movwf	??_GetIntFromUartData& (0+255),c
  4593  001B98  0E00               	movlw	0
  4594  001B9A  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  4595  001B9C  6E2F               	movwf	(??_GetIntFromUartData+1)& (0+255),c
  4596  001B9E  502E               	movf	??_GetIntFromUartData,w,c
  4597  001BA0  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  4598  001BA2  6ED9               	movwf	fsr2l,c
  4599  001BA4  502F               	movf	??_GetIntFromUartData+1,w,c
  4600  001BA6  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  4601  001BA8  6EDA               	movwf	fsr2h,c
  4602  001BAA  50DF               	movf	indf2,w,c
  4603  001BAC  6F72               	movwf	GetIntFromUartData@c& (0+255),b
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;SystemCommon.c: 48: if(c == (0))
  4607  001BAE  5172               	movf	GetIntFromUartData@c& (0+255),w,b
  4608  001BB0  B4D8               	btfsc	status,2,c
  4609  001BB2  D00B               	goto	u7080
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;SystemCommon.c: 52: else
  4613                           ;SystemCommon.c: 53: {
  4614                           ;SystemCommon.c: 54: dataRegArr[idx] = c;
  4615                           
  4616                           ; BSR set to: 0
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;SystemCommon.c: 51: }
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;SystemCommon.c: 49: {
  4623                           ;SystemCommon.c: 50: break;
  4624  001BB4  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  4625  001BB6  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  4626  001BB8  6ED9               	movwf	fsr2l,c
  4627  001BBA  0E00               	movlw	high GetIntFromUartData@dataRegArr
  4628  001BBC  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  4629  001BBE  6EDA               	movwf	fsr2h,c
  4630  001BC0  C072  FFDF         	movff	GetIntFromUartData@c,indf2
  4631                           
  4632                           ; BSR set to: 0
  4633                           
  4634                           ; BSR set to: 0
  4635  001BC4  4B73               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  4636  001BC6  2B74               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  4637  001BC8  D7DC               	goto	l6722
  4638  001BCA                     u7080:
  4639  001BCA                     l6740:
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;SystemCommon.c: 55: }
  4643                           ;SystemCommon.c: 56: }
  4644                           ;SystemCommon.c: 58: return strtol(dataRegArr, (0), 10);
  4645  001BCA  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  4646  001BCC  6E24               	movwf	strtol@s,c
  4647  001BCE  0E00               	movlw	high GetIntFromUartData@dataRegArr
  4648  001BD0  6E25               	movwf	strtol@s+1,c
  4649  001BD2  0E00               	movlw	0
  4650  001BD4  6E26               	movwf	strtol@endptr,c
  4651  001BD6  0E00               	movlw	0
  4652  001BD8  6E27               	movwf	strtol@endptr+1,c
  4653  001BDA  0E00               	movlw	0
  4654  001BDC  6E29               	movwf	strtol@base+1,c
  4655  001BDE  0E0A               	movlw	10
  4656  001BE0  6E28               	movwf	strtol@base,c
  4657  001BE2  EC10  F004         	call	_strtol	;wreg free
  4658  001BE6  C024  F066         	movff	?_strtol,?_GetIntFromUartData
  4659  001BEA  C025  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  4660  001BEE  C026  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  4661  001BF2  C027  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  4662  001BF6  0012               	return	
  4663  001BF8                     __end_of_GetIntFromUartData:
  4664                           	opt stack 0
  4665                           tosu	equ	0xFFF
  4666                           tosh	equ	0xFFE
  4667                           tosl	equ	0xFFD
  4668                           pclath	equ	0xFFA
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           prodh	equ	0xFF4
  4674                           prodl	equ	0xFF3
  4675                           postinc0	equ	0xFEE
  4676                           wreg	equ	0xFE8
  4677                           indf1	equ	0xFE7
  4678                           postdec1	equ	0xFE5
  4679                           fsr1h	equ	0xFE2
  4680                           fsr1l	equ	0xFE1
  4681                           indf2	equ	0xFDF
  4682                           postinc2	equ	0xFDE
  4683                           fsr2h	equ	0xFDA
  4684                           fsr2l	equ	0xFD9
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function _strtol *****************
  4688 ;; Defined at:
  4689 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;  s               2   35[COMRAM] PTR const unsigned char 
  4692 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  4693 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  4694 ;;		 -> NULL(0), 
  4695 ;;  base            2   39[COMRAM] int 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  a               4    1[BANK0 ] long 
  4698 ;;  c               1    5[BANK0 ] unsigned char 
  4699 ;;  sign            1    0[BANK0 ] unsigned char 
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  4   35[COMRAM] long 
  4702 ;; Registers used:
  4703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4709 ;;      Params:         6       0       0       0       0       0       0
  4710 ;;      Locals:         0       6       0       0       0       0       0
  4711 ;;      Temps:          4       0       0       0       0       0       0
  4712 ;;      Totals:        10       6       0       0       0       0       0
  4713 ;;Total ram usage:       16 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    5
  4716 ;; This function calls:
  4717 ;;		___lmul
  4718 ;;		_isalpha
  4719 ;;		_isdigit
  4720 ;;		_isspace
  4721 ;;		_toupper
  4722 ;; This function is called by:
  4723 ;;		_GetIntFromUartData
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text9
  4728  000820                     __ptext9:
  4729                           	opt stack 0
  4730  000820                     _strtol:
  4731                           	opt stack 21
  4732                           
  4733                           ;incstack = 0
  4734  000820  C024  FFD9         	movff	strtol@s,fsr2l
  4735  000824  C025  FFDA         	movff	strtol@s+1,fsr2h
  4736  000828  50DF               	movf	indf2,w,c
  4737  00082A  0100               	movlb	0	; () banked
  4738  00082C  6F65               	movwf	strtol@c& (0+255),b
  4739                           
  4740                           ; BSR set to: 0
  4741  00082E  4A24               	infsnz	strtol@s,f,c
  4742  000830  2A25               	incf	strtol@s+1,f,c
  4743                           
  4744                           ; BSR set to: 0
  4745  000832  5165               	movf	strtol@c& (0+255),w,b
  4746  000834  EC62  F014         	call	_isspace
  4747  000838  B0D8               	btfsc	status,0,c
  4748  00083A  D7F2               	goto	_strtol
  4749  00083C  0E00               	movlw	0
  4750  00083E  0100               	movlb	0	; () banked
  4751  000840  6F61               	movwf	strtol@a& (0+255),b
  4752  000842  0E00               	movlw	0
  4753  000844  6F62               	movwf	(strtol@a+1)& (0+255),b
  4754  000846  0E00               	movlw	0
  4755  000848  6F63               	movwf	(strtol@a+2)& (0+255),b
  4756  00084A  0E00               	movlw	0
  4757  00084C  6F64               	movwf	(strtol@a+3)& (0+255),b
  4758  00084E  0E00               	movlw	0
  4759  000850  6F60               	movwf	strtol@sign& (0+255),b
  4760                           
  4761                           ; BSR set to: 0
  4762  000852  0E2D               	movlw	45
  4763  000854  1965               	xorwf	strtol@c& (0+255),w,b
  4764  000856  A4D8               	btfss	status,2,c
  4765  000858  D003               	goto	l1904
  4766                           
  4767                           ; BSR set to: 0
  4768  00085A  0E01               	movlw	1
  4769  00085C  6F60               	movwf	strtol@sign& (0+255),b
  4770  00085E  D004               	goto	u6420
  4771  000860                     l1904:
  4772                           
  4773                           ; BSR set to: 0
  4774                           
  4775                           ; BSR set to: 0
  4776  000860  0E2B               	movlw	43
  4777  000862  1965               	xorwf	strtol@c& (0+255),w,b
  4778  000864  A4D8               	btfss	status,2,c
  4779  000866  D008               	goto	l1906
  4780  000868                     u6420:
  4781                           
  4782                           ; BSR set to: 0
  4783  000868  C024  FFD9         	movff	strtol@s,fsr2l
  4784  00086C  C025  FFDA         	movff	strtol@s+1,fsr2h
  4785  000870  50DF               	movf	indf2,w,c
  4786  000872  6F65               	movwf	strtol@c& (0+255),b
  4787                           
  4788                           ; BSR set to: 0
  4789  000874  4A24               	infsnz	strtol@s,f,c
  4790  000876  2A25               	incf	strtol@s+1,f,c
  4791  000878                     l1906:
  4792                           
  4793                           ; BSR set to: 0
  4794                           
  4795                           ; BSR set to: 0
  4796                           
  4797                           ; BSR set to: 0
  4798  000878  0E30               	movlw	48
  4799  00087A  1965               	xorwf	strtol@c& (0+255),w,b
  4800  00087C  A4D8               	btfss	status,2,c
  4801  00087E  D02E               	goto	l1914
  4802                           
  4803                           ; BSR set to: 0
  4804  000880  C024  FFD9         	movff	strtol@s,fsr2l
  4805  000884  C025  FFDA         	movff	strtol@s+1,fsr2h
  4806  000888  50DF               	movf	indf2,w,c
  4807  00088A  6F65               	movwf	strtol@c& (0+255),b
  4808                           
  4809                           ; BSR set to: 0
  4810  00088C  4A24               	infsnz	strtol@s,f,c
  4811  00088E  2A25               	incf	strtol@s+1,f,c
  4812                           
  4813                           ; BSR set to: 0
  4814  000890  5028               	movf	strtol@base,w,c
  4815  000892  1029               	iorwf	strtol@base+1,w,c
  4816  000894  B4D8               	btfsc	status,2,c
  4817  000896  D005               	goto	u6450
  4818                           
  4819                           ; BSR set to: 0
  4820  000898  0E10               	movlw	16
  4821  00089A  1828               	xorwf	strtol@base,w,c
  4822  00089C  1029               	iorwf	strtol@base+1,w,c
  4823  00089E  A4D8               	btfss	status,2,c
  4824  0008A0  D015               	goto	l1908
  4825  0008A2                     u6450:
  4826                           
  4827                           ; BSR set to: 0
  4828                           
  4829                           ; BSR set to: 0
  4830  0008A2  0E78               	movlw	120
  4831  0008A4  1965               	xorwf	strtol@c& (0+255),w,b
  4832  0008A6  B4D8               	btfsc	status,2,c
  4833  0008A8  D004               	goto	u6470
  4834                           
  4835                           ; BSR set to: 0
  4836  0008AA  0E58               	movlw	88
  4837  0008AC  1965               	xorwf	strtol@c& (0+255),w,b
  4838  0008AE  A4D8               	btfss	status,2,c
  4839  0008B0  D00D               	goto	l1908
  4840  0008B2                     u6470:
  4841                           
  4842                           ; BSR set to: 0
  4843                           
  4844                           ; BSR set to: 0
  4845  0008B2  0E00               	movlw	0
  4846  0008B4  6E29               	movwf	strtol@base+1,c
  4847  0008B6  0E10               	movlw	16
  4848  0008B8  6E28               	movwf	strtol@base,c
  4849                           
  4850                           ; BSR set to: 0
  4851  0008BA  C024  FFD9         	movff	strtol@s,fsr2l
  4852  0008BE  C025  FFDA         	movff	strtol@s+1,fsr2h
  4853  0008C2  50DF               	movf	indf2,w,c
  4854  0008C4  6F65               	movwf	strtol@c& (0+255),b
  4855                           
  4856                           ; BSR set to: 0
  4857  0008C6  4A24               	infsnz	strtol@s,f,c
  4858  0008C8  2A25               	incf	strtol@s+1,f,c
  4859  0008CA  D008               	goto	l1914
  4860  0008CC                     l1908:
  4861                           
  4862                           ; BSR set to: 0
  4863                           
  4864                           ; BSR set to: 0
  4865  0008CC  5028               	movf	strtol@base,w,c
  4866  0008CE  1029               	iorwf	strtol@base+1,w,c
  4867  0008D0  A4D8               	btfss	status,2,c
  4868  0008D2  D004               	goto	l1914
  4869                           
  4870                           ; BSR set to: 0
  4871  0008D4  0E00               	movlw	0
  4872  0008D6  6E29               	movwf	strtol@base+1,c
  4873  0008D8  0E08               	movlw	8
  4874  0008DA  6E28               	movwf	strtol@base,c
  4875  0008DC                     l1914:
  4876                           
  4877                           ; BSR set to: 0
  4878                           
  4879                           ; BSR set to: 0
  4880                           
  4881                           ; BSR set to: 0
  4882                           
  4883                           ; BSR set to: 0
  4884  0008DC  5028               	movf	strtol@base,w,c
  4885  0008DE  1029               	iorwf	strtol@base+1,w,c
  4886  0008E0  A4D8               	btfss	status,2,c
  4887  0008E2  D004               	goto	l1915
  4888                           
  4889                           ; BSR set to: 0
  4890  0008E4  0E00               	movlw	0
  4891  0008E6  6E29               	movwf	strtol@base+1,c
  4892  0008E8  0E0A               	movlw	10
  4893  0008EA  6E28               	movwf	strtol@base,c
  4894  0008EC                     l1915:
  4895                           
  4896                           ; BSR set to: 0
  4897                           
  4898                           ; BSR set to: 0
  4899                           
  4900                           ; BSR set to: 0
  4901  0008EC  5165               	movf	strtol@c& (0+255),w,b
  4902  0008EE  EC4E  F014         	call	_isalpha
  4903  0008F2  A0D8               	btfss	status,0,c
  4904  0008F4  D008               	goto	l1917
  4905  0008F6  0100               	movlb	0	; () banked
  4906  0008F8  5165               	movf	strtol@c& (0+255),w,b
  4907  0008FA  EC28  F015         	call	_toupper
  4908  0008FE  0FC9               	addlw	201
  4909  000900  0100               	movlb	0	; () banked
  4910  000902  6F65               	movwf	strtol@c& (0+255),b
  4911  000904  D009               	goto	l1920
  4912  000906                     l1917:
  4913                           
  4914                           ; BSR set to: 0
  4915  000906  0100               	movlb	0	; () banked
  4916  000908  5165               	movf	strtol@c& (0+255),w,b
  4917  00090A  ECBE  F014         	call	_isdigit
  4918  00090E  A0D8               	btfss	status,0,c
  4919  000910  D039               	goto	l1921
  4920  000912  0E30               	movlw	48
  4921  000914  0100               	movlb	0	; () banked
  4922  000916  5F65               	subwf	strtol@c& (0+255),f,b
  4923  000918                     l1920:
  4924                           
  4925                           ; BSR set to: 0
  4926                           
  4927                           ; BSR set to: 0
  4928                           
  4929                           ; BSR set to: 0
  4930  000918  5165               	movf	strtol@c& (0+255),w,b
  4931  00091A  6E2A               	movwf	??_strtol& (0+255),c
  4932  00091C  6A2B               	clrf	(??_strtol+1)& (0+255),c
  4933  00091E  5028               	movf	strtol@base,w,c
  4934  000920  5C2A               	subwf	??_strtol,w,c
  4935  000922  502B               	movf	??_strtol+1,w,c
  4936  000924  0A80               	xorlw	128
  4937  000926  6E2C               	movwf	(??_strtol+2)& (0+255),c
  4938  000928  5029               	movf	strtol@base+1,w,c
  4939  00092A  0A80               	xorlw	128
  4940  00092C  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  4941  00092E  B0D8               	btfsc	status,0,c
  4942  000930  D029               	goto	l1921
  4943                           
  4944                           ; BSR set to: 0
  4945                           
  4946                           ; BSR set to: 0
  4947                           
  4948                           ; BSR set to: 0
  4949  000932  C028  F018         	movff	strtol@base,___lmul@multiplier
  4950  000936  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  4951  00093A  0E00               	movlw	0
  4952  00093C  BE19               	btfsc	___lmul@multiplier+1,7,c
  4953  00093E  0EFF               	movlw	-1
  4954  000940  6E1A               	movwf	___lmul@multiplier+2,c
  4955  000942  6E1B               	movwf	___lmul@multiplier+3,c
  4956  000944  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  4957  000948  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  4958  00094C  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  4959  000950  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  4960  000954  EC40  F011         	call	___lmul	;wreg free
  4961  000958  0100               	movlb	0	; () banked
  4962  00095A  5165               	movf	strtol@c& (0+255),w,b
  4963  00095C  2418               	addwf	?___lmul,w,c
  4964  00095E  6F61               	movwf	strtol@a& (0+255),b
  4965  000960  0E00               	movlw	0
  4966  000962  2019               	addwfc	?___lmul+1,w,c
  4967  000964  6F62               	movwf	(strtol@a+1)& (0+255),b
  4968  000966  0E00               	movlw	0
  4969  000968  201A               	addwfc	?___lmul+2,w,c
  4970  00096A  6F63               	movwf	(strtol@a+2)& (0+255),b
  4971  00096C  0E00               	movlw	0
  4972  00096E  201B               	addwfc	?___lmul+3,w,c
  4973  000970  6F64               	movwf	(strtol@a+3)& (0+255),b
  4974                           
  4975                           ; BSR set to: 0
  4976  000972  C024  FFD9         	movff	strtol@s,fsr2l
  4977  000976  C025  FFDA         	movff	strtol@s+1,fsr2h
  4978  00097A  50DF               	movf	indf2,w,c
  4979  00097C  6F65               	movwf	strtol@c& (0+255),b
  4980                           
  4981                           ; BSR set to: 0
  4982  00097E  4A24               	infsnz	strtol@s,f,c
  4983  000980  2A25               	incf	strtol@s+1,f,c
  4984  000982  D7B4               	goto	l1915
  4985  000984                     l1921:
  4986                           
  4987                           ; BSR set to: 0
  4988  000984  5026               	movf	strtol@endptr,w,c
  4989  000986  1027               	iorwf	strtol@endptr+1,w,c
  4990  000988  B4D8               	btfsc	status,2,c
  4991  00098A  D00E               	goto	l1923
  4992  00098C  0EFF               	movlw	255
  4993  00098E  2424               	addwf	strtol@s,w,c
  4994  000990  6E2A               	movwf	??_strtol& (0+255),c
  4995  000992  0EFF               	movlw	255
  4996  000994  2025               	addwfc	strtol@s+1,w,c
  4997  000996  6E2B               	movwf	(??_strtol+1)& (0+255),c
  4998  000998  C026  FFD9         	movff	strtol@endptr,fsr2l
  4999  00099C  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  5000  0009A0  C02A  FFDE         	movff	??_strtol,postinc2
  5001  0009A4  C02B  FFDD         	movff	??_strtol+1,postdec2
  5002  0009A8                     l1923:
  5003  0009A8  0100               	movlb	0	; () banked
  5004  0009AA  5160               	movf	strtol@sign& (0+255),w,b
  5005  0009AC  B4D8               	btfsc	status,2,c
  5006  0009AE  D01A               	goto	l1924
  5007                           
  5008                           ; BSR set to: 0
  5009  0009B0  C061  F02A         	movff	strtol@a,??_strtol
  5010  0009B4  C062  F02B         	movff	strtol@a+1,??_strtol+1
  5011  0009B8  C063  F02C         	movff	strtol@a+2,??_strtol+2
  5012  0009BC  C064  F02D         	movff	strtol@a+3,??_strtol+3
  5013  0009C0  1E2A               	comf	??_strtol,f,c
  5014  0009C2  1E2B               	comf	??_strtol+1,f,c
  5015  0009C4  1E2C               	comf	??_strtol+2,f,c
  5016  0009C6  1E2D               	comf	??_strtol+3,f,c
  5017  0009C8  2A2A               	incf	??_strtol,f,c
  5018  0009CA  0E00               	movlw	0
  5019  0009CC  222B               	addwfc	??_strtol+1,f,c
  5020  0009CE  222C               	addwfc	??_strtol+2,f,c
  5021  0009D0  222D               	addwfc	??_strtol+3,f,c
  5022  0009D2  C02A  F024         	movff	??_strtol,?_strtol
  5023  0009D6  C02B  F025         	movff	??_strtol+1,?_strtol+1
  5024  0009DA  C02C  F026         	movff	??_strtol+2,?_strtol+2
  5025  0009DE  C02D  F027         	movff	??_strtol+3,?_strtol+3
  5026                           
  5027                           ; BSR set to: 0
  5028  0009E2  0012               	return	
  5029  0009E4                     l1924:
  5030                           
  5031                           ; BSR set to: 0
  5032  0009E4  C061  F024         	movff	strtol@a,?_strtol
  5033  0009E8  C062  F025         	movff	strtol@a+1,?_strtol+1
  5034  0009EC  C063  F026         	movff	strtol@a+2,?_strtol+2
  5035  0009F0  C064  F027         	movff	strtol@a+3,?_strtol+3
  5036                           
  5037                           ; BSR set to: 0
  5038  0009F4  0012               	return		;funcret
  5039  0009F6                     __end_of_strtol:
  5040                           	opt stack 0
  5041                           tosu	equ	0xFFF
  5042                           tosh	equ	0xFFE
  5043                           tosl	equ	0xFFD
  5044                           pclath	equ	0xFFA
  5045                           tblptru	equ	0xFF8
  5046                           tblptrh	equ	0xFF7
  5047                           tblptrl	equ	0xFF6
  5048                           tablat	equ	0xFF5
  5049                           prodh	equ	0xFF4
  5050                           prodl	equ	0xFF3
  5051                           postinc0	equ	0xFEE
  5052                           wreg	equ	0xFE8
  5053                           indf1	equ	0xFE7
  5054                           postdec1	equ	0xFE5
  5055                           fsr1h	equ	0xFE2
  5056                           fsr1l	equ	0xFE1
  5057                           indf2	equ	0xFDF
  5058                           postinc2	equ	0xFDE
  5059                           postdec2	equ	0xFDD
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function _toupper *****************
  5065 ;; Defined at:
  5066 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  c               1    wreg     unsigned char 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  c               1   23[COMRAM] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      unsigned char 
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, status,0
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5080 ;;      Params:         0       0       0       0       0       0       0
  5081 ;;      Locals:         1       0       0       0       0       0       0
  5082 ;;      Temps:          0       0       0       0       0       0       0
  5083 ;;      Totals:         1       0       0       0       0       0       0
  5084 ;;Total ram usage:        1 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    3
  5087 ;; This function calls:
  5088 ;;		Nothing
  5089 ;; This function is called by:
  5090 ;;		_readUartByte
  5091 ;;		_strtol
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text10
  5096  002A50                     __ptext10:
  5097                           	opt stack 0
  5098  002A50                     _toupper:
  5099                           	opt stack 26
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;incstack = 0
  5103                           ;toupper@c stored from wreg
  5104  002A50  6E18               	movwf	toupper@c,c
  5105  002A52  0E7B               	movlw	123
  5106  002A54  6018               	cpfslt	toupper@c,c
  5107  002A56  D004               	goto	l1928
  5108  002A58  0E60               	movlw	96
  5109  002A5A  6418               	cpfsgt	toupper@c,c
  5110  002A5C  D001               	goto	l1928
  5111  002A5E  9A18               	bcf	toupper@c,5,c
  5112  002A60                     l1928:
  5113  002A60  5018               	movf	toupper@c,w,c
  5114  002A62  0012               	return	
  5115  002A64                     __end_of_toupper:
  5116                           	opt stack 0
  5117                           tosu	equ	0xFFF
  5118                           tosh	equ	0xFFE
  5119                           tosl	equ	0xFFD
  5120                           pclath	equ	0xFFA
  5121                           tblptru	equ	0xFF8
  5122                           tblptrh	equ	0xFF7
  5123                           tblptrl	equ	0xFF6
  5124                           tablat	equ	0xFF5
  5125                           prodh	equ	0xFF4
  5126                           prodl	equ	0xFF3
  5127                           postinc0	equ	0xFEE
  5128                           wreg	equ	0xFE8
  5129                           indf1	equ	0xFE7
  5130                           postdec1	equ	0xFE5
  5131                           fsr1h	equ	0xFE2
  5132                           fsr1l	equ	0xFE1
  5133                           indf2	equ	0xFDF
  5134                           postinc2	equ	0xFDE
  5135                           postdec2	equ	0xFDD
  5136                           fsr2h	equ	0xFDA
  5137                           fsr2l	equ	0xFD9
  5138                           status	equ	0xFD8
  5139                           
  5140 ;; *************** function _isspace *****************
  5141 ;; Defined at:
  5142 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  c               1    wreg     unsigned char 
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;  c               1   25[COMRAM] unsigned char 
  5147 ;; Return value:  Size  Location     Type
  5148 ;;		None               void
  5149 ;; Registers used:
  5150 ;;		wreg, status,2, status,0
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5156 ;;      Params:         0       0       0       0       0       0       0
  5157 ;;      Locals:         2       0       0       0       0       0       0
  5158 ;;      Temps:          1       0       0       0       0       0       0
  5159 ;;      Totals:         3       0       0       0       0       0       0
  5160 ;;Total ram usage:        3 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:    3
  5163 ;; This function calls:
  5164 ;;		Nothing
  5165 ;; This function is called by:
  5166 ;;		_strtol
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           	psect	text11
  5171  0028C4                     __ptext11:
  5172                           	opt stack 0
  5173  0028C4                     _isspace:
  5174                           	opt stack 22
  5175                           
  5176                           ;incstack = 0
  5177                           ;isspace@c stored from wreg
  5178  0028C4  6E1A               	movwf	isspace@c,c
  5179  0028C6  0E01               	movlw	1
  5180  0028C8  6E19               	movwf	_isspace$2615,c
  5181  0028CA  0E20               	movlw	32
  5182  0028CC  181A               	xorwf	isspace@c,w,c
  5183  0028CE  B4D8               	btfsc	status,2,c
  5184  0028D0  D008               	goto	l2010
  5185  0028D2  0E0E               	movlw	14
  5186  0028D4  601A               	cpfslt	isspace@c,c
  5187  0028D6  D003               	goto	u6310
  5188  0028D8  0E09               	movlw	9
  5189  0028DA  601A               	cpfslt	isspace@c,c
  5190  0028DC  D002               	goto	l2010
  5191  0028DE                     u6310:
  5192  0028DE  0E00               	movlw	0
  5193  0028E0  6E19               	movwf	_isspace$2615,c
  5194  0028E2                     l2010:
  5195  0028E2  C019  F018         	movff	_isspace$2615,??_isspace
  5196  0028E6  3018               	rrcf	??_isspace,w,c
  5197  0028E8  0012               	return	
  5198  0028EA                     __end_of_isspace:
  5199                           	opt stack 0
  5200                           tosu	equ	0xFFF
  5201                           tosh	equ	0xFFE
  5202                           tosl	equ	0xFFD
  5203                           pclath	equ	0xFFA
  5204                           tblptru	equ	0xFF8
  5205                           tblptrh	equ	0xFF7
  5206                           tblptrl	equ	0xFF6
  5207                           tablat	equ	0xFF5
  5208                           prodh	equ	0xFF4
  5209                           prodl	equ	0xFF3
  5210                           postinc0	equ	0xFEE
  5211                           wreg	equ	0xFE8
  5212                           indf1	equ	0xFE7
  5213                           postdec1	equ	0xFE5
  5214                           fsr1h	equ	0xFE2
  5215                           fsr1l	equ	0xFE1
  5216                           indf2	equ	0xFDF
  5217                           postinc2	equ	0xFDE
  5218                           postdec2	equ	0xFDD
  5219                           fsr2h	equ	0xFDA
  5220                           fsr2l	equ	0xFD9
  5221                           status	equ	0xFD8
  5222                           
  5223 ;; *************** function _isdigit *****************
  5224 ;; Defined at:
  5225 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;  c               1    wreg     unsigned char 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;  c               1   25[COMRAM] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;		None               void
  5232 ;; Registers used:
  5233 ;;		wreg, status,2, status,0
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5239 ;;      Params:         0       0       0       0       0       0       0
  5240 ;;      Locals:         2       0       0       0       0       0       0
  5241 ;;      Temps:          1       0       0       0       0       0       0
  5242 ;;      Totals:         3       0       0       0       0       0       0
  5243 ;;Total ram usage:        3 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    3
  5246 ;; This function calls:
  5247 ;;		Nothing
  5248 ;; This function is called by:
  5249 ;;		_strtol
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text12
  5254  00297C                     __ptext12:
  5255                           	opt stack 0
  5256  00297C                     _isdigit:
  5257                           	opt stack 22
  5258                           
  5259                           ;incstack = 0
  5260                           ;isdigit@c stored from wreg
  5261  00297C  6E1A               	movwf	isdigit@c,c
  5262  00297E  0E00               	movlw	0
  5263  002980  6E19               	movwf	_isdigit$2612,c
  5264  002982  0E3A               	movlw	58
  5265  002984  601A               	cpfslt	isdigit@c,c
  5266  002986  D005               	goto	l2005
  5267  002988  0E2F               	movlw	47
  5268  00298A  641A               	cpfsgt	isdigit@c,c
  5269  00298C  D002               	goto	l2005
  5270  00298E  0E01               	movlw	1
  5271  002990  6E19               	movwf	_isdigit$2612,c
  5272  002992                     l2005:
  5273  002992  C019  F018         	movff	_isdigit$2612,??_isdigit
  5274  002996  3018               	rrcf	??_isdigit,w,c
  5275  002998  0012               	return	
  5276  00299A                     __end_of_isdigit:
  5277                           	opt stack 0
  5278                           tosu	equ	0xFFF
  5279                           tosh	equ	0xFFE
  5280                           tosl	equ	0xFFD
  5281                           pclath	equ	0xFFA
  5282                           tblptru	equ	0xFF8
  5283                           tblptrh	equ	0xFF7
  5284                           tblptrl	equ	0xFF6
  5285                           tablat	equ	0xFF5
  5286                           prodh	equ	0xFF4
  5287                           prodl	equ	0xFF3
  5288                           postinc0	equ	0xFEE
  5289                           wreg	equ	0xFE8
  5290                           indf1	equ	0xFE7
  5291                           postdec1	equ	0xFE5
  5292                           fsr1h	equ	0xFE2
  5293                           fsr1l	equ	0xFE1
  5294                           indf2	equ	0xFDF
  5295                           postinc2	equ	0xFDE
  5296                           postdec2	equ	0xFDD
  5297                           fsr2h	equ	0xFDA
  5298                           fsr2l	equ	0xFD9
  5299                           status	equ	0xFD8
  5300                           
  5301 ;; *************** function _isalpha *****************
  5302 ;; Defined at:
  5303 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  c               1    wreg     unsigned char 
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;  c               1   28[COMRAM] unsigned char 
  5308 ;; Return value:  Size  Location     Type
  5309 ;;		None               void
  5310 ;; Registers used:
  5311 ;;		wreg, status,2, status,0, cstack
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5317 ;;      Params:         0       0       0       0       0       0       0
  5318 ;;      Locals:         2       0       0       0       0       0       0
  5319 ;;      Temps:          1       0       0       0       0       0       0
  5320 ;;      Totals:         3       0       0       0       0       0       0
  5321 ;;Total ram usage:        3 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    4
  5324 ;; This function calls:
  5325 ;;		_isupper
  5326 ;; This function is called by:
  5327 ;;		_strtol
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           	psect	text13
  5332  00289C                     __ptext13:
  5333                           	opt stack 0
  5334  00289C                     _isalpha:
  5335                           	opt stack 21
  5336                           
  5337                           ;incstack = 0
  5338                           ;isalpha@c stored from wreg
  5339  00289C  6E1D               	movwf	isalpha@c,c
  5340  00289E  0E01               	movlw	1
  5341  0028A0  6E1C               	movwf	_isalpha$2609,c
  5342  0028A2  0E7B               	movlw	123
  5343  0028A4  601D               	cpfslt	isalpha@c,c
  5344  0028A6  D003               	goto	u6330
  5345  0028A8  0E61               	movlw	97
  5346  0028AA  601D               	cpfslt	isalpha@c,c
  5347  0028AC  D007               	goto	l2000
  5348  0028AE                     u6330:
  5349  0028AE  501D               	movf	isalpha@c,w,c
  5350  0028B0  ECCD  F014         	call	_isupper
  5351  0028B4  B0D8               	btfsc	status,0,c
  5352  0028B6  D002               	goto	l2000
  5353  0028B8  0E00               	movlw	0
  5354  0028BA  6E1C               	movwf	_isalpha$2609,c
  5355  0028BC                     l2000:
  5356  0028BC  C01C  F01B         	movff	_isalpha$2609,??_isalpha
  5357  0028C0  301B               	rrcf	??_isalpha,w,c
  5358  0028C2  0012               	return	
  5359  0028C4                     __end_of_isalpha:
  5360                           	opt stack 0
  5361                           tosu	equ	0xFFF
  5362                           tosh	equ	0xFFE
  5363                           tosl	equ	0xFFD
  5364                           pclath	equ	0xFFA
  5365                           tblptru	equ	0xFF8
  5366                           tblptrh	equ	0xFF7
  5367                           tblptrl	equ	0xFF6
  5368                           tablat	equ	0xFF5
  5369                           prodh	equ	0xFF4
  5370                           prodl	equ	0xFF3
  5371                           postinc0	equ	0xFEE
  5372                           wreg	equ	0xFE8
  5373                           indf1	equ	0xFE7
  5374                           postdec1	equ	0xFE5
  5375                           fsr1h	equ	0xFE2
  5376                           fsr1l	equ	0xFE1
  5377                           indf2	equ	0xFDF
  5378                           postinc2	equ	0xFDE
  5379                           postdec2	equ	0xFDD
  5380                           fsr2h	equ	0xFDA
  5381                           fsr2l	equ	0xFD9
  5382                           status	equ	0xFD8
  5383                           
  5384 ;; *************** function _isupper *****************
  5385 ;; Defined at:
  5386 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  c               1    wreg     unsigned char 
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;  c               1   25[COMRAM] unsigned char 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;		None               void
  5393 ;; Registers used:
  5394 ;;		wreg, status,2, status,0
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5400 ;;      Params:         0       0       0       0       0       0       0
  5401 ;;      Locals:         2       0       0       0       0       0       0
  5402 ;;      Temps:          1       0       0       0       0       0       0
  5403 ;;      Totals:         3       0       0       0       0       0       0
  5404 ;;Total ram usage:        3 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    3
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_isalpha
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           	psect	text14
  5415  00299A                     __ptext14:
  5416                           	opt stack 0
  5417  00299A                     _isupper:
  5418                           	opt stack 21
  5419                           
  5420                           ;incstack = 0
  5421                           ;isupper@c stored from wreg
  5422  00299A  6E1A               	movwf	isupper@c,c
  5423  00299C  0E00               	movlw	0
  5424  00299E  6E19               	movwf	_isupper$2618,c
  5425  0029A0  0E5B               	movlw	91
  5426  0029A2  601A               	cpfslt	isupper@c,c
  5427  0029A4  D005               	goto	l2015
  5428  0029A6  0E40               	movlw	64
  5429  0029A8  641A               	cpfsgt	isupper@c,c
  5430  0029AA  D002               	goto	l2015
  5431  0029AC  0E01               	movlw	1
  5432  0029AE  6E19               	movwf	_isupper$2618,c
  5433  0029B0                     l2015:
  5434  0029B0  C019  F018         	movff	_isupper$2618,??_isupper
  5435  0029B4  3018               	rrcf	??_isupper,w,c
  5436  0029B6  0012               	return	
  5437  0029B8                     __end_of_isupper:
  5438                           	opt stack 0
  5439                           tosu	equ	0xFFF
  5440                           tosh	equ	0xFFE
  5441                           tosl	equ	0xFFD
  5442                           pclath	equ	0xFFA
  5443                           tblptru	equ	0xFF8
  5444                           tblptrh	equ	0xFF7
  5445                           tblptrl	equ	0xFF6
  5446                           tablat	equ	0xFF5
  5447                           prodh	equ	0xFF4
  5448                           prodl	equ	0xFF3
  5449                           postinc0	equ	0xFEE
  5450                           wreg	equ	0xFE8
  5451                           indf1	equ	0xFE7
  5452                           postdec1	equ	0xFE5
  5453                           fsr1h	equ	0xFE2
  5454                           fsr1l	equ	0xFE1
  5455                           indf2	equ	0xFDF
  5456                           postinc2	equ	0xFDE
  5457                           postdec2	equ	0xFDD
  5458                           fsr2h	equ	0xFDA
  5459                           fsr2l	equ	0xFD9
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function ___lmul *****************
  5463 ;; Defined at:
  5464 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  multiplier      4   23[COMRAM] unsigned long 
  5467 ;;  multiplicand    4   27[COMRAM] unsigned long 
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;  product         4   31[COMRAM] unsigned long 
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  4   23[COMRAM] unsigned long 
  5472 ;; Registers used:
  5473 ;;		wreg, status,2, status,0
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5479 ;;      Params:         8       0       0       0       0       0       0
  5480 ;;      Locals:         4       0       0       0       0       0       0
  5481 ;;      Temps:          0       0       0       0       0       0       0
  5482 ;;      Totals:        12       0       0       0       0       0       0
  5483 ;;Total ram usage:       12 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    3
  5486 ;; This function calls:
  5487 ;;		Nothing
  5488 ;; This function is called by:
  5489 ;;		_strtol
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text15
  5494  002280                     __ptext15:
  5495                           	opt stack 0
  5496  002280                     ___lmul:
  5497                           	opt stack 22
  5498                           
  5499                           ;incstack = 0
  5500  002280  0E00               	movlw	0
  5501  002282  6E20               	movwf	___lmul@product,c
  5502  002284  0E00               	movlw	0
  5503  002286  6E21               	movwf	___lmul@product+1,c
  5504  002288  0E00               	movlw	0
  5505  00228A  6E22               	movwf	___lmul@product+2,c
  5506  00228C  0E00               	movlw	0
  5507  00228E  6E23               	movwf	___lmul@product+3,c
  5508  002290  A018               	btfss	___lmul@multiplier,0,c
  5509  002292  D008               	goto	l1334
  5510  002294  501C               	movf	___lmul@multiplicand,w,c
  5511  002296  2620               	addwf	___lmul@product,f,c
  5512  002298  501D               	movf	___lmul@multiplicand+1,w,c
  5513  00229A  2221               	addwfc	___lmul@product+1,f,c
  5514  00229C  501E               	movf	___lmul@multiplicand+2,w,c
  5515  00229E  2222               	addwfc	___lmul@product+2,f,c
  5516  0022A0  501F               	movf	___lmul@multiplicand+3,w,c
  5517  0022A2  2223               	addwfc	___lmul@product+3,f,c
  5518  0022A4                     l1334:
  5519  0022A4  90D8               	bcf	status,0,c
  5520  0022A6  361C               	rlcf	___lmul@multiplicand,f,c
  5521  0022A8  361D               	rlcf	___lmul@multiplicand+1,f,c
  5522  0022AA  361E               	rlcf	___lmul@multiplicand+2,f,c
  5523  0022AC  361F               	rlcf	___lmul@multiplicand+3,f,c
  5524  0022AE  90D8               	bcf	status,0,c
  5525  0022B0  321B               	rrcf	___lmul@multiplier+3,f,c
  5526  0022B2  321A               	rrcf	___lmul@multiplier+2,f,c
  5527  0022B4  3219               	rrcf	___lmul@multiplier+1,f,c
  5528  0022B6  3218               	rrcf	___lmul@multiplier,f,c
  5529  0022B8  5018               	movf	___lmul@multiplier,w,c
  5530  0022BA  1019               	iorwf	___lmul@multiplier+1,w,c
  5531  0022BC  101A               	iorwf	___lmul@multiplier+2,w,c
  5532  0022BE  101B               	iorwf	___lmul@multiplier+3,w,c
  5533  0022C0  A4D8               	btfss	status,2,c
  5534  0022C2  D7E6               	goto	l1333
  5535  0022C4  C020  F018         	movff	___lmul@product,?___lmul
  5536  0022C8  C021  F019         	movff	___lmul@product+1,?___lmul+1
  5537  0022CC  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  5538  0022D0  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  5539  0022D4  0012               	return		;funcret
  5540  0022D6                     __end_of___lmul:
  5541                           	opt stack 0
  5542                           tosu	equ	0xFFF
  5543                           tosh	equ	0xFFE
  5544                           tosl	equ	0xFFD
  5545                           pclath	equ	0xFFA
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           postinc0	equ	0xFEE
  5553                           wreg	equ	0xFE8
  5554                           indf1	equ	0xFE7
  5555                           postdec1	equ	0xFE5
  5556                           fsr1h	equ	0xFE2
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           postdec2	equ	0xFDD
  5561                           fsr2h	equ	0xFDA
  5562                           fsr2l	equ	0xFD9
  5563                           status	equ	0xFD8
  5564                           
  5565 ;; *************** function _ZeroArray *****************
  5566 ;; Defined at:
  5567 ;;		line 24 in file "SystemCommon.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  array           2   31[COMRAM] PTR unsigned char 
  5570 ;;		 -> GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(7), FlashReadUart@TxMsg(67), sampleArray(64), 
  5571 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  5572 ;;  size            2   33[COMRAM] int 
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;		None
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      void 
  5577 ;; Registers used:
  5578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5584 ;;      Params:         4       0       0       0       0       0       0
  5585 ;;      Locals:         0       0       0       0       0       0       0
  5586 ;;      Temps:          0       0       0       0       0       0       0
  5587 ;;      Totals:         4       0       0       0       0       0       0
  5588 ;;Total ram usage:        4 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    4
  5591 ;; This function calls:
  5592 ;;		_memset
  5593 ;; This function is called by:
  5594 ;;		_InitRxMessageParams
  5595 ;;		_GetIntFromUartData
  5596 ;;		_SendAckMessage
  5597 ;;		_FlashReadUart
  5598 ;;		_FlashEreaseMem
  5599 ;;		_FlashReadCondition
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           	psect	text16
  5604  0029B8                     __ptext16:
  5605                           	opt stack 0
  5606  0029B8                     _ZeroArray:
  5607                           	opt stack 24
  5608                           
  5609                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  5610                           
  5611                           ;incstack = 0
  5612  0029B8  C020  F018         	movff	ZeroArray@array,memset@p1
  5613  0029BC  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  5614  0029C0  0E00               	movlw	0
  5615  0029C2  6E1B               	movwf	memset@c+1,c
  5616  0029C4  0E00               	movlw	0
  5617  0029C6  6E1A               	movwf	memset@c,c
  5618  0029C8  C022  F01C         	movff	ZeroArray@size,memset@n
  5619  0029CC  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  5620  0029D0  EC38  F014         	call	_memset	;wreg free
  5621  0029D4  0012               	return		;funcret
  5622  0029D6                     __end_of_ZeroArray:
  5623                           	opt stack 0
  5624                           tosu	equ	0xFFF
  5625                           tosh	equ	0xFFE
  5626                           tosl	equ	0xFFD
  5627                           pclath	equ	0xFFA
  5628                           tblptru	equ	0xFF8
  5629                           tblptrh	equ	0xFF7
  5630                           tblptrl	equ	0xFF6
  5631                           tablat	equ	0xFF5
  5632                           prodh	equ	0xFF4
  5633                           prodl	equ	0xFF3
  5634                           postinc0	equ	0xFEE
  5635                           wreg	equ	0xFE8
  5636                           indf1	equ	0xFE7
  5637                           postdec1	equ	0xFE5
  5638                           fsr1h	equ	0xFE2
  5639                           fsr1l	equ	0xFE1
  5640                           indf2	equ	0xFDF
  5641                           postinc2	equ	0xFDE
  5642                           postdec2	equ	0xFDD
  5643                           fsr2h	equ	0xFDA
  5644                           fsr2l	equ	0xFD9
  5645                           status	equ	0xFD8
  5646                           
  5647 ;; *************** function _memset *****************
  5648 ;; Defined at:
  5649 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  p1              2   23[COMRAM] PTR void 
  5652 ;;		 -> GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(7), FlashReadUart@TxMsg(67), sampleArray(64), 
  5653 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  5654 ;;  c               2   25[COMRAM] int 
  5655 ;;  n               2   27[COMRAM] unsigned int 
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;  p               2   29[COMRAM] PTR unsigned char 
  5658 ;;		 -> GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(7), FlashReadUart@TxMsg(67), sampleArray(64), 
  5659 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  2   23[COMRAM] PTR void 
  5662 ;; Registers used:
  5663 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5669 ;;      Params:         6       0       0       0       0       0       0
  5670 ;;      Locals:         2       0       0       0       0       0       0
  5671 ;;      Temps:          0       0       0       0       0       0       0
  5672 ;;      Totals:         8       0       0       0       0       0       0
  5673 ;;Total ram usage:        8 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    3
  5676 ;; This function calls:
  5677 ;;		Nothing
  5678 ;; This function is called by:
  5679 ;;		_ZeroArray
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text17
  5684  002870                     __ptext17:
  5685                           	opt stack 0
  5686  002870                     _memset:
  5687                           	opt stack 24
  5688                           
  5689                           ;incstack = 0
  5690  002870  C018  F01E         	movff	memset@p1,memset@p
  5691  002874  C019  F01F         	movff	memset@p1+1,memset@p+1
  5692  002878  D008               	goto	l1753
  5693  00287A                     l6258:
  5694  00287A  C01E  FFD9         	movff	memset@p,fsr2l
  5695  00287E  C01F  FFDA         	movff	memset@p+1,fsr2h
  5696  002882  C01A  FFDF         	movff	memset@c,indf2
  5697  002886  4A1E               	infsnz	memset@p,f,c
  5698  002888  2A1F               	incf	memset@p+1,f,c
  5699  00288A                     l1753:
  5700  00288A  061C               	decf	memset@n,f,c
  5701  00288C  A0D8               	btfss	status,0,c
  5702  00288E  061D               	decf	memset@n+1,f,c
  5703  002890  281C               	incf	memset@n,w,c
  5704  002892  E1F3               	bnz	l6258
  5705  002894  281D               	incf	memset@n+1,w,c
  5706  002896  B4D8               	btfsc	status,2,c
  5707  002898  0012               	return	
  5708  00289A  D7EF               	goto	l1754
  5709  00289C                     __end_of_memset:
  5710                           	opt stack 0
  5711                           tosu	equ	0xFFF
  5712                           tosh	equ	0xFFE
  5713                           tosl	equ	0xFFD
  5714                           pclath	equ	0xFFA
  5715                           tblptru	equ	0xFF8
  5716                           tblptrh	equ	0xFF7
  5717                           tblptrl	equ	0xFF6
  5718                           tablat	equ	0xFF5
  5719                           prodh	equ	0xFF4
  5720                           prodl	equ	0xFF3
  5721                           postinc0	equ	0xFEE
  5722                           wreg	equ	0xFE8
  5723                           indf1	equ	0xFE7
  5724                           postdec1	equ	0xFE5
  5725                           fsr1h	equ	0xFE2
  5726                           fsr1l	equ	0xFE1
  5727                           indf2	equ	0xFDF
  5728                           postinc2	equ	0xFDE
  5729                           postdec2	equ	0xFDD
  5730                           fsr2h	equ	0xFDA
  5731                           fsr2l	equ	0xFD9
  5732                           status	equ	0xFD8
  5733                           
  5734 ;; *************** function _testLeds *****************
  5735 ;; Defined at:
  5736 ;;		line 43 in file "LedsApp.c"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;		None
  5739 ;; Auto vars:     Size  Location     Type
  5740 ;;  idx             2   24[COMRAM] int 
  5741 ;; Return value:  Size  Location     Type
  5742 ;;                  1    wreg      void 
  5743 ;; Registers used:
  5744 ;;		wreg, status,2, status,0
  5745 ;; Tracked objects:
  5746 ;;		On entry : 0/0
  5747 ;;		On exit  : 0/0
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5750 ;;      Params:         0       0       0       0       0       0       0
  5751 ;;      Locals:         2       0       0       0       0       0       0
  5752 ;;      Temps:          1       0       0       0       0       0       0
  5753 ;;      Totals:         3       0       0       0       0       0       0
  5754 ;;Total ram usage:        3 bytes
  5755 ;; Hardware stack levels used:    1
  5756 ;; Hardware stack levels required when called:    3
  5757 ;; This function calls:
  5758 ;;		Nothing
  5759 ;; This function is called by:
  5760 ;;		_GroupCommon
  5761 ;; This function uses a non-reentrant model
  5762 ;;
  5763                           
  5764                           	psect	text18
  5765  00205A                     __ptext18:
  5766                           	opt stack 0
  5767  00205A                     _testLeds:
  5768                           	opt stack 25
  5769                           
  5770                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  5771                           
  5772                           ;incstack = 0
  5773  00205A  0E00               	movlw	0
  5774  00205C  6E1A               	movwf	testLeds@idx+1,c
  5775  00205E  0E00               	movlw	0
  5776  002060  6E19               	movwf	testLeds@idx,c
  5777  002062                     l6996:
  5778  002062  BE1A               	btfsc	testLeds@idx+1,7,c
  5779  002064  D006               	goto	l44
  5780  002066  501A               	movf	testLeds@idx+1,w,c
  5781  002068  E127               	bnz	l46
  5782  00206A  0E0A               	movlw	10
  5783  00206C  5C19               	subwf	testLeds@idx,w,c
  5784  00206E  B0D8               	btfsc	status,0,c
  5785  002070  0012               	return	
  5786  002072                     l44:
  5787                           
  5788                           ;LedsApp.c: 47: {
  5789                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  5790  002072  808B               	bsf	3979,0,c	;volatile
  5791                           
  5792                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  5793  002074  0E82               	movlw	130
  5794  002076  6E18               	movwf	??_testLeds& (0+255),c
  5795  002078  0EDE               	movlw	222
  5796  00207A                     u8247:
  5797  00207A  2EE8               	decfsz	wreg,f,c
  5798  00207C  D7FE               	bra	u8247
  5799  00207E  2E18               	decfsz	??_testLeds& (0+255),f,c
  5800  002080  D7FC               	bra	u8247
  5801                           
  5802                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  5803  002082  888A               	bsf	3978,4,c	;volatile
  5804                           
  5805                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  5806  002084  0E82               	movlw	130
  5807  002086  6E18               	movwf	??_testLeds& (0+255),c
  5808  002088  0EDE               	movlw	222
  5809  00208A                     u8257:
  5810  00208A  2EE8               	decfsz	wreg,f,c
  5811  00208C  D7FE               	bra	u8257
  5812  00208E  2E18               	decfsz	??_testLeds& (0+255),f,c
  5813  002090  D7FC               	bra	u8257
  5814                           
  5815                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  5816  002092  908B               	bcf	3979,0,c	;volatile
  5817                           
  5818                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  5819  002094  0E82               	movlw	130
  5820  002096  6E18               	movwf	??_testLeds& (0+255),c
  5821  002098  0EDE               	movlw	222
  5822  00209A                     u8267:
  5823  00209A  2EE8               	decfsz	wreg,f,c
  5824  00209C  D7FE               	bra	u8267
  5825  00209E  2E18               	decfsz	??_testLeds& (0+255),f,c
  5826  0020A0  D7FC               	bra	u8267
  5827                           
  5828                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  5829  0020A2  988A               	bcf	3978,4,c	;volatile
  5830                           
  5831                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  5832  0020A4  0E82               	movlw	130
  5833  0020A6  6E18               	movwf	??_testLeds& (0+255),c
  5834  0020A8  0EDE               	movlw	222
  5835  0020AA                     u8277:
  5836  0020AA  2EE8               	decfsz	wreg,f,c
  5837  0020AC  D7FE               	bra	u8277
  5838  0020AE  2E18               	decfsz	??_testLeds& (0+255),f,c
  5839  0020B0  D7FC               	bra	u8277
  5840  0020B2  4A19               	infsnz	testLeds@idx,f,c
  5841  0020B4  2A1A               	incf	testLeds@idx+1,f,c
  5842  0020B6  D7D5               	goto	l6996
  5843  0020B8                     l46:
  5844  0020B8  0012               	return		;funcret
  5845  0020BA                     __end_of_testLeds:
  5846                           	opt stack 0
  5847                           tosu	equ	0xFFF
  5848                           tosh	equ	0xFFE
  5849                           tosl	equ	0xFFD
  5850                           pclath	equ	0xFFA
  5851                           tblptru	equ	0xFF8
  5852                           tblptrh	equ	0xFF7
  5853                           tblptrl	equ	0xFF6
  5854                           tablat	equ	0xFF5
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           postinc0	equ	0xFEE
  5858                           wreg	equ	0xFE8
  5859                           indf1	equ	0xFE7
  5860                           postdec1	equ	0xFE5
  5861                           fsr1h	equ	0xFE2
  5862                           fsr1l	equ	0xFE1
  5863                           indf2	equ	0xFDF
  5864                           postinc2	equ	0xFDE
  5865                           postdec2	equ	0xFDD
  5866                           fsr2h	equ	0xFDA
  5867                           fsr2l	equ	0xFD9
  5868                           status	equ	0xFD8
  5869                           
  5870 ;; *************** function _PrintHelpScreen *****************
  5871 ;; Defined at:
  5872 ;;		line 89 in file "SystemStatus.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;		None
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;  dest           50    9[BANK0 ] unsigned char [50]
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  1    wreg      void 
  5879 ;; Registers used:
  5880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5886 ;;      Params:         0       0       0       0       0       0       0
  5887 ;;      Locals:         0      50       0       0       0       0       0
  5888 ;;      Temps:          0       0       0       0       0       0       0
  5889 ;;      Totals:         0      50       0       0       0       0       0
  5890 ;;Total ram usage:       50 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    5
  5893 ;; This function calls:
  5894 ;;		_UART_Write_Text
  5895 ;;		_sprintf
  5896 ;; This function is called by:
  5897 ;;		_GroupCommon
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901                           	psect	text19
  5902  0003CC                     __ptext19:
  5903                           	opt stack 0
  5904  0003CC                     _PrintHelpScreen:
  5905                           	opt stack 23
  5906                           
  5907                           ;SystemStatus.c: 91: char dest[50];
  5908                           ;SystemStatus.c: 94: sprintf(dest, "<TX system commands>\n\r");
  5909                           
  5910                           ;incstack = 0
  5911  0003CC  0E69               	movlw	low PrintHelpScreen@dest
  5912  0003CE  6E24               	movwf	sprintf@sp,c
  5913  0003D0  0E00               	movlw	high PrintHelpScreen@dest
  5914  0003D2  6E25               	movwf	sprintf@sp+1,c
  5915  0003D4  0E41               	movlw	low STR_21
  5916  0003D6  6E26               	movwf	sprintf@f,c
  5917  0003D8  0E7F               	movlw	high STR_21
  5918  0003DA  6E27               	movwf	sprintf@f+1,c
  5919  0003DC  ECFB  F004         	call	_sprintf	;wreg free
  5920                           
  5921                           ;SystemStatus.c: 95: UART_Write_Text(dest);
  5922  0003E0  0E69               	movlw	low PrintHelpScreen@dest
  5923  0003E2  6E19               	movwf	UART_Write_Text@text,c
  5924  0003E4  0E00               	movlw	high PrintHelpScreen@dest
  5925  0003E6  6E1A               	movwf	UART_Write_Text@text+1,c
  5926  0003E8  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  5927                           
  5928                           ;SystemStatus.c: 97: sprintf(dest, "$TI <XXXX><cr>   Init TX system and set frequency (0
      +                          -9999)[MHz]\r\n");
  5929  0003EC  0E69               	movlw	low PrintHelpScreen@dest
  5930  0003EE  6E24               	movwf	sprintf@sp,c
  5931  0003F0  0E00               	movlw	high PrintHelpScreen@dest
  5932  0003F2  6E25               	movwf	sprintf@sp+1,c
  5933  0003F4  0EE9               	movlw	low STR_22
  5934  0003F6  6E26               	movwf	sprintf@f,c
  5935  0003F8  0E7C               	movlw	high STR_22
  5936  0003FA  6E27               	movwf	sprintf@f+1,c
  5937  0003FC  ECFB  F004         	call	_sprintf	;wreg free
  5938                           
  5939                           ;SystemStatus.c: 98: UART_Write_Text(dest);
  5940  000400  0E69               	movlw	low PrintHelpScreen@dest
  5941  000402  6E19               	movwf	UART_Write_Text@text,c
  5942  000404  0E00               	movlw	high PrintHelpScreen@dest
  5943  000406  6E1A               	movwf	UART_Write_Text@text+1,c
  5944  000408  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  5945                           
  5946                           ;SystemStatus.c: 99: sprintf(dest, "$TF <XXXX><cr>   Set TX system frequency at (0-9999)
      +                          [MHz].\r\n");
  5947  00040C  0E69               	movlw	low PrintHelpScreen@dest
  5948  00040E  6E24               	movwf	sprintf@sp,c
  5949  000410  0E00               	movlw	high PrintHelpScreen@dest
  5950  000412  6E25               	movwf	sprintf@sp+1,c
  5951  000414  0E69               	movlw	low STR_23
  5952  000416  6E26               	movwf	sprintf@f,c
  5953  000418  0E7D               	movlw	high STR_23
  5954  00041A  6E27               	movwf	sprintf@f+1,c
  5955  00041C  ECFB  F004         	call	_sprintf	;wreg free
  5956                           
  5957                           ;SystemStatus.c: 100: UART_Write_Text(dest);
  5958  000420  0E69               	movlw	low PrintHelpScreen@dest
  5959  000422  6E19               	movwf	UART_Write_Text@text,c
  5960  000424  0E00               	movlw	high PrintHelpScreen@dest
  5961  000426  6E1A               	movwf	UART_Write_Text@text+1,c
  5962  000428  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  5963                           
  5964                           ;SystemStatus.c: 101: sprintf(dest, "$TQ <cr>         Get status from TX system.\r\n");
  5965  00042C  0E69               	movlw	low PrintHelpScreen@dest
  5966  00042E  6E24               	movwf	sprintf@sp,c
  5967  000430  0E00               	movlw	high PrintHelpScreen@dest
  5968  000432  6E25               	movwf	sprintf@sp+1,c
  5969  000434  0E46               	movlw	low STR_24
  5970  000436  6E26               	movwf	sprintf@f,c
  5971  000438  0E7E               	movlw	high STR_24
  5972  00043A  6E27               	movwf	sprintf@f+1,c
  5973  00043C  ECFB  F004         	call	_sprintf	;wreg free
  5974                           
  5975                           ;SystemStatus.c: 102: UART_Write_Text(dest);
  5976  000440  0E69               	movlw	low PrintHelpScreen@dest
  5977  000442  6E19               	movwf	UART_Write_Text@text,c
  5978  000444  0E00               	movlw	high PrintHelpScreen@dest
  5979  000446  6E1A               	movwf	UART_Write_Text@text+1,c
  5980  000448  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  5981                           
  5982                           ;SystemStatus.c: 103: sprintf(dest, "$TB <X><cr>      Turn on[1] / off[0] BIT mode at TX
      +                           system [Default = 0]\r\n");
  5983  00044C  0E69               	movlw	low PrintHelpScreen@dest
  5984  00044E  6E24               	movwf	sprintf@sp,c
  5985  000450  0E00               	movlw	high PrintHelpScreen@dest
  5986  000452  6E25               	movwf	sprintf@sp+1,c
  5987  000454  0E54               	movlw	low STR_25
  5988  000456  6E26               	movwf	sprintf@f,c
  5989  000458  0E7C               	movlw	high STR_25
  5990  00045A  6E27               	movwf	sprintf@f+1,c
  5991  00045C  ECFB  F004         	call	_sprintf	;wreg free
  5992                           
  5993                           ;SystemStatus.c: 104: UART_Write_Text(dest);
  5994  000460  0E69               	movlw	low PrintHelpScreen@dest
  5995  000462  6E19               	movwf	UART_Write_Text@text,c
  5996  000464  0E00               	movlw	high PrintHelpScreen@dest
  5997  000466  6E1A               	movwf	UART_Write_Text@text+1,c
  5998  000468  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  5999                           
  6000                           ;SystemStatus.c: 105: sprintf(dest, "$TX <X><cr>      Turn on[1] / off[0] transmission a
      +                          t TX system [Default = 0]\r\n");
  6001  00046C  0E69               	movlw	low PrintHelpScreen@dest
  6002  00046E  6E24               	movwf	sprintf@sp,c
  6003  000470  0E00               	movlw	high PrintHelpScreen@dest
  6004  000472  6E25               	movwf	sprintf@sp+1,c
  6005  000474  0E05               	movlw	low STR_26
  6006  000476  6E26               	movwf	sprintf@f,c
  6007  000478  0E7C               	movlw	high STR_26
  6008  00047A  6E27               	movwf	sprintf@f+1,c
  6009  00047C  ECFB  F004         	call	_sprintf	;wreg free
  6010                           
  6011                           ;SystemStatus.c: 106: UART_Write_Text(dest);
  6012  000480  0E69               	movlw	low PrintHelpScreen@dest
  6013  000482  6E19               	movwf	UART_Write_Text@text,c
  6014  000484  0E00               	movlw	high PrintHelpScreen@dest
  6015  000486  6E1A               	movwf	UART_Write_Text@text+1,c
  6016  000488  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6017                           
  6018                           ;SystemStatus.c: 109: sprintf(dest, "\n\r<RX system commands>\n\r");
  6019  00048C  0E69               	movlw	low PrintHelpScreen@dest
  6020  00048E  6E24               	movwf	sprintf@sp,c
  6021  000490  0E00               	movlw	high PrintHelpScreen@dest
  6022  000492  6E25               	movwf	sprintf@sp+1,c
  6023  000494  0E28               	movlw	low STR_27
  6024  000496  6E26               	movwf	sprintf@f,c
  6025  000498  0E7F               	movlw	high STR_27
  6026  00049A  6E27               	movwf	sprintf@f+1,c
  6027  00049C  ECFB  F004         	call	_sprintf	;wreg free
  6028                           
  6029                           ;SystemStatus.c: 110: UART_Write_Text(dest);
  6030  0004A0  0E69               	movlw	low PrintHelpScreen@dest
  6031  0004A2  6E19               	movwf	UART_Write_Text@text,c
  6032  0004A4  0E00               	movlw	high PrintHelpScreen@dest
  6033  0004A6  6E1A               	movwf	UART_Write_Text@text+1,c
  6034  0004A8  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6035                           
  6036                           ;SystemStatus.c: 111: sprintf(dest, "$RI <XXXX><cr>   Init RX system and set frequency a
      +                          t XXXX (0-9999)[MHz]\r\n");
  6037  0004AC  0E69               	movlw	low PrintHelpScreen@dest
  6038  0004AE  6E24               	movwf	sprintf@sp,c
  6039  0004B0  0E00               	movlw	high PrintHelpScreen@dest
  6040  0004B2  6E25               	movwf	sprintf@sp+1,c
  6041  0004B4  0E9F               	movlw	low STR_28
  6042  0004B6  6E26               	movwf	sprintf@f,c
  6043  0004B8  0E7C               	movlw	high STR_28
  6044  0004BA  6E27               	movwf	sprintf@f+1,c
  6045  0004BC  ECFB  F004         	call	_sprintf	;wreg free
  6046                           
  6047                           ;SystemStatus.c: 112: UART_Write_Text(dest);
  6048  0004C0  0E69               	movlw	low PrintHelpScreen@dest
  6049  0004C2  6E19               	movwf	UART_Write_Text@text,c
  6050  0004C4  0E00               	movlw	high PrintHelpScreen@dest
  6051  0004C6  6E1A               	movwf	UART_Write_Text@text+1,c
  6052  0004C8  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6053                           
  6054                           ;SystemStatus.c: 113: sprintf(dest, "$RQ <cr>         Get status from RX system\r\n");
  6055  0004CC  0E69               	movlw	low PrintHelpScreen@dest
  6056  0004CE  6E24               	movwf	sprintf@sp,c
  6057  0004D0  0E00               	movlw	high PrintHelpScreen@dest
  6058  0004D2  6E25               	movwf	sprintf@sp+1,c
  6059  0004D4  0E74               	movlw	low STR_29
  6060  0004D6  6E26               	movwf	sprintf@f,c
  6061  0004D8  0E7E               	movlw	high STR_29
  6062  0004DA  6E27               	movwf	sprintf@f+1,c
  6063  0004DC  ECFB  F004         	call	_sprintf	;wreg free
  6064                           
  6065                           ;SystemStatus.c: 114: UART_Write_Text(dest);
  6066  0004E0  0E69               	movlw	low PrintHelpScreen@dest
  6067  0004E2  6E19               	movwf	UART_Write_Text@text,c
  6068  0004E4  0E00               	movlw	high PrintHelpScreen@dest
  6069  0004E6  6E1A               	movwf	UART_Write_Text@text+1,c
  6070  0004E8  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6071                           
  6072                           ;SystemStatus.c: 115: sprintf(dest, "$RB <X><cr>      Turn on[1] / off[0] BIT mode at RX
      +                           system.\r\n");
  6073  0004EC  0E69               	movlw	low PrintHelpScreen@dest
  6074  0004EE  6E24               	movwf	sprintf@sp,c
  6075  0004F0  0E00               	movlw	high PrintHelpScreen@dest
  6076  0004F2  6E25               	movwf	sprintf@sp+1,c
  6077  0004F4  0E2B               	movlw	low STR_30
  6078  0004F6  6E26               	movwf	sprintf@f,c
  6079  0004F8  0E7D               	movlw	high STR_30
  6080  0004FA  6E27               	movwf	sprintf@f+1,c
  6081  0004FC  ECFB  F004         	call	_sprintf	;wreg free
  6082                           
  6083                           ;SystemStatus.c: 116: UART_Write_Text(dest);
  6084  000500  0E69               	movlw	low PrintHelpScreen@dest
  6085  000502  6E19               	movwf	UART_Write_Text@text,c
  6086  000504  0E00               	movlw	high PrintHelpScreen@dest
  6087  000506  6E1A               	movwf	UART_Write_Text@text+1,c
  6088  000508  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6089                           
  6090                           ;SystemStatus.c: 117: sprintf(dest, "$RX <X><cr>      Turn on[1] / off[0] receive at RX 
      +                          system.\r\n");
  6091  00050C  0E69               	movlw	low PrintHelpScreen@dest
  6092  00050E  6E24               	movwf	sprintf@sp,c
  6093  000510  0E00               	movlw	high PrintHelpScreen@dest
  6094  000512  6E25               	movwf	sprintf@sp+1,c
  6095  000514  0EA6               	movlw	low STR_31
  6096  000516  6E26               	movwf	sprintf@f,c
  6097  000518  0E7D               	movlw	high STR_31
  6098  00051A  6E27               	movwf	sprintf@f+1,c
  6099  00051C  ECFB  F004         	call	_sprintf	;wreg free
  6100                           
  6101                           ;SystemStatus.c: 118: UART_Write_Text(dest);
  6102  000520  0E69               	movlw	low PrintHelpScreen@dest
  6103  000522  6E19               	movwf	UART_Write_Text@text,c
  6104  000524  0E00               	movlw	high PrintHelpScreen@dest
  6105  000526  6E1A               	movwf	UART_Write_Text@text+1,c
  6106  000528  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6107                           
  6108                           ;SystemStatus.c: 119: sprintf(dest, "$RCR <X><cr>     Set Compression range at RX system
      +                          . High [1] Low [0] [Default = 0]\r\n");
  6109  00052C  0E69               	movlw	low PrintHelpScreen@dest
  6110  00052E  6E24               	movwf	sprintf@sp,c
  6111  000530  0E00               	movlw	high PrintHelpScreen@dest
  6112  000532  6E25               	movwf	sprintf@sp+1,c
  6113  000534  0E59               	movlw	low STR_32
  6114  000536  6E26               	movwf	sprintf@f,c
  6115  000538  0E7B               	movlw	high STR_32
  6116  00053A  6E27               	movwf	sprintf@f+1,c
  6117  00053C  ECFB  F004         	call	_sprintf	;wreg free
  6118                           
  6119                           ;SystemStatus.c: 120: UART_Write_Text(dest);
  6120  000540  0E69               	movlw	low PrintHelpScreen@dest
  6121  000542  6E19               	movwf	UART_Write_Text@text,c
  6122  000544  0E00               	movlw	high PrintHelpScreen@dest
  6123  000546  6E1A               	movwf	UART_Write_Text@text+1,c
  6124  000548  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6125                           
  6126                           ;SystemStatus.c: 121: sprintf(dest, "$RCP <X><cr>     Set Compression operation mode at 
      +                          RX system: Automatic[1] Manual[0] [Default = 0]\r\n");
  6127  00054C  0E69               	movlw	low PrintHelpScreen@dest
  6128  00054E  6E24               	movwf	sprintf@sp,c
  6129  000550  0E00               	movlw	high PrintHelpScreen@dest
  6130  000552  6E25               	movwf	sprintf@sp+1,c
  6131  000554  0EF4               	movlw	low STR_33
  6132  000556  6E26               	movwf	sprintf@f,c
  6133  000558  0E7A               	movlw	high STR_33
  6134  00055A  6E27               	movwf	sprintf@f+1,c
  6135  00055C  ECFB  F004         	call	_sprintf	;wreg free
  6136                           
  6137                           ;SystemStatus.c: 122: UART_Write_Text(dest);
  6138  000560  0E69               	movlw	low PrintHelpScreen@dest
  6139  000562  6E19               	movwf	UART_Write_Text@text,c
  6140  000564  0E00               	movlw	high PrintHelpScreen@dest
  6141  000566  6E1A               	movwf	UART_Write_Text@text+1,c
  6142  000568  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6143                           
  6144                           ;SystemStatus.c: 125: sprintf(dest, "\n\r<Common system commands>\n\r");
  6145  00056C  0E69               	movlw	low PrintHelpScreen@dest
  6146  00056E  6E24               	movwf	sprintf@sp,c
  6147  000570  0E00               	movlw	high PrintHelpScreen@dest
  6148  000572  6E25               	movwf	sprintf@sp+1,c
  6149  000574  0E0B               	movlw	low STR_34
  6150  000576  6E26               	movwf	sprintf@f,c
  6151  000578  0E7F               	movlw	high STR_34
  6152  00057A  6E27               	movwf	sprintf@f+1,c
  6153  00057C  ECFB  F004         	call	_sprintf	;wreg free
  6154                           
  6155                           ;SystemStatus.c: 126: UART_Write_Text(dest);
  6156  000580  0E69               	movlw	low PrintHelpScreen@dest
  6157  000582  6E19               	movwf	UART_Write_Text@text,c
  6158  000584  0E00               	movlw	high PrintHelpScreen@dest
  6159  000586  6E1A               	movwf	UART_Write_Text@text+1,c
  6160  000588  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6161                           
  6162                           ;SystemStatus.c: 127: sprintf(dest, "$SH <cr>         Print system help message.\r\n");
  6163  00058C  0E69               	movlw	low PrintHelpScreen@dest
  6164  00058E  6E24               	movwf	sprintf@sp,c
  6165  000590  0E00               	movlw	high PrintHelpScreen@dest
  6166  000592  6E25               	movwf	sprintf@sp+1,c
  6167  000594  0E18               	movlw	low STR_35
  6168  000596  6E26               	movwf	sprintf@f,c
  6169  000598  0E7E               	movlw	high STR_35
  6170  00059A  6E27               	movwf	sprintf@f+1,c
  6171  00059C  ECFB  F004         	call	_sprintf	;wreg free
  6172                           
  6173                           ;SystemStatus.c: 128: UART_Write_Text(dest);
  6174  0005A0  0E69               	movlw	low PrintHelpScreen@dest
  6175  0005A2  6E19               	movwf	UART_Write_Text@text,c
  6176  0005A4  0E00               	movlw	high PrintHelpScreen@dest
  6177  0005A6  6E1A               	movwf	UART_Write_Text@text+1,c
  6178  0005A8  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6179                           
  6180                           ;SystemStatus.c: 129: sprintf(dest, "$SBT <XX><cr>    Set UART refresh rate (1-20)[Hz].\
      +                          r\n");
  6181  0005AC  0E69               	movlw	low PrintHelpScreen@dest
  6182  0005AE  6E24               	movwf	sprintf@sp,c
  6183  0005B0  0E00               	movlw	high PrintHelpScreen@dest
  6184  0005B2  6E25               	movwf	sprintf@sp+1,c
  6185  0005B4  0EE3               	movlw	low STR_36
  6186  0005B6  6E26               	movwf	sprintf@f,c
  6187  0005B8  0E7D               	movlw	high STR_36
  6188  0005BA  6E27               	movwf	sprintf@f+1,c
  6189  0005BC  ECFB  F004         	call	_sprintf	;wreg free
  6190                           
  6191                           ;SystemStatus.c: 130: UART_Write_Text(dest);
  6192  0005C0  0E69               	movlw	low PrintHelpScreen@dest
  6193  0005C2  6E19               	movwf	UART_Write_Text@text,c
  6194  0005C4  0E00               	movlw	high PrintHelpScreen@dest
  6195  0005C6  6E1A               	movwf	UART_Write_Text@text+1,c
  6196  0005C8  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6197                           
  6198                           ;SystemStatus.c: 131: sprintf(dest, "$SBU <X><cr>     Set UART automatic operation: Auto
      +                          matic[1] Manual[0] [Default = 0]\r\n");
  6199  0005CC  0E69               	movlw	low PrintHelpScreen@dest
  6200  0005CE  6E24               	movwf	sprintf@sp,c
  6201  0005D0  0E00               	movlw	high PrintHelpScreen@dest
  6202  0005D2  6E25               	movwf	sprintf@sp+1,c
  6203  0005D4  0EAF               	movlw	low STR_37
  6204  0005D6  6E26               	movwf	sprintf@f,c
  6205  0005D8  0E7B               	movlw	high STR_37
  6206  0005DA  6E27               	movwf	sprintf@f+1,c
  6207  0005DC  ECFB  F004         	call	_sprintf	;wreg free
  6208                           
  6209                           ;SystemStatus.c: 132: UART_Write_Text(dest);
  6210  0005E0  0E69               	movlw	low PrintHelpScreen@dest
  6211  0005E2  6E19               	movwf	UART_Write_Text@text,c
  6212  0005E4  0E00               	movlw	high PrintHelpScreen@dest
  6213  0005E6  6E1A               	movwf	UART_Write_Text@text+1,c
  6214  0005E8  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6215                           
  6216                           ;SystemStatus.c: 133: sprintf(dest, "$SQ <X><cr>      Get system status.\r\n");
  6217  0005EC  0E69               	movlw	low PrintHelpScreen@dest
  6218  0005EE  6E24               	movwf	sprintf@sp,c
  6219  0005F0  0E00               	movlw	high PrintHelpScreen@dest
  6220  0005F2  6E25               	movwf	sprintf@sp+1,c
  6221  0005F4  0EA1               	movlw	low STR_38
  6222  0005F6  6E26               	movwf	sprintf@f,c
  6223  0005F8  0E7E               	movlw	high STR_38
  6224  0005FA  6E27               	movwf	sprintf@f+1,c
  6225  0005FC  ECFB  F004         	call	_sprintf	;wreg free
  6226                           
  6227                           ;SystemStatus.c: 134: UART_Write_Text(dest);
  6228  000600  0E69               	movlw	low PrintHelpScreen@dest
  6229  000602  6E19               	movwf	UART_Write_Text@text,c
  6230  000604  0E00               	movlw	high PrintHelpScreen@dest
  6231  000606  6E1A               	movwf	UART_Write_Text@text+1,c
  6232  000608  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6233                           
  6234                           ;SystemStatus.c: 135: sprintf(dest, "$SL <cr>         Test system LEDs.\r\n");
  6235  00060C  0E69               	movlw	low PrintHelpScreen@dest
  6236  00060E  6E24               	movwf	sprintf@sp,c
  6237  000610  0E00               	movlw	high PrintHelpScreen@dest
  6238  000612  6E25               	movwf	sprintf@sp+1,c
  6239  000614  0EC7               	movlw	low STR_39
  6240  000616  6E26               	movwf	sprintf@f,c
  6241  000618  0E7E               	movlw	high STR_39
  6242  00061A  6E27               	movwf	sprintf@f+1,c
  6243  00061C  ECFB  F004         	call	_sprintf	;wreg free
  6244                           
  6245                           ;SystemStatus.c: 136: UART_Write_Text(dest);
  6246  000620  0E69               	movlw	low PrintHelpScreen@dest
  6247  000622  6E19               	movwf	UART_Write_Text@text,c
  6248  000624  0E00               	movlw	high PrintHelpScreen@dest
  6249  000626  6E1A               	movwf	UART_Write_Text@text+1,c
  6250  000628  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  6251  00062C  0012               	return		;funcret
  6252  00062E                     __end_of_PrintHelpScreen:
  6253                           	opt stack 0
  6254                           tosu	equ	0xFFF
  6255                           tosh	equ	0xFFE
  6256                           tosl	equ	0xFFD
  6257                           pclath	equ	0xFFA
  6258                           tblptru	equ	0xFF8
  6259                           tblptrh	equ	0xFF7
  6260                           tblptrl	equ	0xFF6
  6261                           tablat	equ	0xFF5
  6262                           prodh	equ	0xFF4
  6263                           prodl	equ	0xFF3
  6264                           postinc0	equ	0xFEE
  6265                           wreg	equ	0xFE8
  6266                           indf1	equ	0xFE7
  6267                           postdec1	equ	0xFE5
  6268                           fsr1h	equ	0xFE2
  6269                           fsr1l	equ	0xFE1
  6270                           indf2	equ	0xFDF
  6271                           postinc2	equ	0xFDE
  6272                           postdec2	equ	0xFDD
  6273                           fsr2h	equ	0xFDA
  6274                           fsr2l	equ	0xFD9
  6275                           status	equ	0xFD8
  6276                           
  6277 ;; *************** function _EUSART1_Read *****************
  6278 ;; Defined at:
  6279 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  6280 ;; Parameters:    Size  Location     Type
  6281 ;;		None
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;  readValue       2   24[COMRAM] unsigned int 
  6284 ;; Return value:  Size  Location     Type
  6285 ;;                  1    wreg      unsigned char 
  6286 ;; Registers used:
  6287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6288 ;; Tracked objects:
  6289 ;;		On entry : 0/0
  6290 ;;		On exit  : 0/0
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6293 ;;      Params:         0       0       0       0       0       0       0
  6294 ;;      Locals:         2       0       0       0       0       0       0
  6295 ;;      Temps:          1       0       0       0       0       0       0
  6296 ;;      Totals:         3       0       0       0       0       0       0
  6297 ;;Total ram usage:        3 bytes
  6298 ;; Hardware stack levels used:    1
  6299 ;; Hardware stack levels required when called:    3
  6300 ;; This function calls:
  6301 ;;		Nothing
  6302 ;; This function is called by:
  6303 ;;		_readUartByte
  6304 ;; This function uses a non-reentrant model
  6305 ;;
  6306                           
  6307                           	psect	text20
  6308  0024F6                     __ptext20:
  6309                           	opt stack 0
  6310  0024F6                     _EUSART1_Read:
  6311                           	opt stack 26
  6312                           
  6313                           ;eusart1.c: 112: uint16_t readValue = 0;
  6314                           
  6315                           ;incstack = 0
  6316  0024F6  0E00               	movlw	0
  6317  0024F8  6E1A               	movwf	EUSART1_Read@readValue+1,c
  6318  0024FA  0E00               	movlw	0
  6319  0024FC  6E19               	movwf	EUSART1_Read@readValue,c
  6320                           
  6321                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  6322  0024FE  0100               	movlb	0	; () banked
  6323  002500  51C1               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  6324  002502  A4D8               	btfss	status,2,c
  6325  002504  D002               	goto	l779
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;eusart1.c: 120: {
  6329                           ;eusart1.c: 121: return readValue;
  6330  002506  5019               	movf	EUSART1_Read@readValue,w,c
  6331                           
  6332                           ; BSR set to: 0
  6333  002508  0012               	return	
  6334  00250A                     l779:
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;eusart1.c: 122: }
  6338                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  6339                           
  6340                           ; BSR set to: 0
  6341  00250A  5039               	movf	_eusart1RxTail,w,c	;volatile
  6342  00250C  0D01               	mullw	1
  6343  00250E  0E46               	movlw	low _eusart1RxBuffer
  6344  002510  24F3               	addwf	prodl,w,c
  6345  002512  6ED9               	movwf	fsr2l,c
  6346  002514  0E01               	movlw	high _eusart1RxBuffer
  6347  002516  20F4               	addwfc	prodh,w,c
  6348  002518  6EDA               	movwf	fsr2h,c
  6349  00251A  50DF               	movf	indf2,w,c
  6350  00251C  6E18               	movwf	??_EUSART1_Read& (0+255),c
  6351  00251E  5018               	movf	??_EUSART1_Read,w,c
  6352  002520  6E19               	movwf	EUSART1_Read@readValue,c
  6353  002522  6A1A               	clrf	EUSART1_Read@readValue+1,c
  6354                           
  6355                           ; BSR set to: 0
  6356  002524  2A39               	incf	_eusart1RxTail,f,c	;volatile
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  6360  002526  0E27               	movlw	39
  6361  002528  6439               	cpfsgt	_eusart1RxTail,c	;volatile
  6362  00252A  D002               	goto	l781
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;eusart1.c: 126: {
  6366                           ;eusart1.c: 127: eusart1RxTail = 0;
  6367  00252C  0E00               	movlw	0
  6368  00252E  6E39               	movwf	_eusart1RxTail,c	;volatile
  6369  002530                     l781:
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;eusart1.c: 128: }
  6373                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  6374                           
  6375                           ; BSR set to: 0
  6376  002530  9A9D               	bcf	3997,5,c	;volatile
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;eusart1.c: 130: eusart1RxCount--;
  6380  002532  07C1               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  6384  002534  8A9D               	bsf	3997,5,c	;volatile
  6385                           
  6386                           ; BSR set to: 0
  6387                           ;eusart1.c: 133: return readValue;
  6388  002536  5019               	movf	EUSART1_Read@readValue,w,c
  6389  002538  0012               	return	
  6390  00253A                     __end_of_EUSART1_Read:
  6391                           	opt stack 0
  6392                           tosu	equ	0xFFF
  6393                           tosh	equ	0xFFE
  6394                           tosl	equ	0xFFD
  6395                           pclath	equ	0xFFA
  6396                           tblptru	equ	0xFF8
  6397                           tblptrh	equ	0xFF7
  6398                           tblptrl	equ	0xFF6
  6399                           tablat	equ	0xFF5
  6400                           prodh	equ	0xFF4
  6401                           prodl	equ	0xFF3
  6402                           postinc0	equ	0xFEE
  6403                           wreg	equ	0xFE8
  6404                           indf1	equ	0xFE7
  6405                           postdec1	equ	0xFE5
  6406                           fsr1h	equ	0xFE2
  6407                           fsr1l	equ	0xFE1
  6408                           indf2	equ	0xFDF
  6409                           postinc2	equ	0xFDE
  6410                           postdec2	equ	0xFDD
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function _keepAliveSignalLed *****************
  6416 ;; Defined at:
  6417 ;;		line 35 in file "LedsApp.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;		None
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6431 ;;      Params:         0       0       0       0       0       0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0
  6433 ;;      Temps:          1       0       0       0       0       0       0
  6434 ;;      Totals:         1       0       0       0       0       0       0
  6435 ;;Total ram usage:        1 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    3
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_main
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text21
  6446  002A0C                     __ptext21:
  6447                           	opt stack 0
  6448  002A0C                     _keepAliveSignalLed:
  6449                           	opt stack 27
  6450                           
  6451                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;incstack = 0
  6455  002A0C  B08B               	btfsc	3979,0,c	;volatile
  6456  002A0E  D003               	goto	u5150
  6457  002A10  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  6458  002A12  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  6459  002A14  D001               	goto	u5168
  6460  002A16                     u5150:
  6461  002A16  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  6462  002A18                     u5168:
  6463  002A18  508B               	movf	3979,w,c	;volatile
  6464  002A1A  1818               	xorwf	??_keepAliveSignalLed,w,c
  6465  002A1C  0BFE               	andlw	-2
  6466  002A1E  1818               	xorwf	??_keepAliveSignalLed,w,c
  6467  002A20  6E8B               	movwf	3979,c	;volatile
  6468  002A22  0012               	return		;funcret
  6469  002A24                     __end_of_keepAliveSignalLed:
  6470                           	opt stack 0
  6471                           tosu	equ	0xFFF
  6472                           tosh	equ	0xFFE
  6473                           tosl	equ	0xFFD
  6474                           pclath	equ	0xFFA
  6475                           tblptru	equ	0xFF8
  6476                           tblptrh	equ	0xFF7
  6477                           tblptrl	equ	0xFF6
  6478                           tablat	equ	0xFF5
  6479                           prodh	equ	0xFF4
  6480                           prodl	equ	0xFF3
  6481                           postinc0	equ	0xFEE
  6482                           wreg	equ	0xFE8
  6483                           indf1	equ	0xFE7
  6484                           postdec1	equ	0xFE5
  6485                           fsr1h	equ	0xFE2
  6486                           fsr1l	equ	0xFE1
  6487                           indf2	equ	0xFDF
  6488                           postinc2	equ	0xFDE
  6489                           postdec2	equ	0xFDD
  6490                           fsr2h	equ	0xFDA
  6491                           fsr2l	equ	0xFD9
  6492                           status	equ	0xFD8
  6493                           
  6494 ;; *************** function _SetMcuSystem *****************
  6495 ;; Defined at:
  6496 ;;		line 11 in file "SystemSettings.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;		None
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;		None
  6501 ;; Return value:  Size  Location     Type
  6502 ;;                  1    wreg      void 
  6503 ;; Registers used:
  6504 ;;		wreg, status,2, status,0, cstack
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6510 ;;      Params:         0       0       0       0       0       0       0
  6511 ;;      Locals:         0       0       0       0       0       0       0
  6512 ;;      Temps:          0       0       0       0       0       0       0
  6513 ;;      Totals:         0       0       0       0       0       0       0
  6514 ;;Total ram usage:        0 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    6
  6517 ;; This function calls:
  6518 ;;		_SYSTEM_Initialize
  6519 ;; This function is called by:
  6520 ;;		_main
  6521 ;; This function uses a non-reentrant model
  6522 ;;
  6523                           
  6524                           	psect	text22
  6525  002A96                     __ptext22:
  6526                           	opt stack 0
  6527  002A96                     _SetMcuSystem:
  6528                           	opt stack 24
  6529                           
  6530                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  6531                           
  6532                           ;incstack = 0
  6533  002A96  ECF9  F014         	call	_SYSTEM_Initialize	;wreg free
  6534                           
  6535                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  6536  002A9A  8EF2               	bsf	intcon,7,c	;volatile
  6537                           
  6538                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  6539  002A9C  8CF2               	bsf	intcon,6,c	;volatile
  6540  002A9E  0012               	return		;funcret
  6541  002AA0                     __end_of_SetMcuSystem:
  6542                           	opt stack 0
  6543                           tosu	equ	0xFFF
  6544                           tosh	equ	0xFFE
  6545                           tosl	equ	0xFFD
  6546                           pclath	equ	0xFFA
  6547                           tblptru	equ	0xFF8
  6548                           tblptrh	equ	0xFF7
  6549                           tblptrl	equ	0xFF6
  6550                           tablat	equ	0xFF5
  6551                           prodh	equ	0xFF4
  6552                           prodl	equ	0xFF3
  6553                           intcon	equ	0xFF2
  6554                           postinc0	equ	0xFEE
  6555                           wreg	equ	0xFE8
  6556                           indf1	equ	0xFE7
  6557                           postdec1	equ	0xFE5
  6558                           fsr1h	equ	0xFE2
  6559                           fsr1l	equ	0xFE1
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           postdec2	equ	0xFDD
  6563                           fsr2h	equ	0xFDA
  6564                           fsr2l	equ	0xFD9
  6565                           status	equ	0xFD8
  6566                           
  6567 ;; *************** function _SYSTEM_Initialize *****************
  6568 ;; Defined at:
  6569 ;;		line 112 in file "mcc_generated_files/mcc.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;		None
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;		None
  6574 ;; Return value:  Size  Location     Type
  6575 ;;                  1    wreg      void 
  6576 ;; Registers used:
  6577 ;;		wreg, status,2, status,0, cstack
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6583 ;;      Params:         0       0       0       0       0       0       0
  6584 ;;      Locals:         0       0       0       0       0       0       0
  6585 ;;      Temps:          0       0       0       0       0       0       0
  6586 ;;      Totals:         0       0       0       0       0       0       0
  6587 ;;Total ram usage:        0 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    5
  6590 ;; This function calls:
  6591 ;;		_ADC_Initialize
  6592 ;;		_EUSART1_Initialize
  6593 ;;		_INTERRUPT_Initialize
  6594 ;;		_OSCILLATOR_Initialize
  6595 ;;		_PIN_MANAGER_Initialize
  6596 ;;		_TMR0_Initialize
  6597 ;; This function is called by:
  6598 ;;		_SetMcuSystem
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           	psect	text23
  6603  0029F2                     __ptext23:
  6604                           	opt stack 0
  6605  0029F2                     _SYSTEM_Initialize:
  6606                           	opt stack 24
  6607                           
  6608                           ;mcc.c: 114: INTERRUPT_Initialize();
  6609                           
  6610                           ;incstack = 0
  6611  0029F2  EC5A  F015         	call	_INTERRUPT_Initialize	;wreg free
  6612                           
  6613                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  6614  0029F6  EC35  F012         	call	_PIN_MANAGER_Initialize	;wreg free
  6615                           
  6616                           ;mcc.c: 116: OSCILLATOR_Initialize();
  6617  0029FA  EC44  F015         	call	_OSCILLATOR_Initialize	;wreg free
  6618                           
  6619                           ;mcc.c: 117: TMR0_Initialize();
  6620  0029FE  ECED  F013         	call	_TMR0_Initialize	;wreg free
  6621                           
  6622                           ;mcc.c: 118: ADC_Initialize();
  6623  002A02  EC12  F015         	call	_ADC_Initialize	;wreg free
  6624                           
  6625                           ;mcc.c: 119: EUSART1_Initialize();
  6626  002A06  ECD2  F013         	call	_EUSART1_Initialize	;wreg free
  6627  002A0A  0012               	return		;funcret
  6628  002A0C                     __end_of_SYSTEM_Initialize:
  6629                           	opt stack 0
  6630                           tosu	equ	0xFFF
  6631                           tosh	equ	0xFFE
  6632                           tosl	equ	0xFFD
  6633                           pclath	equ	0xFFA
  6634                           tblptru	equ	0xFF8
  6635                           tblptrh	equ	0xFF7
  6636                           tblptrl	equ	0xFF6
  6637                           tablat	equ	0xFF5
  6638                           prodh	equ	0xFF4
  6639                           prodl	equ	0xFF3
  6640                           intcon	equ	0xFF2
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           indf1	equ	0xFE7
  6644                           postdec1	equ	0xFE5
  6645                           fsr1h	equ	0xFE2
  6646                           fsr1l	equ	0xFE1
  6647                           indf2	equ	0xFDF
  6648                           postinc2	equ	0xFDE
  6649                           postdec2	equ	0xFDD
  6650                           fsr2h	equ	0xFDA
  6651                           fsr2l	equ	0xFD9
  6652                           status	equ	0xFD8
  6653                           
  6654 ;; *************** function _TMR0_Initialize *****************
  6655 ;; Defined at:
  6656 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;		None
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  1    wreg      void 
  6663 ;; Registers used:
  6664 ;;		wreg, status,2, status,0, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6670 ;;      Params:         0       0       0       0       0       0       0
  6671 ;;      Locals:         0       0       0       0       0       0       0
  6672 ;;      Temps:          2       0       0       0       0       0       0
  6673 ;;      Totals:         2       0       0       0       0       0       0
  6674 ;;Total ram usage:        2 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    4
  6677 ;; This function calls:
  6678 ;;		_TMR0_SetInterruptHandler
  6679 ;; This function is called by:
  6680 ;;		_SYSTEM_Initialize
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text24
  6685  0027DA                     __ptext24:
  6686                           	opt stack 0
  6687  0027DA                     _TMR0_Initialize:
  6688                           	opt stack 24
  6689                           
  6690                           ;tmr0.c: 71: TMR0H = 0x3C;
  6691                           
  6692                           ;incstack = 0
  6693  0027DA  0E3C               	movlw	60
  6694  0027DC  6ED7               	movwf	4055,c	;volatile
  6695                           
  6696                           ;tmr0.c: 74: TMR0L = 0xAF;
  6697  0027DE  0EAF               	movlw	175
  6698  0027E0  6ED6               	movwf	4054,c	;volatile
  6699                           
  6700                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  6701  0027E2  50D6               	movf	4054,w,c	;volatile
  6702  0027E4  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  6703  0027E8  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  6704  0027EA  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  6705  0027EE  6A1A               	clrf	??_TMR0_Initialize,c
  6706  0027F0  101A               	iorwf	??_TMR0_Initialize,w,c
  6707  0027F2  6E46               	movwf	_timer0ReloadVal,c	;volatile
  6708  0027F4  501B               	movf	??_TMR0_Initialize+1,w,c
  6709  0027F6  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  6710                           
  6711                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  6712  0027F8  94F2               	bcf	intcon,2,c	;volatile
  6713                           
  6714                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  6715  0027FA  8AF2               	bsf	intcon,5,c	;volatile
  6716                           
  6717                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  6718  0027FC  0E00               	movlw	0
  6719  0027FE  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  6720  002800  0E00               	movlw	0
  6721  002802  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  6722  002804  EC50  F015         	call	_TMR0_SetInterruptHandler	;wreg free
  6723                           
  6724                           ;tmr0.c: 90: T0CON = 0x90;
  6725  002808  0E90               	movlw	144
  6726  00280A  6ED5               	movwf	4053,c	;volatile
  6727  00280C  0012               	return		;funcret
  6728  00280E                     __end_of_TMR0_Initialize:
  6729                           	opt stack 0
  6730                           tosu	equ	0xFFF
  6731                           tosh	equ	0xFFE
  6732                           tosl	equ	0xFFD
  6733                           pclath	equ	0xFFA
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           prodh	equ	0xFF4
  6739                           prodl	equ	0xFF3
  6740                           intcon	equ	0xFF2
  6741                           postinc0	equ	0xFEE
  6742                           wreg	equ	0xFE8
  6743                           indf1	equ	0xFE7
  6744                           postdec1	equ	0xFE5
  6745                           fsr1h	equ	0xFE2
  6746                           fsr1l	equ	0xFE1
  6747                           indf2	equ	0xFDF
  6748                           postinc2	equ	0xFDE
  6749                           postdec2	equ	0xFDD
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _TMR0_SetInterruptHandler *****************
  6755 ;; Defined at:
  6756 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  6759 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  6760 ;; Auto vars:     Size  Location     Type
  6761 ;;		None
  6762 ;; Return value:  Size  Location     Type
  6763 ;;                  1    wreg      void 
  6764 ;; Registers used:
  6765 ;;		wreg, status,2, status,0
  6766 ;; Tracked objects:
  6767 ;;		On entry : 0/0
  6768 ;;		On exit  : 0/0
  6769 ;;		Unchanged: 0/0
  6770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6771 ;;      Params:         2       0       0       0       0       0       0
  6772 ;;      Locals:         0       0       0       0       0       0       0
  6773 ;;      Temps:          0       0       0       0       0       0       0
  6774 ;;      Totals:         2       0       0       0       0       0       0
  6775 ;;Total ram usage:        2 bytes
  6776 ;; Hardware stack levels used:    1
  6777 ;; Hardware stack levels required when called:    3
  6778 ;; This function calls:
  6779 ;;		Nothing
  6780 ;; This function is called by:
  6781 ;;		_TMR0_Initialize
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           	psect	text25
  6786  002AA0                     __ptext25:
  6787                           	opt stack 0
  6788  002AA0                     _TMR0_SetInterruptHandler:
  6789                           	opt stack 24
  6790                           
  6791                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  6792                           
  6793                           ;incstack = 0
  6794  002AA0  C018  F0D7         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  6795  002AA4  C019  F0D8         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  6796  002AA8  0012               	return		;funcret
  6797  002AAA                     __end_of_TMR0_SetInterruptHandler:
  6798                           	opt stack 0
  6799                           tosu	equ	0xFFF
  6800                           tosh	equ	0xFFE
  6801                           tosl	equ	0xFFD
  6802                           pclath	equ	0xFFA
  6803                           tblptru	equ	0xFF8
  6804                           tblptrh	equ	0xFF7
  6805                           tblptrl	equ	0xFF6
  6806                           tablat	equ	0xFF5
  6807                           prodh	equ	0xFF4
  6808                           prodl	equ	0xFF3
  6809                           intcon	equ	0xFF2
  6810                           postinc0	equ	0xFEE
  6811                           wreg	equ	0xFE8
  6812                           indf1	equ	0xFE7
  6813                           postdec1	equ	0xFE5
  6814                           fsr1h	equ	0xFE2
  6815                           fsr1l	equ	0xFE1
  6816                           indf2	equ	0xFDF
  6817                           postinc2	equ	0xFDE
  6818                           postdec2	equ	0xFDD
  6819                           fsr2h	equ	0xFDA
  6820                           fsr2l	equ	0xFD9
  6821                           status	equ	0xFD8
  6822                           
  6823 ;; *************** function _PIN_MANAGER_Initialize *****************
  6824 ;; Defined at:
  6825 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;		None
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;		None
  6830 ;; Return value:  Size  Location     Type
  6831 ;;                  1    wreg      void 
  6832 ;; Registers used:
  6833 ;;		wreg, status,2
  6834 ;; Tracked objects:
  6835 ;;		On entry : 0/0
  6836 ;;		On exit  : 0/0
  6837 ;;		Unchanged: 0/0
  6838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6839 ;;      Params:         0       0       0       0       0       0       0
  6840 ;;      Locals:         0       0       0       0       0       0       0
  6841 ;;      Temps:          0       0       0       0       0       0       0
  6842 ;;      Totals:         0       0       0       0       0       0       0
  6843 ;;Total ram usage:        0 bytes
  6844 ;; Hardware stack levels used:    1
  6845 ;; Hardware stack levels required when called:    3
  6846 ;; This function calls:
  6847 ;;		Nothing
  6848 ;; This function is called by:
  6849 ;;		_SYSTEM_Initialize
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           	psect	text26
  6854  00246A                     __ptext26:
  6855                           	opt stack 0
  6856  00246A                     _PIN_MANAGER_Initialize:
  6857                           	opt stack 25
  6858                           
  6859                           ;pin_manager.c: 57: LATE = 0x00;
  6860                           
  6861                           ;incstack = 0
  6862  00246A  0E00               	movlw	0
  6863  00246C  6E8D               	movwf	3981,c	;volatile
  6864                           
  6865                           ;pin_manager.c: 58: LATD = 0x00;
  6866  00246E  0E00               	movlw	0
  6867  002470  6E8C               	movwf	3980,c	;volatile
  6868                           
  6869                           ;pin_manager.c: 59: LATA = 0x06;
  6870  002472  0E06               	movlw	6
  6871  002474  6E89               	movwf	3977,c	;volatile
  6872                           
  6873                           ;pin_manager.c: 60: LATB = 0x00;
  6874  002476  0E00               	movlw	0
  6875  002478  6E8A               	movwf	3978,c	;volatile
  6876                           
  6877                           ;pin_manager.c: 61: LATC = 0x00;
  6878  00247A  0E00               	movlw	0
  6879  00247C  6E8B               	movwf	3979,c	;volatile
  6880                           
  6881                           ;pin_manager.c: 66: TRISE = 0x07;
  6882  00247E  0E07               	movlw	7
  6883  002480  6E96               	movwf	3990,c	;volatile
  6884                           
  6885                           ;pin_manager.c: 67: TRISA = 0xE1;
  6886  002482  0EE1               	movlw	225
  6887  002484  6E92               	movwf	3986,c	;volatile
  6888                           
  6889                           ;pin_manager.c: 68: TRISB = 0xEF;
  6890  002486  0EEF               	movlw	239
  6891  002488  6E93               	movwf	3987,c	;volatile
  6892                           
  6893                           ;pin_manager.c: 69: TRISC = 0x80;
  6894  00248A  0E80               	movlw	128
  6895  00248C  6E94               	movwf	3988,c	;volatile
  6896                           
  6897                           ;pin_manager.c: 70: TRISD = 0xF2;
  6898  00248E  0EF2               	movlw	242
  6899  002490  6E95               	movwf	3989,c	;volatile
  6900                           
  6901                           ;pin_manager.c: 75: ANSELC = 0x30;
  6902  002492  0E30               	movlw	48
  6903  002494  010F               	movlb	15	; () banked
  6904  002496  6F3A               	movwf	58,b	;volatile
  6905                           
  6906                           ;pin_manager.c: 76: ANSELB = 0x33;
  6907  002498  0E33               	movlw	51
  6908  00249A  6F39               	movwf	57,b	;volatile
  6909                           
  6910                           ;pin_manager.c: 77: ANSELD = 0xE4;
  6911  00249C  0EE4               	movlw	228
  6912  00249E  6F3B               	movwf	59,b	;volatile
  6913                           
  6914                           ;pin_manager.c: 78: ANSELE = 0x07;
  6915  0024A0  0E07               	movlw	7
  6916  0024A2  6F3C               	movwf	60,b	;volatile
  6917                           
  6918                           ;pin_manager.c: 79: ANSELA = 0x2F;
  6919  0024A4  0E2F               	movlw	47
  6920  0024A6  6F38               	movwf	56,b	;volatile
  6921                           
  6922                           ;pin_manager.c: 84: WPUB = 0xC2;
  6923  0024A8  0EC2               	movlw	194
  6924  0024AA  6E61               	movwf	3937,c	;volatile
  6925                           
  6926                           ; BSR set to: 15
  6927                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 1;
  6928  0024AC  8EF1               	bsf	intcon2,7,c	;volatile
  6929                           
  6930                           ; BSR set to: 15
  6931                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  6932  0024AE  86F2               	bsf	intcon,3,c	;volatile
  6933                           
  6934                           ; BSR set to: 15
  6935  0024B0  0012               	return		;funcret
  6936  0024B2                     __end_of_PIN_MANAGER_Initialize:
  6937                           	opt stack 0
  6938                           tosu	equ	0xFFF
  6939                           tosh	equ	0xFFE
  6940                           tosl	equ	0xFFD
  6941                           pclath	equ	0xFFA
  6942                           tblptru	equ	0xFF8
  6943                           tblptrh	equ	0xFF7
  6944                           tblptrl	equ	0xFF6
  6945                           tablat	equ	0xFF5
  6946                           prodh	equ	0xFF4
  6947                           prodl	equ	0xFF3
  6948                           intcon	equ	0xFF2
  6949                           intcon2	equ	0xFF1
  6950                           postinc0	equ	0xFEE
  6951                           wreg	equ	0xFE8
  6952                           indf1	equ	0xFE7
  6953                           postdec1	equ	0xFE5
  6954                           fsr1h	equ	0xFE2
  6955                           fsr1l	equ	0xFE1
  6956                           indf2	equ	0xFDF
  6957                           postinc2	equ	0xFDE
  6958                           postdec2	equ	0xFDD
  6959                           fsr2h	equ	0xFDA
  6960                           fsr2l	equ	0xFD9
  6961                           status	equ	0xFD8
  6962                           
  6963 ;; *************** function _OSCILLATOR_Initialize *****************
  6964 ;; Defined at:
  6965 ;;		line 122 in file "mcc_generated_files/mcc.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;		None
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;		None
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  1    wreg      void 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6979 ;;      Params:         0       0       0       0       0       0       0
  6980 ;;      Locals:         0       0       0       0       0       0       0
  6981 ;;      Temps:          0       0       0       0       0       0       0
  6982 ;;      Totals:         0       0       0       0       0       0       0
  6983 ;;Total ram usage:        0 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; Hardware stack levels required when called:    3
  6986 ;; This function calls:
  6987 ;;		Nothing
  6988 ;; This function is called by:
  6989 ;;		_SYSTEM_Initialize
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           	psect	text27
  6994  002A88                     __ptext27:
  6995                           	opt stack 0
  6996  002A88                     _OSCILLATOR_Initialize:
  6997                           	opt stack 25
  6998                           
  6999                           ;mcc.c: 125: OSCCON = 0x60;
  7000                           
  7001                           ; BSR set to: 15
  7002                           ;incstack = 0
  7003  002A88  0E60               	movlw	96
  7004  002A8A  6ED3               	movwf	4051,c	;volatile
  7005                           
  7006                           ;mcc.c: 127: OSCCON2 = 0x04;
  7007  002A8C  0E04               	movlw	4
  7008  002A8E  6ED2               	movwf	4050,c	;volatile
  7009                           
  7010                           ;mcc.c: 129: OSCTUNE = 0x00;
  7011  002A90  0E00               	movlw	0
  7012  002A92  6E9B               	movwf	3995,c	;volatile
  7013  002A94  0012               	return		;funcret
  7014  002A96                     __end_of_OSCILLATOR_Initialize:
  7015                           	opt stack 0
  7016                           tosu	equ	0xFFF
  7017                           tosh	equ	0xFFE
  7018                           tosl	equ	0xFFD
  7019                           pclath	equ	0xFFA
  7020                           tblptru	equ	0xFF8
  7021                           tblptrh	equ	0xFF7
  7022                           tblptrl	equ	0xFF6
  7023                           tablat	equ	0xFF5
  7024                           prodh	equ	0xFF4
  7025                           prodl	equ	0xFF3
  7026                           intcon	equ	0xFF2
  7027                           intcon2	equ	0xFF1
  7028                           postinc0	equ	0xFEE
  7029                           wreg	equ	0xFE8
  7030                           indf1	equ	0xFE7
  7031                           postdec1	equ	0xFE5
  7032                           fsr1h	equ	0xFE2
  7033                           fsr1l	equ	0xFE1
  7034                           indf2	equ	0xFDF
  7035                           postinc2	equ	0xFDE
  7036                           postdec2	equ	0xFDD
  7037                           fsr2h	equ	0xFDA
  7038                           fsr2l	equ	0xFD9
  7039                           status	equ	0xFD8
  7040                           
  7041 ;; *************** function _INTERRUPT_Initialize *****************
  7042 ;; Defined at:
  7043 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;		None
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;		None
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  1    wreg      void 
  7050 ;; Registers used:
  7051 ;;		None
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7057 ;;      Params:         0       0       0       0       0       0       0
  7058 ;;      Locals:         0       0       0       0       0       0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0
  7060 ;;      Totals:         0       0       0       0       0       0       0
  7061 ;;Total ram usage:        0 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    3
  7064 ;; This function calls:
  7065 ;;		Nothing
  7066 ;; This function is called by:
  7067 ;;		_SYSTEM_Initialize
  7068 ;; This function uses a non-reentrant model
  7069 ;;
  7070                           
  7071                           	psect	text28
  7072  002AB4                     __ptext28:
  7073                           	opt stack 0
  7074  002AB4                     _INTERRUPT_Initialize:
  7075                           	opt stack 25
  7076                           
  7077                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  7078                           
  7079                           ;incstack = 0
  7080  002AB4  9ED0               	bcf	4048,7,c	;volatile
  7081  002AB6  0012               	return		;funcret
  7082  002AB8                     __end_of_INTERRUPT_Initialize:
  7083                           	opt stack 0
  7084                           tosu	equ	0xFFF
  7085                           tosh	equ	0xFFE
  7086                           tosl	equ	0xFFD
  7087                           pclath	equ	0xFFA
  7088                           tblptru	equ	0xFF8
  7089                           tblptrh	equ	0xFF7
  7090                           tblptrl	equ	0xFF6
  7091                           tablat	equ	0xFF5
  7092                           prodh	equ	0xFF4
  7093                           prodl	equ	0xFF3
  7094                           intcon	equ	0xFF2
  7095                           intcon2	equ	0xFF1
  7096                           postinc0	equ	0xFEE
  7097                           wreg	equ	0xFE8
  7098                           indf1	equ	0xFE7
  7099                           postdec1	equ	0xFE5
  7100                           fsr1h	equ	0xFE2
  7101                           fsr1l	equ	0xFE1
  7102                           indf2	equ	0xFDF
  7103                           postinc2	equ	0xFDE
  7104                           postdec2	equ	0xFDD
  7105                           fsr2h	equ	0xFDA
  7106                           fsr2l	equ	0xFD9
  7107                           status	equ	0xFD8
  7108                           
  7109 ;; *************** function _EUSART1_Initialize *****************
  7110 ;; Defined at:
  7111 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;		None
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;		None
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  1    wreg      void 
  7118 ;; Registers used:
  7119 ;;		wreg, status,2
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7125 ;;      Params:         0       0       0       0       0       0       0
  7126 ;;      Locals:         0       0       0       0       0       0       0
  7127 ;;      Temps:          0       0       0       0       0       0       0
  7128 ;;      Totals:         0       0       0       0       0       0       0
  7129 ;;Total ram usage:        0 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; Hardware stack levels required when called:    3
  7132 ;; This function calls:
  7133 ;;		Nothing
  7134 ;; This function is called by:
  7135 ;;		_SYSTEM_Initialize
  7136 ;; This function uses a non-reentrant model
  7137 ;;
  7138                           
  7139                           	psect	text29
  7140  0027A4                     __ptext29:
  7141                           	opt stack 0
  7142  0027A4                     _EUSART1_Initialize:
  7143                           	opt stack 25
  7144                           
  7145                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  7146                           
  7147                           ;incstack = 0
  7148  0027A4  9A9D               	bcf	3997,5,c	;volatile
  7149                           
  7150                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  7151  0027A6  989D               	bcf	3997,4,c	;volatile
  7152                           
  7153                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  7154  0027A8  0E08               	movlw	8
  7155  0027AA  6EB8               	movwf	4024,c	;volatile
  7156                           
  7157                           ;eusart1.c: 85: RCSTA1 = 0x90;
  7158  0027AC  0E90               	movlw	144
  7159  0027AE  6EAB               	movwf	4011,c	;volatile
  7160                           
  7161                           ;eusart1.c: 88: TXSTA1 = 0x24;
  7162  0027B0  0E24               	movlw	36
  7163  0027B2  6EAC               	movwf	4012,c	;volatile
  7164                           
  7165                           ;eusart1.c: 91: SPBRG1 = 0x10;
  7166  0027B4  0E10               	movlw	16
  7167  0027B6  6EAF               	movwf	4015,c	;volatile
  7168                           
  7169                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  7170  0027B8  0E00               	movlw	0
  7171  0027BA  6EB0               	movwf	4016,c	;volatile
  7172                           
  7173                           ;eusart1.c: 98: eusart1TxHead = 0;
  7174  0027BC  0E00               	movlw	0
  7175  0027BE  6E3C               	movwf	_eusart1TxHead,c	;volatile
  7176                           
  7177                           ;eusart1.c: 99: eusart1TxTail = 0;
  7178  0027C0  0E00               	movlw	0
  7179  0027C2  6E3B               	movwf	_eusart1TxTail,c	;volatile
  7180                           
  7181                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  7182  0027C4  0E46               	movlw	70
  7183  0027C6  0100               	movlb	0	; () banked
  7184  0027C8  6FD9               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  7185                           
  7186                           ;eusart1.c: 102: eusart1RxHead = 0;
  7187  0027CA  0E00               	movlw	0
  7188  0027CC  6E3A               	movwf	_eusart1RxHead,c	;volatile
  7189                           
  7190                           ;eusart1.c: 103: eusart1RxTail = 0;
  7191  0027CE  0E00               	movlw	0
  7192  0027D0  6E39               	movwf	_eusart1RxTail,c	;volatile
  7193                           
  7194                           ;eusart1.c: 104: eusart1RxCount = 0;
  7195  0027D2  0E00               	movlw	0
  7196  0027D4  6FC1               	movwf	_eusart1RxCount& (0+255),b	;volatile
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  7200  0027D6  8A9D               	bsf	3997,5,c	;volatile
  7201                           
  7202                           ; BSR set to: 0
  7203  0027D8  0012               	return		;funcret
  7204  0027DA                     __end_of_EUSART1_Initialize:
  7205                           	opt stack 0
  7206                           tosu	equ	0xFFF
  7207                           tosh	equ	0xFFE
  7208                           tosl	equ	0xFFD
  7209                           pclath	equ	0xFFA
  7210                           tblptru	equ	0xFF8
  7211                           tblptrh	equ	0xFF7
  7212                           tblptrl	equ	0xFF6
  7213                           tablat	equ	0xFF5
  7214                           prodh	equ	0xFF4
  7215                           prodl	equ	0xFF3
  7216                           intcon	equ	0xFF2
  7217                           intcon2	equ	0xFF1
  7218                           postinc0	equ	0xFEE
  7219                           wreg	equ	0xFE8
  7220                           indf1	equ	0xFE7
  7221                           postdec1	equ	0xFE5
  7222                           fsr1h	equ	0xFE2
  7223                           fsr1l	equ	0xFE1
  7224                           indf2	equ	0xFDF
  7225                           postinc2	equ	0xFDE
  7226                           postdec2	equ	0xFDD
  7227                           fsr2h	equ	0xFDA
  7228                           fsr2l	equ	0xFD9
  7229                           status	equ	0xFD8
  7230                           
  7231 ;; *************** function _ADC_Initialize *****************
  7232 ;; Defined at:
  7233 ;;		line 58 in file "mcc_generated_files/adc.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;		None
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;		None
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      void 
  7240 ;; Registers used:
  7241 ;;		wreg, status,2
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7247 ;;      Params:         0       0       0       0       0       0       0
  7248 ;;      Locals:         0       0       0       0       0       0       0
  7249 ;;      Temps:          0       0       0       0       0       0       0
  7250 ;;      Totals:         0       0       0       0       0       0       0
  7251 ;;Total ram usage:        0 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    3
  7254 ;; This function calls:
  7255 ;;		Nothing
  7256 ;; This function is called by:
  7257 ;;		_SYSTEM_Initialize
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text30
  7262  002A24                     __ptext30:
  7263                           	opt stack 0
  7264  002A24                     _ADC_Initialize:
  7265                           	opt stack 25
  7266                           
  7267                           ;adc.c: 63: ADCON0 = 0x05;
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;incstack = 0
  7271  002A24  0E05               	movlw	5
  7272  002A26  6EC2               	movwf	4034,c	;volatile
  7273                           
  7274                           ;adc.c: 66: ADCON1 = 0x00;
  7275  002A28  0E00               	movlw	0
  7276  002A2A  6EC1               	movwf	4033,c	;volatile
  7277                           
  7278                           ;adc.c: 69: ADCON2 = 0x87;
  7279  002A2C  0E87               	movlw	135
  7280  002A2E  6EC0               	movwf	4032,c	;volatile
  7281                           
  7282                           ;adc.c: 72: ADRESL = 0x00;
  7283  002A30  0E00               	movlw	0
  7284  002A32  6EC3               	movwf	4035,c	;volatile
  7285                           
  7286                           ;adc.c: 75: ADRESH = 0x00;
  7287  002A34  0E00               	movlw	0
  7288  002A36  6EC4               	movwf	4036,c	;volatile
  7289  002A38  0012               	return		;funcret
  7290  002A3A                     __end_of_ADC_Initialize:
  7291                           	opt stack 0
  7292                           tosu	equ	0xFFF
  7293                           tosh	equ	0xFFE
  7294                           tosl	equ	0xFFD
  7295                           pclath	equ	0xFFA
  7296                           tblptru	equ	0xFF8
  7297                           tblptrh	equ	0xFF7
  7298                           tblptrl	equ	0xFF6
  7299                           tablat	equ	0xFF5
  7300                           prodh	equ	0xFF4
  7301                           prodl	equ	0xFF3
  7302                           intcon	equ	0xFF2
  7303                           intcon2	equ	0xFF1
  7304                           postinc0	equ	0xFEE
  7305                           wreg	equ	0xFE8
  7306                           indf1	equ	0xFE7
  7307                           postdec1	equ	0xFE5
  7308                           fsr1h	equ	0xFE2
  7309                           fsr1l	equ	0xFE1
  7310                           indf2	equ	0xFDF
  7311                           postinc2	equ	0xFDE
  7312                           postdec2	equ	0xFDD
  7313                           fsr2h	equ	0xFDA
  7314                           fsr2l	equ	0xFD9
  7315                           status	equ	0xFD8
  7316                           
  7317 ;; *************** function _SetMcuRunTime *****************
  7318 ;; Defined at:
  7319 ;;		line 45 in file "SystemStatus.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;		None
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;		None
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  1    wreg      void 
  7326 ;; Registers used:
  7327 ;;		wreg, status,2, status,0, cstack
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7333 ;;      Params:         0       0       0       0       0       0       0
  7334 ;;      Locals:         0       0       0       0       0       0       0
  7335 ;;      Temps:          0       0       0       0       0       0       0
  7336 ;;      Totals:         0       0       0       0       0       0       0
  7337 ;;Total ram usage:        0 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    4
  7340 ;; This function calls:
  7341 ;;		___llmod
  7342 ;; This function is called by:
  7343 ;;		_main
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           	psect	text31
  7348  00253A                     __ptext31:
  7349                           	opt stack 0
  7350  00253A                     _SetMcuRunTime:
  7351                           	opt stack 26
  7352                           
  7353                           ;SystemStatus.c: 47: mcuRunTimeIn5SecTicks++;
  7354                           
  7355                           ;incstack = 0
  7356  00253A  0E01               	movlw	1
  7357  00253C  0100               	movlb	0	; () banked
  7358  00253E  27AD               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  7359  002540  0E00               	movlw	0
  7360  002542  23AE               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  7361  002544  23AF               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  7362  002546  23B0               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;SystemStatus.c: 48: mcuRunTimeIn5SecTicks %= (17280);
  7366  002548  C0AD  F025         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  7367  00254C  C0AE  F026         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  7368  002550  C0AF  F027         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  7369  002554  C0B0  F028         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  7370  002558  0E80               	movlw	128
  7371  00255A  6E29               	movwf	___llmod@divisor,c
  7372  00255C  0E43               	movlw	67
  7373  00255E  6E2A               	movwf	___llmod@divisor+1,c
  7374  002560  0E00               	movlw	0
  7375  002562  6E2B               	movwf	___llmod@divisor+2,c
  7376  002564  0E00               	movlw	0
  7377  002566  6E2C               	movwf	___llmod@divisor+3,c
  7378  002568  ECFA  F00F         	call	___llmod	;wreg free
  7379  00256C  C025  F0AD         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  7380  002570  C026  F0AE         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  7381  002574  C027  F0AF         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  7382  002578  C028  F0B0         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  7383  00257C  0012               	return		;funcret
  7384  00257E                     __end_of_SetMcuRunTime:
  7385                           	opt stack 0
  7386                           tosu	equ	0xFFF
  7387                           tosh	equ	0xFFE
  7388                           tosl	equ	0xFFD
  7389                           pclath	equ	0xFFA
  7390                           tblptru	equ	0xFF8
  7391                           tblptrh	equ	0xFF7
  7392                           tblptrl	equ	0xFF6
  7393                           tablat	equ	0xFF5
  7394                           prodh	equ	0xFF4
  7395                           prodl	equ	0xFF3
  7396                           intcon	equ	0xFF2
  7397                           intcon2	equ	0xFF1
  7398                           postinc0	equ	0xFEE
  7399                           wreg	equ	0xFE8
  7400                           indf1	equ	0xFE7
  7401                           postdec1	equ	0xFE5
  7402                           fsr1h	equ	0xFE2
  7403                           fsr1l	equ	0xFE1
  7404                           indf2	equ	0xFDF
  7405                           postinc2	equ	0xFDE
  7406                           postdec2	equ	0xFDD
  7407                           fsr2h	equ	0xFDA
  7408                           fsr2l	equ	0xFD9
  7409                           status	equ	0xFD8
  7410                           
  7411 ;; *************** function ___llmod *****************
  7412 ;; Defined at:
  7413 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;  dividend        4   36[COMRAM] unsigned long 
  7416 ;;  divisor         4   40[COMRAM] unsigned long 
  7417 ;; Auto vars:     Size  Location     Type
  7418 ;;  counter         1   44[COMRAM] unsigned char 
  7419 ;; Return value:  Size  Location     Type
  7420 ;;                  4   36[COMRAM] unsigned long 
  7421 ;; Registers used:
  7422 ;;		wreg, status,2, status,0
  7423 ;; Tracked objects:
  7424 ;;		On entry : 0/0
  7425 ;;		On exit  : 0/0
  7426 ;;		Unchanged: 0/0
  7427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7428 ;;      Params:         8       0       0       0       0       0       0
  7429 ;;      Locals:         1       0       0       0       0       0       0
  7430 ;;      Temps:          0       0       0       0       0       0       0
  7431 ;;      Totals:         9       0       0       0       0       0       0
  7432 ;;Total ram usage:        9 bytes
  7433 ;; Hardware stack levels used:    1
  7434 ;; Hardware stack levels required when called:    3
  7435 ;; This function calls:
  7436 ;;		Nothing
  7437 ;; This function is called by:
  7438 ;;		_AdcSingleSample
  7439 ;;		_SetMcuRunTime
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           	psect	text32
  7444  001FF4                     __ptext32:
  7445                           	opt stack 0
  7446  001FF4                     ___llmod:
  7447                           	opt stack 24
  7448                           
  7449                           ;incstack = 0
  7450  001FF4  5029               	movf	___llmod@divisor,w,c
  7451  001FF6  102A               	iorwf	___llmod@divisor+1,w,c
  7452  001FF8  102B               	iorwf	___llmod@divisor+2,w,c
  7453  001FFA  102C               	iorwf	___llmod@divisor+3,w,c
  7454  001FFC  B4D8               	btfsc	status,2,c
  7455  001FFE  D024               	goto	l1691
  7456  002000  0E01               	movlw	1
  7457  002002  6E2D               	movwf	___llmod@counter,c
  7458  002004  D006               	goto	l1686
  7459  002006  90D8               	bcf	status,0,c
  7460  002008  3629               	rlcf	___llmod@divisor,f,c
  7461  00200A  362A               	rlcf	___llmod@divisor+1,f,c
  7462  00200C  362B               	rlcf	___llmod@divisor+2,f,c
  7463  00200E  362C               	rlcf	___llmod@divisor+3,f,c
  7464  002010  2A2D               	incf	___llmod@counter,f,c
  7465  002012                     l1686:
  7466  002012  AE2C               	btfss	___llmod@divisor+3,7,c
  7467  002014  D7F8               	goto	l1687
  7468  002016                     u7310:
  7469  002016  5029               	movf	___llmod@divisor,w,c
  7470  002018  5C25               	subwf	___llmod@dividend,w,c
  7471  00201A  502A               	movf	___llmod@divisor+1,w,c
  7472  00201C  5826               	subwfb	___llmod@dividend+1,w,c
  7473  00201E  502B               	movf	___llmod@divisor+2,w,c
  7474  002020  5827               	subwfb	___llmod@dividend+2,w,c
  7475  002022  502C               	movf	___llmod@divisor+3,w,c
  7476  002024  5828               	subwfb	___llmod@dividend+3,w,c
  7477  002026  A0D8               	btfss	status,0,c
  7478  002028  D008               	goto	l1690
  7479  00202A  5029               	movf	___llmod@divisor,w,c
  7480  00202C  5E25               	subwf	___llmod@dividend,f,c
  7481  00202E  502A               	movf	___llmod@divisor+1,w,c
  7482  002030  5A26               	subwfb	___llmod@dividend+1,f,c
  7483  002032  502B               	movf	___llmod@divisor+2,w,c
  7484  002034  5A27               	subwfb	___llmod@dividend+2,f,c
  7485  002036  502C               	movf	___llmod@divisor+3,w,c
  7486  002038  5A28               	subwfb	___llmod@dividend+3,f,c
  7487  00203A                     l1690:
  7488  00203A  90D8               	bcf	status,0,c
  7489  00203C  322C               	rrcf	___llmod@divisor+3,f,c
  7490  00203E  322B               	rrcf	___llmod@divisor+2,f,c
  7491  002040  322A               	rrcf	___llmod@divisor+1,f,c
  7492  002042  3229               	rrcf	___llmod@divisor,f,c
  7493  002044  2E2D               	decfsz	___llmod@counter,f,c
  7494  002046  D7E7               	goto	u7310
  7495  002048                     l1691:
  7496  002048  C025  F025         	movff	___llmod@dividend,?___llmod
  7497  00204C  C026  F026         	movff	___llmod@dividend+1,?___llmod+1
  7498  002050  C027  F027         	movff	___llmod@dividend+2,?___llmod+2
  7499  002054  C028  F028         	movff	___llmod@dividend+3,?___llmod+3
  7500  002058  0012               	return		;funcret
  7501  00205A                     __end_of___llmod:
  7502                           	opt stack 0
  7503                           tosu	equ	0xFFF
  7504                           tosh	equ	0xFFE
  7505                           tosl	equ	0xFFD
  7506                           pclath	equ	0xFFA
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           prodh	equ	0xFF4
  7512                           prodl	equ	0xFF3
  7513                           intcon	equ	0xFF2
  7514                           intcon2	equ	0xFF1
  7515                           postinc0	equ	0xFEE
  7516                           wreg	equ	0xFE8
  7517                           indf1	equ	0xFE7
  7518                           postdec1	equ	0xFE5
  7519                           fsr1h	equ	0xFE2
  7520                           fsr1l	equ	0xFE1
  7521                           indf2	equ	0xFDF
  7522                           postinc2	equ	0xFDE
  7523                           postdec2	equ	0xFDD
  7524                           fsr2h	equ	0xFDA
  7525                           fsr2l	equ	0xFD9
  7526                           status	equ	0xFD8
  7527                           
  7528 ;; *************** function _SendUartSystemInitMessage *****************
  7529 ;; Defined at:
  7530 ;;		line 66 in file "SystemStatus.c"
  7531 ;; Parameters:    Size  Location     Type
  7532 ;;		None
  7533 ;; Auto vars:     Size  Location     Type
  7534 ;;  dest           50    9[BANK0 ] unsigned char [50]
  7535 ;; Return value:  Size  Location     Type
  7536 ;;                  1    wreg      void 
  7537 ;; Registers used:
  7538 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7544 ;;      Params:         0       0       0       0       0       0       0
  7545 ;;      Locals:         0      50       0       0       0       0       0
  7546 ;;      Temps:          0       0       0       0       0       0       0
  7547 ;;      Totals:         0      50       0       0       0       0       0
  7548 ;;Total ram usage:       50 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    5
  7551 ;; This function calls:
  7552 ;;		_UART_Write_Text
  7553 ;;		_sprintf
  7554 ;; This function is called by:
  7555 ;;		_main
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           	psect	text33
  7560  001788                     __ptext33:
  7561                           	opt stack 0
  7562  001788                     _SendUartSystemInitMessage:
  7563                           	opt stack 25
  7564                           
  7565                           ;SystemStatus.c: 68: char dest[50];
  7566                           ;SystemStatus.c: 70: sprintf(dest, "*************************** \n\r");
  7567                           
  7568                           ;incstack = 0
  7569  001788  0E69               	movlw	low SendUartSystemInitMessage@dest
  7570  00178A  6E24               	movwf	sprintf@sp,c
  7571  00178C  0E00               	movlw	high SendUartSystemInitMessage@dest
  7572  00178E  6E25               	movwf	sprintf@sp+1,c
  7573  001790  0EEC               	movlw	low STR_12
  7574  001792  6E26               	movwf	sprintf@f,c
  7575  001794  0E7E               	movlw	high STR_12
  7576  001796  6E27               	movwf	sprintf@f+1,c
  7577  001798  ECFB  F004         	call	_sprintf	;wreg free
  7578                           
  7579                           ;SystemStatus.c: 71: UART_Write_Text(dest);
  7580  00179C  0E69               	movlw	low SendUartSystemInitMessage@dest
  7581  00179E  6E19               	movwf	UART_Write_Text@text,c
  7582  0017A0  0E00               	movlw	high SendUartSystemInitMessage@dest
  7583  0017A2  6E1A               	movwf	UART_Write_Text@text+1,c
  7584  0017A4  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  7585                           
  7586                           ;SystemStatus.c: 73: sprintf(dest, "FAST LINK SYSTEM \n\r");
  7587  0017A8  0E69               	movlw	low SendUartSystemInitMessage@dest
  7588  0017AA  6E24               	movwf	sprintf@sp,c
  7589  0017AC  0E00               	movlw	high SendUartSystemInitMessage@dest
  7590  0017AE  6E25               	movwf	sprintf@sp+1,c
  7591  0017B0  0E58               	movlw	low STR_13
  7592  0017B2  6E26               	movwf	sprintf@f,c
  7593  0017B4  0E7F               	movlw	high STR_13
  7594  0017B6  6E27               	movwf	sprintf@f+1,c
  7595  0017B8  ECFB  F004         	call	_sprintf	;wreg free
  7596                           
  7597                           ;SystemStatus.c: 74: UART_Write_Text(dest);
  7598  0017BC  0E69               	movlw	low SendUartSystemInitMessage@dest
  7599  0017BE  6E19               	movwf	UART_Write_Text@text,c
  7600  0017C0  0E00               	movlw	high SendUartSystemInitMessage@dest
  7601  0017C2  6E1A               	movwf	UART_Write_Text@text+1,c
  7602  0017C4  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  7603                           
  7604                           ;SystemStatus.c: 76: sprintf(dest, "SW VESRION: %s \n\r", "1_002");
  7605  0017C8  0E69               	movlw	low SendUartSystemInitMessage@dest
  7606  0017CA  6E24               	movwf	sprintf@sp,c
  7607  0017CC  0E00               	movlw	high SendUartSystemInitMessage@dest
  7608  0017CE  6E25               	movwf	sprintf@sp+1,c
  7609  0017D0  0EA8               	movlw	low STR_14
  7610  0017D2  6E26               	movwf	sprintf@f,c
  7611  0017D4  0E7F               	movlw	high STR_14
  7612  0017D6  6E27               	movwf	sprintf@f+1,c
  7613  0017D8  0EF4               	movlw	low STR_15
  7614  0017DA  6E28               	movwf	?_sprintf+4,c
  7615  0017DC  0E7F               	movlw	high STR_15
  7616  0017DE  6E29               	movwf	?_sprintf+5,c
  7617  0017E0  ECFB  F004         	call	_sprintf	;wreg free
  7618                           
  7619                           ;SystemStatus.c: 77: UART_Write_Text(dest);
  7620  0017E4  0E69               	movlw	low SendUartSystemInitMessage@dest
  7621  0017E6  6E19               	movwf	UART_Write_Text@text,c
  7622  0017E8  0E00               	movlw	high SendUartSystemInitMessage@dest
  7623  0017EA  6E1A               	movwf	UART_Write_Text@text+1,c
  7624  0017EC  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  7625                           
  7626                           ;SystemStatus.c: 79: sprintf(dest, "Compile date: %s \n\r", "Mar 25 2018");
  7627  0017F0  0E69               	movlw	low SendUartSystemInitMessage@dest
  7628  0017F2  6E24               	movwf	sprintf@sp,c
  7629  0017F4  0E00               	movlw	high SendUartSystemInitMessage@dest
  7630  0017F6  6E25               	movwf	sprintf@sp+1,c
  7631  0017F8  0E80               	movlw	low STR_16
  7632  0017FA  6E26               	movwf	sprintf@f,c
  7633  0017FC  0E7F               	movlw	high STR_16
  7634  0017FE  6E27               	movwf	sprintf@f+1,c
  7635  001800  0EBA               	movlw	low STR_17
  7636  001802  6E28               	movwf	?_sprintf+4,c
  7637  001804  0E7F               	movlw	high STR_17
  7638  001806  6E29               	movwf	?_sprintf+5,c
  7639  001808  ECFB  F004         	call	_sprintf	;wreg free
  7640                           
  7641                           ;SystemStatus.c: 80: UART_Write_Text(dest);
  7642  00180C  0E69               	movlw	low SendUartSystemInitMessage@dest
  7643  00180E  6E19               	movwf	UART_Write_Text@text,c
  7644  001810  0E00               	movlw	high SendUartSystemInitMessage@dest
  7645  001812  6E1A               	movwf	UART_Write_Text@text+1,c
  7646  001814  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  7647                           
  7648                           ;SystemStatus.c: 82: sprintf(dest, "Compile time: %s \n\r", "17:55:42");
  7649  001818  0E69               	movlw	low SendUartSystemInitMessage@dest
  7650  00181A  6E24               	movwf	sprintf@sp,c
  7651  00181C  0E00               	movlw	high SendUartSystemInitMessage@dest
  7652  00181E  6E25               	movwf	sprintf@sp+1,c
  7653  001820  0E6C               	movlw	low STR_18
  7654  001822  6E26               	movwf	sprintf@f,c
  7655  001824  0E7F               	movlw	high STR_18
  7656  001826  6E27               	movwf	sprintf@f+1,c
  7657  001828  0EDB               	movlw	low STR_19
  7658  00182A  6E28               	movwf	?_sprintf+4,c
  7659  00182C  0E7F               	movlw	high STR_19
  7660  00182E  6E29               	movwf	?_sprintf+5,c
  7661  001830  ECFB  F004         	call	_sprintf	;wreg free
  7662                           
  7663                           ;SystemStatus.c: 83: UART_Write_Text(dest);
  7664  001834  0E69               	movlw	low SendUartSystemInitMessage@dest
  7665  001836  6E19               	movwf	UART_Write_Text@text,c
  7666  001838  0E00               	movlw	high SendUartSystemInitMessage@dest
  7667  00183A  6E1A               	movwf	UART_Write_Text@text+1,c
  7668  00183C  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  7669                           
  7670                           ;SystemStatus.c: 85: sprintf(dest, "*************************** \n\r");
  7671  001840  0E69               	movlw	low SendUartSystemInitMessage@dest
  7672  001842  6E24               	movwf	sprintf@sp,c
  7673  001844  0E00               	movlw	high SendUartSystemInitMessage@dest
  7674  001846  6E25               	movwf	sprintf@sp+1,c
  7675  001848  0EEC               	movlw	low STR_12
  7676  00184A  6E26               	movwf	sprintf@f,c
  7677  00184C  0E7E               	movlw	high STR_12
  7678  00184E  6E27               	movwf	sprintf@f+1,c
  7679  001850  ECFB  F004         	call	_sprintf	;wreg free
  7680                           
  7681                           ;SystemStatus.c: 86: UART_Write_Text(dest);
  7682  001854  0E69               	movlw	low SendUartSystemInitMessage@dest
  7683  001856  6E19               	movwf	UART_Write_Text@text,c
  7684  001858  0E00               	movlw	high SendUartSystemInitMessage@dest
  7685  00185A  6E1A               	movwf	UART_Write_Text@text+1,c
  7686  00185C  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  7687  001860  0012               	return		;funcret
  7688  001862                     __end_of_SendUartSystemInitMessage:
  7689                           	opt stack 0
  7690                           tosu	equ	0xFFF
  7691                           tosh	equ	0xFFE
  7692                           tosl	equ	0xFFD
  7693                           pclath	equ	0xFFA
  7694                           tblptru	equ	0xFF8
  7695                           tblptrh	equ	0xFF7
  7696                           tblptrl	equ	0xFF6
  7697                           tablat	equ	0xFF5
  7698                           prodh	equ	0xFF4
  7699                           prodl	equ	0xFF3
  7700                           intcon	equ	0xFF2
  7701                           intcon2	equ	0xFF1
  7702                           postinc0	equ	0xFEE
  7703                           wreg	equ	0xFE8
  7704                           indf1	equ	0xFE7
  7705                           postdec1	equ	0xFE5
  7706                           fsr1h	equ	0xFE2
  7707                           fsr1l	equ	0xFE1
  7708                           indf2	equ	0xFDF
  7709                           postinc2	equ	0xFDE
  7710                           postdec2	equ	0xFDD
  7711                           fsr2h	equ	0xFDA
  7712                           fsr2l	equ	0xFD9
  7713                           status	equ	0xFD8
  7714                           
  7715 ;; *************** function _SampleSingleChannel *****************
  7716 ;; Defined at:
  7717 ;;		line 92 in file "AdcApp.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;		None
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;  _adcResult      2   53[BANK2 ] unsigned int 
  7722 ;;  dest           50    0[BANK2 ] unsigned char [50]
  7723 ;;  adcRes          2   55[BANK2 ] unsigned int 
  7724 ;; Return value:  Size  Location     Type
  7725 ;;                  1    wreg      unsigned char 
  7726 ;; Registers used:
  7727 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7728 ;; Tracked objects:
  7729 ;;		On entry : 0/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7733 ;;      Params:         0       0       0       0       0       0       0
  7734 ;;      Locals:         0       0       0      57       0       0       0
  7735 ;;      Temps:          0       2       0       0       0       0       0
  7736 ;;      Totals:         0       2       0      57       0       0       0
  7737 ;;Total ram usage:       59 bytes
  7738 ;; Hardware stack levels used:    1
  7739 ;; Hardware stack levels required when called:    8
  7740 ;; This function calls:
  7741 ;;		_ADC_GetConversion
  7742 ;;		_UART_Write_Text
  7743 ;;		___ftdiv
  7744 ;;		___ftmul
  7745 ;;		___fttol
  7746 ;;		___lwtoft
  7747 ;;		_pow
  7748 ;;		_sprintf
  7749 ;; This function is called by:
  7750 ;;		_main
  7751 ;; This function uses a non-reentrant model
  7752 ;;
  7753                           
  7754                           	psect	text34
  7755  0012B8                     __ptext34:
  7756                           	opt stack 0
  7757  0012B8                     _SampleSingleChannel:
  7758                           	opt stack 22
  7759                           
  7760                           ;AdcApp.c: 94: char dest[50];
  7761                           ;AdcApp.c: 95: uint16_t adcRes = 0x0;
  7762                           
  7763                           ;incstack = 0
  7764  0012B8  0E00               	movlw	0
  7765  0012BA  0102               	movlb	2	; () banked
  7766  0012BC  6F38               	movwf	(SampleSingleChannel@adcRes+1)& (0+255),b
  7767  0012BE  0E00               	movlw	0
  7768  0012C0  6F37               	movwf	SampleSingleChannel@adcRes& (0+255),b
  7769                           
  7770                           ; BSR set to: 2
  7771                           ;AdcApp.c: 96: if(numSamples--)
  7772  0012C2  0100               	movlb	0	; () banked
  7773  0012C4  07B5               	decf	_numSamples& (0+255),f,b
  7774  0012C6  A0D8               	btfss	status,0,c
  7775  0012C8  07B6               	decf	(_numSamples+1)& (0+255),f,b
  7776  0012CA  29B5               	incf	_numSamples& (0+255),w,b
  7777  0012CC  E103               	bnz	u7720
  7778  0012CE  29B6               	incf	(_numSamples+1)& (0+255),w,b
  7779  0012D0  B4D8               	btfsc	status,2,c
  7780  0012D2  D074               	goto	l115
  7781  0012D4                     u7720:
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;AdcApp.c: 97: {
  7785                           ;AdcApp.c: 98: adc_result_t _adcResult = ADC_GetConversion(channelArr[channelNum]);
  7786  0012D4  0EB7               	movlw	low _channelArr
  7787  0012D6  2437               	addwf	_channelNum,w,c
  7788  0012D8  6EF6               	movwf	tblptrl,c
  7789  0012DA  0E7A               	movlw	high _channelArr
  7790  0012DC  2038               	addwfc	_channelNum+1,w,c
  7791  0012DE  6EF7               	movwf	tblptrh,c
  7792  0012E0                     	if	0	;There are less than 3 active tblptr bytes
  7793  0012E0                     	endif
  7794  0012E0  0008               	tblrd		*
  7795  0012E2  50F5               	movf	tablat,w,c
  7796  0012E4  EC20  F014         	call	_ADC_GetConversion
  7797  0012E8  C018  F235         	movff	?_ADC_GetConversion,SampleSingleChannel@_adcResult
  7798  0012EC  C019  F236         	movff	?_ADC_GetConversion+1,SampleSingleChannel@_adcResult+1
  7799                           
  7800                           ;AdcApp.c: 99: adcRes = (_adcResult/pow(2,(10)))*(3340);
  7801  0012F0  0E00               	movlw	0
  7802  0012F2  0100               	movlb	0	; () banked
  7803  0012F4  6F9D               	movwf	pow@y& (0+255),b
  7804  0012F6  0E20               	movlw	32
  7805  0012F8  6F9E               	movwf	(pow@y+1)& (0+255),b
  7806  0012FA  0E41               	movlw	65
  7807  0012FC  6F9F               	movwf	(pow@y+2)& (0+255),b
  7808  0012FE  0E00               	movlw	0
  7809  001300  6F9A               	movwf	pow@x& (0+255),b
  7810  001302  0E00               	movlw	0
  7811  001304  6F9B               	movwf	(pow@x+1)& (0+255),b
  7812  001306  0E40               	movlw	64
  7813  001308  6F9C               	movwf	(pow@x+2)& (0+255),b
  7814  00130A  EC6C  F007         	call	_pow	;wreg free
  7815  00130E  C09A  F232         	movff	?_pow,_SampleSingleChannel$2939
  7816  001312  C09B  F233         	movff	?_pow+1,_SampleSingleChannel$2939+1
  7817  001316  C09C  F234         	movff	?_pow+2,_SampleSingleChannel$2939+2
  7818                           
  7819                           ;AdcApp.c: 99: adcRes = (_adcResult/pow(2,(10)))*(3340);
  7820  00131A  0EC0               	movlw	192
  7821  00131C  0100               	movlb	0	; () banked
  7822  00131E  6F69               	movwf	___ftmul@f2& (0+255),b
  7823  001320  0E50               	movlw	80
  7824  001322  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  7825  001324  0E45               	movlw	69
  7826  001326  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  7827  001328  C232  F026         	movff	_SampleSingleChannel$2939,___ftdiv@f2
  7828  00132C  C233  F027         	movff	_SampleSingleChannel$2939+1,___ftdiv@f2+1
  7829  001330  C234  F028         	movff	_SampleSingleChannel$2939+2,___ftdiv@f2+2
  7830  001334  C235  F020         	movff	SampleSingleChannel@_adcResult,___lwtoft@c
  7831  001338  C236  F021         	movff	SampleSingleChannel@_adcResult+1,___lwtoft@c+1
  7832  00133C  ECAC  F014         	call	___lwtoft	;wreg free
  7833  001340  C020  F023         	movff	?___lwtoft,___ftdiv@f1
  7834  001344  C021  F024         	movff	?___lwtoft+1,___ftdiv@f1+1
  7835  001348  C022  F025         	movff	?___lwtoft+2,___ftdiv@f1+2
  7836  00134C  ECDF  F00A         	call	___ftdiv	;wreg free
  7837  001350  C023  F066         	movff	?___ftdiv,___ftmul@f1
  7838  001354  C024  F067         	movff	?___ftdiv+1,___ftmul@f1+1
  7839  001358  C025  F068         	movff	?___ftdiv+2,___ftmul@f1+2
  7840  00135C  EC64  F00A         	call	___ftmul	;wreg free
  7841  001360  C066  F072         	movff	?___ftmul,___fttol@f1
  7842  001364  C067  F073         	movff	?___ftmul+1,___fttol@f1+1
  7843  001368  C068  F074         	movff	?___ftmul+2,___fttol@f1+2
  7844  00136C  ECE8  F009         	call	___fttol	;wreg free
  7845  001370  C072  F237         	movff	?___fttol,SampleSingleChannel@adcRes
  7846  001374  C073  F238         	movff	?___fttol+1,SampleSingleChannel@adcRes+1
  7847                           
  7848                           ;AdcApp.c: 101: sprintf(dest, "%d \t", adcRes);
  7849  001378  0E00               	movlw	low SampleSingleChannel@dest
  7850  00137A  6E24               	movwf	sprintf@sp,c
  7851  00137C  0E02               	movlw	high SampleSingleChannel@dest
  7852  00137E  6E25               	movwf	sprintf@sp+1,c
  7853  001380  0EFA               	movlw	low STR_6
  7854  001382  6E26               	movwf	sprintf@f,c
  7855  001384  0E7F               	movlw	high STR_6
  7856  001386  6E27               	movwf	sprintf@f+1,c
  7857  001388  C237  F028         	movff	SampleSingleChannel@adcRes,?_sprintf+4
  7858  00138C  C238  F029         	movff	SampleSingleChannel@adcRes+1,?_sprintf+5
  7859  001390  ECFB  F004         	call	_sprintf	;wreg free
  7860                           
  7861                           ;AdcApp.c: 102: UART_Write_Text(dest);
  7862  001394  0E00               	movlw	low SampleSingleChannel@dest
  7863  001396  6E19               	movwf	UART_Write_Text@text,c
  7864  001398  0E02               	movlw	high SampleSingleChannel@dest
  7865  00139A  6E1A               	movwf	UART_Write_Text@text+1,c
  7866  00139C  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  7867                           
  7868                           ;AdcApp.c: 103: _delay((unsigned long)((1000)*(8000000/4000.0)));
  7869  0013A0  0E0B               	movlw	11
  7870  0013A2  0100               	movlb	0	; () banked
  7871  0013A4  6FAC               	movwf	(??_SampleSingleChannel+1)& (0+255),b
  7872  0013A6  0E26               	movlw	38
  7873  0013A8  6FAB               	movwf	??_SampleSingleChannel& (0+255),b
  7874  0013AA  0E5D               	movlw	93
  7875  0013AC                     u8287:
  7876  0013AC  2EE8               	decfsz	wreg,f,c
  7877  0013AE  D7FE               	bra	u8287
  7878  0013B0  2FAB               	decfsz	??_SampleSingleChannel& (0+255),f,b
  7879  0013B2  D7FC               	bra	u8287
  7880  0013B4  2FAC               	decfsz	(??_SampleSingleChannel+1)& (0+255),f,b
  7881  0013B6  D7FA               	bra	u8287
  7882  0013B8  D000               	nop2	
  7883                           
  7884                           ;AdcApp.c: 104: }
  7885  0013BA  0012               	return	
  7886  0013BC                     l115:
  7887                           
  7888                           ;AdcApp.c: 105: else
  7889                           ;AdcApp.c: 106: {
  7890                           ;AdcApp.c: 107: needToSample = 0;
  7891  0013BC  0E00               	movlw	0
  7892  0013BE  0100               	movlb	0	; () banked
  7893  0013C0  6FC3               	movwf	_needToSample& (0+255),b	;volatile
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;AdcApp.c: 108: UART_Write_Text("\n\r OK \n\r");
  7897  0013C2  0EE4               	movlw	low STR_7
  7898  0013C4  6E19               	movwf	UART_Write_Text@text,c
  7899  0013C6  0E7F               	movlw	high STR_7
  7900  0013C8  6E1A               	movwf	UART_Write_Text@text+1,c
  7901  0013CA  EC8C  F00F         	call	_UART_Write_Text	;wreg free
  7902  0013CE  0012               	return	
  7903  0013D0                     __end_of_SampleSingleChannel:
  7904                           	opt stack 0
  7905                           tosu	equ	0xFFF
  7906                           tosh	equ	0xFFE
  7907                           tosl	equ	0xFFD
  7908                           pclath	equ	0xFFA
  7909                           tblptru	equ	0xFF8
  7910                           tblptrh	equ	0xFF7
  7911                           tblptrl	equ	0xFF6
  7912                           tablat	equ	0xFF5
  7913                           prodh	equ	0xFF4
  7914                           prodl	equ	0xFF3
  7915                           intcon	equ	0xFF2
  7916                           intcon2	equ	0xFF1
  7917                           postinc0	equ	0xFEE
  7918                           wreg	equ	0xFE8
  7919                           indf1	equ	0xFE7
  7920                           postdec1	equ	0xFE5
  7921                           fsr1h	equ	0xFE2
  7922                           fsr1l	equ	0xFE1
  7923                           indf2	equ	0xFDF
  7924                           postinc2	equ	0xFDE
  7925                           postdec2	equ	0xFDD
  7926                           fsr2h	equ	0xFDA
  7927                           fsr2l	equ	0xFD9
  7928                           status	equ	0xFD8
  7929                           
  7930 ;; *************** function _sprintf *****************
  7931 ;; Defined at:
  7932 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7933 ;; Parameters:    Size  Location     Type
  7934 ;;  sp              2   35[COMRAM] PTR unsigned char 
  7935 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), readUartByte@dest(50), SampleSingleChannel@dest(50
      +), 
  7936 ;;  f               2   37[COMRAM] PTR const unsigned char 
  7937 ;;		 -> STR_39(37), STR_38(38), STR_37(86), STR_36(53), 
  7938 ;;		 -> STR_35(46), STR_34(29), STR_33(101), STR_32(86), 
  7939 ;;		 -> STR_31(61), STR_30(62), STR_29(45), STR_28(74), 
  7940 ;;		 -> STR_27(25), STR_26(79), STR_25(75), STR_24(46), 
  7941 ;;		 -> STR_23(61), STR_22(66), STR_21(23), STR_20(31), 
  7942 ;;		 -> STR_18(20), STR_16(20), STR_14(18), STR_13(20), 
  7943 ;;		 -> STR_12(31), STR_8(11), STR_6(5), 
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;  tmpval          4    0        struct .
  7946 ;;  val             2    6[BANK0 ] unsigned int 
  7947 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  7948 ;;		 -> STR_40(7), STR_19(9), STR_17(12), STR_15(6), 
  7949 ;;  ap              2    2[BANK0 ] PTR void [1]
  7950 ;;		 -> ?_sprintf(2), 
  7951 ;;  len             2    0        unsigned int 
  7952 ;;  c               1    8[BANK0 ] char 
  7953 ;;  prec            1    1[BANK0 ] char 
  7954 ;;  flag            1    0[BANK0 ] unsigned char 
  7955 ;; Return value:  Size  Location     Type
  7956 ;;                  2   35[COMRAM] int 
  7957 ;; Registers used:
  7958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7959 ;; Tracked objects:
  7960 ;;		On entry : 0/0
  7961 ;;		On exit  : 0/0
  7962 ;;		Unchanged: 0/0
  7963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7964 ;;      Params:         6       0       0       0       0       0       0
  7965 ;;      Locals:         0       9       0       0       0       0       0
  7966 ;;      Temps:          1       0       0       0       0       0       0
  7967 ;;      Totals:         7       9       0       0       0       0       0
  7968 ;;Total ram usage:       16 bytes
  7969 ;; Hardware stack levels used:    1
  7970 ;; Hardware stack levels required when called:    4
  7971 ;; This function calls:
  7972 ;;		___lwdiv
  7973 ;;		___lwmod
  7974 ;; This function is called by:
  7975 ;;		_SampleSingleChannel
  7976 ;;		_readUartByte
  7977 ;;		_SendUartSystemInitMessage
  7978 ;;		_PrintHelpScreen
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	text35
  7983  0009F6                     __ptext35:
  7984                           	opt stack 0
  7985  0009F6                     _sprintf:
  7986                           	opt stack 25
  7987                           
  7988                           ;doprnt.c: 494: va_list ap;
  7989                           ;doprnt.c: 499: signed char c;
  7990                           ;doprnt.c: 506: signed char prec;
  7991                           ;doprnt.c: 508: unsigned char flag;
  7992                           ;doprnt.c: 523: union {
  7993                           ;doprnt.c: 524: unsigned long vd;
  7994                           ;doprnt.c: 525: double integ;
  7995                           ;doprnt.c: 526: } tmpval;
  7996                           ;doprnt.c: 528: unsigned int val;
  7997                           ;doprnt.c: 529: unsigned len;
  7998                           ;doprnt.c: 530: const char * cp;
  7999                           ;doprnt.c: 533: *ap = __va_start();
  8000                           
  8001                           ;incstack = 0
  8002  0009F6  0E28               	movlw	low (?_sprintf+4)
  8003  0009F8  0100               	movlb	0	; () banked
  8004  0009FA  6F62               	movwf	sprintf@ap& (0+255),b
  8005  0009FC  0E00               	movlw	high (?_sprintf+4)
  8006  0009FE  6F63               	movwf	(sprintf@ap+1)& (0+255),b
  8007                           
  8008                           ;doprnt.c: 536: while(c = *f++) {
  8009  000A00  D0C0               	goto	u7170
  8010  000A02                     
  8011                           ; BSR set to: 0
  8012                           ;doprnt.c: 538: if(c != '%')
  8013                           
  8014                           ; BSR set to: 0
  8015  000A02  0E25               	movlw	37
  8016  000A04  1968               	xorwf	sprintf@c& (0+255),w,b
  8017  000A06  B4D8               	btfsc	status,2,c
  8018  000A08  D009               	goto	l1299
  8019                           
  8020                           ; BSR set to: 0
  8021                           ;doprnt.c: 540: {
  8022                           ;doprnt.c: 541: ((*sp++ = (c)));
  8023  000A0A  C024  FFD9         	movff	sprintf@sp,fsr2l
  8024  000A0E  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8025  000A12  C068  FFDF         	movff	sprintf@c,indf2
  8026                           
  8027                           ; BSR set to: 0
  8028  000A16  4A24               	infsnz	sprintf@sp,f,c
  8029  000A18  2A25               	incf	sprintf@sp+1,f,c
  8030                           
  8031                           ;doprnt.c: 542: continue;
  8032  000A1A  D0B3               	goto	u7170
  8033  000A1C                     l1299:
  8034                           
  8035                           ; BSR set to: 0
  8036                           ;doprnt.c: 543: }
  8037                           ;doprnt.c: 548: flag = 0;
  8038                           
  8039                           ; BSR set to: 0
  8040  000A1C  0E00               	movlw	0
  8041  000A1E  6F60               	movwf	sprintf@flag& (0+255),b
  8042                           
  8043                           ;doprnt.c: 635: switch(c = *f++) {
  8044  000A20  D02E               	goto	l1300
  8045  000A22                     
  8046                           ; BSR set to: 0
  8047                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8048                           
  8049                           ; BSR set to: 0
  8050  000A22  C062  FFD9         	movff	sprintf@ap,fsr2l
  8051  000A26  C063  FFDA         	movff	sprintf@ap+1,fsr2h
  8052  000A2A  CFDE F064          	movff	postinc2,sprintf@cp
  8053  000A2E  CFDD F065          	movff	postdec2,sprintf@cp+1
  8054                           
  8055                           ; BSR set to: 0
  8056  000A32  0E02               	movlw	2
  8057  000A34  2762               	addwf	sprintf@ap& (0+255),f,b
  8058  000A36  0E00               	movlw	0
  8059  000A38  2363               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;doprnt.c: 740: if(!cp)
  8063  000A3A  5164               	movf	sprintf@cp& (0+255),w,b
  8064  000A3C  1165               	iorwf	(sprintf@cp+1)& (0+255),w,b
  8065  000A3E  A4D8               	btfss	status,2,c
  8066  000A40  D014               	goto	l1308
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;doprnt.c: 741: cp = "(null)";
  8070  000A42  0EED               	movlw	low STR_40
  8071  000A44  6F64               	movwf	sprintf@cp& (0+255),b
  8072  000A46  0E7F               	movlw	high STR_40
  8073  000A48  6F65               	movwf	(sprintf@cp+1)& (0+255),b
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;doprnt.c: 777: while(*cp)
  8077  000A4A  D00F               	goto	l1308
  8078  000A4C                     
  8079                           ; BSR set to: 0
  8080                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  8081                           
  8082                           ; BSR set to: 0
  8083  000A4C  C064  FFF6         	movff	sprintf@cp,tblptrl
  8084  000A50  C065  FFF7         	movff	sprintf@cp+1,tblptrh
  8085  000A54                     	if	0	;tblptru may be non-zero
  8086  000A54                     	endif
  8087  000A54                     	if	0	;tblptru may be non-zero
  8088  000A54                     	endif
  8089  000A54  C024  FFD9         	movff	sprintf@sp,fsr2l
  8090  000A58  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8091  000A5C  0008               	tblrd		*
  8092  000A5E  CFF5 FFDF          	movff	tablat,indf2
  8093                           
  8094                           ; BSR set to: 0
  8095  000A62  4B64               	infsnz	sprintf@cp& (0+255),f,b
  8096  000A64  2B65               	incf	(sprintf@cp+1)& (0+255),f,b
  8097                           
  8098                           ; BSR set to: 0
  8099  000A66  4A24               	infsnz	sprintf@sp,f,c
  8100  000A68  2A25               	incf	sprintf@sp+1,f,c
  8101  000A6A                     l1308:
  8102                           
  8103                           ; BSR set to: 0
  8104                           
  8105                           ; BSR set to: 0
  8106  000A6A  C064  FFF6         	movff	sprintf@cp,tblptrl
  8107  000A6E  C065  FFF7         	movff	sprintf@cp+1,tblptrh
  8108  000A72                     	if	0	;tblptru may be non-zero
  8109  000A72                     	endif
  8110  000A72                     	if	0	;tblptru may be non-zero
  8111  000A72                     	endif
  8112  000A72  0008               	tblrd		*
  8113  000A74  50F5               	movf	tablat,w,c
  8114  000A76  0900               	iorlw	0
  8115  000A78  B4D8               	btfsc	status,2,c
  8116  000A7A  D083               	goto	u7170
  8117  000A7C  D7E7               	goto	l1309
  8118  000A7E                     l1300:
  8119                           
  8120                           ; BSR set to: 0
  8121                           
  8122                           ; BSR set to: 0
  8123  000A7E  C026  FFF6         	movff	sprintf@f,tblptrl
  8124  000A82  C027  FFF7         	movff	sprintf@f+1,tblptrh
  8125  000A86  4A26               	infsnz	sprintf@f,f,c
  8126  000A88  2A27               	incf	sprintf@f+1,f,c
  8127  000A8A                     	if	0	;tblptru may be non-zero
  8128  000A8A                     	endif
  8129  000A8A                     	if	0	;tblptru may be non-zero
  8130  000A8A                     	endif
  8131  000A8A  0008               	tblrd		*
  8132  000A8C  CFF5 F068          	movff	tablat,sprintf@c
  8133  000A90  5168               	movf	sprintf@c& (0+255),w,b
  8134                           
  8135                           ; Switch size 1, requested type "space"
  8136                           ; Number of cases is 4, Range of values is 0 to 115
  8137                           ; switch strategies available:
  8138                           ; Name         Instructions Cycles
  8139                           ; simple_byte           13     7 (average)
  8140                           ;	Chosen strategy is simple_byte
  8141  000A92  0A00               	xorlw	0	; case 0
  8142  000A94  B4D8               	btfsc	status,2,c
  8143  000A96  D081               	goto	u7180
  8144  000A98  0A64               	xorlw	100	; case 100
  8145  000A9A  B4D8               	btfsc	status,2,c
  8146  000A9C  D007               	goto	l1305
  8147  000A9E  0A0D               	xorlw	13	; case 105
  8148  000AA0  B4D8               	btfsc	status,2,c
  8149  000AA2  D004               	goto	l1305
  8150  000AA4  0A1A               	xorlw	26	; case 115
  8151  000AA6  B4D8               	btfsc	status,2,c
  8152  000AA8  D7BC               	goto	l1306
  8153  000AAA  D06B               	goto	u7170
  8154  000AAC                     l1305:
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;doprnt.c: 1253: {
  8158                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8159                           
  8160                           ; BSR set to: 0
  8161  000AAC  C062  FFD9         	movff	sprintf@ap,fsr2l
  8162  000AB0  C063  FFDA         	movff	sprintf@ap+1,fsr2h
  8163  000AB4  CFDE F066          	movff	postinc2,sprintf@val
  8164  000AB8  CFDD F067          	movff	postdec2,sprintf@val+1
  8165                           
  8166                           ; BSR set to: 0
  8167  000ABC  0E02               	movlw	2
  8168  000ABE  2762               	addwf	sprintf@ap& (0+255),f,b
  8169  000AC0  0E00               	movlw	0
  8170  000AC2  2363               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8171                           
  8172                           ; BSR set to: 0
  8173                           ;doprnt.c: 1261: if((int)val < 0) {
  8174  000AC4  AF67               	btfss	(sprintf@val+1)& (0+255),7,b
  8175  000AC6  D006               	goto	l1312
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;doprnt.c: 1262: flag |= 0x03;
  8179  000AC8  0E03               	movlw	3
  8180  000ACA  1360               	iorwf	sprintf@flag& (0+255),f,b
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;doprnt.c: 1263: val = -val;
  8184  000ACC  6D66               	negf	sprintf@val& (0+255),b
  8185  000ACE  1F67               	comf	(sprintf@val+1)& (0+255),f,b
  8186  000AD0  B0D8               	btfsc	status,0,c
  8187  000AD2  2B67               	incf	(sprintf@val+1)& (0+255),f,b
  8188  000AD4                     l1312:
  8189                           
  8190                           ; BSR set to: 0
  8191                           ;doprnt.c: 1264: }
  8192                           ;doprnt.c: 1266: }
  8193                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8194                           
  8195                           ; BSR set to: 0
  8196  000AD4  0E01               	movlw	1
  8197  000AD6  6F68               	movwf	sprintf@c& (0+255),b
  8198  000AD8                     l6786:
  8199                           
  8200                           ; BSR set to: 0
  8201  000AD8  0E05               	movlw	5
  8202  000ADA  1968               	xorwf	sprintf@c& (0+255),w,b
  8203  000ADC  B4D8               	btfsc	status,2,c
  8204  000ADE  D012               	goto	u7150
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;doprnt.c: 1306: if(val < dpowers[c])
  8208                           
  8209                           ; BSR set to: 0
  8210                           
  8211                           ; BSR set to: 0
  8212  000AE0  5168               	movf	sprintf@c& (0+255),w,b
  8213  000AE2  0D02               	mullw	2
  8214  000AE4  0EAD               	movlw	low _dpowers
  8215  000AE6  24F3               	addwf	prodl,w,c
  8216  000AE8  6EF6               	movwf	tblptrl,c
  8217  000AEA  0E7A               	movlw	high _dpowers
  8218  000AEC  20F4               	addwfc	prodh,w,c
  8219  000AEE  6EF7               	movwf	tblptrh,c
  8220  000AF0                     	if	0	;There are less than 3 active tblptr bytes
  8221  000AF0                     	endif
  8222  000AF0  0009               	tblrd		*+
  8223  000AF2  50F5               	movf	tablat,w,c
  8224  000AF4  5D66               	subwf	sprintf@val& (0+255),w,b
  8225  000AF6  0009               	tblrd		*+
  8226  000AF8  50F5               	movf	tablat,w,c
  8227  000AFA  5967               	subwfb	(sprintf@val+1)& (0+255),w,b
  8228  000AFC  A0D8               	btfss	status,0,c
  8229  000AFE  D002               	goto	u7150
  8230                           
  8231                           ; BSR set to: 0
  8232                           
  8233                           ; BSR set to: 0
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;doprnt.c: 1307: break;
  8237  000B00  2B68               	incf	sprintf@c& (0+255),f,b
  8238  000B02  D7EA               	goto	l6786
  8239  000B04                     u7150:
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;doprnt.c: 1422: {
  8243                           ;doprnt.c: 1438: if(flag & 0x03)
  8244                           
  8245                           ; BSR set to: 0
  8246  000B04  C060  F02A         	movff	sprintf@flag,??_sprintf
  8247  000B08  0E03               	movlw	3
  8248  000B0A  162A               	andwf	??_sprintf,f,c
  8249  000B0C  B4D8               	btfsc	status,2,c
  8250  000B0E  D008               	goto	l1316
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8254  000B10  C024  FFD9         	movff	sprintf@sp,fsr2l
  8255  000B14  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8256  000B18  0E2D               	movlw	45
  8257  000B1A  6EDF               	movwf	indf2,c
  8258                           
  8259                           ; BSR set to: 0
  8260  000B1C  4A24               	infsnz	sprintf@sp,f,c
  8261  000B1E  2A25               	incf	sprintf@sp+1,f,c
  8262  000B20                     l1316:
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;doprnt.c: 1469: }
  8266                           ;doprnt.c: 1472: prec = c;
  8267                           
  8268                           ; BSR set to: 0
  8269  000B20  C068  F061         	movff	sprintf@c,sprintf@prec
  8270                           
  8271                           ;doprnt.c: 1474: while(prec--) {
  8272  000B24  D02A               	goto	l1317
  8273  000B26                     
  8274                           ; BSR set to: 0
  8275                           ;doprnt.c: 1478: {
  8276                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8277                           
  8278                           ; BSR set to: 0
  8279  000B26  5161               	movf	sprintf@prec& (0+255),w,b
  8280  000B28  0D02               	mullw	2
  8281  000B2A  0EAD               	movlw	low _dpowers
  8282  000B2C  24F3               	addwf	prodl,w,c
  8283  000B2E  6EF6               	movwf	tblptrl,c
  8284  000B30  0E7A               	movlw	high _dpowers
  8285  000B32  20F4               	addwfc	prodh,w,c
  8286  000B34  6EF7               	movwf	tblptrh,c
  8287  000B36                     	if	0	;There are less than 3 active tblptr bytes
  8288  000B36                     	endif
  8289  000B36  0009               	tblrd		*+
  8290  000B38  CFF5 F01A          	movff	tablat,___lwdiv@divisor
  8291  000B3C  000A               	tblrd		*-
  8292  000B3E  CFF5 F01B          	movff	tablat,___lwdiv@divisor+1
  8293  000B42  C066  F018         	movff	sprintf@val,___lwdiv@dividend
  8294  000B46  C067  F019         	movff	sprintf@val+1,___lwdiv@dividend+1
  8295  000B4A  ECC1  F011         	call	___lwdiv	;wreg free
  8296  000B4E  C018  F01F         	movff	?___lwdiv,___lwmod@dividend
  8297  000B52  C019  F020         	movff	?___lwdiv+1,___lwmod@dividend+1
  8298  000B56  0E00               	movlw	0
  8299  000B58  6E22               	movwf	___lwmod@divisor+1,c
  8300  000B5A  0E0A               	movlw	10
  8301  000B5C  6E21               	movwf	___lwmod@divisor,c
  8302  000B5E  ECBF  F012         	call	___lwmod	;wreg free
  8303  000B62  501F               	movf	?___lwmod,w,c
  8304  000B64  0F30               	addlw	48
  8305  000B66  0100               	movlb	0	; () banked
  8306  000B68  6F68               	movwf	sprintf@c& (0+255),b
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;doprnt.c: 1523: }
  8310                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8311  000B6A  C024  FFD9         	movff	sprintf@sp,fsr2l
  8312  000B6E  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8313  000B72  C068  FFDF         	movff	sprintf@c,indf2
  8314                           
  8315                           ; BSR set to: 0
  8316  000B76  4A24               	infsnz	sprintf@sp,f,c
  8317  000B78  2A25               	incf	sprintf@sp+1,f,c
  8318  000B7A                     l1317:
  8319                           
  8320                           ; BSR set to: 0
  8321                           
  8322                           ; BSR set to: 0
  8323  000B7A  0761               	decf	sprintf@prec& (0+255),f,b
  8324  000B7C  2961               	incf	sprintf@prec& (0+255),w,b
  8325  000B7E  A4D8               	btfss	status,2,c
  8326  000B80  D7D2               	goto	l1318
  8327  000B82                     u7170:
  8328                           
  8329                           ; BSR set to: 0
  8330                           
  8331                           ; BSR set to: 0
  8332                           
  8333                           ; BSR set to: 0
  8334  000B82  C026  FFF6         	movff	sprintf@f,tblptrl
  8335  000B86  C027  FFF7         	movff	sprintf@f+1,tblptrh
  8336  000B8A  4A26               	infsnz	sprintf@f,f,c
  8337  000B8C  2A27               	incf	sprintf@f+1,f,c
  8338  000B8E                     	if	0	;tblptru may be non-zero
  8339  000B8E                     	endif
  8340  000B8E                     	if	0	;tblptru may be non-zero
  8341  000B8E                     	endif
  8342  000B8E  0008               	tblrd		*
  8343  000B90  CFF5 F068          	movff	tablat,sprintf@c
  8344  000B94  5168               	movf	sprintf@c& (0+255),w,b
  8345  000B96  A4D8               	btfss	status,2,c
  8346  000B98  D734               	goto	l1298
  8347  000B9A                     u7180:
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;doprnt.c: 1538: *sp = 0;
  8351                           
  8352                           ; BSR set to: 0
  8353                           
  8354                           ;doprnt.c: 1525: }
  8355                           ;doprnt.c: 1533: }
  8356                           ;doprnt.c: 1535: alldone:
  8357                           
  8358                           ; BSR set to: 0
  8359  000B9A  C024  FFD9         	movff	sprintf@sp,fsr2l
  8360  000B9E  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8361  000BA2  0E00               	movlw	0
  8362  000BA4  6EDF               	movwf	indf2,c
  8363  000BA6  0012               	return	
  8364  000BA8                     __end_of_sprintf:
  8365                           	opt stack 0
  8366                           tosu	equ	0xFFF
  8367                           tosh	equ	0xFFE
  8368                           tosl	equ	0xFFD
  8369                           pclath	equ	0xFFA
  8370                           tblptru	equ	0xFF8
  8371                           tblptrh	equ	0xFF7
  8372                           tblptrl	equ	0xFF6
  8373                           tablat	equ	0xFF5
  8374                           prodh	equ	0xFF4
  8375                           prodl	equ	0xFF3
  8376                           intcon	equ	0xFF2
  8377                           intcon2	equ	0xFF1
  8378                           postinc0	equ	0xFEE
  8379                           wreg	equ	0xFE8
  8380                           indf1	equ	0xFE7
  8381                           postdec1	equ	0xFE5
  8382                           fsr1h	equ	0xFE2
  8383                           fsr1l	equ	0xFE1
  8384                           indf2	equ	0xFDF
  8385                           postinc2	equ	0xFDE
  8386                           postdec2	equ	0xFDD
  8387                           fsr2h	equ	0xFDA
  8388                           fsr2l	equ	0xFD9
  8389                           status	equ	0xFD8
  8390                           
  8391 ;; *************** function ___lwmod *****************
  8392 ;; Defined at:
  8393 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;  dividend        2   30[COMRAM] unsigned int 
  8396 ;;  divisor         2   32[COMRAM] unsigned int 
  8397 ;; Auto vars:     Size  Location     Type
  8398 ;;  counter         1   34[COMRAM] unsigned char 
  8399 ;; Return value:  Size  Location     Type
  8400 ;;                  2   30[COMRAM] unsigned int 
  8401 ;; Registers used:
  8402 ;;		wreg, status,2, status,0
  8403 ;; Tracked objects:
  8404 ;;		On entry : 0/0
  8405 ;;		On exit  : 0/0
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8408 ;;      Params:         4       0       0       0       0       0       0
  8409 ;;      Locals:         1       0       0       0       0       0       0
  8410 ;;      Temps:          0       0       0       0       0       0       0
  8411 ;;      Totals:         5       0       0       0       0       0       0
  8412 ;;Total ram usage:        5 bytes
  8413 ;; Hardware stack levels used:    1
  8414 ;; Hardware stack levels required when called:    3
  8415 ;; This function calls:
  8416 ;;		Nothing
  8417 ;; This function is called by:
  8418 ;;		_sprintf
  8419 ;; This function uses a non-reentrant model
  8420 ;;
  8421                           
  8422                           	psect	text36
  8423  00257E                     __ptext36:
  8424                           	opt stack 0
  8425  00257E                     ___lwmod:
  8426                           	opt stack 25
  8427                           
  8428                           ; BSR set to: 0
  8429                           ;incstack = 0
  8430  00257E  5021               	movf	___lwmod@divisor,w,c
  8431  002580  1022               	iorwf	___lwmod@divisor+1,w,c
  8432  002582  B4D8               	btfsc	status,2,c
  8433  002584  D018               	goto	l1744
  8434  002586  0E01               	movlw	1
  8435  002588  6E23               	movwf	___lwmod@counter,c
  8436  00258A  D004               	goto	l1739
  8437  00258C  90D8               	bcf	status,0,c
  8438  00258E  3621               	rlcf	___lwmod@divisor,f,c
  8439  002590  3622               	rlcf	___lwmod@divisor+1,f,c
  8440  002592  2A23               	incf	___lwmod@counter,f,c
  8441  002594                     l1739:
  8442  002594  AE22               	btfss	___lwmod@divisor+1,7,c
  8443  002596  D7FA               	goto	l1740
  8444  002598                     u6990:
  8445  002598  5021               	movf	___lwmod@divisor,w,c
  8446  00259A  5C1F               	subwf	___lwmod@dividend,w,c
  8447  00259C  5022               	movf	___lwmod@divisor+1,w,c
  8448  00259E  5820               	subwfb	___lwmod@dividend+1,w,c
  8449  0025A0  A0D8               	btfss	status,0,c
  8450  0025A2  D004               	goto	l1743
  8451  0025A4  5021               	movf	___lwmod@divisor,w,c
  8452  0025A6  5E1F               	subwf	___lwmod@dividend,f,c
  8453  0025A8  5022               	movf	___lwmod@divisor+1,w,c
  8454  0025AA  5A20               	subwfb	___lwmod@dividend+1,f,c
  8455  0025AC                     l1743:
  8456  0025AC  90D8               	bcf	status,0,c
  8457  0025AE  3222               	rrcf	___lwmod@divisor+1,f,c
  8458  0025B0  3221               	rrcf	___lwmod@divisor,f,c
  8459  0025B2  2E23               	decfsz	___lwmod@counter,f,c
  8460  0025B4  D7F1               	goto	u6990
  8461  0025B6                     l1744:
  8462  0025B6  C01F  F01F         	movff	___lwmod@dividend,?___lwmod
  8463  0025BA  C020  F020         	movff	___lwmod@dividend+1,?___lwmod+1
  8464  0025BE  0012               	return		;funcret
  8465  0025C0                     __end_of___lwmod:
  8466                           	opt stack 0
  8467                           tosu	equ	0xFFF
  8468                           tosh	equ	0xFFE
  8469                           tosl	equ	0xFFD
  8470                           pclath	equ	0xFFA
  8471                           tblptru	equ	0xFF8
  8472                           tblptrh	equ	0xFF7
  8473                           tblptrl	equ	0xFF6
  8474                           tablat	equ	0xFF5
  8475                           prodh	equ	0xFF4
  8476                           prodl	equ	0xFF3
  8477                           intcon	equ	0xFF2
  8478                           intcon2	equ	0xFF1
  8479                           postinc0	equ	0xFEE
  8480                           wreg	equ	0xFE8
  8481                           indf1	equ	0xFE7
  8482                           postdec1	equ	0xFE5
  8483                           fsr1h	equ	0xFE2
  8484                           fsr1l	equ	0xFE1
  8485                           indf2	equ	0xFDF
  8486                           postinc2	equ	0xFDE
  8487                           postdec2	equ	0xFDD
  8488                           fsr2h	equ	0xFDA
  8489                           fsr2l	equ	0xFD9
  8490                           status	equ	0xFD8
  8491                           
  8492 ;; *************** function ___lwdiv *****************
  8493 ;; Defined at:
  8494 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  dividend        2   23[COMRAM] unsigned int 
  8497 ;;  divisor         2   25[COMRAM] unsigned int 
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;  quotient        2   28[COMRAM] unsigned int 
  8500 ;;  counter         1   27[COMRAM] unsigned char 
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  2   23[COMRAM] unsigned int 
  8503 ;; Registers used:
  8504 ;;		wreg, status,2, status,0
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8510 ;;      Params:         4       0       0       0       0       0       0
  8511 ;;      Locals:         3       0       0       0       0       0       0
  8512 ;;      Temps:          0       0       0       0       0       0       0
  8513 ;;      Totals:         7       0       0       0       0       0       0
  8514 ;;Total ram usage:        7 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; Hardware stack levels required when called:    3
  8517 ;; This function calls:
  8518 ;;		Nothing
  8519 ;; This function is called by:
  8520 ;;		_sprintf
  8521 ;; This function uses a non-reentrant model
  8522 ;;
  8523                           
  8524                           	psect	text37
  8525  002382                     __ptext37:
  8526                           	opt stack 0
  8527  002382                     ___lwdiv:
  8528                           	opt stack 25
  8529                           
  8530                           ;incstack = 0
  8531  002382  0E00               	movlw	0
  8532  002384  6E1E               	movwf	___lwdiv@quotient+1,c
  8533  002386  0E00               	movlw	0
  8534  002388  6E1D               	movwf	___lwdiv@quotient,c
  8535  00238A  501A               	movf	___lwdiv@divisor,w,c
  8536  00238C  101B               	iorwf	___lwdiv@divisor+1,w,c
  8537  00238E  B4D8               	btfsc	status,2,c
  8538  002390  D01C               	goto	l1734
  8539  002392  0E01               	movlw	1
  8540  002394  6E1C               	movwf	___lwdiv@counter,c
  8541  002396  D004               	goto	l1729
  8542  002398  90D8               	bcf	status,0,c
  8543  00239A  361A               	rlcf	___lwdiv@divisor,f,c
  8544  00239C  361B               	rlcf	___lwdiv@divisor+1,f,c
  8545  00239E  2A1C               	incf	___lwdiv@counter,f,c
  8546  0023A0                     l1729:
  8547  0023A0  AE1B               	btfss	___lwdiv@divisor+1,7,c
  8548  0023A2  D7FA               	goto	l1730
  8549  0023A4                     u6960:
  8550  0023A4  90D8               	bcf	status,0,c
  8551  0023A6  361D               	rlcf	___lwdiv@quotient,f,c
  8552  0023A8  361E               	rlcf	___lwdiv@quotient+1,f,c
  8553  0023AA  501A               	movf	___lwdiv@divisor,w,c
  8554  0023AC  5C18               	subwf	___lwdiv@dividend,w,c
  8555  0023AE  501B               	movf	___lwdiv@divisor+1,w,c
  8556  0023B0  5819               	subwfb	___lwdiv@dividend+1,w,c
  8557  0023B2  A0D8               	btfss	status,0,c
  8558  0023B4  D005               	goto	l1733
  8559  0023B6  501A               	movf	___lwdiv@divisor,w,c
  8560  0023B8  5E18               	subwf	___lwdiv@dividend,f,c
  8561  0023BA  501B               	movf	___lwdiv@divisor+1,w,c
  8562  0023BC  5A19               	subwfb	___lwdiv@dividend+1,f,c
  8563  0023BE  801D               	bsf	___lwdiv@quotient,0,c
  8564  0023C0                     l1733:
  8565  0023C0  90D8               	bcf	status,0,c
  8566  0023C2  321B               	rrcf	___lwdiv@divisor+1,f,c
  8567  0023C4  321A               	rrcf	___lwdiv@divisor,f,c
  8568  0023C6  2E1C               	decfsz	___lwdiv@counter,f,c
  8569  0023C8  D7ED               	goto	u6960
  8570  0023CA                     l1734:
  8571  0023CA  C01D  F018         	movff	___lwdiv@quotient,?___lwdiv
  8572  0023CE  C01E  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8573  0023D2  0012               	return		;funcret
  8574  0023D4                     __end_of___lwdiv:
  8575                           	opt stack 0
  8576                           tosu	equ	0xFFF
  8577                           tosh	equ	0xFFE
  8578                           tosl	equ	0xFFD
  8579                           pclath	equ	0xFFA
  8580                           tblptru	equ	0xFF8
  8581                           tblptrh	equ	0xFF7
  8582                           tblptrl	equ	0xFF6
  8583                           tablat	equ	0xFF5
  8584                           prodh	equ	0xFF4
  8585                           prodl	equ	0xFF3
  8586                           intcon	equ	0xFF2
  8587                           intcon2	equ	0xFF1
  8588                           postinc0	equ	0xFEE
  8589                           wreg	equ	0xFE8
  8590                           indf1	equ	0xFE7
  8591                           postdec1	equ	0xFE5
  8592                           fsr1h	equ	0xFE2
  8593                           fsr1l	equ	0xFE1
  8594                           indf2	equ	0xFDF
  8595                           postinc2	equ	0xFDE
  8596                           postdec2	equ	0xFDD
  8597                           fsr2h	equ	0xFDA
  8598                           fsr2l	equ	0xFD9
  8599                           status	equ	0xFD8
  8600                           
  8601 ;; *************** function _pow *****************
  8602 ;; Defined at:
  8603 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;  x               3   58[BANK0 ] unsigned int 
  8606 ;;  y               3   61[BANK0 ] unsigned int 
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;  yi              4   71[BANK0 ] unsigned long 
  8609 ;;  sign            1   70[BANK0 ] unsigned char 
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  3   58[BANK0 ] unsigned char 
  8612 ;; Registers used:
  8613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8619 ;;      Params:         0       6       0       0       0       0       0
  8620 ;;      Locals:         0      11       0       0       0       0       0
  8621 ;;      Temps:          0       0       0       0       0       0       0
  8622 ;;      Totals:         0      17       0       0       0       0       0
  8623 ;;Total ram usage:       17 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    7
  8626 ;; This function calls:
  8627 ;;		___ftge
  8628 ;;		___ftmul
  8629 ;;		___ftneg
  8630 ;;		___fttol
  8631 ;;		___lltoft
  8632 ;;		_exp
  8633 ;;		_log
  8634 ;; This function is called by:
  8635 ;;		_SampleSingleChannel
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           	psect	text38
  8640  000ED8                     __ptext38:
  8641                           	opt stack 0
  8642  000ED8                     _pow:
  8643                           	opt stack 22
  8644                           
  8645                           ;incstack = 0
  8646  000ED8  0E00               	movlw	0
  8647  000EDA  0100               	movlb	0	; () banked
  8648  000EDC  6FA6               	movwf	pow@sign& (0+255),b
  8649                           
  8650                           ; BSR set to: 0
  8651  000EDE  519A               	movf	pow@x& (0+255),w,b
  8652  000EE0  119B               	iorwf	(pow@x+1)& (0+255),w,b
  8653  000EE2  119C               	iorwf	(pow@x+2)& (0+255),w,b
  8654  000EE4  A4D8               	btfss	status,2,c
  8655  000EE6  D01D               	goto	l1765
  8656                           
  8657                           ; BSR set to: 0
  8658  000EE8  0E00               	movlw	0
  8659  000EEA  6E18               	movwf	___ftge@ff1,c
  8660  000EEC  0E00               	movlw	0
  8661  000EEE  6E19               	movwf	___ftge@ff1+1,c
  8662  000EF0  0E00               	movlw	0
  8663  000EF2  6E1A               	movwf	___ftge@ff1+2,c
  8664  000EF4  C09D  F01B         	movff	pow@y,___ftge@ff2
  8665  000EF8  C09E  F01C         	movff	pow@y+1,___ftge@ff2+1
  8666  000EFC  C09F  F01D         	movff	pow@y+2,___ftge@ff2+2
  8667  000F00  EC8D  F00E         	call	___ftge	;wreg free
  8668  000F04  A0D8               	btfss	status,0,c
  8669  000F06  D005               	goto	l1766
  8670  000F08  0E00               	movlw	0
  8671  000F0A  0100               	movlb	0	; () banked
  8672  000F0C  6FB2               	movwf	(_errno+1)& (0+255),b
  8673  000F0E  0E21               	movlw	33
  8674  000F10  6FB1               	movwf	_errno& (0+255),b
  8675  000F12                     l1766:
  8676  000F12  0E00               	movlw	0
  8677  000F14  0100               	movlb	0	; () banked
  8678  000F16  6F9A               	movwf	?_pow& (0+255),b
  8679  000F18  0E00               	movlw	0
  8680  000F1A  6F9B               	movwf	(?_pow+1)& (0+255),b
  8681  000F1C  0E00               	movlw	0
  8682  000F1E  6F9C               	movwf	(?_pow+2)& (0+255),b
  8683                           
  8684                           ; BSR set to: 0
  8685  000F20  0012               	return	
  8686  000F22                     l1765:
  8687                           
  8688                           ; BSR set to: 0
  8689                           
  8690                           ; BSR set to: 0
  8691  000F22  519D               	movf	pow@y& (0+255),w,b
  8692  000F24  119E               	iorwf	(pow@y+1)& (0+255),w,b
  8693  000F26  119F               	iorwf	(pow@y+2)& (0+255),w,b
  8694  000F28  A4D8               	btfss	status,2,c
  8695  000F2A  D007               	goto	l1768
  8696                           
  8697                           ; BSR set to: 0
  8698  000F2C  0E00               	movlw	0
  8699  000F2E  6F9A               	movwf	?_pow& (0+255),b
  8700  000F30  0E80               	movlw	128
  8701  000F32  6F9B               	movwf	(?_pow+1)& (0+255),b
  8702  000F34  0E3F               	movlw	63
  8703  000F36  6F9C               	movwf	(?_pow+2)& (0+255),b
  8704                           
  8705                           ; BSR set to: 0
  8706  000F38  0012               	return	
  8707  000F3A                     l1768:
  8708                           
  8709                           ; BSR set to: 0
  8710                           
  8711                           ; BSR set to: 0
  8712  000F3A  AF9C               	btfss	(pow@x+2)& (0+255),7,b
  8713  000F3C  D041               	goto	l1769
  8714                           
  8715                           ; BSR set to: 0
  8716  000F3E  C09D  F072         	movff	pow@y,___fttol@f1
  8717  000F42  C09E  F073         	movff	pow@y+1,___fttol@f1+1
  8718  000F46  C09F  F074         	movff	pow@y+2,___fttol@f1+2
  8719  000F4A  ECE8  F009         	call	___fttol	;wreg free
  8720  000F4E  C072  F0A7         	movff	?___fttol,pow@yi
  8721  000F52  C073  F0A8         	movff	?___fttol+1,pow@yi+1
  8722  000F56  C074  F0A9         	movff	?___fttol+2,pow@yi+2
  8723  000F5A  C075  F0AA         	movff	?___fttol+3,pow@yi+3
  8724  000F5E  C0A7  F020         	movff	pow@yi,___lltoft@c
  8725  000F62  C0A8  F021         	movff	pow@yi+1,___lltoft@c+1
  8726  000F66  C0A9  F022         	movff	pow@yi+2,___lltoft@c+2
  8727  000F6A  C0AA  F023         	movff	pow@yi+3,___lltoft@c+3
  8728  000F6E  EC8C  F010         	call	___lltoft	;wreg free
  8729  000F72  0100               	movlb	0	; () banked
  8730  000F74  519D               	movf	pow@y& (0+255),w,b
  8731  000F76  1820               	xorwf	?___lltoft,w,c
  8732  000F78  E107               	bnz	u7680
  8733  000F7A  519E               	movf	(pow@y+1)& (0+255),w,b
  8734  000F7C  1821               	xorwf	?___lltoft+1,w,c
  8735  000F7E  E104               	bnz	u7680
  8736  000F80  519F               	movf	(pow@y+2)& (0+255),w,b
  8737  000F82  1822               	xorwf	?___lltoft+2,w,c
  8738  000F84  B4D8               	btfsc	status,2,c
  8739  000F86  D00B               	goto	l1770
  8740  000F88                     u7680:
  8741                           
  8742                           ; BSR set to: 0
  8743  000F88  0E00               	movlw	0
  8744  000F8A  6FB2               	movwf	(_errno+1)& (0+255),b
  8745  000F8C  0E21               	movlw	33
  8746  000F8E  6FB1               	movwf	_errno& (0+255),b
  8747  000F90  0E00               	movlw	0
  8748  000F92  6F9A               	movwf	?_pow& (0+255),b
  8749  000F94  0E00               	movlw	0
  8750  000F96  6F9B               	movwf	(?_pow+1)& (0+255),b
  8751  000F98  0E00               	movlw	0
  8752  000F9A  6F9C               	movwf	(?_pow+2)& (0+255),b
  8753                           
  8754                           ; BSR set to: 0
  8755  000F9C  0012               	return	
  8756  000F9E                     l1770:
  8757                           
  8758                           ; BSR set to: 0
  8759                           
  8760                           ; BSR set to: 0
  8761  000F9E  51A7               	movf	pow@yi& (0+255),w,b
  8762  000FA0  0B01               	andlw	1
  8763  000FA2  6FA6               	movwf	pow@sign& (0+255),b
  8764                           
  8765                           ; BSR set to: 0
  8766  000FA4  C09A  F018         	movff	pow@x,___ftneg@f1
  8767  000FA8  C09B  F019         	movff	pow@x+1,___ftneg@f1+1
  8768  000FAC  C09C  F01A         	movff	pow@x+2,___ftneg@f1+2
  8769  000FB0  EC9A  F014         	call	___ftneg	;wreg free
  8770  000FB4  C018  F09A         	movff	?___ftneg,pow@x
  8771  000FB8  C019  F09B         	movff	?___ftneg+1,pow@x+1
  8772  000FBC  C01A  F09C         	movff	?___ftneg+2,pow@x+2
  8773  000FC0                     l1769:
  8774  000FC0  C09A  F088         	movff	pow@x,log@x
  8775  000FC4  C09B  F089         	movff	pow@x+1,log@x+1
  8776  000FC8  C09C  F08A         	movff	pow@x+2,log@x+2
  8777  000FCC  ECCB  F008         	call	_log	;wreg free
  8778  000FD0  C088  F0A0         	movff	?_log,_pow$2940
  8779  000FD4  C089  F0A1         	movff	?_log+1,_pow$2940+1
  8780  000FD8  C08A  F0A2         	movff	?_log+2,_pow$2940+2
  8781  000FDC  C0A0  F066         	movff	_pow$2940,___ftmul@f1
  8782  000FE0  C0A1  F067         	movff	_pow$2940+1,___ftmul@f1+1
  8783  000FE4  C0A2  F068         	movff	_pow$2940+2,___ftmul@f1+2
  8784  000FE8  C09D  F069         	movff	pow@y,___ftmul@f2
  8785  000FEC  C09E  F06A         	movff	pow@y+1,___ftmul@f2+1
  8786  000FF0  C09F  F06B         	movff	pow@y+2,___ftmul@f2+2
  8787  000FF4  EC64  F00A         	call	___ftmul	;wreg free
  8788  000FF8  C066  F0A3         	movff	?___ftmul,_pow$2941
  8789  000FFC  C067  F0A4         	movff	?___ftmul+1,_pow$2941+1
  8790  001000  C068  F0A5         	movff	?___ftmul+2,_pow$2941+2
  8791  001004  C0A3  F091         	movff	_pow$2941,exp@x
  8792  001008  C0A4  F092         	movff	_pow$2941+1,exp@x+1
  8793  00100C  C0A5  F093         	movff	_pow$2941+2,exp@x+2
  8794  001010  EC17  F003         	call	_exp	;wreg free
  8795  001014  C091  F09A         	movff	?_exp,pow@x
  8796  001018  C092  F09B         	movff	?_exp+1,pow@x+1
  8797  00101C  C093  F09C         	movff	?_exp+2,pow@x+2
  8798  001020  0100               	movlb	0	; () banked
  8799  001022  51A6               	movf	pow@sign& (0+255),w,b
  8800  001024  B4D8               	btfsc	status,2,c
  8801  001026  D00F               	goto	l1771
  8802                           
  8803                           ; BSR set to: 0
  8804  001028  C09A  F018         	movff	pow@x,___ftneg@f1
  8805  00102C  C09B  F019         	movff	pow@x+1,___ftneg@f1+1
  8806  001030  C09C  F01A         	movff	pow@x+2,___ftneg@f1+2
  8807  001034  EC9A  F014         	call	___ftneg	;wreg free
  8808  001038  C018  F09A         	movff	?___ftneg,?_pow
  8809  00103C  C019  F09B         	movff	?___ftneg+1,?_pow+1
  8810  001040  C01A  F09C         	movff	?___ftneg+2,?_pow+2
  8811  001044  0012               	return	
  8812  001046                     l1771:
  8813                           
  8814                           ; BSR set to: 0
  8815  001046  C09A  F09A         	movff	pow@x,?_pow
  8816  00104A  C09B  F09B         	movff	pow@x+1,?_pow+1
  8817  00104E  C09C  F09C         	movff	pow@x+2,?_pow+2
  8818  001052  0012               	return		;funcret
  8819  001054                     __end_of_pow:
  8820                           	opt stack 0
  8821                           tosu	equ	0xFFF
  8822                           tosh	equ	0xFFE
  8823                           tosl	equ	0xFFD
  8824                           pclath	equ	0xFFA
  8825                           tblptru	equ	0xFF8
  8826                           tblptrh	equ	0xFF7
  8827                           tblptrl	equ	0xFF6
  8828                           tablat	equ	0xFF5
  8829                           prodh	equ	0xFF4
  8830                           prodl	equ	0xFF3
  8831                           intcon	equ	0xFF2
  8832                           intcon2	equ	0xFF1
  8833                           postinc0	equ	0xFEE
  8834                           wreg	equ	0xFE8
  8835                           indf1	equ	0xFE7
  8836                           postdec1	equ	0xFE5
  8837                           fsr1h	equ	0xFE2
  8838                           fsr1l	equ	0xFE1
  8839                           indf2	equ	0xFDF
  8840                           postinc2	equ	0xFDE
  8841                           postdec2	equ	0xFDD
  8842                           fsr2h	equ	0xFDA
  8843                           fsr2l	equ	0xFD9
  8844                           status	equ	0xFD8
  8845                           
  8846 ;; *************** function _log *****************
  8847 ;; Defined at:
  8848 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;  x               3   40[BANK0 ] unsigned char 
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;  exponent        2   43[BANK0 ] int 
  8853 ;; Return value:  Size  Location     Type
  8854 ;;                  3   40[BANK0 ] int 
  8855 ;; Registers used:
  8856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8862 ;;      Params:         0       3       0       0       0       0       0
  8863 ;;      Locals:         0       2       0       0       0       0       0
  8864 ;;      Temps:          0       0       0       0       0       0       0
  8865 ;;      Totals:         0       5       0       0       0       0       0
  8866 ;;Total ram usage:        5 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:    6
  8869 ;; This function calls:
  8870 ;;		___awtoft
  8871 ;;		___ftadd
  8872 ;;		___ftmul
  8873 ;;		_eval_poly
  8874 ;;		_frexp
  8875 ;; This function is called by:
  8876 ;;		_pow
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           	psect	text39
  8881  001196                     __ptext39:
  8882                           	opt stack 0
  8883  001196                     _log:
  8884                           	opt stack 22
  8885                           
  8886                           ;incstack = 0
  8887  001196  0100               	movlb	0	; () banked
  8888  001198  AF8A               	btfss	(log@x+2)& (0+255),7,b
  8889  00119A  D00B               	goto	l2027
  8890                           
  8891                           ; BSR set to: 0
  8892  00119C  0E00               	movlw	0
  8893  00119E  6FB2               	movwf	(_errno+1)& (0+255),b
  8894  0011A0  0E21               	movlw	33
  8895  0011A2  6FB1               	movwf	_errno& (0+255),b
  8896  0011A4  0E00               	movlw	0
  8897  0011A6  6F88               	movwf	?_log& (0+255),b
  8898  0011A8  0E00               	movlw	0
  8899  0011AA  6F89               	movwf	(?_log+1)& (0+255),b
  8900  0011AC  0E00               	movlw	0
  8901  0011AE  6F8A               	movwf	(?_log+2)& (0+255),b
  8902                           
  8903                           ; BSR set to: 0
  8904  0011B0  0012               	return	
  8905  0011B2                     l2027:
  8906                           
  8907                           ; BSR set to: 0
  8908                           
  8909                           ; BSR set to: 0
  8910  0011B2  5188               	movf	log@x& (0+255),w,b
  8911  0011B4  1189               	iorwf	(log@x+1)& (0+255),w,b
  8912  0011B6  118A               	iorwf	(log@x+2)& (0+255),w,b
  8913  0011B8  A4D8               	btfss	status,2,c
  8914  0011BA  D00B               	goto	l2029
  8915                           
  8916                           ; BSR set to: 0
  8917  0011BC  0E00               	movlw	0
  8918  0011BE  6FB2               	movwf	(_errno+1)& (0+255),b
  8919  0011C0  0E22               	movlw	34
  8920  0011C2  6FB1               	movwf	_errno& (0+255),b
  8921  0011C4  0E00               	movlw	0
  8922  0011C6  6F88               	movwf	?_log& (0+255),b
  8923  0011C8  0E00               	movlw	0
  8924  0011CA  6F89               	movwf	(?_log+1)& (0+255),b
  8925  0011CC  0E00               	movlw	0
  8926  0011CE  6F8A               	movwf	(?_log+2)& (0+255),b
  8927                           
  8928                           ; BSR set to: 0
  8929  0011D0  0012               	return	
  8930  0011D2                     l2029:
  8931                           
  8932                           ; BSR set to: 0
  8933                           
  8934                           ; BSR set to: 0
  8935  0011D2  0E00               	movlw	0
  8936  0011D4  6F69               	movwf	___ftmul@f2& (0+255),b
  8937  0011D6  0E00               	movlw	0
  8938  0011D8  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  8939  0011DA  0E40               	movlw	64
  8940  0011DC  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  8941  0011DE  0E8B               	movlw	low log@exponent
  8942  0011E0  6E1B               	movwf	frexp@eptr,c
  8943  0011E2  0E00               	movlw	high log@exponent
  8944  0011E4  6E1C               	movwf	frexp@eptr+1,c
  8945  0011E6  C088  F018         	movff	log@x,frexp@value
  8946  0011EA  C089  F019         	movff	log@x+1,frexp@value+1
  8947  0011EE  C08A  F01A         	movff	log@x+2,frexp@value+2
  8948  0011F2  EC45  F00E         	call	_frexp	;wreg free
  8949  0011F6  C018  F066         	movff	?_frexp,___ftmul@f1
  8950  0011FA  C019  F067         	movff	?_frexp+1,___ftmul@f1+1
  8951  0011FE  C01A  F068         	movff	?_frexp+2,___ftmul@f1+2
  8952  001202  EC64  F00A         	call	___ftmul	;wreg free
  8953  001206  C066  F072         	movff	?___ftmul,___ftadd@f1
  8954  00120A  C067  F073         	movff	?___ftmul+1,___ftadd@f1+1
  8955  00120E  C068  F074         	movff	?___ftmul+2,___ftadd@f1+2
  8956  001212  0E00               	movlw	0
  8957  001214  0100               	movlb	0	; () banked
  8958  001216  6F75               	movwf	___ftadd@f2& (0+255),b
  8959  001218  0E80               	movlw	128
  8960  00121A  6F76               	movwf	(___ftadd@f2+1)& (0+255),b
  8961  00121C  0EBF               	movlw	191
  8962  00121E  6F77               	movwf	(___ftadd@f2+2)& (0+255),b
  8963  001220  ECD4  F005         	call	___ftadd	;wreg free
  8964  001224  C072  F088         	movff	?___ftadd,log@x
  8965  001228  C073  F089         	movff	?___ftadd+1,log@x+1
  8966  00122C  C074  F08A         	movff	?___ftadd+2,log@x+2
  8967  001230  0100               	movlb	0	; () banked
  8968  001232  078B               	decf	log@exponent& (0+255),f,b
  8969  001234  A0D8               	btfss	status,0,c
  8970  001236  078C               	decf	(log@exponent+1)& (0+255),f,b
  8971                           
  8972                           ; BSR set to: 0
  8973  001238  C088  F07E         	movff	log@x,eval_poly@x
  8974  00123C  C089  F07F         	movff	log@x+1,eval_poly@x+1
  8975  001240  C08A  F080         	movff	log@x+2,eval_poly@x+2
  8976  001244  0ED9               	movlw	low log@coeff
  8977  001246  6F81               	movwf	eval_poly@d& (0+255),b
  8978  001248  0E7A               	movlw	high log@coeff
  8979  00124A  6F82               	movwf	(eval_poly@d+1)& (0+255),b
  8980  00124C  0E00               	movlw	0
  8981  00124E  6F84               	movwf	(eval_poly@n+1)& (0+255),b
  8982  001250  0E08               	movlw	8
  8983  001252  6F83               	movwf	eval_poly@n& (0+255),b
  8984  001254  EC31  F00C         	call	_eval_poly	;wreg free
  8985  001258  C07E  F088         	movff	?_eval_poly,log@x
  8986  00125C  C07F  F089         	movff	?_eval_poly+1,log@x+1
  8987  001260  C080  F08A         	movff	?_eval_poly+2,log@x+2
  8988  001264  0E72               	movlw	114
  8989  001266  0100               	movlb	0	; () banked
  8990  001268  6F69               	movwf	___ftmul@f2& (0+255),b
  8991  00126A  0E31               	movlw	49
  8992  00126C  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  8993  00126E  0E3F               	movlw	63
  8994  001270  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  8995  001272  C08B  F020         	movff	log@exponent,___awtoft@c
  8996  001276  C08C  F021         	movff	log@exponent+1,___awtoft@c+1
  8997  00127A  EC9A  F013         	call	___awtoft	;wreg free
  8998  00127E  C020  F066         	movff	?___awtoft,___ftmul@f1
  8999  001282  C021  F067         	movff	?___awtoft+1,___ftmul@f1+1
  9000  001286  C022  F068         	movff	?___awtoft+2,___ftmul@f1+2
  9001  00128A  EC64  F00A         	call	___ftmul	;wreg free
  9002  00128E  C066  F072         	movff	?___ftmul,___ftadd@f1
  9003  001292  C067  F073         	movff	?___ftmul+1,___ftadd@f1+1
  9004  001296  C068  F074         	movff	?___ftmul+2,___ftadd@f1+2
  9005  00129A  C088  F075         	movff	log@x,___ftadd@f2
  9006  00129E  C089  F076         	movff	log@x+1,___ftadd@f2+1
  9007  0012A2  C08A  F077         	movff	log@x+2,___ftadd@f2+2
  9008  0012A6  ECD4  F005         	call	___ftadd	;wreg free
  9009  0012AA  C072  F088         	movff	?___ftadd,?_log
  9010  0012AE  C073  F089         	movff	?___ftadd+1,?_log+1
  9011  0012B2  C074  F08A         	movff	?___ftadd+2,?_log+2
  9012  0012B6  0012               	return	
  9013  0012B8                     __end_of_log:
  9014                           	opt stack 0
  9015                           tosu	equ	0xFFF
  9016                           tosh	equ	0xFFE
  9017                           tosl	equ	0xFFD
  9018                           pclath	equ	0xFFA
  9019                           tblptru	equ	0xFF8
  9020                           tblptrh	equ	0xFF7
  9021                           tblptrl	equ	0xFF6
  9022                           tablat	equ	0xFF5
  9023                           prodh	equ	0xFF4
  9024                           prodl	equ	0xFF3
  9025                           intcon	equ	0xFF2
  9026                           intcon2	equ	0xFF1
  9027                           postinc0	equ	0xFEE
  9028                           wreg	equ	0xFE8
  9029                           indf1	equ	0xFE7
  9030                           postdec1	equ	0xFE5
  9031                           fsr1h	equ	0xFE2
  9032                           fsr1l	equ	0xFE1
  9033                           indf2	equ	0xFDF
  9034                           postinc2	equ	0xFDE
  9035                           postdec2	equ	0xFDD
  9036                           fsr2h	equ	0xFDA
  9037                           fsr2l	equ	0xFD9
  9038                           status	equ	0xFD8
  9039                           
  9040 ;; *************** function _exp *****************
  9041 ;; Defined at:
  9042 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;  x               3   49[BANK0 ] int 
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;  exponent        2   55[BANK0 ] int 
  9047 ;;  sign            1   57[BANK0 ] unsigned char 
  9048 ;; Return value:  Size  Location     Type
  9049 ;;                  3   49[BANK0 ] unsigned char 
  9050 ;; Registers used:
  9051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9052 ;; Tracked objects:
  9053 ;;		On entry : 0/0
  9054 ;;		On exit  : 0/0
  9055 ;;		Unchanged: 0/0
  9056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9057 ;;      Params:         0       3       0       0       0       0       0
  9058 ;;      Locals:         0       6       0       0       0       0       0
  9059 ;;      Temps:          0       0       0       0       0       0       0
  9060 ;;      Totals:         0       9       0       0       0       0       0
  9061 ;;Total ram usage:        9 bytes
  9062 ;; Hardware stack levels used:    1
  9063 ;; Hardware stack levels required when called:    6
  9064 ;; This function calls:
  9065 ;;		___awtoft
  9066 ;;		___ftdiv
  9067 ;;		___ftge
  9068 ;;		___ftmul
  9069 ;;		___ftneg
  9070 ;;		___ftsub
  9071 ;;		___fttol
  9072 ;;		_eval_poly
  9073 ;;		_floor
  9074 ;;		_ldexp
  9075 ;; This function is called by:
  9076 ;;		_pow
  9077 ;; This function uses a non-reentrant model
  9078 ;;
  9079                           
  9080                           	psect	text40
  9081  00062E                     __ptext40:
  9082                           	opt stack 0
  9083  00062E                     _exp:
  9084                           	opt stack 22
  9085                           
  9086                           ;incstack = 0
  9087  00062E  0100               	movlb	0	; () banked
  9088  000630  5191               	movf	exp@x& (0+255),w,b
  9089  000632  1192               	iorwf	(exp@x+1)& (0+255),w,b
  9090  000634  1193               	iorwf	(exp@x+2)& (0+255),w,b
  9091  000636  A4D8               	btfss	status,2,c
  9092  000638  D007               	goto	l1963
  9093                           
  9094                           ; BSR set to: 0
  9095  00063A  0E00               	movlw	0
  9096  00063C  6F91               	movwf	?_exp& (0+255),b
  9097  00063E  0E80               	movlw	128
  9098  000640  6F92               	movwf	(?_exp+1)& (0+255),b
  9099  000642  0E3F               	movlw	63
  9100  000644  6F93               	movwf	(?_exp+2)& (0+255),b
  9101                           
  9102                           ; BSR set to: 0
  9103  000646  0012               	return	
  9104  000648                     l1963:
  9105                           
  9106                           ; BSR set to: 0
  9107                           
  9108                           ; BSR set to: 0
  9109  000648  0E72               	movlw	114
  9110  00064A  6E18               	movwf	___ftge@ff1,c
  9111  00064C  0E31               	movlw	49
  9112  00064E  6E19               	movwf	___ftge@ff1+1,c
  9113  000650  0E44               	movlw	68
  9114  000652  6E1A               	movwf	___ftge@ff1+2,c
  9115  000654  C091  F01B         	movff	exp@x,___ftge@ff2
  9116  000658  C092  F01C         	movff	exp@x+1,___ftge@ff2+1
  9117  00065C  C093  F01D         	movff	exp@x+2,___ftge@ff2+2
  9118  000660  EC8D  F00E         	call	___ftge	;wreg free
  9119  000664  B0D8               	btfsc	status,0,c
  9120  000666  D00C               	goto	l1965
  9121  000668  0E00               	movlw	0
  9122  00066A  0100               	movlb	0	; () banked
  9123  00066C  6FB2               	movwf	(_errno+1)& (0+255),b
  9124  00066E  0E22               	movlw	34
  9125  000670  6FB1               	movwf	_errno& (0+255),b
  9126  000672  0EFF               	movlw	255
  9127  000674  6F91               	movwf	?_exp& (0+255),b
  9128  000676  0E7F               	movlw	127
  9129  000678  6F92               	movwf	(?_exp+1)& (0+255),b
  9130  00067A  0E7F               	movlw	127
  9131  00067C  6F93               	movwf	(?_exp+2)& (0+255),b
  9132                           
  9133                           ; BSR set to: 0
  9134  00067E  0012               	return	
  9135  000680                     l1965:
  9136                           
  9137                           ; BSR set to: 0
  9138  000680  C091  F018         	movff	exp@x,___ftge@ff1
  9139  000684  C092  F019         	movff	exp@x+1,___ftge@ff1+1
  9140  000688  C093  F01A         	movff	exp@x+2,___ftge@ff1+2
  9141  00068C  0E49               	movlw	73
  9142  00068E  6E1B               	movwf	___ftge@ff2,c
  9143  000690  0E3A               	movlw	58
  9144  000692  6E1C               	movwf	___ftge@ff2+1,c
  9145  000694  0EC4               	movlw	196
  9146  000696  6E1D               	movwf	___ftge@ff2+2,c
  9147  000698  EC8D  F00E         	call	___ftge	;wreg free
  9148  00069C  B0D8               	btfsc	status,0,c
  9149  00069E  D00C               	goto	l1966
  9150  0006A0  0E00               	movlw	0
  9151  0006A2  0100               	movlb	0	; () banked
  9152  0006A4  6FB2               	movwf	(_errno+1)& (0+255),b
  9153  0006A6  0E22               	movlw	34
  9154  0006A8  6FB1               	movwf	_errno& (0+255),b
  9155  0006AA  0E00               	movlw	0
  9156  0006AC  6F91               	movwf	?_exp& (0+255),b
  9157  0006AE  0E00               	movlw	0
  9158  0006B0  6F92               	movwf	(?_exp+1)& (0+255),b
  9159  0006B2  0E00               	movlw	0
  9160  0006B4  6F93               	movwf	(?_exp+2)& (0+255),b
  9161                           
  9162                           ; BSR set to: 0
  9163  0006B6  0012               	return	
  9164  0006B8                     l1966:
  9165                           
  9166                           ; BSR set to: 0
  9167  0006B8  0100               	movlb	0	; () banked
  9168  0006BA  AF93               	btfss	(exp@x+2)& (0+255),7,b
  9169  0006BC  D002               	goto	u7580
  9170  0006BE  0E01               	movlw	1
  9171  0006C0  D001               	goto	u7590
  9172  0006C2                     u7580:
  9173  0006C2  0E00               	movlw	0
  9174  0006C4                     u7590:
  9175  0006C4  6F99               	movwf	exp@sign& (0+255),b
  9176                           
  9177                           ; BSR set to: 0
  9178  0006C6  5199               	movf	exp@sign& (0+255),w,b
  9179  0006C8  B4D8               	btfsc	status,2,c
  9180  0006CA  D00E               	goto	l1967
  9181                           
  9182                           ; BSR set to: 0
  9183  0006CC  C091  F018         	movff	exp@x,___ftneg@f1
  9184  0006D0  C092  F019         	movff	exp@x+1,___ftneg@f1+1
  9185  0006D4  C093  F01A         	movff	exp@x+2,___ftneg@f1+2
  9186  0006D8  EC9A  F014         	call	___ftneg	;wreg free
  9187  0006DC  C018  F091         	movff	?___ftneg,exp@x
  9188  0006E0  C019  F092         	movff	?___ftneg+1,exp@x+1
  9189  0006E4  C01A  F093         	movff	?___ftneg+2,exp@x+2
  9190  0006E8                     l1967:
  9191  0006E8  C091  F066         	movff	exp@x,___ftmul@f1
  9192  0006EC  C092  F067         	movff	exp@x+1,___ftmul@f1+1
  9193  0006F0  C093  F068         	movff	exp@x+2,___ftmul@f1+2
  9194  0006F4  0EAA               	movlw	170
  9195  0006F6  0100               	movlb	0	; () banked
  9196  0006F8  6F69               	movwf	___ftmul@f2& (0+255),b
  9197  0006FA  0EB8               	movlw	184
  9198  0006FC  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  9199  0006FE  0E3F               	movlw	63
  9200  000700  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  9201  000702  EC64  F00A         	call	___ftmul	;wreg free
  9202  000706  C066  F091         	movff	?___ftmul,exp@x
  9203  00070A  C067  F092         	movff	?___ftmul+1,exp@x+1
  9204  00070E  C068  F093         	movff	?___ftmul+2,exp@x+2
  9205  000712  C091  F089         	movff	exp@x,floor@x
  9206  000716  C092  F08A         	movff	exp@x+1,floor@x+1
  9207  00071A  C093  F08B         	movff	exp@x+2,floor@x+2
  9208  00071E  EC53  F00B         	call	_floor	;wreg free
  9209  000722  C089  F094         	movff	?_floor,_exp$2942
  9210  000726  C08A  F095         	movff	?_floor+1,_exp$2942+1
  9211  00072A  C08B  F096         	movff	?_floor+2,_exp$2942+2
  9212  00072E  C094  F072         	movff	_exp$2942,___fttol@f1
  9213  000732  C095  F073         	movff	_exp$2942+1,___fttol@f1+1
  9214  000736  C096  F074         	movff	_exp$2942+2,___fttol@f1+2
  9215  00073A  ECE8  F009         	call	___fttol	;wreg free
  9216  00073E  C072  F097         	movff	?___fttol,exp@exponent
  9217  000742  C073  F098         	movff	?___fttol+1,exp@exponent+1
  9218  000746  C091  F07E         	movff	exp@x,___ftsub@f1
  9219  00074A  C092  F07F         	movff	exp@x+1,___ftsub@f1+1
  9220  00074E  C093  F080         	movff	exp@x+2,___ftsub@f1+2
  9221  000752  C097  F020         	movff	exp@exponent,___awtoft@c
  9222  000756  C098  F021         	movff	exp@exponent+1,___awtoft@c+1
  9223  00075A  EC9A  F013         	call	___awtoft	;wreg free
  9224  00075E  C020  F081         	movff	?___awtoft,___ftsub@f2
  9225  000762  C021  F082         	movff	?___awtoft+1,___ftsub@f2+1
  9226  000766  C022  F083         	movff	?___awtoft+2,___ftsub@f2+2
  9227  00076A  ECE0  F012         	call	___ftsub	;wreg free
  9228  00076E  C07E  F091         	movff	?___ftsub,exp@x
  9229  000772  C07F  F092         	movff	?___ftsub+1,exp@x+1
  9230  000776  C080  F093         	movff	?___ftsub+2,exp@x+2
  9231  00077A  C091  F07E         	movff	exp@x,eval_poly@x
  9232  00077E  C092  F07F         	movff	exp@x+1,eval_poly@x+1
  9233  000782  C093  F080         	movff	exp@x+2,eval_poly@x+2
  9234  000786  0EBB               	movlw	low exp@coeff
  9235  000788  0100               	movlb	0	; () banked
  9236  00078A  6F81               	movwf	eval_poly@d& (0+255),b
  9237  00078C  0E7A               	movlw	high exp@coeff
  9238  00078E  6F82               	movwf	(eval_poly@d+1)& (0+255),b
  9239  000790  0E00               	movlw	0
  9240  000792  6F84               	movwf	(eval_poly@n+1)& (0+255),b
  9241  000794  0E09               	movlw	9
  9242  000796  6F83               	movwf	eval_poly@n& (0+255),b
  9243  000798  EC31  F00C         	call	_eval_poly	;wreg free
  9244  00079C  C07E  F088         	movff	?_eval_poly,ldexp@value
  9245  0007A0  C07F  F089         	movff	?_eval_poly+1,ldexp@value+1
  9246  0007A4  C080  F08A         	movff	?_eval_poly+2,ldexp@value+2
  9247  0007A8  C097  F08B         	movff	exp@exponent,ldexp@newexp
  9248  0007AC  C098  F08C         	movff	exp@exponent+1,ldexp@newexp+1
  9249  0007B0  EC9C  F00C         	call	_ldexp	;wreg free
  9250  0007B4  C088  F091         	movff	?_ldexp,exp@x
  9251  0007B8  C089  F092         	movff	?_ldexp+1,exp@x+1
  9252  0007BC  C08A  F093         	movff	?_ldexp+2,exp@x+2
  9253  0007C0  0100               	movlb	0	; () banked
  9254  0007C2  5199               	movf	exp@sign& (0+255),w,b
  9255  0007C4  B4D8               	btfsc	status,2,c
  9256  0007C6  D025               	goto	l1968
  9257                           
  9258                           ; BSR set to: 0
  9259  0007C8  2991               	incf	exp@x& (0+255),w,b
  9260  0007CA  E10E               	bnz	l7170
  9261  0007CC  0E7F               	movlw	127
  9262  0007CE  1992               	xorwf	(exp@x+1)& (0+255),w,b
  9263  0007D0  E10B               	bnz	l7170
  9264  0007D2  0E7F               	movlw	127
  9265  0007D4  1993               	xorwf	(exp@x+2)& (0+255),w,b
  9266  0007D6  A4D8               	btfss	status,2,c
  9267  0007D8  D007               	goto	l1969
  9268                           
  9269                           ; BSR set to: 0
  9270  0007DA  0E00               	movlw	0
  9271  0007DC  6F91               	movwf	?_exp& (0+255),b
  9272  0007DE  0E00               	movlw	0
  9273  0007E0  6F92               	movwf	(?_exp+1)& (0+255),b
  9274  0007E2  0E00               	movlw	0
  9275  0007E4  6F93               	movwf	(?_exp+2)& (0+255),b
  9276                           
  9277                           ; BSR set to: 0
  9278  0007E6  0012               	return	
  9279  0007E8                     l1969:
  9280  0007E8                     l7170:
  9281                           
  9282                           ; BSR set to: 0
  9283  0007E8  0E00               	movlw	0
  9284  0007EA  6E23               	movwf	___ftdiv@f1,c
  9285  0007EC  0E80               	movlw	128
  9286  0007EE  6E24               	movwf	___ftdiv@f1+1,c
  9287  0007F0  0E3F               	movlw	63
  9288  0007F2  6E25               	movwf	___ftdiv@f1+2,c
  9289  0007F4  C091  F026         	movff	exp@x,___ftdiv@f2
  9290  0007F8  C092  F027         	movff	exp@x+1,___ftdiv@f2+1
  9291  0007FC  C093  F028         	movff	exp@x+2,___ftdiv@f2+2
  9292  000800  ECDF  F00A         	call	___ftdiv	;wreg free
  9293  000804  C023  F091         	movff	?___ftdiv,?_exp
  9294  000808  C024  F092         	movff	?___ftdiv+1,?_exp+1
  9295  00080C  C025  F093         	movff	?___ftdiv+2,?_exp+2
  9296  000810  0012               	return	
  9297  000812                     l1968:
  9298                           
  9299                           ; BSR set to: 0
  9300  000812  C091  F091         	movff	exp@x,?_exp
  9301  000816  C092  F092         	movff	exp@x+1,?_exp+1
  9302  00081A  C093  F093         	movff	exp@x+2,?_exp+2
  9303  00081E  0012               	return		;funcret
  9304  000820                     __end_of_exp:
  9305                           	opt stack 0
  9306                           tosu	equ	0xFFF
  9307                           tosh	equ	0xFFE
  9308                           tosl	equ	0xFFD
  9309                           pclath	equ	0xFFA
  9310                           tblptru	equ	0xFF8
  9311                           tblptrh	equ	0xFF7
  9312                           tblptrl	equ	0xFF6
  9313                           tablat	equ	0xFF5
  9314                           prodh	equ	0xFF4
  9315                           prodl	equ	0xFF3
  9316                           intcon	equ	0xFF2
  9317                           intcon2	equ	0xFF1
  9318                           postinc0	equ	0xFEE
  9319                           wreg	equ	0xFE8
  9320                           indf1	equ	0xFE7
  9321                           postdec1	equ	0xFE5
  9322                           fsr1h	equ	0xFE2
  9323                           fsr1l	equ	0xFE1
  9324                           indf2	equ	0xFDF
  9325                           postinc2	equ	0xFDE
  9326                           postdec2	equ	0xFDD
  9327                           fsr2h	equ	0xFDA
  9328                           fsr2l	equ	0xFD9
  9329                           status	equ	0xFD8
  9330                           
  9331 ;; *************** function _ldexp *****************
  9332 ;; Defined at:
  9333 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;  value           3   40[BANK0 ] unsigned char 
  9336 ;;  newexp          2   43[BANK0 ] int 
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;		None
  9339 ;; Return value:  Size  Location     Type
  9340 ;;                  3   40[BANK0 ] int 
  9341 ;; Registers used:
  9342 ;;		wreg, status,2, status,0
  9343 ;; Tracked objects:
  9344 ;;		On entry : 0/0
  9345 ;;		On exit  : 0/0
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9348 ;;      Params:         0       5       0       0       0       0       0
  9349 ;;      Locals:         0       0       0       0       0       0       0
  9350 ;;      Temps:          0       2       0       0       0       0       0
  9351 ;;      Totals:         0       7       0       0       0       0       0
  9352 ;;Total ram usage:        7 bytes
  9353 ;; Hardware stack levels used:    1
  9354 ;; Hardware stack levels required when called:    3
  9355 ;; This function calls:
  9356 ;;		Nothing
  9357 ;; This function is called by:
  9358 ;;		_exp
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           	psect	text41
  9363  001938                     __ptext41:
  9364                           	opt stack 0
  9365  001938                     _ldexp:
  9366                           	opt stack 24
  9367                           
  9368                           ;incstack = 0
  9369  001938  0100               	movlb	0	; () banked
  9370  00193A  5188               	movf	ldexp@value& (0+255),w,b
  9371  00193C  1189               	iorwf	(ldexp@value+1)& (0+255),w,b
  9372  00193E  118A               	iorwf	(ldexp@value+2)& (0+255),w,b
  9373  001940  A4D8               	btfss	status,2,c
  9374  001942  D007               	goto	l1987
  9375                           
  9376                           ; BSR set to: 0
  9377  001944  0E00               	movlw	0
  9378  001946  6F88               	movwf	?_ldexp& (0+255),b
  9379  001948  0E00               	movlw	0
  9380  00194A  6F89               	movwf	(?_ldexp+1)& (0+255),b
  9381  00194C  0E00               	movlw	0
  9382  00194E  6F8A               	movwf	(?_ldexp+2)& (0+255),b
  9383                           
  9384                           ; BSR set to: 0
  9385  001950  0012               	return	
  9386  001952                     l1987:
  9387                           
  9388                           ; BSR set to: 0
  9389                           
  9390                           ; BSR set to: 0
  9391  001952  518A               	movf	(ldexp@value+2)& (0+255),w,b
  9392  001954  0B7F               	andlw	127
  9393  001956  6F8D               	movwf	??_ldexp& (0+255),b
  9394  001958  6B8E               	clrf	(??_ldexp+1)& (0+255),b
  9395  00195A  90D8               	bcf	status,0,c
  9396  00195C  378D               	rlcf	??_ldexp& (0+255),f,b
  9397  00195E  378E               	rlcf	(??_ldexp+1)& (0+255),f,b
  9398  001960  518D               	movf	??_ldexp& (0+255),w,b
  9399  001962  278B               	addwf	ldexp@newexp& (0+255),f,b
  9400  001964  518E               	movf	(??_ldexp+1)& (0+255),w,b
  9401  001966  238C               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  9402  001968  AF89               	btfss	(ldexp@value+1)& (0+255),7,b
  9403  00196A  D003               	goto	u7390
  9404  00196C  6B8D               	clrf	??_ldexp& (0+255),b
  9405  00196E  2B8D               	incf	??_ldexp& (0+255),f,b
  9406  001970  D002               	goto	u7398
  9407  001972                     u7390:
  9408  001972  0100               	movlb	0	; () banked
  9409  001974  6B8D               	clrf	??_ldexp& (0+255),b
  9410  001976                     u7398:
  9411  001976  518D               	movf	??_ldexp& (0+255),w,b
  9412  001978  278B               	addwf	ldexp@newexp& (0+255),f,b
  9413  00197A  0E00               	movlw	0
  9414  00197C  238C               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  9415  00197E  AF8C               	btfss	(ldexp@newexp+1)& (0+255),7,b
  9416  001980  D00B               	goto	l1989
  9417                           
  9418                           ; BSR set to: 0
  9419  001982  0E00               	movlw	0
  9420  001984  6FB2               	movwf	(_errno+1)& (0+255),b
  9421  001986  0E22               	movlw	34
  9422  001988  6FB1               	movwf	_errno& (0+255),b
  9423  00198A  0E00               	movlw	0
  9424  00198C  6F88               	movwf	?_ldexp& (0+255),b
  9425  00198E  0E00               	movlw	0
  9426  001990  6F89               	movwf	(?_ldexp+1)& (0+255),b
  9427  001992  0E00               	movlw	0
  9428  001994                     L1:
  9429  001994  6F8A               	movwf	(?_ldexp+2)& (0+255),b
  9430                           
  9431                           ; BSR set to: 0
  9432  001996  0012               	return	
  9433  001998                     l1989:
  9434                           
  9435                           ; BSR set to: 0
  9436                           
  9437                           ; BSR set to: 0
  9438  001998  BF8C               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  9439  00199A  D015               	goto	l1991
  9440  00199C  058C               	decf	(ldexp@newexp+1)& (0+255),w,b
  9441  00199E  A0D8               	btfss	status,0,c
  9442  0019A0  D012               	goto	l1991
  9443                           
  9444                           ; BSR set to: 0
  9445  0019A2  0E00               	movlw	0
  9446  0019A4  6FB2               	movwf	(_errno+1)& (0+255),b
  9447  0019A6  0E22               	movlw	34
  9448  0019A8  6FB1               	movwf	_errno& (0+255),b
  9449                           
  9450                           ; BSR set to: 0
  9451  0019AA  AF8A               	btfss	(ldexp@value+2)& (0+255),7,b
  9452  0019AC  D006               	goto	l1992
  9453                           
  9454                           ; BSR set to: 0
  9455  0019AE  0EFF               	movlw	255
  9456  0019B0  6F88               	movwf	?_ldexp& (0+255),b
  9457  0019B2  0E7F               	movlw	127
  9458  0019B4  6F89               	movwf	(?_ldexp+1)& (0+255),b
  9459  0019B6  0EFF               	movlw	255
  9460  0019B8  D7ED               	goto	L1
  9461  0019BA                     l1992:
  9462                           
  9463                           ; BSR set to: 0
  9464                           
  9465                           ; BSR set to: 0
  9466  0019BA  0EFF               	movlw	255
  9467  0019BC  6F88               	movwf	?_ldexp& (0+255),b
  9468  0019BE  0E7F               	movlw	127
  9469  0019C0  6F89               	movwf	(?_ldexp+1)& (0+255),b
  9470  0019C2  0E7F               	movlw	127
  9471  0019C4  D7E7               	goto	L1
  9472  0019C6                     l1991:
  9473                           
  9474                           ; BSR set to: 0
  9475                           
  9476                           ; BSR set to: 0
  9477  0019C6  358C               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  9478  0019C8  318C               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  9479  0019CA  6F8E               	movwf	(??_ldexp+1)& (0+255),b
  9480  0019CC  318B               	rrcf	ldexp@newexp& (0+255),w,b
  9481  0019CE  6F8D               	movwf	??_ldexp& (0+255),b
  9482  0019D0  518A               	movf	(ldexp@value+2)& (0+255),w,b
  9483  0019D2  198D               	xorwf	??_ldexp& (0+255),w,b
  9484  0019D4  0B80               	andlw	-128
  9485  0019D6  198D               	xorwf	??_ldexp& (0+255),w,b
  9486  0019D8  6F8A               	movwf	(ldexp@value+2)& (0+255),b
  9487  0019DA  C08B  F08D         	movff	ldexp@newexp,??_ldexp
  9488  0019DE  0E01               	movlw	1
  9489  0019E0  178D               	andwf	??_ldexp& (0+255),f,b
  9490  0019E2  338D               	rrcf	??_ldexp& (0+255),f,b
  9491  0019E4  338D               	rrcf	??_ldexp& (0+255),f,b
  9492  0019E6  5189               	movf	(ldexp@value+1)& (0+255),w,b
  9493  0019E8  198D               	xorwf	??_ldexp& (0+255),w,b
  9494  0019EA  0B7F               	andlw	-129
  9495  0019EC  198D               	xorwf	??_ldexp& (0+255),w,b
  9496  0019EE  6F89               	movwf	(ldexp@value+1)& (0+255),b
  9497                           
  9498                           ; BSR set to: 0
  9499                           
  9500                           ; BSR set to: 0
  9501                           
  9502                           ; BSR set to: 0
  9503  0019F0  C088  F088         	movff	ldexp@value,?_ldexp
  9504  0019F4  C089  F089         	movff	ldexp@value+1,?_ldexp+1
  9505  0019F8  C08A  F08A         	movff	ldexp@value+2,?_ldexp+2
  9506  0019FC  0012               	return	
  9507  0019FE                     __end_of_ldexp:
  9508                           	opt stack 0
  9509                           tosu	equ	0xFFF
  9510                           tosh	equ	0xFFE
  9511                           tosl	equ	0xFFD
  9512                           pclath	equ	0xFFA
  9513                           tblptru	equ	0xFF8
  9514                           tblptrh	equ	0xFF7
  9515                           tblptrl	equ	0xFF6
  9516                           tablat	equ	0xFF5
  9517                           prodh	equ	0xFF4
  9518                           prodl	equ	0xFF3
  9519                           intcon	equ	0xFF2
  9520                           intcon2	equ	0xFF1
  9521                           postinc0	equ	0xFEE
  9522                           wreg	equ	0xFE8
  9523                           indf1	equ	0xFE7
  9524                           postdec1	equ	0xFE5
  9525                           fsr1h	equ	0xFE2
  9526                           fsr1l	equ	0xFE1
  9527                           indf2	equ	0xFDF
  9528                           postinc2	equ	0xFDE
  9529                           postdec2	equ	0xFDD
  9530                           fsr2h	equ	0xFDA
  9531                           fsr2l	equ	0xFD9
  9532                           status	equ	0xFD8
  9533                           
  9534 ;; *************** function _floor *****************
  9535 ;; Defined at:
  9536 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;  x               3   41[BANK0 ] int 
  9539 ;; Auto vars:     Size  Location     Type
  9540 ;;  i               3   44[BANK0 ] int 
  9541 ;;  expon           2   47[BANK0 ] int 
  9542 ;; Return value:  Size  Location     Type
  9543 ;;                  3   41[BANK0 ] int 
  9544 ;; Registers used:
  9545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9546 ;; Tracked objects:
  9547 ;;		On entry : 0/0
  9548 ;;		On exit  : 0/0
  9549 ;;		Unchanged: 0/0
  9550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9551 ;;      Params:         0       3       0       0       0       0       0
  9552 ;;      Locals:         0       5       0       0       0       0       0
  9553 ;;      Temps:          0       0       0       0       0       0       0
  9554 ;;      Totals:         0       8       0       0       0       0       0
  9555 ;;Total ram usage:        8 bytes
  9556 ;; Hardware stack levels used:    1
  9557 ;; Hardware stack levels required when called:    5
  9558 ;; This function calls:
  9559 ;;		___altoft
  9560 ;;		___ftadd
  9561 ;;		___ftge
  9562 ;;		___fttol
  9563 ;;		_frexp
  9564 ;; This function is called by:
  9565 ;;		_exp
  9566 ;; This function uses a non-reentrant model
  9567 ;;
  9568                           
  9569                           	psect	text42
  9570  0016A6                     __ptext42:
  9571                           	opt stack 0
  9572  0016A6                     _floor:
  9573                           	opt stack 22
  9574                           
  9575                           ; BSR set to: 0
  9576                           ;incstack = 0
  9577  0016A6  C089  F018         	movff	floor@x,frexp@value
  9578  0016AA  C08A  F019         	movff	floor@x+1,frexp@value+1
  9579  0016AE  C08B  F01A         	movff	floor@x+2,frexp@value+2
  9580  0016B2  0E8F               	movlw	low floor@expon
  9581  0016B4  6E1B               	movwf	frexp@eptr,c
  9582  0016B6  0E00               	movlw	high floor@expon
  9583  0016B8  6E1C               	movwf	frexp@eptr+1,c
  9584  0016BA  EC45  F00E         	call	_frexp	;wreg free
  9585  0016BE  0100               	movlb	0	; () banked
  9586  0016C0  AF90               	btfss	(floor@expon+1)& (0+255),7,b
  9587  0016C2  D010               	goto	l1974
  9588                           
  9589                           ; BSR set to: 0
  9590  0016C4  AF8B               	btfss	(floor@x+2)& (0+255),7,b
  9591  0016C6  D007               	goto	l1975
  9592                           
  9593                           ; BSR set to: 0
  9594  0016C8  0E00               	movlw	0
  9595  0016CA  6F89               	movwf	?_floor& (0+255),b
  9596  0016CC  0E80               	movlw	128
  9597  0016CE  6F8A               	movwf	(?_floor+1)& (0+255),b
  9598  0016D0  0EBF               	movlw	191
  9599  0016D2  6F8B               	movwf	(?_floor+2)& (0+255),b
  9600                           
  9601                           ; BSR set to: 0
  9602  0016D4  0012               	return	
  9603  0016D6                     l1975:
  9604                           
  9605                           ; BSR set to: 0
  9606                           
  9607                           ; BSR set to: 0
  9608  0016D6  0E00               	movlw	0
  9609  0016D8  6F89               	movwf	?_floor& (0+255),b
  9610  0016DA  0E00               	movlw	0
  9611  0016DC  6F8A               	movwf	(?_floor+1)& (0+255),b
  9612  0016DE  0E00               	movlw	0
  9613  0016E0  6F8B               	movwf	(?_floor+2)& (0+255),b
  9614                           
  9615                           ; BSR set to: 0
  9616  0016E2  0012               	return	
  9617  0016E4                     l1974:
  9618                           
  9619                           ; BSR set to: 0
  9620                           
  9621                           ; BSR set to: 0
  9622  0016E4  5190               	movf	(floor@expon+1)& (0+255),w,b
  9623  0016E6  E104               	bnz	u7350
  9624  0016E8  0E15               	movlw	21
  9625  0016EA  5D8F               	subwf	floor@expon& (0+255),w,b
  9626  0016EC  A0D8               	btfss	status,0,c
  9627  0016EE  D007               	goto	l1977
  9628  0016F0                     u7350:
  9629                           
  9630                           ; BSR set to: 0
  9631  0016F0  C089  F089         	movff	floor@x,?_floor
  9632  0016F4  C08A  F08A         	movff	floor@x+1,?_floor+1
  9633  0016F8  C08B  F08B         	movff	floor@x+2,?_floor+2
  9634  0016FC  0012               	return	
  9635  0016FE                     l1977:
  9636                           
  9637                           ; BSR set to: 0
  9638                           
  9639                           ; BSR set to: 0
  9640  0016FE  C089  F072         	movff	floor@x,___fttol@f1
  9641  001702  C08A  F073         	movff	floor@x+1,___fttol@f1+1
  9642  001706  C08B  F074         	movff	floor@x+2,___fttol@f1+2
  9643  00170A  ECE8  F009         	call	___fttol	;wreg free
  9644  00170E  C072  F081         	movff	?___fttol,___altoft@c
  9645  001712  C073  F082         	movff	?___fttol+1,___altoft@c+1
  9646  001716  C074  F083         	movff	?___fttol+2,___altoft@c+2
  9647  00171A  C075  F084         	movff	?___fttol+3,___altoft@c+3
  9648  00171E  EC16  F00F         	call	___altoft	;wreg free
  9649  001722  C081  F08C         	movff	?___altoft,floor@i
  9650  001726  C082  F08D         	movff	?___altoft+1,floor@i+1
  9651  00172A  C083  F08E         	movff	?___altoft+2,floor@i+2
  9652  00172E  C089  F018         	movff	floor@x,___ftge@ff1
  9653  001732  C08A  F019         	movff	floor@x+1,___ftge@ff1+1
  9654  001736  C08B  F01A         	movff	floor@x+2,___ftge@ff1+2
  9655  00173A  C08C  F01B         	movff	floor@i,___ftge@ff2
  9656  00173E  C08D  F01C         	movff	floor@i+1,___ftge@ff2+1
  9657  001742  C08E  F01D         	movff	floor@i+2,___ftge@ff2+2
  9658  001746  EC8D  F00E         	call	___ftge	;wreg free
  9659  00174A  B0D8               	btfsc	status,0,c
  9660  00174C  D016               	goto	l1978
  9661  00174E  C08C  F072         	movff	floor@i,___ftadd@f1
  9662  001752  C08D  F073         	movff	floor@i+1,___ftadd@f1+1
  9663  001756  C08E  F074         	movff	floor@i+2,___ftadd@f1+2
  9664  00175A  0E00               	movlw	0
  9665  00175C  0100               	movlb	0	; () banked
  9666  00175E  6F75               	movwf	___ftadd@f2& (0+255),b
  9667  001760  0E80               	movlw	128
  9668  001762  6F76               	movwf	(___ftadd@f2+1)& (0+255),b
  9669  001764  0EBF               	movlw	191
  9670  001766  6F77               	movwf	(___ftadd@f2+2)& (0+255),b
  9671  001768  ECD4  F005         	call	___ftadd	;wreg free
  9672  00176C  C072  F089         	movff	?___ftadd,?_floor
  9673  001770  C073  F08A         	movff	?___ftadd+1,?_floor+1
  9674  001774  C074  F08B         	movff	?___ftadd+2,?_floor+2
  9675  001778  0012               	return	
  9676  00177A                     l1978:
  9677  00177A  C08C  F089         	movff	floor@i,?_floor
  9678  00177E  C08D  F08A         	movff	floor@i+1,?_floor+1
  9679  001782  C08E  F08B         	movff	floor@i+2,?_floor+2
  9680  001786  0012               	return		;funcret
  9681  001788                     __end_of_floor:
  9682                           	opt stack 0
  9683                           tosu	equ	0xFFF
  9684                           tosh	equ	0xFFE
  9685                           tosl	equ	0xFFD
  9686                           pclath	equ	0xFFA
  9687                           tblptru	equ	0xFF8
  9688                           tblptrh	equ	0xFF7
  9689                           tblptrl	equ	0xFF6
  9690                           tablat	equ	0xFF5
  9691                           prodh	equ	0xFF4
  9692                           prodl	equ	0xFF3
  9693                           intcon	equ	0xFF2
  9694                           intcon2	equ	0xFF1
  9695                           postinc0	equ	0xFEE
  9696                           wreg	equ	0xFE8
  9697                           indf1	equ	0xFE7
  9698                           postdec1	equ	0xFE5
  9699                           fsr1h	equ	0xFE2
  9700                           fsr1l	equ	0xFE1
  9701                           indf2	equ	0xFDF
  9702                           postinc2	equ	0xFDE
  9703                           postdec2	equ	0xFDD
  9704                           fsr2h	equ	0xFDA
  9705                           fsr2l	equ	0xFD9
  9706                           status	equ	0xFD8
  9707                           
  9708 ;; *************** function _frexp *****************
  9709 ;; Defined at:
  9710 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;  value           3   23[COMRAM] int 
  9713 ;;  eptr            2   26[COMRAM] PTR int 
  9714 ;;		 -> log@exponent(2), floor@expon(2), 
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;		None
  9717 ;; Return value:  Size  Location     Type
  9718 ;;                  3   23[COMRAM] PTR int 
  9719 ;; Registers used:
  9720 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9721 ;; Tracked objects:
  9722 ;;		On entry : 0/0
  9723 ;;		On exit  : 0/0
  9724 ;;		Unchanged: 0/0
  9725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9726 ;;      Params:         5       0       0       0       0       0       0
  9727 ;;      Locals:         0       0       0       0       0       0       0
  9728 ;;      Temps:          2       0       0       0       0       0       0
  9729 ;;      Totals:         7       0       0       0       0       0       0
  9730 ;;Total ram usage:        7 bytes
  9731 ;; Hardware stack levels used:    1
  9732 ;; Hardware stack levels required when called:    3
  9733 ;; This function calls:
  9734 ;;		Nothing
  9735 ;; This function is called by:
  9736 ;;		_floor
  9737 ;;		_log
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           	psect	text43
  9742  001C8A                     __ptext43:
  9743                           	opt stack 0
  9744  001C8A                     _frexp:
  9745                           	opt stack 24
  9746                           
  9747                           ;incstack = 0
  9748  001C8A  5018               	movf	frexp@value,w,c
  9749  001C8C  1019               	iorwf	frexp@value+1,w,c
  9750  001C8E  101A               	iorwf	frexp@value+2,w,c
  9751  001C90  A4D8               	btfss	status,2,c
  9752  001C92  D00F               	goto	l1983
  9753  001C94  C01B  FFD9         	movff	frexp@eptr,fsr2l
  9754  001C98  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  9755  001C9C  0E00               	movlw	0
  9756  001C9E  6EDE               	movwf	postinc2,c
  9757  001CA0  0E00               	movlw	0
  9758  001CA2  6EDD               	movwf	postdec2,c
  9759  001CA4  0E00               	movlw	0
  9760  001CA6  6E18               	movwf	?_frexp,c
  9761  001CA8  0E00               	movlw	0
  9762  001CAA  6E19               	movwf	?_frexp+1,c
  9763  001CAC  0E00               	movlw	0
  9764  001CAE  6E1A               	movwf	?_frexp+2,c
  9765  001CB0  0012               	return	
  9766  001CB2                     l1983:
  9767  001CB2  501A               	movf	frexp@value+2,w,c
  9768  001CB4  0B7F               	andlw	127
  9769  001CB6  6E1D               	movwf	??_frexp& (0+255),c
  9770  001CB8  6A1E               	clrf	(??_frexp+1)& (0+255),c
  9771  001CBA  90D8               	bcf	status,0,c
  9772  001CBC  361D               	rlcf	??_frexp,f,c
  9773  001CBE  361E               	rlcf	??_frexp+1,f,c
  9774  001CC0  C01B  FFD9         	movff	frexp@eptr,fsr2l
  9775  001CC4  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  9776  001CC8  C01D  FFDE         	movff	??_frexp,postinc2
  9777  001CCC  C01E  FFDD         	movff	??_frexp+1,postdec2
  9778  001CD0  AE19               	btfss	frexp@value+1,7,c
  9779  001CD2  D003               	goto	u7020
  9780  001CD4  6A1D               	clrf	??_frexp& (0+255),c
  9781  001CD6  2A1D               	incf	??_frexp& (0+255),f,c
  9782  001CD8  D001               	goto	u7028
  9783  001CDA                     u7020:
  9784  001CDA  6A1D               	clrf	??_frexp& (0+255),c
  9785  001CDC                     u7028:
  9786  001CDC  501D               	movf	??_frexp,w,c
  9787  001CDE  C01B  FFD9         	movff	frexp@eptr,fsr2l
  9788  001CE2  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  9789  001CE6  12DE               	iorwf	postinc2,f,c
  9790  001CE8  0E00               	movlw	0
  9791  001CEA  12DD               	iorwf	postdec2,f,c
  9792  001CEC  C01B  FFD9         	movff	frexp@eptr,fsr2l
  9793  001CF0  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  9794  001CF4  0E82               	movlw	130
  9795  001CF6  26DE               	addwf	postinc2,f,c
  9796  001CF8  0EFF               	movlw	255
  9797  001CFA  22DD               	addwfc	postdec2,f,c
  9798  001CFC  801A               	bsf	frexp@value+2,0,c
  9799  001CFE  821A               	bsf	frexp@value+2,1,c
  9800  001D00  841A               	bsf	frexp@value+2,2,c
  9801  001D02  861A               	bsf	frexp@value+2,3,c
  9802  001D04  881A               	bsf	frexp@value+2,4,c
  9803  001D06  8A1A               	bsf	frexp@value+2,5,c
  9804  001D08  9C1A               	bcf	frexp@value+2,6,c
  9805  001D0A  9E19               	bcf	frexp@value+1,7,c
  9806  001D0C  C018  F018         	movff	frexp@value,?_frexp
  9807  001D10  C019  F019         	movff	frexp@value+1,?_frexp+1
  9808  001D14  C01A  F01A         	movff	frexp@value+2,?_frexp+2
  9809  001D18  0012               	return	
  9810  001D1A                     __end_of_frexp:
  9811                           	opt stack 0
  9812                           tosu	equ	0xFFF
  9813                           tosh	equ	0xFFE
  9814                           tosl	equ	0xFFD
  9815                           pclath	equ	0xFFA
  9816                           tblptru	equ	0xFF8
  9817                           tblptrh	equ	0xFF7
  9818                           tblptrl	equ	0xFF6
  9819                           tablat	equ	0xFF5
  9820                           prodh	equ	0xFF4
  9821                           prodl	equ	0xFF3
  9822                           intcon	equ	0xFF2
  9823                           intcon2	equ	0xFF1
  9824                           postinc0	equ	0xFEE
  9825                           wreg	equ	0xFE8
  9826                           indf1	equ	0xFE7
  9827                           postdec1	equ	0xFE5
  9828                           fsr1h	equ	0xFE2
  9829                           fsr1l	equ	0xFE1
  9830                           indf2	equ	0xFDF
  9831                           postinc2	equ	0xFDE
  9832                           postdec2	equ	0xFDD
  9833                           fsr2h	equ	0xFDA
  9834                           fsr2l	equ	0xFD9
  9835                           status	equ	0xFD8
  9836                           
  9837 ;; *************** function ___fttol *****************
  9838 ;; Defined at:
  9839 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;  f1              3   18[BANK0 ] float 
  9842 ;; Auto vars:     Size  Location     Type
  9843 ;;  lval            4   28[BANK0 ] unsigned long 
  9844 ;;  exp1            1   32[BANK0 ] unsigned char 
  9845 ;;  sign1           1   27[BANK0 ] unsigned char 
  9846 ;; Return value:  Size  Location     Type
  9847 ;;                  4   18[BANK0 ] long 
  9848 ;; Registers used:
  9849 ;;		wreg, status,2, status,0
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9855 ;;      Params:         0       4       0       0       0       0       0
  9856 ;;      Locals:         0       6       0       0       0       0       0
  9857 ;;      Temps:          0       5       0       0       0       0       0
  9858 ;;      Totals:         0      15       0       0       0       0       0
  9859 ;;Total ram usage:       15 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:    3
  9862 ;; This function calls:
  9863 ;;		Nothing
  9864 ;; This function is called by:
  9865 ;;		_SampleSingleChannel
  9866 ;;		_pow
  9867 ;;		_exp
  9868 ;;		_floor
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           	psect	text44
  9873  0013D0                     __ptext44:
  9874                           	opt stack 0
  9875  0013D0                     ___fttol:
  9876                           	opt stack 23
  9877                           
  9878                           ;incstack = 0
  9879  0013D0  C074  F076         	movff	___fttol@f1+2,??___fttol
  9880  0013D4  0100               	movlb	0	; () banked
  9881  0013D6  6B77               	clrf	(??___fttol+1)& (0+255),b
  9882  0013D8  6B78               	clrf	(??___fttol+2)& (0+255),b
  9883  0013DA  3573               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9884  0013DC  3776               	rlcf	??___fttol& (0+255),f,b
  9885  0013DE  E301               	bnc	u6871
  9886  0013E0  8177               	bsf	(??___fttol+1)& (0+255),0,b
  9887  0013E2                     u6871:
  9888  0013E2  5176               	movf	??___fttol& (0+255),w,b
  9889  0013E4  6F80               	movwf	___fttol@exp1& (0+255),b
  9890  0013E6  5180               	movf	___fttol@exp1& (0+255),w,b
  9891  0013E8  A4D8               	btfss	status,2,c
  9892  0013EA  D009               	goto	l1640
  9893                           
  9894                           ; BSR set to: 0
  9895  0013EC  0E00               	movlw	0
  9896  0013EE  6F72               	movwf	?___fttol& (0+255),b
  9897  0013F0  0E00               	movlw	0
  9898  0013F2  6F73               	movwf	(?___fttol+1)& (0+255),b
  9899  0013F4  0E00               	movlw	0
  9900  0013F6  6F74               	movwf	(?___fttol+2)& (0+255),b
  9901  0013F8  0E00               	movlw	0
  9902  0013FA  6F75               	movwf	(?___fttol+3)& (0+255),b
  9903                           
  9904                           ; BSR set to: 0
  9905  0013FC  0012               	return	
  9906  0013FE                     l1640:
  9907                           
  9908                           ; BSR set to: 0
  9909                           
  9910                           ; BSR set to: 0
  9911  0013FE  0E17               	movlw	23
  9912  001400  6F76               	movwf	??___fttol& (0+255),b
  9913  001402  C072  F077         	movff	___fttol@f1,??___fttol+1
  9914  001406  C073  F078         	movff	___fttol@f1+1,??___fttol+2
  9915  00140A  C074  F079         	movff	___fttol@f1+2,??___fttol+3
  9916  00140E  2976               	incf	??___fttol& (0+255),w,b
  9917  001410  6F7A               	movwf	(??___fttol+4)& (0+255),b
  9918  001412  D004               	goto	u6890
  9919  001414                     u6895:
  9920  001414  90D8               	bcf	status,0,c
  9921  001416  3379               	rrcf	(??___fttol+3)& (0+255),f,b
  9922  001418  3378               	rrcf	(??___fttol+2)& (0+255),f,b
  9923  00141A  3377               	rrcf	(??___fttol+1)& (0+255),f,b
  9924  00141C                     u6890:
  9925  00141C  2F7A               	decfsz	(??___fttol+4)& (0+255),f,b
  9926  00141E  D7FA               	goto	u6895
  9927  001420  0100               	movlb	0	; () banked
  9928  001422  5177               	movf	(??___fttol+1)& (0+255),w,b
  9929  001424  6F7B               	movwf	___fttol@sign1& (0+255),b
  9930                           
  9931                           ; BSR set to: 0
  9932  001426  8F73               	bsf	(___fttol@f1+1)& (0+255),7,b
  9933                           
  9934                           ; BSR set to: 0
  9935  001428  0EFF               	movlw	255
  9936  00142A  1772               	andwf	___fttol@f1& (0+255),f,b
  9937  00142C  0EFF               	movlw	255
  9938  00142E  1773               	andwf	(___fttol@f1+1)& (0+255),f,b
  9939  001430  0E00               	movlw	0
  9940  001432  1774               	andwf	(___fttol@f1+2)& (0+255),f,b
  9941                           
  9942                           ; BSR set to: 0
  9943  001434  5172               	movf	___fttol@f1& (0+255),w,b
  9944  001436  6F7C               	movwf	___fttol@lval& (0+255),b
  9945  001438  5173               	movf	(___fttol@f1+1)& (0+255),w,b
  9946  00143A  6F7D               	movwf	(___fttol@lval+1)& (0+255),b
  9947  00143C  5174               	movf	(___fttol@f1+2)& (0+255),w,b
  9948  00143E  6F7E               	movwf	(___fttol@lval+2)& (0+255),b
  9949  001440  6B7F               	clrf	(___fttol@lval+3)& (0+255),b
  9950                           
  9951                           ; BSR set to: 0
  9952  001442  0E8E               	movlw	142
  9953  001444  5F80               	subwf	___fttol@exp1& (0+255),f,b
  9954                           
  9955                           ; BSR set to: 0
  9956  001446  AF80               	btfss	___fttol@exp1& (0+255),7,b
  9957  001448  D016               	goto	l1642
  9958                           
  9959                           ; BSR set to: 0
  9960  00144A  5180               	movf	___fttol@exp1& (0+255),w,b
  9961  00144C  0A80               	xorlw	128
  9962  00144E  0F8F               	addlw	143
  9963  001450  B0D8               	btfsc	status,0,c
  9964  001452  D009               	goto	l1643
  9965                           
  9966                           ; BSR set to: 0
  9967  001454  0E00               	movlw	0
  9968  001456  6F72               	movwf	?___fttol& (0+255),b
  9969  001458  0E00               	movlw	0
  9970  00145A  6F73               	movwf	(?___fttol+1)& (0+255),b
  9971  00145C  0E00               	movlw	0
  9972  00145E  6F74               	movwf	(?___fttol+2)& (0+255),b
  9973  001460  0E00               	movlw	0
  9974  001462  6F75               	movwf	(?___fttol+3)& (0+255),b
  9975                           
  9976                           ; BSR set to: 0
  9977  001464  0012               	return	
  9978  001466                     l1643:
  9979                           
  9980                           ; BSR set to: 0
  9981                           
  9982                           ; BSR set to: 0
  9983                           
  9984                           ; BSR set to: 0
  9985  001466  90D8               	bcf	status,0,c
  9986  001468  337F               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9987  00146A  337E               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9988  00146C  337D               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9989  00146E  337C               	rrcf	___fttol@lval& (0+255),f,b
  9990                           
  9991                           ; BSR set to: 0
  9992  001470  3F80               	incfsz	___fttol@exp1& (0+255),f,b
  9993  001472  D7F9               	goto	l1643
  9994                           
  9995                           ; BSR set to: 0
  9996  001474  D015               	goto	u6930
  9997  001476                     l1642:
  9998                           
  9999                           ; BSR set to: 0
 10000                           
 10001                           ; BSR set to: 0
 10002  001476  0E17               	movlw	23
 10003  001478  6580               	cpfsgt	___fttol@exp1& (0+255),b
 10004  00147A  D00F               	goto	l1648
 10005                           
 10006                           ; BSR set to: 0
 10007  00147C  0E00               	movlw	0
 10008  00147E  6F72               	movwf	?___fttol& (0+255),b
 10009  001480  0E00               	movlw	0
 10010  001482  6F73               	movwf	(?___fttol+1)& (0+255),b
 10011  001484  0E00               	movlw	0
 10012  001486  6F74               	movwf	(?___fttol+2)& (0+255),b
 10013  001488  0E00               	movlw	0
 10014  00148A  6F75               	movwf	(?___fttol+3)& (0+255),b
 10015                           
 10016                           ; BSR set to: 0
 10017  00148C  0012               	return	
 10018  00148E                     
 10019                           ; BSR set to: 0
 10020                           
 10021                           ; BSR set to: 0
 10022  00148E  90D8               	bcf	status,0,c
 10023  001490  377C               	rlcf	___fttol@lval& (0+255),f,b
 10024  001492  377D               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10025  001494  377E               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10026  001496  377F               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10027  001498  0780               	decf	___fttol@exp1& (0+255),f,b
 10028  00149A                     l1648:
 10029                           
 10030                           ; BSR set to: 0
 10031                           
 10032                           ; BSR set to: 0
 10033  00149A  5180               	movf	___fttol@exp1& (0+255),w,b
 10034  00149C  A4D8               	btfss	status,2,c
 10035  00149E  D7F7               	goto	l1649
 10036  0014A0                     u6930:
 10037                           
 10038                           ; BSR set to: 0
 10039                           
 10040                           ; BSR set to: 0
 10041                           
 10042                           ; BSR set to: 0
 10043  0014A0  517B               	movf	___fttol@sign1& (0+255),w,b
 10044  0014A2  B4D8               	btfsc	status,2,c
 10045  0014A4  D008               	goto	l1651
 10046                           
 10047                           ; BSR set to: 0
 10048  0014A6  1F7F               	comf	(___fttol@lval+3)& (0+255),f,b
 10049  0014A8  1F7E               	comf	(___fttol@lval+2)& (0+255),f,b
 10050  0014AA  1F7D               	comf	(___fttol@lval+1)& (0+255),f,b
 10051  0014AC  6D7C               	negf	___fttol@lval& (0+255),b
 10052  0014AE  0E00               	movlw	0
 10053  0014B0  237D               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10054  0014B2  237E               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10055  0014B4  237F               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10056  0014B6                     l1651:
 10057                           
 10058                           ; BSR set to: 0
 10059                           
 10060                           ; BSR set to: 0
 10061  0014B6  C07C  F072         	movff	___fttol@lval,?___fttol
 10062  0014BA  C07D  F073         	movff	___fttol@lval+1,?___fttol+1
 10063  0014BE  C07E  F074         	movff	___fttol@lval+2,?___fttol+2
 10064  0014C2  C07F  F075         	movff	___fttol@lval+3,?___fttol+3
 10065  0014C6  0012               	return	
 10066  0014C8                     __end_of___fttol:
 10067                           	opt stack 0
 10068                           tosu	equ	0xFFF
 10069                           tosh	equ	0xFFE
 10070                           tosl	equ	0xFFD
 10071                           pclath	equ	0xFFA
 10072                           tblptru	equ	0xFF8
 10073                           tblptrh	equ	0xFF7
 10074                           tblptrl	equ	0xFF6
 10075                           tablat	equ	0xFF5
 10076                           prodh	equ	0xFF4
 10077                           prodl	equ	0xFF3
 10078                           intcon	equ	0xFF2
 10079                           intcon2	equ	0xFF1
 10080                           postinc0	equ	0xFEE
 10081                           wreg	equ	0xFE8
 10082                           indf1	equ	0xFE7
 10083                           postdec1	equ	0xFE5
 10084                           fsr1h	equ	0xFE2
 10085                           fsr1l	equ	0xFE1
 10086                           indf2	equ	0xFDF
 10087                           postinc2	equ	0xFDE
 10088                           postdec2	equ	0xFDD
 10089                           fsr2h	equ	0xFDA
 10090                           fsr2l	equ	0xFD9
 10091                           status	equ	0xFD8
 10092                           
 10093 ;; *************** function ___ftge *****************
 10094 ;; Defined at:
 10095 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 10096 ;; Parameters:    Size  Location     Type
 10097 ;;  ff1             3   23[COMRAM] float 
 10098 ;;  ff2             3   26[COMRAM] float 
 10099 ;; Auto vars:     Size  Location     Type
 10100 ;;		None
 10101 ;; Return value:  Size  Location     Type
 10102 ;;		None               void
 10103 ;; Registers used:
 10104 ;;		wreg, status,2, status,0
 10105 ;; Tracked objects:
 10106 ;;		On entry : 0/0
 10107 ;;		On exit  : 0/0
 10108 ;;		Unchanged: 0/0
 10109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10110 ;;      Params:         6       0       0       0       0       0       0
 10111 ;;      Locals:         0       0       0       0       0       0       0
 10112 ;;      Temps:          3       0       0       0       0       0       0
 10113 ;;      Totals:         9       0       0       0       0       0       0
 10114 ;;Total ram usage:        9 bytes
 10115 ;; Hardware stack levels used:    1
 10116 ;; Hardware stack levels required when called:    3
 10117 ;; This function calls:
 10118 ;;		Nothing
 10119 ;; This function is called by:
 10120 ;;		_pow
 10121 ;;		_exp
 10122 ;;		_floor
 10123 ;;		_CheckFlashPrecentage
 10124 ;; This function uses a non-reentrant model
 10125 ;;
 10126                           
 10127                           	psect	text45
 10128  001D1A                     __ptext45:
 10129                           	opt stack 0
 10130  001D1A                     ___ftge:
 10131                           	opt stack 23
 10132                           
 10133                           ; BSR set to: 0
 10134                           ;incstack = 0
 10135  001D1A  AE1A               	btfss	___ftge@ff1+2,7,c
 10136  001D1C  D016               	goto	l1612
 10137  001D1E  C018  F01E         	movff	___ftge@ff1,??___ftge
 10138  001D22  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 10139  001D26  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 10140  001D2A  1E1E               	comf	??___ftge,f,c
 10141  001D2C  1E1F               	comf	??___ftge+1,f,c
 10142  001D2E  1E20               	comf	??___ftge+2,f,c
 10143  001D30  2A1E               	incf	??___ftge,f,c
 10144  001D32  0E00               	movlw	0
 10145  001D34  221F               	addwfc	??___ftge+1,f,c
 10146  001D36  2220               	addwfc	??___ftge+2,f,c
 10147  001D38  0E00               	movlw	0
 10148  001D3A  241E               	addwf	??___ftge,w,c
 10149  001D3C  6E18               	movwf	___ftge@ff1,c
 10150  001D3E  0E00               	movlw	0
 10151  001D40  201F               	addwfc	??___ftge+1,w,c
 10152  001D42  6E19               	movwf	___ftge@ff1+1,c
 10153  001D44  0E80               	movlw	128
 10154  001D46  2020               	addwfc	??___ftge+2,w,c
 10155  001D48  6E1A               	movwf	___ftge@ff1+2,c
 10156  001D4A                     l1612:
 10157  001D4A  AE1D               	btfss	___ftge@ff2+2,7,c
 10158  001D4C  D016               	goto	l1613
 10159  001D4E  C01B  F01E         	movff	___ftge@ff2,??___ftge
 10160  001D52  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 10161  001D56  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 10162  001D5A  1E1E               	comf	??___ftge,f,c
 10163  001D5C  1E1F               	comf	??___ftge+1,f,c
 10164  001D5E  1E20               	comf	??___ftge+2,f,c
 10165  001D60  2A1E               	incf	??___ftge,f,c
 10166  001D62  0E00               	movlw	0
 10167  001D64  221F               	addwfc	??___ftge+1,f,c
 10168  001D66  2220               	addwfc	??___ftge+2,f,c
 10169  001D68  0E00               	movlw	0
 10170  001D6A  241E               	addwf	??___ftge,w,c
 10171  001D6C  6E1B               	movwf	___ftge@ff2,c
 10172  001D6E  0E00               	movlw	0
 10173  001D70  201F               	addwfc	??___ftge+1,w,c
 10174  001D72  6E1C               	movwf	___ftge@ff2+1,c
 10175  001D74  0E80               	movlw	128
 10176  001D76  2020               	addwfc	??___ftge+2,w,c
 10177  001D78  6E1D               	movwf	___ftge@ff2+2,c
 10178  001D7A                     l1613:
 10179  001D7A  0E00               	movlw	0
 10180  001D7C  1A18               	xorwf	___ftge@ff1,f,c
 10181  001D7E  0E00               	movlw	0
 10182  001D80  1A19               	xorwf	___ftge@ff1+1,f,c
 10183  001D82  0E80               	movlw	128
 10184  001D84  1A1A               	xorwf	___ftge@ff1+2,f,c
 10185  001D86  0E00               	movlw	0
 10186  001D88  1A1B               	xorwf	___ftge@ff2,f,c
 10187  001D8A  0E00               	movlw	0
 10188  001D8C  1A1C               	xorwf	___ftge@ff2+1,f,c
 10189  001D8E  0E80               	movlw	128
 10190  001D90  1A1D               	xorwf	___ftge@ff2+2,f,c
 10191  001D92  501B               	movf	___ftge@ff2,w,c
 10192  001D94  5C18               	subwf	___ftge@ff1,w,c
 10193  001D96  501C               	movf	___ftge@ff2+1,w,c
 10194  001D98  5819               	subwfb	___ftge@ff1+1,w,c
 10195  001D9A  501D               	movf	___ftge@ff2+2,w,c
 10196  001D9C  581A               	subwfb	___ftge@ff1+2,w,c
 10197  001D9E  B0D8               	btfsc	status,0,c
 10198  001DA0  D002               	goto	l6230
 10199  001DA2  90D8               	bcf	status,0,c
 10200  001DA4  0012               	return	
 10201  001DA6                     l6230:
 10202  001DA6  80D8               	bsf	status,0,c
 10203  001DA8  0012               	return	
 10204  001DAA                     __end_of___ftge:
 10205                           	opt stack 0
 10206                           tosu	equ	0xFFF
 10207                           tosh	equ	0xFFE
 10208                           tosl	equ	0xFFD
 10209                           pclath	equ	0xFFA
 10210                           tblptru	equ	0xFF8
 10211                           tblptrh	equ	0xFF7
 10212                           tblptrl	equ	0xFF6
 10213                           tablat	equ	0xFF5
 10214                           prodh	equ	0xFF4
 10215                           prodl	equ	0xFF3
 10216                           intcon	equ	0xFF2
 10217                           intcon2	equ	0xFF1
 10218                           postinc0	equ	0xFEE
 10219                           wreg	equ	0xFE8
 10220                           indf1	equ	0xFE7
 10221                           postdec1	equ	0xFE5
 10222                           fsr1h	equ	0xFE2
 10223                           fsr1l	equ	0xFE1
 10224                           indf2	equ	0xFDF
 10225                           postinc2	equ	0xFDE
 10226                           postdec2	equ	0xFDD
 10227                           fsr2h	equ	0xFDA
 10228                           fsr2l	equ	0xFD9
 10229                           status	equ	0xFD8
 10230                           
 10231 ;; *************** function ___altoft *****************
 10232 ;; Defined at:
 10233 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 10234 ;; Parameters:    Size  Location     Type
 10235 ;;  c               4   33[BANK0 ] long 
 10236 ;; Auto vars:     Size  Location     Type
 10237 ;;  sign            1   47[COMRAM] unsigned char 
 10238 ;;  exp             1   46[COMRAM] unsigned char 
 10239 ;; Return value:  Size  Location     Type
 10240 ;;                  3   33[BANK0 ] float 
 10241 ;; Registers used:
 10242 ;;		wreg, status,2, status,0, cstack
 10243 ;; Tracked objects:
 10244 ;;		On entry : 0/0
 10245 ;;		On exit  : 0/0
 10246 ;;		Unchanged: 0/0
 10247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10248 ;;      Params:         0       4       0       0       0       0       0
 10249 ;;      Locals:         2       0       0       0       0       0       0
 10250 ;;      Temps:          0       4       0       0       0       0       0
 10251 ;;      Totals:         2       8       0       0       0       0       0
 10252 ;;Total ram usage:       10 bytes
 10253 ;; Hardware stack levels used:    1
 10254 ;; Hardware stack levels required when called:    4
 10255 ;; This function calls:
 10256 ;;		___ftpack
 10257 ;; This function is called by:
 10258 ;;		_floor
 10259 ;; This function uses a non-reentrant model
 10260 ;;
 10261                           
 10262                           	psect	text46
 10263  001E2C                     __ptext46:
 10264                           	opt stack 0
 10265  001E2C                     ___altoft:
 10266                           	opt stack 22
 10267                           
 10268                           ;incstack = 0
 10269  001E2C  0E00               	movlw	0
 10270  001E2E  6E30               	movwf	___altoft@sign,c
 10271  001E30  0E8E               	movlw	142
 10272  001E32  6E2F               	movwf	___altoft@exp,c
 10273  001E34  0100               	movlb	0	; () banked
 10274  001E36  AF84               	btfss	(___altoft@c+3)& (0+255),7,b
 10275  001E38  D011               	goto	l1410
 10276                           
 10277                           ; BSR set to: 0
 10278  001E3A  1F84               	comf	(___altoft@c+3)& (0+255),f,b
 10279  001E3C  1F83               	comf	(___altoft@c+2)& (0+255),f,b
 10280  001E3E  1F82               	comf	(___altoft@c+1)& (0+255),f,b
 10281  001E40  6D81               	negf	___altoft@c& (0+255),b
 10282  001E42  0E00               	movlw	0
 10283  001E44  2382               	addwfc	(___altoft@c+1)& (0+255),f,b
 10284  001E46  2383               	addwfc	(___altoft@c+2)& (0+255),f,b
 10285  001E48  2384               	addwfc	(___altoft@c+3)& (0+255),f,b
 10286                           
 10287                           ; BSR set to: 0
 10288  001E4A  0E01               	movlw	1
 10289  001E4C  6E30               	movwf	___altoft@sign,c
 10290                           
 10291                           ; BSR set to: 0
 10292  001E4E  D006               	goto	l1410
 10293  001E50                     
 10294                           ; BSR set to: 0
 10295                           
 10296                           ; BSR set to: 0
 10297  001E50  90D8               	bcf	status,0,c
 10298  001E52  3384               	rrcf	(___altoft@c+3)& (0+255),f,b
 10299  001E54  3383               	rrcf	(___altoft@c+2)& (0+255),f,b
 10300  001E56  3382               	rrcf	(___altoft@c+1)& (0+255),f,b
 10301  001E58  3381               	rrcf	___altoft@c& (0+255),f,b
 10302  001E5A  2A2F               	incf	___altoft@exp,f,c
 10303  001E5C                     l1410:
 10304                           
 10305                           ; BSR set to: 0
 10306                           
 10307                           ; BSR set to: 0
 10308  001E5C  0E00               	movlw	0
 10309  001E5E  1581               	andwf	___altoft@c& (0+255),w,b
 10310  001E60  6F85               	movwf	??___altoft& (0+255),b
 10311  001E62  0E00               	movlw	0
 10312  001E64  1582               	andwf	(___altoft@c+1)& (0+255),w,b
 10313  001E66  6F86               	movwf	(??___altoft+1)& (0+255),b
 10314  001E68  0E00               	movlw	0
 10315  001E6A  1583               	andwf	(___altoft@c+2)& (0+255),w,b
 10316  001E6C  6F87               	movwf	(??___altoft+2)& (0+255),b
 10317  001E6E  0EFF               	movlw	255
 10318  001E70  1584               	andwf	(___altoft@c+3)& (0+255),w,b
 10319  001E72  6F88               	movwf	(??___altoft+3)& (0+255),b
 10320  001E74  5185               	movf	??___altoft& (0+255),w,b
 10321  001E76  1186               	iorwf	(??___altoft+1)& (0+255),w,b
 10322  001E78  1187               	iorwf	(??___altoft+2)& (0+255),w,b
 10323  001E7A  1188               	iorwf	(??___altoft+3)& (0+255),w,b
 10324  001E7C  A4D8               	btfss	status,2,c
 10325  001E7E  D7E8               	goto	l1411
 10326                           
 10327                           ; BSR set to: 0
 10328                           
 10329                           ; BSR set to: 0
 10330  001E80  C081  F018         	movff	___altoft@c,___ftpack@arg
 10331  001E84  C082  F019         	movff	___altoft@c+1,___ftpack@arg+1
 10332  001E88  C083  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 10333  001E8C  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 10334  001E90  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 10335  001E94  EC5B  F00D         	call	___ftpack	;wreg free
 10336  001E98  C018  F081         	movff	?___ftpack,?___altoft
 10337  001E9C  C019  F082         	movff	?___ftpack+1,?___altoft+1
 10338  001EA0  C01A  F083         	movff	?___ftpack+2,?___altoft+2
 10339  001EA4  0012               	return	
 10340  001EA6                     __end_of___altoft:
 10341                           	opt stack 0
 10342                           tosu	equ	0xFFF
 10343                           tosh	equ	0xFFE
 10344                           tosl	equ	0xFFD
 10345                           pclath	equ	0xFFA
 10346                           tblptru	equ	0xFF8
 10347                           tblptrh	equ	0xFF7
 10348                           tblptrl	equ	0xFF6
 10349                           tablat	equ	0xFF5
 10350                           prodh	equ	0xFF4
 10351                           prodl	equ	0xFF3
 10352                           intcon	equ	0xFF2
 10353                           intcon2	equ	0xFF1
 10354                           postinc0	equ	0xFEE
 10355                           wreg	equ	0xFE8
 10356                           indf1	equ	0xFE7
 10357                           postdec1	equ	0xFE5
 10358                           fsr1h	equ	0xFE2
 10359                           fsr1l	equ	0xFE1
 10360                           indf2	equ	0xFDF
 10361                           postinc2	equ	0xFDE
 10362                           postdec2	equ	0xFDD
 10363                           fsr2h	equ	0xFDA
 10364                           fsr2l	equ	0xFD9
 10365                           status	equ	0xFD8
 10366                           
 10367 ;; *************** function _eval_poly *****************
 10368 ;; Defined at:
 10369 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;  x               3   30[BANK0 ] float 
 10372 ;;  d               2   33[BANK0 ] PTR const 
 10373 ;;		 -> log@coeff(27), exp@coeff(30), 
 10374 ;;  n               2   35[BANK0 ] int 
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;  res             3   37[BANK0 ] int 
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  3   30[BANK0 ] int 
 10379 ;; Registers used:
 10380 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10386 ;;      Params:         0       7       0       0       0       0       0
 10387 ;;      Locals:         0       3       0       0       0       0       0
 10388 ;;      Temps:          2       0       0       0       0       0       0
 10389 ;;      Totals:         2      10       0       0       0       0       0
 10390 ;;Total ram usage:       12 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    5
 10393 ;; This function calls:
 10394 ;;		___ftadd
 10395 ;;		___ftmul
 10396 ;;		___wmul
 10397 ;; This function is called by:
 10398 ;;		_exp
 10399 ;;		_log
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403                           	psect	text47
 10404  001862                     __ptext47:
 10405                           	opt stack 0
 10406  001862                     _eval_poly:
 10407                           	opt stack 22
 10408                           
 10409                           ;incstack = 0
 10410  001862  C083  F018         	movff	eval_poly@n,___wmul@multiplier
 10411  001866  C084  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 10412  00186A  0E00               	movlw	0
 10413  00186C  6E1B               	movwf	___wmul@multiplicand+1,c
 10414  00186E  0E03               	movlw	3
 10415  001870  6E1A               	movwf	___wmul@multiplicand,c
 10416  001872  EC75  F014         	call	___wmul	;wreg free
 10417  001876  C081  F02F         	movff	eval_poly@d,??_eval_poly
 10418  00187A  C082  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10419  00187E  5018               	movf	?___wmul,w,c
 10420  001880  262F               	addwf	??_eval_poly,f,c
 10421  001882  5019               	movf	?___wmul+1,w,c
 10422  001884  2230               	addwfc	??_eval_poly+1,f,c
 10423  001886  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10424  00188A  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10425  00188E                     	if	0	;tblptru may be non-zero
 10426  00188E                     	endif
 10427  00188E                     	if	0	;tblptru may be non-zero
 10428  00188E                     	endif
 10429  00188E  0009               	tblrd		*+
 10430  001890  CFF5 F085          	movff	tablat,eval_poly@res
 10431  001894  0009               	tblrd		*+
 10432  001896  CFF5 F086          	movff	tablat,eval_poly@res+1
 10433  00189A  000A               	tblrd		*-
 10434  00189C  CFF5 F087          	movff	tablat,eval_poly@res+2
 10435  0018A0  D03F               	goto	l2035
 10436  0018A2  C085  F069         	movff	eval_poly@res,___ftmul@f2
 10437  0018A6  C086  F06A         	movff	eval_poly@res+1,___ftmul@f2+1
 10438  0018AA  C087  F06B         	movff	eval_poly@res+2,___ftmul@f2+2
 10439  0018AE  C07E  F066         	movff	eval_poly@x,___ftmul@f1
 10440  0018B2  C07F  F067         	movff	eval_poly@x+1,___ftmul@f1+1
 10441  0018B6  C080  F068         	movff	eval_poly@x+2,___ftmul@f1+2
 10442  0018BA  EC64  F00A         	call	___ftmul	;wreg free
 10443  0018BE  C066  F072         	movff	?___ftmul,___ftadd@f1
 10444  0018C2  C067  F073         	movff	?___ftmul+1,___ftadd@f1+1
 10445  0018C6  C068  F074         	movff	?___ftmul+2,___ftadd@f1+2
 10446  0018CA  0E00               	movlw	0
 10447  0018CC  6E1B               	movwf	___wmul@multiplicand+1,c
 10448  0018CE  0E03               	movlw	3
 10449  0018D0  6E1A               	movwf	___wmul@multiplicand,c
 10450  0018D2  0100               	movlb	0	; () banked
 10451  0018D4  0783               	decf	eval_poly@n& (0+255),f,b
 10452  0018D6  A0D8               	btfss	status,0,c
 10453  0018D8  0784               	decf	(eval_poly@n+1)& (0+255),f,b
 10454  0018DA  C083  F018         	movff	eval_poly@n,___wmul@multiplier
 10455  0018DE  C084  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 10456  0018E2  EC75  F014         	call	___wmul	;wreg free
 10457  0018E6  C081  F02F         	movff	eval_poly@d,??_eval_poly
 10458  0018EA  C082  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10459  0018EE  5018               	movf	?___wmul,w,c
 10460  0018F0  262F               	addwf	??_eval_poly,f,c
 10461  0018F2  5019               	movf	?___wmul+1,w,c
 10462  0018F4  2230               	addwfc	??_eval_poly+1,f,c
 10463  0018F6  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10464  0018FA  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10465  0018FE                     	if	0	;tblptru may be non-zero
 10466  0018FE                     	endif
 10467  0018FE                     	if	0	;tblptru may be non-zero
 10468  0018FE                     	endif
 10469  0018FE  0009               	tblrd		*+
 10470  001900  CFF5 F075          	movff	tablat,___ftadd@f2
 10471  001904  0009               	tblrd		*+
 10472  001906  CFF5 F076          	movff	tablat,___ftadd@f2+1
 10473  00190A  000A               	tblrd		*-
 10474  00190C  CFF5 F077          	movff	tablat,___ftadd@f2+2
 10475  001910  ECD4  F005         	call	___ftadd	;wreg free
 10476  001914  C072  F085         	movff	?___ftadd,eval_poly@res
 10477  001918  C073  F086         	movff	?___ftadd+1,eval_poly@res+1
 10478  00191C  C074  F087         	movff	?___ftadd+2,eval_poly@res+2
 10479  001920                     l2035:
 10480  001920  0100               	movlb	0	; () banked
 10481  001922  5183               	movf	eval_poly@n& (0+255),w,b
 10482  001924  1184               	iorwf	(eval_poly@n+1)& (0+255),w,b
 10483  001926  A4D8               	btfss	status,2,c
 10484  001928  D7BC               	goto	l2036
 10485                           
 10486                           ; BSR set to: 0
 10487  00192A  C085  F07E         	movff	eval_poly@res,?_eval_poly
 10488  00192E  C086  F07F         	movff	eval_poly@res+1,?_eval_poly+1
 10489  001932  C087  F080         	movff	eval_poly@res+2,?_eval_poly+2
 10490                           
 10491                           ; BSR set to: 0
 10492  001936  0012               	return		;funcret
 10493  001938                     __end_of_eval_poly:
 10494                           	opt stack 0
 10495                           tosu	equ	0xFFF
 10496                           tosh	equ	0xFFE
 10497                           tosl	equ	0xFFD
 10498                           pclath	equ	0xFFA
 10499                           tblptru	equ	0xFF8
 10500                           tblptrh	equ	0xFF7
 10501                           tblptrl	equ	0xFF6
 10502                           tablat	equ	0xFF5
 10503                           prodh	equ	0xFF4
 10504                           prodl	equ	0xFF3
 10505                           intcon	equ	0xFF2
 10506                           intcon2	equ	0xFF1
 10507                           postinc0	equ	0xFEE
 10508                           wreg	equ	0xFE8
 10509                           indf1	equ	0xFE7
 10510                           postdec1	equ	0xFE5
 10511                           fsr1h	equ	0xFE2
 10512                           fsr1l	equ	0xFE1
 10513                           indf2	equ	0xFDF
 10514                           postinc2	equ	0xFDE
 10515                           postdec2	equ	0xFDD
 10516                           fsr2h	equ	0xFDA
 10517                           fsr2l	equ	0xFD9
 10518                           status	equ	0xFD8
 10519                           
 10520 ;; *************** function ___wmul *****************
 10521 ;; Defined at:
 10522 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 10523 ;; Parameters:    Size  Location     Type
 10524 ;;  multiplier      2   23[COMRAM] unsigned int 
 10525 ;;  multiplicand    2   25[COMRAM] unsigned int 
 10526 ;; Auto vars:     Size  Location     Type
 10527 ;;  product         2   27[COMRAM] unsigned int 
 10528 ;; Return value:  Size  Location     Type
 10529 ;;                  2   23[COMRAM] unsigned int 
 10530 ;; Registers used:
 10531 ;;		wreg, status,2, status,0, prodl, prodh
 10532 ;; Tracked objects:
 10533 ;;		On entry : 0/0
 10534 ;;		On exit  : 0/0
 10535 ;;		Unchanged: 0/0
 10536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10537 ;;      Params:         4       0       0       0       0       0       0
 10538 ;;      Locals:         2       0       0       0       0       0       0
 10539 ;;      Temps:          0       0       0       0       0       0       0
 10540 ;;      Totals:         6       0       0       0       0       0       0
 10541 ;;Total ram usage:        6 bytes
 10542 ;; Hardware stack levels used:    1
 10543 ;; Hardware stack levels required when called:    3
 10544 ;; This function calls:
 10545 ;;		Nothing
 10546 ;; This function is called by:
 10547 ;;		_eval_poly
 10548 ;; This function uses a non-reentrant model
 10549 ;;
 10550                           
 10551                           	psect	text48
 10552  0028EA                     __ptext48:
 10553                           	opt stack 0
 10554  0028EA                     ___wmul:
 10555                           	opt stack 23
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;incstack = 0
 10559  0028EA  5018               	movf	___wmul@multiplier,w,c
 10560  0028EC  021A               	mulwf	___wmul@multiplicand,c
 10561  0028EE  CFF3 F01C          	movff	prodl,___wmul@product
 10562  0028F2  CFF4 F01D          	movff	prodh,___wmul@product+1
 10563  0028F6  5018               	movf	___wmul@multiplier,w,c
 10564  0028F8  021B               	mulwf	___wmul@multiplicand+1,c
 10565  0028FA  50F3               	movf	prodl,w,c
 10566  0028FC  261D               	addwf	___wmul@product+1,f,c
 10567  0028FE  5019               	movf	___wmul@multiplier+1,w,c
 10568  002900  021A               	mulwf	___wmul@multiplicand,c
 10569  002902  50F3               	movf	prodl,w,c
 10570  002904  261D               	addwf	___wmul@product+1,f,c
 10571  002906  C01C  F018         	movff	___wmul@product,?___wmul
 10572  00290A  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 10573  00290E  0012               	return	
 10574  002910                     __end_of___wmul:
 10575                           	opt stack 0
 10576                           tosu	equ	0xFFF
 10577                           tosh	equ	0xFFE
 10578                           tosl	equ	0xFFD
 10579                           pclath	equ	0xFFA
 10580                           tblptru	equ	0xFF8
 10581                           tblptrh	equ	0xFF7
 10582                           tblptrl	equ	0xFF6
 10583                           tablat	equ	0xFF5
 10584                           prodh	equ	0xFF4
 10585                           prodl	equ	0xFF3
 10586                           intcon	equ	0xFF2
 10587                           intcon2	equ	0xFF1
 10588                           postinc0	equ	0xFEE
 10589                           wreg	equ	0xFE8
 10590                           indf1	equ	0xFE7
 10591                           postdec1	equ	0xFE5
 10592                           fsr1h	equ	0xFE2
 10593                           fsr1l	equ	0xFE1
 10594                           indf2	equ	0xFDF
 10595                           postinc2	equ	0xFDE
 10596                           postdec2	equ	0xFDD
 10597                           fsr2h	equ	0xFDA
 10598                           fsr2l	equ	0xFD9
 10599                           status	equ	0xFD8
 10600                           
 10601 ;; *************** function ___ftmul *****************
 10602 ;; Defined at:
 10603 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 10604 ;; Parameters:    Size  Location     Type
 10605 ;;  f1              3    6[BANK0 ] float 
 10606 ;;  f2              3    9[BANK0 ] float 
 10607 ;; Auto vars:     Size  Location     Type
 10608 ;;  f3_as_produc    3   13[BANK0 ] unsigned um
 10609 ;;  sign            1   17[BANK0 ] unsigned char 
 10610 ;;  cntr            1   16[BANK0 ] unsigned char 
 10611 ;;  exp             1   12[BANK0 ] unsigned char 
 10612 ;; Return value:  Size  Location     Type
 10613 ;;                  3    6[BANK0 ] float 
 10614 ;; Registers used:
 10615 ;;		wreg, status,2, status,0, cstack
 10616 ;; Tracked objects:
 10617 ;;		On entry : 0/0
 10618 ;;		On exit  : 0/0
 10619 ;;		Unchanged: 0/0
 10620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10621 ;;      Params:         0       6       0       0       0       0       0
 10622 ;;      Locals:         0       6       0       0       0       0       0
 10623 ;;      Temps:          3       0       0       0       0       0       0
 10624 ;;      Totals:         3      12       0       0       0       0       0
 10625 ;;Total ram usage:       15 bytes
 10626 ;; Hardware stack levels used:    1
 10627 ;; Hardware stack levels required when called:    4
 10628 ;; This function calls:
 10629 ;;		___ftpack
 10630 ;; This function is called by:
 10631 ;;		_SampleSingleChannel
 10632 ;;		_pow
 10633 ;;		_exp
 10634 ;;		_log
 10635 ;;		_eval_poly
 10636 ;;		_CheckFlashPrecentage
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           	psect	text49
 10641  0014C8                     __ptext49:
 10642                           	opt stack 0
 10643  0014C8                     ___ftmul:
 10644                           	opt stack 22
 10645                           
 10646                           ;incstack = 0
 10647  0014C8  C068  F02C         	movff	___ftmul@f1+2,??___ftmul
 10648  0014CC  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 10649  0014CE  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 10650  0014D0  0100               	movlb	0	; () banked
 10651  0014D2  3567               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10652  0014D4  362C               	rlcf	??___ftmul& (0+255),f,c
 10653  0014D6  E301               	bnc	u6781
 10654  0014D8  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 10655  0014DA                     u6781:
 10656  0014DA  502C               	movf	??___ftmul,w,c
 10657  0014DC  6F6C               	movwf	___ftmul@exp& (0+255),b
 10658  0014DE  516C               	movf	___ftmul@exp& (0+255),w,b
 10659  0014E0  A4D8               	btfss	status,2,c
 10660  0014E2  D007               	goto	l1619
 10661                           
 10662                           ; BSR set to: 0
 10663  0014E4  0E00               	movlw	0
 10664  0014E6  6F66               	movwf	?___ftmul& (0+255),b
 10665  0014E8  0E00               	movlw	0
 10666  0014EA  6F67               	movwf	(?___ftmul+1)& (0+255),b
 10667  0014EC  0E00               	movlw	0
 10668  0014EE  6F68               	movwf	(?___ftmul+2)& (0+255),b
 10669                           
 10670                           ; BSR set to: 0
 10671  0014F0  0012               	return	
 10672  0014F2                     l1619:
 10673                           
 10674                           ; BSR set to: 0
 10675                           
 10676                           ; BSR set to: 0
 10677  0014F2  C06B  F02C         	movff	___ftmul@f2+2,??___ftmul
 10678  0014F6  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 10679  0014F8  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 10680  0014FA  356A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10681  0014FC  362C               	rlcf	??___ftmul& (0+255),f,c
 10682  0014FE  E301               	bnc	u6801
 10683  001500  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 10684  001502                     u6801:
 10685  001502  502C               	movf	??___ftmul,w,c
 10686  001504  6F71               	movwf	___ftmul@sign& (0+255),b
 10687  001506  5171               	movf	___ftmul@sign& (0+255),w,b
 10688  001508  A4D8               	btfss	status,2,c
 10689  00150A  D007               	goto	l1621
 10690                           
 10691                           ; BSR set to: 0
 10692  00150C  0E00               	movlw	0
 10693  00150E  6F66               	movwf	?___ftmul& (0+255),b
 10694  001510  0E00               	movlw	0
 10695  001512  6F67               	movwf	(?___ftmul+1)& (0+255),b
 10696  001514  0E00               	movlw	0
 10697  001516  6F68               	movwf	(?___ftmul+2)& (0+255),b
 10698                           
 10699                           ; BSR set to: 0
 10700  001518  0012               	return	
 10701  00151A                     l1621:
 10702                           
 10703                           ; BSR set to: 0
 10704                           
 10705                           ; BSR set to: 0
 10706  00151A  5171               	movf	___ftmul@sign& (0+255),w,b
 10707  00151C  0F7B               	addlw	123
 10708  00151E  276C               	addwf	___ftmul@exp& (0+255),f,b
 10709                           
 10710                           ; BSR set to: 0
 10711  001520  C068  F071         	movff	___ftmul@f1+2,___ftmul@sign
 10712  001524  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 10713  001526  1B71               	xorwf	___ftmul@sign& (0+255),f,b
 10714  001528  0E80               	movlw	128
 10715  00152A  1771               	andwf	___ftmul@sign& (0+255),f,b
 10716                           
 10717                           ; BSR set to: 0
 10718  00152C  8F67               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10719                           
 10720                           ; BSR set to: 0
 10721  00152E  8F6A               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10722                           
 10723                           ; BSR set to: 0
 10724  001530  0EFF               	movlw	255
 10725  001532  1769               	andwf	___ftmul@f2& (0+255),f,b
 10726  001534  0EFF               	movlw	255
 10727  001536  176A               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10728  001538  0E00               	movlw	0
 10729  00153A  176B               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10730                           
 10731                           ; BSR set to: 0
 10732  00153C  0E00               	movlw	0
 10733  00153E  6F6D               	movwf	___ftmul@f3_as_product& (0+255),b
 10734  001540  0E00               	movlw	0
 10735  001542  6F6E               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10736  001544  0E00               	movlw	0
 10737  001546  6F6F               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10738                           
 10739                           ; BSR set to: 0
 10740  001548  0E07               	movlw	7
 10741  00154A  6F70               	movwf	___ftmul@cntr& (0+255),b
 10742  00154C                     
 10743                           ; BSR set to: 0
 10744                           
 10745                           ; BSR set to: 0
 10746  00154C  A166               	btfss	___ftmul@f1& (0+255),0,b
 10747  00154E  D006               	goto	l1623
 10748                           
 10749                           ; BSR set to: 0
 10750  001550  5169               	movf	___ftmul@f2& (0+255),w,b
 10751  001552  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10752  001554  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 10753  001556  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10754  001558  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 10755  00155A  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10756  00155C                     l1623:
 10757                           
 10758                           ; BSR set to: 0
 10759                           
 10760                           ; BSR set to: 0
 10761  00155C  90D8               	bcf	status,0,c
 10762  00155E  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10763  001560  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10764  001562  3366               	rrcf	___ftmul@f1& (0+255),f,b
 10765  001564  90D8               	bcf	status,0,c
 10766  001566  3769               	rlcf	___ftmul@f2& (0+255),f,b
 10767  001568  376A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10768  00156A  376B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10769                           
 10770                           ; BSR set to: 0
 10771  00156C  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 10772  00156E  D7EE               	goto	l1622
 10773                           
 10774                           ; BSR set to: 0
 10775                           
 10776                           ; BSR set to: 0
 10777  001570  0E09               	movlw	9
 10778  001572  6F70               	movwf	___ftmul@cntr& (0+255),b
 10779  001574                     
 10780                           ; BSR set to: 0
 10781                           
 10782                           ; BSR set to: 0
 10783  001574  A166               	btfss	___ftmul@f1& (0+255),0,b
 10784  001576  D006               	goto	l1626
 10785                           
 10786                           ; BSR set to: 0
 10787  001578  5169               	movf	___ftmul@f2& (0+255),w,b
 10788  00157A  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10789  00157C  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 10790  00157E  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10791  001580  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 10792  001582  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10793  001584                     l1626:
 10794                           
 10795                           ; BSR set to: 0
 10796                           
 10797                           ; BSR set to: 0
 10798  001584  90D8               	bcf	status,0,c
 10799  001586  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10800  001588  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10801  00158A  3366               	rrcf	___ftmul@f1& (0+255),f,b
 10802  00158C  90D8               	bcf	status,0,c
 10803  00158E  336F               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10804  001590  336E               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10805  001592  336D               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10806                           
 10807                           ; BSR set to: 0
 10808  001594  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 10809  001596  D7EE               	goto	l1625
 10810                           
 10811                           ; BSR set to: 0
 10812                           
 10813                           ; BSR set to: 0
 10814  001598  C06D  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 10815  00159C  C06E  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10816  0015A0  C06F  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10817  0015A4  C06C  F01B         	movff	___ftmul@exp,___ftpack@exp
 10818  0015A8  C071  F01C         	movff	___ftmul@sign,___ftpack@sign
 10819  0015AC  EC5B  F00D         	call	___ftpack	;wreg free
 10820  0015B0  C018  F066         	movff	?___ftpack,?___ftmul
 10821  0015B4  C019  F067         	movff	?___ftpack+1,?___ftmul+1
 10822  0015B8  C01A  F068         	movff	?___ftpack+2,?___ftmul+2
 10823  0015BC  0012               	return	
 10824  0015BE                     __end_of___ftmul:
 10825                           	opt stack 0
 10826                           tosu	equ	0xFFF
 10827                           tosh	equ	0xFFE
 10828                           tosl	equ	0xFFD
 10829                           pclath	equ	0xFFA
 10830                           tblptru	equ	0xFF8
 10831                           tblptrh	equ	0xFF7
 10832                           tblptrl	equ	0xFF6
 10833                           tablat	equ	0xFF5
 10834                           prodh	equ	0xFF4
 10835                           prodl	equ	0xFF3
 10836                           intcon	equ	0xFF2
 10837                           intcon2	equ	0xFF1
 10838                           postinc0	equ	0xFEE
 10839                           wreg	equ	0xFE8
 10840                           indf1	equ	0xFE7
 10841                           postdec1	equ	0xFE5
 10842                           fsr1h	equ	0xFE2
 10843                           fsr1l	equ	0xFE1
 10844                           indf2	equ	0xFDF
 10845                           postinc2	equ	0xFDE
 10846                           postdec2	equ	0xFDD
 10847                           fsr2h	equ	0xFDA
 10848                           fsr2l	equ	0xFD9
 10849                           status	equ	0xFD8
 10850                           
 10851 ;; *************** function ___ftsub *****************
 10852 ;; Defined at:
 10853 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 10854 ;; Parameters:    Size  Location     Type
 10855 ;;  f1              3   30[BANK0 ] float 
 10856 ;;  f2              3   33[BANK0 ] float 
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;		None
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  3   30[BANK0 ] float 
 10861 ;; Registers used:
 10862 ;;		wreg, status,2, status,0, cstack
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10868 ;;      Params:         0       6       0       0       0       0       0
 10869 ;;      Locals:         0       0       0       0       0       0       0
 10870 ;;      Temps:          0       0       0       0       0       0       0
 10871 ;;      Totals:         0       6       0       0       0       0       0
 10872 ;;Total ram usage:        6 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    5
 10875 ;; This function calls:
 10876 ;;		___ftadd
 10877 ;; This function is called by:
 10878 ;;		_exp
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882                           	psect	text50
 10883  0025C0                     __ptext50:
 10884                           	opt stack 0
 10885  0025C0                     ___ftsub:
 10886                           	opt stack 22
 10887                           
 10888                           ;incstack = 0
 10889  0025C0  0100               	movlb	0	; () banked
 10890  0025C2  5181               	movf	___ftsub@f2& (0+255),w,b
 10891  0025C4  1182               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10892  0025C6  1183               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10893  0025C8  B4D8               	btfsc	status,2,c
 10894  0025CA  D006               	goto	l1636
 10895                           
 10896                           ; BSR set to: 0
 10897  0025CC  0E00               	movlw	0
 10898  0025CE  1B81               	xorwf	___ftsub@f2& (0+255),f,b
 10899  0025D0  0E00               	movlw	0
 10900  0025D2  1B82               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10901  0025D4  0E80               	movlw	128
 10902  0025D6  1B83               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10903  0025D8                     l1636:
 10904                           
 10905                           ; BSR set to: 0
 10906                           
 10907                           ; BSR set to: 0
 10908  0025D8  C07E  F072         	movff	___ftsub@f1,___ftadd@f1
 10909  0025DC  C07F  F073         	movff	___ftsub@f1+1,___ftadd@f1+1
 10910  0025E0  C080  F074         	movff	___ftsub@f1+2,___ftadd@f1+2
 10911  0025E4  C081  F075         	movff	___ftsub@f2,___ftadd@f2
 10912  0025E8  C082  F076         	movff	___ftsub@f2+1,___ftadd@f2+1
 10913  0025EC  C083  F077         	movff	___ftsub@f2+2,___ftadd@f2+2
 10914  0025F0  ECD4  F005         	call	___ftadd	;wreg free
 10915  0025F4  C072  F07E         	movff	?___ftadd,?___ftsub
 10916  0025F8  C073  F07F         	movff	?___ftadd+1,?___ftsub+1
 10917  0025FC  C074  F080         	movff	?___ftadd+2,?___ftsub+2
 10918  002600  0012               	return	
 10919  002602                     __end_of___ftsub:
 10920                           	opt stack 0
 10921                           tosu	equ	0xFFF
 10922                           tosh	equ	0xFFE
 10923                           tosl	equ	0xFFD
 10924                           pclath	equ	0xFFA
 10925                           tblptru	equ	0xFF8
 10926                           tblptrh	equ	0xFF7
 10927                           tblptrl	equ	0xFF6
 10928                           tablat	equ	0xFF5
 10929                           prodh	equ	0xFF4
 10930                           prodl	equ	0xFF3
 10931                           intcon	equ	0xFF2
 10932                           intcon2	equ	0xFF1
 10933                           postinc0	equ	0xFEE
 10934                           wreg	equ	0xFE8
 10935                           indf1	equ	0xFE7
 10936                           postdec1	equ	0xFE5
 10937                           fsr1h	equ	0xFE2
 10938                           fsr1l	equ	0xFE1
 10939                           indf2	equ	0xFDF
 10940                           postinc2	equ	0xFDE
 10941                           postdec2	equ	0xFDD
 10942                           fsr2h	equ	0xFDA
 10943                           fsr2l	equ	0xFD9
 10944                           status	equ	0xFD8
 10945                           
 10946 ;; *************** function ___ftadd *****************
 10947 ;; Defined at:
 10948 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 10949 ;; Parameters:    Size  Location     Type
 10950 ;;  f1              3   18[BANK0 ] float 
 10951 ;;  f2              3   21[BANK0 ] float 
 10952 ;; Auto vars:     Size  Location     Type
 10953 ;;  exp1            1   29[BANK0 ] unsigned char 
 10954 ;;  exp2            1   28[BANK0 ] unsigned char 
 10955 ;;  sign            1   27[BANK0 ] unsigned char 
 10956 ;; Return value:  Size  Location     Type
 10957 ;;                  3   18[BANK0 ] float 
 10958 ;; Registers used:
 10959 ;;		wreg, status,2, status,0, cstack
 10960 ;; Tracked objects:
 10961 ;;		On entry : 0/0
 10962 ;;		On exit  : 0/0
 10963 ;;		Unchanged: 0/0
 10964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10965 ;;      Params:         0       6       0       0       0       0       0
 10966 ;;      Locals:         0       3       0       0       0       0       0
 10967 ;;      Temps:          0       3       0       0       0       0       0
 10968 ;;      Totals:         0      12       0       0       0       0       0
 10969 ;;Total ram usage:       12 bytes
 10970 ;; Hardware stack levels used:    1
 10971 ;; Hardware stack levels required when called:    4
 10972 ;; This function calls:
 10973 ;;		___ftpack
 10974 ;; This function is called by:
 10975 ;;		___ftsub
 10976 ;;		_floor
 10977 ;;		_log
 10978 ;;		_eval_poly
 10979 ;; This function uses a non-reentrant model
 10980 ;;
 10981                           
 10982                           	psect	text51
 10983  000BA8                     __ptext51:
 10984                           	opt stack 0
 10985  000BA8                     ___ftadd:
 10986                           	opt stack 22
 10987                           
 10988                           ;incstack = 0
 10989  000BA8  C074  F078         	movff	___ftadd@f1+2,??___ftadd
 10990  000BAC  0100               	movlb	0	; () banked
 10991  000BAE  6B79               	clrf	(??___ftadd+1)& (0+255),b
 10992  000BB0  6B7A               	clrf	(??___ftadd+2)& (0+255),b
 10993  000BB2  3573               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10994  000BB4  3778               	rlcf	??___ftadd& (0+255),f,b
 10995  000BB6  E301               	bnc	u6571
 10996  000BB8  8179               	bsf	(??___ftadd+1)& (0+255),0,b
 10997  000BBA                     u6571:
 10998  000BBA  5178               	movf	??___ftadd& (0+255),w,b
 10999  000BBC  6F7D               	movwf	___ftadd@exp1& (0+255),b
 11000  000BBE  C077  F078         	movff	___ftadd@f2+2,??___ftadd
 11001  000BC2  6B79               	clrf	(??___ftadd+1)& (0+255),b
 11002  000BC4  6B7A               	clrf	(??___ftadd+2)& (0+255),b
 11003  000BC6  3576               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11004  000BC8  3778               	rlcf	??___ftadd& (0+255),f,b
 11005  000BCA  E301               	bnc	u6581
 11006  000BCC  8179               	bsf	(??___ftadd+1)& (0+255),0,b
 11007  000BCE                     u6581:
 11008  000BCE  5178               	movf	??___ftadd& (0+255),w,b
 11009  000BD0  6F7C               	movwf	___ftadd@exp2& (0+255),b
 11010                           
 11011                           ; BSR set to: 0
 11012  000BD2  517D               	movf	___ftadd@exp1& (0+255),w,b
 11013  000BD4  B4D8               	btfsc	status,2,c
 11014  000BD6  D00B               	goto	u6610
 11015                           
 11016                           ; BSR set to: 0
 11017  000BD8  517C               	movf	___ftadd@exp2& (0+255),w,b
 11018  000BDA  5D7D               	subwf	___ftadd@exp1& (0+255),w,b
 11019  000BDC  B0D8               	btfsc	status,0,c
 11020  000BDE  D00E               	goto	l1571
 11021                           
 11022                           ; BSR set to: 0
 11023  000BE0  517D               	movf	___ftadd@exp1& (0+255),w,b
 11024  000BE2  0800               	sublw	0
 11025  000BE4  257C               	addwf	___ftadd@exp2& (0+255),w,b
 11026  000BE6  6F78               	movwf	??___ftadd& (0+255),b
 11027  000BE8  0E18               	movlw	24
 11028  000BEA  6578               	cpfsgt	??___ftadd& (0+255),b
 11029  000BEC  D007               	goto	l1571
 11030  000BEE                     u6610:
 11031                           
 11032                           ; BSR set to: 0
 11033  000BEE  C075  F072         	movff	___ftadd@f2,?___ftadd
 11034  000BF2  C076  F073         	movff	___ftadd@f2+1,?___ftadd+1
 11035  000BF6  C077  F074         	movff	___ftadd@f2+2,?___ftadd+2
 11036  000BFA  0012               	return	
 11037  000BFC                     l1571:
 11038                           
 11039                           ; BSR set to: 0
 11040                           
 11041                           ; BSR set to: 0
 11042  000BFC  517C               	movf	___ftadd@exp2& (0+255),w,b
 11043  000BFE  B4D8               	btfsc	status,2,c
 11044  000C00  D00B               	goto	u6640
 11045                           
 11046                           ; BSR set to: 0
 11047  000C02  517D               	movf	___ftadd@exp1& (0+255),w,b
 11048  000C04  5D7C               	subwf	___ftadd@exp2& (0+255),w,b
 11049  000C06  B0D8               	btfsc	status,0,c
 11050  000C08  D00E               	goto	l1575
 11051                           
 11052                           ; BSR set to: 0
 11053  000C0A  517C               	movf	___ftadd@exp2& (0+255),w,b
 11054  000C0C  0800               	sublw	0
 11055  000C0E  257D               	addwf	___ftadd@exp1& (0+255),w,b
 11056  000C10  6F78               	movwf	??___ftadd& (0+255),b
 11057  000C12  0E18               	movlw	24
 11058  000C14  6578               	cpfsgt	??___ftadd& (0+255),b
 11059  000C16  D007               	goto	l1575
 11060  000C18                     u6640:
 11061                           
 11062                           ; BSR set to: 0
 11063  000C18  C072  F072         	movff	___ftadd@f1,?___ftadd
 11064  000C1C  C073  F073         	movff	___ftadd@f1+1,?___ftadd+1
 11065  000C20  C074  F074         	movff	___ftadd@f1+2,?___ftadd+2
 11066  000C24  0012               	return	
 11067  000C26                     l1575:
 11068                           
 11069                           ; BSR set to: 0
 11070                           
 11071                           ; BSR set to: 0
 11072  000C26  0E06               	movlw	6
 11073  000C28  6F7B               	movwf	___ftadd@sign& (0+255),b
 11074                           
 11075                           ; BSR set to: 0
 11076  000C2A  BF74               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 11077                           
 11078                           ; BSR set to: 0
 11079  000C2C  8F7B               	bsf	___ftadd@sign& (0+255),7,b
 11080                           
 11081                           ; BSR set to: 0
 11082                           
 11083                           ; BSR set to: 0
 11084  000C2E  BF77               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 11085                           
 11086                           ; BSR set to: 0
 11087  000C30  8D7B               	bsf	___ftadd@sign& (0+255),6,b
 11088                           
 11089                           ; BSR set to: 0
 11090  000C32  8F73               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11091                           
 11092                           ; BSR set to: 0
 11093  000C34  0EFF               	movlw	255
 11094  000C36  1772               	andwf	___ftadd@f1& (0+255),f,b
 11095  000C38  0EFF               	movlw	255
 11096  000C3A  1773               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11097  000C3C  0E00               	movlw	0
 11098  000C3E  1774               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11099  000C40  8F76               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11100                           
 11101                           ; BSR set to: 0
 11102  000C42  0EFF               	movlw	255
 11103  000C44  1775               	andwf	___ftadd@f2& (0+255),f,b
 11104  000C46  0EFF               	movlw	255
 11105  000C48  1776               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11106  000C4A  0E00               	movlw	0
 11107  000C4C  1777               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11108                           
 11109                           ; BSR set to: 0
 11110  000C4E  517C               	movf	___ftadd@exp2& (0+255),w,b
 11111  000C50  5D7D               	subwf	___ftadd@exp1& (0+255),w,b
 11112  000C52  B0D8               	btfsc	status,0,c
 11113  000C54  D01B               	goto	l1580
 11114  000C56                     u6670:
 11115                           
 11116                           ; BSR set to: 0
 11117                           
 11118                           ; BSR set to: 0
 11119  000C56  90D8               	bcf	status,0,c
 11120  000C58  3775               	rlcf	___ftadd@f2& (0+255),f,b
 11121  000C5A  3776               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11122  000C5C  3777               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11123  000C5E  077C               	decf	___ftadd@exp2& (0+255),f,b
 11124                           
 11125                           ; BSR set to: 0
 11126  000C60  517D               	movf	___ftadd@exp1& (0+255),w,b
 11127  000C62  197C               	xorwf	___ftadd@exp2& (0+255),w,b
 11128  000C64  B4D8               	btfsc	status,2,c
 11129  000C66  D00D               	goto	l1585
 11130                           
 11131                           ; BSR set to: 0
 11132  000C68  077B               	decf	___ftadd@sign& (0+255),f,b
 11133  000C6A  C07B  F078         	movff	___ftadd@sign,??___ftadd
 11134  000C6E  0E07               	movlw	7
 11135  000C70  1778               	andwf	??___ftadd& (0+255),f,b
 11136  000C72  B4D8               	btfsc	status,2,c
 11137  000C74  D006               	goto	l1585
 11138  000C76  D7EF               	goto	u6670
 11139  000C78                     
 11140                           ; BSR set to: 0
 11141                           
 11142                           ; BSR set to: 0
 11143  000C78  90D8               	bcf	status,0,c
 11144  000C7A  3374               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11145  000C7C  3373               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11146  000C7E  3372               	rrcf	___ftadd@f1& (0+255),f,b
 11147  000C80  2B7D               	incf	___ftadd@exp1& (0+255),f,b
 11148  000C82                     l1585:
 11149                           
 11150                           ; BSR set to: 0
 11151                           
 11152                           ; BSR set to: 0
 11153  000C82  517C               	movf	___ftadd@exp2& (0+255),w,b
 11154  000C84  197D               	xorwf	___ftadd@exp1& (0+255),w,b
 11155  000C86  B4D8               	btfsc	status,2,c
 11156  000C88  D01F               	goto	u6740
 11157  000C8A  D7F6               	goto	l1586
 11158  000C8C                     l1580:
 11159                           
 11160                           ; BSR set to: 0
 11161                           
 11162                           ; BSR set to: 0
 11163  000C8C  517D               	movf	___ftadd@exp1& (0+255),w,b
 11164  000C8E  5D7C               	subwf	___ftadd@exp2& (0+255),w,b
 11165  000C90  B0D8               	btfsc	status,0,c
 11166  000C92  D01A               	goto	u6740
 11167  000C94                     u6710:
 11168                           
 11169                           ; BSR set to: 0
 11170                           
 11171                           ; BSR set to: 0
 11172  000C94  90D8               	bcf	status,0,c
 11173  000C96  3772               	rlcf	___ftadd@f1& (0+255),f,b
 11174  000C98  3773               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11175  000C9A  3774               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11176  000C9C  077D               	decf	___ftadd@exp1& (0+255),f,b
 11177                           
 11178                           ; BSR set to: 0
 11179  000C9E  517D               	movf	___ftadd@exp1& (0+255),w,b
 11180  000CA0  197C               	xorwf	___ftadd@exp2& (0+255),w,b
 11181  000CA2  B4D8               	btfsc	status,2,c
 11182  000CA4  D00D               	goto	l1594
 11183                           
 11184                           ; BSR set to: 0
 11185  000CA6  077B               	decf	___ftadd@sign& (0+255),f,b
 11186  000CA8  C07B  F078         	movff	___ftadd@sign,??___ftadd
 11187  000CAC  0E07               	movlw	7
 11188  000CAE  1778               	andwf	??___ftadd& (0+255),f,b
 11189  000CB0  B4D8               	btfsc	status,2,c
 11190  000CB2  D006               	goto	l1594
 11191  000CB4  D7EF               	goto	u6710
 11192  000CB6                     
 11193                           ; BSR set to: 0
 11194                           
 11195                           ; BSR set to: 0
 11196  000CB6  90D8               	bcf	status,0,c
 11197  000CB8  3377               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11198  000CBA  3376               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11199  000CBC  3375               	rrcf	___ftadd@f2& (0+255),f,b
 11200  000CBE  2B7C               	incf	___ftadd@exp2& (0+255),f,b
 11201  000CC0                     l1594:
 11202                           
 11203                           ; BSR set to: 0
 11204                           
 11205                           ; BSR set to: 0
 11206  000CC0  517C               	movf	___ftadd@exp2& (0+255),w,b
 11207  000CC2  197D               	xorwf	___ftadd@exp1& (0+255),w,b
 11208  000CC4  A4D8               	btfss	status,2,c
 11209  000CC6  D7F7               	goto	l1595
 11210  000CC8                     u6740:
 11211                           
 11212                           ; BSR set to: 0
 11213                           
 11214                           ; BSR set to: 0
 11215                           
 11216                           ; BSR set to: 0
 11217  000CC8  AF7B               	btfss	___ftadd@sign& (0+255),7,b
 11218  000CCA  D00C               	goto	l1597
 11219                           
 11220                           ; BSR set to: 0
 11221  000CCC  0EFF               	movlw	255
 11222  000CCE  1B72               	xorwf	___ftadd@f1& (0+255),f,b
 11223  000CD0  0EFF               	movlw	255
 11224  000CD2  1B73               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11225  000CD4  0EFF               	movlw	255
 11226  000CD6  1B74               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11227  000CD8  0E01               	movlw	1
 11228  000CDA  2772               	addwf	___ftadd@f1& (0+255),f,b
 11229  000CDC  0E00               	movlw	0
 11230  000CDE  2373               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11231  000CE0  0E00               	movlw	0
 11232  000CE2  2374               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11233  000CE4                     l1597:
 11234                           
 11235                           ; BSR set to: 0
 11236  000CE4  AD7B               	btfss	___ftadd@sign& (0+255),6,b
 11237  000CE6  D00C               	goto	l1598
 11238                           
 11239                           ; BSR set to: 0
 11240  000CE8  0EFF               	movlw	255
 11241  000CEA  1B75               	xorwf	___ftadd@f2& (0+255),f,b
 11242  000CEC  0EFF               	movlw	255
 11243  000CEE  1B76               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11244  000CF0  0EFF               	movlw	255
 11245  000CF2  1B77               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11246  000CF4  0E01               	movlw	1
 11247  000CF6  2775               	addwf	___ftadd@f2& (0+255),f,b
 11248  000CF8  0E00               	movlw	0
 11249  000CFA  2376               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11250  000CFC  0E00               	movlw	0
 11251  000CFE  2377               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11252  000D00                     l1598:
 11253                           
 11254                           ; BSR set to: 0
 11255                           
 11256                           ; BSR set to: 0
 11257  000D00  0E00               	movlw	0
 11258  000D02  6F7B               	movwf	___ftadd@sign& (0+255),b
 11259                           
 11260                           ; BSR set to: 0
 11261  000D04  5172               	movf	___ftadd@f1& (0+255),w,b
 11262  000D06  2775               	addwf	___ftadd@f2& (0+255),f,b
 11263  000D08  5173               	movf	(___ftadd@f1+1)& (0+255),w,b
 11264  000D0A  2376               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11265  000D0C  5174               	movf	(___ftadd@f1+2)& (0+255),w,b
 11266  000D0E  2377               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11267                           
 11268                           ; BSR set to: 0
 11269  000D10  AF77               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11270  000D12  D00E               	goto	l1599
 11271                           
 11272                           ; BSR set to: 0
 11273  000D14  0EFF               	movlw	255
 11274  000D16  1B75               	xorwf	___ftadd@f2& (0+255),f,b
 11275  000D18  0EFF               	movlw	255
 11276  000D1A  1B76               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11277  000D1C  0EFF               	movlw	255
 11278  000D1E  1B77               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11279  000D20  0E01               	movlw	1
 11280  000D22  2775               	addwf	___ftadd@f2& (0+255),f,b
 11281  000D24  0E00               	movlw	0
 11282  000D26  2376               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11283  000D28  0E00               	movlw	0
 11284  000D2A  2377               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11285                           
 11286                           ; BSR set to: 0
 11287  000D2C  0E01               	movlw	1
 11288  000D2E  6F7B               	movwf	___ftadd@sign& (0+255),b
 11289  000D30                     l1599:
 11290                           
 11291                           ; BSR set to: 0
 11292                           
 11293                           ; BSR set to: 0
 11294  000D30  C075  F018         	movff	___ftadd@f2,___ftpack@arg
 11295  000D34  C076  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 11296  000D38  C077  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 11297  000D3C  C07D  F01B         	movff	___ftadd@exp1,___ftpack@exp
 11298  000D40  C07B  F01C         	movff	___ftadd@sign,___ftpack@sign
 11299  000D44  EC5B  F00D         	call	___ftpack	;wreg free
 11300  000D48  C018  F072         	movff	?___ftpack,?___ftadd
 11301  000D4C  C019  F073         	movff	?___ftpack+1,?___ftadd+1
 11302  000D50  C01A  F074         	movff	?___ftpack+2,?___ftadd+2
 11303  000D54  0012               	return	
 11304  000D56                     __end_of___ftadd:
 11305                           	opt stack 0
 11306                           tosu	equ	0xFFF
 11307                           tosh	equ	0xFFE
 11308                           tosl	equ	0xFFD
 11309                           pclath	equ	0xFFA
 11310                           tblptru	equ	0xFF8
 11311                           tblptrh	equ	0xFF7
 11312                           tblptrl	equ	0xFF6
 11313                           tablat	equ	0xFF5
 11314                           prodh	equ	0xFF4
 11315                           prodl	equ	0xFF3
 11316                           intcon	equ	0xFF2
 11317                           intcon2	equ	0xFF1
 11318                           postinc0	equ	0xFEE
 11319                           wreg	equ	0xFE8
 11320                           indf1	equ	0xFE7
 11321                           postdec1	equ	0xFE5
 11322                           fsr1h	equ	0xFE2
 11323                           fsr1l	equ	0xFE1
 11324                           indf2	equ	0xFDF
 11325                           postinc2	equ	0xFDE
 11326                           postdec2	equ	0xFDD
 11327                           fsr2h	equ	0xFDA
 11328                           fsr2l	equ	0xFD9
 11329                           status	equ	0xFD8
 11330                           
 11331 ;; *************** function ___ftneg *****************
 11332 ;; Defined at:
 11333 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 11334 ;; Parameters:    Size  Location     Type
 11335 ;;  f1              3   23[COMRAM] float 
 11336 ;; Auto vars:     Size  Location     Type
 11337 ;;		None
 11338 ;; Return value:  Size  Location     Type
 11339 ;;                  3   23[COMRAM] float 
 11340 ;; Registers used:
 11341 ;;		wreg, status,2, status,0
 11342 ;; Tracked objects:
 11343 ;;		On entry : 0/0
 11344 ;;		On exit  : 0/0
 11345 ;;		Unchanged: 0/0
 11346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11347 ;;      Params:         3       0       0       0       0       0       0
 11348 ;;      Locals:         0       0       0       0       0       0       0
 11349 ;;      Temps:          0       0       0       0       0       0       0
 11350 ;;      Totals:         3       0       0       0       0       0       0
 11351 ;;Total ram usage:        3 bytes
 11352 ;; Hardware stack levels used:    1
 11353 ;; Hardware stack levels required when called:    3
 11354 ;; This function calls:
 11355 ;;		Nothing
 11356 ;; This function is called by:
 11357 ;;		_pow
 11358 ;;		_exp
 11359 ;; This function uses a non-reentrant model
 11360 ;;
 11361                           
 11362                           	psect	text52
 11363  002934                     __ptext52:
 11364                           	opt stack 0
 11365  002934                     ___ftneg:
 11366                           	opt stack 24
 11367                           
 11368                           ;incstack = 0
 11369  002934  5018               	movf	___ftneg@f1,w,c
 11370  002936  1019               	iorwf	___ftneg@f1+1,w,c
 11371  002938  101A               	iorwf	___ftneg@f1+2,w,c
 11372  00293A  B4D8               	btfsc	status,2,c
 11373  00293C  D006               	goto	l1630
 11374  00293E  0E00               	movlw	0
 11375  002940  1A18               	xorwf	___ftneg@f1,f,c
 11376  002942  0E00               	movlw	0
 11377  002944  1A19               	xorwf	___ftneg@f1+1,f,c
 11378  002946  0E80               	movlw	128
 11379  002948  1A1A               	xorwf	___ftneg@f1+2,f,c
 11380  00294A                     l1630:
 11381  00294A  C018  F018         	movff	___ftneg@f1,?___ftneg
 11382  00294E  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 11383  002952  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 11384  002956  0012               	return		;funcret
 11385  002958                     __end_of___ftneg:
 11386                           	opt stack 0
 11387                           tosu	equ	0xFFF
 11388                           tosh	equ	0xFFE
 11389                           tosl	equ	0xFFD
 11390                           pclath	equ	0xFFA
 11391                           tblptru	equ	0xFF8
 11392                           tblptrh	equ	0xFF7
 11393                           tblptrl	equ	0xFF6
 11394                           tablat	equ	0xFF5
 11395                           prodh	equ	0xFF4
 11396                           prodl	equ	0xFF3
 11397                           intcon	equ	0xFF2
 11398                           intcon2	equ	0xFF1
 11399                           postinc0	equ	0xFEE
 11400                           wreg	equ	0xFE8
 11401                           indf1	equ	0xFE7
 11402                           postdec1	equ	0xFE5
 11403                           fsr1h	equ	0xFE2
 11404                           fsr1l	equ	0xFE1
 11405                           indf2	equ	0xFDF
 11406                           postinc2	equ	0xFDE
 11407                           postdec2	equ	0xFDD
 11408                           fsr2h	equ	0xFDA
 11409                           fsr2l	equ	0xFD9
 11410                           status	equ	0xFD8
 11411                           
 11412 ;; *************** function ___ftdiv *****************
 11413 ;; Defined at:
 11414 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11415 ;; Parameters:    Size  Location     Type
 11416 ;;  f1              3   34[COMRAM] float 
 11417 ;;  f2              3   37[COMRAM] float 
 11418 ;; Auto vars:     Size  Location     Type
 11419 ;;  f3              3    1[BANK0 ] float 
 11420 ;;  sign            1    5[BANK0 ] unsigned char 
 11421 ;;  exp             1    4[BANK0 ] unsigned char 
 11422 ;;  cntr            1    0[BANK0 ] unsigned char 
 11423 ;; Return value:  Size  Location     Type
 11424 ;;                  3   34[COMRAM] float 
 11425 ;; Registers used:
 11426 ;;		wreg, status,2, status,0, cstack
 11427 ;; Tracked objects:
 11428 ;;		On entry : 0/0
 11429 ;;		On exit  : 0/0
 11430 ;;		Unchanged: 0/0
 11431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11432 ;;      Params:         6       0       0       0       0       0       0
 11433 ;;      Locals:         0       6       0       0       0       0       0
 11434 ;;      Temps:          3       0       0       0       0       0       0
 11435 ;;      Totals:         9       6       0       0       0       0       0
 11436 ;;Total ram usage:       15 bytes
 11437 ;; Hardware stack levels used:    1
 11438 ;; Hardware stack levels required when called:    4
 11439 ;; This function calls:
 11440 ;;		___ftpack
 11441 ;; This function is called by:
 11442 ;;		_SampleSingleChannel
 11443 ;;		_exp
 11444 ;;		_CheckFlashPrecentage
 11445 ;; This function uses a non-reentrant model
 11446 ;;
 11447                           
 11448                           	psect	text53
 11449  0015BE                     __ptext53:
 11450                           	opt stack 0
 11451  0015BE                     ___ftdiv:
 11452                           	opt stack 23
 11453                           
 11454                           ;incstack = 0
 11455  0015BE  C025  F029         	movff	___ftdiv@f1+2,??___ftdiv
 11456  0015C2  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 11457  0015C4  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 11458  0015C6  3424               	rlcf	___ftdiv@f1+1,w,c
 11459  0015C8  3629               	rlcf	??___ftdiv& (0+255),f,c
 11460  0015CA  E301               	bnc	u7191
 11461  0015CC  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 11462  0015CE                     u7191:
 11463  0015CE  5029               	movf	??___ftdiv,w,c
 11464  0015D0  0100               	movlb	0	; () banked
 11465  0015D2  6F64               	movwf	___ftdiv@exp& (0+255),b
 11466  0015D4  5164               	movf	___ftdiv@exp& (0+255),w,b
 11467  0015D6  A4D8               	btfss	status,2,c
 11468  0015D8  D007               	goto	l1604
 11469                           
 11470                           ; BSR set to: 0
 11471  0015DA  0E00               	movlw	0
 11472  0015DC  6E23               	movwf	?___ftdiv,c
 11473  0015DE  0E00               	movlw	0
 11474  0015E0  6E24               	movwf	?___ftdiv+1,c
 11475  0015E2  0E00               	movlw	0
 11476  0015E4  6E25               	movwf	?___ftdiv+2,c
 11477                           
 11478                           ; BSR set to: 0
 11479  0015E6  0012               	return	
 11480  0015E8                     l1604:
 11481                           
 11482                           ; BSR set to: 0
 11483                           
 11484                           ; BSR set to: 0
 11485  0015E8  C028  F029         	movff	___ftdiv@f2+2,??___ftdiv
 11486  0015EC  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 11487  0015EE  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 11488  0015F0  3427               	rlcf	___ftdiv@f2+1,w,c
 11489  0015F2  3629               	rlcf	??___ftdiv& (0+255),f,c
 11490  0015F4  E301               	bnc	u7211
 11491  0015F6  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 11492  0015F8                     u7211:
 11493  0015F8  5029               	movf	??___ftdiv,w,c
 11494  0015FA  6F65               	movwf	___ftdiv@sign& (0+255),b
 11495  0015FC  5165               	movf	___ftdiv@sign& (0+255),w,b
 11496  0015FE  A4D8               	btfss	status,2,c
 11497  001600  D007               	goto	l1606
 11498                           
 11499                           ; BSR set to: 0
 11500  001602  0E00               	movlw	0
 11501  001604  6E23               	movwf	?___ftdiv,c
 11502  001606  0E00               	movlw	0
 11503  001608  6E24               	movwf	?___ftdiv+1,c
 11504  00160A  0E00               	movlw	0
 11505  00160C  6E25               	movwf	?___ftdiv+2,c
 11506                           
 11507                           ; BSR set to: 0
 11508  00160E  0012               	return	
 11509  001610                     l1606:
 11510                           
 11511                           ; BSR set to: 0
 11512                           
 11513                           ; BSR set to: 0
 11514  001610  0E00               	movlw	0
 11515  001612  6F61               	movwf	___ftdiv@f3& (0+255),b
 11516  001614  0E00               	movlw	0
 11517  001616  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
 11518  001618  0E00               	movlw	0
 11519  00161A  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
 11520                           
 11521                           ; BSR set to: 0
 11522  00161C  5165               	movf	___ftdiv@sign& (0+255),w,b
 11523  00161E  0F89               	addlw	137
 11524  001620  5F64               	subwf	___ftdiv@exp& (0+255),f,b
 11525                           
 11526                           ; BSR set to: 0
 11527  001622  C025  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
 11528                           
 11529                           ; BSR set to: 0
 11530  001626  5028               	movf	___ftdiv@f2+2,w,c
 11531  001628  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
 11532                           
 11533                           ; BSR set to: 0
 11534  00162A  0E80               	movlw	128
 11535  00162C  1765               	andwf	___ftdiv@sign& (0+255),f,b
 11536                           
 11537                           ; BSR set to: 0
 11538  00162E  8E24               	bsf	___ftdiv@f1+1,7,c
 11539                           
 11540                           ; BSR set to: 0
 11541  001630  0EFF               	movlw	255
 11542  001632  1623               	andwf	___ftdiv@f1,f,c
 11543  001634  0EFF               	movlw	255
 11544  001636  1624               	andwf	___ftdiv@f1+1,f,c
 11545  001638  0E00               	movlw	0
 11546  00163A  1625               	andwf	___ftdiv@f1+2,f,c
 11547                           
 11548                           ; BSR set to: 0
 11549  00163C  8E27               	bsf	___ftdiv@f2+1,7,c
 11550                           
 11551                           ; BSR set to: 0
 11552  00163E  0EFF               	movlw	255
 11553  001640  1626               	andwf	___ftdiv@f2,f,c
 11554  001642  0EFF               	movlw	255
 11555  001644  1627               	andwf	___ftdiv@f2+1,f,c
 11556  001646  0E00               	movlw	0
 11557  001648  1628               	andwf	___ftdiv@f2+2,f,c
 11558                           
 11559                           ; BSR set to: 0
 11560  00164A  0E18               	movlw	24
 11561  00164C  6F60               	movwf	___ftdiv@cntr& (0+255),b
 11562  00164E                     
 11563                           ; BSR set to: 0
 11564                           
 11565                           ; BSR set to: 0
 11566  00164E  90D8               	bcf	status,0,c
 11567  001650  3761               	rlcf	___ftdiv@f3& (0+255),f,b
 11568  001652  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 11569  001654  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 11570                           
 11571                           ; BSR set to: 0
 11572  001656  5026               	movf	___ftdiv@f2,w,c
 11573  001658  5C23               	subwf	___ftdiv@f1,w,c
 11574  00165A  5027               	movf	___ftdiv@f2+1,w,c
 11575  00165C  5824               	subwfb	___ftdiv@f1+1,w,c
 11576  00165E  5028               	movf	___ftdiv@f2+2,w,c
 11577  001660  5825               	subwfb	___ftdiv@f1+2,w,c
 11578  001662  A0D8               	btfss	status,0,c
 11579  001664  D007               	goto	l1608
 11580                           
 11581                           ; BSR set to: 0
 11582  001666  5026               	movf	___ftdiv@f2,w,c
 11583  001668  5E23               	subwf	___ftdiv@f1,f,c
 11584  00166A  5027               	movf	___ftdiv@f2+1,w,c
 11585  00166C  5A24               	subwfb	___ftdiv@f1+1,f,c
 11586  00166E  5028               	movf	___ftdiv@f2+2,w,c
 11587  001670  5A25               	subwfb	___ftdiv@f1+2,f,c
 11588                           
 11589                           ; BSR set to: 0
 11590  001672  8161               	bsf	___ftdiv@f3& (0+255),0,b
 11591  001674                     l1608:
 11592                           
 11593                           ; BSR set to: 0
 11594  001674  90D8               	bcf	status,0,c
 11595  001676  3623               	rlcf	___ftdiv@f1,f,c
 11596  001678  3624               	rlcf	___ftdiv@f1+1,f,c
 11597  00167A  3625               	rlcf	___ftdiv@f1+2,f,c
 11598                           
 11599                           ; BSR set to: 0
 11600  00167C  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
 11601  00167E  D7E7               	goto	l1607
 11602                           
 11603                           ; BSR set to: 0
 11604                           
 11605                           ; BSR set to: 0
 11606  001680  C061  F018         	movff	___ftdiv@f3,___ftpack@arg
 11607  001684  C062  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11608  001688  C063  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11609  00168C  C064  F01B         	movff	___ftdiv@exp,___ftpack@exp
 11610  001690  C065  F01C         	movff	___ftdiv@sign,___ftpack@sign
 11611  001694  EC5B  F00D         	call	___ftpack	;wreg free
 11612  001698  C018  F023         	movff	?___ftpack,?___ftdiv
 11613  00169C  C019  F024         	movff	?___ftpack+1,?___ftdiv+1
 11614  0016A0  C01A  F025         	movff	?___ftpack+2,?___ftdiv+2
 11615  0016A4  0012               	return	
 11616  0016A6                     __end_of___ftdiv:
 11617                           	opt stack 0
 11618                           tosu	equ	0xFFF
 11619                           tosh	equ	0xFFE
 11620                           tosl	equ	0xFFD
 11621                           pclath	equ	0xFFA
 11622                           tblptru	equ	0xFF8
 11623                           tblptrh	equ	0xFF7
 11624                           tblptrl	equ	0xFF6
 11625                           tablat	equ	0xFF5
 11626                           prodh	equ	0xFF4
 11627                           prodl	equ	0xFF3
 11628                           intcon	equ	0xFF2
 11629                           intcon2	equ	0xFF1
 11630                           postinc0	equ	0xFEE
 11631                           wreg	equ	0xFE8
 11632                           indf1	equ	0xFE7
 11633                           postdec1	equ	0xFE5
 11634                           fsr1h	equ	0xFE2
 11635                           fsr1l	equ	0xFE1
 11636                           indf2	equ	0xFDF
 11637                           postinc2	equ	0xFDE
 11638                           postdec2	equ	0xFDD
 11639                           fsr2h	equ	0xFDA
 11640                           fsr2l	equ	0xFD9
 11641                           status	equ	0xFD8
 11642                           
 11643 ;; *************** function ___awtoft *****************
 11644 ;; Defined at:
 11645 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 11646 ;; Parameters:    Size  Location     Type
 11647 ;;  c               2   31[COMRAM] int 
 11648 ;; Auto vars:     Size  Location     Type
 11649 ;;  sign            1   34[COMRAM] unsigned char 
 11650 ;; Return value:  Size  Location     Type
 11651 ;;                  3   31[COMRAM] float 
 11652 ;; Registers used:
 11653 ;;		wreg, status,2, status,0, cstack
 11654 ;; Tracked objects:
 11655 ;;		On entry : 0/0
 11656 ;;		On exit  : 0/0
 11657 ;;		Unchanged: 0/0
 11658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11659 ;;      Params:         3       0       0       0       0       0       0
 11660 ;;      Locals:         1       0       0       0       0       0       0
 11661 ;;      Temps:          0       0       0       0       0       0       0
 11662 ;;      Totals:         4       0       0       0       0       0       0
 11663 ;;Total ram usage:        4 bytes
 11664 ;; Hardware stack levels used:    1
 11665 ;; Hardware stack levels required when called:    4
 11666 ;; This function calls:
 11667 ;;		___ftpack
 11668 ;; This function is called by:
 11669 ;;		_exp
 11670 ;;		_log
 11671 ;; This function uses a non-reentrant model
 11672 ;;
 11673                           
 11674                           	psect	text54
 11675  002734                     __ptext54:
 11676                           	opt stack 0
 11677  002734                     ___awtoft:
 11678                           	opt stack 23
 11679                           
 11680                           ;incstack = 0
 11681  002734  0E00               	movlw	0
 11682  002736  6E23               	movwf	___awtoft@sign,c
 11683  002738  AE21               	btfss	___awtoft@c+1,7,c
 11684  00273A  D006               	goto	l1521
 11685  00273C  6C20               	negf	___awtoft@c,c
 11686  00273E  1E21               	comf	___awtoft@c+1,f,c
 11687  002740  B0D8               	btfsc	status,0,c
 11688  002742  2A21               	incf	___awtoft@c+1,f,c
 11689  002744  0E01               	movlw	1
 11690  002746  6E23               	movwf	___awtoft@sign,c
 11691  002748                     l1521:
 11692  002748  C020  F018         	movff	___awtoft@c,___ftpack@arg
 11693  00274C  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 11694  002750  6A1A               	clrf	___ftpack@arg+2,c
 11695  002752  0E8E               	movlw	142
 11696  002754  6E1B               	movwf	___ftpack@exp,c
 11697  002756  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 11698  00275A  EC5B  F00D         	call	___ftpack	;wreg free
 11699  00275E  C018  F020         	movff	?___ftpack,?___awtoft
 11700  002762  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 11701  002766  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 11702  00276A  0012               	return	
 11703  00276C                     __end_of___awtoft:
 11704                           	opt stack 0
 11705                           tosu	equ	0xFFF
 11706                           tosh	equ	0xFFE
 11707                           tosl	equ	0xFFD
 11708                           pclath	equ	0xFFA
 11709                           tblptru	equ	0xFF8
 11710                           tblptrh	equ	0xFF7
 11711                           tblptrl	equ	0xFF6
 11712                           tablat	equ	0xFF5
 11713                           prodh	equ	0xFF4
 11714                           prodl	equ	0xFF3
 11715                           intcon	equ	0xFF2
 11716                           intcon2	equ	0xFF1
 11717                           postinc0	equ	0xFEE
 11718                           wreg	equ	0xFE8
 11719                           indf1	equ	0xFE7
 11720                           postdec1	equ	0xFE5
 11721                           fsr1h	equ	0xFE2
 11722                           fsr1l	equ	0xFE1
 11723                           indf2	equ	0xFDF
 11724                           postinc2	equ	0xFDE
 11725                           postdec2	equ	0xFDD
 11726                           fsr2h	equ	0xFDA
 11727                           fsr2l	equ	0xFD9
 11728                           status	equ	0xFD8
 11729                           
 11730 ;; *************** function ___lltoft *****************
 11731 ;; Defined at:
 11732 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 11733 ;; Parameters:    Size  Location     Type
 11734 ;;  c               4   31[COMRAM] unsigned long 
 11735 ;; Auto vars:     Size  Location     Type
 11736 ;;  exp             1   39[COMRAM] unsigned char 
 11737 ;; Return value:  Size  Location     Type
 11738 ;;                  3   31[COMRAM] float 
 11739 ;; Registers used:
 11740 ;;		wreg, status,2, status,0, cstack
 11741 ;; Tracked objects:
 11742 ;;		On entry : 0/0
 11743 ;;		On exit  : 0/0
 11744 ;;		Unchanged: 0/0
 11745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11746 ;;      Params:         4       0       0       0       0       0       0
 11747 ;;      Locals:         1       0       0       0       0       0       0
 11748 ;;      Temps:          4       0       0       0       0       0       0
 11749 ;;      Totals:         9       0       0       0       0       0       0
 11750 ;;Total ram usage:        9 bytes
 11751 ;; Hardware stack levels used:    1
 11752 ;; Hardware stack levels required when called:    4
 11753 ;; This function calls:
 11754 ;;		___ftpack
 11755 ;; This function is called by:
 11756 ;;		_pow
 11757 ;;		_CheckFlashPrecentage
 11758 ;; This function uses a non-reentrant model
 11759 ;;
 11760                           
 11761                           	psect	text55
 11762  002118                     __ptext55:
 11763                           	opt stack 0
 11764  002118                     ___lltoft:
 11765                           	opt stack 24
 11766                           
 11767                           ;incstack = 0
 11768  002118  0E8E               	movlw	142
 11769  00211A  6E28               	movwf	___lltoft@exp,c
 11770  00211C  D006               	goto	l1697
 11771  00211E  90D8               	bcf	status,0,c
 11772  002120  3223               	rrcf	___lltoft@c+3,f,c
 11773  002122  3222               	rrcf	___lltoft@c+2,f,c
 11774  002124  3221               	rrcf	___lltoft@c+1,f,c
 11775  002126  3220               	rrcf	___lltoft@c,f,c
 11776  002128  2A28               	incf	___lltoft@exp,f,c
 11777  00212A                     l1697:
 11778  00212A  0E00               	movlw	0
 11779  00212C  1420               	andwf	___lltoft@c,w,c
 11780  00212E  6E24               	movwf	??___lltoft& (0+255),c
 11781  002130  0E00               	movlw	0
 11782  002132  1421               	andwf	___lltoft@c+1,w,c
 11783  002134  6E25               	movwf	(??___lltoft+1)& (0+255),c
 11784  002136  0E00               	movlw	0
 11785  002138  1422               	andwf	___lltoft@c+2,w,c
 11786  00213A  6E26               	movwf	(??___lltoft+2)& (0+255),c
 11787  00213C  0EFF               	movlw	255
 11788  00213E  1423               	andwf	___lltoft@c+3,w,c
 11789  002140  6E27               	movwf	(??___lltoft+3)& (0+255),c
 11790  002142  5024               	movf	??___lltoft,w,c
 11791  002144  1025               	iorwf	??___lltoft+1,w,c
 11792  002146  1026               	iorwf	??___lltoft+2,w,c
 11793  002148  1027               	iorwf	??___lltoft+3,w,c
 11794  00214A  A4D8               	btfss	status,2,c
 11795  00214C  D7E8               	goto	l1698
 11796  00214E  C020  F018         	movff	___lltoft@c,___ftpack@arg
 11797  002152  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 11798  002156  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 11799  00215A  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 11800  00215E  0E00               	movlw	0
 11801  002160  6E1C               	movwf	___ftpack@sign,c
 11802  002162  EC5B  F00D         	call	___ftpack	;wreg free
 11803  002166  C018  F020         	movff	?___ftpack,?___lltoft
 11804  00216A  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 11805  00216E  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 11806  002172  0012               	return	
 11807  002174                     __end_of___lltoft:
 11808                           	opt stack 0
 11809                           tosu	equ	0xFFF
 11810                           tosh	equ	0xFFE
 11811                           tosl	equ	0xFFD
 11812                           pclath	equ	0xFFA
 11813                           tblptru	equ	0xFF8
 11814                           tblptrh	equ	0xFF7
 11815                           tblptrl	equ	0xFF6
 11816                           tablat	equ	0xFF5
 11817                           prodh	equ	0xFF4
 11818                           prodl	equ	0xFF3
 11819                           intcon	equ	0xFF2
 11820                           intcon2	equ	0xFF1
 11821                           postinc0	equ	0xFEE
 11822                           wreg	equ	0xFE8
 11823                           indf1	equ	0xFE7
 11824                           postdec1	equ	0xFE5
 11825                           fsr1h	equ	0xFE2
 11826                           fsr1l	equ	0xFE1
 11827                           indf2	equ	0xFDF
 11828                           postinc2	equ	0xFDE
 11829                           postdec2	equ	0xFDD
 11830                           fsr2h	equ	0xFDA
 11831                           fsr2l	equ	0xFD9
 11832                           status	equ	0xFD8
 11833                           
 11834 ;; *************** function ___lwtoft *****************
 11835 ;; Defined at:
 11836 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 11837 ;; Parameters:    Size  Location     Type
 11838 ;;  c               2   31[COMRAM] unsigned int 
 11839 ;; Auto vars:     Size  Location     Type
 11840 ;;		None
 11841 ;; Return value:  Size  Location     Type
 11842 ;;                  3   31[COMRAM] float 
 11843 ;; Registers used:
 11844 ;;		wreg, status,2, status,0, cstack
 11845 ;; Tracked objects:
 11846 ;;		On entry : 0/0
 11847 ;;		On exit  : 0/0
 11848 ;;		Unchanged: 0/0
 11849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11850 ;;      Params:         3       0       0       0       0       0       0
 11851 ;;      Locals:         0       0       0       0       0       0       0
 11852 ;;      Temps:          0       0       0       0       0       0       0
 11853 ;;      Totals:         3       0       0       0       0       0       0
 11854 ;;Total ram usage:        3 bytes
 11855 ;; Hardware stack levels used:    1
 11856 ;; Hardware stack levels required when called:    4
 11857 ;; This function calls:
 11858 ;;		___ftpack
 11859 ;; This function is called by:
 11860 ;;		_SampleSingleChannel
 11861 ;; This function uses a non-reentrant model
 11862 ;;
 11863                           
 11864                           	psect	text56
 11865  002958                     __ptext56:
 11866                           	opt stack 0
 11867  002958                     ___lwtoft:
 11868                           	opt stack 25
 11869                           
 11870                           ;incstack = 0
 11871  002958  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 11872  00295C  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 11873  002960  6A1A               	clrf	___ftpack@arg+2,c
 11874  002962  0E8E               	movlw	142
 11875  002964  6E1B               	movwf	___ftpack@exp,c
 11876  002966  0E00               	movlw	0
 11877  002968  6E1C               	movwf	___ftpack@sign,c
 11878  00296A  EC5B  F00D         	call	___ftpack	;wreg free
 11879  00296E  C018  F020         	movff	?___ftpack,?___lwtoft
 11880  002972  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 11881  002976  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 11882  00297A  0012               	return	
 11883  00297C                     __end_of___lwtoft:
 11884                           	opt stack 0
 11885                           tosu	equ	0xFFF
 11886                           tosh	equ	0xFFE
 11887                           tosl	equ	0xFFD
 11888                           pclath	equ	0xFFA
 11889                           tblptru	equ	0xFF8
 11890                           tblptrh	equ	0xFF7
 11891                           tblptrl	equ	0xFF6
 11892                           tablat	equ	0xFF5
 11893                           prodh	equ	0xFF4
 11894                           prodl	equ	0xFF3
 11895                           intcon	equ	0xFF2
 11896                           intcon2	equ	0xFF1
 11897                           postinc0	equ	0xFEE
 11898                           wreg	equ	0xFE8
 11899                           indf1	equ	0xFE7
 11900                           postdec1	equ	0xFE5
 11901                           fsr1h	equ	0xFE2
 11902                           fsr1l	equ	0xFE1
 11903                           indf2	equ	0xFDF
 11904                           postinc2	equ	0xFDE
 11905                           postdec2	equ	0xFDD
 11906                           fsr2h	equ	0xFDA
 11907                           fsr2l	equ	0xFD9
 11908                           status	equ	0xFD8
 11909                           
 11910 ;; *************** function ___ftpack *****************
 11911 ;; Defined at:
 11912 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 11913 ;; Parameters:    Size  Location     Type
 11914 ;;  arg             3   23[COMRAM] unsigned um
 11915 ;;  exp             1   26[COMRAM] unsigned char 
 11916 ;;  sign            1   27[COMRAM] unsigned char 
 11917 ;; Auto vars:     Size  Location     Type
 11918 ;;		None
 11919 ;; Return value:  Size  Location     Type
 11920 ;;                  3   23[COMRAM] float 
 11921 ;; Registers used:
 11922 ;;		wreg, status,2, status,0
 11923 ;; Tracked objects:
 11924 ;;		On entry : 0/0
 11925 ;;		On exit  : 0/0
 11926 ;;		Unchanged: 0/0
 11927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11928 ;;      Params:         5       0       0       0       0       0       0
 11929 ;;      Locals:         0       0       0       0       0       0       0
 11930 ;;      Temps:          3       0       0       0       0       0       0
 11931 ;;      Totals:         8       0       0       0       0       0       0
 11932 ;;Total ram usage:        8 bytes
 11933 ;; Hardware stack levels used:    1
 11934 ;; Hardware stack levels required when called:    3
 11935 ;; This function calls:
 11936 ;;		Nothing
 11937 ;; This function is called by:
 11938 ;;		___altoft
 11939 ;;		___awtoft
 11940 ;;		___ftadd
 11941 ;;		___ftdiv
 11942 ;;		___ftmul
 11943 ;;		___lltoft
 11944 ;;		___lwtoft
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           	psect	text57
 11949  001AB6                     __ptext57:
 11950                           	opt stack 0
 11951  001AB6                     ___ftpack:
 11952                           	opt stack 22
 11953                           
 11954                           ;incstack = 0
 11955  001AB6  501B               	movf	___ftpack@exp,w,c
 11956  001AB8  B4D8               	btfsc	status,2,c
 11957  001ABA  D005               	goto	u6220
 11958  001ABC  5018               	movf	___ftpack@arg,w,c
 11959  001ABE  1019               	iorwf	___ftpack@arg+1,w,c
 11960  001AC0  101A               	iorwf	___ftpack@arg+2,w,c
 11961  001AC2  A4D8               	btfss	status,2,c
 11962  001AC4  D00C               	goto	l1540
 11963  001AC6                     u6220:
 11964  001AC6  0E00               	movlw	0
 11965  001AC8  6E18               	movwf	?___ftpack,c
 11966  001ACA  0E00               	movlw	0
 11967  001ACC  6E19               	movwf	?___ftpack+1,c
 11968  001ACE  0E00               	movlw	0
 11969  001AD0  6E1A               	movwf	?___ftpack+2,c
 11970  001AD2  0012               	return	
 11971  001AD4  2A1B               	incf	___ftpack@exp,f,c
 11972  001AD6  90D8               	bcf	status,0,c
 11973  001AD8  321A               	rrcf	___ftpack@arg+2,f,c
 11974  001ADA  3219               	rrcf	___ftpack@arg+1,f,c
 11975  001ADC  3218               	rrcf	___ftpack@arg,f,c
 11976  001ADE                     l1540:
 11977  001ADE  0E00               	movlw	0
 11978  001AE0  1418               	andwf	___ftpack@arg,w,c
 11979  001AE2  6E1D               	movwf	??___ftpack& (0+255),c
 11980  001AE4  0E00               	movlw	0
 11981  001AE6  1419               	andwf	___ftpack@arg+1,w,c
 11982  001AE8  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 11983  001AEA  0EFE               	movlw	254
 11984  001AEC  141A               	andwf	___ftpack@arg+2,w,c
 11985  001AEE  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 11986  001AF0  501D               	movf	??___ftpack,w,c
 11987  001AF2  101E               	iorwf	??___ftpack+1,w,c
 11988  001AF4  101F               	iorwf	??___ftpack+2,w,c
 11989  001AF6  B4D8               	btfsc	status,2,c
 11990  001AF8  D00C               	goto	l1543
 11991  001AFA  D7EC               	goto	l1541
 11992  001AFC  2A1B               	incf	___ftpack@exp,f,c
 11993  001AFE  0E01               	movlw	1
 11994  001B00  2618               	addwf	___ftpack@arg,f,c
 11995  001B02  0E00               	movlw	0
 11996  001B04  2219               	addwfc	___ftpack@arg+1,f,c
 11997  001B06  0E00               	movlw	0
 11998  001B08  221A               	addwfc	___ftpack@arg+2,f,c
 11999  001B0A  90D8               	bcf	status,0,c
 12000  001B0C  321A               	rrcf	___ftpack@arg+2,f,c
 12001  001B0E  3219               	rrcf	___ftpack@arg+1,f,c
 12002  001B10  3218               	rrcf	___ftpack@arg,f,c
 12003  001B12                     l1543:
 12004  001B12  0E00               	movlw	0
 12005  001B14  1418               	andwf	___ftpack@arg,w,c
 12006  001B16  6E1D               	movwf	??___ftpack& (0+255),c
 12007  001B18  0E00               	movlw	0
 12008  001B1A  1419               	andwf	___ftpack@arg+1,w,c
 12009  001B1C  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 12010  001B1E  0EFF               	movlw	255
 12011  001B20  141A               	andwf	___ftpack@arg+2,w,c
 12012  001B22  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 12013  001B24  501D               	movf	??___ftpack,w,c
 12014  001B26  101E               	iorwf	??___ftpack+1,w,c
 12015  001B28  101F               	iorwf	??___ftpack+2,w,c
 12016  001B2A  B4D8               	btfsc	status,2,c
 12017  001B2C  D006               	goto	l1546
 12018  001B2E  D7E6               	goto	l1544
 12019  001B30  061B               	decf	___ftpack@exp,f,c
 12020  001B32  90D8               	bcf	status,0,c
 12021  001B34  3618               	rlcf	___ftpack@arg,f,c
 12022  001B36  3619               	rlcf	___ftpack@arg+1,f,c
 12023  001B38  361A               	rlcf	___ftpack@arg+2,f,c
 12024  001B3A                     l1546:
 12025  001B3A  BE19               	btfsc	___ftpack@arg+1,7,c
 12026  001B3C  D003               	goto	u6260
 12027  001B3E  0E02               	movlw	2
 12028  001B40  601B               	cpfslt	___ftpack@exp,c
 12029  001B42  D7F6               	goto	l1547
 12030  001B44                     u6260:
 12031  001B44  A01B               	btfss	___ftpack@exp,0,c
 12032  001B46  9E19               	bcf	___ftpack@arg+1,7,c
 12033  001B48  90D8               	bcf	status,0,c
 12034  001B4A  321B               	rrcf	___ftpack@exp,f,c
 12035  001B4C  501B               	movf	___ftpack@exp,w,c
 12036  001B4E  121A               	iorwf	___ftpack@arg+2,f,c
 12037  001B50  501C               	movf	___ftpack@sign,w,c
 12038  001B52  A4D8               	btfss	status,2,c
 12039  001B54  8E1A               	bsf	___ftpack@arg+2,7,c
 12040  001B56  C018  F018         	movff	___ftpack@arg,?___ftpack
 12041  001B5A  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 12042  001B5E  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 12043  001B62  0012               	return	
 12044  001B64                     __end_of___ftpack:
 12045                           	opt stack 0
 12046                           tosu	equ	0xFFF
 12047                           tosh	equ	0xFFE
 12048                           tosl	equ	0xFFD
 12049                           pclath	equ	0xFFA
 12050                           tblptru	equ	0xFF8
 12051                           tblptrh	equ	0xFF7
 12052                           tblptrl	equ	0xFF6
 12053                           tablat	equ	0xFF5
 12054                           prodh	equ	0xFF4
 12055                           prodl	equ	0xFF3
 12056                           intcon	equ	0xFF2
 12057                           intcon2	equ	0xFF1
 12058                           postinc0	equ	0xFEE
 12059                           wreg	equ	0xFE8
 12060                           indf1	equ	0xFE7
 12061                           postdec1	equ	0xFE5
 12062                           fsr1h	equ	0xFE2
 12063                           fsr1l	equ	0xFE1
 12064                           indf2	equ	0xFDF
 12065                           postinc2	equ	0xFDE
 12066                           postdec2	equ	0xFDD
 12067                           fsr2h	equ	0xFDA
 12068                           fsr2l	equ	0xFD9
 12069                           status	equ	0xFD8
 12070                           
 12071 ;; *************** function _UART_Write_Text *****************
 12072 ;; Defined at:
 12073 ;;		line 224 in file "EusartApp.c"
 12074 ;; Parameters:    Size  Location     Type
 12075 ;;  text            2   24[COMRAM] PTR unsigned char 
 12076 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), STR_11(10), STR_10(10), 
 12077 ;;		 -> STR_9(10), readUartByte@dest(50), STR_7(9), SampleSingleChannel@dest(50), 
 12078 ;;		 -> STR_5(10), STR_4(10), STR_3(20), STR_2(10), 
 12079 ;;		 -> STR_1(10), 
 12080 ;; Auto vars:     Size  Location     Type
 12081 ;;  i               2   28[COMRAM] int 
 12082 ;; Return value:  Size  Location     Type
 12083 ;;                  1    wreg      void 
 12084 ;; Registers used:
 12085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12086 ;; Tracked objects:
 12087 ;;		On entry : 0/0
 12088 ;;		On exit  : 0/0
 12089 ;;		Unchanged: 0/0
 12090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12091 ;;      Params:         2       0       0       0       0       0       0
 12092 ;;      Locals:         2       0       0       0       0       0       0
 12093 ;;      Temps:          2       0       0       0       0       0       0
 12094 ;;      Totals:         6       0       0       0       0       0       0
 12095 ;;Total ram usage:        6 bytes
 12096 ;; Hardware stack levels used:    1
 12097 ;; Hardware stack levels required when called:    4
 12098 ;; This function calls:
 12099 ;;		_EUSART1_Write
 12100 ;; This function is called by:
 12101 ;;		_AdcSingleSample
 12102 ;;		_SampleSingleChannel
 12103 ;;		_readUartByte
 12104 ;;		_SendUartSystemInitMessage
 12105 ;;		_PrintHelpScreen
 12106 ;; This function uses a non-reentrant model
 12107 ;;
 12108                           
 12109                           	psect	text58
 12110  001F18                     __ptext58:
 12111                           	opt stack 0
 12112  001F18                     _UART_Write_Text:
 12113                           	opt stack 25
 12114                           
 12115                           ;EusartApp.c: 226: for(int i =0;text[i]!='\0';i++)
 12116                           
 12117                           ;incstack = 0
 12118  001F18  0E00               	movlw	0
 12119  001F1A  6E1E               	movwf	UART_Write_Text@i+1,c
 12120  001F1C  0E00               	movlw	0
 12121  001F1E  6E1D               	movwf	UART_Write_Text@i,c
 12122  001F20  D01A               	goto	l236
 12123  001F22                     
 12124                           ;EusartApp.c: 227: {
 12125                           ;EusartApp.c: 228: EUSART1_Write(text[i]);
 12126  001F22  501D               	movf	UART_Write_Text@i,w,c
 12127  001F24  2419               	addwf	UART_Write_Text@text,w,c
 12128  001F26  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 12129  001F28  501E               	movf	UART_Write_Text@i+1,w,c
 12130  001F2A  201A               	addwfc	UART_Write_Text@text+1,w,c
 12131  001F2C  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 12132  001F2E  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 12133  001F32  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 12134  001F36  6AF8               	clrf	tblptru,c
 12135  001F38  0E05               	movlw	(high __ramtop+-1)
 12136  001F3A  64F7               	cpfsgt	tblptrh,c
 12137  001F3C  D003               	bra	u7037
 12138  001F3E  0008               	tblrd		*
 12139  001F40  50F5               	movf	tablat,w,c
 12140  001F42  D005               	bra	u7030
 12141  001F44                     u7037:
 12142  001F44  CFF6 FFE9          	movff	tblptrl,fsr0l
 12143  001F48  CFF7 FFEA          	movff	tblptrh,fsr0h
 12144  001F4C  50EF               	movf	indf0,w,c
 12145  001F4E                     u7030:
 12146  001F4E  EC40  F013         	call	_EUSART1_Write
 12147  001F52  4A1D               	infsnz	UART_Write_Text@i,f,c
 12148  001F54  2A1E               	incf	UART_Write_Text@i+1,f,c
 12149  001F56                     l236:
 12150  001F56  501D               	movf	UART_Write_Text@i,w,c
 12151  001F58  2419               	addwf	UART_Write_Text@text,w,c
 12152  001F5A  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 12153  001F5C  501E               	movf	UART_Write_Text@i+1,w,c
 12154  001F5E  201A               	addwfc	UART_Write_Text@text+1,w,c
 12155  001F60  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 12156  001F62  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 12157  001F66  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 12158  001F6A  6AF8               	clrf	tblptru,c
 12159  001F6C  0E05               	movlw	(high __ramtop+-1)
 12160  001F6E  64F7               	cpfsgt	tblptrh,c
 12161  001F70  D003               	bra	u7047
 12162  001F72  0008               	tblrd		*
 12163  001F74  50F5               	movf	tablat,w,c
 12164  001F76  D005               	bra	u7040
 12165  001F78                     u7047:
 12166  001F78  CFF6 FFE9          	movff	tblptrl,fsr0l
 12167  001F7C  CFF7 FFEA          	movff	tblptrh,fsr0h
 12168  001F80  50EF               	movf	indf0,w,c
 12169  001F82                     u7040:
 12170  001F82  0900               	iorlw	0
 12171  001F84  B4D8               	btfsc	status,2,c
 12172  001F86  0012               	return	
 12173  001F88  D7CC               	goto	l237
 12174  001F8A                     __end_of_UART_Write_Text:
 12175                           	opt stack 0
 12176                           tosu	equ	0xFFF
 12177                           tosh	equ	0xFFE
 12178                           tosl	equ	0xFFD
 12179                           pclath	equ	0xFFA
 12180                           tblptru	equ	0xFF8
 12181                           tblptrh	equ	0xFF7
 12182                           tblptrl	equ	0xFF6
 12183                           tablat	equ	0xFF5
 12184                           prodh	equ	0xFF4
 12185                           prodl	equ	0xFF3
 12186                           intcon	equ	0xFF2
 12187                           intcon2	equ	0xFF1
 12188                           indf0	equ	0xFEF
 12189                           postinc0	equ	0xFEE
 12190                           fsr0h	equ	0xFEA
 12191                           fsr0l	equ	0xFE9
 12192                           wreg	equ	0xFE8
 12193                           indf1	equ	0xFE7
 12194                           postdec1	equ	0xFE5
 12195                           fsr1h	equ	0xFE2
 12196                           fsr1l	equ	0xFE1
 12197                           indf2	equ	0xFDF
 12198                           postinc2	equ	0xFDE
 12199                           postdec2	equ	0xFDD
 12200                           fsr2h	equ	0xFDA
 12201                           fsr2l	equ	0xFD9
 12202                           status	equ	0xFD8
 12203                           
 12204 ;; *************** function _EUSART1_Write *****************
 12205 ;; Defined at:
 12206 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 12207 ;; Parameters:    Size  Location     Type
 12208 ;;  txData          1    wreg     unsigned char 
 12209 ;; Auto vars:     Size  Location     Type
 12210 ;;  txData          1   23[COMRAM] unsigned char 
 12211 ;; Return value:  Size  Location     Type
 12212 ;;                  1    wreg      void 
 12213 ;; Registers used:
 12214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12215 ;; Tracked objects:
 12216 ;;		On entry : 0/0
 12217 ;;		On exit  : 0/0
 12218 ;;		Unchanged: 0/0
 12219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12220 ;;      Params:         0       0       0       0       0       0       0
 12221 ;;      Locals:         1       0       0       0       0       0       0
 12222 ;;      Temps:          0       0       0       0       0       0       0
 12223 ;;      Totals:         1       0       0       0       0       0       0
 12224 ;;Total ram usage:        1 bytes
 12225 ;; Hardware stack levels used:    1
 12226 ;; Hardware stack levels required when called:    3
 12227 ;; This function calls:
 12228 ;;		Nothing
 12229 ;; This function is called by:
 12230 ;;		_UART_Write_Text
 12231 ;;		_WriteUartMessage
 12232 ;; This function uses a non-reentrant model
 12233 ;;
 12234                           
 12235                           	psect	text59
 12236  002680                     __ptext59:
 12237                           	opt stack 0
 12238  002680                     _EUSART1_Write:
 12239                           	opt stack 25
 12240                           
 12241                           ;incstack = 0
 12242                           ;EUSART1_Write@txData stored from wreg
 12243  002680  6E18               	movwf	EUSART1_Write@txData,c
 12244  002682                     
 12245                           ;eusart1.c: 160: {
 12246                           
 12247                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 12248  002682  0100               	movlb	0	; () banked
 12249  002684  51D9               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 12250  002686  B4D8               	btfsc	status,2,c
 12251  002688  D7FC               	goto	l6352
 12252                           
 12253                           ; BSR set to: 0
 12254                           ;eusart1.c: 161: }
 12255                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 12256  00268A  B89D               	btfsc	3997,4,c	;volatile
 12257  00268C  D003               	goto	l792
 12258                           
 12259                           ; BSR set to: 0
 12260                           ;eusart1.c: 164: {
 12261                           ;eusart1.c: 165: TXREG1 = txData;
 12262  00268E  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 12263                           
 12264                           ;eusart1.c: 166: }
 12265  002692  D012               	goto	l793
 12266  002694                     l792:
 12267                           
 12268                           ; BSR set to: 0
 12269                           ;eusart1.c: 167: else
 12270                           ;eusart1.c: 168: {
 12271                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 12272  002694  989D               	bcf	3997,4,c	;volatile
 12273                           
 12274                           ; BSR set to: 0
 12275                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 12276  002696  503C               	movf	_eusart1TxHead,w,c	;volatile
 12277  002698  0D01               	mullw	1
 12278  00269A  0E00               	movlw	low _eusart1TxBuffer
 12279  00269C  24F3               	addwf	prodl,w,c
 12280  00269E  6ED9               	movwf	fsr2l,c
 12281  0026A0  0E01               	movlw	high _eusart1TxBuffer
 12282  0026A2  20F4               	addwfc	prodh,w,c
 12283  0026A4  6EDA               	movwf	fsr2h,c
 12284  0026A6  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 12285                           
 12286                           ; BSR set to: 0
 12287  0026AA  2A3C               	incf	_eusart1TxHead,f,c	;volatile
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 12291  0026AC  0E45               	movlw	69
 12292  0026AE  643C               	cpfsgt	_eusart1TxHead,c	;volatile
 12293  0026B0  D002               	goto	l794
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;eusart1.c: 172: {
 12297                           ;eusart1.c: 173: eusart1TxHead = 0;
 12298  0026B2  0E00               	movlw	0
 12299  0026B4  6E3C               	movwf	_eusart1TxHead,c	;volatile
 12300  0026B6                     l794:
 12301                           
 12302                           ; BSR set to: 0
 12303                           ;eusart1.c: 174: }
 12304                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 12305                           
 12306                           ; BSR set to: 0
 12307  0026B6  07D9               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 12308  0026B8                     l793:
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;eusart1.c: 176: }
 12312                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 12313                           
 12314                           ; BSR set to: 0
 12315  0026B8  889D               	bsf	3997,4,c	;volatile
 12316                           
 12317                           ; BSR set to: 0
 12318  0026BA  0012               	return		;funcret
 12319  0026BC                     __end_of_EUSART1_Write:
 12320                           	opt stack 0
 12321                           tosu	equ	0xFFF
 12322                           tosh	equ	0xFFE
 12323                           tosl	equ	0xFFD
 12324                           pclath	equ	0xFFA
 12325                           tblptru	equ	0xFF8
 12326                           tblptrh	equ	0xFF7
 12327                           tblptrl	equ	0xFF6
 12328                           tablat	equ	0xFF5
 12329                           prodh	equ	0xFF4
 12330                           prodl	equ	0xFF3
 12331                           intcon	equ	0xFF2
 12332                           intcon2	equ	0xFF1
 12333                           indf0	equ	0xFEF
 12334                           postinc0	equ	0xFEE
 12335                           fsr0h	equ	0xFEA
 12336                           fsr0l	equ	0xFE9
 12337                           wreg	equ	0xFE8
 12338                           indf1	equ	0xFE7
 12339                           postdec1	equ	0xFE5
 12340                           fsr1h	equ	0xFE2
 12341                           fsr1l	equ	0xFE1
 12342                           indf2	equ	0xFDF
 12343                           postinc2	equ	0xFDE
 12344                           postdec2	equ	0xFDD
 12345                           fsr2h	equ	0xFDA
 12346                           fsr2l	equ	0xFD9
 12347                           status	equ	0xFD8
 12348                           
 12349 ;; *************** function _ADC_GetConversion *****************
 12350 ;; Defined at:
 12351 ;;		line 106 in file "mcc_generated_files/adc.c"
 12352 ;; Parameters:    Size  Location     Type
 12353 ;;  channel         1    wreg     enum E6975
 12354 ;; Auto vars:     Size  Location     Type
 12355 ;;  channel         1   27[COMRAM] enum E6975
 12356 ;; Return value:  Size  Location     Type
 12357 ;;                  2   23[COMRAM] unsigned int 
 12358 ;; Registers used:
 12359 ;;		wreg, status,2, status,0
 12360 ;; Tracked objects:
 12361 ;;		On entry : 0/0
 12362 ;;		On exit  : 0/0
 12363 ;;		Unchanged: 0/0
 12364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12365 ;;      Params:         2       0       0       0       0       0       0
 12366 ;;      Locals:         1       0       0       0       0       0       0
 12367 ;;      Temps:          2       0       0       0       0       0       0
 12368 ;;      Totals:         5       0       0       0       0       0       0
 12369 ;;Total ram usage:        5 bytes
 12370 ;; Hardware stack levels used:    1
 12371 ;; Hardware stack levels required when called:    3
 12372 ;; This function calls:
 12373 ;;		Nothing
 12374 ;; This function is called by:
 12375 ;;		_SampleSingleChannel
 12376 ;; This function uses a non-reentrant model
 12377 ;;
 12378                           
 12379                           	psect	text60
 12380  002840                     __ptext60:
 12381                           	opt stack 0
 12382  002840                     _ADC_GetConversion:
 12383                           	opt stack 26
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;incstack = 0
 12387                           ;ADC_GetConversion@channel stored from wreg
 12388  002840  6E1C               	movwf	ADC_GetConversion@channel,c
 12389                           
 12390                           ;adc.c: 109: ADCON0bits.CHS = channel;
 12391  002842  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 12392  002846  461A               	rlncf	??_ADC_GetConversion,f,c
 12393  002848  461A               	rlncf	??_ADC_GetConversion,f,c
 12394  00284A  50C2               	movf	4034,w,c	;volatile
 12395  00284C  181A               	xorwf	??_ADC_GetConversion,w,c
 12396  00284E  0B83               	andlw	-125
 12397  002850  181A               	xorwf	??_ADC_GetConversion,w,c
 12398  002852  6EC2               	movwf	4034,c	;volatile
 12399                           
 12400                           ;adc.c: 112: ADCON0bits.ADON = 1;
 12401  002854  80C2               	bsf	4034,0,c	;volatile
 12402                           
 12403                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 12404  002856  82C2               	bsf	4034,1,c	;volatile
 12405  002858                     
 12406                           ;adc.c: 119: {
 12407  002858  B2C2               	btfsc	4034,1,c	;volatile
 12408  00285A  D7FE               	goto	l1002
 12409                           
 12410                           ;adc.c: 120: }
 12411                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 12412  00285C  50C4               	movf	4036,w,c	;volatile
 12413  00285E  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 12414  002860  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 12415  002862  50C3               	movf	4035,w,c	;volatile
 12416  002864  241A               	addwf	??_ADC_GetConversion,w,c
 12417  002866  6E18               	movwf	?_ADC_GetConversion,c
 12418  002868  0E00               	movlw	0
 12419  00286A  201B               	addwfc	??_ADC_GetConversion+1,w,c
 12420  00286C  6E19               	movwf	?_ADC_GetConversion+1,c
 12421  00286E  0012               	return	
 12422  002870                     __end_of_ADC_GetConversion:
 12423                           	opt stack 0
 12424                           tosu	equ	0xFFF
 12425                           tosh	equ	0xFFE
 12426                           tosl	equ	0xFFD
 12427                           pclath	equ	0xFFA
 12428                           tblptru	equ	0xFF8
 12429                           tblptrh	equ	0xFF7
 12430                           tblptrl	equ	0xFF6
 12431                           tablat	equ	0xFF5
 12432                           prodh	equ	0xFF4
 12433                           prodl	equ	0xFF3
 12434                           intcon	equ	0xFF2
 12435                           intcon2	equ	0xFF1
 12436                           indf0	equ	0xFEF
 12437                           postinc0	equ	0xFEE
 12438                           fsr0h	equ	0xFEA
 12439                           fsr0l	equ	0xFE9
 12440                           wreg	equ	0xFE8
 12441                           indf1	equ	0xFE7
 12442                           postdec1	equ	0xFE5
 12443                           fsr1h	equ	0xFE2
 12444                           fsr1l	equ	0xFE1
 12445                           indf2	equ	0xFDF
 12446                           postinc2	equ	0xFDE
 12447                           postdec2	equ	0xFDD
 12448                           fsr2h	equ	0xFDA
 12449                           fsr2l	equ	0xFD9
 12450                           status	equ	0xFD8
 12451                           
 12452 ;; *************** function _InitSystemApplicationManagers *****************
 12453 ;; Defined at:
 12454 ;;		line 33 in file "SystemSettings.c"
 12455 ;; Parameters:    Size  Location     Type
 12456 ;;		None
 12457 ;; Auto vars:     Size  Location     Type
 12458 ;;		None
 12459 ;; Return value:  Size  Location     Type
 12460 ;;                  1    wreg      void 
 12461 ;; Registers used:
 12462 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12463 ;; Tracked objects:
 12464 ;;		On entry : 0/0
 12465 ;;		On exit  : 0/0
 12466 ;;		Unchanged: 0/0
 12467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12468 ;;      Params:         0       0       0       0       0       0       0
 12469 ;;      Locals:         0       0       0       0       0       0       0
 12470 ;;      Temps:          0       0       0       0       0       0       0
 12471 ;;      Totals:         0       0       0       0       0       0       0
 12472 ;;Total ram usage:        0 bytes
 12473 ;; Hardware stack levels used:    1
 12474 ;; Hardware stack levels required when called:    7
 12475 ;; This function calls:
 12476 ;;		_ClearMcuRunTime
 12477 ;;		_DacInit
 12478 ;;		_InitAdcApplicationMgr
 12479 ;;		_PLLInitialize
 12480 ;;		_TMR0_StartTimer
 12481 ;; This function is called by:
 12482 ;;		_main
 12483 ;; This function uses a non-reentrant model
 12484 ;;
 12485                           
 12486                           	psect	text61
 12487  002A3A                     __ptext61:
 12488                           	opt stack 0
 12489  002A3A                     _InitSystemApplicationManagers:
 12490                           	opt stack 23
 12491                           
 12492                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 12493                           
 12494                           ;incstack = 0
 12495  002A3A  EC55  F015         	call	_InitAdcApplicationMgr	;wreg free
 12496                           
 12497                           ;SystemSettings.c: 39: TMR0_StartTimer();
 12498  002A3E  EC5C  F015         	call	_TMR0_StartTimer	;wreg free
 12499                           
 12500                           ;SystemSettings.c: 42: PLLInitialize();
 12501  002A42  ECAB  F006         	call	_PLLInitialize	;wreg free
 12502                           
 12503                           ;SystemSettings.c: 45: ClearMcuRunTime();
 12504  002A46  EC32  F015         	call	_ClearMcuRunTime	;wreg free
 12505                           
 12506                           ;SystemSettings.c: 48: DacInit();
 12507  002A4A  ECC5  F00F         	call	_DacInit	;wreg free
 12508  002A4E  0012               	return		;funcret
 12509  002A50                     __end_of_InitSystemApplicationManagers:
 12510                           	opt stack 0
 12511                           tosu	equ	0xFFF
 12512                           tosh	equ	0xFFE
 12513                           tosl	equ	0xFFD
 12514                           pclath	equ	0xFFA
 12515                           tblptru	equ	0xFF8
 12516                           tblptrh	equ	0xFF7
 12517                           tblptrl	equ	0xFF6
 12518                           tablat	equ	0xFF5
 12519                           prodh	equ	0xFF4
 12520                           prodl	equ	0xFF3
 12521                           intcon	equ	0xFF2
 12522                           intcon2	equ	0xFF1
 12523                           indf0	equ	0xFEF
 12524                           postinc0	equ	0xFEE
 12525                           fsr0h	equ	0xFEA
 12526                           fsr0l	equ	0xFE9
 12527                           wreg	equ	0xFE8
 12528                           indf1	equ	0xFE7
 12529                           postdec1	equ	0xFE5
 12530                           fsr1h	equ	0xFE2
 12531                           fsr1l	equ	0xFE1
 12532                           indf2	equ	0xFDF
 12533                           postinc2	equ	0xFDE
 12534                           postdec2	equ	0xFDD
 12535                           fsr2h	equ	0xFDA
 12536                           fsr2l	equ	0xFD9
 12537                           status	equ	0xFD8
 12538                           
 12539 ;; *************** function _TMR0_StartTimer *****************
 12540 ;; Defined at:
 12541 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 12542 ;; Parameters:    Size  Location     Type
 12543 ;;		None
 12544 ;; Auto vars:     Size  Location     Type
 12545 ;;		None
 12546 ;; Return value:  Size  Location     Type
 12547 ;;                  1    wreg      void 
 12548 ;; Registers used:
 12549 ;;		None
 12550 ;; Tracked objects:
 12551 ;;		On entry : 0/0
 12552 ;;		On exit  : 0/0
 12553 ;;		Unchanged: 0/0
 12554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12555 ;;      Params:         0       0       0       0       0       0       0
 12556 ;;      Locals:         0       0       0       0       0       0       0
 12557 ;;      Temps:          0       0       0       0       0       0       0
 12558 ;;      Totals:         0       0       0       0       0       0       0
 12559 ;;Total ram usage:        0 bytes
 12560 ;; Hardware stack levels used:    1
 12561 ;; Hardware stack levels required when called:    3
 12562 ;; This function calls:
 12563 ;;		Nothing
 12564 ;; This function is called by:
 12565 ;;		_InitSystemApplicationManagers
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569                           	psect	text62
 12570  002AB8                     __ptext62:
 12571                           	opt stack 0
 12572  002AB8                     _TMR0_StartTimer:
 12573                           	opt stack 26
 12574                           
 12575                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 12576                           
 12577                           ;incstack = 0
 12578  002AB8  8ED5               	bsf	4053,7,c	;volatile
 12579  002ABA  0012               	return		;funcret
 12580  002ABC                     __end_of_TMR0_StartTimer:
 12581                           	opt stack 0
 12582                           tosu	equ	0xFFF
 12583                           tosh	equ	0xFFE
 12584                           tosl	equ	0xFFD
 12585                           pclath	equ	0xFFA
 12586                           tblptru	equ	0xFF8
 12587                           tblptrh	equ	0xFF7
 12588                           tblptrl	equ	0xFF6
 12589                           tablat	equ	0xFF5
 12590                           prodh	equ	0xFF4
 12591                           prodl	equ	0xFF3
 12592                           intcon	equ	0xFF2
 12593                           intcon2	equ	0xFF1
 12594                           indf0	equ	0xFEF
 12595                           postinc0	equ	0xFEE
 12596                           fsr0h	equ	0xFEA
 12597                           fsr0l	equ	0xFE9
 12598                           wreg	equ	0xFE8
 12599                           indf1	equ	0xFE7
 12600                           postdec1	equ	0xFE5
 12601                           fsr1h	equ	0xFE2
 12602                           fsr1l	equ	0xFE1
 12603                           indf2	equ	0xFDF
 12604                           postinc2	equ	0xFDE
 12605                           postdec2	equ	0xFDD
 12606                           fsr2h	equ	0xFDA
 12607                           fsr2l	equ	0xFD9
 12608                           status	equ	0xFD8
 12609                           
 12610 ;; *************** function _PLLInitialize *****************
 12611 ;; Defined at:
 12612 ;;		line 14 in file "SyntApp.c"
 12613 ;; Parameters:    Size  Location     Type
 12614 ;;		None
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  idx             2   45[COMRAM] int 
 12617 ;;  idx             2   43[COMRAM] int 
 12618 ;; Return value:  Size  Location     Type
 12619 ;;                  1    wreg      void 
 12620 ;; Registers used:
 12621 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12622 ;; Tracked objects:
 12623 ;;		On entry : 0/0
 12624 ;;		On exit  : 0/0
 12625 ;;		Unchanged: 0/0
 12626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12627 ;;      Params:         0       0       0       0       0       0       0
 12628 ;;      Locals:         4       0       0       0       0       0       0
 12629 ;;      Temps:          2       0       0       0       0       0       0
 12630 ;;      Totals:         6       0       0       0       0       0       0
 12631 ;;Total ram usage:        6 bytes
 12632 ;; Hardware stack levels used:    1
 12633 ;; Hardware stack levels required when called:    6
 12634 ;; This function calls:
 12635 ;;		_SWSPI_send_word
 12636 ;;		_SwSpi_Set_CE_Pin
 12637 ;; This function is called by:
 12638 ;;		_InitSystemApplicationManagers
 12639 ;; This function uses a non-reentrant model
 12640 ;;
 12641                           
 12642                           	psect	text63
 12643  000D56                     __ptext63:
 12644                           	opt stack 0
 12645  000D56                     _PLLInitialize:
 12646                           	opt stack 23
 12647                           
 12648                           ;SyntApp.c: 17: IOCB = 0b10000000;
 12649                           
 12650                           ;incstack = 0
 12651  000D56  0E80               	movlw	128
 12652  000D58  6E62               	movwf	3938,c	;volatile
 12653                           
 12654                           ;SyntApp.c: 20: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
 12655  000D5A  0E01               	movlw	1
 12656  000D5C  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 12657  000D5E  0E00               	movlw	0
 12658  000D60  EC5E  F013         	call	_SwSpi_Set_CE_Pin
 12659                           
 12660                           ;SyntApp.c: 24: for(int idx = 0; idx < 13; idx++)
 12661  000D64  0E00               	movlw	0
 12662  000D66  6E2D               	movwf	PLLInitialize@idx+1,c
 12663  000D68  0E00               	movlw	0
 12664  000D6A  6E2C               	movwf	PLLInitialize@idx,c
 12665  000D6C                     l5472:
 12666  000D6C  BE2D               	btfsc	PLLInitialize@idx+1,7,c
 12667  000D6E  D006               	goto	l445
 12668  000D70  502D               	movf	PLLInitialize@idx+1,w,c
 12669  000D72  E128               	bnz	l5482
 12670  000D74  0E0D               	movlw	13
 12671  000D76  5C2C               	subwf	PLLInitialize@idx,w,c
 12672  000D78  B0D8               	btfsc	status,0,c
 12673  000D7A  D024               	goto	u5070
 12674  000D7C                     l445:
 12675                           
 12676                           ;SyntApp.c: 25: {
 12677                           ;SyntApp.c: 26: SWSPI_send_word(SYNTH_TX, TEST_PLL_REGISTERS[idx], 3);
 12678  000D7C  C02C  F02A         	movff	PLLInitialize@idx,??_PLLInitialize
 12679  000D80  C02D  F02B         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
 12680  000D84  90D8               	bcf	status,0,c
 12681  000D86  362A               	rlcf	??_PLLInitialize,f,c
 12682  000D88  362B               	rlcf	??_PLLInitialize+1,f,c
 12683  000D8A  90D8               	bcf	status,0,c
 12684  000D8C  362A               	rlcf	??_PLLInitialize,f,c
 12685  000D8E  362B               	rlcf	??_PLLInitialize+1,f,c
 12686  000D90  0E45               	movlw	low _TEST_PLL_REGISTERS
 12687  000D92  242A               	addwf	??_PLLInitialize,w,c
 12688  000D94  6EF6               	movwf	tblptrl,c
 12689  000D96  0E7A               	movlw	high _TEST_PLL_REGISTERS
 12690  000D98  202B               	addwfc	??_PLLInitialize+1,w,c
 12691  000D9A  6EF7               	movwf	tblptrh,c
 12692  000D9C                     	if	0	;There are less than 3 active tblptr bytes
 12693  000D9C                     	endif
 12694  000D9C  0009               	tblrd		*+
 12695  000D9E  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12696  000DA2  0009               	tblrd		*+
 12697  000DA4  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12698  000DA8  0009               	tblrd		*+
 12699  000DAA  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12700  000DAE  000A               	tblrd		*-
 12701  000DB0  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12702  000DB4  0E03               	movlw	3
 12703  000DB6  6E25               	movwf	SWSPI_send_word@dataSize,c
 12704  000DB8  0E00               	movlw	0
 12705  000DBA  ECFF  F00C         	call	_SWSPI_send_word
 12706  000DBE  4A2C               	infsnz	PLLInitialize@idx,f,c
 12707  000DC0  2A2D               	incf	PLLInitialize@idx+1,f,c
 12708  000DC2  D7D4               	goto	l5472
 12709  000DC4                     u5070:
 12710  000DC4                     l5482:
 12711                           
 12712                           ;SyntApp.c: 27: }
 12713                           ;SyntApp.c: 36: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
 12714  000DC4  0E01               	movlw	1
 12715  000DC6  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 12716  000DC8  0E01               	movlw	1
 12717  000DCA  EC5E  F013         	call	_SwSpi_Set_CE_Pin
 12718                           
 12719                           ;SyntApp.c: 39: for(int idx = 0; idx < 13; idx++)
 12720  000DCE  0E00               	movlw	0
 12721  000DD0  6E2F               	movwf	PLLInitialize@idx_592+1,c
 12722  000DD2  0E00               	movlw	0
 12723  000DD4  6E2E               	movwf	PLLInitialize@idx_592,c
 12724  000DD6                     l5486:
 12725  000DD6  BE2F               	btfsc	PLLInitialize@idx_592+1,7,c
 12726  000DD8  D006               	goto	l447
 12727  000DDA  502F               	movf	PLLInitialize@idx_592+1,w,c
 12728  000DDC  E128               	bnz	l5496
 12729  000DDE  0E0D               	movlw	13
 12730  000DE0  5C2E               	subwf	PLLInitialize@idx_592,w,c
 12731  000DE2  B0D8               	btfsc	status,0,c
 12732  000DE4  D024               	goto	u5090
 12733  000DE6                     l447:
 12734                           
 12735                           ;SyntApp.c: 40: {
 12736                           ;SyntApp.c: 41: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
 12737  000DE6  C02E  F02A         	movff	PLLInitialize@idx_592,??_PLLInitialize
 12738  000DEA  C02F  F02B         	movff	PLLInitialize@idx_592+1,??_PLLInitialize+1
 12739  000DEE  90D8               	bcf	status,0,c
 12740  000DF0  362A               	rlcf	??_PLLInitialize,f,c
 12741  000DF2  362B               	rlcf	??_PLLInitialize+1,f,c
 12742  000DF4  90D8               	bcf	status,0,c
 12743  000DF6  362A               	rlcf	??_PLLInitialize,f,c
 12744  000DF8  362B               	rlcf	??_PLLInitialize+1,f,c
 12745  000DFA  0E79               	movlw	low _PLL_INIT_REGISTERS
 12746  000DFC  242A               	addwf	??_PLLInitialize,w,c
 12747  000DFE  6EF6               	movwf	tblptrl,c
 12748  000E00  0E7A               	movlw	high _PLL_INIT_REGISTERS
 12749  000E02  202B               	addwfc	??_PLLInitialize+1,w,c
 12750  000E04  6EF7               	movwf	tblptrh,c
 12751  000E06                     	if	0	;There are less than 3 active tblptr bytes
 12752  000E06                     	endif
 12753  000E06  0009               	tblrd		*+
 12754  000E08  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12755  000E0C  0009               	tblrd		*+
 12756  000E0E  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12757  000E12  0009               	tblrd		*+
 12758  000E14  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12759  000E18  000A               	tblrd		*-
 12760  000E1A  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12761  000E1E  0E03               	movlw	3
 12762  000E20  6E25               	movwf	SWSPI_send_word@dataSize,c
 12763  000E22  0E01               	movlw	1
 12764  000E24  ECFF  F00C         	call	_SWSPI_send_word
 12765  000E28  4A2E               	infsnz	PLLInitialize@idx_592,f,c
 12766  000E2A  2A2F               	incf	PLLInitialize@idx_592+1,f,c
 12767  000E2C  D7D4               	goto	l5486
 12768  000E2E                     u5090:
 12769  000E2E                     l5496:
 12770                           
 12771                           ;SyntApp.c: 42: }
 12772                           ;SyntApp.c: 45: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
 12773  000E2E  0E89               	movlw	low (_PLL_INIT_REGISTERS+16)
 12774  000E30  6EF6               	movwf	tblptrl,c
 12775  000E32  0E7A               	movlw	high (_PLL_INIT_REGISTERS+16)
 12776  000E34  6EF7               	movwf	tblptrh,c
 12777  000E36                     	if	0	;tblptru may be non-zero
 12778  000E36                     	endif
 12779  000E36                     	if	0	;tblptru may be non-zero
 12780  000E36                     	endif
 12781  000E36  0009               	tblrd		*+
 12782  000E38  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12783  000E3C  0009               	tblrd		*+
 12784  000E3E  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12785  000E42  0009               	tblrd		*+
 12786  000E44  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12787  000E48  000A               	tblrd		*-
 12788  000E4A  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12789  000E4E  0E03               	movlw	3
 12790  000E50  6E25               	movwf	SWSPI_send_word@dataSize,c
 12791  000E52  0E01               	movlw	1
 12792  000E54  ECFF  F00C         	call	_SWSPI_send_word
 12793                           
 12794                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
 12795  000E58  0E81               	movlw	low (_PLL_INIT_REGISTERS+8)
 12796  000E5A  6EF6               	movwf	tblptrl,c
 12797  000E5C  0E7A               	movlw	high (_PLL_INIT_REGISTERS+8)
 12798  000E5E  6EF7               	movwf	tblptrh,c
 12799  000E60                     	if	0	;tblptru may be non-zero
 12800  000E60                     	endif
 12801  000E60                     	if	0	;tblptru may be non-zero
 12802  000E60                     	endif
 12803  000E60  0009               	tblrd		*+
 12804  000E62  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12805  000E66  0009               	tblrd		*+
 12806  000E68  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12807  000E6C  0009               	tblrd		*+
 12808  000E6E  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12809  000E72  000A               	tblrd		*-
 12810  000E74  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12811  000E78  0E03               	movlw	3
 12812  000E7A  6E25               	movwf	SWSPI_send_word@dataSize,c
 12813  000E7C  0E01               	movlw	1
 12814  000E7E  ECFF  F00C         	call	_SWSPI_send_word
 12815                           
 12816                           ;SyntApp.c: 47: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
 12817  000E82  0E7D               	movlw	low (_PLL_INIT_REGISTERS+4)
 12818  000E84  6EF6               	movwf	tblptrl,c
 12819  000E86  0E7A               	movlw	high (_PLL_INIT_REGISTERS+4)
 12820  000E88  6EF7               	movwf	tblptrh,c
 12821  000E8A                     	if	0	;tblptru may be non-zero
 12822  000E8A                     	endif
 12823  000E8A                     	if	0	;tblptru may be non-zero
 12824  000E8A                     	endif
 12825  000E8A  0009               	tblrd		*+
 12826  000E8C  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12827  000E90  0009               	tblrd		*+
 12828  000E92  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12829  000E96  0009               	tblrd		*+
 12830  000E98  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12831  000E9C  000A               	tblrd		*-
 12832  000E9E  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12833  000EA2  0E03               	movlw	3
 12834  000EA4  6E25               	movwf	SWSPI_send_word@dataSize,c
 12835  000EA6  0E01               	movlw	1
 12836  000EA8  ECFF  F00C         	call	_SWSPI_send_word
 12837                           
 12838                           ;SyntApp.c: 48: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
 12839  000EAC  0E79               	movlw	low _PLL_INIT_REGISTERS
 12840  000EAE  6EF6               	movwf	tblptrl,c
 12841  000EB0                     	if	1	;There is more than 1 active tblptr byte
 12842  000EB0  0E7A               	movlw	high _PLL_INIT_REGISTERS
 12843  000EB2  6EF7               	movwf	tblptrh,c
 12844  000EB4                     	endif
 12845  000EB4                     	if	0	;There are less than 3 active tblptr bytes
 12846  000EB4                     	endif
 12847  000EB4  0009               	tblrd		*+
 12848  000EB6  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12849  000EBA  0009               	tblrd		*+
 12850  000EBC  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12851  000EC0  0009               	tblrd		*+
 12852  000EC2  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12853  000EC6  000A               	tblrd		*-
 12854  000EC8  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12855  000ECC  0E03               	movlw	3
 12856  000ECE  6E25               	movwf	SWSPI_send_word@dataSize,c
 12857  000ED0  0E01               	movlw	1
 12858  000ED2  ECFF  F00C         	call	_SWSPI_send_word
 12859  000ED6  0012               	return		;funcret
 12860  000ED8                     __end_of_PLLInitialize:
 12861                           	opt stack 0
 12862                           tosu	equ	0xFFF
 12863                           tosh	equ	0xFFE
 12864                           tosl	equ	0xFFD
 12865                           pclath	equ	0xFFA
 12866                           tblptru	equ	0xFF8
 12867                           tblptrh	equ	0xFF7
 12868                           tblptrl	equ	0xFF6
 12869                           tablat	equ	0xFF5
 12870                           prodh	equ	0xFF4
 12871                           prodl	equ	0xFF3
 12872                           intcon	equ	0xFF2
 12873                           intcon2	equ	0xFF1
 12874                           indf0	equ	0xFEF
 12875                           postinc0	equ	0xFEE
 12876                           fsr0h	equ	0xFEA
 12877                           fsr0l	equ	0xFE9
 12878                           wreg	equ	0xFE8
 12879                           indf1	equ	0xFE7
 12880                           postdec1	equ	0xFE5
 12881                           fsr1h	equ	0xFE2
 12882                           fsr1l	equ	0xFE1
 12883                           indf2	equ	0xFDF
 12884                           postinc2	equ	0xFDE
 12885                           postdec2	equ	0xFDD
 12886                           fsr2h	equ	0xFDA
 12887                           fsr2l	equ	0xFD9
 12888                           status	equ	0xFD8
 12889                           
 12890 ;; *************** function _SwSpi_Set_CE_Pin *****************
 12891 ;; Defined at:
 12892 ;;		line 221 in file "SwSpiApp.c"
 12893 ;; Parameters:    Size  Location     Type
 12894 ;;  phrType         1    wreg     enum E7593
 12895 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12896 ;; Auto vars:     Size  Location     Type
 12897 ;;  phrType         1   24[COMRAM] enum E7593
 12898 ;; Return value:  Size  Location     Type
 12899 ;;                  1    wreg      void 
 12900 ;; Registers used:
 12901 ;;		wreg, status,2, status,0
 12902 ;; Tracked objects:
 12903 ;;		On entry : 0/0
 12904 ;;		On exit  : 0/0
 12905 ;;		Unchanged: 0/0
 12906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12907 ;;      Params:         1       0       0       0       0       0       0
 12908 ;;      Locals:         1       0       0       0       0       0       0
 12909 ;;      Temps:          0       0       0       0       0       0       0
 12910 ;;      Totals:         2       0       0       0       0       0       0
 12911 ;;Total ram usage:        2 bytes
 12912 ;; Hardware stack levels used:    1
 12913 ;; Hardware stack levels required when called:    3
 12914 ;; This function calls:
 12915 ;;		Nothing
 12916 ;; This function is called by:
 12917 ;;		_PLLInitialize
 12918 ;; This function uses a non-reentrant model
 12919 ;;
 12920                           
 12921                           	psect	text64
 12922  0026BC                     __ptext64:
 12923                           	opt stack 0
 12924  0026BC                     _SwSpi_Set_CE_Pin:
 12925                           	opt stack 25
 12926                           
 12927                           ;incstack = 0
 12928                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 12929  0026BC  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 12930                           
 12931                           ;SwSpiApp.c: 223: switch(phrType)
 12932  0026BE  D014               	goto	l611
 12933  0026C0                     
 12934                           ;SwSpiApp.c: 226: if(cPinMode == 1)
 12935  0026C0  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 12936  0026C2  A4D8               	btfss	status,2,c
 12937  0026C4  D002               	goto	l613
 12938                           
 12939                           ;SwSpiApp.c: 227: {
 12940                           ;SwSpiApp.c: 228: do { LATCbits.LATC1 = 1; } while(0);
 12941  0026C6  828B               	bsf	3979,1,c	;volatile
 12942                           
 12943                           ;SwSpiApp.c: 229: }
 12944  0026C8  0012               	return	
 12945  0026CA                     l613:
 12946                           
 12947                           ;SwSpiApp.c: 230: else if(cPinMode == 0)
 12948  0026CA  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 12949  0026CC  A4D8               	btfss	status,2,c
 12950  0026CE  0012               	return	
 12951                           
 12952                           ;SwSpiApp.c: 231: {
 12953                           ;SwSpiApp.c: 232: do { LATCbits.LATC1 = 0; } while(0);
 12954  0026D0  928B               	bcf	3979,1,c	;volatile
 12955                           
 12956                           ;SwSpiApp.c: 233: }
 12957                           ;SwSpiApp.c: 234: break;
 12958  0026D2  0012               	return	
 12959  0026D4                     
 12960                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 12961  0026D4  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 12962  0026D6  A4D8               	btfss	status,2,c
 12963  0026D8  D002               	goto	l622
 12964                           
 12965                           ;SwSpiApp.c: 238: {
 12966                           ;SwSpiApp.c: 239: do { LATDbits.LATD2 = 1; } while(0);
 12967  0026DA  848C               	bsf	3980,2,c	;volatile
 12968                           
 12969                           ;SwSpiApp.c: 240: }
 12970  0026DC  0012               	return	
 12971  0026DE                     l622:
 12972                           
 12973                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 12974  0026DE  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 12975  0026E0  A4D8               	btfss	status,2,c
 12976  0026E2  0012               	return	
 12977                           
 12978                           ;SwSpiApp.c: 242: {
 12979                           ;SwSpiApp.c: 243: do { LATCbits.LATC1 = 0; } while(0);
 12980  0026E4  928B               	bcf	3979,1,c	;volatile
 12981                           
 12982                           ;SwSpiApp.c: 246: }
 12983                           
 12984                           ;SwSpiApp.c: 244: }
 12985                           ;SwSpiApp.c: 245: break;
 12986  0026E6  0012               	return	
 12987  0026E8                     l611:
 12988  0026E8  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 12989                           
 12990                           ; Switch size 1, requested type "space"
 12991                           ; Number of cases is 2, Range of values is 0 to 1
 12992                           ; switch strategies available:
 12993                           ; Name         Instructions Cycles
 12994                           ; simple_byte            7     4 (average)
 12995                           ;	Chosen strategy is simple_byte
 12996  0026EA  0A00               	xorlw	0	; case 0
 12997  0026EC  B4D8               	btfsc	status,2,c
 12998  0026EE  D7E8               	goto	l612
 12999  0026F0  0A01               	xorlw	1	; case 1
 13000  0026F2  A4D8               	btfss	status,2,c
 13001  0026F4  0012               	return	
 13002  0026F6  D7EE               	goto	l621
 13003  0026F8                     __end_of_SwSpi_Set_CE_Pin:
 13004                           	opt stack 0
 13005                           tosu	equ	0xFFF
 13006                           tosh	equ	0xFFE
 13007                           tosl	equ	0xFFD
 13008                           pclath	equ	0xFFA
 13009                           tblptru	equ	0xFF8
 13010                           tblptrh	equ	0xFF7
 13011                           tblptrl	equ	0xFF6
 13012                           tablat	equ	0xFF5
 13013                           prodh	equ	0xFF4
 13014                           prodl	equ	0xFF3
 13015                           intcon	equ	0xFF2
 13016                           intcon2	equ	0xFF1
 13017                           indf0	equ	0xFEF
 13018                           postinc0	equ	0xFEE
 13019                           fsr0h	equ	0xFEA
 13020                           fsr0l	equ	0xFE9
 13021                           wreg	equ	0xFE8
 13022                           indf1	equ	0xFE7
 13023                           postdec1	equ	0xFE5
 13024                           fsr1h	equ	0xFE2
 13025                           fsr1l	equ	0xFE1
 13026                           indf2	equ	0xFDF
 13027                           postinc2	equ	0xFDE
 13028                           postdec2	equ	0xFDD
 13029                           fsr2h	equ	0xFDA
 13030                           fsr2l	equ	0xFD9
 13031                           status	equ	0xFD8
 13032                           
 13033 ;; *************** function _InitAdcApplicationMgr *****************
 13034 ;; Defined at:
 13035 ;;		line 23 in file "AdcApp.c"
 13036 ;; Parameters:    Size  Location     Type
 13037 ;;		None
 13038 ;; Auto vars:     Size  Location     Type
 13039 ;;		None
 13040 ;; Return value:  Size  Location     Type
 13041 ;;                  1    wreg      void 
 13042 ;; Registers used:
 13043 ;;		wreg, status,2
 13044 ;; Tracked objects:
 13045 ;;		On entry : 0/0
 13046 ;;		On exit  : 0/0
 13047 ;;		Unchanged: 0/0
 13048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13049 ;;      Params:         0       0       0       0       0       0       0
 13050 ;;      Locals:         0       0       0       0       0       0       0
 13051 ;;      Temps:          0       0       0       0       0       0       0
 13052 ;;      Totals:         0       0       0       0       0       0       0
 13053 ;;Total ram usage:        0 bytes
 13054 ;; Hardware stack levels used:    1
 13055 ;; Hardware stack levels required when called:    3
 13056 ;; This function calls:
 13057 ;;		Nothing
 13058 ;; This function is called by:
 13059 ;;		_InitSystemApplicationManagers
 13060 ;; This function uses a non-reentrant model
 13061 ;;
 13062                           
 13063                           	psect	text65
 13064  002AAA                     __ptext65:
 13065                           	opt stack 0
 13066  002AAA                     _InitAdcApplicationMgr:
 13067                           	opt stack 26
 13068                           
 13069                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 13070                           
 13071                           ;incstack = 0
 13072  002AAA  0E00               	movlw	0
 13073  002AAC  6E3D               	movwf	_adcSampleMode,c
 13074  002AAE  0012               	return		;funcret
 13075  002AB0                     __end_of_InitAdcApplicationMgr:
 13076                           	opt stack 0
 13077                           tosu	equ	0xFFF
 13078                           tosh	equ	0xFFE
 13079                           tosl	equ	0xFFD
 13080                           pclath	equ	0xFFA
 13081                           tblptru	equ	0xFF8
 13082                           tblptrh	equ	0xFF7
 13083                           tblptrl	equ	0xFF6
 13084                           tablat	equ	0xFF5
 13085                           prodh	equ	0xFF4
 13086                           prodl	equ	0xFF3
 13087                           intcon	equ	0xFF2
 13088                           intcon2	equ	0xFF1
 13089                           indf0	equ	0xFEF
 13090                           postinc0	equ	0xFEE
 13091                           fsr0h	equ	0xFEA
 13092                           fsr0l	equ	0xFE9
 13093                           wreg	equ	0xFE8
 13094                           indf1	equ	0xFE7
 13095                           postdec1	equ	0xFE5
 13096                           fsr1h	equ	0xFE2
 13097                           fsr1l	equ	0xFE1
 13098                           indf2	equ	0xFDF
 13099                           postinc2	equ	0xFDE
 13100                           postdec2	equ	0xFDD
 13101                           fsr2h	equ	0xFDA
 13102                           fsr2l	equ	0xFD9
 13103                           status	equ	0xFD8
 13104                           
 13105 ;; *************** function _DacInit *****************
 13106 ;; Defined at:
 13107 ;;		line 24 in file "DacApp.c"
 13108 ;; Parameters:    Size  Location     Type
 13109 ;;		None
 13110 ;; Auto vars:     Size  Location     Type
 13111 ;;		None
 13112 ;; Return value:  Size  Location     Type
 13113 ;;                  1    wreg      void 
 13114 ;; Registers used:
 13115 ;;		wreg, status,2, status,0, cstack
 13116 ;; Tracked objects:
 13117 ;;		On entry : 0/0
 13118 ;;		On exit  : 0/0
 13119 ;;		Unchanged: 0/0
 13120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13121 ;;      Params:         0       0       0       0       0       0       0
 13122 ;;      Locals:         0       0       0       0       0       0       0
 13123 ;;      Temps:          0       0       0       0       0       0       0
 13124 ;;      Totals:         0       0       0       0       0       0       0
 13125 ;;Total ram usage:        0 bytes
 13126 ;; Hardware stack levels used:    1
 13127 ;; Hardware stack levels required when called:    6
 13128 ;; This function calls:
 13129 ;;		_SWSPI_send_word
 13130 ;; This function is called by:
 13131 ;;		_InitSystemApplicationManagers
 13132 ;; This function uses a non-reentrant model
 13133 ;;
 13134                           
 13135                           	psect	text66
 13136  001F8A                     __ptext66:
 13137                           	opt stack 0
 13138  001F8A                     _DacInit:
 13139                           	opt stack 23
 13140                           
 13141                           ;DacApp.c: 26: SWSPI_send_word(EXT_DAC, (0x2344), 1);
 13142                           
 13143                           ;incstack = 0
 13144  001F8A  0E44               	movlw	68
 13145  001F8C  6E21               	movwf	SWSPI_send_word@data,c
 13146  001F8E  0E23               	movlw	35
 13147  001F90  6E22               	movwf	SWSPI_send_word@data+1,c
 13148  001F92  0E00               	movlw	0
 13149  001F94  6E23               	movwf	SWSPI_send_word@data+2,c
 13150  001F96  0E00               	movlw	0
 13151  001F98  6E24               	movwf	SWSPI_send_word@data+3,c
 13152  001F9A  0E01               	movlw	1
 13153  001F9C  6E25               	movwf	SWSPI_send_word@dataSize,c
 13154  001F9E  0E02               	movlw	2
 13155  001FA0  ECFF  F00C         	call	_SWSPI_send_word
 13156                           
 13157                           ;DacApp.c: 27: SWSPI_send_word(EXT_DAC, (0x6344), 1);
 13158  001FA4  0E44               	movlw	68
 13159  001FA6  6E21               	movwf	SWSPI_send_word@data,c
 13160  001FA8  0E63               	movlw	99
 13161  001FAA  6E22               	movwf	SWSPI_send_word@data+1,c
 13162  001FAC  0E00               	movlw	0
 13163  001FAE  6E23               	movwf	SWSPI_send_word@data+2,c
 13164  001FB0  0E00               	movlw	0
 13165  001FB2  6E24               	movwf	SWSPI_send_word@data+3,c
 13166  001FB4  0E01               	movlw	1
 13167  001FB6  6E25               	movwf	SWSPI_send_word@dataSize,c
 13168  001FB8  0E02               	movlw	2
 13169  001FBA  ECFF  F00C         	call	_SWSPI_send_word
 13170                           
 13171                           ;DacApp.c: 28: SWSPI_send_word(EXT_DAC, (0xA344), 1);
 13172  001FBE  0E44               	movlw	68
 13173  001FC0  6E21               	movwf	SWSPI_send_word@data,c
 13174  001FC2  0EA3               	movlw	163
 13175  001FC4  6E22               	movwf	SWSPI_send_word@data+1,c
 13176  001FC6  0E00               	movlw	0
 13177  001FC8  6E23               	movwf	SWSPI_send_word@data+2,c
 13178  001FCA  0E00               	movlw	0
 13179  001FCC  6E24               	movwf	SWSPI_send_word@data+3,c
 13180  001FCE  0E01               	movlw	1
 13181  001FD0  6E25               	movwf	SWSPI_send_word@dataSize,c
 13182  001FD2  0E02               	movlw	2
 13183  001FD4  ECFF  F00C         	call	_SWSPI_send_word
 13184                           
 13185                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0xE344), 1);
 13186  001FD8  0E44               	movlw	68
 13187  001FDA  6E21               	movwf	SWSPI_send_word@data,c
 13188  001FDC  0EE3               	movlw	227
 13189  001FDE  6E22               	movwf	SWSPI_send_word@data+1,c
 13190  001FE0  0E00               	movlw	0
 13191  001FE2  6E23               	movwf	SWSPI_send_word@data+2,c
 13192  001FE4  0E00               	movlw	0
 13193  001FE6  6E24               	movwf	SWSPI_send_word@data+3,c
 13194  001FE8  0E01               	movlw	1
 13195  001FEA  6E25               	movwf	SWSPI_send_word@dataSize,c
 13196  001FEC  0E02               	movlw	2
 13197  001FEE  ECFF  F00C         	call	_SWSPI_send_word
 13198  001FF2  0012               	return		;funcret
 13199  001FF4                     __end_of_DacInit:
 13200                           	opt stack 0
 13201                           tosu	equ	0xFFF
 13202                           tosh	equ	0xFFE
 13203                           tosl	equ	0xFFD
 13204                           pclath	equ	0xFFA
 13205                           tblptru	equ	0xFF8
 13206                           tblptrh	equ	0xFF7
 13207                           tblptrl	equ	0xFF6
 13208                           tablat	equ	0xFF5
 13209                           prodh	equ	0xFF4
 13210                           prodl	equ	0xFF3
 13211                           intcon	equ	0xFF2
 13212                           intcon2	equ	0xFF1
 13213                           indf0	equ	0xFEF
 13214                           postinc0	equ	0xFEE
 13215                           fsr0h	equ	0xFEA
 13216                           fsr0l	equ	0xFE9
 13217                           wreg	equ	0xFE8
 13218                           indf1	equ	0xFE7
 13219                           postdec1	equ	0xFE5
 13220                           fsr1h	equ	0xFE2
 13221                           fsr1l	equ	0xFE1
 13222                           indf2	equ	0xFDF
 13223                           postinc2	equ	0xFDE
 13224                           postdec2	equ	0xFDD
 13225                           fsr2h	equ	0xFDA
 13226                           fsr2l	equ	0xFD9
 13227                           status	equ	0xFD8
 13228                           
 13229 ;; *************** function _SWSPI_send_word *****************
 13230 ;; Defined at:
 13231 ;;		line 17 in file "SwSpiApp.c"
 13232 ;; Parameters:    Size  Location     Type
 13233 ;;  phrType         1    wreg     enum E7593
 13234 ;;  data            4   32[COMRAM] unsigned long 
 13235 ;;  dataSize        1   36[COMRAM] unsigned char 
 13236 ;; Auto vars:     Size  Location     Type
 13237 ;;  phrType         1   40[COMRAM] enum E7593
 13238 ;;  datac           1   37[COMRAM] unsigned char 
 13239 ;;  idx             2   38[COMRAM] int 
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  1    wreg      void 
 13242 ;; Registers used:
 13243 ;;		wreg, status,2, status,0, cstack
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13249 ;;      Params:         5       0       0       0       0       0       0
 13250 ;;      Locals:         4       0       0       0       0       0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0
 13252 ;;      Totals:         9       0       0       0       0       0       0
 13253 ;;Total ram usage:        9 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; Hardware stack levels required when called:    5
 13256 ;; This function calls:
 13257 ;;		_SWSPI_DAC_send_bits
 13258 ;;		_SWSPI_Synth_send_bits
 13259 ;;		_SwSpi_Set_Dac_Sync_Pin
 13260 ;;		_SwSpi_Set_Synth_Le_Pin
 13261 ;;		_make8
 13262 ;; This function is called by:
 13263 ;;		_DacInit
 13264 ;;		_PLLInitialize
 13265 ;;		_DacSetValue
 13266 ;;		_UpdateTxFreq
 13267 ;;		_UpdateRxFreq
 13268 ;; This function uses a non-reentrant model
 13269 ;;
 13270                           
 13271                           	psect	text67
 13272  0019FE                     __ptext67:
 13273                           	opt stack 0
 13274  0019FE                     _SWSPI_send_word:
 13275                           	opt stack 23
 13276                           
 13277                           ;incstack = 0
 13278                           ;SWSPI_send_word@phrType stored from wreg
 13279  0019FE  6E29               	movwf	SWSPI_send_word@phrType,c
 13280                           
 13281                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 13282  001A00  9EF2               	bcf	intcon,7,c	;volatile
 13283                           
 13284                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 13285  001A02  5029               	movf	SWSPI_send_word@phrType,w,c
 13286  001A04  B4D8               	btfsc	status,2,c
 13287  001A06  D003               	goto	u4720
 13288  001A08  0429               	decf	SWSPI_send_word@phrType,w,c
 13289  001A0A  A4D8               	btfss	status,2,c
 13290  001A0C  D005               	goto	l510
 13291  001A0E                     u4720:
 13292                           
 13293                           ;SwSpiApp.c: 24: {
 13294                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 13295  001A0E  0E00               	movlw	0
 13296  001A10  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 13297  001A12  5029               	movf	SWSPI_send_word@phrType,w,c
 13298  001A14  EC7C  F013         	call	_SwSpi_Set_Synth_Le_Pin
 13299  001A18                     l510:
 13300                           
 13301                           ;SwSpiApp.c: 26: }
 13302                           ;SwSpiApp.c: 27: if(phrType == EXT_DAC)
 13303  001A18  0E02               	movlw	2
 13304  001A1A  1829               	xorwf	SWSPI_send_word@phrType,w,c
 13305  001A1C  A4D8               	btfss	status,2,c
 13306  001A1E  D003               	goto	l513
 13307                           
 13308                           ;SwSpiApp.c: 28: {
 13309                           ;SwSpiApp.c: 29: SwSpi_Set_Dac_Sync_Pin(0);
 13310  001A20  0E00               	movlw	0
 13311  001A22  ECEB  F014         	call	_SwSpi_Set_Dac_Sync_Pin
 13312  001A26                     l513:
 13313                           
 13314                           ;SwSpiApp.c: 30: }
 13315                           ;SwSpiApp.c: 35: for(int idx = dataSize + 1; idx > 0; idx--)
 13316  001A26  0E01               	movlw	1
 13317  001A28  2425               	addwf	SWSPI_send_word@dataSize,w,c
 13318  001A2A  6E27               	movwf	SWSPI_send_word@idx,c
 13319  001A2C  6A28               	clrf	SWSPI_send_word@idx+1,c
 13320  001A2E  0E00               	movlw	0
 13321  001A30  2228               	addwfc	SWSPI_send_word@idx+1,f,c
 13322  001A32                     l5178:
 13323  001A32  BE28               	btfsc	SWSPI_send_word@idx+1,7,c
 13324  001A34  D02B               	goto	u4780
 13325  001A36  5028               	movf	SWSPI_send_word@idx+1,w,c
 13326  001A38  E103               	bnz	l5182
 13327  001A3A  0427               	decf	SWSPI_send_word@idx,w,c
 13328  001A3C  A0D8               	btfss	status,0,c
 13329  001A3E  D026               	goto	u4780
 13330  001A40                     l5182:
 13331                           
 13332                           ;SwSpiApp.c: 36: {
 13333                           ;SwSpiApp.c: 37: uint8_t datac = make8(data, idx - 1);
 13334  001A40  C021  F018         	movff	SWSPI_send_word@data,make8@data
 13335  001A44  C022  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 13336  001A48  C023  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 13337  001A4C  C024  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 13338  001A50  0427               	decf	SWSPI_send_word@idx,w,c
 13339  001A52  6E1C               	movwf	make8@dataLocation,c
 13340  001A54  ECBA  F010         	call	_make8	;wreg free
 13341  001A58  6E26               	movwf	SWSPI_send_word@datac,c
 13342                           
 13343                           ;SwSpiApp.c: 39: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 13344  001A5A  5029               	movf	SWSPI_send_word@phrType,w,c
 13345  001A5C  B4D8               	btfsc	status,2,c
 13346  001A5E  D003               	goto	u4760
 13347  001A60  0429               	decf	SWSPI_send_word@phrType,w,c
 13348  001A62  A4D8               	btfss	status,2,c
 13349  001A64  D006               	goto	l516
 13350  001A66                     u4760:
 13351                           
 13352                           ;SwSpiApp.c: 40: {
 13353                           ;SwSpiApp.c: 41: SWSPI_Synth_send_bits(phrType, datac);
 13354  001A66  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_Synth_send_bits@data
 13355  001A6A  5029               	movf	SWSPI_send_word@phrType,w,c
 13356  001A6C  ECE8  F010         	call	_SWSPI_Synth_send_bits
 13357                           
 13358                           ;SwSpiApp.c: 42: }
 13359  001A70  D009               	goto	l520
 13360  001A72                     l516:
 13361                           
 13362                           ;SwSpiApp.c: 43: else if (phrType == EXT_DAC)
 13363  001A72  0E02               	movlw	2
 13364  001A74  1829               	xorwf	SWSPI_send_word@phrType,w,c
 13365  001A76  A4D8               	btfss	status,2,c
 13366  001A78  D005               	goto	l520
 13367                           
 13368                           ;SwSpiApp.c: 44: {
 13369                           ;SwSpiApp.c: 45: SWSPI_DAC_send_bits(phrType, datac);
 13370  001A7A  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 13371  001A7E  5029               	movf	SWSPI_send_word@phrType,w,c
 13372  001A80  EC14  F011         	call	_SWSPI_DAC_send_bits
 13373  001A84                     l520:
 13374  001A84  0627               	decf	SWSPI_send_word@idx,f,c
 13375  001A86  A0D8               	btfss	status,0,c
 13376  001A88  0628               	decf	SWSPI_send_word@idx+1,f,c
 13377  001A8A  D7D3               	goto	l5178
 13378  001A8C                     u4780:
 13379                           
 13380                           ;SwSpiApp.c: 46: }
 13381                           ;SwSpiApp.c: 47: }
 13382                           ;SwSpiApp.c: 52: if(phrType == EXT_DAC)
 13383  001A8C  0E02               	movlw	2
 13384  001A8E  1829               	xorwf	SWSPI_send_word@phrType,w,c
 13385  001A90  A4D8               	btfss	status,2,c
 13386  001A92  D004               	goto	l521
 13387                           
 13388                           ;SwSpiApp.c: 53: {
 13389                           ;SwSpiApp.c: 54: SwSpi_Set_Dac_Sync_Pin(1);
 13390  001A94  0E01               	movlw	1
 13391  001A96  ECEB  F014         	call	_SwSpi_Set_Dac_Sync_Pin
 13392                           
 13393                           ;SwSpiApp.c: 55: }
 13394  001A9A  D00B               	goto	l523
 13395  001A9C                     l521:
 13396                           
 13397                           ;SwSpiApp.c: 56: else if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 13398  001A9C  5029               	movf	SWSPI_send_word@phrType,w,c
 13399  001A9E  B4D8               	btfsc	status,2,c
 13400  001AA0  D003               	goto	u4810
 13401  001AA2  0429               	decf	SWSPI_send_word@phrType,w,c
 13402  001AA4  A4D8               	btfss	status,2,c
 13403  001AA6  D005               	goto	l523
 13404  001AA8                     u4810:
 13405                           
 13406                           ;SwSpiApp.c: 57: {
 13407                           ;SwSpiApp.c: 58: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 13408  001AA8  0E01               	movlw	1
 13409  001AAA  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 13410  001AAC  5029               	movf	SWSPI_send_word@phrType,w,c
 13411  001AAE  EC7C  F013         	call	_SwSpi_Set_Synth_Le_Pin
 13412  001AB2                     l523:
 13413                           
 13414                           ;SwSpiApp.c: 59: }
 13415                           ;SwSpiApp.c: 62: (INTCONbits.GIE = 1);
 13416  001AB2  8EF2               	bsf	intcon,7,c	;volatile
 13417  001AB4  0012               	return		;funcret
 13418  001AB6                     __end_of_SWSPI_send_word:
 13419                           	opt stack 0
 13420                           tosu	equ	0xFFF
 13421                           tosh	equ	0xFFE
 13422                           tosl	equ	0xFFD
 13423                           pclath	equ	0xFFA
 13424                           tblptru	equ	0xFF8
 13425                           tblptrh	equ	0xFF7
 13426                           tblptrl	equ	0xFF6
 13427                           tablat	equ	0xFF5
 13428                           prodh	equ	0xFF4
 13429                           prodl	equ	0xFF3
 13430                           intcon	equ	0xFF2
 13431                           intcon2	equ	0xFF1
 13432                           indf0	equ	0xFEF
 13433                           postinc0	equ	0xFEE
 13434                           fsr0h	equ	0xFEA
 13435                           fsr0l	equ	0xFE9
 13436                           wreg	equ	0xFE8
 13437                           indf1	equ	0xFE7
 13438                           postdec1	equ	0xFE5
 13439                           fsr1h	equ	0xFE2
 13440                           fsr1l	equ	0xFE1
 13441                           indf2	equ	0xFDF
 13442                           postinc2	equ	0xFDE
 13443                           postdec2	equ	0xFDD
 13444                           fsr2h	equ	0xFDA
 13445                           fsr2l	equ	0xFD9
 13446                           status	equ	0xFD8
 13447                           
 13448 ;; *************** function _make8 *****************
 13449 ;; Defined at:
 13450 ;;		line 61 in file "SystemCommon.c"
 13451 ;; Parameters:    Size  Location     Type
 13452 ;;  data            4   23[COMRAM] unsigned long 
 13453 ;;  dataLocation    1   27[COMRAM] unsigned char 
 13454 ;; Auto vars:     Size  Location     Type
 13455 ;;		None
 13456 ;; Return value:  Size  Location     Type
 13457 ;;                  1    wreg      unsigned char 
 13458 ;; Registers used:
 13459 ;;		wreg, status,2, status,0
 13460 ;; Tracked objects:
 13461 ;;		On entry : 0/0
 13462 ;;		On exit  : 0/0
 13463 ;;		Unchanged: 0/0
 13464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13465 ;;      Params:         5       0       0       0       0       0       0
 13466 ;;      Locals:         0       0       0       0       0       0       0
 13467 ;;      Temps:          4       0       0       0       0       0       0
 13468 ;;      Totals:         9       0       0       0       0       0       0
 13469 ;;Total ram usage:        9 bytes
 13470 ;; Hardware stack levels used:    1
 13471 ;; Hardware stack levels required when called:    3
 13472 ;; This function calls:
 13473 ;;		Nothing
 13474 ;; This function is called by:
 13475 ;;		_SWSPI_send_word
 13476 ;;		_FlashReadCondition
 13477 ;; This function uses a non-reentrant model
 13478 ;;
 13479                           
 13480                           	psect	text68
 13481  002174                     __ptext68:
 13482                           	opt stack 0
 13483  002174                     _make8:
 13484                           	opt stack 24
 13485                           
 13486                           ;SystemCommon.c: 63: switch(dataLocation)
 13487                           
 13488                           ;incstack = 0
 13489  002174  D01F               	goto	l1159
 13490  002176                     
 13491                           ;SystemCommon.c: 66: return (data & 0x000000ff);
 13492  002176  5018               	movf	make8@data,w,c
 13493  002178  0012               	return	
 13494  00217A                     
 13495                           ;SystemCommon.c: 69: return (data & 0x0000ff00) >> 8;
 13496  00217A  5019               	movf	make8@data+1,w,c
 13497  00217C  0012               	return	
 13498  00217E                     
 13499                           ;SystemCommon.c: 72: return (data & 0x00ff0000) >> 16;
 13500  00217E  501A               	movf	make8@data+2,w,c
 13501  002180  0012               	return	
 13502  002182                     
 13503                           ;SystemCommon.c: 75: return (data & 0xff000000) >> 24;
 13504  002182  0E00               	movlw	0
 13505  002184  1418               	andwf	make8@data,w,c
 13506  002186  6E1D               	movwf	??_make8& (0+255),c
 13507  002188  0E00               	movlw	0
 13508  00218A  1419               	andwf	make8@data+1,w,c
 13509  00218C  6E1E               	movwf	(??_make8+1)& (0+255),c
 13510  00218E  0E00               	movlw	0
 13511  002190  141A               	andwf	make8@data+2,w,c
 13512  002192  6E1F               	movwf	(??_make8+2)& (0+255),c
 13513  002194  0EFF               	movlw	255
 13514  002196  141B               	andwf	make8@data+3,w,c
 13515  002198  6E20               	movwf	(??_make8+3)& (0+255),c
 13516  00219A  0E19               	movlw	25
 13517  00219C  D005               	goto	u4290
 13518  00219E                     u4295:
 13519  00219E  90D8               	bcf	status,0,c
 13520  0021A0  3220               	rrcf	??_make8+3,f,c
 13521  0021A2  321F               	rrcf	??_make8+2,f,c
 13522  0021A4  321E               	rrcf	??_make8+1,f,c
 13523  0021A6  321D               	rrcf	??_make8,f,c
 13524  0021A8                     u4290:
 13525  0021A8  2EE8               	decfsz	wreg,f,c
 13526  0021AA  D7F9               	goto	u4295
 13527  0021AC  501D               	movf	??_make8,w,c
 13528  0021AE  0012               	return	
 13529  0021B0                     
 13530                           ;SystemCommon.c: 78: return (0);
 13531  0021B0  0E00               	movlw	0
 13532                           
 13533                           ;SystemCommon.c: 79: }
 13534  0021B2  0012               	return	
 13535  0021B4                     l1159:
 13536  0021B4  501C               	movf	make8@dataLocation,w,c
 13537                           
 13538                           ; Switch size 1, requested type "space"
 13539                           ; Number of cases is 4, Range of values is 0 to 3
 13540                           ; switch strategies available:
 13541                           ; Name         Instructions Cycles
 13542                           ; simple_byte           13     7 (average)
 13543                           ;	Chosen strategy is simple_byte
 13544  0021B6  0A00               	xorlw	0	; case 0
 13545  0021B8  B4D8               	btfsc	status,2,c
 13546  0021BA  D7DD               	goto	l1160
 13547  0021BC  0A01               	xorlw	1	; case 1
 13548  0021BE  B4D8               	btfsc	status,2,c
 13549  0021C0  D7DC               	goto	l1162
 13550  0021C2  0A03               	xorlw	3	; case 2
 13551  0021C4  B4D8               	btfsc	status,2,c
 13552  0021C6  D7DB               	goto	l1163
 13553  0021C8  0A01               	xorlw	1	; case 3
 13554  0021CA  B4D8               	btfsc	status,2,c
 13555  0021CC  D7DA               	goto	l1164
 13556  0021CE  D7F0               	goto	l1165
 13557  0021D0                     __end_of_make8:
 13558                           	opt stack 0
 13559                           tosu	equ	0xFFF
 13560                           tosh	equ	0xFFE
 13561                           tosl	equ	0xFFD
 13562                           pclath	equ	0xFFA
 13563                           tblptru	equ	0xFF8
 13564                           tblptrh	equ	0xFF7
 13565                           tblptrl	equ	0xFF6
 13566                           tablat	equ	0xFF5
 13567                           prodh	equ	0xFF4
 13568                           prodl	equ	0xFF3
 13569                           intcon	equ	0xFF2
 13570                           intcon2	equ	0xFF1
 13571                           indf0	equ	0xFEF
 13572                           postinc0	equ	0xFEE
 13573                           fsr0h	equ	0xFEA
 13574                           fsr0l	equ	0xFE9
 13575                           wreg	equ	0xFE8
 13576                           indf1	equ	0xFE7
 13577                           postdec1	equ	0xFE5
 13578                           fsr1h	equ	0xFE2
 13579                           fsr1l	equ	0xFE1
 13580                           indf2	equ	0xFDF
 13581                           postinc2	equ	0xFDE
 13582                           postdec2	equ	0xFDD
 13583                           fsr2h	equ	0xFDA
 13584                           fsr2l	equ	0xFD9
 13585                           status	equ	0xFD8
 13586                           
 13587 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 13588 ;; Defined at:
 13589 ;;		line 252 in file "SwSpiApp.c"
 13590 ;; Parameters:    Size  Location     Type
 13591 ;;  phrType         1    wreg     enum E7593
 13592 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13593 ;; Auto vars:     Size  Location     Type
 13594 ;;  phrType         1   24[COMRAM] enum E7593
 13595 ;; Return value:  Size  Location     Type
 13596 ;;                  1    wreg      void 
 13597 ;; Registers used:
 13598 ;;		wreg, status,2, status,0
 13599 ;; Tracked objects:
 13600 ;;		On entry : 0/0
 13601 ;;		On exit  : 0/0
 13602 ;;		Unchanged: 0/0
 13603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13604 ;;      Params:         1       0       0       0       0       0       0
 13605 ;;      Locals:         1       0       0       0       0       0       0
 13606 ;;      Temps:          0       0       0       0       0       0       0
 13607 ;;      Totals:         2       0       0       0       0       0       0
 13608 ;;Total ram usage:        2 bytes
 13609 ;; Hardware stack levels used:    1
 13610 ;; Hardware stack levels required when called:    3
 13611 ;; This function calls:
 13612 ;;		Nothing
 13613 ;; This function is called by:
 13614 ;;		_SWSPI_send_word
 13615 ;; This function uses a non-reentrant model
 13616 ;;
 13617                           
 13618                           	psect	text69
 13619  0026F8                     __ptext69:
 13620                           	opt stack 0
 13621  0026F8                     _SwSpi_Set_Synth_Le_Pin:
 13622                           	opt stack 24
 13623                           
 13624                           ;incstack = 0
 13625                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 13626  0026F8  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 13627                           
 13628                           ;SwSpiApp.c: 254: switch(phrType)
 13629  0026FA  D014               	goto	l632
 13630  0026FC                     
 13631                           ;SwSpiApp.c: 257: if(cPinMode == 1)
 13632  0026FC  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13633  0026FE  A4D8               	btfss	status,2,c
 13634  002700  D002               	goto	l634
 13635                           
 13636                           ;SwSpiApp.c: 258: {
 13637                           ;SwSpiApp.c: 259: do { LATCbits.LATC2 = 1; } while(0);
 13638  002702  848B               	bsf	3979,2,c	;volatile
 13639                           
 13640                           ;SwSpiApp.c: 260: }
 13641  002704  0012               	return	
 13642  002706                     l634:
 13643                           
 13644                           ;SwSpiApp.c: 261: else if(cPinMode == 0)
 13645  002706  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13646  002708  A4D8               	btfss	status,2,c
 13647  00270A  0012               	return	
 13648                           
 13649                           ;SwSpiApp.c: 262: {
 13650                           ;SwSpiApp.c: 263: do { LATCbits.LATC2 = 0; } while(0);
 13651  00270C  948B               	bcf	3979,2,c	;volatile
 13652                           
 13653                           ;SwSpiApp.c: 264: }
 13654                           ;SwSpiApp.c: 265: break;
 13655  00270E  0012               	return	
 13656  002710                     
 13657                           ;SwSpiApp.c: 268: if(cPinMode == 1)
 13658  002710  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13659  002712  A4D8               	btfss	status,2,c
 13660  002714  D002               	goto	l643
 13661                           
 13662                           ;SwSpiApp.c: 269: {
 13663                           ;SwSpiApp.c: 270: do { LATDbits.LATD3 = 1; } while(0);
 13664  002716  868C               	bsf	3980,3,c	;volatile
 13665                           
 13666                           ;SwSpiApp.c: 271: }
 13667  002718  0012               	return	
 13668  00271A                     l643:
 13669                           
 13670                           ;SwSpiApp.c: 272: else if(cPinMode == 0)
 13671  00271A  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13672  00271C  A4D8               	btfss	status,2,c
 13673  00271E  0012               	return	
 13674                           
 13675                           ;SwSpiApp.c: 273: {
 13676                           ;SwSpiApp.c: 274: do { LATDbits.LATD3 = 0; } while(0);
 13677  002720  968C               	bcf	3980,3,c	;volatile
 13678                           
 13679                           ;SwSpiApp.c: 277: }
 13680                           
 13681                           ;SwSpiApp.c: 275: }
 13682                           ;SwSpiApp.c: 276: break;
 13683  002722  0012               	return	
 13684  002724                     l632:
 13685  002724  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 13686                           
 13687                           ; Switch size 1, requested type "space"
 13688                           ; Number of cases is 2, Range of values is 0 to 1
 13689                           ; switch strategies available:
 13690                           ; Name         Instructions Cycles
 13691                           ; simple_byte            7     4 (average)
 13692                           ;	Chosen strategy is simple_byte
 13693  002726  0A00               	xorlw	0	; case 0
 13694  002728  B4D8               	btfsc	status,2,c
 13695  00272A  D7E8               	goto	l633
 13696  00272C  0A01               	xorlw	1	; case 1
 13697  00272E  A4D8               	btfss	status,2,c
 13698  002730  0012               	return	
 13699  002732  D7EE               	goto	l642
 13700  002734                     __end_of_SwSpi_Set_Synth_Le_Pin:
 13701                           	opt stack 0
 13702                           tosu	equ	0xFFF
 13703                           tosh	equ	0xFFE
 13704                           tosl	equ	0xFFD
 13705                           pclath	equ	0xFFA
 13706                           tblptru	equ	0xFF8
 13707                           tblptrh	equ	0xFF7
 13708                           tblptrl	equ	0xFF6
 13709                           tablat	equ	0xFF5
 13710                           prodh	equ	0xFF4
 13711                           prodl	equ	0xFF3
 13712                           intcon	equ	0xFF2
 13713                           intcon2	equ	0xFF1
 13714                           indf0	equ	0xFEF
 13715                           postinc0	equ	0xFEE
 13716                           fsr0h	equ	0xFEA
 13717                           fsr0l	equ	0xFE9
 13718                           wreg	equ	0xFE8
 13719                           indf1	equ	0xFE7
 13720                           postdec1	equ	0xFE5
 13721                           fsr1h	equ	0xFE2
 13722                           fsr1l	equ	0xFE1
 13723                           indf2	equ	0xFDF
 13724                           postinc2	equ	0xFDE
 13725                           postdec2	equ	0xFDD
 13726                           fsr2h	equ	0xFDA
 13727                           fsr2l	equ	0xFD9
 13728                           status	equ	0xFD8
 13729                           
 13730 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 13731 ;; Defined at:
 13732 ;;		line 280 in file "SwSpiApp.c"
 13733 ;; Parameters:    Size  Location     Type
 13734 ;;  cPinMode        1    wreg     unsigned char 
 13735 ;; Auto vars:     Size  Location     Type
 13736 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13737 ;; Return value:  Size  Location     Type
 13738 ;;                  1    wreg      void 
 13739 ;; Registers used:
 13740 ;;		wreg, status,2, status,0
 13741 ;; Tracked objects:
 13742 ;;		On entry : 0/0
 13743 ;;		On exit  : 0/0
 13744 ;;		Unchanged: 0/0
 13745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13746 ;;      Params:         0       0       0       0       0       0       0
 13747 ;;      Locals:         1       0       0       0       0       0       0
 13748 ;;      Temps:          0       0       0       0       0       0       0
 13749 ;;      Totals:         1       0       0       0       0       0       0
 13750 ;;Total ram usage:        1 bytes
 13751 ;; Hardware stack levels used:    1
 13752 ;; Hardware stack levels required when called:    3
 13753 ;; This function calls:
 13754 ;;		Nothing
 13755 ;; This function is called by:
 13756 ;;		_SWSPI_send_word
 13757 ;; This function uses a non-reentrant model
 13758 ;;
 13759                           
 13760                           	psect	text70
 13761  0029D6                     __ptext70:
 13762                           	opt stack 0
 13763  0029D6                     _SwSpi_Set_Dac_Sync_Pin:
 13764                           	opt stack 24
 13765                           
 13766                           ;incstack = 0
 13767                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 13768  0029D6  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 13769                           
 13770                           ;SwSpiApp.c: 282: switch(cPinMode)
 13771  0029D8  D004               	goto	l653
 13772  0029DA                     
 13773                           ;SwSpiApp.c: 285: do { LATAbits.LATA2 = 0; } while(0);
 13774  0029DA  9489               	bcf	3977,2,c	;volatile
 13775                           
 13776                           ;SwSpiApp.c: 286: break;
 13777  0029DC  0012               	return	
 13778  0029DE                     
 13779                           ;SwSpiApp.c: 289: do { LATAbits.LATA2 = 1; } while(0);
 13780  0029DE  8489               	bsf	3977,2,c	;volatile
 13781                           
 13782                           ;SwSpiApp.c: 291: }
 13783                           
 13784                           ;SwSpiApp.c: 290: break;
 13785  0029E0  0012               	return	
 13786  0029E2                     l653:
 13787  0029E2  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 13788                           
 13789                           ; Switch size 1, requested type "space"
 13790                           ; Number of cases is 2, Range of values is 0 to 1
 13791                           ; switch strategies available:
 13792                           ; Name         Instructions Cycles
 13793                           ; simple_byte            7     4 (average)
 13794                           ;	Chosen strategy is simple_byte
 13795  0029E4  0A00               	xorlw	0	; case 0
 13796  0029E6  B4D8               	btfsc	status,2,c
 13797  0029E8  D7F8               	goto	l654
 13798  0029EA  0A01               	xorlw	1	; case 1
 13799  0029EC  A4D8               	btfss	status,2,c
 13800  0029EE  0012               	return	
 13801  0029F0  D7F6               	goto	l658
 13802  0029F2                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 13803                           	opt stack 0
 13804                           tosu	equ	0xFFF
 13805                           tosh	equ	0xFFE
 13806                           tosl	equ	0xFFD
 13807                           pclath	equ	0xFFA
 13808                           tblptru	equ	0xFF8
 13809                           tblptrh	equ	0xFF7
 13810                           tblptrl	equ	0xFF6
 13811                           tablat	equ	0xFF5
 13812                           prodh	equ	0xFF4
 13813                           prodl	equ	0xFF3
 13814                           intcon	equ	0xFF2
 13815                           intcon2	equ	0xFF1
 13816                           indf0	equ	0xFEF
 13817                           postinc0	equ	0xFEE
 13818                           fsr0h	equ	0xFEA
 13819                           fsr0l	equ	0xFE9
 13820                           wreg	equ	0xFE8
 13821                           indf1	equ	0xFE7
 13822                           postdec1	equ	0xFE5
 13823                           fsr1h	equ	0xFE2
 13824                           fsr1l	equ	0xFE1
 13825                           indf2	equ	0xFDF
 13826                           postinc2	equ	0xFDE
 13827                           postdec2	equ	0xFDD
 13828                           fsr2h	equ	0xFDA
 13829                           fsr2l	equ	0xFD9
 13830                           status	equ	0xFD8
 13831                           
 13832 ;; *************** function _SWSPI_Synth_send_bits *****************
 13833 ;; Defined at:
 13834 ;;		line 89 in file "SwSpiApp.c"
 13835 ;; Parameters:    Size  Location     Type
 13836 ;;  phrType         1    wreg     enum E7593
 13837 ;;  data            1   25[COMRAM] unsigned char 
 13838 ;; Auto vars:     Size  Location     Type
 13839 ;;  phrType         1   27[COMRAM] enum E7593
 13840 ;;  count           1   26[COMRAM] unsigned char 
 13841 ;; Return value:  Size  Location     Type
 13842 ;;                  1    wreg      void 
 13843 ;; Registers used:
 13844 ;;		wreg, status,2, status,0, cstack
 13845 ;; Tracked objects:
 13846 ;;		On entry : 0/0
 13847 ;;		On exit  : 0/0
 13848 ;;		Unchanged: 0/0
 13849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13850 ;;      Params:         1       0       0       0       0       0       0
 13851 ;;      Locals:         2       0       0       0       0       0       0
 13852 ;;      Temps:          0       0       0       0       0       0       0
 13853 ;;      Totals:         3       0       0       0       0       0       0
 13854 ;;Total ram usage:        3 bytes
 13855 ;; Hardware stack levels used:    1
 13856 ;; Hardware stack levels required when called:    4
 13857 ;; This function calls:
 13858 ;;		_SwSpi_Clk_Pin
 13859 ;;		_SwSpi_Data_Pin
 13860 ;; This function is called by:
 13861 ;;		_SWSPI_send_word
 13862 ;; This function uses a non-reentrant model
 13863 ;;
 13864                           
 13865                           	psect	text71
 13866  0021D0                     __ptext71:
 13867                           	opt stack 0
 13868  0021D0                     _SWSPI_Synth_send_bits:
 13869                           	opt stack 23
 13870                           
 13871                           ;incstack = 0
 13872                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 13873  0021D0  6E1C               	movwf	SWSPI_Synth_send_bits@phrType,c
 13874                           
 13875                           ;SwSpiApp.c: 91: uint8_t count;
 13876                           ;SwSpiApp.c: 92: for (count = 8; count ; count--, data <<= 1)
 13877  0021D2  0E08               	movlw	8
 13878  0021D4  6E1B               	movwf	SWSPI_Synth_send_bits@count,c
 13879  0021D6  D01A               	goto	l537
 13880  0021D8                     
 13881                           ;SwSpiApp.c: 93: {
 13882                           ;SwSpiApp.c: 94: SwSpi_Clk_Pin(phrType, 0);
 13883  0021D8  0E00               	movlw	0
 13884  0021DA  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13885  0021DC  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13886  0021DE  EC96  F011         	call	_SwSpi_Clk_Pin
 13887                           
 13888                           ;SwSpiApp.c: 96: if (data & 0X80)
 13889  0021E2  AE1A               	btfss	SWSPI_Synth_send_bits@data,7,c
 13890  0021E4  D006               	goto	l539
 13891                           
 13892                           ;SwSpiApp.c: 97: {
 13893                           ;SwSpiApp.c: 99: SwSpi_Data_Pin(phrType, 1);
 13894  0021E6  0E01               	movlw	1
 13895  0021E8  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13896  0021EA  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13897  0021EC  EC6B  F011         	call	_SwSpi_Data_Pin
 13898                           
 13899                           ;SwSpiApp.c: 100: }
 13900  0021F0  D005               	goto	l540
 13901  0021F2                     l539:
 13902                           
 13903                           ;SwSpiApp.c: 101: else
 13904                           ;SwSpiApp.c: 102: {
 13905                           ;SwSpiApp.c: 103: SwSpi_Data_Pin(phrType, 0);
 13906  0021F2  0E00               	movlw	0
 13907  0021F4  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13908  0021F6  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13909  0021F8  EC6B  F011         	call	_SwSpi_Data_Pin
 13910  0021FC                     l540:
 13911                           
 13912                           ;SwSpiApp.c: 104: }
 13913                           ;SwSpiApp.c: 106: SwSpi_Clk_Pin(phrType, 1);
 13914  0021FC  0E01               	movlw	1
 13915  0021FE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13916  002200  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13917  002202  EC96  F011         	call	_SwSpi_Clk_Pin
 13918  002206  061B               	decf	SWSPI_Synth_send_bits@count,f,c
 13919  002208  90D8               	bcf	status,0,c
 13920  00220A  361A               	rlcf	SWSPI_Synth_send_bits@data,f,c
 13921  00220C                     l537:
 13922  00220C  501B               	movf	SWSPI_Synth_send_bits@count,w,c
 13923  00220E  A4D8               	btfss	status,2,c
 13924  002210  D7E3               	goto	l538
 13925                           
 13926                           ;SwSpiApp.c: 113: }
 13927                           ;SwSpiApp.c: 115: SwSpi_Data_Pin(phrType, 0);
 13928  002212  0E00               	movlw	0
 13929  002214  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13930  002216  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13931  002218  EC6B  F011         	call	_SwSpi_Data_Pin
 13932                           
 13933                           ;SwSpiApp.c: 116: SwSpi_Clk_Pin(phrType, 0);
 13934  00221C  0E00               	movlw	0
 13935  00221E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13936  002220  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13937  002222  EC96  F011         	call	_SwSpi_Clk_Pin
 13938  002226  0012               	return		;funcret
 13939  002228                     __end_of_SWSPI_Synth_send_bits:
 13940                           	opt stack 0
 13941                           tosu	equ	0xFFF
 13942                           tosh	equ	0xFFE
 13943                           tosl	equ	0xFFD
 13944                           pclath	equ	0xFFA
 13945                           tblptru	equ	0xFF8
 13946                           tblptrh	equ	0xFF7
 13947                           tblptrl	equ	0xFF6
 13948                           tablat	equ	0xFF5
 13949                           prodh	equ	0xFF4
 13950                           prodl	equ	0xFF3
 13951                           intcon	equ	0xFF2
 13952                           intcon2	equ	0xFF1
 13953                           indf0	equ	0xFEF
 13954                           postinc0	equ	0xFEE
 13955                           fsr0h	equ	0xFEA
 13956                           fsr0l	equ	0xFE9
 13957                           wreg	equ	0xFE8
 13958                           indf1	equ	0xFE7
 13959                           postdec1	equ	0xFE5
 13960                           fsr1h	equ	0xFE2
 13961                           fsr1l	equ	0xFE1
 13962                           indf2	equ	0xFDF
 13963                           postinc2	equ	0xFDE
 13964                           postdec2	equ	0xFDD
 13965                           fsr2h	equ	0xFDA
 13966                           fsr2l	equ	0xFD9
 13967                           status	equ	0xFD8
 13968                           
 13969 ;; *************** function _SWSPI_DAC_send_bits *****************
 13970 ;; Defined at:
 13971 ;;		line 65 in file "SwSpiApp.c"
 13972 ;; Parameters:    Size  Location     Type
 13973 ;;  phrType         1    wreg     enum E7593
 13974 ;;  data            1   25[COMRAM] unsigned char 
 13975 ;; Auto vars:     Size  Location     Type
 13976 ;;  phrType         1   27[COMRAM] enum E7593
 13977 ;;  count           1   26[COMRAM] unsigned char 
 13978 ;; Return value:  Size  Location     Type
 13979 ;;                  1    wreg      void 
 13980 ;; Registers used:
 13981 ;;		wreg, status,2, status,0, cstack
 13982 ;; Tracked objects:
 13983 ;;		On entry : 0/0
 13984 ;;		On exit  : 0/0
 13985 ;;		Unchanged: 0/0
 13986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13987 ;;      Params:         1       0       0       0       0       0       0
 13988 ;;      Locals:         2       0       0       0       0       0       0
 13989 ;;      Temps:          0       0       0       0       0       0       0
 13990 ;;      Totals:         3       0       0       0       0       0       0
 13991 ;;Total ram usage:        3 bytes
 13992 ;; Hardware stack levels used:    1
 13993 ;; Hardware stack levels required when called:    4
 13994 ;; This function calls:
 13995 ;;		_SwSpi_Clk_Pin
 13996 ;;		_SwSpi_Data_Pin
 13997 ;; This function is called by:
 13998 ;;		_SWSPI_send_word
 13999 ;; This function uses a non-reentrant model
 14000 ;;
 14001                           
 14002                           	psect	text72
 14003  002228                     __ptext72:
 14004                           	opt stack 0
 14005  002228                     _SWSPI_DAC_send_bits:
 14006                           	opt stack 23
 14007                           
 14008                           ;incstack = 0
 14009                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 14010  002228  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 14011                           
 14012                           ;SwSpiApp.c: 67: uint8_t count;
 14013                           ;SwSpiApp.c: 68: for (count = 8; count ; count--, data <<= 1)
 14014  00222A  0E08               	movlw	8
 14015  00222C  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 14016  00222E  D01A               	goto	l529
 14017  002230                     
 14018                           ;SwSpiApp.c: 69: {
 14019                           ;SwSpiApp.c: 70: SwSpi_Clk_Pin(phrType, 1);
 14020  002230  0E01               	movlw	1
 14021  002232  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 14022  002234  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14023  002236  EC96  F011         	call	_SwSpi_Clk_Pin
 14024                           
 14025                           ;SwSpiApp.c: 72: if (data & 0X80)
 14026  00223A  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 14027  00223C  D006               	goto	l531
 14028                           
 14029                           ;SwSpiApp.c: 73: {
 14030                           ;SwSpiApp.c: 75: SwSpi_Data_Pin(phrType, 1);
 14031  00223E  0E01               	movlw	1
 14032  002240  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14033  002242  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14034  002244  EC6B  F011         	call	_SwSpi_Data_Pin
 14035                           
 14036                           ;SwSpiApp.c: 76: }
 14037  002248  D005               	goto	l532
 14038  00224A                     l531:
 14039                           
 14040                           ;SwSpiApp.c: 77: else
 14041                           ;SwSpiApp.c: 78: {
 14042                           ;SwSpiApp.c: 79: SwSpi_Data_Pin(phrType, 0);
 14043  00224A  0E00               	movlw	0
 14044  00224C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14045  00224E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14046  002250  EC6B  F011         	call	_SwSpi_Data_Pin
 14047  002254                     l532:
 14048                           
 14049                           ;SwSpiApp.c: 80: }
 14050                           ;SwSpiApp.c: 82: SwSpi_Clk_Pin(phrType, 0);
 14051  002254  0E00               	movlw	0
 14052  002256  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 14053  002258  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14054  00225A  EC96  F011         	call	_SwSpi_Clk_Pin
 14055  00225E  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 14056  002260  90D8               	bcf	status,0,c
 14057  002262  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 14058  002264                     l529:
 14059  002264  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 14060  002266  A4D8               	btfss	status,2,c
 14061  002268  D7E3               	goto	l530
 14062                           
 14063                           ;SwSpiApp.c: 83: }
 14064                           ;SwSpiApp.c: 85: SwSpi_Data_Pin(phrType, 0);
 14065  00226A  0E00               	movlw	0
 14066  00226C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14067  00226E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14068  002270  EC6B  F011         	call	_SwSpi_Data_Pin
 14069                           
 14070                           ;SwSpiApp.c: 86: SwSpi_Clk_Pin(phrType, 0);
 14071  002274  0E00               	movlw	0
 14072  002276  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 14073  002278  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14074  00227A  EC96  F011         	call	_SwSpi_Clk_Pin
 14075  00227E  0012               	return		;funcret
 14076  002280                     __end_of_SWSPI_DAC_send_bits:
 14077                           	opt stack 0
 14078                           tosu	equ	0xFFF
 14079                           tosh	equ	0xFFE
 14080                           tosl	equ	0xFFD
 14081                           pclath	equ	0xFFA
 14082                           tblptru	equ	0xFF8
 14083                           tblptrh	equ	0xFF7
 14084                           tblptrl	equ	0xFF6
 14085                           tablat	equ	0xFF5
 14086                           prodh	equ	0xFF4
 14087                           prodl	equ	0xFF3
 14088                           intcon	equ	0xFF2
 14089                           intcon2	equ	0xFF1
 14090                           indf0	equ	0xFEF
 14091                           postinc0	equ	0xFEE
 14092                           fsr0h	equ	0xFEA
 14093                           fsr0l	equ	0xFE9
 14094                           wreg	equ	0xFE8
 14095                           indf1	equ	0xFE7
 14096                           postdec1	equ	0xFE5
 14097                           fsr1h	equ	0xFE2
 14098                           fsr1l	equ	0xFE1
 14099                           indf2	equ	0xFDF
 14100                           postinc2	equ	0xFDE
 14101                           postdec2	equ	0xFDD
 14102                           fsr2h	equ	0xFDA
 14103                           fsr2l	equ	0xFD9
 14104                           status	equ	0xFD8
 14105                           
 14106 ;; *************** function _SwSpi_Data_Pin *****************
 14107 ;; Defined at:
 14108 ;;		line 123 in file "SwSpiApp.c"
 14109 ;; Parameters:    Size  Location     Type
 14110 ;;  phrType         1    wreg     enum E7593
 14111 ;;  cPinMode        1   23[COMRAM] unsigned char 
 14112 ;; Auto vars:     Size  Location     Type
 14113 ;;  phrType         1   24[COMRAM] enum E7593
 14114 ;; Return value:  Size  Location     Type
 14115 ;;                  1    wreg      void 
 14116 ;; Registers used:
 14117 ;;		wreg, status,2, status,0
 14118 ;; Tracked objects:
 14119 ;;		On entry : 0/0
 14120 ;;		On exit  : 0/0
 14121 ;;		Unchanged: 0/0
 14122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14123 ;;      Params:         1       0       0       0       0       0       0
 14124 ;;      Locals:         1       0       0       0       0       0       0
 14125 ;;      Temps:          0       0       0       0       0       0       0
 14126 ;;      Totals:         2       0       0       0       0       0       0
 14127 ;;Total ram usage:        2 bytes
 14128 ;; Hardware stack levels used:    1
 14129 ;; Hardware stack levels required when called:    3
 14130 ;; This function calls:
 14131 ;;		Nothing
 14132 ;; This function is called by:
 14133 ;;		_SWSPI_DAC_send_bits
 14134 ;;		_SWSPI_Synth_send_bits
 14135 ;; This function uses a non-reentrant model
 14136 ;;
 14137                           
 14138                           	psect	text73
 14139  0022D6                     __ptext73:
 14140                           	opt stack 0
 14141  0022D6                     _SwSpi_Data_Pin:
 14142                           	opt stack 23
 14143                           
 14144                           ;incstack = 0
 14145                           ;SwSpi_Data_Pin@phrType stored from wreg
 14146  0022D6  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 14147                           
 14148                           ;SwSpiApp.c: 125: switch(phrType)
 14149  0022D8  D01E               	goto	l545
 14150  0022DA                     
 14151                           ;SwSpiApp.c: 128: if(cPinMode == 1)
 14152  0022DA  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 14153  0022DC  A4D8               	btfss	status,2,c
 14154  0022DE  D002               	goto	l547
 14155                           
 14156                           ;SwSpiApp.c: 129: {
 14157                           ;SwSpiApp.c: 130: do { LATDbits.LATD0 = 1; } while(0);
 14158  0022E0  808C               	bsf	3980,0,c	;volatile
 14159                           
 14160                           ;SwSpiApp.c: 131: }
 14161  0022E2  0012               	return	
 14162  0022E4                     l547:
 14163                           
 14164                           ;SwSpiApp.c: 132: else if (cPinMode == 0)
 14165  0022E4  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 14166  0022E6  A4D8               	btfss	status,2,c
 14167  0022E8  0012               	return	
 14168                           
 14169                           ;SwSpiApp.c: 133: {
 14170                           ;SwSpiApp.c: 134: do { LATDbits.LATD0 = 0; } while(0);
 14171  0022EA  908C               	bcf	3980,0,c	;volatile
 14172                           
 14173                           ;SwSpiApp.c: 135: }
 14174                           ;SwSpiApp.c: 136: break;
 14175  0022EC  0012               	return	
 14176  0022EE                     
 14177                           ;SwSpiApp.c: 139: if(cPinMode == 1)
 14178  0022EE  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 14179  0022F0  A4D8               	btfss	status,2,c
 14180  0022F2  D002               	goto	l556
 14181                           
 14182                           ;SwSpiApp.c: 140: {
 14183                           ;SwSpiApp.c: 141: do { LATCbits.LATC5 = 1; } while(0);
 14184  0022F4  8A8B               	bsf	3979,5,c	;volatile
 14185                           
 14186                           ;SwSpiApp.c: 142: }
 14187  0022F6  0012               	return	
 14188  0022F8                     l556:
 14189                           
 14190                           ;SwSpiApp.c: 143: else if (cPinMode == 0)
 14191  0022F8  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 14192  0022FA  A4D8               	btfss	status,2,c
 14193  0022FC  0012               	return	
 14194                           
 14195                           ;SwSpiApp.c: 144: {
 14196                           ;SwSpiApp.c: 145: do { LATCbits.LATC5 = 0; } while(0);
 14197  0022FE  9A8B               	bcf	3979,5,c	;volatile
 14198                           
 14199                           ;SwSpiApp.c: 146: }
 14200                           ;SwSpiApp.c: 147: break;
 14201  002300  0012               	return	
 14202  002302                     
 14203                           ;SwSpiApp.c: 150: if(cPinMode == 1)
 14204  002302  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 14205  002304  A4D8               	btfss	status,2,c
 14206  002306  D002               	goto	l564
 14207                           
 14208                           ;SwSpiApp.c: 151: {
 14209                           ;SwSpiApp.c: 152: do { LATAbits.LATA4 = 1; } while(0);
 14210  002308  8889               	bsf	3977,4,c	;volatile
 14211                           
 14212                           ;SwSpiApp.c: 153: }
 14213  00230A  0012               	return	
 14214  00230C                     l564:
 14215                           
 14216                           ;SwSpiApp.c: 154: else if (cPinMode == 0)
 14217  00230C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 14218  00230E  A4D8               	btfss	status,2,c
 14219  002310  0012               	return	
 14220                           
 14221                           ;SwSpiApp.c: 155: {
 14222                           ;SwSpiApp.c: 156: do { LATAbits.LATA4 = 0; } while(0);
 14223  002312  9889               	bcf	3977,4,c	;volatile
 14224                           
 14225                           ;SwSpiApp.c: 159: }
 14226                           
 14227                           ;SwSpiApp.c: 157: }
 14228                           ;SwSpiApp.c: 158: break;
 14229  002314  0012               	return	
 14230  002316                     l545:
 14231  002316  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 14232                           
 14233                           ; Switch size 1, requested type "space"
 14234                           ; Number of cases is 3, Range of values is 0 to 2
 14235                           ; switch strategies available:
 14236                           ; Name         Instructions Cycles
 14237                           ; simple_byte           10     6 (average)
 14238                           ;	Chosen strategy is simple_byte
 14239  002318  0A00               	xorlw	0	; case 0
 14240  00231A  B4D8               	btfsc	status,2,c
 14241  00231C  D7DE               	goto	l546
 14242  00231E  0A01               	xorlw	1	; case 1
 14243  002320  B4D8               	btfsc	status,2,c
 14244  002322  D7E5               	goto	l555
 14245  002324  0A03               	xorlw	3	; case 2
 14246  002326  A4D8               	btfss	status,2,c
 14247  002328  0012               	return	
 14248  00232A  D7EB               	goto	l563
 14249  00232C                     __end_of_SwSpi_Data_Pin:
 14250                           	opt stack 0
 14251                           tosu	equ	0xFFF
 14252                           tosh	equ	0xFFE
 14253                           tosl	equ	0xFFD
 14254                           pclath	equ	0xFFA
 14255                           tblptru	equ	0xFF8
 14256                           tblptrh	equ	0xFF7
 14257                           tblptrl	equ	0xFF6
 14258                           tablat	equ	0xFF5
 14259                           prodh	equ	0xFF4
 14260                           prodl	equ	0xFF3
 14261                           intcon	equ	0xFF2
 14262                           intcon2	equ	0xFF1
 14263                           indf0	equ	0xFEF
 14264                           postinc0	equ	0xFEE
 14265                           fsr0h	equ	0xFEA
 14266                           fsr0l	equ	0xFE9
 14267                           wreg	equ	0xFE8
 14268                           indf1	equ	0xFE7
 14269                           postdec1	equ	0xFE5
 14270                           fsr1h	equ	0xFE2
 14271                           fsr1l	equ	0xFE1
 14272                           indf2	equ	0xFDF
 14273                           postinc2	equ	0xFDE
 14274                           postdec2	equ	0xFDD
 14275                           fsr2h	equ	0xFDA
 14276                           fsr2l	equ	0xFD9
 14277                           status	equ	0xFD8
 14278                           
 14279 ;; *************** function _SwSpi_Clk_Pin *****************
 14280 ;; Defined at:
 14281 ;;		line 162 in file "SwSpiApp.c"
 14282 ;; Parameters:    Size  Location     Type
 14283 ;;  phrType         1    wreg     enum E7593
 14284 ;;  cPinMode        1   23[COMRAM] unsigned char 
 14285 ;; Auto vars:     Size  Location     Type
 14286 ;;  phrType         1   24[COMRAM] enum E7593
 14287 ;; Return value:  Size  Location     Type
 14288 ;;                  1    wreg      void 
 14289 ;; Registers used:
 14290 ;;		wreg, status,2, status,0
 14291 ;; Tracked objects:
 14292 ;;		On entry : 0/0
 14293 ;;		On exit  : 0/0
 14294 ;;		Unchanged: 0/0
 14295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14296 ;;      Params:         1       0       0       0       0       0       0
 14297 ;;      Locals:         1       0       0       0       0       0       0
 14298 ;;      Temps:          0       0       0       0       0       0       0
 14299 ;;      Totals:         2       0       0       0       0       0       0
 14300 ;;Total ram usage:        2 bytes
 14301 ;; Hardware stack levels used:    1
 14302 ;; Hardware stack levels required when called:    3
 14303 ;; This function calls:
 14304 ;;		Nothing
 14305 ;; This function is called by:
 14306 ;;		_SWSPI_DAC_send_bits
 14307 ;;		_SWSPI_Synth_send_bits
 14308 ;;		_SwSpi_Synth_Toggle_Clock
 14309 ;; This function uses a non-reentrant model
 14310 ;;
 14311                           
 14312                           	psect	text74
 14313  00232C                     __ptext74:
 14314                           	opt stack 0
 14315  00232C                     _SwSpi_Clk_Pin:
 14316                           	opt stack 23
 14317                           
 14318                           ;incstack = 0
 14319                           ;SwSpi_Clk_Pin@phrType stored from wreg
 14320  00232C  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 14321                           
 14322                           ;SwSpiApp.c: 164: switch(phrType)
 14323  00232E  D01E               	goto	l574
 14324  002330                     
 14325                           ;SwSpiApp.c: 167: if(cPinMode == 1)
 14326  002330  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 14327  002332  A4D8               	btfss	status,2,c
 14328  002334  D002               	goto	l576
 14329                           
 14330                           ;SwSpiApp.c: 168: {
 14331                           ;SwSpiApp.c: 169: do { LATCbits.LATC3 = 1; } while(0);
 14332  002336  868B               	bsf	3979,3,c	;volatile
 14333                           
 14334                           ;SwSpiApp.c: 170: }
 14335  002338  0012               	return	
 14336  00233A                     l576:
 14337                           
 14338                           ;SwSpiApp.c: 171: else if (cPinMode == 0)
 14339  00233A  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 14340  00233C  A4D8               	btfss	status,2,c
 14341  00233E  0012               	return	
 14342                           
 14343                           ;SwSpiApp.c: 172: {
 14344                           ;SwSpiApp.c: 173: do { LATCbits.LATC3 = 0; } while(0);
 14345  002340  968B               	bcf	3979,3,c	;volatile
 14346                           
 14347                           ;SwSpiApp.c: 174: }
 14348                           ;SwSpiApp.c: 175: break;
 14349  002342  0012               	return	
 14350  002344                     
 14351                           ;SwSpiApp.c: 178: if(cPinMode == 1)
 14352  002344  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 14353  002346  A4D8               	btfss	status,2,c
 14354  002348  D002               	goto	l585
 14355                           
 14356                           ;SwSpiApp.c: 179: {
 14357                           ;SwSpiApp.c: 180: do { LATCbits.LATC4 = 1; } while(0);
 14358  00234A  888B               	bsf	3979,4,c	;volatile
 14359                           
 14360                           ;SwSpiApp.c: 181: }
 14361  00234C  0012               	return	
 14362  00234E                     l585:
 14363                           
 14364                           ;SwSpiApp.c: 182: else if (cPinMode == 0)
 14365  00234E  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 14366  002350  A4D8               	btfss	status,2,c
 14367  002352  0012               	return	
 14368                           
 14369                           ;SwSpiApp.c: 183: {
 14370                           ;SwSpiApp.c: 184: do { LATCbits.LATC4 = 0; } while(0);
 14371  002354  988B               	bcf	3979,4,c	;volatile
 14372                           
 14373                           ;SwSpiApp.c: 185: }
 14374                           ;SwSpiApp.c: 187: break;
 14375  002356  0012               	return	
 14376  002358                     
 14377                           ;SwSpiApp.c: 190: if(cPinMode == 1)
 14378  002358  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 14379  00235A  A4D8               	btfss	status,2,c
 14380  00235C  D002               	goto	l593
 14381                           
 14382                           ;SwSpiApp.c: 191: {
 14383                           ;SwSpiApp.c: 192: do { LATAbits.LATA3 = 1; } while(0);
 14384  00235E  8689               	bsf	3977,3,c	;volatile
 14385                           
 14386                           ;SwSpiApp.c: 193: }
 14387  002360  0012               	return	
 14388  002362                     l593:
 14389                           
 14390                           ;SwSpiApp.c: 194: else if (cPinMode == 0)
 14391  002362  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 14392  002364  A4D8               	btfss	status,2,c
 14393  002366  0012               	return	
 14394                           
 14395                           ;SwSpiApp.c: 195: {
 14396                           ;SwSpiApp.c: 196: do { LATAbits.LATA3 = 0; } while(0);
 14397  002368  9689               	bcf	3977,3,c	;volatile
 14398                           
 14399                           ;SwSpiApp.c: 199: }
 14400                           
 14401                           ;SwSpiApp.c: 197: }
 14402                           ;SwSpiApp.c: 198: break;
 14403  00236A  0012               	return	
 14404  00236C                     l574:
 14405  00236C  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 14406                           
 14407                           ; Switch size 1, requested type "space"
 14408                           ; Number of cases is 3, Range of values is 0 to 2
 14409                           ; switch strategies available:
 14410                           ; Name         Instructions Cycles
 14411                           ; simple_byte           10     6 (average)
 14412                           ;	Chosen strategy is simple_byte
 14413  00236E  0A00               	xorlw	0	; case 0
 14414  002370  B4D8               	btfsc	status,2,c
 14415  002372  D7DE               	goto	l575
 14416  002374  0A01               	xorlw	1	; case 1
 14417  002376  B4D8               	btfsc	status,2,c
 14418  002378  D7E5               	goto	l584
 14419  00237A  0A03               	xorlw	3	; case 2
 14420  00237C  A4D8               	btfss	status,2,c
 14421  00237E  0012               	return	
 14422  002380  D7EB               	goto	l592
 14423  002382                     __end_of_SwSpi_Clk_Pin:
 14424                           	opt stack 0
 14425                           tosu	equ	0xFFF
 14426                           tosh	equ	0xFFE
 14427                           tosl	equ	0xFFD
 14428                           pclath	equ	0xFFA
 14429                           tblptru	equ	0xFF8
 14430                           tblptrh	equ	0xFF7
 14431                           tblptrl	equ	0xFF6
 14432                           tablat	equ	0xFF5
 14433                           prodh	equ	0xFF4
 14434                           prodl	equ	0xFF3
 14435                           intcon	equ	0xFF2
 14436                           intcon2	equ	0xFF1
 14437                           indf0	equ	0xFEF
 14438                           postinc0	equ	0xFEE
 14439                           fsr0h	equ	0xFEA
 14440                           fsr0l	equ	0xFE9
 14441                           wreg	equ	0xFE8
 14442                           indf1	equ	0xFE7
 14443                           postdec1	equ	0xFE5
 14444                           fsr1h	equ	0xFE2
 14445                           fsr1l	equ	0xFE1
 14446                           indf2	equ	0xFDF
 14447                           postinc2	equ	0xFDE
 14448                           postdec2	equ	0xFDD
 14449                           fsr2h	equ	0xFDA
 14450                           fsr2l	equ	0xFD9
 14451                           status	equ	0xFD8
 14452                           
 14453 ;; *************** function _ClearMcuRunTime *****************
 14454 ;; Defined at:
 14455 ;;		line 51 in file "SystemStatus.c"
 14456 ;; Parameters:    Size  Location     Type
 14457 ;;		None
 14458 ;; Auto vars:     Size  Location     Type
 14459 ;;		None
 14460 ;; Return value:  Size  Location     Type
 14461 ;;                  1    wreg      void 
 14462 ;; Registers used:
 14463 ;;		wreg, status,2
 14464 ;; Tracked objects:
 14465 ;;		On entry : 0/0
 14466 ;;		On exit  : 0/0
 14467 ;;		Unchanged: 0/0
 14468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14469 ;;      Params:         0       0       0       0       0       0       0
 14470 ;;      Locals:         0       0       0       0       0       0       0
 14471 ;;      Temps:          0       0       0       0       0       0       0
 14472 ;;      Totals:         0       0       0       0       0       0       0
 14473 ;;Total ram usage:        0 bytes
 14474 ;; Hardware stack levels used:    1
 14475 ;; Hardware stack levels required when called:    3
 14476 ;; This function calls:
 14477 ;;		Nothing
 14478 ;; This function is called by:
 14479 ;;		_InitSystemApplicationManagers
 14480 ;; This function uses a non-reentrant model
 14481 ;;
 14482                           
 14483                           	psect	text75
 14484  002A64                     __ptext75:
 14485                           	opt stack 0
 14486  002A64                     _ClearMcuRunTime:
 14487                           	opt stack 26
 14488                           
 14489                           ;SystemStatus.c: 53: mcuRunTimeIn5SecTicks = 0;
 14490                           
 14491                           ;incstack = 0
 14492  002A64  0E00               	movlw	0
 14493  002A66  0100               	movlb	0	; () banked
 14494  002A68  6FAD               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 14495  002A6A  0E00               	movlw	0
 14496  002A6C  6FAE               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 14497  002A6E  0E00               	movlw	0
 14498  002A70  6FAF               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 14499  002A72  0E00               	movlw	0
 14500  002A74  6FB0               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 14501                           
 14502                           ; BSR set to: 0
 14503  002A76  0012               	return		;funcret
 14504  002A78                     __end_of_ClearMcuRunTime:
 14505                           	opt stack 0
 14506                           tosu	equ	0xFFF
 14507                           tosh	equ	0xFFE
 14508                           tosl	equ	0xFFD
 14509                           pclath	equ	0xFFA
 14510                           tblptru	equ	0xFF8
 14511                           tblptrh	equ	0xFF7
 14512                           tblptrl	equ	0xFF6
 14513                           tablat	equ	0xFF5
 14514                           prodh	equ	0xFF4
 14515                           prodl	equ	0xFF3
 14516                           intcon	equ	0xFF2
 14517                           intcon2	equ	0xFF1
 14518                           indf0	equ	0xFEF
 14519                           postinc0	equ	0xFEE
 14520                           fsr0h	equ	0xFEA
 14521                           fsr0l	equ	0xFE9
 14522                           wreg	equ	0xFE8
 14523                           indf1	equ	0xFE7
 14524                           postdec1	equ	0xFE5
 14525                           fsr1h	equ	0xFE2
 14526                           fsr1l	equ	0xFE1
 14527                           indf2	equ	0xFDF
 14528                           postinc2	equ	0xFDE
 14529                           postdec2	equ	0xFDD
 14530                           fsr2h	equ	0xFDA
 14531                           fsr2l	equ	0xFD9
 14532                           status	equ	0xFD8
 14533                           
 14534 ;; *************** function _BlinkOkLeds *****************
 14535 ;; Defined at:
 14536 ;;		line 24 in file "LedsApp.c"
 14537 ;; Parameters:    Size  Location     Type
 14538 ;;  state           1    wreg     enum E7609
 14539 ;; Auto vars:     Size  Location     Type
 14540 ;;  state           1   26[COMRAM] enum E7609
 14541 ;;  idx             2   27[COMRAM] int 
 14542 ;; Return value:  Size  Location     Type
 14543 ;;                  1    wreg      void 
 14544 ;; Registers used:
 14545 ;;		wreg, status,2, status,0
 14546 ;; Tracked objects:
 14547 ;;		On entry : 0/0
 14548 ;;		On exit  : 0/0
 14549 ;;		Unchanged: 0/0
 14550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14551 ;;      Params:         0       0       0       0       0       0       0
 14552 ;;      Locals:         3       0       0       0       0       0       0
 14553 ;;      Temps:          3       0       0       0       0       0       0
 14554 ;;      Totals:         6       0       0       0       0       0       0
 14555 ;;Total ram usage:        6 bytes
 14556 ;; Hardware stack levels used:    1
 14557 ;; Hardware stack levels required when called:    3
 14558 ;; This function calls:
 14559 ;;		Nothing
 14560 ;; This function is called by:
 14561 ;;		_main
 14562 ;; This function uses a non-reentrant model
 14563 ;;
 14564                           
 14565                           	psect	text76
 14566  0020BA                     __ptext76:
 14567                           	opt stack 0
 14568  0020BA                     _BlinkOkLeds:
 14569                           	opt stack 27
 14570                           
 14571                           ; BSR set to: 0
 14572                           ;incstack = 0
 14573                           ;BlinkOkLeds@state stored from wreg
 14574  0020BA  6E1B               	movwf	BlinkOkLeds@state,c
 14575                           
 14576                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 14577  0020BC  0E00               	movlw	0
 14578  0020BE  6E1D               	movwf	BlinkOkLeds@idx+1,c
 14579  0020C0  0E00               	movlw	0
 14580  0020C2  6E1C               	movwf	BlinkOkLeds@idx,c
 14581  0020C4                     l5562:
 14582  0020C4  501B               	movf	BlinkOkLeds@state,w,c
 14583  0020C6  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14584  0020C8  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 14585  0020CA  5018               	movf	??_BlinkOkLeds,w,c
 14586  0020CC  5C1C               	subwf	BlinkOkLeds@idx,w,c
 14587  0020CE  501D               	movf	BlinkOkLeds@idx+1,w,c
 14588  0020D0  0A80               	xorlw	128
 14589  0020D2  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 14590  0020D4  5019               	movf	??_BlinkOkLeds+1,w,c
 14591  0020D6  0A80               	xorlw	128
 14592  0020D8  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 14593  0020DA  B0D8               	btfsc	status,0,c
 14594  0020DC  0012               	return	
 14595                           
 14596                           ;LedsApp.c: 27: {
 14597                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 14598  0020DE  908B               	bcf	3979,0,c	;volatile
 14599                           
 14600                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 14601  0020E0  0E02               	movlw	2
 14602  0020E2  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14603  0020E4  0E04               	movlw	4
 14604  0020E6  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14605  0020E8  0EBA               	movlw	186
 14606  0020EA                     u8297:
 14607  0020EA  2EE8               	decfsz	wreg,f,c
 14608  0020EC  D7FE               	bra	u8297
 14609  0020EE  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14610  0020F0  D7FC               	bra	u8297
 14611  0020F2  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14612  0020F4  D7FA               	bra	u8297
 14613  0020F6  D000               	nop2	
 14614                           
 14615                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 14616  0020F8  808B               	bsf	3979,0,c	;volatile
 14617                           
 14618                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 14619  0020FA  0E02               	movlw	2
 14620  0020FC  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14621  0020FE  0E04               	movlw	4
 14622  002100  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14623  002102  0EBA               	movlw	186
 14624  002104                     u8307:
 14625  002104  2EE8               	decfsz	wreg,f,c
 14626  002106  D7FE               	bra	u8307
 14627  002108  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14628  00210A  D7FC               	bra	u8307
 14629  00210C  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14630  00210E  D7FA               	bra	u8307
 14631  002110  D000               	nop2	
 14632  002112  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 14633  002114  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 14634  002116  D7D6               	goto	l5562
 14635  002118                     __end_of_BlinkOkLeds:
 14636                           	opt stack 0
 14637                           tosu	equ	0xFFF
 14638                           tosh	equ	0xFFE
 14639                           tosl	equ	0xFFD
 14640                           pclath	equ	0xFFA
 14641                           tblptru	equ	0xFF8
 14642                           tblptrh	equ	0xFF7
 14643                           tblptrl	equ	0xFF6
 14644                           tablat	equ	0xFF5
 14645                           prodh	equ	0xFF4
 14646                           prodl	equ	0xFF3
 14647                           intcon	equ	0xFF2
 14648                           intcon2	equ	0xFF1
 14649                           indf0	equ	0xFEF
 14650                           postinc0	equ	0xFEE
 14651                           fsr0h	equ	0xFEA
 14652                           fsr0l	equ	0xFE9
 14653                           wreg	equ	0xFE8
 14654                           indf1	equ	0xFE7
 14655                           postdec1	equ	0xFE5
 14656                           fsr1h	equ	0xFE2
 14657                           fsr1l	equ	0xFE1
 14658                           indf2	equ	0xFDF
 14659                           postinc2	equ	0xFDE
 14660                           postdec2	equ	0xFDD
 14661                           fsr2h	equ	0xFDA
 14662                           fsr2l	equ	0xFD9
 14663                           status	equ	0xFD8
 14664                           
 14665 ;; *************** function _INTERRUPT_InterruptManager *****************
 14666 ;; Defined at:
 14667 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 14668 ;; Parameters:    Size  Location     Type
 14669 ;;		None
 14670 ;; Auto vars:     Size  Location     Type
 14671 ;;		None
 14672 ;; Return value:  Size  Location     Type
 14673 ;;                  1    wreg      void 
 14674 ;; Registers used:
 14675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14676 ;; Tracked objects:
 14677 ;;		On entry : 0/0
 14678 ;;		On exit  : 0/0
 14679 ;;		Unchanged: 0/0
 14680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14681 ;;      Params:         0       0       0       0       0       0       0
 14682 ;;      Locals:         0       0       0       0       0       0       0
 14683 ;;      Temps:         18       0       0       0       0       0       0
 14684 ;;      Totals:        18       0       0       0       0       0       0
 14685 ;;Total ram usage:       18 bytes
 14686 ;; Hardware stack levels used:    1
 14687 ;; Hardware stack levels required when called:    2
 14688 ;; This function calls:
 14689 ;;		_EUSART1_Receive_ISR
 14690 ;;		_EUSART1_Transmit_ISR
 14691 ;;		_MEMORY_ISR
 14692 ;;		_PIN_MANAGER_IOC
 14693 ;;		_TMR0_ISR
 14694 ;; This function is called by:
 14695 ;;		Interrupt level 2
 14696 ;; This function uses a non-reentrant model
 14697 ;;
 14698                           
 14699                           	psect	intcode
 14700  000008                     __pintcode:
 14701                           	opt stack 0
 14702  000008                     _INTERRUPT_InterruptManager:
 14703                           	opt stack 21
 14704                           
 14705                           ;incstack = 0
 14706  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14707  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 14708  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 14709  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 14710  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 14711  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 14712  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 14713  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 14714  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 14715  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 14716  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 14717  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 14718  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 14719  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 14720  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 14721  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 14722  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 14723  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 14724  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 14725                           
 14726                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 14727  000052  B6F2               	btfsc	intcon,3,c	;volatile
 14728  000054  A0F2               	btfss	intcon,0,c	;volatile
 14729  000056  D003               	goto	i2l727
 14730                           
 14731                           ;interrupt_manager.c: 61: {
 14732                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 14733  000058  EC5E  F015         	call	_PIN_MANAGER_IOC	;wreg free
 14734                           
 14735                           ;interrupt_manager.c: 63: }
 14736  00005C  D019               	goto	i2l736
 14737  00005E                     i2l727:
 14738                           
 14739                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 14740  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 14741  000060  A4F2               	btfss	intcon,2,c	;volatile
 14742  000062  D003               	goto	i2l729
 14743                           
 14744                           ;interrupt_manager.c: 65: {
 14745                           ;interrupt_manager.c: 66: TMR0_ISR();
 14746  000064  ECFC  F00D         	call	_TMR0_ISR	;wreg free
 14747                           
 14748                           ;interrupt_manager.c: 67: }
 14749  000068  D013               	goto	i2l736
 14750  00006A                     i2l729:
 14751                           
 14752                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 14753  00006A  ACF2               	btfss	intcon,6,c	;volatile
 14754  00006C  D011               	goto	i2l736
 14755                           
 14756                           ;interrupt_manager.c: 69: {
 14757                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 14758  00006E  B8A0               	btfsc	4000,4,c	;volatile
 14759  000070  A8A1               	btfss	4001,4,c	;volatile
 14760  000072  D003               	goto	i2l732
 14761                           
 14762                           ;interrupt_manager.c: 71: {
 14763                           ;interrupt_manager.c: 72: MEMORY_ISR();
 14764  000074  EC60  F015         	call	_MEMORY_ISR	;wreg free
 14765                           
 14766                           ;interrupt_manager.c: 73: }
 14767  000078  D00B               	goto	i2l736
 14768  00007A                     i2l732:
 14769                           
 14770                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 14771  00007A  B89D               	btfsc	3997,4,c	;volatile
 14772  00007C  A89E               	btfss	3998,4,c	;volatile
 14773  00007E  D003               	goto	i2l734
 14774                           
 14775                           ;interrupt_manager.c: 75: {
 14776                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 14777  000080  ECB6  F013         	call	_EUSART1_Transmit_ISR	;wreg free
 14778                           
 14779                           ;interrupt_manager.c: 77: }
 14780  000084  D005               	goto	i2l736
 14781  000086                     i2l734:
 14782                           
 14783                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 14784  000086  BA9D               	btfsc	3997,5,c	;volatile
 14785  000088  AA9E               	btfss	3998,5,c	;volatile
 14786  00008A  D002               	goto	i2l736
 14787                           
 14788                           ;interrupt_manager.c: 79: {
 14789                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 14790  00008C  EC07  F014         	call	_EUSART1_Receive_ISR	;wreg free
 14791  000090                     i2l736:
 14792                           
 14793                           ;interrupt_manager.c: 87: else
 14794                           ;interrupt_manager.c: 88: {
 14795                           
 14796                           ;interrupt_manager.c: 85: }
 14797                           ;interrupt_manager.c: 86: }
 14798                           
 14799                           ;interrupt_manager.c: 82: else
 14800                           ;interrupt_manager.c: 83: {
 14801  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 14802  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 14803  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 14804  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 14805  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 14806  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 14807  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 14808  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 14809  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 14810  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 14811  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 14812  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 14813  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 14814  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 14815  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 14816  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 14817  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 14818  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 14819  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14820  0000DA  0011               	retfie		f
 14821  0000DC                     __end_of_INTERRUPT_InterruptManager:
 14822                           	opt stack 0
 14823                           tosu	equ	0xFFF
 14824                           tosh	equ	0xFFE
 14825                           tosl	equ	0xFFD
 14826                           pclatu	equ	0xFFB
 14827                           pclath	equ	0xFFA
 14828                           tblptru	equ	0xFF8
 14829                           tblptrh	equ	0xFF7
 14830                           tblptrl	equ	0xFF6
 14831                           tablat	equ	0xFF5
 14832                           prodh	equ	0xFF4
 14833                           prodl	equ	0xFF3
 14834                           intcon	equ	0xFF2
 14835                           intcon2	equ	0xFF1
 14836                           indf0	equ	0xFEF
 14837                           postinc0	equ	0xFEE
 14838                           fsr0h	equ	0xFEA
 14839                           fsr0l	equ	0xFE9
 14840                           wreg	equ	0xFE8
 14841                           indf1	equ	0xFE7
 14842                           postdec1	equ	0xFE5
 14843                           fsr1h	equ	0xFE2
 14844                           fsr1l	equ	0xFE1
 14845                           indf2	equ	0xFDF
 14846                           postinc2	equ	0xFDE
 14847                           postdec2	equ	0xFDD
 14848                           fsr2h	equ	0xFDA
 14849                           fsr2l	equ	0xFD9
 14850                           status	equ	0xFD8
 14851                           
 14852 ;; *************** function _TMR0_ISR *****************
 14853 ;; Defined at:
 14854 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 14855 ;; Parameters:    Size  Location     Type
 14856 ;;		None
 14857 ;; Auto vars:     Size  Location     Type
 14858 ;;		None
 14859 ;; Return value:  Size  Location     Type
 14860 ;;                  1    wreg      void 
 14861 ;; Registers used:
 14862 ;;		wreg, status,2, status,0, cstack
 14863 ;; Tracked objects:
 14864 ;;		On entry : 0/0
 14865 ;;		On exit  : 0/0
 14866 ;;		Unchanged: 0/0
 14867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14868 ;;      Params:         0       0       0       0       0       0       0
 14869 ;;      Locals:         0       0       0       0       0       0       0
 14870 ;;      Temps:          0       0       0       0       0       0       0
 14871 ;;      Totals:         0       0       0       0       0       0       0
 14872 ;;Total ram usage:        0 bytes
 14873 ;; Hardware stack levels used:    1
 14874 ;; Hardware stack levels required when called:    1
 14875 ;; This function calls:
 14876 ;;		i2___lwmod
 14877 ;; This function is called by:
 14878 ;;		_INTERRUPT_InterruptManager
 14879 ;; This function uses a non-reentrant model
 14880 ;;
 14881                           
 14882                           	psect	text78
 14883  001BF8                     __ptext78:
 14884                           	opt stack 0
 14885  001BF8                     _TMR0_ISR:
 14886                           	opt stack 21
 14887                           
 14888                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 14889                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 14890                           
 14891                           ;incstack = 0
 14892  001BF8  94F2               	bcf	intcon,2,c	;volatile
 14893                           
 14894                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 14895  001BFA  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 14896  001BFC  6ED7               	movwf	4055,c	;volatile
 14897                           
 14898                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 14899  001BFE  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 14900                           
 14901                           ;tmr0.c: 146: CountCallBack ++;
 14902  001C02  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 14903  001C04  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 14904                           
 14905                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 14906  001C06  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 14907  001C0A  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 14908  001C0E  0E00               	movlw	0
 14909  001C10  6E04               	movwf	i2___lwmod@divisor+1,c
 14910  001C12  0E14               	movlw	20
 14911  001C14  6E03               	movwf	i2___lwmod@divisor,c
 14912  001C16  EC01  F013         	call	i2___lwmod	;wreg free
 14913  001C1A  5001               	movf	?i2___lwmod,w,c
 14914  001C1C  1002               	iorwf	?i2___lwmod+1,w,c
 14915  001C1E  A4D8               	btfss	status,2,c
 14916  001C20  D003               	goto	i2l958
 14917                           
 14918                           ;tmr0.c: 148: {
 14919                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 14920  001C22  0E01               	movlw	1
 14921  001C24  0100               	movlb	0	; () banked
 14922  001C26  6FC6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 14923  001C28                     i2l958:
 14924                           
 14925                           ;tmr0.c: 150: }
 14926                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 14927                           
 14928                           ; BSR set to: 0
 14929  001C28  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 14930  001C2C  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 14931  001C30  0E00               	movlw	0
 14932  001C32  6E04               	movwf	i2___lwmod@divisor+1,c
 14933  001C34  0E32               	movlw	50
 14934  001C36  6E03               	movwf	i2___lwmod@divisor,c
 14935  001C38  EC01  F013         	call	i2___lwmod	;wreg free
 14936  001C3C  5001               	movf	?i2___lwmod,w,c
 14937  001C3E  1002               	iorwf	?i2___lwmod+1,w,c
 14938  001C40  A4D8               	btfss	status,2,c
 14939  001C42  D003               	goto	i2l959
 14940                           
 14941                           ;tmr0.c: 153: {
 14942                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 14943  001C44  0E01               	movlw	1
 14944  001C46  0100               	movlb	0	; () banked
 14945  001C48  6FC5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 14946  001C4A                     i2l959:
 14947                           
 14948                           ;tmr0.c: 155: }
 14949                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 14950                           
 14951                           ; BSR set to: 0
 14952  001C4A  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 14953  001C4E  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 14954  001C52  0E01               	movlw	1
 14955  001C54  6E04               	movwf	i2___lwmod@divisor+1,c
 14956  001C56  0E2C               	movlw	44
 14957  001C58  6E03               	movwf	i2___lwmod@divisor,c
 14958  001C5A  EC01  F013         	call	i2___lwmod	;wreg free
 14959  001C5E  5001               	movf	?i2___lwmod,w,c
 14960  001C60  1002               	iorwf	?i2___lwmod+1,w,c
 14961  001C62  A4D8               	btfss	status,2,c
 14962  001C64  D003               	goto	i2l960
 14963                           
 14964                           ;tmr0.c: 157: {
 14965                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 14966  001C66  0E01               	movlw	1
 14967  001C68  0100               	movlb	0	; () banked
 14968  001C6A  6FC4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 14969  001C6C                     i2l960:
 14970                           
 14971                           ;tmr0.c: 159: }
 14972                           ;tmr0.c: 161: CountCallBack %= 300;
 14973                           
 14974                           ; BSR set to: 0
 14975  001C6C  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 14976  001C70  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 14977  001C74  0E01               	movlw	1
 14978  001C76  6E04               	movwf	i2___lwmod@divisor+1,c
 14979  001C78  0E2C               	movlw	44
 14980  001C7A  6E03               	movwf	i2___lwmod@divisor,c
 14981  001C7C  EC01  F013         	call	i2___lwmod	;wreg free
 14982  001C80  C001  F035         	movff	?i2___lwmod,TMR0_ISR@CountCallBack	;volatile
 14983  001C84  C002  F036         	movff	?i2___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 14984  001C88  0012               	return		;funcret
 14985  001C8A                     __end_of_TMR0_ISR:
 14986                           	opt stack 0
 14987                           tosu	equ	0xFFF
 14988                           tosh	equ	0xFFE
 14989                           tosl	equ	0xFFD
 14990                           pclatu	equ	0xFFB
 14991                           pclath	equ	0xFFA
 14992                           tblptru	equ	0xFF8
 14993                           tblptrh	equ	0xFF7
 14994                           tblptrl	equ	0xFF6
 14995                           tablat	equ	0xFF5
 14996                           prodh	equ	0xFF4
 14997                           prodl	equ	0xFF3
 14998                           intcon	equ	0xFF2
 14999                           intcon2	equ	0xFF1
 15000                           indf0	equ	0xFEF
 15001                           postinc0	equ	0xFEE
 15002                           fsr0h	equ	0xFEA
 15003                           fsr0l	equ	0xFE9
 15004                           wreg	equ	0xFE8
 15005                           indf1	equ	0xFE7
 15006                           postdec1	equ	0xFE5
 15007                           fsr1h	equ	0xFE2
 15008                           fsr1l	equ	0xFE1
 15009                           indf2	equ	0xFDF
 15010                           postinc2	equ	0xFDE
 15011                           postdec2	equ	0xFDD
 15012                           fsr2h	equ	0xFDA
 15013                           fsr2l	equ	0xFD9
 15014                           status	equ	0xFD8
 15015                           
 15016 ;; *************** function i2___lwmod *****************
 15017 ;; Defined at:
 15018 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 15019 ;; Parameters:    Size  Location     Type
 15020 ;;  dividend        2    0[COMRAM] unsigned int 
 15021 ;;  divisor         2    2[COMRAM] unsigned int 
 15022 ;; Auto vars:     Size  Location     Type
 15023 ;;  __lwmod         1    4[COMRAM] unsigned char 
 15024 ;; Return value:  Size  Location     Type
 15025 ;;                  2    0[COMRAM] unsigned int 
 15026 ;; Registers used:
 15027 ;;		wreg, status,2, status,0
 15028 ;; Tracked objects:
 15029 ;;		On entry : 0/0
 15030 ;;		On exit  : 0/0
 15031 ;;		Unchanged: 0/0
 15032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15033 ;;      Params:         4       0       0       0       0       0       0
 15034 ;;      Locals:         1       0       0       0       0       0       0
 15035 ;;      Temps:          0       0       0       0       0       0       0
 15036 ;;      Totals:         5       0       0       0       0       0       0
 15037 ;;Total ram usage:        5 bytes
 15038 ;; Hardware stack levels used:    1
 15039 ;; This function calls:
 15040 ;;		Nothing
 15041 ;; This function is called by:
 15042 ;;		_TMR0_ISR
 15043 ;; This function uses a non-reentrant model
 15044 ;;
 15045                           
 15046                           	psect	text79
 15047  002602                     __ptext79:
 15048                           	opt stack 0
 15049  002602                     i2___lwmod:
 15050                           	opt stack 21
 15051                           
 15052                           ;incstack = 0
 15053  002602  5003               	movf	i2___lwmod@divisor,w,c
 15054  002604  1004               	iorwf	i2___lwmod@divisor+1,w,c
 15055  002606  B4D8               	btfsc	status,2,c
 15056  002608  D018               	goto	i2l1744
 15057  00260A  0E01               	movlw	1
 15058  00260C  6E05               	movwf	i2___lwmod@counter,c
 15059  00260E  D004               	goto	i2l1739
 15060  002610  90D8               	bcf	status,0,c
 15061  002612  3603               	rlcf	i2___lwmod@divisor,f,c
 15062  002614  3604               	rlcf	i2___lwmod@divisor+1,f,c
 15063  002616  2A05               	incf	i2___lwmod@counter,f,c
 15064  002618                     i2l1739:
 15065  002618  AE04               	btfss	i2___lwmod@divisor+1,7,c
 15066  00261A  D7FA               	goto	i2l1740
 15067  00261C                     i2u511_40:
 15068  00261C  5003               	movf	i2___lwmod@divisor,w,c
 15069  00261E  5C01               	subwf	i2___lwmod@dividend,w,c
 15070  002620  5004               	movf	i2___lwmod@divisor+1,w,c
 15071  002622  5802               	subwfb	i2___lwmod@dividend+1,w,c
 15072  002624  A0D8               	btfss	status,0,c
 15073  002626  D004               	goto	i2l1743
 15074  002628  5003               	movf	i2___lwmod@divisor,w,c
 15075  00262A  5E01               	subwf	i2___lwmod@dividend,f,c
 15076  00262C  5004               	movf	i2___lwmod@divisor+1,w,c
 15077  00262E  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 15078  002630                     i2l1743:
 15079  002630  90D8               	bcf	status,0,c
 15080  002632  3204               	rrcf	i2___lwmod@divisor+1,f,c
 15081  002634  3203               	rrcf	i2___lwmod@divisor,f,c
 15082  002636  2E05               	decfsz	i2___lwmod@counter,f,c
 15083  002638  D7F1               	goto	i2u511_40
 15084  00263A                     i2l1744:
 15085  00263A  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 15086  00263E  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 15087  002642  0012               	return		;funcret
 15088  002644                     __end_ofi2___lwmod:
 15089                           	opt stack 0
 15090                           tosu	equ	0xFFF
 15091                           tosh	equ	0xFFE
 15092                           tosl	equ	0xFFD
 15093                           pclatu	equ	0xFFB
 15094                           pclath	equ	0xFFA
 15095                           tblptru	equ	0xFF8
 15096                           tblptrh	equ	0xFF7
 15097                           tblptrl	equ	0xFF6
 15098                           tablat	equ	0xFF5
 15099                           prodh	equ	0xFF4
 15100                           prodl	equ	0xFF3
 15101                           intcon	equ	0xFF2
 15102                           intcon2	equ	0xFF1
 15103                           indf0	equ	0xFEF
 15104                           postinc0	equ	0xFEE
 15105                           fsr0h	equ	0xFEA
 15106                           fsr0l	equ	0xFE9
 15107                           wreg	equ	0xFE8
 15108                           indf1	equ	0xFE7
 15109                           postdec1	equ	0xFE5
 15110                           fsr1h	equ	0xFE2
 15111                           fsr1l	equ	0xFE1
 15112                           indf2	equ	0xFDF
 15113                           postinc2	equ	0xFDE
 15114                           postdec2	equ	0xFDD
 15115                           fsr2h	equ	0xFDA
 15116                           fsr2l	equ	0xFD9
 15117                           status	equ	0xFD8
 15118                           
 15119 ;; *************** function _PIN_MANAGER_IOC *****************
 15120 ;; Defined at:
 15121 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 15122 ;; Parameters:    Size  Location     Type
 15123 ;;		None
 15124 ;; Auto vars:     Size  Location     Type
 15125 ;;		None
 15126 ;; Return value:  Size  Location     Type
 15127 ;;                  1    wreg      void 
 15128 ;; Registers used:
 15129 ;;		None
 15130 ;; Tracked objects:
 15131 ;;		On entry : 0/0
 15132 ;;		On exit  : 0/0
 15133 ;;		Unchanged: 0/0
 15134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15135 ;;      Params:         0       0       0       0       0       0       0
 15136 ;;      Locals:         0       0       0       0       0       0       0
 15137 ;;      Temps:          0       0       0       0       0       0       0
 15138 ;;      Totals:         0       0       0       0       0       0       0
 15139 ;;Total ram usage:        0 bytes
 15140 ;; Hardware stack levels used:    1
 15141 ;; This function calls:
 15142 ;;		Nothing
 15143 ;; This function is called by:
 15144 ;;		_INTERRUPT_InterruptManager
 15145 ;; This function uses a non-reentrant model
 15146 ;;
 15147                           
 15148                           	psect	text80
 15149  002ABC                     __ptext80:
 15150                           	opt stack 0
 15151  002ABC                     _PIN_MANAGER_IOC:
 15152                           	opt stack 22
 15153                           
 15154                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 15155                           
 15156                           ;incstack = 0
 15157  002ABC  90F2               	bcf	intcon,0,c	;volatile
 15158  002ABE  0012               	return		;funcret
 15159  002AC0                     __end_of_PIN_MANAGER_IOC:
 15160                           	opt stack 0
 15161                           tosu	equ	0xFFF
 15162                           tosh	equ	0xFFE
 15163                           tosl	equ	0xFFD
 15164                           pclatu	equ	0xFFB
 15165                           pclath	equ	0xFFA
 15166                           tblptru	equ	0xFF8
 15167                           tblptrh	equ	0xFF7
 15168                           tblptrl	equ	0xFF6
 15169                           tablat	equ	0xFF5
 15170                           prodh	equ	0xFF4
 15171                           prodl	equ	0xFF3
 15172                           intcon	equ	0xFF2
 15173                           intcon2	equ	0xFF1
 15174                           indf0	equ	0xFEF
 15175                           postinc0	equ	0xFEE
 15176                           fsr0h	equ	0xFEA
 15177                           fsr0l	equ	0xFE9
 15178                           wreg	equ	0xFE8
 15179                           indf1	equ	0xFE7
 15180                           postdec1	equ	0xFE5
 15181                           fsr1h	equ	0xFE2
 15182                           fsr1l	equ	0xFE1
 15183                           indf2	equ	0xFDF
 15184                           postinc2	equ	0xFDE
 15185                           postdec2	equ	0xFDD
 15186                           fsr2h	equ	0xFDA
 15187                           fsr2l	equ	0xFD9
 15188                           status	equ	0xFD8
 15189                           
 15190 ;; *************** function _MEMORY_ISR *****************
 15191 ;; Defined at:
 15192 ;;		line 206 in file "mcc_generated_files/memory.c"
 15193 ;; Parameters:    Size  Location     Type
 15194 ;;		None
 15195 ;; Auto vars:     Size  Location     Type
 15196 ;;		None
 15197 ;; Return value:  Size  Location     Type
 15198 ;;                  1    wreg      void 
 15199 ;; Registers used:
 15200 ;;		None
 15201 ;; Tracked objects:
 15202 ;;		On entry : 0/0
 15203 ;;		On exit  : 0/0
 15204 ;;		Unchanged: 0/0
 15205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15206 ;;      Params:         0       0       0       0       0       0       0
 15207 ;;      Locals:         0       0       0       0       0       0       0
 15208 ;;      Temps:          0       0       0       0       0       0       0
 15209 ;;      Totals:         0       0       0       0       0       0       0
 15210 ;;Total ram usage:        0 bytes
 15211 ;; Hardware stack levels used:    1
 15212 ;; This function calls:
 15213 ;;		Nothing
 15214 ;; This function is called by:
 15215 ;;		_INTERRUPT_InterruptManager
 15216 ;; This function uses a non-reentrant model
 15217 ;;
 15218                           
 15219                           	psect	text81
 15220  002AC0                     __ptext81:
 15221                           	opt stack 0
 15222  002AC0                     _MEMORY_ISR:
 15223                           	opt stack 22
 15224                           
 15225                           ;memory.c: 209: PIR2bits.EEIF = 0;
 15226                           
 15227                           ;incstack = 0
 15228  002AC0  98A1               	bcf	4001,4,c	;volatile
 15229  002AC2  0012               	return		;funcret
 15230  002AC4                     __end_of_MEMORY_ISR:
 15231                           	opt stack 0
 15232                           tosu	equ	0xFFF
 15233                           tosh	equ	0xFFE
 15234                           tosl	equ	0xFFD
 15235                           pclatu	equ	0xFFB
 15236                           pclath	equ	0xFFA
 15237                           tblptru	equ	0xFF8
 15238                           tblptrh	equ	0xFF7
 15239                           tblptrl	equ	0xFF6
 15240                           tablat	equ	0xFF5
 15241                           prodh	equ	0xFF4
 15242                           prodl	equ	0xFF3
 15243                           intcon	equ	0xFF2
 15244                           intcon2	equ	0xFF1
 15245                           indf0	equ	0xFEF
 15246                           postinc0	equ	0xFEE
 15247                           fsr0h	equ	0xFEA
 15248                           fsr0l	equ	0xFE9
 15249                           wreg	equ	0xFE8
 15250                           indf1	equ	0xFE7
 15251                           postdec1	equ	0xFE5
 15252                           fsr1h	equ	0xFE2
 15253                           fsr1l	equ	0xFE1
 15254                           indf2	equ	0xFDF
 15255                           postinc2	equ	0xFDE
 15256                           postdec2	equ	0xFDD
 15257                           fsr2h	equ	0xFDA
 15258                           fsr2l	equ	0xFD9
 15259                           status	equ	0xFD8
 15260                           
 15261 ;; *************** function _EUSART1_Transmit_ISR *****************
 15262 ;; Defined at:
 15263 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 15264 ;; Parameters:    Size  Location     Type
 15265 ;;		None
 15266 ;; Auto vars:     Size  Location     Type
 15267 ;;		None
 15268 ;; Return value:  Size  Location     Type
 15269 ;;                  1    wreg      void 
 15270 ;; Registers used:
 15271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15272 ;; Tracked objects:
 15273 ;;		On entry : 0/0
 15274 ;;		On exit  : 0/0
 15275 ;;		Unchanged: 0/0
 15276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15277 ;;      Params:         0       0       0       0       0       0       0
 15278 ;;      Locals:         0       0       0       0       0       0       0
 15279 ;;      Temps:          0       0       0       0       0       0       0
 15280 ;;      Totals:         0       0       0       0       0       0       0
 15281 ;;Total ram usage:        0 bytes
 15282 ;; Hardware stack levels used:    1
 15283 ;; This function calls:
 15284 ;;		Nothing
 15285 ;; This function is called by:
 15286 ;;		_INTERRUPT_InterruptManager
 15287 ;; This function uses a non-reentrant model
 15288 ;;
 15289                           
 15290                           	psect	text82
 15291  00276C                     __ptext82:
 15292                           	opt stack 0
 15293  00276C                     _EUSART1_Transmit_ISR:
 15294                           	opt stack 22
 15295                           
 15296                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 15297                           
 15298                           ;incstack = 0
 15299  00276C  0E46               	movlw	70
 15300  00276E  0100               	movlb	0	; () banked
 15301  002770  61D9               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15302  002772  D012               	goto	i2l798
 15303                           
 15304                           ; BSR set to: 0
 15305                           ;eusart1.c: 186: {
 15306                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 15307  002774  503B               	movf	_eusart1TxTail,w,c	;volatile
 15308  002776  0D01               	mullw	1
 15309  002778  0E00               	movlw	low _eusart1TxBuffer
 15310  00277A  24F3               	addwf	prodl,w,c
 15311  00277C  6ED9               	movwf	fsr2l,c
 15312  00277E  0E01               	movlw	high _eusart1TxBuffer
 15313  002780  20F4               	addwfc	prodh,w,c
 15314  002782  6EDA               	movwf	fsr2h,c
 15315  002784  50DF               	movf	indf2,w,c
 15316  002786  6EAD               	movwf	4013,c	;volatile
 15317                           
 15318                           ; BSR set to: 0
 15319  002788  2A3B               	incf	_eusart1TxTail,f,c	;volatile
 15320                           
 15321                           ; BSR set to: 0
 15322                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 15323  00278A  0E45               	movlw	69
 15324  00278C  643B               	cpfsgt	_eusart1TxTail,c	;volatile
 15325  00278E  D002               	goto	i2l799
 15326                           
 15327                           ; BSR set to: 0
 15328                           ;eusart1.c: 189: {
 15329                           ;eusart1.c: 190: eusart1TxTail = 0;
 15330  002790  0E00               	movlw	0
 15331  002792  6E3B               	movwf	_eusart1TxTail,c	;volatile
 15332  002794                     i2l799:
 15333                           
 15334                           ; BSR set to: 0
 15335                           ;eusart1.c: 191: }
 15336                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 15337                           
 15338                           ; BSR set to: 0
 15339  002794  2BD9               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 15340                           
 15341                           ;eusart1.c: 193: }
 15342  002796  0012               	return	
 15343  002798                     i2l798:
 15344                           
 15345                           ; BSR set to: 0
 15346                           ;eusart1.c: 194: else
 15347                           ;eusart1.c: 195: {
 15348                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 15349  002798  989D               	bcf	3997,4,c	;volatile
 15350                           
 15351                           ; BSR set to: 0
 15352                           ;eusart1.c: 197: eusart1TxTail = 0;
 15353  00279A  0E00               	movlw	0
 15354  00279C  6E3B               	movwf	_eusart1TxTail,c	;volatile
 15355                           
 15356                           ;eusart1.c: 198: eusart1TxHead = 0;
 15357  00279E  0E00               	movlw	0
 15358  0027A0  6E3C               	movwf	_eusart1TxHead,c	;volatile
 15359  0027A2  0012               	return	
 15360  0027A4                     __end_of_EUSART1_Transmit_ISR:
 15361                           	opt stack 0
 15362                           tosu	equ	0xFFF
 15363                           tosh	equ	0xFFE
 15364                           tosl	equ	0xFFD
 15365                           pclatu	equ	0xFFB
 15366                           pclath	equ	0xFFA
 15367                           tblptru	equ	0xFF8
 15368                           tblptrh	equ	0xFF7
 15369                           tblptrl	equ	0xFF6
 15370                           tablat	equ	0xFF5
 15371                           prodh	equ	0xFF4
 15372                           prodl	equ	0xFF3
 15373                           intcon	equ	0xFF2
 15374                           intcon2	equ	0xFF1
 15375                           indf0	equ	0xFEF
 15376                           postinc0	equ	0xFEE
 15377                           fsr0h	equ	0xFEA
 15378                           fsr0l	equ	0xFE9
 15379                           wreg	equ	0xFE8
 15380                           indf1	equ	0xFE7
 15381                           postdec1	equ	0xFE5
 15382                           fsr1h	equ	0xFE2
 15383                           fsr1l	equ	0xFE1
 15384                           indf2	equ	0xFDF
 15385                           postinc2	equ	0xFDE
 15386                           postdec2	equ	0xFDD
 15387                           fsr2h	equ	0xFDA
 15388                           fsr2l	equ	0xFD9
 15389                           status	equ	0xFD8
 15390                           
 15391 ;; *************** function _EUSART1_Receive_ISR *****************
 15392 ;; Defined at:
 15393 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 15394 ;; Parameters:    Size  Location     Type
 15395 ;;		None
 15396 ;; Auto vars:     Size  Location     Type
 15397 ;;		None
 15398 ;; Return value:  Size  Location     Type
 15399 ;;                  1    wreg      void 
 15400 ;; Registers used:
 15401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15402 ;; Tracked objects:
 15403 ;;		On entry : 0/0
 15404 ;;		On exit  : 0/0
 15405 ;;		Unchanged: 0/0
 15406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15407 ;;      Params:         0       0       0       0       0       0       0
 15408 ;;      Locals:         0       0       0       0       0       0       0
 15409 ;;      Temps:          0       0       0       0       0       0       0
 15410 ;;      Totals:         0       0       0       0       0       0       0
 15411 ;;Total ram usage:        0 bytes
 15412 ;; Hardware stack levels used:    1
 15413 ;; This function calls:
 15414 ;;		Nothing
 15415 ;; This function is called by:
 15416 ;;		_INTERRUPT_InterruptManager
 15417 ;; This function uses a non-reentrant model
 15418 ;;
 15419                           
 15420                           	psect	text83
 15421  00280E                     __ptext83:
 15422                           	opt stack 0
 15423  00280E                     _EUSART1_Receive_ISR:
 15424                           	opt stack 22
 15425                           
 15426                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 15427                           
 15428                           ; BSR set to: 0
 15429                           ;incstack = 0
 15430  00280E  A2AB               	btfss	4011,1,c	;volatile
 15431  002810  D002               	goto	i2l804
 15432                           
 15433                           ;eusart1.c: 206: {
 15434                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 15435  002812  98AB               	bcf	4011,4,c	;volatile
 15436                           
 15437                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 15438  002814  88AB               	bsf	4011,4,c	;volatile
 15439  002816                     i2l804:
 15440                           
 15441                           ;eusart1.c: 210: }
 15442                           ;eusart1.c: 212: TXREG1 = RCREG1;
 15443  002816  CFAE FFAD          	movff	4014,4013	;volatile
 15444                           
 15445                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15446  00281A  503A               	movf	_eusart1RxHead,w,c	;volatile
 15447  00281C  0D01               	mullw	1
 15448  00281E  0E46               	movlw	low _eusart1RxBuffer
 15449  002820  24F3               	addwf	prodl,w,c
 15450  002822  6ED9               	movwf	fsr2l,c
 15451  002824  0E01               	movlw	high _eusart1RxBuffer
 15452  002826  20F4               	addwfc	prodh,w,c
 15453  002828  6EDA               	movwf	fsr2h,c
 15454  00282A  CFAE FFDF          	movff	4014,indf2	;volatile
 15455  00282E  2A3A               	incf	_eusart1RxHead,f,c	;volatile
 15456                           
 15457                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 15458  002830  0E27               	movlw	39
 15459  002832  643A               	cpfsgt	_eusart1RxHead,c	;volatile
 15460  002834  D002               	goto	i2l805
 15461                           
 15462                           ;eusart1.c: 217: {
 15463                           ;eusart1.c: 218: eusart1RxHead = 0;
 15464  002836  0E00               	movlw	0
 15465  002838  6E3A               	movwf	_eusart1RxHead,c	;volatile
 15466  00283A                     i2l805:
 15467                           
 15468                           ;eusart1.c: 219: }
 15469                           ;eusart1.c: 220: eusart1RxCount++;
 15470  00283A  0100               	movlb	0	; () banked
 15471  00283C  2BC1               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 15472                           
 15473                           ; BSR set to: 0
 15474  00283E  0012               	return		;funcret
 15475  002840                     __end_of_EUSART1_Receive_ISR:
 15476                           	opt stack 0
 15477                           tosu	equ	0xFFF
 15478                           tosh	equ	0xFFE
 15479                           tosl	equ	0xFFD
 15480                           pclatu	equ	0xFFB
 15481                           pclath	equ	0xFFA
 15482                           tblptru	equ	0xFF8
 15483                           tblptrh	equ	0xFF7
 15484                           tblptrl	equ	0xFF6
 15485                           tablat	equ	0xFF5
 15486                           prodh	equ	0xFF4
 15487                           prodl	equ	0xFF3
 15488                           intcon	equ	0xFF2
 15489                           intcon2	equ	0xFF1
 15490                           indf0	equ	0xFEF
 15491                           postinc0	equ	0xFEE
 15492                           fsr0h	equ	0xFEA
 15493                           fsr0l	equ	0xFE9
 15494                           wreg	equ	0xFE8
 15495                           indf1	equ	0xFE7
 15496                           postdec1	equ	0xFE5
 15497                           fsr1h	equ	0xFE2
 15498                           fsr1l	equ	0xFE1
 15499                           indf2	equ	0xFDF
 15500                           postinc2	equ	0xFDE
 15501                           postdec2	equ	0xFDD
 15502                           fsr2h	equ	0xFDA
 15503                           fsr2l	equ	0xFD9
 15504                           status	equ	0xFD8
 15505                           tosu	equ	0xFFF
 15506                           tosh	equ	0xFFE
 15507                           tosl	equ	0xFFD
 15508                           pclatu	equ	0xFFB
 15509                           pclath	equ	0xFFA
 15510                           tblptru	equ	0xFF8
 15511                           tblptrh	equ	0xFF7
 15512                           tblptrl	equ	0xFF6
 15513                           tablat	equ	0xFF5
 15514                           prodh	equ	0xFF4
 15515                           prodl	equ	0xFF3
 15516                           intcon	equ	0xFF2
 15517                           intcon2	equ	0xFF1
 15518                           indf0	equ	0xFEF
 15519                           postinc0	equ	0xFEE
 15520                           fsr0h	equ	0xFEA
 15521                           fsr0l	equ	0xFE9
 15522                           wreg	equ	0xFE8
 15523                           indf1	equ	0xFE7
 15524                           postdec1	equ	0xFE5
 15525                           fsr1h	equ	0xFE2
 15526                           fsr1l	equ	0xFE1
 15527                           indf2	equ	0xFDF
 15528                           postinc2	equ	0xFDE
 15529                           postdec2	equ	0xFDD
 15530                           fsr2h	equ	0xFDA
 15531                           fsr2l	equ	0xFD9
 15532                           status	equ	0xFD8
 15533                           
 15534                           	psect	text84
 15535  000000                     __ptext84:
 15536                           	opt stack 0
 15537                           tosu	equ	0xFFF
 15538                           tosh	equ	0xFFE
 15539                           tosl	equ	0xFFD
 15540                           pclatu	equ	0xFFB
 15541                           pclath	equ	0xFFA
 15542                           tblptru	equ	0xFF8
 15543                           tblptrh	equ	0xFF7
 15544                           tblptrl	equ	0xFF6
 15545                           tablat	equ	0xFF5
 15546                           prodh	equ	0xFF4
 15547                           prodl	equ	0xFF3
 15548                           intcon	equ	0xFF2
 15549                           intcon2	equ	0xFF1
 15550                           indf0	equ	0xFEF
 15551                           postinc0	equ	0xFEE
 15552                           fsr0h	equ	0xFEA
 15553                           fsr0l	equ	0xFE9
 15554                           wreg	equ	0xFE8
 15555                           indf1	equ	0xFE7
 15556                           postdec1	equ	0xFE5
 15557                           fsr1h	equ	0xFE2
 15558                           fsr1l	equ	0xFE1
 15559                           indf2	equ	0xFDF
 15560                           postinc2	equ	0xFDE
 15561                           postdec2	equ	0xFDD
 15562                           fsr2h	equ	0xFDA
 15563                           fsr2l	equ	0xFD9
 15564                           status	equ	0xFD8
 15565                           
 15566                           	psect	rparam
 15567  0000                     tosu	equ	0xFFF
 15568                           tosh	equ	0xFFE
 15569                           tosl	equ	0xFFD
 15570                           pclatu	equ	0xFFB
 15571                           pclath	equ	0xFFA
 15572                           tblptru	equ	0xFF8
 15573                           tblptrh	equ	0xFF7
 15574                           tblptrl	equ	0xFF6
 15575                           tablat	equ	0xFF5
 15576                           prodh	equ	0xFF4
 15577                           prodl	equ	0xFF3
 15578                           intcon	equ	0xFF2
 15579                           intcon2	equ	0xFF1
 15580                           indf0	equ	0xFEF
 15581                           postinc0	equ	0xFEE
 15582                           fsr0h	equ	0xFEA
 15583                           fsr0l	equ	0xFE9
 15584                           wreg	equ	0xFE8
 15585                           indf1	equ	0xFE7
 15586                           postdec1	equ	0xFE5
 15587                           fsr1h	equ	0xFE2
 15588                           fsr1l	equ	0xFE1
 15589                           indf2	equ	0xFDF
 15590                           postinc2	equ	0xFDE
 15591                           postdec2	equ	0xFDD
 15592                           fsr2h	equ	0xFDA
 15593                           fsr2l	equ	0xFD9
 15594                           status	equ	0xFD8
 15595                           
 15596                           	psect	temp
 15597  000048                     btemp:
 15598                           	opt stack 0
 15599  000048                     	ds	1
 15600  0000                     int$flags	set	btemp
 15601  0000                     wtemp6	set	btemp+1
 15602                           tosu	equ	0xFFF
 15603                           tosh	equ	0xFFE
 15604                           tosl	equ	0xFFD
 15605                           pclatu	equ	0xFFB
 15606                           pclath	equ	0xFFA
 15607                           tblptru	equ	0xFF8
 15608                           tblptrh	equ	0xFF7
 15609                           tblptrl	equ	0xFF6
 15610                           tablat	equ	0xFF5
 15611                           prodh	equ	0xFF4
 15612                           prodl	equ	0xFF3
 15613                           intcon	equ	0xFF2
 15614                           intcon2	equ	0xFF1
 15615                           indf0	equ	0xFEF
 15616                           postinc0	equ	0xFEE
 15617                           fsr0h	equ	0xFEA
 15618                           fsr0l	equ	0xFE9
 15619                           wreg	equ	0xFE8
 15620                           indf1	equ	0xFE7
 15621                           postdec1	equ	0xFE5
 15622                           fsr1h	equ	0xFE2
 15623                           fsr1l	equ	0xFE1
 15624                           indf2	equ	0xFDF
 15625                           postinc2	equ	0xFDE
 15626                           postdec2	equ	0xFDD
 15627                           fsr2h	equ	0xFDA
 15628                           fsr2l	equ	0xFD9
 15629                           status	equ	0xFD8


Data Sizes:
    Strings     1291
    Constant    175
    Data        20
    BSS         257
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160     77     122
    BANK1           256      0     214
    BANK2           256     57      57
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    GroupCommon@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 101
		 -> STR_39(CODE[37]), STR_38(CODE[38]), STR_37(CODE[86]), STR_36(CODE[53]), 
		 -> STR_35(CODE[46]), STR_34(CODE[29]), STR_33(CODE[101]), STR_32(CODE[86]), 
		 -> STR_31(CODE[61]), STR_30(CODE[62]), STR_29(CODE[45]), STR_28(CODE[74]), 
		 -> STR_27(CODE[25]), STR_26(CODE[79]), STR_25(CODE[75]), STR_24(CODE[46]), 
		 -> STR_23(CODE[61]), STR_22(CODE[66]), STR_21(CODE[23]), STR_20(CODE[31]), 
		 -> STR_18(CODE[20]), STR_16(CODE[20]), STR_14(CODE[18]), STR_13(CODE[20]), 
		 -> STR_12(CODE[31]), STR_8(CODE[11]), STR_6(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_40(CODE[7]), STR_19(CODE[9]), STR_17(CODE[12]), STR_15(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), readUartByte@dest(BANK2[50]), SampleSingleChannel@dest(BANK2[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), STR_11(CODE[10]), STR_10(CODE[10]), 
		 -> STR_9(CODE[10]), readUartByte@dest(BANK2[50]), STR_7(CODE[9]), SampleSingleChannel@dest(BANK2[50]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[20]), STR_2(CODE[10]), 
		 -> STR_1(CODE[10]), 

    AdcSingleSample@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GroupTx->_AdcSingleSample
    _GroupRx->_AdcSingleSample
    _AdcSingleSample->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _ZeroArray->_memset
    _PrintHelpScreen->_sprintf
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    ___llmod->___lldiv
    _SendUartSystemInitMessage->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    _eval_poly->___ftmul
    ___ftmul->___ftdiv
    ___ftadd->___ftmul
    ___ftdiv->___lwtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _UART_Write_Text->_EUSART1_Write
    _InitSystemApplicationManagers->_PLLInitialize
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_make8
    _SWSPI_Synth_send_bits->_SwSpi_Clk_Pin
    _SWSPI_Synth_send_bits->_SwSpi_Data_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->i2___lwmod

Critical Paths under _main in BANK0

    _main->_SampleSingleChannel
    _readUartByte->_GroupCommon
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _AdcSingleSample->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _GroupCommon->_PrintHelpScreen
    _PrintHelpScreen->_sprintf
    _SendUartSystemInitMessage->_sprintf
    _SampleSingleChannel->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_SampleSingleChannel

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  179825
                        _BlinkOkLeds
      _InitSystemApplicationManagers
                _SampleSingleChannel
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                        56    56      0   44449
                                             62 BANK0      3     3      0
                                              0 BANK2     53    53      0
                       _EUSART1_Read
                        _GroupCommon *
                            _GroupRx *
                            _GroupTx *
                _InitRxMessageParams
                    _UART_Write_Text
                            _sprintf
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    1729
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupTx                                              3     1      2    9680
                                             59 BANK0      3     1      2
                    _AdcSingleSample
 ---------------------------------------------------------------------------------
 (2) _GroupRx                                              3     1      2    9680
                                             59 BANK0      3     1      2
                    _AdcSingleSample
 ---------------------------------------------------------------------------------
 (3) _AdcSingleSample                                      8     6      2    9618
                                             47 COMRAM     1     1      0
                                             21 BANK0      7     5      2
                 _GetIntFromUartData
                    _UART_Write_Text
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  17    13      4    4621
                                             45 COMRAM     2     2      0
                                              6 BANK0     15    11      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2273
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    1729
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _GroupCommon                                          3     1      2   11809
                                             59 BANK0      3     1      2
                    _PrintHelpScreen
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _PrintHelpScreen                                     50    50      0   11645
                                              9 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     772
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     772
                                             36 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           50    50      0   10839
                                              9 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SampleSingleChannel                                 59    59      0  107397
                                             75 BANK0      2     2      0
                                              0 BANK2     57    57      0
                  _ADC_GetConversion
                    _UART_Write_Text
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    16      6    6999
                                             35 COMRAM     7     1      6
                                              0 BANK0      9     9      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     852
                                             30 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83533
                                             58 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26852
                                             40 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   45364
                                             49 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     539
                                             40 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11674
                                             41 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     731
                                             18 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             33 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11935
                                             46 COMRAM     2     2      0
                                             30 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     702
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    5101
                                             43 COMRAM     3     3      0
                                              6 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             30 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             18 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    4173
                                             34 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3194
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      6     4      2    3432
                                             24 COMRAM     6     4      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      31
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   16180
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0    8289
                                             41 COMRAM     6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              0     0      0    7891
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (3) _SWSPI_send_word                                      9     4      5    7891
                                             32 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (4) _make8                                                9     4      5     870
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SWSPI_Synth_send_bits                                3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (4) _SWSPI_DAC_send_bits                                  3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Data_Pin                                       2     1      1     610
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Clk_Pin                                        2     1      1     762
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0     367
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0     367
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BlinkOkLeds
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SampleSingleChannel
     _ADC_GetConversion
     _UART_Write_Text
       _EUSART1_Write
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _SendUartSystemInitMessage
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _SetMcuRunTime
     ___llmod
       ___lldiv (ARG)
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _GroupCommon *
       _PrintHelpScreen
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _testLeds
     _GroupRx *
       _AdcSingleSample
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _GroupTx *
       _AdcSingleSample
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _UART_Write_Text *
       _EUSART1_Write
     _sprintf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _toupper *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     i2___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     39      39       8       22.3%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      D6       6       83.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     4D      7A       4       76.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D0       9        0.0%
DATA                 0      0     1D0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 26 09:44:37 2018

              __end_of_keepAliveSignalLed 2A24                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 00D9                             ___altoft@sign 0030  
                                      l44 2072                                        l46 20B8  
                     __end_of_BlinkOkLeds 2118                           _SWSPI_send_word 19FE  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 007D                              ___ftadd@exp2 007C  
                             __CFG_LVP$ON 000000             SampleSingleChannel@_adcResult 0235  
                            ___ftadd@sign 007B                               ?_MEMORY_ISR 0001  
                                     l100 1088                                       l110 1188  
                                     l102 113A                                       l200 02B8  
                                     l105 1156                                       l201 01D4  
                                     l106 116E                                       l202 021C  
                                     l115 13BC                                       l220 02EC  
                                     l212 0284                                       l109 117A  
                                     l221 032E                                       l213 02A4  
                                     l222 02F8                                       l206 0230  
                                     l207 0270                                       l224 035C  
                                     l217 02D0                                       l218 02E6  
                                     l236 1F56                                       l237 1F22  
                                     l181 00F4                                       l510 1A18  
                                     l183 010C                                       l520 1A84  
                                     l192 0154                                       l521 1A9C  
                                     l513 1A26                                       l193 01AE  
                                     l530 2230                                       l178 0396  
                                     l194 0162                                       l531 224A  
                                     l523 1AB2                                       l611 26E8  
                                     l179 00E8                                       l532 2254  
                                     l540 21FC                                       l516 1A72  
                                     l612 26C0                                       l196 016E  
                                     l188 0130                                       l621 26D4  
                                     l613 26CA                                       l445 0D7C  
                                     l197 017A                                       l622 26DE  
                                     l198 0186                                       l447 0DE6  
                                     l199 01C6                                       l632 2724  
                                     l545 2316                                       l529 2264  
                                     l537 220C                                       l633 26FC  
                                     l546 22DA                                       l538 21D8  
                                     l642 2710                                       l634 2706  
                                     l563 2302                                       l555 22EE  
                                     l547 22E4                                       l539 21F2  
                                     l643 271A                                       l564 230C  
                                     l556 22F8                                       l653 29E2  
                                     l574 236C                                       l654 29DA  
                                     l575 2330                                       l592 2358  
                                     l584 2344                                       l576 233A  
                                     l593 2362                                       l585 234E  
                                     l658 29DE                                       l781 2530  
                                     l792 2694                                       l793 26B8  
                                     l794 26B6                                       l779 250A  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                        PLLInitialize@idx 002C                                       _exp 062E  
                                     _log 1196                                       _pow 0ED8  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8            ?_InitSystemApplicationManagers 0001  
                            ___ftdiv@cntr 0060                              ___ftdiv@sign 0065  
                                    l1002 2858                                      l1103 2922  
                                    l2000 28BC                                      l1104 2916  
                                    l2010 28E2                                      l1106 291C  
                                    l1300 0A7E                                      l2005 2992  
                                    l2015 29B0                                      l1160 2176  
                                    l1312 0AD4                                      l1152 1B92  
                                    l1305 0AAC                                      l1162 217A  
                                    l1410 1E5C                                      l1306 0A22  
                                    l1163 217E                                      l2035 1920  
                                    l1411 1E50                                      l2027 11B2  
                                    l1164 2182                                      l2036 18A2  
                                    l1316 0B20                                      l1308 0A6A  
                                    l1084 264A                                      l1165 21B0  
                                    l2029 11D2                                      l1317 0B7A  
                                    l1309 0A4C                                      l1333 2290  
                                    l1077 265A                                      l1318 0B26  
                                    l1334 22A4                                      l1159 21B4  
                                    l1280 23FE                                      l1521 2748  
                                    l1089 2438                                      l1098 2428  
                                    l1282 2410                                      l1540 1ADE  
                                    l1604 15E8                                      l1612 1D4A  
                                    l1541 1AD4                                      l1621 151A  
                                    l1613 1D7A                                      l1606 1610  
                                    l1630 294A                                      l1622 154C  
                                    l1543 1B12                                      l1607 164E  
                                    l1623 155C                                      l1279 23E6  
                                    l1544 1AFC                                      l1608 1674  
                                    l1640 13FE                                      l1625 1574  
                                    l1546 1B3A                                      l1626 1584  
                                    l1642 1476                                      l1730 2398  
                                    l1298 0A02                                      l1547 1B30  
                                    l1571 0BFC                                      l1619 14F2  
                                    l1651 14B6                                      l1643 1466  
                                    l1299 0A1C                                      l1580 0C8C  
                                    l1636 25D8                                      l1740 258C  
                                    l1733 23C0                                      l1734 23CA  
                                    l1575 0C26                                      l1743 25AC  
                                    l1648 149A                                      l1744 25B6  
                                    l1920 0918                                      l1904 0860  
                                    l1680 1E0C                                      l1585 0C82  
                                    l1649 148E                                      l1729 23A0  
                                    l1753 288A                                      l1921 0984  
                                    l1681 1E1A                                      l1594 0CC0  
                                    l1586 0C78                                      l1770 0F9E  
                                    l1690 203A                                      l1754 287A  
                                    l1914 08DC                                      l1906 0878  
                                    l1595 0CB6                                      l1771 1046  
                                    l1739 2594                                      l1691 2048  
                                    l1923 09A8                                      l1915 08EC  
                                    l1924 09E4                                      l1908 08CC  
                                    l1676 1DD8                                      l1597 0CE4  
                                    l1765 0F22                                      l1917 0906  
                                    l1677 1DCC                                      l1598 0D00  
                                    l1766 0F12                                      l1686 2012  
                                    l1599 0D30                                      l1687 2006  
                                    l1768 0F3A                                      l1928 2A60  
                                    l1697 212A                                      l1769 0FC0  
                                    l1698 211E                                      l1963 0648  
                                    l1965 0680                                      l5182 1A40  
                                    l6230 1DA6                                      l1974 16E4  
                                    l1966 06B8                                      l1983 1CB2  
                                    l1975 16D6                                      l1991 19C6  
                                    l1967 06E8                                      l1992 19BA  
                                    l1968 0812                                      l1977 16FE  
                                    l1969 07E8                                      l5178 1A32  
                                    l1978 177A                                      l1987 1952  
                                    l1989 1998                                      l5472 0D6C  
                                    l6352 2682                                      l5562 20C4  
                                    l5482 0DC4                                      l7170 07E8  
                                    l6258 287A                                      ?_exp 0091  
                                    ?_log 0088                                      l5486 0DD6  
                                    l5496 0E2E                                      l6722 1B82  
                                    l6740 1BCA                                      l6786 0AD8  
                                    l6996 2062                                      ?_pow 009A  
                                    STR_1 7FD1                                      STR_2 7FD1  
                                    STR_3 7F94                                      STR_4 7FD1  
                                    STR_5 7FD1                                      STR_6 7FFA  
                                    STR_7 7FE4                                      STR_8 7FC6  
                                    STR_9 7FD1                                      _IOCB 000F62  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u5070 0DC4  
                                    u5150 2A16                                      u4290 21A8  
                                    u5090 0E2E                                      u6220 1AC6  
                                    u7020 1CDA                                      u7030 1F4E  
                                    u6310 28DE                                      u4295 219E  
                                    u4720 1A0E                                      u7040 1F82  
                                    u5168 2A18                                      u4810 1AA8  
                                    u6330 28AE                                      u7211 15F8  
                                    u6260 1B44                                      u7028 1CDC  
                                    u6420 0868                                      u7037 1F44  
                                    u7150 0B04                                      u7310 2016  
                                    u7047 1F78                                      u4760 1A66  
                                    u7080 1BCA                                      u6610 0BEE  
                                    u7170 0B82                                      u6450 08A2  
                                    u4780 1A8C                                      u7180 0B9A  
                                    u7500 1166                                      u6710 0C94  
                                    u7350 16F0                                      u6470 08B2  
                                    u7191 15CE                                      u6640 0C18  
                                    u7280 1DDC                                      u6801 1502  
                                    u8307 2104                                      u6571 0BBA  
                                    u6740 0CC8                                      u7460 112C  
                                    u6581 0BCE                                      u6670 0C56  
                                    u7390 1972                                      u8247 207A  
                                    u7720 12D4                                      u8257 208A  
                                    u6930 14A0                                      u8267 209A  
                                    u7580 06C2                                      u7900 0262  
                                    u6781 14DA                                      u8277 20AA  
                                    u7398 1976                                      u7590 06C4  
                                    u6871 13E2                                      u8287 13AC  
                                    u7680 0F88                                      u6960 23A4  
                                    u7920 0296                                      u7840 020E  
                                    u8297 20EA                                      u6890 141C  
                                    u6990 2598                                      u6895 1414  
                                    u7958 0370                                      u7959 038E  
                ??_SwSpi_Set_Synth_Le_Pin 0019                                      _WPUB 000F61  
                           _EUSART1_Write 2680                   ??_InitAdcApplicationMgr 0018  
                                    _main 23D4                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 2AB8                           __end_of_DacInit 1FF4  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0048  
                           __CFG_BORV$190 000000                                      exp@x 0091  
                                    log@x 0088                 SampleSingleChannel@adcRes 0237  
                        ?_ClearMcuRunTime 0001                                      pow@x 009A  
                                    pow@y 009D                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00DC  
                           __CFG_IESO$OFF 000000                             _adcSampleMode 003D  
             __end_of_SampleSingleChannel 13D0                           GroupCommon@data 009B  
                            ___ftmul@cntr 0070                              ___param_bank 000000  
                            ___ftmul@sign 0071                   __end_of_UART_Write_Text 1F8A  
                         __end_of_GroupRx 2680                           __end_of_GroupTx 246A  
                            ___fttol@exp1 0080                                     ??_exp 0031  
                                   ??_log 0031                              ___fttol@lval 007C  
                                   ??_pow 0031                   __end_of_TMR0_Initialize 280E  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 2A96  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                                   _EEADR 000FA9                           __end_of___ftadd 0D56  
                                   STR_10 7FD1                                     STR_11 7FD1  
                                   STR_20 7EEC                                     STR_12 7EEC  
                                   STR_13 7F58                                     STR_21 7F41  
                                   STR_14 7FA8                                     STR_30 7D2B  
                                   STR_22 7CE9                                     STR_15 7FF4  
                                   STR_31 7DA6                                     STR_23 7D69  
                                   STR_40 7FED                                     STR_16 7F80  
                                   STR_24 7E46                                     STR_32 7B59  
                                   STR_17 7FBA                                     STR_25 7C54  
                                   STR_33 7AF4           __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                                   STR_18 7F6C                                     STR_34 7F0B  
                                   STR_26 7C05                                     STR_19 7FDB  
                                   STR_27 7F28                                     STR_35 7E18  
                                   STR_36 7DE3                                     STR_28 7C9F  
                                   STR_29 7E74                                     STR_37 7BAF  
                                   STR_38 7EA1                                     STR_39 7EC7  
                         __end_of___ftdiv 16A6                           __end_of___ftneg 2958  
                         __end_of___lldiv 1E2C                           __end_of___ftmul 15BE  
                                   _T0CON 000FD5                           __end_of___llmod 205A  
                         __end_of___ftsub 2602                           __end_of___fttol 14C8  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwdiv 23D4  
                         __end_of___lwmod 25C0                                     i2l804 2816  
                                   i2l732 007A                                     i2l805 283A  
                                   i2l734 0086                                     i2l727 005E  
                                   i2l736 0090                                     i2l729 006A  
                                   i2l960 1C6C                                     i2l798 2798  
                                   i2l958 1C28                                     i2l799 2794  
                                   i2l959 1C4A                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                     _SWSPI_DAC_send_bits 2228         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                          ?_PrintHelpScreen 0001  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 1BF8  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001C  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 276C  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 1C8A  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 2AC0  
                                   _make8 2174                           __end_of_dpowers 7AB7  
          __size_of_SWSPI_Synth_send_bits 0058                                     _count 00B7  
                                   _floor 16A6                                     _ldexp 1938  
                                   _frexp 1C8A                                     _errno 00B1  
           __end_of_SWSPI_Synth_send_bits 2228                           __end_of_isalpha 28C4  
                         __end_of_isdigit 299A                                     _group 00BF  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                           ??_GroupCommon 0031                           __end_of_isspace 28EA  
                          ?_EUSART1_Write 0001                           __end_of_isupper 29B8  
                                   pclath 000FFA                                     tablat 000FF5  
                                   pow@yi 00A7                            ??_EUSART1_Read 0018  
                                   status 000FD8                                     wtemp6 0049  
                         __end_of_sprintf 0BA8                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 2A64            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
                             exp@exponent 0097                      ?_SWSPI_DAC_send_bits 001A  
                      __size_ofi2___lwmod 0042                               ldexp@newexp 008B  
                 __end_of_SWSPI_send_word 1AB6                               _BlinkOkLeds 20BA  
                         __initialization 1EA6                               log@exponent 008B  
              __end_of_EUSART1_Initialize 27DA                              __end_of_main 2422  
             ?_INTERRUPT_InterruptManager 0001                                    ??_main 0031  
                           ___fttol@sign1 007B                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 00C4                             __activetblptr 000002  
              ?_SendUartSystemInitMessage 0001                              _writeAddress 0042  
                      ??_SwSpi_Set_CE_Pin 0019                     ?_EUSART1_Transmit_ISR 0001  
                 __end_of_TMR0_StartTimer 2ABC                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 0089  
                                  ?_ldexp 0088                                    ?_frexp 0018  
                        __end_of___altoft 1EA6                          ___llmod@dividend 0025  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                 ??_DacInit 002A  
                                  _EECON2 000FA7                             ?_readUartByte 0001  
                        __end_of___awtoft 276C                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 1B64                          __end_of___lltoft 2174  
                                  i2l1740 2610                            __CFG_WDTEN$OFF 000000  
                                  i2l1743 2630                                    i2l1744 263A  
                                  i2l1739 2618                                    _TABLAT 000FF5  
                                  _RCREG1 000FAE                          __end_of___lwtoft 297C  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 29D6                   __size_of_SwSpi_Data_Pin 0056  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                   ??_SWSPI_DAC_send_bits 001B                       __end_of_GroupCommon 2934  
                               ??_GroupRx 0031                                 ??_GroupTx 0031  
                          __CFG_XINST$OFF 000000                               GroupRx@data 009B  
                             GroupTx@data 009B                                    _cState 00C0  
                                  ___ftge 1D1A                                    ___lmul 2280  
               SWSPI_Synth_send_bits@data 001A                                    ___wmul 28EA  
                               ??___ftadd 0078                            __CFG_STVREN$ON 000000  
                        ?_UART_Write_Text 0019                                 ??___ftdiv 0029  
                               ??___ftneg 001B                                 ??___lldiv 0020  
                               ??___ftmul 002C                     __end_of_PLLInitialize 0ED8  
                               ??___llmod 002D                                 ??___ftsub 002F  
                               ??___fttol 0076                                 ??___lwdiv 001C  
                               ??___lwmod 0023            SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                    AdcSingleSample@cType 0077                          ?_TMR0_Initialize 0001  
                                  _memset 2870                                    clear_0 1EEC  
                                  clear_1 1EF8                                    clear_2 1F04  
                                  _strtol 0820                                    floor@i 008C  
                   __end_of_SwSpi_Clk_Pin 2382                                    floor@x 0089  
                   ___ftmul@f3_as_product 006D                  SWSPI_DAC_send_bits@count 001B  
                            __pdataCOMRAM 0042                                 ??_isalpha 001B  
                               ??_isdigit 0018                          __end_of_testLeds 20BA  
                           ?_SetMcuSystem 0001         __end_of_SendUartSystemInitMessage 1862  
                            __mediumconst 7A44                                 ??_isspace 0018  
                       __end_ofi2___lwmod 2644                                    tblptrh 000FF7  
                               ??_isupper 0018                                    tblptrl 000FF6  
                                  tblptru 000FF8                  ADC_GetConversion@channel 001C  
                          ??_readUartByte 009E                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0044  
                        ?_PIN_MANAGER_IOC 0001                                 ??_sprintf 002A  
                         _eusart1RxBuffer 0146                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                         _eusart1TxBuffer 0100                          __end_ofexp@coeff 7AD9  
                       _SYSTEM_Initialize 29F2                          __end_oflog@coeff 7AF4  
                              __accesstop 0060                   __end_of__initialization 1F0A  
                              ___altoft@c 0081                             ZeroArray@size 0022  
                              ___ftadd@f1 0072                                ___ftadd@f2 0075  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 0085  
                           ___rparam_used 000001                                ___ftdiv@f1 0023  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0061  
                              ___ftneg@f1 0018                                ___awtoft@c 0020  
                              ___ftmul@f1 0066                                ___ftmul@f2 0069  
                        ?_SWSPI_send_word 0021                                ___ftsub@f1 007E  
                              ___ftsub@f2 0081                                ___fttol@f1 0072  
                      i2___lwmod@dividend 0001                            __pcstackCOMRAM 0001  
                            __pidataBANK0 2A78                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 21D0                             __end_of_floor 1788  
                           __end_of_ldexp 19FE                             __end_of_frexp 1D1A  
                  _SwSpi_Set_Synth_Le_Pin 26F8                                ___lwtoft@c 0020  
                    __end_of_EUSART1_Read 253A                              ??_MEMORY_ISR 0001  
                  __size_of_SetMcuRunTime 0044                    ??_EUSART1_Transmit_ISR 0001  
                          ??_SetMcuSystem 001C                     TMR0_ISR@CountCallBack 0035  
           SwSpi_Set_Synth_Le_Pin@phrType 0019                        _keepAliveSignalLed 2A0C  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 2840  
                __size_of_AdcSingleSample 0142                                   ??_make8 001D  
                                 ??_floor 0031                          ?_TMR0_StartTimer 0001  
                                 ??_ldexp 008D                                   ??_frexp 001D  
               __end_of_SYSTEM_Initialize 2A0C                             _eusart1RxHead 003A  
                     PrintHelpScreen@dest 0069                             _eusart1TxHead 003C  
                           _eusart1RxTail 0039                                __pbssBANK0 00AD  
                              __pbssBANK1 0100                               _GroupCommon 2910  
                           _eusart1TxTail 003B                       ?_keepAliveSignalLed 0001  
                      __size_of_eval_poly 00D6                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 7AB7                                _channelNum 0037  
                              __pnvCOMRAM 0046            __size_of_InitAdcApplicationMgr 0006  
           __end_of_InitAdcApplicationMgr 2AB0                        __end_of_MEMORY_ISR 2AC4  
         ??_InitSystemApplicationManagers 0030                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018          __end_of_TMR0_SetInterruptHandler 2AAA  
                                 ?___lmul 0018                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                    ??_keepAliveSignalLed 0018                         __end_of_ZeroArray 29D6  
                               ?___altoft 0081                                   ?_memset 0018  
                          ___lmul@product 0020                                 ?___awtoft 0020  
                               ?___ftpack 0018                                 ?___lltoft 0020  
                 __size_of_ADC_Initialize 0016                                 ?___lwtoft 0020  
                                 ?_strtol 0024                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                           readUartByte@idx 0232  
                 SampleSingleChannel@dest 0200                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                                   _DacInit 1F8A  
                   GetIntFromUartData@idx 0073                            _SwSpi_Data_Pin 22D6  
                           _SetMcuRunTime 253A                        _GetIntFromUartData 1B64  
                         __CFG_PWRTEN$OFF 000000                                   _GroupRx 2644  
                                 _GroupTx 2422                                   __Hparam 0000  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                               ?_testLeds 0001                      PLLInitialize@idx_592 002E  
                     ?_GetIntFromUartData 0066                           __size_of___ftge 0090  
                         __size_of___lmul 0056                                   ___ftadd 0BA8  
                                 ___ftdiv 15BE                      __end_of_readUartByte 03CC  
                                 ___ftneg 2934                                   ___lldiv 1DAA  
                         __size_of___wmul 0026                                   ___ftmul 14C8  
                                 ___llmod 1FF4                                   ___ftsub 25C0  
                                 ___fttol 13D0                                   ___lwdiv 2382  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 257E  
                              ??___altoft 0085                SWSPI_Synth_send_bits@count 001B  
                   _mcuRunTimeIn5SecTicks 00AD                                   _crcCalc 00BC  
                                 _channel 00C2                                   __pcinit 1EA6  
                              ??___awtoft 0023                                ??___ftpack 001D  
                       __end_of_eval_poly 1938                           __size_of_memset 002C  
                                 __ramtop 0600              __size_of_SampleSingleChannel 0118  
                              ??___lltoft 0024                                   __ptext0 23D4  
                                 __ptext1 00E0                                   __ptext2 24B2  
                                 __ptext3 2910                                   __ptext4 2644  
                                 __ptext5 2422                                   __ptext6 1054  
                                 __ptext7 1DAA                                   __ptext8 1B64  
                                 __ptext9 0820                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                           __size_of_strtol 01D6  
                                 _dpowers 7AAD                     _OSCILLATOR_Initialize 2A88  
                                 _isalpha 289C                              __size_of_exp 01F2  
                            __size_of_log 0122                                   _isdigit 297C  
                            __size_of_pow 017C               ??_SendUartSystemInitMessage 002B  
                      _EUSART1_Initialize 27A4                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 28C4                                   _isupper 299A  
                   AdcSingleSample@retNum 0078                                   _request 00BE  
                    ??_GetIntFromUartData 002E                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                                   _sprintf 09F6  
                  __end_of_SwSpi_Data_Pin 232C                                   _toupper 2A50  
                    end_of_initialization 1F0A                                   exp@sign 0099  
                     ?_EUSART1_Initialize 0001                     _SWSPI_Synth_send_bits 21D0  
              __end_of_TEST_PLL_REGISTERS 7A79                  __size_of_PrintHelpScreen 0262  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 7A44  
                       ??_AdcSingleSample 0030                           ___lldiv@divisor 001C  
                              _numSamples 00B5                      __end_of_SetMcuSystem 2AA0  
                                 pow@sign 00A6                           ___lldiv@counter 0024  
                       readUartByte@chRec 0234                                ??_testLeds 0018  
                    SWSPI_send_word@datac 0026                                _rxMsgQueue 01C2  
                                 postdec1 000FE5                                   postdec2 000FDD  
              __end_of_PLL_INIT_REGISTERS 7AAD                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 24B2                               testLeds@idx 0019  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 2A50  
  __size_of_InitSystemApplicationManagers 0016             _InitSystemApplicationManagers 2A3A  
                                 strtol@a 0061                                   strtol@c 0065  
                                 strtol@s 0024                  _TMR0_SetInterruptHandler 2AA0  
                          ZeroArray@array 0020            __end_of_SwSpi_Set_Dac_Sync_Pin 29F2  
                            strtol@endptr 0026                      ?_InitRxMessageParams 0001  
                     EUSART1_Write@txData 0018                           ?_SwSpi_Data_Pin 0018  
             __end_of_SWSPI_DAC_send_bits 2280                                 i2___lwmod 2602  
           SendUartSystemInitMessage@dest 0069                               ___ftdiv@exp 0064  
                            _EUSART1_Read 24F6                 _SendUartSystemInitMessage 1788  
                             ___ftmul@exp 006C                   ?_SwSpi_Set_Synth_Le_Pin 0018  
                            _needToSample 00C3              __end_of_INTERRUPT_Initialize 2AB8  
                          __end_of___ftge 1DAA                            __end_of___lmul 22D6  
                      GroupCommon@request 009D                            __end_of___wmul 2910  
                           __pidataCOMRAM 2AB0                         __size_of_TMR0_ISR 0092  
                          _ADC_Initialize 2A24                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 289C                                floor@expon 008F  
                __size_of_UART_Write_Text 0072                         ??_ClearMcuRunTime 0018  
                          __end_of_strtol 09F6                       start_initialization 1EA6  
                              eval_poly@d 0081                                eval_poly@n 0083  
                              eval_poly@x 007E                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 0088  
         __size_of_PIN_MANAGER_Initialize 0048                     ??_InitRxMessageParams 0024  
                             __end_of_exp 0820                               __end_of_log 12B8  
                             __end_of_pow 1054                    ?_SWSPI_Synth_send_bits 001A  
                              ?i2___lwmod 0001                           ??_SetMcuRunTime 002E  
                            ?_GroupCommon 009B                     __end_of_EUSART1_Write 26BC  
                  __size_of_PLLInitialize 0182                                frexp@value 0018  
                         ___llmod@divisor 0029                           ___llmod@counter 002D  
                __size_of_PIN_MANAGER_IOC 0004                     __size_of_readUartByte 02EC  
                  __size_of_SwSpi_Clk_Pin 0056            __end_of_SwSpi_Set_Synth_Le_Pin 2734  
                       ??_PrintHelpScreen 002B                                  ??___ftge 001E  
                                ??___lmul 0020                                  ??___wmul 001C  
                     AdcSingleSample@data 0075                      __size_of_BlinkOkLeds 005E  
                  __end_of_ADC_Initialize 2A3A                               __pdataBANK0 00C7  
                 SWSPI_DAC_send_bits@data 001A                            GroupRx@request 009D  
                                ??_memset 001E                  __size_of_SWSPI_send_word 00B8  
                                ??_strtol 002A                            _eusart1RxCount 00C1  
                       __size_of___altoft 007A                                 _ZeroArray 29B8  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                          GroupTx@request 009D                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK2 0200                              _isalpha$2609 001C  
                       i2___lwmod@divisor 0003                         i2___lwmod@counter 0005  
                            _isdigit$2612 0019                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                              _readUartByte 00E0  
                   __size_of_SetMcuSystem 000A                          _SwSpi_Set_CE_Pin 26BC  
                     _SampleSingleChannel 12B8              __size_of_EUSART1_Receive_ISR 0032  
                             sprintf@flag 0060                               sprintf@prec 0061  
                   _TMR0_InterruptHandler 00D7                                 __pnvBANK0 00D7  
                __size_of_TMR0_StartTimer 0004                                  ?_GroupRx 009B  
                                ?_GroupTx 009B                          ___lwdiv@dividend 0018  
                  _PIN_MANAGER_Initialize 246A                     _InitAdcApplicationMgr 2AAA  
                               __pintcode 0008                             __pmediumconst 7A44  
                                ?___ftadd 0072                                  ?___ftdiv 0023  
                                ?___ftneg 0018                                  ?___lldiv 0018  
                                ?___ftmul 0066                                  ?___llmod 0025  
                                ?___ftsub 007E                                  ?___fttol 0072  
                                ?___lwdiv 0018                                  ?___lwmod 001F  
                         ?_ADC_Initialize 0001                         __size_of_testLeds 0060  
                           _PLLInitialize 0D56               __size_of_keepAliveSignalLed 0018  
                    ?_SampleSingleChannel 0001              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                                ?_ZeroArray 0020  
                                _BAUDCON1 000FB8                             _SwSpi_Clk_Pin 232C  
                                ?_isalpha 0001                                  ?_isdigit 0001  
                               _eval_poly 1862                           _TimerOneSecFlag 00C6  
                                ?_isspace 0001                           _AdcSingleSample 1054  
                            _SetMcuSystem 2A96                                  ?_isupper 0001  
                        ___lwdiv@quotient 001D                            __size_of_make8 005C  
                                ?_sprintf 0024                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                                ?_toupper 0001                               ??i2___lwmod 0005  
                       ??_UART_Write_Text 001B                      _INTERRUPT_Initialize 2AB4  
                       ??_TMR0_Initialize 001A                            ___wmul@product 001C  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                                i2u511_40 261C                                  _PIR1bits 000F9E  
                                _PIR2bits 000FA1                                 _rxMsgData 01AE  
                        readUartByte@dest 0200                       SWSPI_send_word@data 0021  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                               make8@data 0018                                  _TMR0_ISR 1BF8  
                      _TEST_PLL_REGISTERS 7A45                            ?_PLLInitialize 0001  
                       ??_PIN_MANAGER_IOC 0001                     ??_SampleSingleChannel 00AB  
      __size_of_SendUartSystemInitMessage 00DA                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 0025                                _ADCON0bits 000FC2  
                       ___wmul@multiplier 0018                            ?_SwSpi_Clk_Pin 0018  
                      __end_of_channelArr 7ABB                          ??_SwSpi_Data_Pin 0019  
                              ?_eval_poly 007E                        _PLL_INIT_REGISTERS 7A79  
                            _isspace$2615 0019                         ??_SWSPI_send_word 0026  
             __size_of_GetIntFromUartData 0094                         ___lmul@multiplier 0018  
                             _INTCON2bits 000FF1                                 copy_data0 1EBA  
                               copy_data1 1EDA                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 006A                  _SampleSingleChannel$2939 0232  
                   EUSART1_Read@readValue 0019                      __size_of_GroupCommon 0024  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                                __Hrparam 0000                    ?_InitAdcApplicationMgr 0001  
                        __size_of_GroupRx 003C                          __size_of_GroupTx 0048  
                             _readAddress 00D3                                  __Lrparam 0000  
                       _ADC_GetConversion 2840                        __CFG_BOREN$SBORDIS 000000  
                         _ClearMcuRunTime 2A64                         __CFG_P2BMX$PORTD2 000000  
                 ??_OSCILLATOR_Initialize 0018                        ?_ADC_GetConversion 0018  
                       ??_TMR0_StartTimer 0018                          __size_of___ftadd 01AE  
                        __size_of___ftdiv 00E8                      _numOfValidateSamples 0031  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                                ___altoft 1E2C                          __size_of___ftmul 00F6  
                        __size_of___llmod 0066                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0036  
                        __size_of___lwdiv 0052                   __end_of_AdcSingleSample 1196  
                        __size_of___lwmod 0042                                  ___awtoft 2734  
                                ___ftpack 1AB6                          _numOfReadSamples 003E  
                                ___lltoft 2118                                  ___lwtoft 2958  
                             ??_ZeroArray 0024                       ??_ADC_GetConversion 001A  
                                _exp$2942 0094                              _isupper$2618 0019  
                              sprintf@val 0066                                  _dataSize 00BD  
                   SwSpi_Clk_Pin@cPinMode 0018                          __size_of_isalpha 0028  
                                _crcGiven 00BB                          __size_of_isdigit 001E  
                 ??_SWSPI_Synth_send_bits 001B                           ___lwdiv@divisor 001A  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                         ___lwdiv@counter 001C                                  __ptext10 2A50  
                                __ptext11 28C4                                  __ptext20 24F6  
                                __ptext12 297C                                  __ptext21 2A0C  
                                __ptext13 289C                                  __ptext30 2A24  
                                __ptext22 2A96                                  __ptext14 299A  
                                __ptext31 253A                                  __ptext23 29F2  
                                __ptext15 2280                                  __ptext40 062E  
                                __ptext32 1FF4                                  __ptext24 27DA  
                                __ptext16 29B8                                  __ptext41 1938  
                                __ptext33 1788                                  __ptext25 2AA0  
                                __ptext17 2870                                  __ptext50 25C0  
                                __ptext42 16A6                                  __ptext34 12B8  
                                __ptext26 246A                                  __ptext18 205A  
                                __ptext51 0BA8                                  __ptext43 1C8A  
                                __ptext35 09F6                                  __ptext27 2A88  
                                __ptext19 03CC                                  __ptext60 2840  
                                __ptext52 2934                                  __ptext44 13D0  
                                __ptext36 257E                                  __ptext28 2AB4  
                                __ptext61 2A3A                                  __ptext53 15BE  
                                __ptext45 1D1A                                  __ptext37 2382  
                                __ptext29 27A4                                  __ptext70 29D6  
                                __ptext62 2AB8                                  __ptext54 2734  
                                __ptext46 1E2C                                  __ptext38 0ED8  
                                __ptext71 21D0                                  __ptext63 0D56  
                                __ptext55 2118                                  __ptext47 1862  
                                __ptext39 1196                                  __ptext80 2ABC  
                                __ptext72 2228                                  __ptext64 26BC  
                                __ptext56 2958                                  __ptext48 28EA  
                                __ptext81 2AC0                                  __ptext73 22D6  
                                __ptext65 2AAA                                  __ptext57 1AB6  
                                __ptext49 14C8                                  __ptext82 276C  
                                __ptext74 232C                                  __ptext66 1F8A  
                                __ptext58 1F18                                  __ptext83 280E  
                                __ptext75 2A64                                  __ptext67 19FE  
                                __ptext59 2680                                  __ptext84 0000  
                                __ptext76 20BA                                  __ptext68 2174  
                                __ptext69 26F8                                  __ptext78 1BF8  
                                __ptext79 2602                          __size_of_isupper 001E  
            SWSPI_Synth_send_bits@phrType 001C                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$2940 00A0                                  _pow$2941 00A3  
                     GetIntFromUartData@c 0072                           _PrintHelpScreen 03CC  
                        __size_of_sprintf 01B2                          __size_of_toupper 0014  
                     UART_Write_Text@text 0019                             __size_of_main 004E  
                                _msgCount 00BA              _TMR0_DefaultInterruptHandler 000000  
               __end_of_ADC_GetConversion 2870              __size_of_SWSPI_DAC_send_bits 0058  
                      SWSPI_send_word@idx 0027                               _groupsArray 00C7  
                         ??_PLLInitialize 002A                                  _testLeds 205A  
                                int$flags 0048                                strtol@base 0028  
                              strtol@sign 0060        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                           ??_SwSpi_Clk_Pin 0019  
                     _EUSART1_Receive_ISR 280E                  __end_of_SwSpi_Set_CE_Pin 26F8  
             __end_of_InitRxMessageParams 24F6                                  exp@coeff 7ABB  
                              _MEMORY_ISR 2AC0                                  log@coeff 7AD9  
                  SWSPI_send_word@phrType 0029                                _INTCONbits 000FF2  
                             ??_eval_poly 002F                               _sampleArray 016E  
                             _sampleCount 00B3                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                                  intlevel2 0000  
                               sprintf@ap 0062                                 sprintf@cp 0064  
                               sprintf@sp 0024                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 257E                          ___lwmod@dividend 001F  
                                isspace@c 001A                          ___lldiv@dividend 0018  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 2A78  
                              _RCSTA1bits 000FAB                                  isupper@c 001A  
            __end_of_EUSART1_Transmit_ISR 27A4                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                         _TimerSamplingFlag 00C5  
                           _isReWriteDone 00B9                      SwSpi_Clk_Pin@phrType 0019  
                   SwSpi_Data_Pin@phrType 0019                   SwSpi_Set_CE_Pin@phrType 0019  
                        ?_AdcSingleSample 0075                    __size_of_EUSART1_Write 003C  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                           _UART_Write_Text 1F18  
                                sprintf@c 0068                                  sprintf@f 0026  
                        ___lldiv@quotient 0020                           ___lwmod@divisor 0021  
                         _TMR0_Initialize 27DA                   __end_of_PrintHelpScreen 062E  
                         ___lwmod@counter 0023                                  toupper@c 0018  
                       __CFG_T3CMX$PORTC0 000000                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 24B2                          UART_Write_Text@i 001D  
            GetIntFromUartData@dataRegArr 006A                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 2ABC                __size_of_ADC_GetConversion 0030  
